/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_PostMediaTypesOctetStreamBodySchema,
  t_PostMediaTypesTextBodySchema,
  t_PostMediaTypesXWwwFormUrlencodedBodySchema,
  t_ProductOrder,
} from "../models"
import {s_ProductOrder} from "../schemas"
import KoaRouter, {RouterContext} from "@koa/router"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Params,
  Response,
  SkipResponse,
  StatusCode,
  parseOctetStream,
} from "@nahkies/typescript-koa-runtime/server"
import {
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import {Next} from "koa"
import {z} from "zod"

export type PostMediaTypesTextResponder = {
  with200(): KoaRuntimeResponse<string>
} & KoaRuntimeResponder

export type PostMediaTypesText = (
  params: Params<void, void, t_PostMediaTypesTextBodySchema, void>,
  respond: PostMediaTypesTextResponder,
  ctx: RouterContext,
  next: Next,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, string> | typeof SkipResponse
>

export type PostMediaTypesXWwwFormUrlencodedResponder = {
  with200(): KoaRuntimeResponse<t_ProductOrder>
} & KoaRuntimeResponder

export type PostMediaTypesXWwwFormUrlencoded = (
  params: Params<
    void,
    void,
    t_PostMediaTypesXWwwFormUrlencodedBodySchema,
    void
  >,
  respond: PostMediaTypesXWwwFormUrlencodedResponder,
  ctx: RouterContext,
  next: Next,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_ProductOrder>
  | typeof SkipResponse
>

export type PostMediaTypesOctetStreamResponder = {
  with200(): KoaRuntimeResponse<Blob>
} & KoaRuntimeResponder

export type PostMediaTypesOctetStream = (
  params: Params<void, void, t_PostMediaTypesOctetStreamBodySchema, void>,
  respond: PostMediaTypesOctetStreamResponder,
  ctx: RouterContext,
  next: Next,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, Blob> | typeof SkipResponse
>

export type MediaTypesImplementation = {
  postMediaTypesText: PostMediaTypesText
  postMediaTypesXWwwFormUrlencoded: PostMediaTypesXWwwFormUrlencoded
  postMediaTypesOctetStream: PostMediaTypesOctetStream
}

export function createMediaTypesRouter(
  implementation: MediaTypesImplementation,
): KoaRouter {
  const router = new KoaRouter()

  const postMediaTypesTextBodySchema = z.string()

  const postMediaTypesTextResponseValidator = responseValidationFactory(
    [["200", z.string()]],
    undefined,
  )

  router.post("postMediaTypesText", "/media-types/text", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        postMediaTypesTextBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<string>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const response = await implementation
      .postMediaTypesText(input, responder, ctx, next)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    // escape hatch to allow responses to be sent by the implementation handler
    if (response === SkipResponse) {
      return
    }

    const {status, body} =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = postMediaTypesTextResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postMediaTypesXWwwFormUrlencodedBodySchema = s_ProductOrder

  const postMediaTypesXWwwFormUrlencodedResponseValidator =
    responseValidationFactory([["200", s_ProductOrder]], undefined)

  router.post(
    "postMediaTypesXWwwFormUrlencoded",
    "/media-types/x-www-form-urlencoded",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postMediaTypesXWwwFormUrlencodedBodySchema,
          Reflect.get(ctx.request, "body"),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<t_ProductOrder>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .postMediaTypesXWwwFormUrlencoded(input, responder, ctx, next)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      // escape hatch to allow responses to be sent by the implementation handler
      if (response === SkipResponse) {
        return
      }

      const {status, body} =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = postMediaTypesXWwwFormUrlencodedResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postMediaTypesOctetStreamBodySchema = z.any()

  const postMediaTypesOctetStreamResponseValidator = responseValidationFactory(
    [["200", z.any()]],
    undefined,
  )

  router.post(
    "postMediaTypesOctetStream",
    "/media-types/octet-stream",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postMediaTypesOctetStreamBodySchema,
          await parseOctetStream(ctx),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<Blob>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .postMediaTypesOctetStream(input, responder, ctx, next)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      // escape hatch to allow responses to be sent by the implementation handler
      if (response === SkipResponse) {
        return
      }

      const {status, body} =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = postMediaTypesOctetStreamResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  return router
}

export {createMediaTypesRouter as createRouter}
export type {MediaTypesImplementation as Implementation}
