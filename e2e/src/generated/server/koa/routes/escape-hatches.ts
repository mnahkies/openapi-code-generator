/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import KoaRouter, {RouterContext} from "@koa/router"
import {KoaRuntimeError} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Params,
  Response,
  SkipResponse,
  StatusCode,
} from "@nahkies/typescript-koa-runtime/server"
import {responseValidationFactory} from "@nahkies/typescript-koa-runtime/zod-v4"
import {Next} from "koa"
import {z} from "zod/v4"

export type GetEscapeHatchesPlainTextResponder = {
  with200(): KoaRuntimeResponse<string>
} & KoaRuntimeResponder

export type GetEscapeHatchesPlainText = (
  params: Params<void, void, void, void>,
  respond: GetEscapeHatchesPlainTextResponder,
  ctx: RouterContext,
  next: Next,
) => Promise<
  KoaRuntimeResponse<unknown> | Response<200, string> | typeof SkipResponse
>

export type EscapeHatchesImplementation = {
  getEscapeHatchesPlainText: GetEscapeHatchesPlainText
}

export function createEscapeHatchesRouter(
  implementation: EscapeHatchesImplementation,
): KoaRouter {
  const router = new KoaRouter()

  const getEscapeHatchesPlainTextResponseValidator = responseValidationFactory(
    [["200", z.string()]],
    undefined,
  )

  router.get(
    "getEscapeHatchesPlainText",
    "/escape-hatches/plain-text",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const responder = {
        with200() {
          return new KoaRuntimeResponse<string>(200)
        },
        withStatus(status: StatusCode) {
          return new KoaRuntimeResponse(status)
        },
      }

      const response = await implementation
        .getEscapeHatchesPlainText(input, responder, ctx, next)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      // escape hatch to allow responses to be sent by the implementation handler
      if (response === SkipResponse) {
        return
      }

      const {status, body} =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = getEscapeHatchesPlainTextResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  return router
}

export {createEscapeHatchesRouter as createRouter}
export type {EscapeHatchesImplementation as Implementation}
