/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_GetHeadersRequestHeaderSchema,
  t_getHeadersRequestJson200Response,
  t_getHeadersUndeclaredJson200Response,
} from "../models"
import {
  s_getHeadersRequestJson200Response,
  s_getHeadersUndeclaredJson200Response,
} from "../schemas"
import KoaRouter, { RouterContext } from "@koa/router"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Params,
  Response,
  r,
} from "@nahkies/typescript-koa-runtime/server"
import {
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import { z } from "zod"

const getHeadersUndeclaredResponder = {
  with200: r.with200<t_getHeadersUndeclaredJson200Response>,
  withStatus: r.withStatus,
}

type GetHeadersUndeclaredResponder = typeof getHeadersUndeclaredResponder &
  KoaRuntimeResponder

const getHeadersUndeclaredResponseValidator = responseValidationFactory(
  [["200", s_getHeadersUndeclaredJson200Response]],
  undefined,
)

export type GetHeadersUndeclared = (
  params: Params<void, void, void, void>,
  respond: GetHeadersUndeclaredResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_getHeadersUndeclaredJson200Response>
>

const getHeadersRequestResponder = {
  with200: r.with200<t_getHeadersRequestJson200Response>,
  withStatus: r.withStatus,
}

type GetHeadersRequestResponder = typeof getHeadersRequestResponder &
  KoaRuntimeResponder

const getHeadersRequestResponseValidator = responseValidationFactory(
  [["200", s_getHeadersRequestJson200Response]],
  undefined,
)

export type GetHeadersRequest = (
  params: Params<void, void, void, t_GetHeadersRequestHeaderSchema>,
  respond: GetHeadersRequestResponder,
  ctx: RouterContext,
) => Promise<
  | KoaRuntimeResponse<unknown>
  | Response<200, t_getHeadersRequestJson200Response>
>

export type RequestHeadersImplementation = {
  getHeadersUndeclared: GetHeadersUndeclared
  getHeadersRequest: GetHeadersRequest
}

export function createRequestHeadersRouter(
  implementation: RequestHeadersImplementation,
): KoaRouter {
  const router = new KoaRouter()

  router.get(
    "getHeadersUndeclared",
    "/headers/undeclared",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .getHeadersUndeclared(input, getHeadersUndeclaredResponder, ctx)
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = getHeadersUndeclaredResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getHeadersRequestHeaderSchema = z.object({
    "route-level-header": z.string().optional(),
    "number-header": z.coerce.number().optional(),
    authorization: z.string().optional(),
  })

  router.get("getHeadersRequest", "/headers/request", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: parseRequestInput(
        getHeadersRequestHeaderSchema,
        Reflect.get(ctx.request, "headers"),
        RequestInputType.RequestHeader,
      ),
    }

    const response = await implementation
      .getHeadersRequest(input, getHeadersRequestResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getHeadersRequestResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  return router
}

export { createRequestHeadersRouter as createRouter }
export type { RequestHeadersImplementation as Implementation }
