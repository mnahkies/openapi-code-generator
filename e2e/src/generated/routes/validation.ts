/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_Enumerations,
  t_GetValidationNumbersRandomNumberQuerySchema,
  t_PostValidationEnumsBodySchema,
  t_RandomNumber,
} from "../models"
import { s_Enumerations, s_RandomNumber } from "../schemas"
import KoaRouter, { RouterContext } from "@koa/router"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  Params,
  Response,
  r,
} from "@nahkies/typescript-koa-runtime/server"
import {
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import { z } from "zod"

const getValidationNumbersRandomNumberResponder = {
  with200: r.with200<t_RandomNumber>,
  withStatus: r.withStatus,
}

type GetValidationNumbersRandomNumberResponder =
  typeof getValidationNumbersRandomNumberResponder & KoaRuntimeResponder

const getValidationNumbersRandomNumberResponseValidator =
  responseValidationFactory([["200", s_RandomNumber]], undefined)

export type GetValidationNumbersRandomNumber = (
  params: Params<
    void,
    t_GetValidationNumbersRandomNumberQuerySchema,
    void,
    void
  >,
  respond: GetValidationNumbersRandomNumberResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_RandomNumber>>

const postValidationEnumsResponder = {
  with200: r.with200<t_Enumerations>,
  withStatus: r.withStatus,
}

type PostValidationEnumsResponder = typeof postValidationEnumsResponder &
  KoaRuntimeResponder

const postValidationEnumsResponseValidator = responseValidationFactory(
  [["200", s_Enumerations]],
  undefined,
)

export type PostValidationEnums = (
  params: Params<void, void, t_PostValidationEnumsBodySchema, void>,
  respond: PostValidationEnumsResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<200, t_Enumerations>>

const getResponsesEmptyResponder = {
  with204: r.with204<void>,
  withStatus: r.withStatus,
}

type GetResponsesEmptyResponder = typeof getResponsesEmptyResponder &
  KoaRuntimeResponder

const getResponsesEmptyResponseValidator = responseValidationFactory(
  [["204", z.undefined()]],
  undefined,
)

export type GetResponsesEmpty = (
  params: Params<void, void, void, void>,
  respond: GetResponsesEmptyResponder,
  ctx: RouterContext,
) => Promise<KoaRuntimeResponse<unknown> | Response<204, void>>

export type ValidationImplementation = {
  getValidationNumbersRandomNumber: GetValidationNumbersRandomNumber
  postValidationEnums: PostValidationEnums
  getResponsesEmpty: GetResponsesEmpty
}

export function createValidationRouter(
  implementation: ValidationImplementation,
): KoaRouter {
  const router = new KoaRouter()

  const getValidationNumbersRandomNumberQuerySchema = z.object({
    max: z.coerce.number().min(1).optional().default(10),
    min: z.coerce.number().min(0).optional().default(0),
    forbidden: z
      .preprocess(
        (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
        z.array(z.coerce.number()),
      )
      .optional(),
  })

  router.get(
    "getValidationNumbersRandomNumber",
    "/validation/numbers/random-number",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getValidationNumbersRandomNumberQuerySchema,
          ctx.query,
          RequestInputType.QueryString,
        ),
        body: undefined,
        headers: undefined,
      }

      const response = await implementation
        .getValidationNumbersRandomNumber(
          input,
          getValidationNumbersRandomNumberResponder,
          ctx,
        )
        .catch((err) => {
          throw KoaRuntimeError.HandlerError(err)
        })

      const { status, body } =
        response instanceof KoaRuntimeResponse ? response.unpack() : response

      ctx.body = getValidationNumbersRandomNumberResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postValidationEnumsBodySchema = s_Enumerations

  router.post("postValidationEnums", "/validation/enums", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(
        postValidationEnumsBodySchema,
        Reflect.get(ctx.request, "body"),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const response = await implementation
      .postValidationEnums(input, postValidationEnumsResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = postValidationEnumsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  router.get("getResponsesEmpty", "/responses/empty", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const response = await implementation
      .getResponsesEmpty(input, getResponsesEmptyResponder, ctx)
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    const { status, body } =
      response instanceof KoaRuntimeResponse ? response.unpack() : response

    ctx.body = getResponsesEmptyResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  return router
}

export { createValidationRouter as createRouter }
export type { ValidationImplementation as Implementation }
