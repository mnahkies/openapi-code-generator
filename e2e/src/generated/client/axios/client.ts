/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_RandomNumber,
  t_getHeadersRequestJson200Response,
  t_getHeadersUndeclaredJson200Response,
} from "./models"
import {
  AbstractAxiosClient,
  AbstractAxiosConfig,
} from "@nahkies/typescript-axios-runtime/main"
import { AxiosRequestConfig, AxiosResponse } from "axios"

export interface ApiClientConfig extends AbstractAxiosConfig {}

export class ApiClient extends AbstractAxiosClient {
  constructor(config: ApiClientConfig) {
    super(config)
  }

  async getHeadersUndeclared(
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_getHeadersUndeclaredJson200Response>> {
    const url = `/headers/undeclared`
    const headers = this._headers({}, opts.headers)

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getHeadersRequest(
    p: {
      routeLevelHeader?: string
      authorization?: string
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_getHeadersRequestJson200Response>> {
    const url = `/headers/request`
    const headers = this._headers(
      {
        "route-level-header": p["routeLevelHeader"],
        Authorization: p["authorization"],
      },
      opts.headers,
    )

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getValidationNumbersRandomNumber(
    p: {
      max?: number
      min?: number
      forbidden?: number[]
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_RandomNumber>> {
    const url = `/validation/numbers/random-number`
    const headers = this._headers({}, opts.headers)
    const query = this._query({
      max: p["max"],
      min: p["min"],
      forbidden: p["forbidden"],
    })

    return this._request({
      url: url + query,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }
}
