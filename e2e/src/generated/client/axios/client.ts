/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_RandomNumber,
  t_getHeadersRequestJson200Response,
  t_getHeadersUndeclaredJson200Response,
} from "./models"
import {
  AbstractAxiosClient,
  AbstractAxiosConfig,
  Server,
} from "@nahkies/typescript-axios-runtime/main"
import { AxiosRequestConfig, AxiosResponse } from "axios"

export class E2ETestClientServers {
  static default(): Server<"E2ETestClient"> {
    return E2ETestClientServers.server().build()
  }

  static server(url: "http://localhost:{port}" = "http://localhost:{port}"): {
    build: (port?: string) => Server<"E2ETestClient">
  } {
    switch (url) {
      case "http://localhost:{port}":
        return {
          build(port = "8080"): Server<"E2ETestClient"> {
            return "http://localhost:{port}".replace(
              "{port}",
              port,
            ) as Server<"E2ETestClient">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }
}

export interface E2ETestClientConfig extends AbstractAxiosConfig {
  basePath: Server<"E2ETestClient"> | string
}

export class E2ETestClient extends AbstractAxiosClient {
  constructor(config: E2ETestClientConfig) {
    super(config)
  }

  async getHeadersUndeclared(
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_getHeadersUndeclaredJson200Response>> {
    const url = `/headers/undeclared`
    const headers = this._headers({}, opts.headers)

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getHeadersRequest(
    p: {
      routeLevelHeader?: string
      numberHeader?: number
      authorization?: string
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_getHeadersRequestJson200Response>> {
    const url = `/headers/request`
    const headers = this._headers(
      {
        "Route-Level-Header": p["routeLevelHeader"],
        "Number-Header": p["numberHeader"],
        Authorization: p["authorization"],
      },
      opts.headers,
    )

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getValidationNumbersRandomNumber(
    p: {
      max?: number
      min?: number
      forbidden?: number[]
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_RandomNumber>> {
    const url = `/validation/numbers/random-number`
    const headers = this._headers({}, opts.headers)
    const query = this._query({
      max: p["max"],
      min: p["min"],
      forbidden: p["forbidden"],
    })

    return this._request({
      url: url + query,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }
}

export { E2ETestClient as ApiClient }
export type { E2ETestClientConfig as ApiClientConfig }
