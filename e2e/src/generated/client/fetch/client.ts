/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_RandomNumber,
  t_getHeadersRequestJson200Response,
  t_getHeadersUndeclaredJson200Response,
} from "./models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  TypedFetchResponse,
} from "@nahkies/typescript-fetch-runtime/main"

export interface ApiClientConfig extends AbstractFetchClientConfig {}

export class ApiClient extends AbstractFetchClient {
  constructor(config: ApiClientConfig) {
    super(config)
  }

  async getHeadersUndeclared(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<Res<200, t_getHeadersUndeclaredJson200Response>>
  > {
    const url = this.basePath + `/headers/undeclared`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, { method: "GET", ...opts, headers }, timeout)
  }

  async getHeadersRequest(
    p: {
      routeLevelHeader?: string
      authorization?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<TypedFetchResponse<Res<200, t_getHeadersRequestJson200Response>>> {
    const url = this.basePath + `/headers/request`
    const headers = this._headers(
      {
        "route-level-header": p["routeLevelHeader"],
        Authorization: p["authorization"],
      },
      opts.headers,
    )

    return this._fetch(url, { method: "GET", ...opts, headers }, timeout)
  }

  async getValidationNumbersRandomNumber(
    p: {
      max?: number
      min?: number
      forbidden?: number[]
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<TypedFetchResponse<Res<200, t_RandomNumber>>> {
    const url = this.basePath + `/validation/numbers/random-number`
    const headers = this._headers({}, opts.headers)
    const query = this._query({
      max: p["max"],
      min: p["min"],
      forbidden: p["forbidden"],
    })

    return this._fetch(
      url + query,
      { method: "GET", ...opts, headers },
      timeout,
    )
  }
}
