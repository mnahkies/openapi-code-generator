/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_RandomNumber,
  t_getHeadersRequestJson200Response,
  t_getHeadersUndeclaredJson200Response,
} from "./models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  Server,
  TypedFetchResponse,
} from "@nahkies/typescript-fetch-runtime/main"

export class E2ETestClientServers {
  static default(): Server<"E2ETestClient"> {
    return E2ETestClientServers.server().build()
  }

  static server(
    url: "{protocol}://{host}:{port}" = "{protocol}://{host}:{port}",
  ): {
    build: (
      host?: string,
      protocol?: "http" | "https",
      port?: string,
    ) => Server<"E2ETestClient">
  } {
    switch (url) {
      case "{protocol}://{host}:{port}":
        return {
          build(
            host = "localhost",
            protocol: "http" | "https" = "http",
            port = "8080",
          ): Server<"E2ETestClient"> {
            return "{protocol}://{host}:{port}"
              .replace("{host}", host)
              .replace("{protocol}", protocol)
              .replace("{port}", port) as Server<"E2ETestClient">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }
}

export interface E2ETestClientConfig extends AbstractFetchClientConfig {
  basePath: Server<"E2ETestClient"> | string
}

export class E2ETestClient extends AbstractFetchClient {
  constructor(config: E2ETestClientConfig) {
    super(config)
  }

  async getHeadersUndeclared(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<
    TypedFetchResponse<Res<200, t_getHeadersUndeclaredJson200Response>>
  > {
    const url = this.basePath + `/headers/undeclared`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, { method: "GET", ...opts, headers }, timeout)
  }

  async getHeadersRequest(
    p: {
      routeLevelHeader?: string
      numberHeader?: number
      authorization?: string
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<TypedFetchResponse<Res<200, t_getHeadersRequestJson200Response>>> {
    const url = this.basePath + `/headers/request`
    const headers = this._headers(
      {
        "Route-Level-Header": p["routeLevelHeader"],
        "Number-Header": p["numberHeader"],
        Authorization: p["authorization"],
      },
      opts.headers,
    )

    return this._fetch(url, { method: "GET", ...opts, headers }, timeout)
  }

  async getValidationNumbersRandomNumber(
    p: {
      max?: number
      min?: number
      forbidden?: number[]
    } = {},
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<TypedFetchResponse<Res<200, t_RandomNumber>>> {
    const url = this.basePath + `/validation/numbers/random-number`
    const headers = this._headers({}, opts.headers)
    const query = this._query({
      max: p["max"],
      min: p["min"],
      forbidden: p["forbidden"],
    })

    return this._fetch(
      url + query,
      { method: "GET", ...opts, headers },
      timeout,
    )
  }
}

export { E2ETestClient as ApiClient }
export type { E2ETestClientConfig as ApiClientConfig }
