#!/usr/bin/env node

const fs = require("node:fs/promises")
const path = require("node:path")

const AjvDraft04 = require("ajv-draft-04")
const Ajv2020 = require("ajv/dist/2020")
const standaloneCode = require("ajv/dist/standalone").default
const addFormats = require("ajv-formats")
const {Biome, Distribution} = require("@biomejs/js-api")

const openapi30Path = path.join(
  __dirname,
  "../schemas/openapi-3.0-specification.json",
)
const openapi31Path = path.join(
  __dirname,
  "../schemas/openapi-3.1-specification.json",
)

const outputDir = path.join(
  __dirname,
  "../packages/openapi-code-generator/src/core/schemas",
)

const loadYamlFile = async (filepath) => {
  const content = await fs.readFile(filepath, "utf-8")
  return JSON.parse(content)
}

const writeOutput = async (filepath, moduleCode) => {
  const raw = `
    /** AUTOGENERATED - DO NOT EDIT **/
    // @ts-nocheck
    /* istanbul ignore file */
    /* c8 ignore start */
    ${moduleCode}
    /* c8 ignore end */
  `

  const biome = await Biome.create({
    distribution: Distribution.NODE,
  })

  const {projectKey} = biome.openProject(
    path.resolve(path.join(__dirname, "..")),
  )

  biome.applyConfiguration(projectKey, require("../biome.json"))

  const formatted = biome.formatContent(projectKey, raw, {
    filePath: filepath,
  })

  await fs.writeFile(filepath, formatted.content, "utf-8")
}

const loadSchema = async (uri) => {
  const res = await fetch(uri)
  return res.json()
}

const compileOpenapi30Standalone = async () => {
  const spec = await loadYamlFile(openapi30Path)
  const ajv4 = new AjvDraft04({
    code: {source: true},
    strict: false,
    loadSchema,
  })
  addFormats(ajv4)

  const validate = ajv4.compile(spec)
  return standaloneCode(ajv4, validate)
}

const compileOpenapi31Standalone = async () => {
  try {
    const spec = await loadYamlFile(openapi31Path)

    const ajv2020 = new Ajv2020({
      code: {source: true},
      strict: false,
      verbose: true,
      loadSchema,
    })
    addFormats(ajv2020)
    ajv2020.addFormat("media-range", true)

    const validate = ajv2020.compile(spec)

    // TODO: it spits out a validator, but it doesn't actually work due to $dynamicAnchor not being supported
    if (
      !validate({
        openapi: "3.1.0",
        info: {
          title: "Valid Specification",
          version: "1.0.0",
        },
        paths: {
          "/something": {
            get: {
              responses: {default: {description: "whatever"}},
            },
          },
        },
        components: {
          schemas: {
            Something: {
              type: ["object", "null"],
              properties: {
                name: {type: "string"},
              },
            },
          },
        },
      })
    ) {
      const messages =
        validate.errors?.map((err) => {
          return [`-> ${err.message} at path '${err.instancePath}'`, err.params]
        }) ?? []

      if (strict) {
        throw new Error(
          `Validation failed: ${messages
            .map((it) => `${it[0]} (${JSON.stringify(it[1])})`)
            .join("\n")}`,
        )
      }
    }

    return standaloneCode(ajv2020, validate)
  } catch (err) {
    // TODO: MissingRefError: can't resolve reference https://spec.openapis.org/oas/3.1/schema/2022-10-07 from id https://spec.openapis.org/oas/3.1/schema-base/2022-10-07
    console.warn(err.message)
    console.warn(
      "WARNING: failed to compile openapi 3.1 validator - using noop shim",
    )

    return `
"use strict"
const {logger} = require('../logger')
module.exports = validate
module.exports.default = validate

function validate(){
    logger.warn(
      "Skipping validation due to https://github.com/mnahkies/openapi-code-generator/issues/103",
    )
    return true
}
`
  }
}

compileOpenapi30Standalone().then((output) =>
  writeOutput(
    path.join(outputDir, "openapi-3.0-specification-validator.js"),
    output,
  ),
)

compileOpenapi31Standalone().then((output) =>
  writeOutput(
    path.join(outputDir, "openapi-3.1-specification-validator.js"),
    output,
  ),
)
