import {isDefined} from "../../core/utils"
import {ImportBuilder} from "./import-builder"

const FILE_HEADER = `/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */
`

export interface ICompilable {
  toCompilationUnit(): CompilationUnit
}

export class CompilationUnit {
  constructor(
    readonly filename: string,
    readonly imports: ImportBuilder | undefined,
    readonly code: string,
  ) {}

  hasCode() {
    return this.code.trim().length > 0
  }

  getRawFileContent({
    allowUnusedImports,
    includeHeader = true,
  }: {allowUnusedImports: boolean; includeHeader?: boolean}): string {
    return [
      includeHeader ? FILE_HEADER : "",
      this.imports
        ? `${this.imports.toString(allowUnusedImports ? "" : this.code)}\n`
        : "",
      this.code,
    ]
      .filter((it) => it && it.length > 0)
      .join("\n")
  }

  static merge(filename: string, ...units: CompilationUnit[]): CompilationUnit {
    const imports = ImportBuilder.merge(
      {filename},
      ...units.map((it) => it.imports).filter(isDefined),
    )
    const code = units
      .map((it) => it.code.trim())
      .filter(Boolean)
      .join("\n\n")

    return new CompilationUnit(filename, imports, code)
  }
}
