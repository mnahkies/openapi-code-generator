/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  EmptyObject,
  t_AppAuthenticatorEnrollment,
  t_AppAuthenticatorEnrollmentRequest,
  t_Authenticator,
  t_AuthenticatorEnrollment,
  t_Email,
  t_OktaApplication,
  t_Organization,
  t_PasswordResponse,
  t_Phone,
  t_Profile,
  t_PushNotificationChallenge,
  t_PushNotificationVerification,
  t_Schema,
  t_UpdateAppAuthenticatorEnrollmentRequest,
} from "./models"
import {
  AbstractAxiosClient,
  AbstractAxiosConfig,
} from "@nahkies/typescript-axios-runtime/main"
import { AxiosRequestConfig, AxiosResponse } from "axios"

export class ApiClient extends AbstractAxiosClient {
  constructor(config: AbstractAxiosConfig) {
    super(config)
  }

  async createAppAuthenticatorEnrollment(
    p: {
      requestBody: t_AppAuthenticatorEnrollmentRequest
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_AppAuthenticatorEnrollment>> {
    const url = `/idp/myaccount/app-authenticators`
    const headers = this._headers({
      "Content-Type": "application/json, okta-version=1.0.0",
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async verifyAppAuthenticatorPushNotificationChallenge(
    p: {
      challengeId: string
      requestBody: t_PushNotificationVerification
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/idp/myaccount/app-authenticators/challenge/${p["challengeId"]}/verify`
    const headers = this._headers({
      "Content-Type": "application/json;okta-version=1.0.0",
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async updateAppAuthenticatorEnrollment(
    p: {
      enrollmentId: string
      requestBody: t_UpdateAppAuthenticatorEnrollmentRequest
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_AppAuthenticatorEnrollment>> {
    const url = `/idp/myaccount/app-authenticators/${p["enrollmentId"]}`
    const headers = this._headers({
      "Content-Type": "application/merge-patch+json;okta-version=1.0.0",
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "PATCH",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteAppAuthenticatorEnrollment(
    p: {
      enrollmentId: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/idp/myaccount/app-authenticators/${p["enrollmentId"]}`

    return this._request({
      url: url,
      method: "DELETE",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async listAppAuthenticatorPendingPushNotificationChallenges(
    p: {
      enrollmentId: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_PushNotificationChallenge[]>> {
    const url = `/idp/myaccount/app-authenticators/${p["enrollmentId"]}/push/notifications`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async listAuthenticators(
    p: {
      expand?: string
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Authenticator[]>> {
    const url = `/idp/myaccount/authenticators`
    const query = this._query({ expand: p["expand"] })

    return this._request({
      url: url + query,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async getAuthenticator(
    p: {
      authenticatorId: string
      expand?: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Authenticator>> {
    const url = `/idp/myaccount/authenticators/${p["authenticatorId"]}`
    const query = this._query({ expand: p["expand"] })

    return this._request({
      url: url + query,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async listEnrollments(
    p: {
      authenticatorId: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_AuthenticatorEnrollment[]>> {
    const url = `/idp/myaccount/authenticators/${p["authenticatorId"]}/enrollments`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async getEnrollment(
    p: {
      authenticatorId: string
      enrollmentId: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_AuthenticatorEnrollment>> {
    const url = `/idp/myaccount/authenticators/${p["authenticatorId"]}/enrollments/${p["enrollmentId"]}`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async listEmails(
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Email[]>> {
    const url = `/idp/myaccount/emails`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async createEmail(
    p: {
      requestBody: {
        profile: {
          email: string
        }
        role?: "PRIMARY" | "SECONDARY"
        sendEmail?: boolean
        state?: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Email>> {
    const url = `/idp/myaccount/emails`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getEmail(
    p: {
      id: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Email>> {
    const url = `/idp/myaccount/emails/${p["id"]}`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async deleteEmail(
    p: {
      id: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/idp/myaccount/emails/${p["id"]}`

    return this._request({
      url: url,
      method: "DELETE",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async sendEmailChallenge(
    p: {
      id: string
      requestBody: {
        state: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      _links: {
        poll: {
          hints: {
            allow: "GET"[]
          }
          href: string
        }
        verify: {
          hints: {
            allow: "POST"[]
          }
          href: string
        }
      }
      expiresAt: string
      id: string
      profile: {
        email: string
      }
      status: "VERIFIED" | "UNVERIFIED"
    }>
  > {
    const url = `/idp/myaccount/emails/${p["id"]}/challenge`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async pollChallengeForEmailMagicLink(
    p: {
      id: string
      challengeId: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      _links: {
        poll: {
          hints: {
            allow: ("DELETE" | "GET" | "POST" | "PUT")[]
          }
          href: string
        }
        verify: {
          hints: {
            allow: ("DELETE" | "GET" | "POST" | "PUT")[]
          }
          href: string
        }
      }
      expiresAt: string
      id: string
      profile: {
        email: string
      }
      status: "VERIFIED" | "UNVERIFIED"
    }>
  > {
    const url = `/idp/myaccount/emails/${p["id"]}/challenge/${p["challengeId"]}`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async verifyEmailOtp(
    p: {
      id: string
      challengeId: string
      requestBody: {
        verificationCode: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/idp/myaccount/emails/${p["id"]}/challenge/${p["challengeId"]}/verify`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async listOktaApplications(
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_OktaApplication[]>> {
    const url = `/idp/myaccount/okta-applications`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async getOrganization(
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Organization>> {
    const url = `/idp/myaccount/organization`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async getPassword(
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_PasswordResponse>> {
    const url = `/idp/myaccount/password`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async createPassword(
    p: {
      requestBody: {
        profile: {
          password: string
        }
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_PasswordResponse>> {
    const url = `/idp/myaccount/password`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async replacePassword(
    p: {
      requestBody: {
        profile: {
          password: string
        }
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_PasswordResponse>> {
    const url = `/idp/myaccount/password`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "PUT",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deletePassword(
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/idp/myaccount/password`

    return this._request({
      url: url,
      method: "DELETE",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async listPhones(
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Phone[]>> {
    const url = `/idp/myaccount/phones`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async createPhone(
    p: {
      requestBody: {
        method?: "SMS" | "CALL"
        profile: {
          phoneNumber?: string
        }
        sendCode?: boolean
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Phone>> {
    const url = `/idp/myaccount/phones`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPhone(
    p: {
      id: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Phone>> {
    const url = `/idp/myaccount/phones/${p["id"]}`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async deletePhone(
    p: {
      id: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/idp/myaccount/phones/${p["id"]}`

    return this._request({
      url: url,
      method: "DELETE",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async sendPhoneChallenge(
    p: {
      id: string
      requestBody: {
        method: "SMS" | "CALL"
        retry?: boolean
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      _links?: {
        verify?: {
          hints: {
            allow: "GET"[]
          }
          href: string
        }
      }
    }>
  > {
    const url = `/idp/myaccount/phones/${p["id"]}/challenge`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async verifyPhoneChallenge(
    p: {
      id: string
      requestBody: {
        verificationCode: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/idp/myaccount/phones/${p["id"]}/verify`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getProfile(
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Profile>> {
    const url = `/idp/myaccount/profile`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async replaceProfile(
    p: {
      requestBody: {
        profile?: EmptyObject
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Profile>> {
    const url = `/idp/myaccount/profile`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "PUT",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getProfileSchema(
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Schema>> {
    const url = `/idp/myaccount/profile/schema`

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }

  async deleteSessions(
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/idp/myaccount/sessions`

    return this._request({
      url: url,
      method: "DELETE",
      ...(timeout ? { timeout } : {}),
      ...opts,
    })
  }
}
