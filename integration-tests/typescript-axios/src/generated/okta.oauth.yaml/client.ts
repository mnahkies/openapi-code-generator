/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_AcrValue,
  t_AmrValue,
  t_ApplicationType,
  t_BackchannelAuthorizeRequest,
  t_BackchannelAuthorizeResponse,
  t_Claim,
  t_Client,
  t_CodeChallengeMethod,
  t_DeviceAuthorizeRequest,
  t_DeviceAuthorizeResponse,
  t_EndpointAuthMethod,
  t_Error,
  t_GrantType,
  t_IntrospectionRequest,
  t_IntrospectionResponse,
  t_JsonWebKey,
  t_JsonWebKeyStatus,
  t_JsonWebKeyType,
  t_JsonWebKeyUse,
  t_OAuthError,
  t_OAuthKeys,
  t_OAuthMetadata,
  t_OidcMetadata,
  t_ParRequest,
  t_ParResponse,
  t_Prompt,
  t_ResponseMode,
  t_ResponseType,
  t_ResponseTypesSupported,
  t_RevokeRequest,
  t_Scope,
  t_SigningAlgorithm,
  t_SubjectType,
  t_TokenDeliveryMode,
  t_TokenRequest,
  t_TokenResponse,
  t_TokenResponseTokenType,
  t_TokenType,
  t_TokenTypeHintIntrospect,
  t_TokenTypeHintRevoke,
  t_UserInfo,
} from "./models"
import {
  AbstractAxiosClient,
  AbstractAxiosConfig,
} from "@nahkies/typescript-axios-runtime/main"
import axios, { AxiosRequestConfig, AxiosResponse } from "axios"
import { z } from "zod"

export class ApiClient extends AbstractAxiosClient {
  constructor(config: AbstractAxiosConfig) {
    super(config)
  }

  async getWellKnownOpenIdConfiguration(
    p: {
      clientId?: string
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_OidcMetadata>> {
    const url = `/.well-known/openid-configuration`
    const query = this._query({ client_id: p["clientId"] })

    return this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async authorize(
    p: {
      acrValues?: t_AcrValue
      clientId?: string
      codeChallenge?: string
      codeChallengeMethod?: t_CodeChallengeMethod
      display?: string
      enrollAmrValues?: t_AmrValue
      idpScope?: string
      idp?: string
      loginHint?: string
      maxAge?: number
      nonce?: string
      prompt?: t_Prompt
      redirectUri?: string
      responseType?: t_ResponseTypesSupported
      responseMode?: t_ResponseMode
      requestUri?: string
      request?: string
      scope?: string
      sessionToken?: string
      state?: string
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<never> {
    const url = `/oauth2/v1/authorize`
    const query = this._query({
      acr_values: p["acrValues"],
      client_id: p["clientId"],
      code_challenge: p["codeChallenge"],
      code_challenge_method: p["codeChallengeMethod"],
      display: p["display"],
      enroll_amr_values: p["enrollAmrValues"],
      idp_scope: p["idpScope"],
      idp: p["idp"],
      login_hint: p["loginHint"],
      max_age: p["maxAge"],
      nonce: p["nonce"],
      prompt: p["prompt"],
      redirect_uri: p["redirectUri"],
      response_type: p["responseType"],
      response_mode: p["responseMode"],
      request_uri: p["requestUri"],
      request: p["request"],
      scope: p["scope"],
      sessionToken: p["sessionToken"],
      state: p["state"],
    })

    return this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async bcAuthorize(
    p: {
      requestBody: t_BackchannelAuthorizeRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_BackchannelAuthorizeResponse>> {
    const url = `/oauth2/v1/bc/authorize`
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async listClients(
    p: {
      after?: string
      limit?: number
      q?: string
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_Client[]>> {
    const url = `/oauth2/v1/clients`
    const query = this._query({
      after: p["after"],
      limit: p["limit"],
      q: p["q"],
    })

    return this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async createClient(
    p: {
      requestBody: t_Client
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_Client>> {
    const url = `/oauth2/v1/clients`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async getClient(
    p: {
      clientId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_Client>> {
    const url = `/oauth2/v1/clients/${p["clientId"]}`

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async replaceClient(
    p: {
      clientId: string
      requestBody: t_Client
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_Client>> {
    const url = `/oauth2/v1/clients/${p["clientId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async deleteClient(
    p: {
      clientId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/oauth2/v1/clients/${p["clientId"]}`

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })
  }

  async generateNewClientSecret(
    p: {
      clientId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_Client>> {
    const url = `/oauth2/v1/clients/${p["clientId"]}/lifecycle/newSecret`

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })
  }

  async deviceAuthorize(
    p: {
      requestBody: t_DeviceAuthorizeRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_DeviceAuthorizeResponse>> {
    const url = `/oauth2/v1/device/authorize`
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async introspect(
    p: {
      requestBody: t_IntrospectionRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_IntrospectionResponse>> {
    const url = `/oauth2/v1/introspect`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async oauthKeys(
    p: {
      clientId?: string
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_OAuthKeys>> {
    const url = `/oauth2/v1/keys`
    const query = this._query({ client_id: p["clientId"] })

    return this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async logout(
    p: {
      idTokenHint: string
      postLogoutRedirectUri?: string
      state?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<never> {
    const url = `/oauth2/v1/logout`
    const query = this._query({
      id_token_hint: p["idTokenHint"],
      post_logout_redirect_uri: p["postLogoutRedirectUri"],
      state: p["state"],
    })

    return this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async par(
    p: {
      requestBody: t_ParRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_ParResponse>> {
    const url = `/oauth2/v1/par`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async revoke(
    p: {
      requestBody: t_RevokeRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/oauth2/v1/revoke`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async token(
    p: {
      requestBody: t_TokenRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_TokenResponse>> {
    const url = `/oauth2/v1/token`
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async userinfo(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_UserInfo>> {
    const url = `/oauth2/v1/userinfo`

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async getWellKnownOAuthConfigurationCustomAs(
    p: {
      authorizationServerId: string
      clientId?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_OAuthMetadata>> {
    const url = `/oauth2/${p["authorizationServerId"]}/.well-known/oauth-authorization-server`
    const query = this._query({ client_id: p["clientId"] })

    return this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async getWellKnownOpenIdConfigurationCustomAs(
    p: {
      authorizationServerId: string
      clientId?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_OidcMetadata>> {
    const url = `/oauth2/${p["authorizationServerId"]}/.well-known/openid-configuration`
    const query = this._query({ client_id: p["clientId"] })

    return this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async authorizeCustomAs(
    p: {
      authorizationServerId: string
      acrValues?: t_AcrValue
      clientId?: string
      codeChallenge?: string
      codeChallengeMethod?: t_CodeChallengeMethod
      display?: string
      enrollAmrValues?: t_AmrValue
      idpScope?: string
      idp?: string
      loginHint?: string
      maxAge?: number
      nonce?: string
      prompt?: t_Prompt
      redirectUri?: string
      responseType?: t_ResponseTypesSupported
      responseMode?: t_ResponseMode
      requestUri?: string
      request?: string
      scope?: string
      sessionToken?: string
      state?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<never> {
    const url = `/oauth2/${p["authorizationServerId"]}/v1/authorize`
    const query = this._query({
      acr_values: p["acrValues"],
      client_id: p["clientId"],
      code_challenge: p["codeChallenge"],
      code_challenge_method: p["codeChallengeMethod"],
      display: p["display"],
      enroll_amr_values: p["enrollAmrValues"],
      idp_scope: p["idpScope"],
      idp: p["idp"],
      login_hint: p["loginHint"],
      max_age: p["maxAge"],
      nonce: p["nonce"],
      prompt: p["prompt"],
      redirect_uri: p["redirectUri"],
      response_type: p["responseType"],
      response_mode: p["responseMode"],
      request_uri: p["requestUri"],
      request: p["request"],
      scope: p["scope"],
      sessionToken: p["sessionToken"],
      state: p["state"],
    })

    return this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async bcAuthorizeCustomAs(
    p: {
      authorizationServerId: string
      requestBody: t_BackchannelAuthorizeRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_BackchannelAuthorizeResponse>> {
    const url = `/oauth2/${p["authorizationServerId"]}/v1/bc/authorize`
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async deviceAuthorizeCustomAs(
    p: {
      authorizationServerId: string
      requestBody: t_DeviceAuthorizeRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_DeviceAuthorizeResponse>> {
    const url = `/oauth2/${p["authorizationServerId"]}/v1/device/authorize`
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async introspectCustomAs(
    p: {
      authorizationServerId: string
      requestBody: t_IntrospectionRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_IntrospectionResponse>> {
    const url = `/oauth2/${p["authorizationServerId"]}/v1/introspect`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async oauthKeysCustomAs(
    p: {
      authorizationServerId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_OAuthKeys>> {
    const url = `/oauth2/${p["authorizationServerId"]}/v1/keys`

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async logoutCustomAs(
    p: {
      authorizationServerId: string
      idTokenHint: string
      postLogoutRedirectUri?: string
      state?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<never> {
    const url = `/oauth2/${p["authorizationServerId"]}/v1/logout`
    const query = this._query({
      id_token_hint: p["idTokenHint"],
      post_logout_redirect_uri: p["postLogoutRedirectUri"],
      state: p["state"],
    })

    return this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async parCustomAs(
    p: {
      authorizationServerId: string
      requestBody: t_ParRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_ParResponse>> {
    const url = `/oauth2/${p["authorizationServerId"]}/v1/par`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async revokeCustomAs(
    p: {
      authorizationServerId: string
      requestBody: t_RevokeRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/oauth2/${p["authorizationServerId"]}/v1/revoke`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async tokenCustomAs(
    p: {
      authorizationServerId: string
      requestBody: t_TokenRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_TokenResponse>> {
    const url = `/oauth2/${p["authorizationServerId"]}/v1/token`
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async userinfoCustomAs(
    p: {
      authorizationServerId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_UserInfo>> {
    const url = `/oauth2/${p["authorizationServerId"]}/v1/userinfo`

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }
}
