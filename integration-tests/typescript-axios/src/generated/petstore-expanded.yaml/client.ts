/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  AbstractAxiosClient,
  type AbstractAxiosConfig,
  type Server,
} from "@nahkies/typescript-axios-runtime/main"
import type {AxiosRequestConfig, AxiosResponse} from "axios"
import type {t_NewPet, t_Pet} from "./models"

export class SwaggerPetstoreServers {
  static default(): Server<"SwaggerPetstore"> {
    return SwaggerPetstoreServers.server().build()
  }

  static server(
    url: "https://petstore.swagger.io/v2" = "https://petstore.swagger.io/v2",
  ): {build: () => Server<"SwaggerPetstore">} {
    switch (url) {
      case "https://petstore.swagger.io/v2":
        return {
          build(): Server<"SwaggerPetstore"> {
            return "https://petstore.swagger.io/v2" as Server<"SwaggerPetstore">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }
}

export interface SwaggerPetstoreConfig extends AbstractAxiosConfig {
  basePath: Server<"SwaggerPetstore"> | string
}

export class SwaggerPetstore extends AbstractAxiosClient {
  constructor(config: SwaggerPetstoreConfig) {
    super(config)
  }

  async findPets(
    p: {
      tags?: string[]
      limit?: number
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Pet[]>> {
    const url = `/pets`
    const headers = this._headers({Accept: "application/json"}, opts.headers)
    const query = this._query({tags: p["tags"], limit: p["limit"]})

    return this._request({
      url: url + query,
      method: "GET",
      ...(timeout ? {timeout} : {}),
      ...opts,
      headers,
    })
  }

  async addPet(
    p: {
      requestBody: t_NewPet
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Pet>> {
    const url = `/pets`
    const headers = this._headers(
      {Accept: "application/json", "Content-Type": "application/json"},
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? {timeout} : {}),
      ...opts,
      headers,
    })
  }

  async findPetById(
    p: {
      id: number
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Pet>> {
    const url = `/pets/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? {timeout} : {}),
      ...opts,
      headers,
    })
  }

  async deletePet(
    p: {
      id: number
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/pets/${p["id"]}`
    const headers = this._headers({Accept: "application/json"}, opts.headers)

    return this._request({
      url: url,
      method: "DELETE",
      ...(timeout ? {timeout} : {}),
      ...opts,
      headers,
    })
  }
}

export {SwaggerPetstore as ApiClient}
export type {SwaggerPetstoreConfig as ApiClientConfig}
