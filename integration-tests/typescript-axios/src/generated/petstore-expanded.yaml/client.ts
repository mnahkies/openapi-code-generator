/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import { t_NewPet, t_Pet } from "./models"
import {
  AbstractAxiosClient,
  AbstractAxiosConfig,
  Server,
} from "@nahkies/typescript-axios-runtime/main"
import { AxiosRequestConfig, AxiosResponse } from "axios"

export class SwaggerPetstoreServers {
  static default(): Server<"SwaggerPetstore"> {
    return "https://petstore.swagger.io/v2" as Server<"SwaggerPetstore">
  }

  static specific(url: "https://petstore.swagger.io/v2") {
    switch (url) {
      case "https://petstore.swagger.io/v2":
        return "https://petstore.swagger.io/v2" as Server<"SwaggerPetstore">
    }
  }

  static custom(url: string): Server<"SwaggerPetstoreCustom"> {
    return url as Server<"SwaggerPetstoreCustom">
  }
}

export interface SwaggerPetstoreConfig extends AbstractAxiosConfig {
  basePath: Server<"SwaggerPetstore"> | Server<"SwaggerPetstoreCustom">
}

export class SwaggerPetstore extends AbstractAxiosClient {
  constructor(config: SwaggerPetstoreConfig) {
    super(config)
  }

  async findPets(
    p: {
      tags?: string[]
      limit?: number
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Pet[]>> {
    const url = `/pets`
    const headers = this._headers({}, opts.headers)
    const query = this._query({ tags: p["tags"], limit: p["limit"] })

    return this._request({
      url: url + query,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async addPet(
    p: {
      requestBody: t_NewPet
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Pet>> {
    const url = `/pets`
    const headers = this._headers(
      { "Content-Type": "application/json" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async findPetById(
    p: {
      id: number
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_Pet>> {
    const url = `/pets/${p["id"]}`
    const headers = this._headers({}, opts.headers)

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deletePet(
    p: {
      id: number
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/pets/${p["id"]}`
    const headers = this._headers({}, opts.headers)

    return this._request({
      url: url,
      method: "DELETE",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }
}

export { SwaggerPetstore as ApiClient }
export type { SwaggerPetstoreConfig as ApiClientConfig }
