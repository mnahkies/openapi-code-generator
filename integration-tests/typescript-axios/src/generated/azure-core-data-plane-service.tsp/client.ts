/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_Azure_Core_Foundations_Error,
  t_Azure_Core_Foundations_OperationState,
  t_Azure_Core_uuid,
  t_Manufacturer,
  t_PagedManufacturer,
  t_PagedWidget,
  t_PagedWidgetPart,
  t_TypeSpec_Http_AcceptedResponse,
  t_Widget,
  t_WidgetAnalytics,
  t_WidgetAnalyticsCreateOrUpdate,
  t_WidgetCreateOrUpdate,
  t_WidgetPart,
  t_WidgetPartReorderRequest,
  t_WidgetRepairRequest,
  t_WidgetRepairState,
} from "./models"
import {
  AbstractAxiosClient,
  AbstractAxiosConfig,
} from "@nahkies/typescript-axios-runtime/main"
import { AxiosRequestConfig, AxiosResponse } from "axios"

export class ApiClient extends AbstractAxiosClient {
  constructor(config: AbstractAxiosConfig) {
    super(config)
  }

  async serviceStatus(
    p: {
      apiVersion: string
      xMsClientRequestId?: t_Azure_Core_uuid
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      statusString: string
    }>
  > {
    const url = `/service-status`
    const headers = this._headers({
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "GET",
      headers,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetsGetWidgetOperationStatus(
    p: {
      apiVersion: string
      widgetName: string
      operationId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      error?: t_Azure_Core_Foundations_Error
      id: string
      result?: t_Widget
      status: t_Azure_Core_Foundations_OperationState
    }>
  > {
    const url = `/widgets/${p["widgetName"]}/operations/${p["operationId"]}`
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetsCreateOrUpdateWidget(
    p: {
      apiVersion: string
      widgetName: string
      repeatabilityRequestId?: string
      repeatabilityFirstSent?: string
      ifMatch?: string
      ifNoneMatch?: string
      ifUnmodifiedSince?: string
      ifModifiedSince?: string
      xMsClientRequestId?: t_Azure_Core_uuid
      requestBody: t_WidgetCreateOrUpdate
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_Widget>> {
    const url = `/widgets/${p["widgetName"]}`
    const headers = this._headers({
      "Content-Type": "application/merge-patch+json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "PATCH",
      headers,
      data: body,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetsGetWidget(
    p: {
      apiVersion: string
      widgetName: string
      ifMatch?: string
      ifNoneMatch?: string
      ifUnmodifiedSince?: string
      ifModifiedSince?: string
      xMsClientRequestId?: t_Azure_Core_uuid
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_Widget>> {
    const url = `/widgets/${p["widgetName"]}`
    const headers = this._headers({
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "GET",
      headers,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetsDeleteWidget(
    p: {
      apiVersion: string
      widgetName: string
      repeatabilityRequestId?: string
      repeatabilityFirstSent?: string
      ifMatch?: string
      ifNoneMatch?: string
      ifUnmodifiedSince?: string
      ifModifiedSince?: string
      xMsClientRequestId?: t_Azure_Core_uuid
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      error?: t_Azure_Core_Foundations_Error
      id: string
      status: t_Azure_Core_Foundations_OperationState
    }>
  > {
    const url = `/widgets/${p["widgetName"]}`
    const headers = this._headers({
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "DELETE",
      headers,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetsListWidgets(
    p: {
      apiVersion: string
      top?: number
      skip?: number
      maxpagesize?: number
      select?: string[]
      xMsClientRequestId?: t_Azure_Core_uuid
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_PagedWidget>> {
    const url = `/widgets`
    const headers = this._headers({
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({
      "api-version": p["apiVersion"],
      top: p["top"],
      skip: p["skip"],
      maxpagesize: p["maxpagesize"],
      select: p["select"],
    })

    return this._request({
      url: url + query,
      method: "GET",
      headers,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetsGetAnalytics(
    p: {
      apiVersion: string
      widgetName: string
      ifMatch?: string
      ifNoneMatch?: string
      ifUnmodifiedSince?: string
      ifModifiedSince?: string
      xMsClientRequestId?: t_Azure_Core_uuid
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_WidgetAnalytics>> {
    const url = `/widgets/${p["widgetName"]}/analytics/current`
    const headers = this._headers({
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "GET",
      headers,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetsUpdateAnalytics(
    p: {
      apiVersion: string
      widgetName: string
      repeatabilityRequestId?: string
      repeatabilityFirstSent?: string
      ifMatch?: string
      ifNoneMatch?: string
      ifUnmodifiedSince?: string
      ifModifiedSince?: string
      xMsClientRequestId?: t_Azure_Core_uuid
      requestBody: t_WidgetAnalyticsCreateOrUpdate
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_WidgetAnalytics>> {
    const url = `/widgets/${p["widgetName"]}/analytics/current`
    const headers = this._headers({
      "Content-Type": "application/merge-patch+json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "PATCH",
      headers,
      data: body,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetsGetRepairStatus(
    p: {
      apiVersion: string
      widgetId: string
      operationId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      error?: t_Azure_Core_Foundations_Error
      id: string
      result?: t_WidgetRepairRequest
      status: t_Azure_Core_Foundations_OperationState
    }>
  > {
    const url = `/widgets/${p["widgetId"]}/repairs/${p["operationId"]}`
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetsScheduleRepairs(
    p: {
      apiVersion: string
      widgetName: string
      repeatabilityRequestId?: string
      repeatabilityFirstSent?: string
      xMsClientRequestId?: t_Azure_Core_uuid
      requestBody: t_WidgetRepairRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      error?: t_Azure_Core_Foundations_Error
      id: string
      result?: {
        completedDateTime: string
        createdDateTime: string
        requestState: t_WidgetRepairState
        scheduledDateTime: string
        updatedDateTime: string
      }
      status: t_Azure_Core_Foundations_OperationState
    }>
  > {
    const url = `/widgets/${p["widgetName"]}:scheduleRepairs`
    const headers = this._headers({
      "Content-Type": "application/json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "POST",
      headers,
      data: body,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetPartsGetWidgetPartOperationStatus(
    p: {
      apiVersion: string
      widgetName: string
      widgetPartName: string
      operationId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      error?: t_Azure_Core_Foundations_Error
      id: string
      result?: t_WidgetPart
      status: t_Azure_Core_Foundations_OperationState
    }>
  > {
    const url = `/widgets/${p["widgetName"]}/parts/${p["widgetPartName"]}/operations/${p["operationId"]}`
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetPartsCreateWidgetPart(
    p: {
      apiVersion: string
      widgetName: string
      repeatabilityRequestId?: string
      repeatabilityFirstSent?: string
      ifMatch?: string
      ifNoneMatch?: string
      ifUnmodifiedSince?: string
      ifModifiedSince?: string
      xMsClientRequestId?: t_Azure_Core_uuid
      requestBody: t_WidgetPart
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/widgets/${p["widgetName"]}/parts`
    const headers = this._headers({
      "Content-Type": "application/json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "POST",
      headers,
      data: body,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetPartsListWidgetParts(
    p: {
      apiVersion: string
      widgetName: string
      xMsClientRequestId?: t_Azure_Core_uuid
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_PagedWidgetPart>> {
    const url = `/widgets/${p["widgetName"]}/parts`
    const headers = this._headers({
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "GET",
      headers,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetPartsGetWidgetPart(
    p: {
      apiVersion: string
      widgetName: string
      widgetPartName: string
      ifMatch?: string
      ifNoneMatch?: string
      ifUnmodifiedSince?: string
      ifModifiedSince?: string
      xMsClientRequestId?: t_Azure_Core_uuid
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_WidgetPart>> {
    const url = `/widgets/${p["widgetName"]}/parts/${p["widgetPartName"]}`
    const headers = this._headers({
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "GET",
      headers,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetPartsDeleteWidgetPart(
    p: {
      apiVersion: string
      widgetName: string
      widgetPartName: string
      repeatabilityRequestId?: string
      repeatabilityFirstSent?: string
      ifMatch?: string
      ifNoneMatch?: string
      ifUnmodifiedSince?: string
      ifModifiedSince?: string
      xMsClientRequestId?: t_Azure_Core_uuid
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/widgets/${p["widgetName"]}/parts/${p["widgetPartName"]}`
    const headers = this._headers({
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "DELETE",
      headers,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async widgetPartsReorderParts(
    p: {
      apiVersion: string
      widgetName: string
      repeatabilityRequestId?: string
      repeatabilityFirstSent?: string
      xMsClientRequestId?: t_Azure_Core_uuid
      requestBody: t_WidgetPartReorderRequest
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      error?: t_Azure_Core_Foundations_Error
      id: string
      result?: t_TypeSpec_Http_AcceptedResponse
      status: t_Azure_Core_Foundations_OperationState
    }>
  > {
    const url = `/widgets/${p["widgetName"]}/parts:reorderParts`
    const headers = this._headers({
      "Content-Type": "application/json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "POST",
      headers,
      data: body,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async manufacturersGetManufacturerOperationStatus(
    p: {
      apiVersion: string
      manufacturerId: string
      operationId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      error?: t_Azure_Core_Foundations_Error
      id: string
      result?: t_Manufacturer
      status: t_Azure_Core_Foundations_OperationState
    }>
  > {
    const url = `/manufacturers/${p["manufacturerId"]}/operations/${p["operationId"]}`
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async manufacturersCreateManufacturer(
    p: {
      apiVersion: string
      manufacturerId: string
      repeatabilityRequestId?: string
      repeatabilityFirstSent?: string
      ifMatch?: string
      ifNoneMatch?: string
      ifUnmodifiedSince?: string
      ifModifiedSince?: string
      xMsClientRequestId?: t_Azure_Core_uuid
      requestBody: t_Manufacturer
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_Manufacturer>> {
    const url = `/manufacturers/${p["manufacturerId"]}`
    const headers = this._headers({
      "Content-Type": "application/json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "PUT",
      headers,
      data: body,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async manufacturersGetManufacturer(
    p: {
      apiVersion: string
      manufacturerId: string
      ifMatch?: string
      ifNoneMatch?: string
      ifUnmodifiedSince?: string
      ifModifiedSince?: string
      xMsClientRequestId?: t_Azure_Core_uuid
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_Manufacturer>> {
    const url = `/manufacturers/${p["manufacturerId"]}`
    const headers = this._headers({
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "GET",
      headers,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async manufacturersDeleteManufacturer(
    p: {
      apiVersion: string
      manufacturerId: string
      repeatabilityRequestId?: string
      repeatabilityFirstSent?: string
      ifMatch?: string
      ifNoneMatch?: string
      ifUnmodifiedSince?: string
      ifModifiedSince?: string
      xMsClientRequestId?: t_Azure_Core_uuid
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      error?: t_Azure_Core_Foundations_Error
      id: string
      status: t_Azure_Core_Foundations_OperationState
    }>
  > {
    const url = `/manufacturers/${p["manufacturerId"]}`
    const headers = this._headers({
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "DELETE",
      headers,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }

  async manufacturersListManufacturers(
    p: {
      apiVersion: string
      xMsClientRequestId?: t_Azure_Core_uuid
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_PagedManufacturer>> {
    const url = `/manufacturers`
    const headers = this._headers({
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const query = this._query({ "api-version": p["apiVersion"] })

    return this._request({
      url: url + query,
      method: "GET",
      headers,
      ...(timeout ? { timeout } : {}),
      ...(opts ?? {}),
    })
  }
}
