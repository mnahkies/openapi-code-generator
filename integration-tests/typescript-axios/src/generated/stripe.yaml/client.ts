/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  EmptyObject,
  UnknownEnumStringValue,
  t_account,
  t_account_link,
  t_account_session,
  t_apple_pay_domain,
  t_application_fee,
  t_apps_secret,
  t_balance,
  t_balance_transaction,
  t_bank_account,
  t_billing_alert,
  t_billing_credit_balance_summary,
  t_billing_credit_balance_transaction,
  t_billing_credit_grant,
  t_billing_meter,
  t_billing_meter_event,
  t_billing_meter_event_adjustment,
  t_billing_meter_event_summary,
  t_billing_portal_configuration,
  t_billing_portal_session,
  t_capability,
  t_card,
  t_cash_balance,
  t_charge,
  t_checkout_session,
  t_climate_order,
  t_climate_product,
  t_climate_supplier,
  t_confirmation_token,
  t_country_spec,
  t_coupon,
  t_credit_note,
  t_credit_note_line_item,
  t_customer,
  t_customer_balance_transaction,
  t_customer_cash_balance_transaction,
  t_customer_session,
  t_deleted_account,
  t_deleted_apple_pay_domain,
  t_deleted_coupon,
  t_deleted_customer,
  t_deleted_discount,
  t_deleted_external_account,
  t_deleted_invoice,
  t_deleted_invoiceitem,
  t_deleted_payment_source,
  t_deleted_person,
  t_deleted_plan,
  t_deleted_product,
  t_deleted_product_feature,
  t_deleted_radar_value_list,
  t_deleted_radar_value_list_item,
  t_deleted_subscription_item,
  t_deleted_tax_id,
  t_deleted_terminal_configuration,
  t_deleted_terminal_location,
  t_deleted_terminal_reader,
  t_deleted_test_helpers_test_clock,
  t_deleted_webhook_endpoint,
  t_discount,
  t_dispute,
  t_entitlements_active_entitlement,
  t_entitlements_feature,
  t_ephemeral_key,
  t_event,
  t_exchange_rate,
  t_external_account,
  t_fee_refund,
  t_file,
  t_file_link,
  t_financial_connections_account,
  t_financial_connections_account_owner,
  t_financial_connections_session,
  t_financial_connections_transaction,
  t_forwarding_request,
  t_funding_instructions,
  t_identity_verification_report,
  t_identity_verification_session,
  t_invoice,
  t_invoice_payment,
  t_invoice_rendering_template,
  t_invoiceitem,
  t_issuing_authorization,
  t_issuing_card,
  t_issuing_cardholder,
  t_issuing_dispute,
  t_issuing_personalization_design,
  t_issuing_physical_bundle,
  t_issuing_settlement,
  t_issuing_token,
  t_issuing_transaction,
  t_item,
  t_line_item,
  t_login_link,
  t_mandate,
  t_payment_intent,
  t_payment_link,
  t_payment_method,
  t_payment_method_configuration,
  t_payment_method_domain,
  t_payment_source,
  t_payout,
  t_person,
  t_plan,
  t_price,
  t_product,
  t_product_feature,
  t_promotion_code,
  t_quote,
  t_radar_early_fraud_warning,
  t_radar_value_list,
  t_radar_value_list_item,
  t_refund,
  t_reporting_report_run,
  t_reporting_report_type,
  t_review,
  t_scheduled_query_run,
  t_setup_attempt,
  t_setup_intent,
  t_shipping_rate,
  t_sigma_sigma_api_query,
  t_source,
  t_source_mandate_notification,
  t_source_transaction,
  t_subscription,
  t_subscription_item,
  t_subscription_schedule,
  t_tax_calculation,
  t_tax_calculation_line_item,
  t_tax_code,
  t_tax_id,
  t_tax_rate,
  t_tax_registration,
  t_tax_settings,
  t_tax_transaction,
  t_tax_transaction_line_item,
  t_terminal_configuration,
  t_terminal_connection_token,
  t_terminal_location,
  t_terminal_reader,
  t_test_helpers_test_clock,
  t_token,
  t_topup,
  t_transfer,
  t_transfer_reversal,
  t_treasury_credit_reversal,
  t_treasury_debit_reversal,
  t_treasury_financial_account,
  t_treasury_financial_account_features,
  t_treasury_inbound_transfer,
  t_treasury_outbound_payment,
  t_treasury_outbound_transfer,
  t_treasury_received_credit,
  t_treasury_received_debit,
  t_treasury_transaction,
  t_treasury_transaction_entry,
  t_webhook_endpoint,
} from "./models"
import {
  AbstractAxiosClient,
  AbstractAxiosConfig,
  Server,
} from "@nahkies/typescript-axios-runtime/main"
import { AxiosRequestConfig, AxiosResponse } from "axios"

export class StripeApiServersOperations {
  static postFiles(
    url: "https://files.stripe.com/" = "https://files.stripe.com/",
  ): { build: () => Server<"postFiles_StripeApi"> } {
    switch (url) {
      case "https://files.stripe.com/":
        return {
          build(): Server<"postFiles_StripeApi"> {
            return "https://files.stripe.com/" as Server<"postFiles_StripeApi">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }

  static getQuotesQuotePdf(
    url: "https://files.stripe.com/" = "https://files.stripe.com/",
  ): { build: () => Server<"getQuotesQuotePdf_StripeApi"> } {
    switch (url) {
      case "https://files.stripe.com/":
        return {
          build(): Server<"getQuotesQuotePdf_StripeApi"> {
            return "https://files.stripe.com/" as Server<"getQuotesQuotePdf_StripeApi">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }
}

export class StripeApiServers {
  static default(): Server<"StripeApi"> {
    return StripeApiServers.server().build()
  }

  static server(url: "https://api.stripe.com/" = "https://api.stripe.com/"): {
    build: () => Server<"StripeApi">
  } {
    switch (url) {
      case "https://api.stripe.com/":
        return {
          build(): Server<"StripeApi"> {
            return "https://api.stripe.com/" as Server<"StripeApi">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }

  static readonly operations = StripeApiServersOperations
}

export interface StripeApiConfig extends AbstractAxiosConfig {
  basePath: Server<"StripeApi"> | string
}

export class StripeApi extends AbstractAxiosClient {
  constructor(config: StripeApiConfig) {
    super(config)
  }

  async getAccount(
    p: {
      expand?: string[]
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_account>> {
    const url = `/v1/account`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountLinks(
    p: {
      requestBody: {
        account: string
        collect?:
          | ("currently_due" | "eventually_due" | UnknownEnumStringValue)
          | undefined
        collection_options?:
          | {
              fields?:
                | ("currently_due" | "eventually_due" | UnknownEnumStringValue)
                | undefined
              future_requirements?:
                | ("include" | "omit" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        refresh_url?: string | undefined
        return_url?: string | undefined
        type: "account_onboarding" | "account_update" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_account_link>> {
    const url = `/v1/account_links`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountSessions(
    p: {
      requestBody: {
        account: string
        components: {
          account_management?:
            | {
                enabled: boolean
                features?:
                  | {
                      disable_stripe_user_authentication?: boolean | undefined
                      external_account_collection?: boolean | undefined
                    }
                  | undefined
              }
            | undefined
          account_onboarding?:
            | {
                enabled: boolean
                features?:
                  | {
                      disable_stripe_user_authentication?: boolean | undefined
                      external_account_collection?: boolean | undefined
                    }
                  | undefined
              }
            | undefined
          balances?:
            | {
                enabled: boolean
                features?:
                  | {
                      disable_stripe_user_authentication?: boolean | undefined
                      edit_payout_schedule?: boolean | undefined
                      external_account_collection?: boolean | undefined
                      instant_payouts?: boolean | undefined
                      standard_payouts?: boolean | undefined
                    }
                  | undefined
              }
            | undefined
          documents?:
            | {
                enabled: boolean
                features?: EmptyObject | undefined
              }
            | undefined
          financial_account?:
            | {
                enabled: boolean
                features?:
                  | {
                      disable_stripe_user_authentication?: boolean | undefined
                      external_account_collection?: boolean | undefined
                      send_money?: boolean | undefined
                      transfer_balance?: boolean | undefined
                    }
                  | undefined
              }
            | undefined
          financial_account_transactions?:
            | {
                enabled: boolean
                features?:
                  | {
                      card_spend_dispute_management?: boolean | undefined
                    }
                  | undefined
              }
            | undefined
          issuing_card?:
            | {
                enabled: boolean
                features?:
                  | {
                      card_management?: boolean | undefined
                      card_spend_dispute_management?: boolean | undefined
                      cardholder_management?: boolean | undefined
                      spend_control_management?: boolean | undefined
                    }
                  | undefined
              }
            | undefined
          issuing_cards_list?:
            | {
                enabled: boolean
                features?:
                  | {
                      card_management?: boolean | undefined
                      card_spend_dispute_management?: boolean | undefined
                      cardholder_management?: boolean | undefined
                      disable_stripe_user_authentication?: boolean | undefined
                      spend_control_management?: boolean | undefined
                    }
                  | undefined
              }
            | undefined
          notification_banner?:
            | {
                enabled: boolean
                features?:
                  | {
                      disable_stripe_user_authentication?: boolean | undefined
                      external_account_collection?: boolean | undefined
                    }
                  | undefined
              }
            | undefined
          payment_details?:
            | {
                enabled: boolean
                features?:
                  | {
                      capture_payments?: boolean | undefined
                      destination_on_behalf_of_charge_management?:
                        | boolean
                        | undefined
                      dispute_management?: boolean | undefined
                      refund_management?: boolean | undefined
                    }
                  | undefined
              }
            | undefined
          payments?:
            | {
                enabled: boolean
                features?:
                  | {
                      capture_payments?: boolean | undefined
                      destination_on_behalf_of_charge_management?:
                        | boolean
                        | undefined
                      dispute_management?: boolean | undefined
                      refund_management?: boolean | undefined
                    }
                  | undefined
              }
            | undefined
          payouts?:
            | {
                enabled: boolean
                features?:
                  | {
                      disable_stripe_user_authentication?: boolean | undefined
                      edit_payout_schedule?: boolean | undefined
                      external_account_collection?: boolean | undefined
                      instant_payouts?: boolean | undefined
                      standard_payouts?: boolean | undefined
                    }
                  | undefined
              }
            | undefined
          payouts_list?:
            | {
                enabled: boolean
                features?: EmptyObject | undefined
              }
            | undefined
          tax_registrations?:
            | {
                enabled: boolean
                features?: EmptyObject | undefined
              }
            | undefined
          tax_settings?:
            | {
                enabled: boolean
                features?: EmptyObject | undefined
              }
            | undefined
        }
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_account_session>> {
    const url = `/v1/account_sessions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAccounts(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_account[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/accounts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccounts(
    p: {
      requestBody?: {
        account_token?: string | undefined
        bank_account?:
          | (
              | {
                  account_holder_name?: string | undefined
                  account_holder_type?:
                    | ("company" | "individual" | UnknownEnumStringValue)
                    | undefined
                  account_number: string
                  account_type?:
                    | (
                        | "checking"
                        | "futsu"
                        | "savings"
                        | "toza"
                        | UnknownEnumStringValue
                      )
                    | undefined
                  country: string
                  currency?: string | undefined
                  documents?:
                    | {
                        bank_account_ownership_verification?:
                          | {
                              files?: string[] | undefined
                            }
                          | undefined
                      }
                    | undefined
                  object?: ("bank_account" | UnknownEnumStringValue) | undefined
                  routing_number?: string | undefined
                }
              | string
            )
          | undefined
        business_profile?:
          | {
              annual_revenue?:
                | {
                    amount: number
                    currency: string
                    fiscal_year_end: string
                  }
                | undefined
              estimated_worker_count?: number | undefined
              mcc?: string | undefined
              monthly_estimated_revenue?:
                | {
                    amount: number
                    currency: string
                  }
                | undefined
              name?: string | undefined
              product_description?: string | undefined
              support_address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              support_email?: string | undefined
              support_phone?: string | undefined
              support_url?: (string | "" | UnknownEnumStringValue) | undefined
              url?: string | undefined
            }
          | undefined
        business_type?:
          | (
              | "company"
              | "government_entity"
              | "individual"
              | "non_profit"
              | UnknownEnumStringValue
            )
          | undefined
        capabilities?:
          | {
              acss_debit_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              affirm_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              afterpay_clearpay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              alma_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              amazon_pay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              au_becs_debit_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              bacs_debit_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              bancontact_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              billie_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              blik_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              boleto_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              card_issuing?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              card_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              cartes_bancaires_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              cashapp_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              eps_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              fpx_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              gb_bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              giropay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              grabpay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              ideal_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              india_international_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              jcb_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              jp_bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              kakao_pay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              klarna_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              konbini_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              kr_card_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              legacy_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              link_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              mobilepay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              multibanco_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              mx_bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              naver_pay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              nz_bank_account_becs_debit_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              oxxo_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              p24_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              pay_by_bank_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              payco_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              paynow_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              promptpay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              revolut_pay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              samsung_pay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              satispay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              sepa_bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              sepa_debit_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              sofort_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              swish_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              tax_reporting_us_1099_k?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              tax_reporting_us_1099_misc?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              transfers?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              treasury?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              twint_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              us_bank_account_ach_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              us_bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              zip_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
            }
          | undefined
        company?:
          | {
              address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              address_kana?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                    town?: string | undefined
                  }
                | undefined
              address_kanji?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                    town?: string | undefined
                  }
                | undefined
              directors_provided?: boolean | undefined
              directorship_declaration?:
                | {
                    date?: number | undefined
                    ip?: string | undefined
                    user_agent?: string | undefined
                  }
                | undefined
              executives_provided?: boolean | undefined
              export_license_id?: string | undefined
              export_purpose_code?: string | undefined
              name?: string | undefined
              name_kana?: string | undefined
              name_kanji?: string | undefined
              owners_provided?: boolean | undefined
              ownership_declaration?:
                | {
                    date?: number | undefined
                    ip?: string | undefined
                    user_agent?: string | undefined
                  }
                | undefined
              ownership_exemption_reason?:
                | (
                    | ""
                    | "qualified_entity_exceeds_ownership_threshold"
                    | "qualifies_as_financial_institution"
                    | UnknownEnumStringValue
                  )
                | undefined
              phone?: string | undefined
              registration_number?: string | undefined
              structure?:
                | (
                    | ""
                    | "free_zone_establishment"
                    | "free_zone_llc"
                    | "government_instrumentality"
                    | "governmental_unit"
                    | "incorporated_non_profit"
                    | "incorporated_partnership"
                    | "limited_liability_partnership"
                    | "llc"
                    | "multi_member_llc"
                    | "private_company"
                    | "private_corporation"
                    | "private_partnership"
                    | "public_company"
                    | "public_corporation"
                    | "public_partnership"
                    | "registered_charity"
                    | "single_member_llc"
                    | "sole_establishment"
                    | "sole_proprietorship"
                    | "tax_exempt_government_instrumentality"
                    | "unincorporated_association"
                    | "unincorporated_non_profit"
                    | "unincorporated_partnership"
                    | UnknownEnumStringValue
                  )
                | undefined
              tax_id?: string | undefined
              tax_id_registrar?: string | undefined
              vat_id?: string | undefined
              verification?:
                | {
                    document?:
                      | {
                          back?: string | undefined
                          front?: string | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        controller?:
          | {
              fees?:
                | {
                    payer?:
                      | ("account" | "application" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              losses?:
                | {
                    payments?:
                      | ("application" | "stripe" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              requirement_collection?:
                | ("application" | "stripe" | UnknownEnumStringValue)
                | undefined
              stripe_dashboard?:
                | {
                    type?:
                      | ("express" | "full" | "none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        country?: string | undefined
        default_currency?: string | undefined
        documents?:
          | {
              bank_account_ownership_verification?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              company_license?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              company_memorandum_of_association?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              company_ministerial_decree?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              company_registration_verification?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              company_tax_id_verification?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              proof_of_registration?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              proof_of_ultimate_beneficial_ownership?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
            }
          | undefined
        email?: string | undefined
        expand?: string[] | undefined
        external_account?: string | undefined
        groups?:
          | {
              payments_pricing?:
                | (string | "" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        individual?:
          | {
              address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              address_kana?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                    town?: string | undefined
                  }
                | undefined
              address_kanji?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                    town?: string | undefined
                  }
                | undefined
              dob?:
                | (
                    | {
                        day: number
                        month: number
                        year: number
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              email?: string | undefined
              first_name?: string | undefined
              first_name_kana?: string | undefined
              first_name_kanji?: string | undefined
              full_name_aliases?:
                | (string[] | "" | UnknownEnumStringValue)
                | undefined
              gender?: string | undefined
              id_number?: string | undefined
              id_number_secondary?: string | undefined
              last_name?: string | undefined
              last_name_kana?: string | undefined
              last_name_kanji?: string | undefined
              maiden_name?: string | undefined
              metadata?:
                | (
                    | {
                        [key: string]: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              phone?: string | undefined
              political_exposure?:
                | ("existing" | "none" | UnknownEnumStringValue)
                | undefined
              registered_address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              relationship?:
                | {
                    director?: boolean | undefined
                    executive?: boolean | undefined
                    owner?: boolean | undefined
                    percent_ownership?:
                      | (number | "" | UnknownEnumStringValue)
                      | undefined
                    title?: string | undefined
                  }
                | undefined
              ssn_last_4?: string | undefined
              verification?:
                | {
                    additional_document?:
                      | {
                          back?: string | undefined
                          front?: string | undefined
                        }
                      | undefined
                    document?:
                      | {
                          back?: string | undefined
                          front?: string | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        settings?:
          | {
              bacs_debit_payments?:
                | {
                    display_name?: string | undefined
                  }
                | undefined
              branding?:
                | {
                    icon?: string | undefined
                    logo?: string | undefined
                    primary_color?: string | undefined
                    secondary_color?: string | undefined
                  }
                | undefined
              card_issuing?:
                | {
                    tos_acceptance?:
                      | {
                          date?: number | undefined
                          ip?: string | undefined
                          user_agent?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              card_payments?:
                | {
                    decline_on?:
                      | {
                          avs_failure?: boolean | undefined
                          cvc_failure?: boolean | undefined
                        }
                      | undefined
                    statement_descriptor_prefix?: string | undefined
                    statement_descriptor_prefix_kana?:
                      | (string | "" | UnknownEnumStringValue)
                      | undefined
                    statement_descriptor_prefix_kanji?:
                      | (string | "" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              invoices?:
                | {
                    hosted_payment_method_save?:
                      | ("always" | "never" | "offer" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              payments?:
                | {
                    statement_descriptor?: string | undefined
                    statement_descriptor_kana?: string | undefined
                    statement_descriptor_kanji?: string | undefined
                  }
                | undefined
              payouts?:
                | {
                    debit_negative_balances?: boolean | undefined
                    schedule?:
                      | {
                          delay_days?:
                            | ("minimum" | UnknownEnumStringValue | number)
                            | undefined
                          interval?:
                            | (
                                | "daily"
                                | "manual"
                                | "monthly"
                                | "weekly"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          monthly_anchor?: number | undefined
                          weekly_anchor?:
                            | (
                                | "friday"
                                | "monday"
                                | "saturday"
                                | "sunday"
                                | "thursday"
                                | "tuesday"
                                | "wednesday"
                                | UnknownEnumStringValue
                              )
                            | undefined
                        }
                      | undefined
                    statement_descriptor?: string | undefined
                  }
                | undefined
              treasury?:
                | {
                    tos_acceptance?:
                      | {
                          date?: number | undefined
                          ip?: string | undefined
                          user_agent?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        tos_acceptance?:
          | {
              date?: number | undefined
              ip?: string | undefined
              service_agreement?: string | undefined
              user_agent?: string | undefined
            }
          | undefined
        type?:
          | ("custom" | "express" | "standard" | UnknownEnumStringValue)
          | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_account>> {
    const url = `/v1/accounts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteAccountsAccount(
    p: {
      account: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_account>> {
    const url = `/v1/accounts/${p["account"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAccountsAccount(
    p: {
      account: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_account>> {
    const url = `/v1/accounts/${p["account"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccount(
    p: {
      account: string
      requestBody?: {
        account_token?: string | undefined
        business_profile?:
          | {
              annual_revenue?:
                | {
                    amount: number
                    currency: string
                    fiscal_year_end: string
                  }
                | undefined
              estimated_worker_count?: number | undefined
              mcc?: string | undefined
              monthly_estimated_revenue?:
                | {
                    amount: number
                    currency: string
                  }
                | undefined
              name?: string | undefined
              product_description?: string | undefined
              support_address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              support_email?: string | undefined
              support_phone?: string | undefined
              support_url?: (string | "" | UnknownEnumStringValue) | undefined
              url?: string | undefined
            }
          | undefined
        business_type?:
          | (
              | "company"
              | "government_entity"
              | "individual"
              | "non_profit"
              | UnknownEnumStringValue
            )
          | undefined
        capabilities?:
          | {
              acss_debit_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              affirm_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              afterpay_clearpay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              alma_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              amazon_pay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              au_becs_debit_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              bacs_debit_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              bancontact_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              billie_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              blik_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              boleto_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              card_issuing?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              card_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              cartes_bancaires_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              cashapp_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              eps_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              fpx_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              gb_bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              giropay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              grabpay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              ideal_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              india_international_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              jcb_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              jp_bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              kakao_pay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              klarna_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              konbini_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              kr_card_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              legacy_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              link_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              mobilepay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              multibanco_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              mx_bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              naver_pay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              nz_bank_account_becs_debit_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              oxxo_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              p24_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              pay_by_bank_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              payco_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              paynow_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              promptpay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              revolut_pay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              samsung_pay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              satispay_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              sepa_bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              sepa_debit_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              sofort_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              swish_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              tax_reporting_us_1099_k?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              tax_reporting_us_1099_misc?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              transfers?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              treasury?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              twint_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              us_bank_account_ach_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              us_bank_transfer_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
              zip_payments?:
                | {
                    requested?: boolean | undefined
                  }
                | undefined
            }
          | undefined
        company?:
          | {
              address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              address_kana?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                    town?: string | undefined
                  }
                | undefined
              address_kanji?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                    town?: string | undefined
                  }
                | undefined
              directors_provided?: boolean | undefined
              directorship_declaration?:
                | {
                    date?: number | undefined
                    ip?: string | undefined
                    user_agent?: string | undefined
                  }
                | undefined
              executives_provided?: boolean | undefined
              export_license_id?: string | undefined
              export_purpose_code?: string | undefined
              name?: string | undefined
              name_kana?: string | undefined
              name_kanji?: string | undefined
              owners_provided?: boolean | undefined
              ownership_declaration?:
                | {
                    date?: number | undefined
                    ip?: string | undefined
                    user_agent?: string | undefined
                  }
                | undefined
              ownership_exemption_reason?:
                | (
                    | ""
                    | "qualified_entity_exceeds_ownership_threshold"
                    | "qualifies_as_financial_institution"
                    | UnknownEnumStringValue
                  )
                | undefined
              phone?: string | undefined
              registration_number?: string | undefined
              structure?:
                | (
                    | ""
                    | "free_zone_establishment"
                    | "free_zone_llc"
                    | "government_instrumentality"
                    | "governmental_unit"
                    | "incorporated_non_profit"
                    | "incorporated_partnership"
                    | "limited_liability_partnership"
                    | "llc"
                    | "multi_member_llc"
                    | "private_company"
                    | "private_corporation"
                    | "private_partnership"
                    | "public_company"
                    | "public_corporation"
                    | "public_partnership"
                    | "registered_charity"
                    | "single_member_llc"
                    | "sole_establishment"
                    | "sole_proprietorship"
                    | "tax_exempt_government_instrumentality"
                    | "unincorporated_association"
                    | "unincorporated_non_profit"
                    | "unincorporated_partnership"
                    | UnknownEnumStringValue
                  )
                | undefined
              tax_id?: string | undefined
              tax_id_registrar?: string | undefined
              vat_id?: string | undefined
              verification?:
                | {
                    document?:
                      | {
                          back?: string | undefined
                          front?: string | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        default_currency?: string | undefined
        documents?:
          | {
              bank_account_ownership_verification?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              company_license?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              company_memorandum_of_association?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              company_ministerial_decree?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              company_registration_verification?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              company_tax_id_verification?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              proof_of_registration?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
              proof_of_ultimate_beneficial_ownership?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
            }
          | undefined
        email?: string | undefined
        expand?: string[] | undefined
        external_account?: string | undefined
        groups?:
          | {
              payments_pricing?:
                | (string | "" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        individual?:
          | {
              address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              address_kana?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                    town?: string | undefined
                  }
                | undefined
              address_kanji?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                    town?: string | undefined
                  }
                | undefined
              dob?:
                | (
                    | {
                        day: number
                        month: number
                        year: number
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              email?: string | undefined
              first_name?: string | undefined
              first_name_kana?: string | undefined
              first_name_kanji?: string | undefined
              full_name_aliases?:
                | (string[] | "" | UnknownEnumStringValue)
                | undefined
              gender?: string | undefined
              id_number?: string | undefined
              id_number_secondary?: string | undefined
              last_name?: string | undefined
              last_name_kana?: string | undefined
              last_name_kanji?: string | undefined
              maiden_name?: string | undefined
              metadata?:
                | (
                    | {
                        [key: string]: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              phone?: string | undefined
              political_exposure?:
                | ("existing" | "none" | UnknownEnumStringValue)
                | undefined
              registered_address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              relationship?:
                | {
                    director?: boolean | undefined
                    executive?: boolean | undefined
                    owner?: boolean | undefined
                    percent_ownership?:
                      | (number | "" | UnknownEnumStringValue)
                      | undefined
                    title?: string | undefined
                  }
                | undefined
              ssn_last_4?: string | undefined
              verification?:
                | {
                    additional_document?:
                      | {
                          back?: string | undefined
                          front?: string | undefined
                        }
                      | undefined
                    document?:
                      | {
                          back?: string | undefined
                          front?: string | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        settings?:
          | {
              bacs_debit_payments?:
                | {
                    display_name?: string | undefined
                  }
                | undefined
              branding?:
                | {
                    icon?: string | undefined
                    logo?: string | undefined
                    primary_color?: string | undefined
                    secondary_color?: string | undefined
                  }
                | undefined
              card_issuing?:
                | {
                    tos_acceptance?:
                      | {
                          date?: number | undefined
                          ip?: string | undefined
                          user_agent?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              card_payments?:
                | {
                    decline_on?:
                      | {
                          avs_failure?: boolean | undefined
                          cvc_failure?: boolean | undefined
                        }
                      | undefined
                    statement_descriptor_prefix?: string | undefined
                    statement_descriptor_prefix_kana?:
                      | (string | "" | UnknownEnumStringValue)
                      | undefined
                    statement_descriptor_prefix_kanji?:
                      | (string | "" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              invoices?:
                | {
                    default_account_tax_ids?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                    hosted_payment_method_save?:
                      | ("always" | "never" | "offer" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              payments?:
                | {
                    statement_descriptor?: string | undefined
                    statement_descriptor_kana?: string | undefined
                    statement_descriptor_kanji?: string | undefined
                  }
                | undefined
              payouts?:
                | {
                    debit_negative_balances?: boolean | undefined
                    schedule?:
                      | {
                          delay_days?:
                            | ("minimum" | UnknownEnumStringValue | number)
                            | undefined
                          interval?:
                            | (
                                | "daily"
                                | "manual"
                                | "monthly"
                                | "weekly"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          monthly_anchor?: number | undefined
                          weekly_anchor?:
                            | (
                                | "friday"
                                | "monday"
                                | "saturday"
                                | "sunday"
                                | "thursday"
                                | "tuesday"
                                | "wednesday"
                                | UnknownEnumStringValue
                              )
                            | undefined
                        }
                      | undefined
                    statement_descriptor?: string | undefined
                  }
                | undefined
              treasury?:
                | {
                    tos_acceptance?:
                      | {
                          date?: number | undefined
                          ip?: string | undefined
                          user_agent?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        tos_acceptance?:
          | {
              date?: number | undefined
              ip?: string | undefined
              service_agreement?: string | undefined
              user_agent?: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_account>> {
    const url = `/v1/accounts/${p["account"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccountBankAccounts(
    p: {
      account: string
      requestBody?: {
        bank_account?:
          | (
              | {
                  account_holder_name?: string | undefined
                  account_holder_type?:
                    | ("company" | "individual" | UnknownEnumStringValue)
                    | undefined
                  account_number: string
                  account_type?:
                    | (
                        | "checking"
                        | "futsu"
                        | "savings"
                        | "toza"
                        | UnknownEnumStringValue
                      )
                    | undefined
                  country: string
                  currency?: string | undefined
                  documents?:
                    | {
                        bank_account_ownership_verification?:
                          | {
                              files?: string[] | undefined
                            }
                          | undefined
                      }
                    | undefined
                  object?: ("bank_account" | UnknownEnumStringValue) | undefined
                  routing_number?: string | undefined
                }
              | string
            )
          | undefined
        default_for_currency?: boolean | undefined
        expand?: string[] | undefined
        external_account?: string | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_external_account>> {
    const url = `/v1/accounts/${p["account"]}/bank_accounts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteAccountsAccountBankAccountsId(
    p: {
      account: string
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_external_account>> {
    const url = `/v1/accounts/${p["account"]}/bank_accounts/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAccountsAccountBankAccountsId(
    p: {
      account: string
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_external_account>> {
    const url = `/v1/accounts/${p["account"]}/bank_accounts/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccountBankAccountsId(
    p: {
      account: string
      id: string
      requestBody?: {
        account_holder_name?: string | undefined
        account_holder_type?:
          | ("" | "company" | "individual" | UnknownEnumStringValue)
          | undefined
        account_type?:
          | ("checking" | "futsu" | "savings" | "toza" | UnknownEnumStringValue)
          | undefined
        address_city?: string | undefined
        address_country?: string | undefined
        address_line1?: string | undefined
        address_line2?: string | undefined
        address_state?: string | undefined
        address_zip?: string | undefined
        default_for_currency?: boolean | undefined
        documents?:
          | {
              bank_account_ownership_verification?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
            }
          | undefined
        exp_month?: string | undefined
        exp_year?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_external_account>> {
    const url = `/v1/accounts/${p["account"]}/bank_accounts/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAccountsAccountCapabilities(
    p: {
      account: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_capability[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/accounts/${p["account"]}/capabilities`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAccountsAccountCapabilitiesCapability(
    p: {
      account: string
      capability: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_capability>> {
    const url = `/v1/accounts/${p["account"]}/capabilities/${p["capability"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccountCapabilitiesCapability(
    p: {
      account: string
      capability: string
      requestBody?: {
        expand?: string[] | undefined
        requested?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_capability>> {
    const url = `/v1/accounts/${p["account"]}/capabilities/${p["capability"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAccountsAccountExternalAccounts(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      object?: "bank_account" | "card" | UnknownEnumStringValue
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: (t_bank_account | t_card)[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/accounts/${p["account"]}/external_accounts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      object: p["object"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccountExternalAccounts(
    p: {
      account: string
      requestBody?: {
        bank_account?:
          | (
              | {
                  account_holder_name?: string | undefined
                  account_holder_type?:
                    | ("company" | "individual" | UnknownEnumStringValue)
                    | undefined
                  account_number: string
                  account_type?:
                    | (
                        | "checking"
                        | "futsu"
                        | "savings"
                        | "toza"
                        | UnknownEnumStringValue
                      )
                    | undefined
                  country: string
                  currency?: string | undefined
                  documents?:
                    | {
                        bank_account_ownership_verification?:
                          | {
                              files?: string[] | undefined
                            }
                          | undefined
                      }
                    | undefined
                  object?: ("bank_account" | UnknownEnumStringValue) | undefined
                  routing_number?: string | undefined
                }
              | string
            )
          | undefined
        default_for_currency?: boolean | undefined
        expand?: string[] | undefined
        external_account?: string | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_external_account>> {
    const url = `/v1/accounts/${p["account"]}/external_accounts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteAccountsAccountExternalAccountsId(
    p: {
      account: string
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_external_account>> {
    const url = `/v1/accounts/${p["account"]}/external_accounts/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAccountsAccountExternalAccountsId(
    p: {
      account: string
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_external_account>> {
    const url = `/v1/accounts/${p["account"]}/external_accounts/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccountExternalAccountsId(
    p: {
      account: string
      id: string
      requestBody?: {
        account_holder_name?: string | undefined
        account_holder_type?:
          | ("" | "company" | "individual" | UnknownEnumStringValue)
          | undefined
        account_type?:
          | ("checking" | "futsu" | "savings" | "toza" | UnknownEnumStringValue)
          | undefined
        address_city?: string | undefined
        address_country?: string | undefined
        address_line1?: string | undefined
        address_line2?: string | undefined
        address_state?: string | undefined
        address_zip?: string | undefined
        default_for_currency?: boolean | undefined
        documents?:
          | {
              bank_account_ownership_verification?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
            }
          | undefined
        exp_month?: string | undefined
        exp_year?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_external_account>> {
    const url = `/v1/accounts/${p["account"]}/external_accounts/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccountLoginLinks(
    p: {
      account: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_login_link>> {
    const url = `/v1/accounts/${p["account"]}/login_links`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAccountsAccountPeople(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      relationship?: {
        authorizer?: boolean | undefined
        director?: boolean | undefined
        executive?: boolean | undefined
        legal_guardian?: boolean | undefined
        owner?: boolean | undefined
        representative?: boolean | undefined
      }
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_person[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/accounts/${p["account"]}/people`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      relationship: p["relationship"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccountPeople(
    p: {
      account: string
      requestBody?: {
        additional_tos_acceptances?:
          | {
              account?:
                | {
                    date?: number | undefined
                    ip?: string | undefined
                    user_agent?:
                      | (string | "" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        address?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
            }
          | undefined
        address_kana?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
              town?: string | undefined
            }
          | undefined
        address_kanji?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
              town?: string | undefined
            }
          | undefined
        dob?:
          | (
              | {
                  day: number
                  month: number
                  year: number
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        documents?:
          | {
              company_authorization?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
              passport?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
              visa?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
            }
          | undefined
        email?: string | undefined
        expand?: string[] | undefined
        first_name?: string | undefined
        first_name_kana?: string | undefined
        first_name_kanji?: string | undefined
        full_name_aliases?: (string[] | "" | UnknownEnumStringValue) | undefined
        gender?: string | undefined
        id_number?: string | undefined
        id_number_secondary?: string | undefined
        last_name?: string | undefined
        last_name_kana?: string | undefined
        last_name_kanji?: string | undefined
        maiden_name?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        nationality?: string | undefined
        person_token?: string | undefined
        phone?: string | undefined
        political_exposure?:
          | ("existing" | "none" | UnknownEnumStringValue)
          | undefined
        registered_address?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
            }
          | undefined
        relationship?:
          | {
              authorizer?: boolean | undefined
              director?: boolean | undefined
              executive?: boolean | undefined
              legal_guardian?: boolean | undefined
              owner?: boolean | undefined
              percent_ownership?:
                | (number | "" | UnknownEnumStringValue)
                | undefined
              representative?: boolean | undefined
              title?: string | undefined
            }
          | undefined
        ssn_last_4?: string | undefined
        verification?:
          | {
              additional_document?:
                | {
                    back?: string | undefined
                    front?: string | undefined
                  }
                | undefined
              document?:
                | {
                    back?: string | undefined
                    front?: string | undefined
                  }
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_person>> {
    const url = `/v1/accounts/${p["account"]}/people`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteAccountsAccountPeoplePerson(
    p: {
      account: string
      person: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_person>> {
    const url = `/v1/accounts/${p["account"]}/people/${p["person"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAccountsAccountPeoplePerson(
    p: {
      account: string
      expand?: string[]
      person: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_person>> {
    const url = `/v1/accounts/${p["account"]}/people/${p["person"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccountPeoplePerson(
    p: {
      account: string
      person: string
      requestBody?: {
        additional_tos_acceptances?:
          | {
              account?:
                | {
                    date?: number | undefined
                    ip?: string | undefined
                    user_agent?:
                      | (string | "" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        address?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
            }
          | undefined
        address_kana?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
              town?: string | undefined
            }
          | undefined
        address_kanji?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
              town?: string | undefined
            }
          | undefined
        dob?:
          | (
              | {
                  day: number
                  month: number
                  year: number
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        documents?:
          | {
              company_authorization?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
              passport?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
              visa?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
            }
          | undefined
        email?: string | undefined
        expand?: string[] | undefined
        first_name?: string | undefined
        first_name_kana?: string | undefined
        first_name_kanji?: string | undefined
        full_name_aliases?: (string[] | "" | UnknownEnumStringValue) | undefined
        gender?: string | undefined
        id_number?: string | undefined
        id_number_secondary?: string | undefined
        last_name?: string | undefined
        last_name_kana?: string | undefined
        last_name_kanji?: string | undefined
        maiden_name?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        nationality?: string | undefined
        person_token?: string | undefined
        phone?: string | undefined
        political_exposure?:
          | ("existing" | "none" | UnknownEnumStringValue)
          | undefined
        registered_address?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
            }
          | undefined
        relationship?:
          | {
              authorizer?: boolean | undefined
              director?: boolean | undefined
              executive?: boolean | undefined
              legal_guardian?: boolean | undefined
              owner?: boolean | undefined
              percent_ownership?:
                | (number | "" | UnknownEnumStringValue)
                | undefined
              representative?: boolean | undefined
              title?: string | undefined
            }
          | undefined
        ssn_last_4?: string | undefined
        verification?:
          | {
              additional_document?:
                | {
                    back?: string | undefined
                    front?: string | undefined
                  }
                | undefined
              document?:
                | {
                    back?: string | undefined
                    front?: string | undefined
                  }
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_person>> {
    const url = `/v1/accounts/${p["account"]}/people/${p["person"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAccountsAccountPersons(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      relationship?: {
        authorizer?: boolean | undefined
        director?: boolean | undefined
        executive?: boolean | undefined
        legal_guardian?: boolean | undefined
        owner?: boolean | undefined
        representative?: boolean | undefined
      }
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_person[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/accounts/${p["account"]}/persons`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      relationship: p["relationship"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccountPersons(
    p: {
      account: string
      requestBody?: {
        additional_tos_acceptances?:
          | {
              account?:
                | {
                    date?: number | undefined
                    ip?: string | undefined
                    user_agent?:
                      | (string | "" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        address?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
            }
          | undefined
        address_kana?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
              town?: string | undefined
            }
          | undefined
        address_kanji?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
              town?: string | undefined
            }
          | undefined
        dob?:
          | (
              | {
                  day: number
                  month: number
                  year: number
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        documents?:
          | {
              company_authorization?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
              passport?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
              visa?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
            }
          | undefined
        email?: string | undefined
        expand?: string[] | undefined
        first_name?: string | undefined
        first_name_kana?: string | undefined
        first_name_kanji?: string | undefined
        full_name_aliases?: (string[] | "" | UnknownEnumStringValue) | undefined
        gender?: string | undefined
        id_number?: string | undefined
        id_number_secondary?: string | undefined
        last_name?: string | undefined
        last_name_kana?: string | undefined
        last_name_kanji?: string | undefined
        maiden_name?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        nationality?: string | undefined
        person_token?: string | undefined
        phone?: string | undefined
        political_exposure?:
          | ("existing" | "none" | UnknownEnumStringValue)
          | undefined
        registered_address?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
            }
          | undefined
        relationship?:
          | {
              authorizer?: boolean | undefined
              director?: boolean | undefined
              executive?: boolean | undefined
              legal_guardian?: boolean | undefined
              owner?: boolean | undefined
              percent_ownership?:
                | (number | "" | UnknownEnumStringValue)
                | undefined
              representative?: boolean | undefined
              title?: string | undefined
            }
          | undefined
        ssn_last_4?: string | undefined
        verification?:
          | {
              additional_document?:
                | {
                    back?: string | undefined
                    front?: string | undefined
                  }
                | undefined
              document?:
                | {
                    back?: string | undefined
                    front?: string | undefined
                  }
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_person>> {
    const url = `/v1/accounts/${p["account"]}/persons`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteAccountsAccountPersonsPerson(
    p: {
      account: string
      person: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_person>> {
    const url = `/v1/accounts/${p["account"]}/persons/${p["person"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAccountsAccountPersonsPerson(
    p: {
      account: string
      expand?: string[]
      person: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_person>> {
    const url = `/v1/accounts/${p["account"]}/persons/${p["person"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccountPersonsPerson(
    p: {
      account: string
      person: string
      requestBody?: {
        additional_tos_acceptances?:
          | {
              account?:
                | {
                    date?: number | undefined
                    ip?: string | undefined
                    user_agent?:
                      | (string | "" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        address?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
            }
          | undefined
        address_kana?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
              town?: string | undefined
            }
          | undefined
        address_kanji?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
              town?: string | undefined
            }
          | undefined
        dob?:
          | (
              | {
                  day: number
                  month: number
                  year: number
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        documents?:
          | {
              company_authorization?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
              passport?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
              visa?:
                | {
                    files?: (string | "" | UnknownEnumStringValue)[] | undefined
                  }
                | undefined
            }
          | undefined
        email?: string | undefined
        expand?: string[] | undefined
        first_name?: string | undefined
        first_name_kana?: string | undefined
        first_name_kanji?: string | undefined
        full_name_aliases?: (string[] | "" | UnknownEnumStringValue) | undefined
        gender?: string | undefined
        id_number?: string | undefined
        id_number_secondary?: string | undefined
        last_name?: string | undefined
        last_name_kana?: string | undefined
        last_name_kanji?: string | undefined
        maiden_name?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        nationality?: string | undefined
        person_token?: string | undefined
        phone?: string | undefined
        political_exposure?:
          | ("existing" | "none" | UnknownEnumStringValue)
          | undefined
        registered_address?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
            }
          | undefined
        relationship?:
          | {
              authorizer?: boolean | undefined
              director?: boolean | undefined
              executive?: boolean | undefined
              legal_guardian?: boolean | undefined
              owner?: boolean | undefined
              percent_ownership?:
                | (number | "" | UnknownEnumStringValue)
                | undefined
              representative?: boolean | undefined
              title?: string | undefined
            }
          | undefined
        ssn_last_4?: string | undefined
        verification?:
          | {
              additional_document?:
                | {
                    back?: string | undefined
                    front?: string | undefined
                  }
                | undefined
              document?:
                | {
                    back?: string | undefined
                    front?: string | undefined
                  }
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_person>> {
    const url = `/v1/accounts/${p["account"]}/persons/${p["person"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAccountsAccountReject(
    p: {
      account: string
      requestBody: {
        expand?: string[] | undefined
        reason: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_account>> {
    const url = `/v1/accounts/${p["account"]}/reject`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getApplePayDomains(
    p: {
      domainName?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_apple_pay_domain[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/apple_pay/domains`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      domain_name: p["domainName"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postApplePayDomains(
    p: {
      requestBody: {
        domain_name: string
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_apple_pay_domain>> {
    const url = `/v1/apple_pay/domains`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteApplePayDomainsDomain(
    p: {
      domain: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_apple_pay_domain>> {
    const url = `/v1/apple_pay/domains/${p["domain"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getApplePayDomainsDomain(
    p: {
      domain: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_apple_pay_domain>> {
    const url = `/v1/apple_pay/domains/${p["domain"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getApplicationFees(
    p: {
      charge?: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_application_fee[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/application_fees`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getApplicationFeesFeeRefundsId(
    p: {
      expand?: string[]
      fee: string
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_fee_refund>> {
    const url = `/v1/application_fees/${p["fee"]}/refunds/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postApplicationFeesFeeRefundsId(
    p: {
      fee: string
      id: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_fee_refund>> {
    const url = `/v1/application_fees/${p["fee"]}/refunds/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getApplicationFeesId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_application_fee>> {
    const url = `/v1/application_fees/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postApplicationFeesIdRefund(
    p: {
      id: string
      requestBody?: {
        amount?: number | undefined
        directive?: string | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_application_fee>> {
    const url = `/v1/application_fees/${p["id"]}/refund`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getApplicationFeesIdRefunds(
    p: {
      endingBefore?: string
      expand?: string[]
      id: string
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_fee_refund[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/application_fees/${p["id"]}/refunds`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postApplicationFeesIdRefunds(
    p: {
      id: string
      requestBody?: {
        amount?: number | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_fee_refund>> {
    const url = `/v1/application_fees/${p["id"]}/refunds`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAppsSecrets(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      scope: {
        type: "account" | "user" | UnknownEnumStringValue
        user?: string | undefined
      }
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_apps_secret[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/apps/secrets`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      scope: p["scope"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAppsSecrets(
    p: {
      requestBody: {
        expand?: string[] | undefined
        expires_at?: number | undefined
        name: string
        payload: string
        scope: {
          type: "account" | "user" | UnknownEnumStringValue
          user?: string | undefined
        }
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_apps_secret>> {
    const url = `/v1/apps/secrets`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postAppsSecretsDelete(
    p: {
      requestBody: {
        expand?: string[] | undefined
        name: string
        scope: {
          type: "account" | "user" | UnknownEnumStringValue
          user?: string | undefined
        }
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_apps_secret>> {
    const url = `/v1/apps/secrets/delete`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getAppsSecretsFind(
    p: {
      expand?: string[]
      name: string
      scope: {
        type: "account" | "user" | UnknownEnumStringValue
        user?: string | undefined
      }
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_apps_secret>> {
    const url = `/v1/apps/secrets/find`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      expand: p["expand"],
      name: p["name"],
      scope: p["scope"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBalance(
    p: {
      expand?: string[]
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_balance>> {
    const url = `/v1/balance`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBalanceHistory(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      payout?: string
      source?: string
      startingAfter?: string
      type?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_balance_transaction[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/balance/history`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payout: p["payout"],
      source: p["source"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBalanceHistoryId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_balance_transaction>> {
    const url = `/v1/balance/history/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBalanceTransactions(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      payout?: string
      source?: string
      startingAfter?: string
      type?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_balance_transaction[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/balance_transactions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payout: p["payout"],
      source: p["source"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBalanceTransactionsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_balance_transaction>> {
    const url = `/v1/balance_transactions/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingAlerts(
    p: {
      alertType?: "usage_threshold" | UnknownEnumStringValue
      endingBefore?: string
      expand?: string[]
      limit?: number
      meter?: string
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_billing_alert[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/billing/alerts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      alert_type: p["alertType"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      meter: p["meter"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingAlerts(
    p: {
      requestBody: {
        alert_type: "usage_threshold" | UnknownEnumStringValue
        expand?: string[] | undefined
        title: string
        usage_threshold?:
          | {
              filters?:
                | {
                    customer?: string | undefined
                    type: "customer" | UnknownEnumStringValue
                  }[]
                | undefined
              gte: number
              meter?: string | undefined
              recurrence: "one_time" | UnknownEnumStringValue
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_alert>> {
    const url = `/v1/billing/alerts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingAlertsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_alert>> {
    const url = `/v1/billing/alerts/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingAlertsIdActivate(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_alert>> {
    const url = `/v1/billing/alerts/${p["id"]}/activate`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingAlertsIdArchive(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_alert>> {
    const url = `/v1/billing/alerts/${p["id"]}/archive`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingAlertsIdDeactivate(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_alert>> {
    const url = `/v1/billing/alerts/${p["id"]}/deactivate`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingCreditBalanceSummary(
    p: {
      customer: string
      expand?: string[]
      filter: {
        applicability_scope?:
          | {
              price_type?: ("metered" | UnknownEnumStringValue) | undefined
              prices?:
                | {
                    id: string
                  }[]
                | undefined
            }
          | undefined
        credit_grant?: string | undefined
        type: "applicability_scope" | "credit_grant" | UnknownEnumStringValue
      }
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_credit_balance_summary>> {
    const url = `/v1/billing/credit_balance_summary`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      customer: p["customer"],
      expand: p["expand"],
      filter: p["filter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingCreditBalanceTransactions(
    p: {
      creditGrant?: string
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_billing_credit_balance_transaction[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/billing/credit_balance_transactions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      credit_grant: p["creditGrant"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingCreditBalanceTransactionsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_credit_balance_transaction>> {
    const url = `/v1/billing/credit_balance_transactions/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingCreditGrants(
    p: {
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_billing_credit_grant[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/billing/credit_grants`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingCreditGrants(
    p: {
      requestBody: {
        amount: {
          monetary?:
            | {
                currency: string
                value: number
              }
            | undefined
          type: "monetary" | UnknownEnumStringValue
        }
        applicability_config: {
          scope: {
            price_type?: ("metered" | UnknownEnumStringValue) | undefined
            prices?:
              | {
                  id: string
                }[]
              | undefined
          }
        }
        category: "paid" | "promotional" | UnknownEnumStringValue
        customer: string
        effective_at?: number | undefined
        expand?: string[] | undefined
        expires_at?: number | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        name?: string | undefined
        priority?: number | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_credit_grant>> {
    const url = `/v1/billing/credit_grants`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingCreditGrantsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_credit_grant>> {
    const url = `/v1/billing/credit_grants/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingCreditGrantsId(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
        expires_at?: (number | "" | UnknownEnumStringValue) | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_credit_grant>> {
    const url = `/v1/billing/credit_grants/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingCreditGrantsIdExpire(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_credit_grant>> {
    const url = `/v1/billing/credit_grants/${p["id"]}/expire`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingCreditGrantsIdVoid(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_credit_grant>> {
    const url = `/v1/billing/credit_grants/${p["id"]}/void`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingMeterEventAdjustments(
    p: {
      requestBody: {
        cancel?:
          | {
              identifier?: string | undefined
            }
          | undefined
        event_name: string
        expand?: string[] | undefined
        type: "cancel" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_meter_event_adjustment>> {
    const url = `/v1/billing/meter_event_adjustments`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingMeterEvents(
    p: {
      requestBody: {
        event_name: string
        expand?: string[] | undefined
        identifier?: string | undefined
        payload: {
          [key: string]: string | undefined
        }
        timestamp?: number | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_meter_event>> {
    const url = `/v1/billing/meter_events`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingMeters(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: "active" | "inactive" | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_billing_meter[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/billing/meters`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingMeters(
    p: {
      requestBody: {
        customer_mapping?:
          | {
              event_payload_key: string
              type: "by_id" | UnknownEnumStringValue
            }
          | undefined
        default_aggregation: {
          formula: "count" | "last" | "sum" | UnknownEnumStringValue
        }
        display_name: string
        event_name: string
        event_time_window?:
          | ("day" | "hour" | UnknownEnumStringValue)
          | undefined
        expand?: string[] | undefined
        value_settings?:
          | {
              event_payload_key: string
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_meter>> {
    const url = `/v1/billing/meters`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingMetersId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_meter>> {
    const url = `/v1/billing/meters/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingMetersId(
    p: {
      id: string
      requestBody?: {
        display_name?: string | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_meter>> {
    const url = `/v1/billing/meters/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingMetersIdDeactivate(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_meter>> {
    const url = `/v1/billing/meters/${p["id"]}/deactivate`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingMetersIdEventSummaries(
    p: {
      customer: string
      endTime: number
      endingBefore?: string
      expand?: string[]
      id: string
      limit?: number
      startTime: number
      startingAfter?: string
      valueGroupingWindow?: "day" | "hour" | UnknownEnumStringValue
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_billing_meter_event_summary[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/billing/meters/${p["id"]}/event_summaries`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      customer: p["customer"],
      end_time: p["endTime"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      start_time: p["startTime"],
      starting_after: p["startingAfter"],
      value_grouping_window: p["valueGroupingWindow"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingMetersIdReactivate(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_meter>> {
    const url = `/v1/billing/meters/${p["id"]}/reactivate`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingPortalConfigurations(
    p: {
      active?: boolean
      endingBefore?: string
      expand?: string[]
      isDefault?: boolean
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_billing_portal_configuration[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/billing_portal/configurations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      active: p["active"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      is_default: p["isDefault"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingPortalConfigurations(
    p: {
      requestBody: {
        business_profile?:
          | {
              headline?: (string | "" | UnknownEnumStringValue) | undefined
              privacy_policy_url?: string | undefined
              terms_of_service_url?: string | undefined
            }
          | undefined
        default_return_url?: (string | "" | UnknownEnumStringValue) | undefined
        expand?: string[] | undefined
        features: {
          customer_update?:
            | {
                allowed_updates?:
                  | (
                      | (
                          | "address"
                          | "email"
                          | "name"
                          | "phone"
                          | "shipping"
                          | "tax_id"
                          | UnknownEnumStringValue
                        )[]
                      | ""
                      | UnknownEnumStringValue
                    )
                  | undefined
                enabled: boolean
              }
            | undefined
          invoice_history?:
            | {
                enabled: boolean
              }
            | undefined
          payment_method_update?:
            | {
                enabled: boolean
              }
            | undefined
          subscription_cancel?:
            | {
                cancellation_reason?:
                  | {
                      enabled: boolean
                      options:
                        | (
                            | "customer_service"
                            | "low_quality"
                            | "missing_features"
                            | "other"
                            | "switched_service"
                            | "too_complex"
                            | "too_expensive"
                            | "unused"
                            | UnknownEnumStringValue
                          )[]
                        | ""
                        | UnknownEnumStringValue
                    }
                  | undefined
                enabled: boolean
                mode?:
                  | ("at_period_end" | "immediately" | UnknownEnumStringValue)
                  | undefined
                proration_behavior?:
                  | (
                      | "always_invoice"
                      | "create_prorations"
                      | "none"
                      | UnknownEnumStringValue
                    )
                  | undefined
              }
            | undefined
          subscription_update?:
            | {
                default_allowed_updates?:
                  | (
                      | (
                          | "price"
                          | "promotion_code"
                          | "quantity"
                          | UnknownEnumStringValue
                        )[]
                      | ""
                      | UnknownEnumStringValue
                    )
                  | undefined
                enabled: boolean
                products?:
                  | (
                      | {
                          prices: string[]
                          product: string
                        }[]
                      | ""
                      | UnknownEnumStringValue
                    )
                  | undefined
                proration_behavior?:
                  | (
                      | "always_invoice"
                      | "create_prorations"
                      | "none"
                      | UnknownEnumStringValue
                    )
                  | undefined
                schedule_at_period_end?:
                  | {
                      conditions?:
                        | {
                            type:
                              | "decreasing_item_amount"
                              | "shortening_interval"
                              | UnknownEnumStringValue
                          }[]
                        | undefined
                    }
                  | undefined
              }
            | undefined
        }
        login_page?:
          | {
              enabled: boolean
            }
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_portal_configuration>> {
    const url = `/v1/billing_portal/configurations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getBillingPortalConfigurationsConfiguration(
    p: {
      configuration: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_portal_configuration>> {
    const url = `/v1/billing_portal/configurations/${p["configuration"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingPortalConfigurationsConfiguration(
    p: {
      configuration: string
      requestBody?: {
        active?: boolean | undefined
        business_profile?:
          | {
              headline?: (string | "" | UnknownEnumStringValue) | undefined
              privacy_policy_url?:
                | (string | "" | UnknownEnumStringValue)
                | undefined
              terms_of_service_url?:
                | (string | "" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        default_return_url?: (string | "" | UnknownEnumStringValue) | undefined
        expand?: string[] | undefined
        features?:
          | {
              customer_update?:
                | {
                    allowed_updates?:
                      | (
                          | (
                              | "address"
                              | "email"
                              | "name"
                              | "phone"
                              | "shipping"
                              | "tax_id"
                              | UnknownEnumStringValue
                            )[]
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    enabled?: boolean | undefined
                  }
                | undefined
              invoice_history?:
                | {
                    enabled: boolean
                  }
                | undefined
              payment_method_update?:
                | {
                    enabled: boolean
                  }
                | undefined
              subscription_cancel?:
                | {
                    cancellation_reason?:
                      | {
                          enabled: boolean
                          options?:
                            | (
                                | (
                                    | "customer_service"
                                    | "low_quality"
                                    | "missing_features"
                                    | "other"
                                    | "switched_service"
                                    | "too_complex"
                                    | "too_expensive"
                                    | "unused"
                                    | UnknownEnumStringValue
                                  )[]
                                | ""
                                | UnknownEnumStringValue
                              )
                            | undefined
                        }
                      | undefined
                    enabled?: boolean | undefined
                    mode?:
                      | (
                          | "at_period_end"
                          | "immediately"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    proration_behavior?:
                      | (
                          | "always_invoice"
                          | "create_prorations"
                          | "none"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              subscription_update?:
                | {
                    default_allowed_updates?:
                      | (
                          | (
                              | "price"
                              | "promotion_code"
                              | "quantity"
                              | UnknownEnumStringValue
                            )[]
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    enabled?: boolean | undefined
                    products?:
                      | (
                          | {
                              prices: string[]
                              product: string
                            }[]
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    proration_behavior?:
                      | (
                          | "always_invoice"
                          | "create_prorations"
                          | "none"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    schedule_at_period_end?:
                      | {
                          conditions?:
                            | (
                                | {
                                    type:
                                      | "decreasing_item_amount"
                                      | "shortening_interval"
                                      | UnknownEnumStringValue
                                  }[]
                                | ""
                                | UnknownEnumStringValue
                              )
                            | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        login_page?:
          | {
              enabled: boolean
            }
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_portal_configuration>> {
    const url = `/v1/billing_portal/configurations/${p["configuration"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postBillingPortalSessions(
    p: {
      requestBody: {
        configuration?: string | undefined
        customer: string
        expand?: string[] | undefined
        flow_data?:
          | {
              after_completion?:
                | {
                    hosted_confirmation?:
                      | {
                          custom_message?: string | undefined
                        }
                      | undefined
                    redirect?:
                      | {
                          return_url: string
                        }
                      | undefined
                    type:
                      | "hosted_confirmation"
                      | "portal_homepage"
                      | "redirect"
                      | UnknownEnumStringValue
                  }
                | undefined
              subscription_cancel?:
                | {
                    retention?:
                      | {
                          coupon_offer: {
                            coupon: string
                          }
                          type: "coupon_offer" | UnknownEnumStringValue
                        }
                      | undefined
                    subscription: string
                  }
                | undefined
              subscription_update?:
                | {
                    subscription: string
                  }
                | undefined
              subscription_update_confirm?:
                | {
                    discounts?:
                      | {
                          coupon?: string | undefined
                          promotion_code?: string | undefined
                        }[]
                      | undefined
                    items: {
                      id: string
                      price?: string | undefined
                      quantity?: number | undefined
                    }[]
                    subscription: string
                  }
                | undefined
              type:
                | "payment_method_update"
                | "subscription_cancel"
                | "subscription_update"
                | "subscription_update_confirm"
                | UnknownEnumStringValue
            }
          | undefined
        locale?:
          | (
              | "auto"
              | "bg"
              | "cs"
              | "da"
              | "de"
              | "el"
              | "en"
              | "en-AU"
              | "en-CA"
              | "en-GB"
              | "en-IE"
              | "en-IN"
              | "en-NZ"
              | "en-SG"
              | "es"
              | "es-419"
              | "et"
              | "fi"
              | "fil"
              | "fr"
              | "fr-CA"
              | "hr"
              | "hu"
              | "id"
              | "it"
              | "ja"
              | "ko"
              | "lt"
              | "lv"
              | "ms"
              | "mt"
              | "nb"
              | "nl"
              | "pl"
              | "pt"
              | "pt-BR"
              | "ro"
              | "ru"
              | "sk"
              | "sl"
              | "sv"
              | "th"
              | "tr"
              | "vi"
              | "zh"
              | "zh-HK"
              | "zh-TW"
              | UnknownEnumStringValue
            )
          | undefined
        on_behalf_of?: string | undefined
        return_url?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_billing_portal_session>> {
    const url = `/v1/billing_portal/sessions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCharges(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
      transferGroup?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_charge[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/charges`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
      transfer_group: p["transferGroup"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCharges(
    p: {
      requestBody?: {
        amount?: number | undefined
        application_fee?: number | undefined
        application_fee_amount?: number | undefined
        capture?: boolean | undefined
        card?:
          | (
              | {
                  address_city?: string | undefined
                  address_country?: string | undefined
                  address_line1?: string | undefined
                  address_line2?: string | undefined
                  address_state?: string | undefined
                  address_zip?: string | undefined
                  cvc?: string | undefined
                  exp_month: number
                  exp_year: number
                  metadata?:
                    | {
                        [key: string]: string | undefined
                      }
                    | undefined
                  name?: string | undefined
                  number: string
                  object?: ("card" | UnknownEnumStringValue) | undefined
                }
              | string
            )
          | undefined
        currency?: string | undefined
        customer?: string | undefined
        description?: string | undefined
        destination?:
          | (
              | {
                  account: string
                  amount?: number | undefined
                }
              | string
            )
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        on_behalf_of?: string | undefined
        radar_options?:
          | {
              session?: string | undefined
            }
          | undefined
        receipt_email?: string | undefined
        shipping?:
          | {
              address: {
                city?: string | undefined
                country?: string | undefined
                line1?: string | undefined
                line2?: string | undefined
                postal_code?: string | undefined
                state?: string | undefined
              }
              carrier?: string | undefined
              name: string
              phone?: string | undefined
              tracking_number?: string | undefined
            }
          | undefined
        source?: string | undefined
        statement_descriptor?: string | undefined
        statement_descriptor_suffix?: string | undefined
        transfer_data?:
          | {
              amount?: number | undefined
              destination: string
            }
          | undefined
        transfer_group?: string | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_charge>> {
    const url = `/v1/charges`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getChargesSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_charge[]
      has_more: boolean
      next_page?: (string | null) | undefined
      object: "search_result" | UnknownEnumStringValue
      total_count?: number | undefined
      url: string
    }>
  > {
    const url = `/v1/charges/search`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getChargesCharge(
    p: {
      charge: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_charge>> {
    const url = `/v1/charges/${p["charge"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postChargesCharge(
    p: {
      charge: string
      requestBody?: {
        customer?: string | undefined
        description?: string | undefined
        expand?: string[] | undefined
        fraud_details?:
          | {
              user_report: "" | "fraudulent" | "safe" | UnknownEnumStringValue
            }
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        receipt_email?: string | undefined
        shipping?:
          | {
              address: {
                city?: string | undefined
                country?: string | undefined
                line1?: string | undefined
                line2?: string | undefined
                postal_code?: string | undefined
                state?: string | undefined
              }
              carrier?: string | undefined
              name: string
              phone?: string | undefined
              tracking_number?: string | undefined
            }
          | undefined
        transfer_group?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_charge>> {
    const url = `/v1/charges/${p["charge"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postChargesChargeCapture(
    p: {
      charge: string
      requestBody?: {
        amount?: number | undefined
        application_fee?: number | undefined
        application_fee_amount?: number | undefined
        expand?: string[] | undefined
        receipt_email?: string | undefined
        statement_descriptor?: string | undefined
        statement_descriptor_suffix?: string | undefined
        transfer_data?:
          | {
              amount?: number | undefined
            }
          | undefined
        transfer_group?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_charge>> {
    const url = `/v1/charges/${p["charge"]}/capture`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getChargesChargeDispute(
    p: {
      charge: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_dispute>> {
    const url = `/v1/charges/${p["charge"]}/dispute`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postChargesChargeDispute(
    p: {
      charge: string
      requestBody?: {
        evidence?:
          | {
              access_activity_log?: string | undefined
              billing_address?: string | undefined
              cancellation_policy?: string | undefined
              cancellation_policy_disclosure?: string | undefined
              cancellation_rebuttal?: string | undefined
              customer_communication?: string | undefined
              customer_email_address?: string | undefined
              customer_name?: string | undefined
              customer_purchase_ip?: string | undefined
              customer_signature?: string | undefined
              duplicate_charge_documentation?: string | undefined
              duplicate_charge_explanation?: string | undefined
              duplicate_charge_id?: string | undefined
              enhanced_evidence?:
                | (
                    | {
                        visa_compelling_evidence_3?:
                          | {
                              disputed_transaction?:
                                | {
                                    customer_account_id?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_device_fingerprint?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_device_id?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_email_address?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_purchase_ip?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    merchandise_or_services?:
                                      | (
                                          | "merchandise"
                                          | "services"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                    product_description?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    shipping_address?:
                                      | {
                                          city?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          country?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          line1?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          line2?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          postal_code?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          state?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                        }
                                      | undefined
                                  }
                                | undefined
                              prior_undisputed_transactions?:
                                | {
                                    charge: string
                                    customer_account_id?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_device_fingerprint?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_device_id?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_email_address?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_purchase_ip?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    product_description?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    shipping_address?:
                                      | {
                                          city?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          country?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          line1?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          line2?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          postal_code?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          state?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                        }
                                      | undefined
                                  }[]
                                | undefined
                            }
                          | undefined
                        visa_compliance?:
                          | {
                              fee_acknowledged?: boolean | undefined
                            }
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              product_description?: string | undefined
              receipt?: string | undefined
              refund_policy?: string | undefined
              refund_policy_disclosure?: string | undefined
              refund_refusal_explanation?: string | undefined
              service_date?: string | undefined
              service_documentation?: string | undefined
              shipping_address?: string | undefined
              shipping_carrier?: string | undefined
              shipping_date?: string | undefined
              shipping_documentation?: string | undefined
              shipping_tracking_number?: string | undefined
              uncategorized_file?: string | undefined
              uncategorized_text?: string | undefined
            }
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        submit?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_dispute>> {
    const url = `/v1/charges/${p["charge"]}/dispute`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postChargesChargeDisputeClose(
    p: {
      charge: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_dispute>> {
    const url = `/v1/charges/${p["charge"]}/dispute/close`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postChargesChargeRefund(
    p: {
      charge: string
      requestBody?: {
        amount?: number | undefined
        expand?: string[] | undefined
        instructions_email?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        payment_intent?: string | undefined
        reason?:
          | (
              | "duplicate"
              | "fraudulent"
              | "requested_by_customer"
              | UnknownEnumStringValue
            )
          | undefined
        refund_application_fee?: boolean | undefined
        reverse_transfer?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_charge>> {
    const url = `/v1/charges/${p["charge"]}/refund`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getChargesChargeRefunds(
    p: {
      charge: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_refund[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/charges/${p["charge"]}/refunds`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postChargesChargeRefunds(
    p: {
      charge: string
      requestBody?: {
        amount?: number | undefined
        currency?: string | undefined
        customer?: string | undefined
        expand?: string[] | undefined
        instructions_email?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        origin?: ("customer_balance" | UnknownEnumStringValue) | undefined
        payment_intent?: string | undefined
        reason?:
          | (
              | "duplicate"
              | "fraudulent"
              | "requested_by_customer"
              | UnknownEnumStringValue
            )
          | undefined
        refund_application_fee?: boolean | undefined
        reverse_transfer?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_refund>> {
    const url = `/v1/charges/${p["charge"]}/refunds`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getChargesChargeRefundsRefund(
    p: {
      charge: string
      expand?: string[]
      refund: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_refund>> {
    const url = `/v1/charges/${p["charge"]}/refunds/${p["refund"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postChargesChargeRefundsRefund(
    p: {
      charge: string
      refund: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_refund>> {
    const url = `/v1/charges/${p["charge"]}/refunds/${p["refund"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCheckoutSessions(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      customer?: string
      customerDetails?: {
        email: string
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      paymentLink?: string
      startingAfter?: string
      status?: "complete" | "expired" | "open" | UnknownEnumStringValue
      subscription?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_checkout_session[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/checkout/sessions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      customer_details: p["customerDetails"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      payment_link: p["paymentLink"],
      starting_after: p["startingAfter"],
      status: p["status"],
      subscription: p["subscription"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCheckoutSessions(
    p: {
      requestBody?: {
        adaptive_pricing?:
          | {
              enabled?: boolean | undefined
            }
          | undefined
        after_expiration?:
          | {
              recovery?:
                | {
                    allow_promotion_codes?: boolean | undefined
                    enabled: boolean
                  }
                | undefined
            }
          | undefined
        allow_promotion_codes?: boolean | undefined
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        billing_address_collection?:
          | ("auto" | "required" | UnknownEnumStringValue)
          | undefined
        cancel_url?: string | undefined
        client_reference_id?: string | undefined
        consent_collection?:
          | {
              payment_method_reuse_agreement?:
                | {
                    position: "auto" | "hidden" | UnknownEnumStringValue
                  }
                | undefined
              promotions?:
                | ("auto" | "none" | UnknownEnumStringValue)
                | undefined
              terms_of_service?:
                | ("none" | "required" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        currency?: string | undefined
        custom_fields?:
          | {
              dropdown?:
                | {
                    default_value?: string | undefined
                    options: {
                      label: string
                      value: string
                    }[]
                  }
                | undefined
              key: string
              label: {
                custom: string
                type: "custom" | UnknownEnumStringValue
              }
              numeric?:
                | {
                    default_value?: string | undefined
                    maximum_length?: number | undefined
                    minimum_length?: number | undefined
                  }
                | undefined
              optional?: boolean | undefined
              text?:
                | {
                    default_value?: string | undefined
                    maximum_length?: number | undefined
                    minimum_length?: number | undefined
                  }
                | undefined
              type: "dropdown" | "numeric" | "text" | UnknownEnumStringValue
            }[]
          | undefined
        custom_text?:
          | {
              after_submit?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              shipping_address?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              submit?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              terms_of_service_acceptance?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        customer?: string | undefined
        customer_creation?:
          | ("always" | "if_required" | UnknownEnumStringValue)
          | undefined
        customer_email?: string | undefined
        customer_update?:
          | {
              address?: ("auto" | "never" | UnknownEnumStringValue) | undefined
              name?: ("auto" | "never" | UnknownEnumStringValue) | undefined
              shipping?: ("auto" | "never" | UnknownEnumStringValue) | undefined
            }
          | undefined
        discounts?:
          | {
              coupon?: string | undefined
              promotion_code?: string | undefined
            }[]
          | undefined
        expand?: string[] | undefined
        expires_at?: number | undefined
        invoice_creation?:
          | {
              enabled: boolean
              invoice_data?:
                | {
                    account_tax_ids?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                    custom_fields?:
                      | (
                          | {
                              name: string
                              value: string
                            }[]
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    description?: string | undefined
                    footer?: string | undefined
                    issuer?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                    metadata?:
                      | {
                          [key: string]: string | undefined
                        }
                      | undefined
                    rendering_options?:
                      | (
                          | {
                              amount_tax_display?:
                                | (
                                    | ""
                                    | "exclude_tax"
                                    | "include_inclusive_tax"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
            }
          | undefined
        line_items?:
          | {
              adjustable_quantity?:
                | {
                    enabled: boolean
                    maximum?: number | undefined
                    minimum?: number | undefined
                  }
                | undefined
              dynamic_tax_rates?: string[] | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product?: string | undefined
                    product_data?:
                      | {
                          description?: string | undefined
                          images?: string[] | undefined
                          metadata?:
                            | {
                                [key: string]: string | undefined
                              }
                            | undefined
                          name: string
                          tax_code?: string | undefined
                        }
                      | undefined
                    recurring?:
                      | {
                          interval:
                            | "day"
                            | "month"
                            | "week"
                            | "year"
                            | UnknownEnumStringValue
                          interval_count?: number | undefined
                        }
                      | undefined
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_rates?: string[] | undefined
            }[]
          | undefined
        locale?:
          | (
              | "auto"
              | "bg"
              | "cs"
              | "da"
              | "de"
              | "el"
              | "en"
              | "en-GB"
              | "es"
              | "es-419"
              | "et"
              | "fi"
              | "fil"
              | "fr"
              | "fr-CA"
              | "hr"
              | "hu"
              | "id"
              | "it"
              | "ja"
              | "ko"
              | "lt"
              | "lv"
              | "ms"
              | "mt"
              | "nb"
              | "nl"
              | "pl"
              | "pt"
              | "pt-BR"
              | "ro"
              | "ru"
              | "sk"
              | "sl"
              | "sv"
              | "th"
              | "tr"
              | "vi"
              | "zh"
              | "zh-HK"
              | "zh-TW"
              | UnknownEnumStringValue
            )
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        mode?:
          | ("payment" | "setup" | "subscription" | UnknownEnumStringValue)
          | undefined
        optional_items?:
          | {
              adjustable_quantity?:
                | {
                    enabled: boolean
                    maximum?: number | undefined
                    minimum?: number | undefined
                  }
                | undefined
              price: string
              quantity: number
            }[]
          | undefined
        payment_intent_data?:
          | {
              application_fee_amount?: number | undefined
              capture_method?:
                | (
                    | "automatic"
                    | "automatic_async"
                    | "manual"
                    | UnknownEnumStringValue
                  )
                | undefined
              description?: string | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              on_behalf_of?: string | undefined
              receipt_email?: string | undefined
              setup_future_usage?:
                | ("off_session" | "on_session" | UnknownEnumStringValue)
                | undefined
              shipping?:
                | {
                    address: {
                      city?: string | undefined
                      country?: string | undefined
                      line1: string
                      line2?: string | undefined
                      postal_code?: string | undefined
                      state?: string | undefined
                    }
                    carrier?: string | undefined
                    name: string
                    phone?: string | undefined
                    tracking_number?: string | undefined
                  }
                | undefined
              statement_descriptor?: string | undefined
              statement_descriptor_suffix?: string | undefined
              transfer_data?:
                | {
                    amount?: number | undefined
                    destination: string
                  }
                | undefined
              transfer_group?: string | undefined
            }
          | undefined
        payment_method_collection?:
          | ("always" | "if_required" | UnknownEnumStringValue)
          | undefined
        payment_method_configuration?: string | undefined
        payment_method_data?:
          | {
              allow_redisplay?:
                | (
                    | "always"
                    | "limited"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        payment_method_options?:
          | {
              acss_debit?:
                | {
                    currency?:
                      | ("cad" | "usd" | UnknownEnumStringValue)
                      | undefined
                    mandate_options?:
                      | {
                          custom_mandate_url?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                          default_for?:
                            | (
                                | "invoice"
                                | "subscription"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          interval_description?: string | undefined
                          payment_schedule?:
                            | (
                                | "combined"
                                | "interval"
                                | "sporadic"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          transaction_type?:
                            | ("business" | "personal" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                    setup_future_usage?:
                      | (
                          | "none"
                          | "off_session"
                          | "on_session"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    target_date?: string | undefined
                    verification_method?:
                      | (
                          | "automatic"
                          | "instant"
                          | "microdeposits"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              affirm?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              afterpay_clearpay?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              alipay?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              amazon_pay?:
                | {
                    setup_future_usage?:
                      | ("none" | "off_session" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              au_becs_debit?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                    target_date?: string | undefined
                  }
                | undefined
              bacs_debit?:
                | {
                    mandate_options?:
                      | {
                          reference_prefix?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                    setup_future_usage?:
                      | (
                          | "none"
                          | "off_session"
                          | "on_session"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    target_date?: string | undefined
                  }
                | undefined
              bancontact?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              boleto?:
                | {
                    expires_after_days?: number | undefined
                    setup_future_usage?:
                      | (
                          | "none"
                          | "off_session"
                          | "on_session"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              card?:
                | {
                    installments?:
                      | {
                          enabled?: boolean | undefined
                        }
                      | undefined
                    request_extended_authorization?:
                      | ("if_available" | "never" | UnknownEnumStringValue)
                      | undefined
                    request_incremental_authorization?:
                      | ("if_available" | "never" | UnknownEnumStringValue)
                      | undefined
                    request_multicapture?:
                      | ("if_available" | "never" | UnknownEnumStringValue)
                      | undefined
                    request_overcapture?:
                      | ("if_available" | "never" | UnknownEnumStringValue)
                      | undefined
                    request_three_d_secure?:
                      | (
                          | "any"
                          | "automatic"
                          | "challenge"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    restrictions?:
                      | {
                          brands_blocked?:
                            | (
                                | "american_express"
                                | "discover_global_network"
                                | "mastercard"
                                | "visa"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                        }
                      | undefined
                    setup_future_usage?:
                      | ("off_session" | "on_session" | UnknownEnumStringValue)
                      | undefined
                    statement_descriptor_suffix_kana?: string | undefined
                    statement_descriptor_suffix_kanji?: string | undefined
                  }
                | undefined
              cashapp?:
                | {
                    setup_future_usage?:
                      | (
                          | "none"
                          | "off_session"
                          | "on_session"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              customer_balance?:
                | {
                    bank_transfer?:
                      | {
                          eu_bank_transfer?:
                            | {
                                country: string
                              }
                            | undefined
                          requested_address_types?:
                            | (
                                | "aba"
                                | "iban"
                                | "sepa"
                                | "sort_code"
                                | "spei"
                                | "swift"
                                | "zengin"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          type:
                            | "eu_bank_transfer"
                            | "gb_bank_transfer"
                            | "jp_bank_transfer"
                            | "mx_bank_transfer"
                            | "us_bank_transfer"
                            | UnknownEnumStringValue
                        }
                      | undefined
                    funding_type?:
                      | ("bank_transfer" | UnknownEnumStringValue)
                      | undefined
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              eps?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              fpx?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              giropay?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              grabpay?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              ideal?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              kakao_pay?:
                | {
                    capture_method?:
                      | ("manual" | UnknownEnumStringValue)
                      | undefined
                    setup_future_usage?:
                      | ("none" | "off_session" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              klarna?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              konbini?:
                | {
                    expires_after_days?: number | undefined
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              kr_card?:
                | {
                    capture_method?:
                      | ("manual" | UnknownEnumStringValue)
                      | undefined
                    setup_future_usage?:
                      | ("none" | "off_session" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              link?:
                | {
                    setup_future_usage?:
                      | ("none" | "off_session" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              mobilepay?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              multibanco?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              naver_pay?:
                | {
                    capture_method?:
                      | ("manual" | UnknownEnumStringValue)
                      | undefined
                    setup_future_usage?:
                      | ("none" | "off_session" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              oxxo?:
                | {
                    expires_after_days?: number | undefined
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              p24?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                    tos_shown_and_accepted?: boolean | undefined
                  }
                | undefined
              pay_by_bank?: EmptyObject | undefined
              payco?:
                | {
                    capture_method?:
                      | ("manual" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              paynow?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              paypal?:
                | {
                    capture_method?:
                      | ("" | "manual" | UnknownEnumStringValue)
                      | undefined
                    preferred_locale?:
                      | (
                          | "cs-CZ"
                          | "da-DK"
                          | "de-AT"
                          | "de-DE"
                          | "de-LU"
                          | "el-GR"
                          | "en-GB"
                          | "en-US"
                          | "es-ES"
                          | "fi-FI"
                          | "fr-BE"
                          | "fr-FR"
                          | "fr-LU"
                          | "hu-HU"
                          | "it-IT"
                          | "nl-BE"
                          | "nl-NL"
                          | "pl-PL"
                          | "pt-PT"
                          | "sk-SK"
                          | "sv-SE"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    reference?: string | undefined
                    risk_correlation_id?: string | undefined
                    setup_future_usage?:
                      | ("" | "none" | "off_session" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              pix?:
                | {
                    expires_after_seconds?: number | undefined
                  }
                | undefined
              revolut_pay?:
                | {
                    setup_future_usage?:
                      | ("none" | "off_session" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              samsung_pay?:
                | {
                    capture_method?:
                      | ("manual" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              sepa_debit?:
                | {
                    mandate_options?:
                      | {
                          reference_prefix?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                    setup_future_usage?:
                      | (
                          | "none"
                          | "off_session"
                          | "on_session"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    target_date?: string | undefined
                  }
                | undefined
              sofort?:
                | {
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              swish?:
                | {
                    reference?: string | undefined
                  }
                | undefined
              us_bank_account?:
                | {
                    financial_connections?:
                      | {
                          permissions?:
                            | (
                                | "balances"
                                | "ownership"
                                | "payment_method"
                                | "transactions"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          prefetch?:
                            | (
                                | "balances"
                                | "ownership"
                                | "transactions"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                        }
                      | undefined
                    setup_future_usage?:
                      | (
                          | "none"
                          | "off_session"
                          | "on_session"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    target_date?: string | undefined
                    verification_method?:
                      | ("automatic" | "instant" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              wechat_pay?:
                | {
                    app_id?: string | undefined
                    client: "android" | "ios" | "web" | UnknownEnumStringValue
                    setup_future_usage?:
                      | ("none" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        payment_method_types?:
          | (
              | "acss_debit"
              | "affirm"
              | "afterpay_clearpay"
              | "alipay"
              | "alma"
              | "amazon_pay"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "billie"
              | "blik"
              | "boleto"
              | "card"
              | "cashapp"
              | "customer_balance"
              | "eps"
              | "fpx"
              | "giropay"
              | "grabpay"
              | "ideal"
              | "kakao_pay"
              | "klarna"
              | "konbini"
              | "kr_card"
              | "link"
              | "mobilepay"
              | "multibanco"
              | "naver_pay"
              | "oxxo"
              | "p24"
              | "pay_by_bank"
              | "payco"
              | "paynow"
              | "paypal"
              | "pix"
              | "promptpay"
              | "revolut_pay"
              | "samsung_pay"
              | "satispay"
              | "sepa_debit"
              | "sofort"
              | "swish"
              | "twint"
              | "us_bank_account"
              | "wechat_pay"
              | "zip"
              | UnknownEnumStringValue
            )[]
          | undefined
        permissions?:
          | {
              update_shipping_details?:
                | ("client_only" | "server_only" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        phone_number_collection?:
          | {
              enabled: boolean
            }
          | undefined
        redirect_on_completion?:
          | ("always" | "if_required" | "never" | UnknownEnumStringValue)
          | undefined
        return_url?: string | undefined
        saved_payment_method_options?:
          | {
              allow_redisplay_filters?:
                | (
                    | "always"
                    | "limited"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )[]
                | undefined
              payment_method_save?:
                | ("disabled" | "enabled" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        setup_intent_data?:
          | {
              description?: string | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              on_behalf_of?: string | undefined
            }
          | undefined
        shipping_address_collection?:
          | {
              allowed_countries: (
                | "AC"
                | "AD"
                | "AE"
                | "AF"
                | "AG"
                | "AI"
                | "AL"
                | "AM"
                | "AO"
                | "AQ"
                | "AR"
                | "AT"
                | "AU"
                | "AW"
                | "AX"
                | "AZ"
                | "BA"
                | "BB"
                | "BD"
                | "BE"
                | "BF"
                | "BG"
                | "BH"
                | "BI"
                | "BJ"
                | "BL"
                | "BM"
                | "BN"
                | "BO"
                | "BQ"
                | "BR"
                | "BS"
                | "BT"
                | "BV"
                | "BW"
                | "BY"
                | "BZ"
                | "CA"
                | "CD"
                | "CF"
                | "CG"
                | "CH"
                | "CI"
                | "CK"
                | "CL"
                | "CM"
                | "CN"
                | "CO"
                | "CR"
                | "CV"
                | "CW"
                | "CY"
                | "CZ"
                | "DE"
                | "DJ"
                | "DK"
                | "DM"
                | "DO"
                | "DZ"
                | "EC"
                | "EE"
                | "EG"
                | "EH"
                | "ER"
                | "ES"
                | "ET"
                | "FI"
                | "FJ"
                | "FK"
                | "FO"
                | "FR"
                | "GA"
                | "GB"
                | "GD"
                | "GE"
                | "GF"
                | "GG"
                | "GH"
                | "GI"
                | "GL"
                | "GM"
                | "GN"
                | "GP"
                | "GQ"
                | "GR"
                | "GS"
                | "GT"
                | "GU"
                | "GW"
                | "GY"
                | "HK"
                | "HN"
                | "HR"
                | "HT"
                | "HU"
                | "ID"
                | "IE"
                | "IL"
                | "IM"
                | "IN"
                | "IO"
                | "IQ"
                | "IS"
                | "IT"
                | "JE"
                | "JM"
                | "JO"
                | "JP"
                | "KE"
                | "KG"
                | "KH"
                | "KI"
                | "KM"
                | "KN"
                | "KR"
                | "KW"
                | "KY"
                | "KZ"
                | "LA"
                | "LB"
                | "LC"
                | "LI"
                | "LK"
                | "LR"
                | "LS"
                | "LT"
                | "LU"
                | "LV"
                | "LY"
                | "MA"
                | "MC"
                | "MD"
                | "ME"
                | "MF"
                | "MG"
                | "MK"
                | "ML"
                | "MM"
                | "MN"
                | "MO"
                | "MQ"
                | "MR"
                | "MS"
                | "MT"
                | "MU"
                | "MV"
                | "MW"
                | "MX"
                | "MY"
                | "MZ"
                | "NA"
                | "NC"
                | "NE"
                | "NG"
                | "NI"
                | "NL"
                | "NO"
                | "NP"
                | "NR"
                | "NU"
                | "NZ"
                | "OM"
                | "PA"
                | "PE"
                | "PF"
                | "PG"
                | "PH"
                | "PK"
                | "PL"
                | "PM"
                | "PN"
                | "PR"
                | "PS"
                | "PT"
                | "PY"
                | "QA"
                | "RE"
                | "RO"
                | "RS"
                | "RU"
                | "RW"
                | "SA"
                | "SB"
                | "SC"
                | "SD"
                | "SE"
                | "SG"
                | "SH"
                | "SI"
                | "SJ"
                | "SK"
                | "SL"
                | "SM"
                | "SN"
                | "SO"
                | "SR"
                | "SS"
                | "ST"
                | "SV"
                | "SX"
                | "SZ"
                | "TA"
                | "TC"
                | "TD"
                | "TF"
                | "TG"
                | "TH"
                | "TJ"
                | "TK"
                | "TL"
                | "TM"
                | "TN"
                | "TO"
                | "TR"
                | "TT"
                | "TV"
                | "TW"
                | "TZ"
                | "UA"
                | "UG"
                | "US"
                | "UY"
                | "UZ"
                | "VA"
                | "VC"
                | "VE"
                | "VG"
                | "VN"
                | "VU"
                | "WF"
                | "WS"
                | "XK"
                | "YE"
                | "YT"
                | "ZA"
                | "ZM"
                | "ZW"
                | "ZZ"
                | UnknownEnumStringValue
              )[]
            }
          | undefined
        shipping_options?:
          | {
              shipping_rate?: string | undefined
              shipping_rate_data?:
                | {
                    delivery_estimate?:
                      | {
                          maximum?:
                            | {
                                unit:
                                  | "business_day"
                                  | "day"
                                  | "hour"
                                  | "month"
                                  | "week"
                                  | UnknownEnumStringValue
                                value: number
                              }
                            | undefined
                          minimum?:
                            | {
                                unit:
                                  | "business_day"
                                  | "day"
                                  | "hour"
                                  | "month"
                                  | "week"
                                  | UnknownEnumStringValue
                                value: number
                              }
                            | undefined
                        }
                      | undefined
                    display_name: string
                    fixed_amount?:
                      | {
                          amount: number
                          currency: string
                          currency_options?:
                            | {
                                [key: string]:
                                  | {
                                      amount: number
                                      tax_behavior?:
                                        | (
                                            | "exclusive"
                                            | "inclusive"
                                            | "unspecified"
                                            | UnknownEnumStringValue
                                          )
                                        | undefined
                                    }
                                  | undefined
                              }
                            | undefined
                        }
                      | undefined
                    metadata?:
                      | {
                          [key: string]: string | undefined
                        }
                      | undefined
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    tax_code?: string | undefined
                    type?: ("fixed_amount" | UnknownEnumStringValue) | undefined
                  }
                | undefined
            }[]
          | undefined
        submit_type?:
          | (
              | "auto"
              | "book"
              | "donate"
              | "pay"
              | "subscribe"
              | UnknownEnumStringValue
            )
          | undefined
        subscription_data?:
          | {
              application_fee_percent?: number | undefined
              billing_cycle_anchor?: number | undefined
              default_tax_rates?: string[] | undefined
              description?: string | undefined
              invoice_settings?:
                | {
                    issuer?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                  }
                | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              on_behalf_of?: string | undefined
              proration_behavior?:
                | ("create_prorations" | "none" | UnknownEnumStringValue)
                | undefined
              transfer_data?:
                | {
                    amount_percent?: number | undefined
                    destination: string
                  }
                | undefined
              trial_end?: number | undefined
              trial_period_days?: number | undefined
              trial_settings?:
                | {
                    end_behavior: {
                      missing_payment_method:
                        | "cancel"
                        | "create_invoice"
                        | "pause"
                        | UnknownEnumStringValue
                    }
                  }
                | undefined
            }
          | undefined
        success_url?: string | undefined
        tax_id_collection?:
          | {
              enabled: boolean
              required?:
                | ("if_supported" | "never" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        ui_mode?:
          | ("custom" | "embedded" | "hosted" | UnknownEnumStringValue)
          | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_checkout_session>> {
    const url = `/v1/checkout/sessions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCheckoutSessionsSession(
    p: {
      expand?: string[]
      session: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_checkout_session>> {
    const url = `/v1/checkout/sessions/${p["session"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCheckoutSessionsSession(
    p: {
      session: string
      requestBody?: {
        collected_information?:
          | {
              shipping_details?:
                | {
                    address: {
                      city?: string | undefined
                      country: string
                      line1: string
                      line2?: string | undefined
                      postal_code?: string | undefined
                      state?: string | undefined
                    }
                    name: string
                  }
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        shipping_options?:
          | (
              | {
                  shipping_rate?: string | undefined
                  shipping_rate_data?:
                    | {
                        delivery_estimate?:
                          | {
                              maximum?:
                                | {
                                    unit:
                                      | "business_day"
                                      | "day"
                                      | "hour"
                                      | "month"
                                      | "week"
                                      | UnknownEnumStringValue
                                    value: number
                                  }
                                | undefined
                              minimum?:
                                | {
                                    unit:
                                      | "business_day"
                                      | "day"
                                      | "hour"
                                      | "month"
                                      | "week"
                                      | UnknownEnumStringValue
                                    value: number
                                  }
                                | undefined
                            }
                          | undefined
                        display_name: string
                        fixed_amount?:
                          | {
                              amount: number
                              currency: string
                              currency_options?:
                                | {
                                    [key: string]:
                                      | {
                                          amount: number
                                          tax_behavior?:
                                            | (
                                                | "exclusive"
                                                | "inclusive"
                                                | "unspecified"
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                        }
                                      | undefined
                                  }
                                | undefined
                            }
                          | undefined
                        metadata?:
                          | {
                              [key: string]: string | undefined
                            }
                          | undefined
                        tax_behavior?:
                          | (
                              | "exclusive"
                              | "inclusive"
                              | "unspecified"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        tax_code?: string | undefined
                        type?:
                          | ("fixed_amount" | UnknownEnumStringValue)
                          | undefined
                      }
                    | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_checkout_session>> {
    const url = `/v1/checkout/sessions/${p["session"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCheckoutSessionsSessionExpire(
    p: {
      session: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_checkout_session>> {
    const url = `/v1/checkout/sessions/${p["session"]}/expire`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCheckoutSessionsSessionLineItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      session: string
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_item[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/checkout/sessions/${p["session"]}/line_items`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getClimateOrders(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_climate_order[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/climate/orders`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postClimateOrders(
    p: {
      requestBody: {
        amount?: number | undefined
        beneficiary?:
          | {
              public_name: string
            }
          | undefined
        currency?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        metric_tons?: string | undefined
        product: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_climate_order>> {
    const url = `/v1/climate/orders`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getClimateOrdersOrder(
    p: {
      expand?: string[]
      order: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_climate_order>> {
    const url = `/v1/climate/orders/${p["order"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postClimateOrdersOrder(
    p: {
      order: string
      requestBody?: {
        beneficiary?:
          | (
              | {
                  public_name: string | "" | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_climate_order>> {
    const url = `/v1/climate/orders/${p["order"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postClimateOrdersOrderCancel(
    p: {
      order: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_climate_order>> {
    const url = `/v1/climate/orders/${p["order"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getClimateProducts(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_climate_product[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/climate/products`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getClimateProductsProduct(
    p: {
      expand?: string[]
      product: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_climate_product>> {
    const url = `/v1/climate/products/${p["product"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getClimateSuppliers(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_climate_supplier[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/climate/suppliers`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getClimateSuppliersSupplier(
    p: {
      expand?: string[]
      supplier: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_climate_supplier>> {
    const url = `/v1/climate/suppliers/${p["supplier"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getConfirmationTokensConfirmationToken(
    p: {
      confirmationToken: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_confirmation_token>> {
    const url = `/v1/confirmation_tokens/${p["confirmationToken"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCountrySpecs(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_country_spec[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/country_specs`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCountrySpecsCountry(
    p: {
      country: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_country_spec>> {
    const url = `/v1/country_specs/${p["country"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCoupons(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_coupon[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/coupons`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCoupons(
    p: {
      requestBody?: {
        amount_off?: number | undefined
        applies_to?:
          | {
              products?: string[] | undefined
            }
          | undefined
        currency?: string | undefined
        currency_options?:
          | {
              [key: string]:
                | {
                    amount_off: number
                  }
                | undefined
            }
          | undefined
        duration?:
          | ("forever" | "once" | "repeating" | UnknownEnumStringValue)
          | undefined
        duration_in_months?: number | undefined
        expand?: string[] | undefined
        id?: string | undefined
        max_redemptions?: number | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
        percent_off?: number | undefined
        redeem_by?: number | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_coupon>> {
    const url = `/v1/coupons`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteCouponsCoupon(
    p: {
      coupon: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_coupon>> {
    const url = `/v1/coupons/${p["coupon"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCouponsCoupon(
    p: {
      coupon: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_coupon>> {
    const url = `/v1/coupons/${p["coupon"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCouponsCoupon(
    p: {
      coupon: string
      requestBody?: {
        currency_options?:
          | {
              [key: string]:
                | {
                    amount_off: number
                  }
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_coupon>> {
    const url = `/v1/coupons/${p["coupon"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCreditNotes(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      invoice?: string
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_credit_note[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/credit_notes`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCreditNotes(
    p: {
      requestBody: {
        amount?: number | undefined
        credit_amount?: number | undefined
        effective_at?: number | undefined
        email_type?:
          | ("credit_note" | "none" | UnknownEnumStringValue)
          | undefined
        expand?: string[] | undefined
        invoice: string
        lines?:
          | {
              amount?: number | undefined
              description?: string | undefined
              invoice_line_item?: string | undefined
              quantity?: number | undefined
              tax_amounts?:
                | (
                    | {
                        amount: number
                        tax_rate: string
                        taxable_amount: number
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
              type:
                | "custom_line_item"
                | "invoice_line_item"
                | UnknownEnumStringValue
              unit_amount?: number | undefined
              unit_amount_decimal?: string | undefined
            }[]
          | undefined
        memo?: string | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        out_of_band_amount?: number | undefined
        reason?:
          | (
              | "duplicate"
              | "fraudulent"
              | "order_change"
              | "product_unsatisfactory"
              | UnknownEnumStringValue
            )
          | undefined
        refund_amount?: number | undefined
        refunds?:
          | {
              amount_refunded?: number | undefined
              refund?: string | undefined
            }[]
          | undefined
        shipping_cost?:
          | {
              shipping_rate?: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_credit_note>> {
    const url = `/v1/credit_notes`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCreditNotesPreview(
    p: {
      amount?: number
      creditAmount?: number
      effectiveAt?: number
      emailType?: "credit_note" | "none" | UnknownEnumStringValue
      expand?: string[]
      invoice: string
      lines?: {
        amount?: number | undefined
        description?: string | undefined
        invoice_line_item?: string | undefined
        quantity?: number | undefined
        tax_amounts?:
          | (
              | {
                  amount: number
                  tax_rate: string
                  taxable_amount: number
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        type: "custom_line_item" | "invoice_line_item" | UnknownEnumStringValue
        unit_amount?: number | undefined
        unit_amount_decimal?: string | undefined
      }[]
      memo?: string
      metadata?: {
        [key: string]: string | undefined
      }
      outOfBandAmount?: number
      reason?:
        | "duplicate"
        | "fraudulent"
        | "order_change"
        | "product_unsatisfactory"
        | UnknownEnumStringValue
      refundAmount?: number
      refunds?: {
        amount_refunded?: number | undefined
        refund?: string | undefined
      }[]
      shippingCost?: {
        shipping_rate?: string | undefined
      }
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_credit_note>> {
    const url = `/v1/credit_notes/preview`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      amount: p["amount"],
      credit_amount: p["creditAmount"],
      effective_at: p["effectiveAt"],
      email_type: p["emailType"],
      expand: p["expand"],
      invoice: p["invoice"],
      lines: p["lines"],
      memo: p["memo"],
      metadata: p["metadata"],
      out_of_band_amount: p["outOfBandAmount"],
      reason: p["reason"],
      refund_amount: p["refundAmount"],
      refunds: p["refunds"],
      shipping_cost: p["shippingCost"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCreditNotesPreviewLines(
    p: {
      amount?: number
      creditAmount?: number
      effectiveAt?: number
      emailType?: "credit_note" | "none" | UnknownEnumStringValue
      endingBefore?: string
      expand?: string[]
      invoice: string
      limit?: number
      lines?: {
        amount?: number | undefined
        description?: string | undefined
        invoice_line_item?: string | undefined
        quantity?: number | undefined
        tax_amounts?:
          | (
              | {
                  amount: number
                  tax_rate: string
                  taxable_amount: number
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        type: "custom_line_item" | "invoice_line_item" | UnknownEnumStringValue
        unit_amount?: number | undefined
        unit_amount_decimal?: string | undefined
      }[]
      memo?: string
      metadata?: {
        [key: string]: string | undefined
      }
      outOfBandAmount?: number
      reason?:
        | "duplicate"
        | "fraudulent"
        | "order_change"
        | "product_unsatisfactory"
        | UnknownEnumStringValue
      refundAmount?: number
      refunds?: {
        amount_refunded?: number | undefined
        refund?: string | undefined
      }[]
      shippingCost?: {
        shipping_rate?: string | undefined
      }
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_credit_note_line_item[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/credit_notes/preview/lines`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      amount: p["amount"],
      credit_amount: p["creditAmount"],
      effective_at: p["effectiveAt"],
      email_type: p["emailType"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      lines: p["lines"],
      memo: p["memo"],
      metadata: p["metadata"],
      out_of_band_amount: p["outOfBandAmount"],
      reason: p["reason"],
      refund_amount: p["refundAmount"],
      refunds: p["refunds"],
      shipping_cost: p["shippingCost"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCreditNotesCreditNoteLines(
    p: {
      creditNote: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_credit_note_line_item[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/credit_notes/${p["creditNote"]}/lines`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCreditNotesId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_credit_note>> {
    const url = `/v1/credit_notes/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCreditNotesId(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
        memo?: string | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_credit_note>> {
    const url = `/v1/credit_notes/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCreditNotesIdVoid(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_credit_note>> {
    const url = `/v1/credit_notes/${p["id"]}/void`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomerSessions(
    p: {
      requestBody: {
        components: {
          buy_button?:
            | {
                enabled: boolean
              }
            | undefined
          payment_element?:
            | {
                enabled: boolean
                features?:
                  | {
                      payment_method_allow_redisplay_filters?:
                        | (
                            | "always"
                            | "limited"
                            | "unspecified"
                            | UnknownEnumStringValue
                          )[]
                        | undefined
                      payment_method_redisplay?:
                        | ("disabled" | "enabled" | UnknownEnumStringValue)
                        | undefined
                      payment_method_redisplay_limit?: number | undefined
                      payment_method_remove?:
                        | ("disabled" | "enabled" | UnknownEnumStringValue)
                        | undefined
                      payment_method_save?:
                        | ("disabled" | "enabled" | UnknownEnumStringValue)
                        | undefined
                      payment_method_save_usage?:
                        | (
                            | "off_session"
                            | "on_session"
                            | UnknownEnumStringValue
                          )
                        | undefined
                    }
                  | undefined
              }
            | undefined
          pricing_table?:
            | {
                enabled: boolean
              }
            | undefined
        }
        customer: string
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_customer_session>> {
    const url = `/v1/customer_sessions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomers(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      email?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      testClock?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_customer[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/customers`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      email: p["email"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      test_clock: p["testClock"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomers(
    p: {
      requestBody?: {
        address?:
          | (
              | {
                  city?: string | undefined
                  country?: string | undefined
                  line1?: string | undefined
                  line2?: string | undefined
                  postal_code?: string | undefined
                  state?: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        balance?: number | undefined
        cash_balance?:
          | {
              settings?:
                | {
                    reconciliation_mode?:
                      | (
                          | "automatic"
                          | "manual"
                          | "merchant_default"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
            }
          | undefined
        description?: string | undefined
        email?: string | undefined
        expand?: string[] | undefined
        invoice_prefix?: string | undefined
        invoice_settings?:
          | {
              custom_fields?:
                | (
                    | {
                        name: string
                        value: string
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              default_payment_method?: string | undefined
              footer?: string | undefined
              rendering_options?:
                | (
                    | {
                        amount_tax_display?:
                          | (
                              | ""
                              | "exclude_tax"
                              | "include_inclusive_tax"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        template?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
        next_invoice_sequence?: number | undefined
        payment_method?: string | undefined
        phone?: string | undefined
        preferred_locales?: string[] | undefined
        shipping?:
          | (
              | {
                  address: {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                  name: string
                  phone?: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        source?: string | undefined
        tax?:
          | {
              ip_address?: (string | "" | UnknownEnumStringValue) | undefined
              validate_location?:
                | ("deferred" | "immediately" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        tax_exempt?:
          | ("" | "exempt" | "none" | "reverse" | UnknownEnumStringValue)
          | undefined
        tax_id_data?:
          | {
              type:
                | "ad_nrt"
                | "ae_trn"
                | "al_tin"
                | "am_tin"
                | "ao_tin"
                | "ar_cuit"
                | "au_abn"
                | "au_arn"
                | "ba_tin"
                | "bb_tin"
                | "bg_uic"
                | "bh_vat"
                | "bo_tin"
                | "br_cnpj"
                | "br_cpf"
                | "bs_tin"
                | "by_tin"
                | "ca_bn"
                | "ca_gst_hst"
                | "ca_pst_bc"
                | "ca_pst_mb"
                | "ca_pst_sk"
                | "ca_qst"
                | "cd_nif"
                | "ch_uid"
                | "ch_vat"
                | "cl_tin"
                | "cn_tin"
                | "co_nit"
                | "cr_tin"
                | "de_stn"
                | "do_rcn"
                | "ec_ruc"
                | "eg_tin"
                | "es_cif"
                | "eu_oss_vat"
                | "eu_vat"
                | "gb_vat"
                | "ge_vat"
                | "gn_nif"
                | "hk_br"
                | "hr_oib"
                | "hu_tin"
                | "id_npwp"
                | "il_vat"
                | "in_gst"
                | "is_vat"
                | "jp_cn"
                | "jp_rn"
                | "jp_trn"
                | "ke_pin"
                | "kh_tin"
                | "kr_brn"
                | "kz_bin"
                | "li_uid"
                | "li_vat"
                | "ma_vat"
                | "md_vat"
                | "me_pib"
                | "mk_vat"
                | "mr_nif"
                | "mx_rfc"
                | "my_frp"
                | "my_itn"
                | "my_sst"
                | "ng_tin"
                | "no_vat"
                | "no_voec"
                | "np_pan"
                | "nz_gst"
                | "om_vat"
                | "pe_ruc"
                | "ph_tin"
                | "ro_tin"
                | "rs_pib"
                | "ru_inn"
                | "ru_kpp"
                | "sa_vat"
                | "sg_gst"
                | "sg_uen"
                | "si_tin"
                | "sn_ninea"
                | "sr_fin"
                | "sv_nit"
                | "th_vat"
                | "tj_tin"
                | "tr_tin"
                | "tw_vat"
                | "tz_vat"
                | "ua_vat"
                | "ug_tin"
                | "us_ein"
                | "uy_ruc"
                | "uz_tin"
                | "uz_vat"
                | "ve_rif"
                | "vn_tin"
                | "za_vat"
                | "zm_tin"
                | "zw_tin"
                | UnknownEnumStringValue
              value: string
            }[]
          | undefined
        test_clock?: string | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_customer>> {
    const url = `/v1/customers`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_customer[]
      has_more: boolean
      next_page?: (string | null) | undefined
      object: "search_result" | UnknownEnumStringValue
      total_count?: number | undefined
      url: string
    }>
  > {
    const url = `/v1/customers/search`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteCustomersCustomer(
    p: {
      customer: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_customer>> {
    const url = `/v1/customers/${p["customer"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomer(
    p: {
      customer: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_customer | t_deleted_customer>> {
    const url = `/v1/customers/${p["customer"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomer(
    p: {
      customer: string
      requestBody?: {
        address?:
          | (
              | {
                  city?: string | undefined
                  country?: string | undefined
                  line1?: string | undefined
                  line2?: string | undefined
                  postal_code?: string | undefined
                  state?: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        balance?: number | undefined
        bank_account?:
          | (
              | {
                  account_holder_name?: string | undefined
                  account_holder_type?:
                    | ("company" | "individual" | UnknownEnumStringValue)
                    | undefined
                  account_number: string
                  country: string
                  currency?: string | undefined
                  object?: ("bank_account" | UnknownEnumStringValue) | undefined
                  routing_number?: string | undefined
                }
              | string
            )
          | undefined
        card?:
          | (
              | {
                  address_city?: string | undefined
                  address_country?: string | undefined
                  address_line1?: string | undefined
                  address_line2?: string | undefined
                  address_state?: string | undefined
                  address_zip?: string | undefined
                  cvc?: string | undefined
                  exp_month: number
                  exp_year: number
                  metadata?:
                    | {
                        [key: string]: string | undefined
                      }
                    | undefined
                  name?: string | undefined
                  number: string
                  object?: ("card" | UnknownEnumStringValue) | undefined
                }
              | string
            )
          | undefined
        cash_balance?:
          | {
              settings?:
                | {
                    reconciliation_mode?:
                      | (
                          | "automatic"
                          | "manual"
                          | "merchant_default"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
            }
          | undefined
        default_alipay_account?: string | undefined
        default_bank_account?: string | undefined
        default_card?: string | undefined
        default_source?: string | undefined
        description?: string | undefined
        email?: string | undefined
        expand?: string[] | undefined
        invoice_prefix?: string | undefined
        invoice_settings?:
          | {
              custom_fields?:
                | (
                    | {
                        name: string
                        value: string
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              default_payment_method?: string | undefined
              footer?: string | undefined
              rendering_options?:
                | (
                    | {
                        amount_tax_display?:
                          | (
                              | ""
                              | "exclude_tax"
                              | "include_inclusive_tax"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        template?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
        next_invoice_sequence?: number | undefined
        phone?: string | undefined
        preferred_locales?: string[] | undefined
        shipping?:
          | (
              | {
                  address: {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                  name: string
                  phone?: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        source?: string | undefined
        tax?:
          | {
              ip_address?: (string | "" | UnknownEnumStringValue) | undefined
              validate_location?:
                | ("auto" | "deferred" | "immediately" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        tax_exempt?:
          | ("" | "exempt" | "none" | "reverse" | UnknownEnumStringValue)
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_customer>> {
    const url = `/v1/customers/${p["customer"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerBalanceTransactions(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_customer_balance_transaction[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/customers/${p["customer"]}/balance_transactions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerBalanceTransactions(
    p: {
      customer: string
      requestBody: {
        amount: number
        currency: string
        description?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_customer_balance_transaction>> {
    const url = `/v1/customers/${p["customer"]}/balance_transactions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerBalanceTransactionsTransaction(
    p: {
      customer: string
      expand?: string[]
      transaction: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_customer_balance_transaction>> {
    const url = `/v1/customers/${p["customer"]}/balance_transactions/${p["transaction"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerBalanceTransactionsTransaction(
    p: {
      customer: string
      transaction: string
      requestBody?: {
        description?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_customer_balance_transaction>> {
    const url = `/v1/customers/${p["customer"]}/balance_transactions/${p["transaction"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerBankAccounts(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_bank_account[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/customers/${p["customer"]}/bank_accounts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerBankAccounts(
    p: {
      customer: string
      requestBody?: {
        alipay_account?: string | undefined
        bank_account?:
          | (
              | {
                  account_holder_name?: string | undefined
                  account_holder_type?:
                    | ("company" | "individual" | UnknownEnumStringValue)
                    | undefined
                  account_number: string
                  country: string
                  currency?: string | undefined
                  object?: ("bank_account" | UnknownEnumStringValue) | undefined
                  routing_number?: string | undefined
                }
              | string
            )
          | undefined
        card?:
          | (
              | {
                  address_city?: string | undefined
                  address_country?: string | undefined
                  address_line1?: string | undefined
                  address_line2?: string | undefined
                  address_state?: string | undefined
                  address_zip?: string | undefined
                  cvc?: string | undefined
                  exp_month: number
                  exp_year: number
                  metadata?:
                    | {
                        [key: string]: string | undefined
                      }
                    | undefined
                  name?: string | undefined
                  number: string
                  object?: ("card" | UnknownEnumStringValue) | undefined
                }
              | string
            )
          | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        source?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_source>> {
    const url = `/v1/customers/${p["customer"]}/bank_accounts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteCustomersCustomerBankAccountsId(
    p: {
      customer: string
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_source | t_deleted_payment_source>> {
    const url = `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerBankAccountsId(
    p: {
      customer: string
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_bank_account>> {
    const url = `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerBankAccountsId(
    p: {
      customer: string
      id: string
      requestBody?: {
        account_holder_name?: string | undefined
        account_holder_type?:
          | ("company" | "individual" | UnknownEnumStringValue)
          | undefined
        address_city?: string | undefined
        address_country?: string | undefined
        address_line1?: string | undefined
        address_line2?: string | undefined
        address_state?: string | undefined
        address_zip?: string | undefined
        exp_month?: string | undefined
        exp_year?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
        owner?:
          | {
              address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              email?: string | undefined
              name?: string | undefined
              phone?: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_card | t_bank_account | t_source>> {
    const url = `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerBankAccountsIdVerify(
    p: {
      customer: string
      id: string
      requestBody?: {
        amounts?: number[] | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_bank_account>> {
    const url = `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}/verify`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerCards(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_card[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/customers/${p["customer"]}/cards`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerCards(
    p: {
      customer: string
      requestBody?: {
        alipay_account?: string | undefined
        bank_account?:
          | (
              | {
                  account_holder_name?: string | undefined
                  account_holder_type?:
                    | ("company" | "individual" | UnknownEnumStringValue)
                    | undefined
                  account_number: string
                  country: string
                  currency?: string | undefined
                  object?: ("bank_account" | UnknownEnumStringValue) | undefined
                  routing_number?: string | undefined
                }
              | string
            )
          | undefined
        card?:
          | (
              | {
                  address_city?: string | undefined
                  address_country?: string | undefined
                  address_line1?: string | undefined
                  address_line2?: string | undefined
                  address_state?: string | undefined
                  address_zip?: string | undefined
                  cvc?: string | undefined
                  exp_month: number
                  exp_year: number
                  metadata?:
                    | {
                        [key: string]: string | undefined
                      }
                    | undefined
                  name?: string | undefined
                  number: string
                  object?: ("card" | UnknownEnumStringValue) | undefined
                }
              | string
            )
          | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        source?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_source>> {
    const url = `/v1/customers/${p["customer"]}/cards`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteCustomersCustomerCardsId(
    p: {
      customer: string
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_source | t_deleted_payment_source>> {
    const url = `/v1/customers/${p["customer"]}/cards/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerCardsId(
    p: {
      customer: string
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_card>> {
    const url = `/v1/customers/${p["customer"]}/cards/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerCardsId(
    p: {
      customer: string
      id: string
      requestBody?: {
        account_holder_name?: string | undefined
        account_holder_type?:
          | ("company" | "individual" | UnknownEnumStringValue)
          | undefined
        address_city?: string | undefined
        address_country?: string | undefined
        address_line1?: string | undefined
        address_line2?: string | undefined
        address_state?: string | undefined
        address_zip?: string | undefined
        exp_month?: string | undefined
        exp_year?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
        owner?:
          | {
              address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              email?: string | undefined
              name?: string | undefined
              phone?: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_card | t_bank_account | t_source>> {
    const url = `/v1/customers/${p["customer"]}/cards/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerCashBalance(
    p: {
      customer: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_cash_balance>> {
    const url = `/v1/customers/${p["customer"]}/cash_balance`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerCashBalance(
    p: {
      customer: string
      requestBody?: {
        expand?: string[] | undefined
        settings?:
          | {
              reconciliation_mode?:
                | (
                    | "automatic"
                    | "manual"
                    | "merchant_default"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_cash_balance>> {
    const url = `/v1/customers/${p["customer"]}/cash_balance`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerCashBalanceTransactions(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_customer_cash_balance_transaction[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/customers/${p["customer"]}/cash_balance_transactions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerCashBalanceTransactionsTransaction(
    p: {
      customer: string
      expand?: string[]
      transaction: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_customer_cash_balance_transaction>> {
    const url = `/v1/customers/${p["customer"]}/cash_balance_transactions/${p["transaction"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteCustomersCustomerDiscount(
    p: {
      customer: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_discount>> {
    const url = `/v1/customers/${p["customer"]}/discount`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerDiscount(
    p: {
      customer: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_discount>> {
    const url = `/v1/customers/${p["customer"]}/discount`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerFundingInstructions(
    p: {
      customer: string
      requestBody: {
        bank_transfer: {
          eu_bank_transfer?:
            | {
                country: string
              }
            | undefined
          requested_address_types?:
            | (
                | "iban"
                | "sort_code"
                | "spei"
                | "zengin"
                | UnknownEnumStringValue
              )[]
            | undefined
          type:
            | "eu_bank_transfer"
            | "gb_bank_transfer"
            | "jp_bank_transfer"
            | "mx_bank_transfer"
            | "us_bank_transfer"
            | UnknownEnumStringValue
        }
        currency: string
        expand?: string[] | undefined
        funding_type: "bank_transfer" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_funding_instructions>> {
    const url = `/v1/customers/${p["customer"]}/funding_instructions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerPaymentMethods(
    p: {
      allowRedisplay?:
        | "always"
        | "limited"
        | "unspecified"
        | UnknownEnumStringValue
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?:
        | "acss_debit"
        | "affirm"
        | "afterpay_clearpay"
        | "alipay"
        | "alma"
        | "amazon_pay"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "billie"
        | "blik"
        | "boleto"
        | "card"
        | "cashapp"
        | "customer_balance"
        | "eps"
        | "fpx"
        | "giropay"
        | "grabpay"
        | "ideal"
        | "kakao_pay"
        | "klarna"
        | "konbini"
        | "kr_card"
        | "link"
        | "mobilepay"
        | "multibanco"
        | "naver_pay"
        | "nz_bank_account"
        | "oxxo"
        | "p24"
        | "pay_by_bank"
        | "payco"
        | "paynow"
        | "paypal"
        | "pix"
        | "promptpay"
        | "revolut_pay"
        | "samsung_pay"
        | "satispay"
        | "sepa_debit"
        | "sofort"
        | "swish"
        | "twint"
        | "us_bank_account"
        | "wechat_pay"
        | "zip"
        | UnknownEnumStringValue
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_payment_method[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/customers/${p["customer"]}/payment_methods`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      allow_redisplay: p["allowRedisplay"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerPaymentMethodsPaymentMethod(
    p: {
      customer: string
      expand?: string[]
      paymentMethod: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method>> {
    const url = `/v1/customers/${p["customer"]}/payment_methods/${p["paymentMethod"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerSources(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      object?: string
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: (t_bank_account | t_card | t_source)[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/customers/${p["customer"]}/sources`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      object: p["object"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerSources(
    p: {
      customer: string
      requestBody?: {
        alipay_account?: string | undefined
        bank_account?:
          | (
              | {
                  account_holder_name?: string | undefined
                  account_holder_type?:
                    | ("company" | "individual" | UnknownEnumStringValue)
                    | undefined
                  account_number: string
                  country: string
                  currency?: string | undefined
                  object?: ("bank_account" | UnknownEnumStringValue) | undefined
                  routing_number?: string | undefined
                }
              | string
            )
          | undefined
        card?:
          | (
              | {
                  address_city?: string | undefined
                  address_country?: string | undefined
                  address_line1?: string | undefined
                  address_line2?: string | undefined
                  address_state?: string | undefined
                  address_zip?: string | undefined
                  cvc?: string | undefined
                  exp_month: number
                  exp_year: number
                  metadata?:
                    | {
                        [key: string]: string | undefined
                      }
                    | undefined
                  name?: string | undefined
                  number: string
                  object?: ("card" | UnknownEnumStringValue) | undefined
                }
              | string
            )
          | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        source?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_source>> {
    const url = `/v1/customers/${p["customer"]}/sources`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteCustomersCustomerSourcesId(
    p: {
      customer: string
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_source | t_deleted_payment_source>> {
    const url = `/v1/customers/${p["customer"]}/sources/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerSourcesId(
    p: {
      customer: string
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_source>> {
    const url = `/v1/customers/${p["customer"]}/sources/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerSourcesId(
    p: {
      customer: string
      id: string
      requestBody?: {
        account_holder_name?: string | undefined
        account_holder_type?:
          | ("company" | "individual" | UnknownEnumStringValue)
          | undefined
        address_city?: string | undefined
        address_country?: string | undefined
        address_line1?: string | undefined
        address_line2?: string | undefined
        address_state?: string | undefined
        address_zip?: string | undefined
        exp_month?: string | undefined
        exp_year?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
        owner?:
          | {
              address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              email?: string | undefined
              name?: string | undefined
              phone?: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_card | t_bank_account | t_source>> {
    const url = `/v1/customers/${p["customer"]}/sources/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerSourcesIdVerify(
    p: {
      customer: string
      id: string
      requestBody?: {
        amounts?: number[] | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_bank_account>> {
    const url = `/v1/customers/${p["customer"]}/sources/${p["id"]}/verify`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerSubscriptions(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_subscription[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/customers/${p["customer"]}/subscriptions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerSubscriptions(
    p: {
      customer: string
      requestBody?: {
        add_invoice_items?:
          | {
              discounts?:
                | {
                    coupon?: string | undefined
                    discount?: string | undefined
                    promotion_code?: string | undefined
                  }[]
                | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product: string
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
            }[]
          | undefined
        application_fee_percent?:
          | (number | "" | UnknownEnumStringValue)
          | undefined
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        backdate_start_date?: number | undefined
        billing_cycle_anchor?: number | undefined
        cancel_at?: number | undefined
        cancel_at_period_end?: boolean | undefined
        collection_method?:
          | ("charge_automatically" | "send_invoice" | UnknownEnumStringValue)
          | undefined
        currency?: string | undefined
        days_until_due?: number | undefined
        default_payment_method?: string | undefined
        default_source?: string | undefined
        default_tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        invoice_settings?:
          | {
              account_tax_ids?:
                | (string[] | "" | UnknownEnumStringValue)
                | undefined
              issuer?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        items?:
          | {
              discounts?:
                | (
                    | {
                        coupon?: string | undefined
                        discount?: string | undefined
                        promotion_code?: string | undefined
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product: string
                    recurring: {
                      interval:
                        | "day"
                        | "month"
                        | "week"
                        | "year"
                        | UnknownEnumStringValue
                      interval_count?: number | undefined
                    }
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
            }[]
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        off_session?: boolean | undefined
        payment_behavior?:
          | (
              | "allow_incomplete"
              | "default_incomplete"
              | "error_if_incomplete"
              | "pending_if_incomplete"
              | UnknownEnumStringValue
            )
          | undefined
        payment_settings?:
          | {
              payment_method_options?:
                | {
                    acss_debit?:
                      | (
                          | {
                              mandate_options?:
                                | {
                                    transaction_type?:
                                      | (
                                          | "business"
                                          | "personal"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    bancontact?:
                      | (
                          | {
                              preferred_language?:
                                | (
                                    | "de"
                                    | "en"
                                    | "fr"
                                    | "nl"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    card?:
                      | (
                          | {
                              mandate_options?:
                                | {
                                    amount?: number | undefined
                                    amount_type?:
                                      | (
                                          | "fixed"
                                          | "maximum"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                    description?: string | undefined
                                  }
                                | undefined
                              network?:
                                | (
                                    | "amex"
                                    | "cartes_bancaires"
                                    | "diners"
                                    | "discover"
                                    | "eftpos_au"
                                    | "girocard"
                                    | "interac"
                                    | "jcb"
                                    | "link"
                                    | "mastercard"
                                    | "unionpay"
                                    | "unknown"
                                    | "visa"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              request_three_d_secure?:
                                | (
                                    | "any"
                                    | "automatic"
                                    | "challenge"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    customer_balance?:
                      | (
                          | {
                              bank_transfer?:
                                | {
                                    eu_bank_transfer?:
                                      | {
                                          country: string
                                        }
                                      | undefined
                                    type?: string | undefined
                                  }
                                | undefined
                              funding_type?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    konbini?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    sepa_debit?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    us_bank_account?:
                      | (
                          | {
                              financial_connections?:
                                | {
                                    filters?:
                                      | {
                                          account_subcategories?:
                                            | (
                                                | "checking"
                                                | "savings"
                                                | UnknownEnumStringValue
                                              )[]
                                            | undefined
                                        }
                                      | undefined
                                    permissions?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "payment_method"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                    prefetch?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              payment_method_types?:
                | (
                    | (
                        | "ach_credit_transfer"
                        | "ach_debit"
                        | "acss_debit"
                        | "amazon_pay"
                        | "au_becs_debit"
                        | "bacs_debit"
                        | "bancontact"
                        | "boleto"
                        | "card"
                        | "cashapp"
                        | "customer_balance"
                        | "eps"
                        | "fpx"
                        | "giropay"
                        | "grabpay"
                        | "ideal"
                        | "jp_credit_transfer"
                        | "kakao_pay"
                        | "klarna"
                        | "konbini"
                        | "kr_card"
                        | "link"
                        | "multibanco"
                        | "naver_pay"
                        | "nz_bank_account"
                        | "p24"
                        | "payco"
                        | "paynow"
                        | "paypal"
                        | "promptpay"
                        | "revolut_pay"
                        | "sepa_credit_transfer"
                        | "sepa_debit"
                        | "sofort"
                        | "swish"
                        | "us_bank_account"
                        | "wechat_pay"
                        | UnknownEnumStringValue
                      )[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              save_default_payment_method?:
                | ("off" | "on_subscription" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        pending_invoice_item_interval?:
          | (
              | {
                  interval:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        proration_behavior?:
          | (
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            )
          | undefined
        transfer_data?:
          | {
              amount_percent?: number | undefined
              destination: string
            }
          | undefined
        trial_end?: ("now" | UnknownEnumStringValue | number) | undefined
        trial_from_plan?: boolean | undefined
        trial_period_days?: number | undefined
        trial_settings?:
          | {
              end_behavior: {
                missing_payment_method:
                  | "cancel"
                  | "create_invoice"
                  | "pause"
                  | UnknownEnumStringValue
              }
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription>> {
    const url = `/v1/customers/${p["customer"]}/subscriptions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteCustomersCustomerSubscriptionsSubscriptionExposedId(
    p: {
      customer: string
      subscriptionExposedId: string
      requestBody?: {
        expand?: string[] | undefined
        invoice_now?: boolean | undefined
        prorate?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription>> {
    const url = `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerSubscriptionsSubscriptionExposedId(
    p: {
      customer: string
      expand?: string[]
      subscriptionExposedId: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription>> {
    const url = `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerSubscriptionsSubscriptionExposedId(
    p: {
      customer: string
      subscriptionExposedId: string
      requestBody?: {
        add_invoice_items?:
          | {
              discounts?:
                | {
                    coupon?: string | undefined
                    discount?: string | undefined
                    promotion_code?: string | undefined
                  }[]
                | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product: string
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
            }[]
          | undefined
        application_fee_percent?:
          | (number | "" | UnknownEnumStringValue)
          | undefined
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        billing_cycle_anchor?:
          | ("now" | "unchanged" | UnknownEnumStringValue)
          | undefined
        cancel_at?: (number | "" | UnknownEnumStringValue) | undefined
        cancel_at_period_end?: boolean | undefined
        cancellation_details?:
          | {
              comment?: (string | "" | UnknownEnumStringValue) | undefined
              feedback?:
                | (
                    | ""
                    | "customer_service"
                    | "low_quality"
                    | "missing_features"
                    | "other"
                    | "switched_service"
                    | "too_complex"
                    | "too_expensive"
                    | "unused"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        collection_method?:
          | ("charge_automatically" | "send_invoice" | UnknownEnumStringValue)
          | undefined
        days_until_due?: number | undefined
        default_payment_method?: string | undefined
        default_source?: (string | "" | UnknownEnumStringValue) | undefined
        default_tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        invoice_settings?:
          | {
              account_tax_ids?:
                | (string[] | "" | UnknownEnumStringValue)
                | undefined
              issuer?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        items?:
          | {
              clear_usage?: boolean | undefined
              deleted?: boolean | undefined
              discounts?:
                | (
                    | {
                        coupon?: string | undefined
                        discount?: string | undefined
                        promotion_code?: string | undefined
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              id?: string | undefined
              metadata?:
                | (
                    | {
                        [key: string]: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product: string
                    recurring: {
                      interval:
                        | "day"
                        | "month"
                        | "week"
                        | "year"
                        | UnknownEnumStringValue
                      interval_count?: number | undefined
                    }
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
            }[]
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        off_session?: boolean | undefined
        pause_collection?:
          | (
              | {
                  behavior:
                    | "keep_as_draft"
                    | "mark_uncollectible"
                    | "void"
                    | UnknownEnumStringValue
                  resumes_at?: number | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        payment_behavior?:
          | (
              | "allow_incomplete"
              | "default_incomplete"
              | "error_if_incomplete"
              | "pending_if_incomplete"
              | UnknownEnumStringValue
            )
          | undefined
        payment_settings?:
          | {
              payment_method_options?:
                | {
                    acss_debit?:
                      | (
                          | {
                              mandate_options?:
                                | {
                                    transaction_type?:
                                      | (
                                          | "business"
                                          | "personal"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    bancontact?:
                      | (
                          | {
                              preferred_language?:
                                | (
                                    | "de"
                                    | "en"
                                    | "fr"
                                    | "nl"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    card?:
                      | (
                          | {
                              mandate_options?:
                                | {
                                    amount?: number | undefined
                                    amount_type?:
                                      | (
                                          | "fixed"
                                          | "maximum"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                    description?: string | undefined
                                  }
                                | undefined
                              network?:
                                | (
                                    | "amex"
                                    | "cartes_bancaires"
                                    | "diners"
                                    | "discover"
                                    | "eftpos_au"
                                    | "girocard"
                                    | "interac"
                                    | "jcb"
                                    | "link"
                                    | "mastercard"
                                    | "unionpay"
                                    | "unknown"
                                    | "visa"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              request_three_d_secure?:
                                | (
                                    | "any"
                                    | "automatic"
                                    | "challenge"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    customer_balance?:
                      | (
                          | {
                              bank_transfer?:
                                | {
                                    eu_bank_transfer?:
                                      | {
                                          country: string
                                        }
                                      | undefined
                                    type?: string | undefined
                                  }
                                | undefined
                              funding_type?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    konbini?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    sepa_debit?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    us_bank_account?:
                      | (
                          | {
                              financial_connections?:
                                | {
                                    filters?:
                                      | {
                                          account_subcategories?:
                                            | (
                                                | "checking"
                                                | "savings"
                                                | UnknownEnumStringValue
                                              )[]
                                            | undefined
                                        }
                                      | undefined
                                    permissions?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "payment_method"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                    prefetch?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              payment_method_types?:
                | (
                    | (
                        | "ach_credit_transfer"
                        | "ach_debit"
                        | "acss_debit"
                        | "amazon_pay"
                        | "au_becs_debit"
                        | "bacs_debit"
                        | "bancontact"
                        | "boleto"
                        | "card"
                        | "cashapp"
                        | "customer_balance"
                        | "eps"
                        | "fpx"
                        | "giropay"
                        | "grabpay"
                        | "ideal"
                        | "jp_credit_transfer"
                        | "kakao_pay"
                        | "klarna"
                        | "konbini"
                        | "kr_card"
                        | "link"
                        | "multibanco"
                        | "naver_pay"
                        | "nz_bank_account"
                        | "p24"
                        | "payco"
                        | "paynow"
                        | "paypal"
                        | "promptpay"
                        | "revolut_pay"
                        | "sepa_credit_transfer"
                        | "sepa_debit"
                        | "sofort"
                        | "swish"
                        | "us_bank_account"
                        | "wechat_pay"
                        | UnknownEnumStringValue
                      )[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              save_default_payment_method?:
                | ("off" | "on_subscription" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        pending_invoice_item_interval?:
          | (
              | {
                  interval:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        proration_behavior?:
          | (
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            )
          | undefined
        proration_date?: number | undefined
        transfer_data?:
          | (
              | {
                  amount_percent?: number | undefined
                  destination: string
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        trial_end?: ("now" | UnknownEnumStringValue | number) | undefined
        trial_from_plan?: boolean | undefined
        trial_settings?:
          | {
              end_behavior: {
                missing_payment_method:
                  | "cancel"
                  | "create_invoice"
                  | "pause"
                  | UnknownEnumStringValue
              }
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription>> {
    const url = `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(
    p: {
      customer: string
      subscriptionExposedId: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_discount>> {
    const url = `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}/discount`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(
    p: {
      customer: string
      expand?: string[]
      subscriptionExposedId: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_discount>> {
    const url = `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}/discount`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerTaxIds(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_tax_id[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/customers/${p["customer"]}/tax_ids`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postCustomersCustomerTaxIds(
    p: {
      customer: string
      requestBody: {
        expand?: string[] | undefined
        type:
          | "ad_nrt"
          | "ae_trn"
          | "al_tin"
          | "am_tin"
          | "ao_tin"
          | "ar_cuit"
          | "au_abn"
          | "au_arn"
          | "ba_tin"
          | "bb_tin"
          | "bg_uic"
          | "bh_vat"
          | "bo_tin"
          | "br_cnpj"
          | "br_cpf"
          | "bs_tin"
          | "by_tin"
          | "ca_bn"
          | "ca_gst_hst"
          | "ca_pst_bc"
          | "ca_pst_mb"
          | "ca_pst_sk"
          | "ca_qst"
          | "cd_nif"
          | "ch_uid"
          | "ch_vat"
          | "cl_tin"
          | "cn_tin"
          | "co_nit"
          | "cr_tin"
          | "de_stn"
          | "do_rcn"
          | "ec_ruc"
          | "eg_tin"
          | "es_cif"
          | "eu_oss_vat"
          | "eu_vat"
          | "gb_vat"
          | "ge_vat"
          | "gn_nif"
          | "hk_br"
          | "hr_oib"
          | "hu_tin"
          | "id_npwp"
          | "il_vat"
          | "in_gst"
          | "is_vat"
          | "jp_cn"
          | "jp_rn"
          | "jp_trn"
          | "ke_pin"
          | "kh_tin"
          | "kr_brn"
          | "kz_bin"
          | "li_uid"
          | "li_vat"
          | "ma_vat"
          | "md_vat"
          | "me_pib"
          | "mk_vat"
          | "mr_nif"
          | "mx_rfc"
          | "my_frp"
          | "my_itn"
          | "my_sst"
          | "ng_tin"
          | "no_vat"
          | "no_voec"
          | "np_pan"
          | "nz_gst"
          | "om_vat"
          | "pe_ruc"
          | "ph_tin"
          | "ro_tin"
          | "rs_pib"
          | "ru_inn"
          | "ru_kpp"
          | "sa_vat"
          | "sg_gst"
          | "sg_uen"
          | "si_tin"
          | "sn_ninea"
          | "sr_fin"
          | "sv_nit"
          | "th_vat"
          | "tj_tin"
          | "tr_tin"
          | "tw_vat"
          | "tz_vat"
          | "ua_vat"
          | "ug_tin"
          | "us_ein"
          | "uy_ruc"
          | "uz_tin"
          | "uz_vat"
          | "ve_rif"
          | "vn_tin"
          | "za_vat"
          | "zm_tin"
          | "zw_tin"
          | UnknownEnumStringValue
        value: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_id>> {
    const url = `/v1/customers/${p["customer"]}/tax_ids`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteCustomersCustomerTaxIdsId(
    p: {
      customer: string
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_tax_id>> {
    const url = `/v1/customers/${p["customer"]}/tax_ids/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getCustomersCustomerTaxIdsId(
    p: {
      customer: string
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_id>> {
    const url = `/v1/customers/${p["customer"]}/tax_ids/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getDisputes(
    p: {
      charge?: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_dispute[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/disputes`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getDisputesDispute(
    p: {
      dispute: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_dispute>> {
    const url = `/v1/disputes/${p["dispute"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postDisputesDispute(
    p: {
      dispute: string
      requestBody?: {
        evidence?:
          | {
              access_activity_log?: string | undefined
              billing_address?: string | undefined
              cancellation_policy?: string | undefined
              cancellation_policy_disclosure?: string | undefined
              cancellation_rebuttal?: string | undefined
              customer_communication?: string | undefined
              customer_email_address?: string | undefined
              customer_name?: string | undefined
              customer_purchase_ip?: string | undefined
              customer_signature?: string | undefined
              duplicate_charge_documentation?: string | undefined
              duplicate_charge_explanation?: string | undefined
              duplicate_charge_id?: string | undefined
              enhanced_evidence?:
                | (
                    | {
                        visa_compelling_evidence_3?:
                          | {
                              disputed_transaction?:
                                | {
                                    customer_account_id?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_device_fingerprint?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_device_id?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_email_address?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_purchase_ip?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    merchandise_or_services?:
                                      | (
                                          | "merchandise"
                                          | "services"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                    product_description?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    shipping_address?:
                                      | {
                                          city?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          country?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          line1?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          line2?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          postal_code?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          state?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                        }
                                      | undefined
                                  }
                                | undefined
                              prior_undisputed_transactions?:
                                | {
                                    charge: string
                                    customer_account_id?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_device_fingerprint?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_device_id?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_email_address?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    customer_purchase_ip?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    product_description?:
                                      | (string | "" | UnknownEnumStringValue)
                                      | undefined
                                    shipping_address?:
                                      | {
                                          city?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          country?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          line1?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          line2?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          postal_code?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                          state?:
                                            | (
                                                | string
                                                | ""
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                        }
                                      | undefined
                                  }[]
                                | undefined
                            }
                          | undefined
                        visa_compliance?:
                          | {
                              fee_acknowledged?: boolean | undefined
                            }
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              product_description?: string | undefined
              receipt?: string | undefined
              refund_policy?: string | undefined
              refund_policy_disclosure?: string | undefined
              refund_refusal_explanation?: string | undefined
              service_date?: string | undefined
              service_documentation?: string | undefined
              shipping_address?: string | undefined
              shipping_carrier?: string | undefined
              shipping_date?: string | undefined
              shipping_documentation?: string | undefined
              shipping_tracking_number?: string | undefined
              uncategorized_file?: string | undefined
              uncategorized_text?: string | undefined
            }
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        submit?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_dispute>> {
    const url = `/v1/disputes/${p["dispute"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postDisputesDisputeClose(
    p: {
      dispute: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_dispute>> {
    const url = `/v1/disputes/${p["dispute"]}/close`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getEntitlementsActiveEntitlements(
    p: {
      customer: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_entitlements_active_entitlement[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/entitlements/active_entitlements`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getEntitlementsActiveEntitlementsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_entitlements_active_entitlement>> {
    const url = `/v1/entitlements/active_entitlements/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getEntitlementsFeatures(
    p: {
      archived?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      lookupKey?: string
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_entitlements_feature[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/entitlements/features`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      archived: p["archived"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      lookup_key: p["lookupKey"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postEntitlementsFeatures(
    p: {
      requestBody: {
        expand?: string[] | undefined
        lookup_key: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        name: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_entitlements_feature>> {
    const url = `/v1/entitlements/features`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getEntitlementsFeaturesId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_entitlements_feature>> {
    const url = `/v1/entitlements/features/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postEntitlementsFeaturesId(
    p: {
      id: string
      requestBody?: {
        active?: boolean | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_entitlements_feature>> {
    const url = `/v1/entitlements/features/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postEphemeralKeys(
    p: {
      requestBody?: {
        customer?: string | undefined
        expand?: string[] | undefined
        issuing_card?: string | undefined
        nonce?: string | undefined
        verification_session?: string | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_ephemeral_key>> {
    const url = `/v1/ephemeral_keys`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteEphemeralKeysKey(
    p: {
      key: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_ephemeral_key>> {
    const url = `/v1/ephemeral_keys/${p["key"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getEvents(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      deliverySuccess?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?: string
      types?: string[]
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_event[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/events`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      delivery_success: p["deliverySuccess"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
      types: p["types"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getEventsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_event>> {
    const url = `/v1/events/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getExchangeRates(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_exchange_rate[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/exchange_rates`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getExchangeRatesRateId(
    p: {
      expand?: string[]
      rateId: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_exchange_rate>> {
    const url = `/v1/exchange_rates/${p["rateId"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postExternalAccountsId(
    p: {
      id: string
      requestBody?: {
        account_holder_name?: string | undefined
        account_holder_type?:
          | ("" | "company" | "individual" | UnknownEnumStringValue)
          | undefined
        account_type?:
          | ("checking" | "futsu" | "savings" | "toza" | UnknownEnumStringValue)
          | undefined
        address_city?: string | undefined
        address_country?: string | undefined
        address_line1?: string | undefined
        address_line2?: string | undefined
        address_state?: string | undefined
        address_zip?: string | undefined
        default_for_currency?: boolean | undefined
        documents?:
          | {
              bank_account_ownership_verification?:
                | {
                    files?: string[] | undefined
                  }
                | undefined
            }
          | undefined
        exp_month?: string | undefined
        exp_year?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_external_account>> {
    const url = `/v1/external_accounts/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getFileLinks(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      expired?: boolean
      file?: string
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_file_link[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/file_links`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      expired: p["expired"],
      file: p["file"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postFileLinks(
    p: {
      requestBody: {
        expand?: string[] | undefined
        expires_at?: number | undefined
        file: string
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_file_link>> {
    const url = `/v1/file_links`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getFileLinksLink(
    p: {
      expand?: string[]
      link: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_file_link>> {
    const url = `/v1/file_links/${p["link"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postFileLinksLink(
    p: {
      link: string
      requestBody?: {
        expand?: string[] | undefined
        expires_at?: ("now" | UnknownEnumStringValue | number | "") | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_file_link>> {
    const url = `/v1/file_links/${p["link"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getFiles(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      purpose?:
        | "account_requirement"
        | "additional_verification"
        | "business_icon"
        | "business_logo"
        | "customer_signature"
        | "dispute_evidence"
        | "document_provider_identity_document"
        | "finance_report_run"
        | "financial_account_statement"
        | "identity_document"
        | "identity_document_downloadable"
        | "issuing_regulatory_reporting"
        | "pci_document"
        | "selfie"
        | "sigma_scheduled_query"
        | "tax_document_user_upload"
        | "terminal_reader_splashscreen"
        | UnknownEnumStringValue
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_file[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/files`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      purpose: p["purpose"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postFiles(
    p: {
      requestBody: {
        expand?: string[] | undefined
        file: string
        file_link_data?:
          | {
              create: boolean
              expires_at?: number | undefined
              metadata?:
                | (
                    | {
                        [key: string]: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        purpose:
          | "account_requirement"
          | "additional_verification"
          | "business_icon"
          | "business_logo"
          | "customer_signature"
          | "dispute_evidence"
          | "identity_document"
          | "issuing_regulatory_reporting"
          | "pci_document"
          | "tax_document_user_upload"
          | "terminal_reader_splashscreen"
          | UnknownEnumStringValue
      }
    },
    basePath:
      | Server<"postFiles_StripeApi">
      | string = StripeApiServers.operations.postFiles().build(),
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_file>> {
    const url = `/v1/files`
    const headers = this._headers(
      { "Content-Type": "multipart/form-data" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      baseURL: basePath,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getFilesFile(
    p: {
      expand?: string[]
      file: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_file>> {
    const url = `/v1/files/${p["file"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getFinancialConnectionsAccounts(
    p: {
      accountHolder?: {
        account?: string | undefined
        customer?: string | undefined
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      session?: string
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_financial_connections_account[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/financial_connections/accounts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      account_holder: p["accountHolder"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      session: p["session"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getFinancialConnectionsAccountsAccount(
    p: {
      account: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_account>> {
    const url = `/v1/financial_connections/accounts/${p["account"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postFinancialConnectionsAccountsAccountDisconnect(
    p: {
      account: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_account>> {
    const url = `/v1/financial_connections/accounts/${p["account"]}/disconnect`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getFinancialConnectionsAccountsAccountOwners(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      ownership: string
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_financial_connections_account_owner[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/financial_connections/accounts/${p["account"]}/owners`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      ownership: p["ownership"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postFinancialConnectionsAccountsAccountRefresh(
    p: {
      account: string
      requestBody: {
        expand?: string[] | undefined
        features: (
          | "balance"
          | "ownership"
          | "transactions"
          | UnknownEnumStringValue
        )[]
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_account>> {
    const url = `/v1/financial_connections/accounts/${p["account"]}/refresh`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postFinancialConnectionsAccountsAccountSubscribe(
    p: {
      account: string
      requestBody: {
        expand?: string[] | undefined
        features: ("transactions" | UnknownEnumStringValue)[]
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_account>> {
    const url = `/v1/financial_connections/accounts/${p["account"]}/subscribe`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postFinancialConnectionsAccountsAccountUnsubscribe(
    p: {
      account: string
      requestBody: {
        expand?: string[] | undefined
        features: ("transactions" | UnknownEnumStringValue)[]
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_account>> {
    const url = `/v1/financial_connections/accounts/${p["account"]}/unsubscribe`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postFinancialConnectionsSessions(
    p: {
      requestBody: {
        account_holder: {
          account?: string | undefined
          customer?: string | undefined
          type: "account" | "customer" | UnknownEnumStringValue
        }
        expand?: string[] | undefined
        filters?:
          | {
              account_subcategories?:
                | (
                    | "checking"
                    | "credit_card"
                    | "line_of_credit"
                    | "mortgage"
                    | "savings"
                    | UnknownEnumStringValue
                  )[]
                | undefined
              countries?: string[] | undefined
            }
          | undefined
        permissions: (
          | "balances"
          | "ownership"
          | "payment_method"
          | "transactions"
          | UnknownEnumStringValue
        )[]
        prefetch?:
          | (
              | "balances"
              | "ownership"
              | "transactions"
              | UnknownEnumStringValue
            )[]
          | undefined
        return_url?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_session>> {
    const url = `/v1/financial_connections/sessions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getFinancialConnectionsSessionsSession(
    p: {
      expand?: string[]
      session: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_session>> {
    const url = `/v1/financial_connections/sessions/${p["session"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getFinancialConnectionsTransactions(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      transactedAt?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      transactionRefresh?: {
        after: string
      }
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_financial_connections_transaction[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/financial_connections/transactions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      account: p["account"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      transacted_at: p["transactedAt"],
      transaction_refresh: p["transactionRefresh"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getFinancialConnectionsTransactionsTransaction(
    p: {
      expand?: string[]
      transaction: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_transaction>> {
    const url = `/v1/financial_connections/transactions/${p["transaction"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getForwardingRequests(
    p: {
      created?: {
        gt?: number | undefined
        gte?: number | undefined
        lt?: number | undefined
        lte?: number | undefined
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_forwarding_request[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/forwarding/requests`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postForwardingRequests(
    p: {
      requestBody: {
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        payment_method: string
        replacements: (
          | "card_cvc"
          | "card_expiry"
          | "card_number"
          | "cardholder_name"
          | "request_signature"
          | UnknownEnumStringValue
        )[]
        request?:
          | {
              body?: string | undefined
              headers?:
                | {
                    name: string
                    value: string
                  }[]
                | undefined
            }
          | undefined
        url: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_forwarding_request>> {
    const url = `/v1/forwarding/requests`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getForwardingRequestsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_forwarding_request>> {
    const url = `/v1/forwarding/requests/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIdentityVerificationReports(
    p: {
      clientReferenceId?: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?: "document" | "id_number" | UnknownEnumStringValue
      verificationSession?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_identity_verification_report[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/identity/verification_reports`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      client_reference_id: p["clientReferenceId"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
      verification_session: p["verificationSession"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIdentityVerificationReportsReport(
    p: {
      expand?: string[]
      report: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_identity_verification_report>> {
    const url = `/v1/identity/verification_reports/${p["report"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIdentityVerificationSessions(
    p: {
      clientReferenceId?: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      relatedCustomer?: string
      startingAfter?: string
      status?:
        | "canceled"
        | "processing"
        | "requires_input"
        | "verified"
        | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_identity_verification_session[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/identity/verification_sessions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      client_reference_id: p["clientReferenceId"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      related_customer: p["relatedCustomer"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIdentityVerificationSessions(
    p: {
      requestBody?: {
        client_reference_id?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        options?:
          | {
              document?:
                | (
                    | {
                        allowed_types?:
                          | (
                              | "driving_license"
                              | "id_card"
                              | "passport"
                              | UnknownEnumStringValue
                            )[]
                          | undefined
                        require_id_number?: boolean | undefined
                        require_live_capture?: boolean | undefined
                        require_matching_selfie?: boolean | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        provided_details?:
          | {
              email?: string | undefined
              phone?: string | undefined
            }
          | undefined
        related_customer?: string | undefined
        return_url?: string | undefined
        type?: ("document" | "id_number" | UnknownEnumStringValue) | undefined
        verification_flow?: string | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_identity_verification_session>> {
    const url = `/v1/identity/verification_sessions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIdentityVerificationSessionsSession(
    p: {
      expand?: string[]
      session: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_identity_verification_session>> {
    const url = `/v1/identity/verification_sessions/${p["session"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIdentityVerificationSessionsSession(
    p: {
      session: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        options?:
          | {
              document?:
                | (
                    | {
                        allowed_types?:
                          | (
                              | "driving_license"
                              | "id_card"
                              | "passport"
                              | UnknownEnumStringValue
                            )[]
                          | undefined
                        require_id_number?: boolean | undefined
                        require_live_capture?: boolean | undefined
                        require_matching_selfie?: boolean | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        provided_details?:
          | {
              email?: string | undefined
              phone?: string | undefined
            }
          | undefined
        type?: ("document" | "id_number" | UnknownEnumStringValue) | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_identity_verification_session>> {
    const url = `/v1/identity/verification_sessions/${p["session"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIdentityVerificationSessionsSessionCancel(
    p: {
      session: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_identity_verification_session>> {
    const url = `/v1/identity/verification_sessions/${p["session"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIdentityVerificationSessionsSessionRedact(
    p: {
      session: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_identity_verification_session>> {
    const url = `/v1/identity/verification_sessions/${p["session"]}/redact`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getInvoicePayments(
    p: {
      endingBefore?: string
      expand?: string[]
      invoice?: string
      limit?: number
      payment?: {
        payment_intent?: string | undefined
        type: "payment_intent" | UnknownEnumStringValue
      }
      startingAfter?: string
      status?: "canceled" | "open" | "paid" | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_invoice_payment[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/invoice_payments`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      payment: p["payment"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getInvoicePaymentsInvoicePayment(
    p: {
      expand?: string[]
      invoicePayment: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice_payment>> {
    const url = `/v1/invoice_payments/${p["invoicePayment"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getInvoiceRenderingTemplates(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: "active" | "archived" | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_invoice_rendering_template[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/invoice_rendering_templates`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getInvoiceRenderingTemplatesTemplate(
    p: {
      expand?: string[]
      template: string
      version?: number
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice_rendering_template>> {
    const url = `/v1/invoice_rendering_templates/${p["template"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"], version: p["version"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoiceRenderingTemplatesTemplateArchive(
    p: {
      template: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice_rendering_template>> {
    const url = `/v1/invoice_rendering_templates/${p["template"]}/archive`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoiceRenderingTemplatesTemplateUnarchive(
    p: {
      template: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice_rendering_template>> {
    const url = `/v1/invoice_rendering_templates/${p["template"]}/unarchive`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getInvoiceitems(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      invoice?: string
      limit?: number
      pending?: boolean
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_invoiceitem[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/invoiceitems`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      pending: p["pending"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoiceitems(
    p: {
      requestBody: {
        amount?: number | undefined
        currency?: string | undefined
        customer: string
        description?: string | undefined
        discountable?: boolean | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        invoice?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        period?:
          | {
              end: number
              start: number
            }
          | undefined
        price_data?:
          | {
              currency: string
              product: string
              tax_behavior?:
                | (
                    | "exclusive"
                    | "inclusive"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              unit_amount?: number | undefined
              unit_amount_decimal?: string | undefined
            }
          | undefined
        pricing?:
          | {
              price?: string | undefined
            }
          | undefined
        quantity?: number | undefined
        subscription?: string | undefined
        tax_behavior?:
          | ("exclusive" | "inclusive" | "unspecified" | UnknownEnumStringValue)
          | undefined
        tax_code?: (string | "" | UnknownEnumStringValue) | undefined
        tax_rates?: string[] | undefined
        unit_amount_decimal?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoiceitem>> {
    const url = `/v1/invoiceitems`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteInvoiceitemsInvoiceitem(
    p: {
      invoiceitem: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_invoiceitem>> {
    const url = `/v1/invoiceitems/${p["invoiceitem"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getInvoiceitemsInvoiceitem(
    p: {
      expand?: string[]
      invoiceitem: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoiceitem>> {
    const url = `/v1/invoiceitems/${p["invoiceitem"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoiceitemsInvoiceitem(
    p: {
      invoiceitem: string
      requestBody?: {
        amount?: number | undefined
        description?: string | undefined
        discountable?: boolean | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        period?:
          | {
              end: number
              start: number
            }
          | undefined
        price_data?:
          | {
              currency: string
              product: string
              tax_behavior?:
                | (
                    | "exclusive"
                    | "inclusive"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              unit_amount?: number | undefined
              unit_amount_decimal?: string | undefined
            }
          | undefined
        pricing?:
          | {
              price?: string | undefined
            }
          | undefined
        quantity?: number | undefined
        tax_behavior?:
          | ("exclusive" | "inclusive" | "unspecified" | UnknownEnumStringValue)
          | undefined
        tax_code?: (string | "" | UnknownEnumStringValue) | undefined
        tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        unit_amount_decimal?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoiceitem>> {
    const url = `/v1/invoiceitems/${p["invoiceitem"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getInvoices(
    p: {
      collectionMethod?:
        | "charge_automatically"
        | "send_invoice"
        | UnknownEnumStringValue
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      customer?: string
      dueDate?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "draft"
        | "open"
        | "paid"
        | "uncollectible"
        | "void"
        | UnknownEnumStringValue
      subscription?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_invoice[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/invoices`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      collection_method: p["collectionMethod"],
      created: p["created"],
      customer: p["customer"],
      due_date: p["dueDate"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      subscription: p["subscription"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoices(
    p: {
      requestBody?: {
        account_tax_ids?: (string[] | "" | UnknownEnumStringValue) | undefined
        application_fee_amount?: number | undefined
        auto_advance?: boolean | undefined
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        automatically_finalizes_at?: number | undefined
        collection_method?:
          | ("charge_automatically" | "send_invoice" | UnknownEnumStringValue)
          | undefined
        currency?: string | undefined
        custom_fields?:
          | (
              | {
                  name: string
                  value: string
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        customer?: string | undefined
        days_until_due?: number | undefined
        default_payment_method?: string | undefined
        default_source?: string | undefined
        default_tax_rates?: string[] | undefined
        description?: string | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        due_date?: number | undefined
        effective_at?: number | undefined
        expand?: string[] | undefined
        footer?: string | undefined
        from_invoice?:
          | {
              action: "revision" | UnknownEnumStringValue
              invoice: string
            }
          | undefined
        issuer?:
          | {
              account?: string | undefined
              type: "account" | "self" | UnknownEnumStringValue
            }
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        number?: string | undefined
        on_behalf_of?: string | undefined
        payment_settings?:
          | {
              default_mandate?:
                | (string | "" | UnknownEnumStringValue)
                | undefined
              payment_method_options?:
                | {
                    acss_debit?:
                      | (
                          | {
                              mandate_options?:
                                | {
                                    transaction_type?:
                                      | (
                                          | "business"
                                          | "personal"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    bancontact?:
                      | (
                          | {
                              preferred_language?:
                                | (
                                    | "de"
                                    | "en"
                                    | "fr"
                                    | "nl"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    card?:
                      | (
                          | {
                              installments?:
                                | {
                                    enabled?: boolean | undefined
                                    plan?:
                                      | (
                                          | {
                                              count?: number | undefined
                                              interval?:
                                                | (
                                                    | "month"
                                                    | UnknownEnumStringValue
                                                  )
                                                | undefined
                                              type:
                                                | "fixed_count"
                                                | UnknownEnumStringValue
                                            }
                                          | ""
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                  }
                                | undefined
                              request_three_d_secure?:
                                | (
                                    | "any"
                                    | "automatic"
                                    | "challenge"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    customer_balance?:
                      | (
                          | {
                              bank_transfer?:
                                | {
                                    eu_bank_transfer?:
                                      | {
                                          country: string
                                        }
                                      | undefined
                                    type?: string | undefined
                                  }
                                | undefined
                              funding_type?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    konbini?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    sepa_debit?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    us_bank_account?:
                      | (
                          | {
                              financial_connections?:
                                | {
                                    filters?:
                                      | {
                                          account_subcategories?:
                                            | (
                                                | "checking"
                                                | "savings"
                                                | UnknownEnumStringValue
                                              )[]
                                            | undefined
                                        }
                                      | undefined
                                    permissions?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "payment_method"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                    prefetch?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              payment_method_types?:
                | (
                    | (
                        | "ach_credit_transfer"
                        | "ach_debit"
                        | "acss_debit"
                        | "amazon_pay"
                        | "au_becs_debit"
                        | "bacs_debit"
                        | "bancontact"
                        | "boleto"
                        | "card"
                        | "cashapp"
                        | "customer_balance"
                        | "eps"
                        | "fpx"
                        | "giropay"
                        | "grabpay"
                        | "ideal"
                        | "jp_credit_transfer"
                        | "kakao_pay"
                        | "klarna"
                        | "konbini"
                        | "kr_card"
                        | "link"
                        | "multibanco"
                        | "naver_pay"
                        | "nz_bank_account"
                        | "p24"
                        | "payco"
                        | "paynow"
                        | "paypal"
                        | "promptpay"
                        | "revolut_pay"
                        | "sepa_credit_transfer"
                        | "sepa_debit"
                        | "sofort"
                        | "swish"
                        | "us_bank_account"
                        | "wechat_pay"
                        | UnknownEnumStringValue
                      )[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        pending_invoice_items_behavior?:
          | ("exclude" | "include" | UnknownEnumStringValue)
          | undefined
        rendering?:
          | {
              amount_tax_display?:
                | (
                    | ""
                    | "exclude_tax"
                    | "include_inclusive_tax"
                    | UnknownEnumStringValue
                  )
                | undefined
              pdf?:
                | {
                    page_size?:
                      | ("a4" | "auto" | "letter" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              template?: string | undefined
              template_version?:
                | (number | "" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        shipping_cost?:
          | {
              shipping_rate?: string | undefined
              shipping_rate_data?:
                | {
                    delivery_estimate?:
                      | {
                          maximum?:
                            | {
                                unit:
                                  | "business_day"
                                  | "day"
                                  | "hour"
                                  | "month"
                                  | "week"
                                  | UnknownEnumStringValue
                                value: number
                              }
                            | undefined
                          minimum?:
                            | {
                                unit:
                                  | "business_day"
                                  | "day"
                                  | "hour"
                                  | "month"
                                  | "week"
                                  | UnknownEnumStringValue
                                value: number
                              }
                            | undefined
                        }
                      | undefined
                    display_name: string
                    fixed_amount?:
                      | {
                          amount: number
                          currency: string
                          currency_options?:
                            | {
                                [key: string]:
                                  | {
                                      amount: number
                                      tax_behavior?:
                                        | (
                                            | "exclusive"
                                            | "inclusive"
                                            | "unspecified"
                                            | UnknownEnumStringValue
                                          )
                                        | undefined
                                    }
                                  | undefined
                              }
                            | undefined
                        }
                      | undefined
                    metadata?:
                      | {
                          [key: string]: string | undefined
                        }
                      | undefined
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    tax_code?: string | undefined
                    type?: ("fixed_amount" | UnknownEnumStringValue) | undefined
                  }
                | undefined
            }
          | undefined
        shipping_details?:
          | {
              address: {
                city?: string | undefined
                country?: string | undefined
                line1?: string | undefined
                line2?: string | undefined
                postal_code?: string | undefined
                state?: string | undefined
              }
              name: string
              phone?: (string | "" | UnknownEnumStringValue) | undefined
            }
          | undefined
        statement_descriptor?: string | undefined
        subscription?: string | undefined
        transfer_data?:
          | {
              amount?: number | undefined
              destination: string
            }
          | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoicesCreatePreview(
    p: {
      requestBody?: {
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        currency?: string | undefined
        customer?: string | undefined
        customer_details?:
          | {
              address?:
                | (
                    | {
                        city?: string | undefined
                        country?: string | undefined
                        line1?: string | undefined
                        line2?: string | undefined
                        postal_code?: string | undefined
                        state?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              shipping?:
                | (
                    | {
                        address: {
                          city?: string | undefined
                          country?: string | undefined
                          line1?: string | undefined
                          line2?: string | undefined
                          postal_code?: string | undefined
                          state?: string | undefined
                        }
                        name: string
                        phone?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              tax?:
                | {
                    ip_address?:
                      | (string | "" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              tax_exempt?:
                | ("" | "exempt" | "none" | "reverse" | UnknownEnumStringValue)
                | undefined
              tax_ids?:
                | {
                    type:
                      | "ad_nrt"
                      | "ae_trn"
                      | "al_tin"
                      | "am_tin"
                      | "ao_tin"
                      | "ar_cuit"
                      | "au_abn"
                      | "au_arn"
                      | "ba_tin"
                      | "bb_tin"
                      | "bg_uic"
                      | "bh_vat"
                      | "bo_tin"
                      | "br_cnpj"
                      | "br_cpf"
                      | "bs_tin"
                      | "by_tin"
                      | "ca_bn"
                      | "ca_gst_hst"
                      | "ca_pst_bc"
                      | "ca_pst_mb"
                      | "ca_pst_sk"
                      | "ca_qst"
                      | "cd_nif"
                      | "ch_uid"
                      | "ch_vat"
                      | "cl_tin"
                      | "cn_tin"
                      | "co_nit"
                      | "cr_tin"
                      | "de_stn"
                      | "do_rcn"
                      | "ec_ruc"
                      | "eg_tin"
                      | "es_cif"
                      | "eu_oss_vat"
                      | "eu_vat"
                      | "gb_vat"
                      | "ge_vat"
                      | "gn_nif"
                      | "hk_br"
                      | "hr_oib"
                      | "hu_tin"
                      | "id_npwp"
                      | "il_vat"
                      | "in_gst"
                      | "is_vat"
                      | "jp_cn"
                      | "jp_rn"
                      | "jp_trn"
                      | "ke_pin"
                      | "kh_tin"
                      | "kr_brn"
                      | "kz_bin"
                      | "li_uid"
                      | "li_vat"
                      | "ma_vat"
                      | "md_vat"
                      | "me_pib"
                      | "mk_vat"
                      | "mr_nif"
                      | "mx_rfc"
                      | "my_frp"
                      | "my_itn"
                      | "my_sst"
                      | "ng_tin"
                      | "no_vat"
                      | "no_voec"
                      | "np_pan"
                      | "nz_gst"
                      | "om_vat"
                      | "pe_ruc"
                      | "ph_tin"
                      | "ro_tin"
                      | "rs_pib"
                      | "ru_inn"
                      | "ru_kpp"
                      | "sa_vat"
                      | "sg_gst"
                      | "sg_uen"
                      | "si_tin"
                      | "sn_ninea"
                      | "sr_fin"
                      | "sv_nit"
                      | "th_vat"
                      | "tj_tin"
                      | "tr_tin"
                      | "tw_vat"
                      | "tz_vat"
                      | "ua_vat"
                      | "ug_tin"
                      | "us_ein"
                      | "uy_ruc"
                      | "uz_tin"
                      | "uz_vat"
                      | "ve_rif"
                      | "vn_tin"
                      | "za_vat"
                      | "zm_tin"
                      | "zw_tin"
                      | UnknownEnumStringValue
                    value: string
                  }[]
                | undefined
            }
          | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        invoice_items?:
          | {
              amount?: number | undefined
              currency?: string | undefined
              description?: string | undefined
              discountable?: boolean | undefined
              discounts?:
                | (
                    | {
                        coupon?: string | undefined
                        discount?: string | undefined
                        promotion_code?: string | undefined
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              invoiceitem?: string | undefined
              metadata?:
                | (
                    | {
                        [key: string]: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              period?:
                | {
                    end: number
                    start: number
                  }
                | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product: string
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_behavior?:
                | (
                    | "exclusive"
                    | "inclusive"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              tax_code?: (string | "" | UnknownEnumStringValue) | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
              unit_amount?: number | undefined
              unit_amount_decimal?: string | undefined
            }[]
          | undefined
        issuer?:
          | {
              account?: string | undefined
              type: "account" | "self" | UnknownEnumStringValue
            }
          | undefined
        on_behalf_of?: (string | "" | UnknownEnumStringValue) | undefined
        preview_mode?:
          | ("next" | "recurring" | UnknownEnumStringValue)
          | undefined
        schedule?: string | undefined
        schedule_details?:
          | {
              end_behavior?:
                | ("cancel" | "release" | UnknownEnumStringValue)
                | undefined
              phases?:
                | {
                    add_invoice_items?:
                      | {
                          discounts?:
                            | {
                                coupon?: string | undefined
                                discount?: string | undefined
                                promotion_code?: string | undefined
                              }[]
                            | undefined
                          price?: string | undefined
                          price_data?:
                            | {
                                currency: string
                                product: string
                                tax_behavior?:
                                  | (
                                      | "exclusive"
                                      | "inclusive"
                                      | "unspecified"
                                      | UnknownEnumStringValue
                                    )
                                  | undefined
                                unit_amount?: number | undefined
                                unit_amount_decimal?: string | undefined
                              }
                            | undefined
                          quantity?: number | undefined
                          tax_rates?:
                            | (string[] | "" | UnknownEnumStringValue)
                            | undefined
                        }[]
                      | undefined
                    application_fee_percent?: number | undefined
                    automatic_tax?:
                      | {
                          enabled: boolean
                          liability?:
                            | {
                                account?: string | undefined
                                type:
                                  | "account"
                                  | "self"
                                  | UnknownEnumStringValue
                              }
                            | undefined
                        }
                      | undefined
                    billing_cycle_anchor?:
                      | ("automatic" | "phase_start" | UnknownEnumStringValue)
                      | undefined
                    collection_method?:
                      | (
                          | "charge_automatically"
                          | "send_invoice"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    default_payment_method?: string | undefined
                    default_tax_rates?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                    description?:
                      | (string | "" | UnknownEnumStringValue)
                      | undefined
                    discounts?:
                      | (
                          | {
                              coupon?: string | undefined
                              discount?: string | undefined
                              promotion_code?: string | undefined
                            }[]
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    end_date?:
                      | (number | "now" | UnknownEnumStringValue)
                      | undefined
                    invoice_settings?:
                      | {
                          account_tax_ids?:
                            | (string[] | "" | UnknownEnumStringValue)
                            | undefined
                          days_until_due?: number | undefined
                          issuer?:
                            | {
                                account?: string | undefined
                                type:
                                  | "account"
                                  | "self"
                                  | UnknownEnumStringValue
                              }
                            | undefined
                        }
                      | undefined
                    items: {
                      discounts?:
                        | (
                            | {
                                coupon?: string | undefined
                                discount?: string | undefined
                                promotion_code?: string | undefined
                              }[]
                            | ""
                            | UnknownEnumStringValue
                          )
                        | undefined
                      metadata?:
                        | {
                            [key: string]: string | undefined
                          }
                        | undefined
                      price?: string | undefined
                      price_data?:
                        | {
                            currency: string
                            product: string
                            recurring: {
                              interval:
                                | "day"
                                | "month"
                                | "week"
                                | "year"
                                | UnknownEnumStringValue
                              interval_count?: number | undefined
                            }
                            tax_behavior?:
                              | (
                                  | "exclusive"
                                  | "inclusive"
                                  | "unspecified"
                                  | UnknownEnumStringValue
                                )
                              | undefined
                            unit_amount?: number | undefined
                            unit_amount_decimal?: string | undefined
                          }
                        | undefined
                      quantity?: number | undefined
                      tax_rates?:
                        | (string[] | "" | UnknownEnumStringValue)
                        | undefined
                    }[]
                    iterations?: number | undefined
                    metadata?:
                      | {
                          [key: string]: string | undefined
                        }
                      | undefined
                    on_behalf_of?: string | undefined
                    proration_behavior?:
                      | (
                          | "always_invoice"
                          | "create_prorations"
                          | "none"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    start_date?:
                      | (number | "now" | UnknownEnumStringValue)
                      | undefined
                    transfer_data?:
                      | {
                          amount_percent?: number | undefined
                          destination: string
                        }
                      | undefined
                    trial?: boolean | undefined
                    trial_end?:
                      | (number | "now" | UnknownEnumStringValue)
                      | undefined
                  }[]
                | undefined
              proration_behavior?:
                | (
                    | "always_invoice"
                    | "create_prorations"
                    | "none"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        subscription?: string | undefined
        subscription_details?:
          | {
              billing_cycle_anchor?:
                | ("now" | "unchanged" | UnknownEnumStringValue | number)
                | undefined
              cancel_at?: (number | "" | UnknownEnumStringValue) | undefined
              cancel_at_period_end?: boolean | undefined
              cancel_now?: boolean | undefined
              default_tax_rates?:
                | (string[] | "" | UnknownEnumStringValue)
                | undefined
              items?:
                | {
                    clear_usage?: boolean | undefined
                    deleted?: boolean | undefined
                    discounts?:
                      | (
                          | {
                              coupon?: string | undefined
                              discount?: string | undefined
                              promotion_code?: string | undefined
                            }[]
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    id?: string | undefined
                    metadata?:
                      | (
                          | {
                              [key: string]: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    price?: string | undefined
                    price_data?:
                      | {
                          currency: string
                          product: string
                          recurring: {
                            interval:
                              | "day"
                              | "month"
                              | "week"
                              | "year"
                              | UnknownEnumStringValue
                            interval_count?: number | undefined
                          }
                          tax_behavior?:
                            | (
                                | "exclusive"
                                | "inclusive"
                                | "unspecified"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          unit_amount?: number | undefined
                          unit_amount_decimal?: string | undefined
                        }
                      | undefined
                    quantity?: number | undefined
                    tax_rates?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                  }[]
                | undefined
              proration_behavior?:
                | (
                    | "always_invoice"
                    | "create_prorations"
                    | "none"
                    | UnknownEnumStringValue
                  )
                | undefined
              proration_date?: number | undefined
              resume_at?: ("now" | UnknownEnumStringValue) | undefined
              start_date?: number | undefined
              trial_end?: ("now" | UnknownEnumStringValue | number) | undefined
            }
          | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices/create_preview`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getInvoicesSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_invoice[]
      has_more: boolean
      next_page?: (string | null) | undefined
      object: "search_result" | UnknownEnumStringValue
      total_count?: number | undefined
      url: string
    }>
  > {
    const url = `/v1/invoices/search`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteInvoicesInvoice(
    p: {
      invoice: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_invoice>> {
    const url = `/v1/invoices/${p["invoice"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getInvoicesInvoice(
    p: {
      expand?: string[]
      invoice: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices/${p["invoice"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoicesInvoice(
    p: {
      invoice: string
      requestBody?: {
        account_tax_ids?: (string[] | "" | UnknownEnumStringValue) | undefined
        application_fee_amount?: number | undefined
        auto_advance?: boolean | undefined
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        automatically_finalizes_at?: number | undefined
        collection_method?:
          | ("charge_automatically" | "send_invoice" | UnknownEnumStringValue)
          | undefined
        custom_fields?:
          | (
              | {
                  name: string
                  value: string
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        days_until_due?: number | undefined
        default_payment_method?: string | undefined
        default_source?: (string | "" | UnknownEnumStringValue) | undefined
        default_tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        description?: string | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        due_date?: number | undefined
        effective_at?: (number | "" | UnknownEnumStringValue) | undefined
        expand?: string[] | undefined
        footer?: string | undefined
        issuer?:
          | {
              account?: string | undefined
              type: "account" | "self" | UnknownEnumStringValue
            }
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        number?: (string | "" | UnknownEnumStringValue) | undefined
        on_behalf_of?: (string | "" | UnknownEnumStringValue) | undefined
        payment_settings?:
          | {
              default_mandate?:
                | (string | "" | UnknownEnumStringValue)
                | undefined
              payment_method_options?:
                | {
                    acss_debit?:
                      | (
                          | {
                              mandate_options?:
                                | {
                                    transaction_type?:
                                      | (
                                          | "business"
                                          | "personal"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    bancontact?:
                      | (
                          | {
                              preferred_language?:
                                | (
                                    | "de"
                                    | "en"
                                    | "fr"
                                    | "nl"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    card?:
                      | (
                          | {
                              installments?:
                                | {
                                    enabled?: boolean | undefined
                                    plan?:
                                      | (
                                          | {
                                              count?: number | undefined
                                              interval?:
                                                | (
                                                    | "month"
                                                    | UnknownEnumStringValue
                                                  )
                                                | undefined
                                              type:
                                                | "fixed_count"
                                                | UnknownEnumStringValue
                                            }
                                          | ""
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                  }
                                | undefined
                              request_three_d_secure?:
                                | (
                                    | "any"
                                    | "automatic"
                                    | "challenge"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    customer_balance?:
                      | (
                          | {
                              bank_transfer?:
                                | {
                                    eu_bank_transfer?:
                                      | {
                                          country: string
                                        }
                                      | undefined
                                    type?: string | undefined
                                  }
                                | undefined
                              funding_type?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    konbini?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    sepa_debit?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    us_bank_account?:
                      | (
                          | {
                              financial_connections?:
                                | {
                                    filters?:
                                      | {
                                          account_subcategories?:
                                            | (
                                                | "checking"
                                                | "savings"
                                                | UnknownEnumStringValue
                                              )[]
                                            | undefined
                                        }
                                      | undefined
                                    permissions?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "payment_method"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                    prefetch?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              payment_method_types?:
                | (
                    | (
                        | "ach_credit_transfer"
                        | "ach_debit"
                        | "acss_debit"
                        | "amazon_pay"
                        | "au_becs_debit"
                        | "bacs_debit"
                        | "bancontact"
                        | "boleto"
                        | "card"
                        | "cashapp"
                        | "customer_balance"
                        | "eps"
                        | "fpx"
                        | "giropay"
                        | "grabpay"
                        | "ideal"
                        | "jp_credit_transfer"
                        | "kakao_pay"
                        | "klarna"
                        | "konbini"
                        | "kr_card"
                        | "link"
                        | "multibanco"
                        | "naver_pay"
                        | "nz_bank_account"
                        | "p24"
                        | "payco"
                        | "paynow"
                        | "paypal"
                        | "promptpay"
                        | "revolut_pay"
                        | "sepa_credit_transfer"
                        | "sepa_debit"
                        | "sofort"
                        | "swish"
                        | "us_bank_account"
                        | "wechat_pay"
                        | UnknownEnumStringValue
                      )[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        rendering?:
          | {
              amount_tax_display?:
                | (
                    | ""
                    | "exclude_tax"
                    | "include_inclusive_tax"
                    | UnknownEnumStringValue
                  )
                | undefined
              pdf?:
                | {
                    page_size?:
                      | ("a4" | "auto" | "letter" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              template?: string | undefined
              template_version?:
                | (number | "" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        shipping_cost?:
          | (
              | {
                  shipping_rate?: string | undefined
                  shipping_rate_data?:
                    | {
                        delivery_estimate?:
                          | {
                              maximum?:
                                | {
                                    unit:
                                      | "business_day"
                                      | "day"
                                      | "hour"
                                      | "month"
                                      | "week"
                                      | UnknownEnumStringValue
                                    value: number
                                  }
                                | undefined
                              minimum?:
                                | {
                                    unit:
                                      | "business_day"
                                      | "day"
                                      | "hour"
                                      | "month"
                                      | "week"
                                      | UnknownEnumStringValue
                                    value: number
                                  }
                                | undefined
                            }
                          | undefined
                        display_name: string
                        fixed_amount?:
                          | {
                              amount: number
                              currency: string
                              currency_options?:
                                | {
                                    [key: string]:
                                      | {
                                          amount: number
                                          tax_behavior?:
                                            | (
                                                | "exclusive"
                                                | "inclusive"
                                                | "unspecified"
                                                | UnknownEnumStringValue
                                              )
                                            | undefined
                                        }
                                      | undefined
                                  }
                                | undefined
                            }
                          | undefined
                        metadata?:
                          | {
                              [key: string]: string | undefined
                            }
                          | undefined
                        tax_behavior?:
                          | (
                              | "exclusive"
                              | "inclusive"
                              | "unspecified"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        tax_code?: string | undefined
                        type?:
                          | ("fixed_amount" | UnknownEnumStringValue)
                          | undefined
                      }
                    | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        shipping_details?:
          | (
              | {
                  address: {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                  name: string
                  phone?: (string | "" | UnknownEnumStringValue) | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        statement_descriptor?: string | undefined
        transfer_data?:
          | (
              | {
                  amount?: number | undefined
                  destination: string
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices/${p["invoice"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoicesInvoiceAddLines(
    p: {
      invoice: string
      requestBody: {
        expand?: string[] | undefined
        invoice_metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        lines: {
          amount?: number | undefined
          description?: string | undefined
          discountable?: boolean | undefined
          discounts?:
            | (
                | {
                    coupon?: string | undefined
                    discount?: string | undefined
                    promotion_code?: string | undefined
                  }[]
                | ""
                | UnknownEnumStringValue
              )
            | undefined
          invoice_item?: string | undefined
          metadata?:
            | (
                | {
                    [key: string]: string | undefined
                  }
                | ""
                | UnknownEnumStringValue
              )
            | undefined
          period?:
            | {
                end: number
                start: number
              }
            | undefined
          price_data?:
            | {
                currency: string
                product?: string | undefined
                product_data?:
                  | {
                      description?: string | undefined
                      images?: string[] | undefined
                      metadata?:
                        | {
                            [key: string]: string | undefined
                          }
                        | undefined
                      name: string
                      tax_code?: string | undefined
                    }
                  | undefined
                tax_behavior?:
                  | (
                      | "exclusive"
                      | "inclusive"
                      | "unspecified"
                      | UnknownEnumStringValue
                    )
                  | undefined
                unit_amount?: number | undefined
                unit_amount_decimal?: string | undefined
              }
            | undefined
          pricing?:
            | {
                price?: string | undefined
              }
            | undefined
          quantity?: number | undefined
          tax_amounts?:
            | (
                | {
                    amount: number
                    tax_rate_data: {
                      country?: string | undefined
                      description?: string | undefined
                      display_name: string
                      inclusive: boolean
                      jurisdiction?: string | undefined
                      jurisdiction_level?:
                        | (
                            | "city"
                            | "country"
                            | "county"
                            | "district"
                            | "multiple"
                            | "state"
                            | UnknownEnumStringValue
                          )
                        | undefined
                      percentage: number
                      state?: string | undefined
                      tax_type?:
                        | (
                            | "amusement_tax"
                            | "communications_tax"
                            | "gst"
                            | "hst"
                            | "igst"
                            | "jct"
                            | "lease_tax"
                            | "pst"
                            | "qst"
                            | "retail_delivery_fee"
                            | "rst"
                            | "sales_tax"
                            | "service_tax"
                            | "vat"
                            | UnknownEnumStringValue
                          )
                        | undefined
                    }
                    taxability_reason?:
                      | (
                          | "customer_exempt"
                          | "not_collecting"
                          | "not_subject_to_tax"
                          | "not_supported"
                          | "portion_product_exempt"
                          | "portion_reduced_rated"
                          | "portion_standard_rated"
                          | "product_exempt"
                          | "product_exempt_holiday"
                          | "proportionally_rated"
                          | "reduced_rated"
                          | "reverse_charge"
                          | "standard_rated"
                          | "taxable_basis_reduced"
                          | "zero_rated"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    taxable_amount: number
                  }[]
                | ""
                | UnknownEnumStringValue
              )
            | undefined
          tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        }[]
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices/${p["invoice"]}/add_lines`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoicesInvoiceFinalize(
    p: {
      invoice: string
      requestBody?: {
        auto_advance?: boolean | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices/${p["invoice"]}/finalize`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getInvoicesInvoiceLines(
    p: {
      endingBefore?: string
      expand?: string[]
      invoice: string
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_line_item[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/invoices/${p["invoice"]}/lines`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoicesInvoiceLinesLineItemId(
    p: {
      invoice: string
      lineItemId: string
      requestBody?: {
        amount?: number | undefined
        description?: string | undefined
        discountable?: boolean | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        period?:
          | {
              end: number
              start: number
            }
          | undefined
        price_data?:
          | {
              currency: string
              product?: string | undefined
              product_data?:
                | {
                    description?: string | undefined
                    images?: string[] | undefined
                    metadata?:
                      | {
                          [key: string]: string | undefined
                        }
                      | undefined
                    name: string
                    tax_code?: string | undefined
                  }
                | undefined
              tax_behavior?:
                | (
                    | "exclusive"
                    | "inclusive"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              unit_amount?: number | undefined
              unit_amount_decimal?: string | undefined
            }
          | undefined
        pricing?:
          | {
              price?: string | undefined
            }
          | undefined
        quantity?: number | undefined
        tax_amounts?:
          | (
              | {
                  amount: number
                  tax_rate_data: {
                    country?: string | undefined
                    description?: string | undefined
                    display_name: string
                    inclusive: boolean
                    jurisdiction?: string | undefined
                    jurisdiction_level?:
                      | (
                          | "city"
                          | "country"
                          | "county"
                          | "district"
                          | "multiple"
                          | "state"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    percentage: number
                    state?: string | undefined
                    tax_type?:
                      | (
                          | "amusement_tax"
                          | "communications_tax"
                          | "gst"
                          | "hst"
                          | "igst"
                          | "jct"
                          | "lease_tax"
                          | "pst"
                          | "qst"
                          | "retail_delivery_fee"
                          | "rst"
                          | "sales_tax"
                          | "service_tax"
                          | "vat"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                  taxability_reason?:
                    | (
                        | "customer_exempt"
                        | "not_collecting"
                        | "not_subject_to_tax"
                        | "not_supported"
                        | "portion_product_exempt"
                        | "portion_reduced_rated"
                        | "portion_standard_rated"
                        | "product_exempt"
                        | "product_exempt_holiday"
                        | "proportionally_rated"
                        | "reduced_rated"
                        | "reverse_charge"
                        | "standard_rated"
                        | "taxable_basis_reduced"
                        | "zero_rated"
                        | UnknownEnumStringValue
                      )
                    | undefined
                  taxable_amount: number
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_line_item>> {
    const url = `/v1/invoices/${p["invoice"]}/lines/${p["lineItemId"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoicesInvoiceMarkUncollectible(
    p: {
      invoice: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices/${p["invoice"]}/mark_uncollectible`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoicesInvoicePay(
    p: {
      invoice: string
      requestBody?: {
        expand?: string[] | undefined
        forgive?: boolean | undefined
        mandate?: (string | "" | UnknownEnumStringValue) | undefined
        off_session?: boolean | undefined
        paid_out_of_band?: boolean | undefined
        payment_method?: string | undefined
        source?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices/${p["invoice"]}/pay`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoicesInvoiceRemoveLines(
    p: {
      invoice: string
      requestBody: {
        expand?: string[] | undefined
        invoice_metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        lines: {
          behavior: "delete" | "unassign" | UnknownEnumStringValue
          id: string
        }[]
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices/${p["invoice"]}/remove_lines`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoicesInvoiceSend(
    p: {
      invoice: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices/${p["invoice"]}/send`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoicesInvoiceUpdateLines(
    p: {
      invoice: string
      requestBody: {
        expand?: string[] | undefined
        invoice_metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        lines: {
          amount?: number | undefined
          description?: string | undefined
          discountable?: boolean | undefined
          discounts?:
            | (
                | {
                    coupon?: string | undefined
                    discount?: string | undefined
                    promotion_code?: string | undefined
                  }[]
                | ""
                | UnknownEnumStringValue
              )
            | undefined
          id: string
          metadata?:
            | (
                | {
                    [key: string]: string | undefined
                  }
                | ""
                | UnknownEnumStringValue
              )
            | undefined
          period?:
            | {
                end: number
                start: number
              }
            | undefined
          price_data?:
            | {
                currency: string
                product?: string | undefined
                product_data?:
                  | {
                      description?: string | undefined
                      images?: string[] | undefined
                      metadata?:
                        | {
                            [key: string]: string | undefined
                          }
                        | undefined
                      name: string
                      tax_code?: string | undefined
                    }
                  | undefined
                tax_behavior?:
                  | (
                      | "exclusive"
                      | "inclusive"
                      | "unspecified"
                      | UnknownEnumStringValue
                    )
                  | undefined
                unit_amount?: number | undefined
                unit_amount_decimal?: string | undefined
              }
            | undefined
          pricing?:
            | {
                price?: string | undefined
              }
            | undefined
          quantity?: number | undefined
          tax_amounts?:
            | (
                | {
                    amount: number
                    tax_rate_data: {
                      country?: string | undefined
                      description?: string | undefined
                      display_name: string
                      inclusive: boolean
                      jurisdiction?: string | undefined
                      jurisdiction_level?:
                        | (
                            | "city"
                            | "country"
                            | "county"
                            | "district"
                            | "multiple"
                            | "state"
                            | UnknownEnumStringValue
                          )
                        | undefined
                      percentage: number
                      state?: string | undefined
                      tax_type?:
                        | (
                            | "amusement_tax"
                            | "communications_tax"
                            | "gst"
                            | "hst"
                            | "igst"
                            | "jct"
                            | "lease_tax"
                            | "pst"
                            | "qst"
                            | "retail_delivery_fee"
                            | "rst"
                            | "sales_tax"
                            | "service_tax"
                            | "vat"
                            | UnknownEnumStringValue
                          )
                        | undefined
                    }
                    taxability_reason?:
                      | (
                          | "customer_exempt"
                          | "not_collecting"
                          | "not_subject_to_tax"
                          | "not_supported"
                          | "portion_product_exempt"
                          | "portion_reduced_rated"
                          | "portion_standard_rated"
                          | "product_exempt"
                          | "product_exempt_holiday"
                          | "proportionally_rated"
                          | "reduced_rated"
                          | "reverse_charge"
                          | "standard_rated"
                          | "taxable_basis_reduced"
                          | "zero_rated"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    taxable_amount: number
                  }[]
                | ""
                | UnknownEnumStringValue
              )
            | undefined
          tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        }[]
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices/${p["invoice"]}/update_lines`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postInvoicesInvoiceVoid(
    p: {
      invoice: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_invoice>> {
    const url = `/v1/invoices/${p["invoice"]}/void`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingAuthorizations(
    p: {
      card?: string
      cardholder?: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "closed"
        | "expired"
        | "pending"
        | "reversed"
        | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_issuing_authorization[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/issuing/authorizations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      card: p["card"],
      cardholder: p["cardholder"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingAuthorizationsAuthorization(
    p: {
      authorization: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_authorization>> {
    const url = `/v1/issuing/authorizations/${p["authorization"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingAuthorizationsAuthorization(
    p: {
      authorization: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_authorization>> {
    const url = `/v1/issuing/authorizations/${p["authorization"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingAuthorizationsAuthorizationApprove(
    p: {
      authorization: string
      requestBody?: {
        amount?: number | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_authorization>> {
    const url = `/v1/issuing/authorizations/${p["authorization"]}/approve`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingAuthorizationsAuthorizationDecline(
    p: {
      authorization: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_authorization>> {
    const url = `/v1/issuing/authorizations/${p["authorization"]}/decline`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingCardholders(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      email?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      phoneNumber?: string
      startingAfter?: string
      status?: "active" | "blocked" | "inactive" | UnknownEnumStringValue
      type?: "company" | "individual" | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_issuing_cardholder[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/issuing/cardholders`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      email: p["email"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      phone_number: p["phoneNumber"],
      starting_after: p["startingAfter"],
      status: p["status"],
      type: p["type"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingCardholders(
    p: {
      requestBody: {
        billing: {
          address: {
            city: string
            country: string
            line1: string
            line2?: string | undefined
            postal_code: string
            state?: string | undefined
          }
        }
        company?:
          | {
              tax_id?: string | undefined
            }
          | undefined
        email?: string | undefined
        expand?: string[] | undefined
        individual?:
          | {
              card_issuing?:
                | {
                    user_terms_acceptance?:
                      | {
                          date?: number | undefined
                          ip?: string | undefined
                          user_agent?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              dob?:
                | {
                    day: number
                    month: number
                    year: number
                  }
                | undefined
              first_name?: string | undefined
              last_name?: string | undefined
              verification?:
                | {
                    document?:
                      | {
                          back?: string | undefined
                          front?: string | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        name: string
        phone_number?: string | undefined
        preferred_locales?:
          | ("de" | "en" | "es" | "fr" | "it" | UnknownEnumStringValue)[]
          | undefined
        spending_controls?:
          | {
              allowed_categories?:
                | (
                    | "ac_refrigeration_repair"
                    | "accounting_bookkeeping_services"
                    | "advertising_services"
                    | "agricultural_cooperative"
                    | "airlines_air_carriers"
                    | "airports_flying_fields"
                    | "ambulance_services"
                    | "amusement_parks_carnivals"
                    | "antique_reproductions"
                    | "antique_shops"
                    | "aquariums"
                    | "architectural_surveying_services"
                    | "art_dealers_and_galleries"
                    | "artists_supply_and_craft_shops"
                    | "auto_and_home_supply_stores"
                    | "auto_body_repair_shops"
                    | "auto_paint_shops"
                    | "auto_service_shops"
                    | "automated_cash_disburse"
                    | "automated_fuel_dispensers"
                    | "automobile_associations"
                    | "automotive_parts_and_accessories_stores"
                    | "automotive_tire_stores"
                    | "bail_and_bond_payments"
                    | "bakeries"
                    | "bands_orchestras"
                    | "barber_and_beauty_shops"
                    | "betting_casino_gambling"
                    | "bicycle_shops"
                    | "billiard_pool_establishments"
                    | "boat_dealers"
                    | "boat_rentals_and_leases"
                    | "book_stores"
                    | "books_periodicals_and_newspapers"
                    | "bowling_alleys"
                    | "bus_lines"
                    | "business_secretarial_schools"
                    | "buying_shopping_services"
                    | "cable_satellite_and_other_pay_television_and_radio"
                    | "camera_and_photographic_supply_stores"
                    | "candy_nut_and_confectionery_stores"
                    | "car_and_truck_dealers_new_used"
                    | "car_and_truck_dealers_used_only"
                    | "car_rental_agencies"
                    | "car_washes"
                    | "carpentry_services"
                    | "carpet_upholstery_cleaning"
                    | "caterers"
                    | "charitable_and_social_service_organizations_fundraising"
                    | "chemicals_and_allied_products"
                    | "child_care_services"
                    | "childrens_and_infants_wear_stores"
                    | "chiropodists_podiatrists"
                    | "chiropractors"
                    | "cigar_stores_and_stands"
                    | "civic_social_fraternal_associations"
                    | "cleaning_and_maintenance"
                    | "clothing_rental"
                    | "colleges_universities"
                    | "commercial_equipment"
                    | "commercial_footwear"
                    | "commercial_photography_art_and_graphics"
                    | "commuter_transport_and_ferries"
                    | "computer_network_services"
                    | "computer_programming"
                    | "computer_repair"
                    | "computer_software_stores"
                    | "computers_peripherals_and_software"
                    | "concrete_work_services"
                    | "construction_materials"
                    | "consulting_public_relations"
                    | "correspondence_schools"
                    | "cosmetic_stores"
                    | "counseling_services"
                    | "country_clubs"
                    | "courier_services"
                    | "court_costs"
                    | "credit_reporting_agencies"
                    | "cruise_lines"
                    | "dairy_products_stores"
                    | "dance_hall_studios_schools"
                    | "dating_escort_services"
                    | "dentists_orthodontists"
                    | "department_stores"
                    | "detective_agencies"
                    | "digital_goods_applications"
                    | "digital_goods_games"
                    | "digital_goods_large_volume"
                    | "digital_goods_media"
                    | "direct_marketing_catalog_merchant"
                    | "direct_marketing_combination_catalog_and_retail_merchant"
                    | "direct_marketing_inbound_telemarketing"
                    | "direct_marketing_insurance_services"
                    | "direct_marketing_other"
                    | "direct_marketing_outbound_telemarketing"
                    | "direct_marketing_subscription"
                    | "direct_marketing_travel"
                    | "discount_stores"
                    | "doctors"
                    | "door_to_door_sales"
                    | "drapery_window_covering_and_upholstery_stores"
                    | "drinking_places"
                    | "drug_stores_and_pharmacies"
                    | "drugs_drug_proprietaries_and_druggist_sundries"
                    | "dry_cleaners"
                    | "durable_goods"
                    | "duty_free_stores"
                    | "eating_places_restaurants"
                    | "educational_services"
                    | "electric_razor_stores"
                    | "electric_vehicle_charging"
                    | "electrical_parts_and_equipment"
                    | "electrical_services"
                    | "electronics_repair_shops"
                    | "electronics_stores"
                    | "elementary_secondary_schools"
                    | "emergency_services_gcas_visa_use_only"
                    | "employment_temp_agencies"
                    | "equipment_rental"
                    | "exterminating_services"
                    | "family_clothing_stores"
                    | "fast_food_restaurants"
                    | "financial_institutions"
                    | "fines_government_administrative_entities"
                    | "fireplace_fireplace_screens_and_accessories_stores"
                    | "floor_covering_stores"
                    | "florists"
                    | "florists_supplies_nursery_stock_and_flowers"
                    | "freezer_and_locker_meat_provisioners"
                    | "fuel_dealers_non_automotive"
                    | "funeral_services_crematories"
                    | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    | "furniture_repair_refinishing"
                    | "furriers_and_fur_shops"
                    | "general_services"
                    | "gift_card_novelty_and_souvenir_shops"
                    | "glass_paint_and_wallpaper_stores"
                    | "glassware_crystal_stores"
                    | "golf_courses_public"
                    | "government_licensed_horse_dog_racing_us_region_only"
                    | "government_licensed_online_casions_online_gambling_us_region_only"
                    | "government_owned_lotteries_non_us_region"
                    | "government_owned_lotteries_us_region_only"
                    | "government_services"
                    | "grocery_stores_supermarkets"
                    | "hardware_equipment_and_supplies"
                    | "hardware_stores"
                    | "health_and_beauty_spas"
                    | "hearing_aids_sales_and_supplies"
                    | "heating_plumbing_a_c"
                    | "hobby_toy_and_game_shops"
                    | "home_supply_warehouse_stores"
                    | "hospitals"
                    | "hotels_motels_and_resorts"
                    | "household_appliance_stores"
                    | "industrial_supplies"
                    | "information_retrieval_services"
                    | "insurance_default"
                    | "insurance_underwriting_premiums"
                    | "intra_company_purchases"
                    | "jewelry_stores_watches_clocks_and_silverware_stores"
                    | "landscaping_services"
                    | "laundries"
                    | "laundry_cleaning_services"
                    | "legal_services_attorneys"
                    | "luggage_and_leather_goods_stores"
                    | "lumber_building_materials_stores"
                    | "manual_cash_disburse"
                    | "marinas_service_and_supplies"
                    | "marketplaces"
                    | "masonry_stonework_and_plaster"
                    | "massage_parlors"
                    | "medical_and_dental_labs"
                    | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    | "medical_services"
                    | "membership_organizations"
                    | "mens_and_boys_clothing_and_accessories_stores"
                    | "mens_womens_clothing_stores"
                    | "metal_service_centers"
                    | "miscellaneous"
                    | "miscellaneous_apparel_and_accessory_shops"
                    | "miscellaneous_auto_dealers"
                    | "miscellaneous_business_services"
                    | "miscellaneous_food_stores"
                    | "miscellaneous_general_merchandise"
                    | "miscellaneous_general_services"
                    | "miscellaneous_home_furnishing_specialty_stores"
                    | "miscellaneous_publishing_and_printing"
                    | "miscellaneous_recreation_services"
                    | "miscellaneous_repair_shops"
                    | "miscellaneous_specialty_retail"
                    | "mobile_home_dealers"
                    | "motion_picture_theaters"
                    | "motor_freight_carriers_and_trucking"
                    | "motor_homes_dealers"
                    | "motor_vehicle_supplies_and_new_parts"
                    | "motorcycle_shops_and_dealers"
                    | "motorcycle_shops_dealers"
                    | "music_stores_musical_instruments_pianos_and_sheet_music"
                    | "news_dealers_and_newsstands"
                    | "non_fi_money_orders"
                    | "non_fi_stored_value_card_purchase_load"
                    | "nondurable_goods"
                    | "nurseries_lawn_and_garden_supply_stores"
                    | "nursing_personal_care"
                    | "office_and_commercial_furniture"
                    | "opticians_eyeglasses"
                    | "optometrists_ophthalmologist"
                    | "orthopedic_goods_prosthetic_devices"
                    | "osteopaths"
                    | "package_stores_beer_wine_and_liquor"
                    | "paints_varnishes_and_supplies"
                    | "parking_lots_garages"
                    | "passenger_railways"
                    | "pawn_shops"
                    | "pet_shops_pet_food_and_supplies"
                    | "petroleum_and_petroleum_products"
                    | "photo_developing"
                    | "photographic_photocopy_microfilm_equipment_and_supplies"
                    | "photographic_studios"
                    | "picture_video_production"
                    | "piece_goods_notions_and_other_dry_goods"
                    | "plumbing_heating_equipment_and_supplies"
                    | "political_organizations"
                    | "postal_services_government_only"
                    | "precious_stones_and_metals_watches_and_jewelry"
                    | "professional_services"
                    | "public_warehousing_and_storage"
                    | "quick_copy_repro_and_blueprint"
                    | "railroads"
                    | "real_estate_agents_and_managers_rentals"
                    | "record_stores"
                    | "recreational_vehicle_rentals"
                    | "religious_goods_stores"
                    | "religious_organizations"
                    | "roofing_siding_sheet_metal"
                    | "secretarial_support_services"
                    | "security_brokers_dealers"
                    | "service_stations"
                    | "sewing_needlework_fabric_and_piece_goods_stores"
                    | "shoe_repair_hat_cleaning"
                    | "shoe_stores"
                    | "small_appliance_repair"
                    | "snowmobile_dealers"
                    | "special_trade_services"
                    | "specialty_cleaning"
                    | "sporting_goods_stores"
                    | "sporting_recreation_camps"
                    | "sports_and_riding_apparel_stores"
                    | "sports_clubs_fields"
                    | "stamp_and_coin_stores"
                    | "stationary_office_supplies_printing_and_writing_paper"
                    | "stationery_stores_office_and_school_supply_stores"
                    | "swimming_pools_sales"
                    | "t_ui_travel_germany"
                    | "tailors_alterations"
                    | "tax_payments_government_agencies"
                    | "tax_preparation_services"
                    | "taxicabs_limousines"
                    | "telecommunication_equipment_and_telephone_sales"
                    | "telecommunication_services"
                    | "telegraph_services"
                    | "tent_and_awning_shops"
                    | "testing_laboratories"
                    | "theatrical_ticket_agencies"
                    | "timeshares"
                    | "tire_retreading_and_repair"
                    | "tolls_bridge_fees"
                    | "tourist_attractions_and_exhibits"
                    | "towing_services"
                    | "trailer_parks_campgrounds"
                    | "transportation_services"
                    | "travel_agencies_tour_operators"
                    | "truck_stop_iteration"
                    | "truck_utility_trailer_rentals"
                    | "typesetting_plate_making_and_related_services"
                    | "typewriter_stores"
                    | "u_s_federal_government_agencies_or_departments"
                    | "uniforms_commercial_clothing"
                    | "used_merchandise_and_secondhand_stores"
                    | "utilities"
                    | "variety_stores"
                    | "veterinary_services"
                    | "video_amusement_game_supplies"
                    | "video_game_arcades"
                    | "video_tape_rental_stores"
                    | "vocational_trade_schools"
                    | "watch_jewelry_repair"
                    | "welding_repair"
                    | "wholesale_clubs"
                    | "wig_and_toupee_stores"
                    | "wires_money_orders"
                    | "womens_accessory_and_specialty_shops"
                    | "womens_ready_to_wear_stores"
                    | "wrecking_and_salvage_yards"
                    | UnknownEnumStringValue
                  )[]
                | undefined
              allowed_merchant_countries?: string[] | undefined
              blocked_categories?:
                | (
                    | "ac_refrigeration_repair"
                    | "accounting_bookkeeping_services"
                    | "advertising_services"
                    | "agricultural_cooperative"
                    | "airlines_air_carriers"
                    | "airports_flying_fields"
                    | "ambulance_services"
                    | "amusement_parks_carnivals"
                    | "antique_reproductions"
                    | "antique_shops"
                    | "aquariums"
                    | "architectural_surveying_services"
                    | "art_dealers_and_galleries"
                    | "artists_supply_and_craft_shops"
                    | "auto_and_home_supply_stores"
                    | "auto_body_repair_shops"
                    | "auto_paint_shops"
                    | "auto_service_shops"
                    | "automated_cash_disburse"
                    | "automated_fuel_dispensers"
                    | "automobile_associations"
                    | "automotive_parts_and_accessories_stores"
                    | "automotive_tire_stores"
                    | "bail_and_bond_payments"
                    | "bakeries"
                    | "bands_orchestras"
                    | "barber_and_beauty_shops"
                    | "betting_casino_gambling"
                    | "bicycle_shops"
                    | "billiard_pool_establishments"
                    | "boat_dealers"
                    | "boat_rentals_and_leases"
                    | "book_stores"
                    | "books_periodicals_and_newspapers"
                    | "bowling_alleys"
                    | "bus_lines"
                    | "business_secretarial_schools"
                    | "buying_shopping_services"
                    | "cable_satellite_and_other_pay_television_and_radio"
                    | "camera_and_photographic_supply_stores"
                    | "candy_nut_and_confectionery_stores"
                    | "car_and_truck_dealers_new_used"
                    | "car_and_truck_dealers_used_only"
                    | "car_rental_agencies"
                    | "car_washes"
                    | "carpentry_services"
                    | "carpet_upholstery_cleaning"
                    | "caterers"
                    | "charitable_and_social_service_organizations_fundraising"
                    | "chemicals_and_allied_products"
                    | "child_care_services"
                    | "childrens_and_infants_wear_stores"
                    | "chiropodists_podiatrists"
                    | "chiropractors"
                    | "cigar_stores_and_stands"
                    | "civic_social_fraternal_associations"
                    | "cleaning_and_maintenance"
                    | "clothing_rental"
                    | "colleges_universities"
                    | "commercial_equipment"
                    | "commercial_footwear"
                    | "commercial_photography_art_and_graphics"
                    | "commuter_transport_and_ferries"
                    | "computer_network_services"
                    | "computer_programming"
                    | "computer_repair"
                    | "computer_software_stores"
                    | "computers_peripherals_and_software"
                    | "concrete_work_services"
                    | "construction_materials"
                    | "consulting_public_relations"
                    | "correspondence_schools"
                    | "cosmetic_stores"
                    | "counseling_services"
                    | "country_clubs"
                    | "courier_services"
                    | "court_costs"
                    | "credit_reporting_agencies"
                    | "cruise_lines"
                    | "dairy_products_stores"
                    | "dance_hall_studios_schools"
                    | "dating_escort_services"
                    | "dentists_orthodontists"
                    | "department_stores"
                    | "detective_agencies"
                    | "digital_goods_applications"
                    | "digital_goods_games"
                    | "digital_goods_large_volume"
                    | "digital_goods_media"
                    | "direct_marketing_catalog_merchant"
                    | "direct_marketing_combination_catalog_and_retail_merchant"
                    | "direct_marketing_inbound_telemarketing"
                    | "direct_marketing_insurance_services"
                    | "direct_marketing_other"
                    | "direct_marketing_outbound_telemarketing"
                    | "direct_marketing_subscription"
                    | "direct_marketing_travel"
                    | "discount_stores"
                    | "doctors"
                    | "door_to_door_sales"
                    | "drapery_window_covering_and_upholstery_stores"
                    | "drinking_places"
                    | "drug_stores_and_pharmacies"
                    | "drugs_drug_proprietaries_and_druggist_sundries"
                    | "dry_cleaners"
                    | "durable_goods"
                    | "duty_free_stores"
                    | "eating_places_restaurants"
                    | "educational_services"
                    | "electric_razor_stores"
                    | "electric_vehicle_charging"
                    | "electrical_parts_and_equipment"
                    | "electrical_services"
                    | "electronics_repair_shops"
                    | "electronics_stores"
                    | "elementary_secondary_schools"
                    | "emergency_services_gcas_visa_use_only"
                    | "employment_temp_agencies"
                    | "equipment_rental"
                    | "exterminating_services"
                    | "family_clothing_stores"
                    | "fast_food_restaurants"
                    | "financial_institutions"
                    | "fines_government_administrative_entities"
                    | "fireplace_fireplace_screens_and_accessories_stores"
                    | "floor_covering_stores"
                    | "florists"
                    | "florists_supplies_nursery_stock_and_flowers"
                    | "freezer_and_locker_meat_provisioners"
                    | "fuel_dealers_non_automotive"
                    | "funeral_services_crematories"
                    | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    | "furniture_repair_refinishing"
                    | "furriers_and_fur_shops"
                    | "general_services"
                    | "gift_card_novelty_and_souvenir_shops"
                    | "glass_paint_and_wallpaper_stores"
                    | "glassware_crystal_stores"
                    | "golf_courses_public"
                    | "government_licensed_horse_dog_racing_us_region_only"
                    | "government_licensed_online_casions_online_gambling_us_region_only"
                    | "government_owned_lotteries_non_us_region"
                    | "government_owned_lotteries_us_region_only"
                    | "government_services"
                    | "grocery_stores_supermarkets"
                    | "hardware_equipment_and_supplies"
                    | "hardware_stores"
                    | "health_and_beauty_spas"
                    | "hearing_aids_sales_and_supplies"
                    | "heating_plumbing_a_c"
                    | "hobby_toy_and_game_shops"
                    | "home_supply_warehouse_stores"
                    | "hospitals"
                    | "hotels_motels_and_resorts"
                    | "household_appliance_stores"
                    | "industrial_supplies"
                    | "information_retrieval_services"
                    | "insurance_default"
                    | "insurance_underwriting_premiums"
                    | "intra_company_purchases"
                    | "jewelry_stores_watches_clocks_and_silverware_stores"
                    | "landscaping_services"
                    | "laundries"
                    | "laundry_cleaning_services"
                    | "legal_services_attorneys"
                    | "luggage_and_leather_goods_stores"
                    | "lumber_building_materials_stores"
                    | "manual_cash_disburse"
                    | "marinas_service_and_supplies"
                    | "marketplaces"
                    | "masonry_stonework_and_plaster"
                    | "massage_parlors"
                    | "medical_and_dental_labs"
                    | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    | "medical_services"
                    | "membership_organizations"
                    | "mens_and_boys_clothing_and_accessories_stores"
                    | "mens_womens_clothing_stores"
                    | "metal_service_centers"
                    | "miscellaneous"
                    | "miscellaneous_apparel_and_accessory_shops"
                    | "miscellaneous_auto_dealers"
                    | "miscellaneous_business_services"
                    | "miscellaneous_food_stores"
                    | "miscellaneous_general_merchandise"
                    | "miscellaneous_general_services"
                    | "miscellaneous_home_furnishing_specialty_stores"
                    | "miscellaneous_publishing_and_printing"
                    | "miscellaneous_recreation_services"
                    | "miscellaneous_repair_shops"
                    | "miscellaneous_specialty_retail"
                    | "mobile_home_dealers"
                    | "motion_picture_theaters"
                    | "motor_freight_carriers_and_trucking"
                    | "motor_homes_dealers"
                    | "motor_vehicle_supplies_and_new_parts"
                    | "motorcycle_shops_and_dealers"
                    | "motorcycle_shops_dealers"
                    | "music_stores_musical_instruments_pianos_and_sheet_music"
                    | "news_dealers_and_newsstands"
                    | "non_fi_money_orders"
                    | "non_fi_stored_value_card_purchase_load"
                    | "nondurable_goods"
                    | "nurseries_lawn_and_garden_supply_stores"
                    | "nursing_personal_care"
                    | "office_and_commercial_furniture"
                    | "opticians_eyeglasses"
                    | "optometrists_ophthalmologist"
                    | "orthopedic_goods_prosthetic_devices"
                    | "osteopaths"
                    | "package_stores_beer_wine_and_liquor"
                    | "paints_varnishes_and_supplies"
                    | "parking_lots_garages"
                    | "passenger_railways"
                    | "pawn_shops"
                    | "pet_shops_pet_food_and_supplies"
                    | "petroleum_and_petroleum_products"
                    | "photo_developing"
                    | "photographic_photocopy_microfilm_equipment_and_supplies"
                    | "photographic_studios"
                    | "picture_video_production"
                    | "piece_goods_notions_and_other_dry_goods"
                    | "plumbing_heating_equipment_and_supplies"
                    | "political_organizations"
                    | "postal_services_government_only"
                    | "precious_stones_and_metals_watches_and_jewelry"
                    | "professional_services"
                    | "public_warehousing_and_storage"
                    | "quick_copy_repro_and_blueprint"
                    | "railroads"
                    | "real_estate_agents_and_managers_rentals"
                    | "record_stores"
                    | "recreational_vehicle_rentals"
                    | "religious_goods_stores"
                    | "religious_organizations"
                    | "roofing_siding_sheet_metal"
                    | "secretarial_support_services"
                    | "security_brokers_dealers"
                    | "service_stations"
                    | "sewing_needlework_fabric_and_piece_goods_stores"
                    | "shoe_repair_hat_cleaning"
                    | "shoe_stores"
                    | "small_appliance_repair"
                    | "snowmobile_dealers"
                    | "special_trade_services"
                    | "specialty_cleaning"
                    | "sporting_goods_stores"
                    | "sporting_recreation_camps"
                    | "sports_and_riding_apparel_stores"
                    | "sports_clubs_fields"
                    | "stamp_and_coin_stores"
                    | "stationary_office_supplies_printing_and_writing_paper"
                    | "stationery_stores_office_and_school_supply_stores"
                    | "swimming_pools_sales"
                    | "t_ui_travel_germany"
                    | "tailors_alterations"
                    | "tax_payments_government_agencies"
                    | "tax_preparation_services"
                    | "taxicabs_limousines"
                    | "telecommunication_equipment_and_telephone_sales"
                    | "telecommunication_services"
                    | "telegraph_services"
                    | "tent_and_awning_shops"
                    | "testing_laboratories"
                    | "theatrical_ticket_agencies"
                    | "timeshares"
                    | "tire_retreading_and_repair"
                    | "tolls_bridge_fees"
                    | "tourist_attractions_and_exhibits"
                    | "towing_services"
                    | "trailer_parks_campgrounds"
                    | "transportation_services"
                    | "travel_agencies_tour_operators"
                    | "truck_stop_iteration"
                    | "truck_utility_trailer_rentals"
                    | "typesetting_plate_making_and_related_services"
                    | "typewriter_stores"
                    | "u_s_federal_government_agencies_or_departments"
                    | "uniforms_commercial_clothing"
                    | "used_merchandise_and_secondhand_stores"
                    | "utilities"
                    | "variety_stores"
                    | "veterinary_services"
                    | "video_amusement_game_supplies"
                    | "video_game_arcades"
                    | "video_tape_rental_stores"
                    | "vocational_trade_schools"
                    | "watch_jewelry_repair"
                    | "welding_repair"
                    | "wholesale_clubs"
                    | "wig_and_toupee_stores"
                    | "wires_money_orders"
                    | "womens_accessory_and_specialty_shops"
                    | "womens_ready_to_wear_stores"
                    | "wrecking_and_salvage_yards"
                    | UnknownEnumStringValue
                  )[]
                | undefined
              blocked_merchant_countries?: string[] | undefined
              spending_limits?:
                | {
                    amount: number
                    categories?:
                      | (
                          | "ac_refrigeration_repair"
                          | "accounting_bookkeeping_services"
                          | "advertising_services"
                          | "agricultural_cooperative"
                          | "airlines_air_carriers"
                          | "airports_flying_fields"
                          | "ambulance_services"
                          | "amusement_parks_carnivals"
                          | "antique_reproductions"
                          | "antique_shops"
                          | "aquariums"
                          | "architectural_surveying_services"
                          | "art_dealers_and_galleries"
                          | "artists_supply_and_craft_shops"
                          | "auto_and_home_supply_stores"
                          | "auto_body_repair_shops"
                          | "auto_paint_shops"
                          | "auto_service_shops"
                          | "automated_cash_disburse"
                          | "automated_fuel_dispensers"
                          | "automobile_associations"
                          | "automotive_parts_and_accessories_stores"
                          | "automotive_tire_stores"
                          | "bail_and_bond_payments"
                          | "bakeries"
                          | "bands_orchestras"
                          | "barber_and_beauty_shops"
                          | "betting_casino_gambling"
                          | "bicycle_shops"
                          | "billiard_pool_establishments"
                          | "boat_dealers"
                          | "boat_rentals_and_leases"
                          | "book_stores"
                          | "books_periodicals_and_newspapers"
                          | "bowling_alleys"
                          | "bus_lines"
                          | "business_secretarial_schools"
                          | "buying_shopping_services"
                          | "cable_satellite_and_other_pay_television_and_radio"
                          | "camera_and_photographic_supply_stores"
                          | "candy_nut_and_confectionery_stores"
                          | "car_and_truck_dealers_new_used"
                          | "car_and_truck_dealers_used_only"
                          | "car_rental_agencies"
                          | "car_washes"
                          | "carpentry_services"
                          | "carpet_upholstery_cleaning"
                          | "caterers"
                          | "charitable_and_social_service_organizations_fundraising"
                          | "chemicals_and_allied_products"
                          | "child_care_services"
                          | "childrens_and_infants_wear_stores"
                          | "chiropodists_podiatrists"
                          | "chiropractors"
                          | "cigar_stores_and_stands"
                          | "civic_social_fraternal_associations"
                          | "cleaning_and_maintenance"
                          | "clothing_rental"
                          | "colleges_universities"
                          | "commercial_equipment"
                          | "commercial_footwear"
                          | "commercial_photography_art_and_graphics"
                          | "commuter_transport_and_ferries"
                          | "computer_network_services"
                          | "computer_programming"
                          | "computer_repair"
                          | "computer_software_stores"
                          | "computers_peripherals_and_software"
                          | "concrete_work_services"
                          | "construction_materials"
                          | "consulting_public_relations"
                          | "correspondence_schools"
                          | "cosmetic_stores"
                          | "counseling_services"
                          | "country_clubs"
                          | "courier_services"
                          | "court_costs"
                          | "credit_reporting_agencies"
                          | "cruise_lines"
                          | "dairy_products_stores"
                          | "dance_hall_studios_schools"
                          | "dating_escort_services"
                          | "dentists_orthodontists"
                          | "department_stores"
                          | "detective_agencies"
                          | "digital_goods_applications"
                          | "digital_goods_games"
                          | "digital_goods_large_volume"
                          | "digital_goods_media"
                          | "direct_marketing_catalog_merchant"
                          | "direct_marketing_combination_catalog_and_retail_merchant"
                          | "direct_marketing_inbound_telemarketing"
                          | "direct_marketing_insurance_services"
                          | "direct_marketing_other"
                          | "direct_marketing_outbound_telemarketing"
                          | "direct_marketing_subscription"
                          | "direct_marketing_travel"
                          | "discount_stores"
                          | "doctors"
                          | "door_to_door_sales"
                          | "drapery_window_covering_and_upholstery_stores"
                          | "drinking_places"
                          | "drug_stores_and_pharmacies"
                          | "drugs_drug_proprietaries_and_druggist_sundries"
                          | "dry_cleaners"
                          | "durable_goods"
                          | "duty_free_stores"
                          | "eating_places_restaurants"
                          | "educational_services"
                          | "electric_razor_stores"
                          | "electric_vehicle_charging"
                          | "electrical_parts_and_equipment"
                          | "electrical_services"
                          | "electronics_repair_shops"
                          | "electronics_stores"
                          | "elementary_secondary_schools"
                          | "emergency_services_gcas_visa_use_only"
                          | "employment_temp_agencies"
                          | "equipment_rental"
                          | "exterminating_services"
                          | "family_clothing_stores"
                          | "fast_food_restaurants"
                          | "financial_institutions"
                          | "fines_government_administrative_entities"
                          | "fireplace_fireplace_screens_and_accessories_stores"
                          | "floor_covering_stores"
                          | "florists"
                          | "florists_supplies_nursery_stock_and_flowers"
                          | "freezer_and_locker_meat_provisioners"
                          | "fuel_dealers_non_automotive"
                          | "funeral_services_crematories"
                          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                          | "furniture_repair_refinishing"
                          | "furriers_and_fur_shops"
                          | "general_services"
                          | "gift_card_novelty_and_souvenir_shops"
                          | "glass_paint_and_wallpaper_stores"
                          | "glassware_crystal_stores"
                          | "golf_courses_public"
                          | "government_licensed_horse_dog_racing_us_region_only"
                          | "government_licensed_online_casions_online_gambling_us_region_only"
                          | "government_owned_lotteries_non_us_region"
                          | "government_owned_lotteries_us_region_only"
                          | "government_services"
                          | "grocery_stores_supermarkets"
                          | "hardware_equipment_and_supplies"
                          | "hardware_stores"
                          | "health_and_beauty_spas"
                          | "hearing_aids_sales_and_supplies"
                          | "heating_plumbing_a_c"
                          | "hobby_toy_and_game_shops"
                          | "home_supply_warehouse_stores"
                          | "hospitals"
                          | "hotels_motels_and_resorts"
                          | "household_appliance_stores"
                          | "industrial_supplies"
                          | "information_retrieval_services"
                          | "insurance_default"
                          | "insurance_underwriting_premiums"
                          | "intra_company_purchases"
                          | "jewelry_stores_watches_clocks_and_silverware_stores"
                          | "landscaping_services"
                          | "laundries"
                          | "laundry_cleaning_services"
                          | "legal_services_attorneys"
                          | "luggage_and_leather_goods_stores"
                          | "lumber_building_materials_stores"
                          | "manual_cash_disburse"
                          | "marinas_service_and_supplies"
                          | "marketplaces"
                          | "masonry_stonework_and_plaster"
                          | "massage_parlors"
                          | "medical_and_dental_labs"
                          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                          | "medical_services"
                          | "membership_organizations"
                          | "mens_and_boys_clothing_and_accessories_stores"
                          | "mens_womens_clothing_stores"
                          | "metal_service_centers"
                          | "miscellaneous"
                          | "miscellaneous_apparel_and_accessory_shops"
                          | "miscellaneous_auto_dealers"
                          | "miscellaneous_business_services"
                          | "miscellaneous_food_stores"
                          | "miscellaneous_general_merchandise"
                          | "miscellaneous_general_services"
                          | "miscellaneous_home_furnishing_specialty_stores"
                          | "miscellaneous_publishing_and_printing"
                          | "miscellaneous_recreation_services"
                          | "miscellaneous_repair_shops"
                          | "miscellaneous_specialty_retail"
                          | "mobile_home_dealers"
                          | "motion_picture_theaters"
                          | "motor_freight_carriers_and_trucking"
                          | "motor_homes_dealers"
                          | "motor_vehicle_supplies_and_new_parts"
                          | "motorcycle_shops_and_dealers"
                          | "motorcycle_shops_dealers"
                          | "music_stores_musical_instruments_pianos_and_sheet_music"
                          | "news_dealers_and_newsstands"
                          | "non_fi_money_orders"
                          | "non_fi_stored_value_card_purchase_load"
                          | "nondurable_goods"
                          | "nurseries_lawn_and_garden_supply_stores"
                          | "nursing_personal_care"
                          | "office_and_commercial_furniture"
                          | "opticians_eyeglasses"
                          | "optometrists_ophthalmologist"
                          | "orthopedic_goods_prosthetic_devices"
                          | "osteopaths"
                          | "package_stores_beer_wine_and_liquor"
                          | "paints_varnishes_and_supplies"
                          | "parking_lots_garages"
                          | "passenger_railways"
                          | "pawn_shops"
                          | "pet_shops_pet_food_and_supplies"
                          | "petroleum_and_petroleum_products"
                          | "photo_developing"
                          | "photographic_photocopy_microfilm_equipment_and_supplies"
                          | "photographic_studios"
                          | "picture_video_production"
                          | "piece_goods_notions_and_other_dry_goods"
                          | "plumbing_heating_equipment_and_supplies"
                          | "political_organizations"
                          | "postal_services_government_only"
                          | "precious_stones_and_metals_watches_and_jewelry"
                          | "professional_services"
                          | "public_warehousing_and_storage"
                          | "quick_copy_repro_and_blueprint"
                          | "railroads"
                          | "real_estate_agents_and_managers_rentals"
                          | "record_stores"
                          | "recreational_vehicle_rentals"
                          | "religious_goods_stores"
                          | "religious_organizations"
                          | "roofing_siding_sheet_metal"
                          | "secretarial_support_services"
                          | "security_brokers_dealers"
                          | "service_stations"
                          | "sewing_needlework_fabric_and_piece_goods_stores"
                          | "shoe_repair_hat_cleaning"
                          | "shoe_stores"
                          | "small_appliance_repair"
                          | "snowmobile_dealers"
                          | "special_trade_services"
                          | "specialty_cleaning"
                          | "sporting_goods_stores"
                          | "sporting_recreation_camps"
                          | "sports_and_riding_apparel_stores"
                          | "sports_clubs_fields"
                          | "stamp_and_coin_stores"
                          | "stationary_office_supplies_printing_and_writing_paper"
                          | "stationery_stores_office_and_school_supply_stores"
                          | "swimming_pools_sales"
                          | "t_ui_travel_germany"
                          | "tailors_alterations"
                          | "tax_payments_government_agencies"
                          | "tax_preparation_services"
                          | "taxicabs_limousines"
                          | "telecommunication_equipment_and_telephone_sales"
                          | "telecommunication_services"
                          | "telegraph_services"
                          | "tent_and_awning_shops"
                          | "testing_laboratories"
                          | "theatrical_ticket_agencies"
                          | "timeshares"
                          | "tire_retreading_and_repair"
                          | "tolls_bridge_fees"
                          | "tourist_attractions_and_exhibits"
                          | "towing_services"
                          | "trailer_parks_campgrounds"
                          | "transportation_services"
                          | "travel_agencies_tour_operators"
                          | "truck_stop_iteration"
                          | "truck_utility_trailer_rentals"
                          | "typesetting_plate_making_and_related_services"
                          | "typewriter_stores"
                          | "u_s_federal_government_agencies_or_departments"
                          | "uniforms_commercial_clothing"
                          | "used_merchandise_and_secondhand_stores"
                          | "utilities"
                          | "variety_stores"
                          | "veterinary_services"
                          | "video_amusement_game_supplies"
                          | "video_game_arcades"
                          | "video_tape_rental_stores"
                          | "vocational_trade_schools"
                          | "watch_jewelry_repair"
                          | "welding_repair"
                          | "wholesale_clubs"
                          | "wig_and_toupee_stores"
                          | "wires_money_orders"
                          | "womens_accessory_and_specialty_shops"
                          | "womens_ready_to_wear_stores"
                          | "wrecking_and_salvage_yards"
                          | UnknownEnumStringValue
                        )[]
                      | undefined
                    interval:
                      | "all_time"
                      | "daily"
                      | "monthly"
                      | "per_authorization"
                      | "weekly"
                      | "yearly"
                      | UnknownEnumStringValue
                  }[]
                | undefined
              spending_limits_currency?: string | undefined
            }
          | undefined
        status?: ("active" | "inactive" | UnknownEnumStringValue) | undefined
        type?: ("company" | "individual" | UnknownEnumStringValue) | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_cardholder>> {
    const url = `/v1/issuing/cardholders`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingCardholdersCardholder(
    p: {
      cardholder: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_cardholder>> {
    const url = `/v1/issuing/cardholders/${p["cardholder"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingCardholdersCardholder(
    p: {
      cardholder: string
      requestBody?: {
        billing?:
          | {
              address: {
                city: string
                country: string
                line1: string
                line2?: string | undefined
                postal_code: string
                state?: string | undefined
              }
            }
          | undefined
        company?:
          | {
              tax_id?: string | undefined
            }
          | undefined
        email?: string | undefined
        expand?: string[] | undefined
        individual?:
          | {
              card_issuing?:
                | {
                    user_terms_acceptance?:
                      | {
                          date?: number | undefined
                          ip?: string | undefined
                          user_agent?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              dob?:
                | {
                    day: number
                    month: number
                    year: number
                  }
                | undefined
              first_name?: string | undefined
              last_name?: string | undefined
              verification?:
                | {
                    document?:
                      | {
                          back?: string | undefined
                          front?: string | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        phone_number?: string | undefined
        preferred_locales?:
          | ("de" | "en" | "es" | "fr" | "it" | UnknownEnumStringValue)[]
          | undefined
        spending_controls?:
          | {
              allowed_categories?:
                | (
                    | "ac_refrigeration_repair"
                    | "accounting_bookkeeping_services"
                    | "advertising_services"
                    | "agricultural_cooperative"
                    | "airlines_air_carriers"
                    | "airports_flying_fields"
                    | "ambulance_services"
                    | "amusement_parks_carnivals"
                    | "antique_reproductions"
                    | "antique_shops"
                    | "aquariums"
                    | "architectural_surveying_services"
                    | "art_dealers_and_galleries"
                    | "artists_supply_and_craft_shops"
                    | "auto_and_home_supply_stores"
                    | "auto_body_repair_shops"
                    | "auto_paint_shops"
                    | "auto_service_shops"
                    | "automated_cash_disburse"
                    | "automated_fuel_dispensers"
                    | "automobile_associations"
                    | "automotive_parts_and_accessories_stores"
                    | "automotive_tire_stores"
                    | "bail_and_bond_payments"
                    | "bakeries"
                    | "bands_orchestras"
                    | "barber_and_beauty_shops"
                    | "betting_casino_gambling"
                    | "bicycle_shops"
                    | "billiard_pool_establishments"
                    | "boat_dealers"
                    | "boat_rentals_and_leases"
                    | "book_stores"
                    | "books_periodicals_and_newspapers"
                    | "bowling_alleys"
                    | "bus_lines"
                    | "business_secretarial_schools"
                    | "buying_shopping_services"
                    | "cable_satellite_and_other_pay_television_and_radio"
                    | "camera_and_photographic_supply_stores"
                    | "candy_nut_and_confectionery_stores"
                    | "car_and_truck_dealers_new_used"
                    | "car_and_truck_dealers_used_only"
                    | "car_rental_agencies"
                    | "car_washes"
                    | "carpentry_services"
                    | "carpet_upholstery_cleaning"
                    | "caterers"
                    | "charitable_and_social_service_organizations_fundraising"
                    | "chemicals_and_allied_products"
                    | "child_care_services"
                    | "childrens_and_infants_wear_stores"
                    | "chiropodists_podiatrists"
                    | "chiropractors"
                    | "cigar_stores_and_stands"
                    | "civic_social_fraternal_associations"
                    | "cleaning_and_maintenance"
                    | "clothing_rental"
                    | "colleges_universities"
                    | "commercial_equipment"
                    | "commercial_footwear"
                    | "commercial_photography_art_and_graphics"
                    | "commuter_transport_and_ferries"
                    | "computer_network_services"
                    | "computer_programming"
                    | "computer_repair"
                    | "computer_software_stores"
                    | "computers_peripherals_and_software"
                    | "concrete_work_services"
                    | "construction_materials"
                    | "consulting_public_relations"
                    | "correspondence_schools"
                    | "cosmetic_stores"
                    | "counseling_services"
                    | "country_clubs"
                    | "courier_services"
                    | "court_costs"
                    | "credit_reporting_agencies"
                    | "cruise_lines"
                    | "dairy_products_stores"
                    | "dance_hall_studios_schools"
                    | "dating_escort_services"
                    | "dentists_orthodontists"
                    | "department_stores"
                    | "detective_agencies"
                    | "digital_goods_applications"
                    | "digital_goods_games"
                    | "digital_goods_large_volume"
                    | "digital_goods_media"
                    | "direct_marketing_catalog_merchant"
                    | "direct_marketing_combination_catalog_and_retail_merchant"
                    | "direct_marketing_inbound_telemarketing"
                    | "direct_marketing_insurance_services"
                    | "direct_marketing_other"
                    | "direct_marketing_outbound_telemarketing"
                    | "direct_marketing_subscription"
                    | "direct_marketing_travel"
                    | "discount_stores"
                    | "doctors"
                    | "door_to_door_sales"
                    | "drapery_window_covering_and_upholstery_stores"
                    | "drinking_places"
                    | "drug_stores_and_pharmacies"
                    | "drugs_drug_proprietaries_and_druggist_sundries"
                    | "dry_cleaners"
                    | "durable_goods"
                    | "duty_free_stores"
                    | "eating_places_restaurants"
                    | "educational_services"
                    | "electric_razor_stores"
                    | "electric_vehicle_charging"
                    | "electrical_parts_and_equipment"
                    | "electrical_services"
                    | "electronics_repair_shops"
                    | "electronics_stores"
                    | "elementary_secondary_schools"
                    | "emergency_services_gcas_visa_use_only"
                    | "employment_temp_agencies"
                    | "equipment_rental"
                    | "exterminating_services"
                    | "family_clothing_stores"
                    | "fast_food_restaurants"
                    | "financial_institutions"
                    | "fines_government_administrative_entities"
                    | "fireplace_fireplace_screens_and_accessories_stores"
                    | "floor_covering_stores"
                    | "florists"
                    | "florists_supplies_nursery_stock_and_flowers"
                    | "freezer_and_locker_meat_provisioners"
                    | "fuel_dealers_non_automotive"
                    | "funeral_services_crematories"
                    | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    | "furniture_repair_refinishing"
                    | "furriers_and_fur_shops"
                    | "general_services"
                    | "gift_card_novelty_and_souvenir_shops"
                    | "glass_paint_and_wallpaper_stores"
                    | "glassware_crystal_stores"
                    | "golf_courses_public"
                    | "government_licensed_horse_dog_racing_us_region_only"
                    | "government_licensed_online_casions_online_gambling_us_region_only"
                    | "government_owned_lotteries_non_us_region"
                    | "government_owned_lotteries_us_region_only"
                    | "government_services"
                    | "grocery_stores_supermarkets"
                    | "hardware_equipment_and_supplies"
                    | "hardware_stores"
                    | "health_and_beauty_spas"
                    | "hearing_aids_sales_and_supplies"
                    | "heating_plumbing_a_c"
                    | "hobby_toy_and_game_shops"
                    | "home_supply_warehouse_stores"
                    | "hospitals"
                    | "hotels_motels_and_resorts"
                    | "household_appliance_stores"
                    | "industrial_supplies"
                    | "information_retrieval_services"
                    | "insurance_default"
                    | "insurance_underwriting_premiums"
                    | "intra_company_purchases"
                    | "jewelry_stores_watches_clocks_and_silverware_stores"
                    | "landscaping_services"
                    | "laundries"
                    | "laundry_cleaning_services"
                    | "legal_services_attorneys"
                    | "luggage_and_leather_goods_stores"
                    | "lumber_building_materials_stores"
                    | "manual_cash_disburse"
                    | "marinas_service_and_supplies"
                    | "marketplaces"
                    | "masonry_stonework_and_plaster"
                    | "massage_parlors"
                    | "medical_and_dental_labs"
                    | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    | "medical_services"
                    | "membership_organizations"
                    | "mens_and_boys_clothing_and_accessories_stores"
                    | "mens_womens_clothing_stores"
                    | "metal_service_centers"
                    | "miscellaneous"
                    | "miscellaneous_apparel_and_accessory_shops"
                    | "miscellaneous_auto_dealers"
                    | "miscellaneous_business_services"
                    | "miscellaneous_food_stores"
                    | "miscellaneous_general_merchandise"
                    | "miscellaneous_general_services"
                    | "miscellaneous_home_furnishing_specialty_stores"
                    | "miscellaneous_publishing_and_printing"
                    | "miscellaneous_recreation_services"
                    | "miscellaneous_repair_shops"
                    | "miscellaneous_specialty_retail"
                    | "mobile_home_dealers"
                    | "motion_picture_theaters"
                    | "motor_freight_carriers_and_trucking"
                    | "motor_homes_dealers"
                    | "motor_vehicle_supplies_and_new_parts"
                    | "motorcycle_shops_and_dealers"
                    | "motorcycle_shops_dealers"
                    | "music_stores_musical_instruments_pianos_and_sheet_music"
                    | "news_dealers_and_newsstands"
                    | "non_fi_money_orders"
                    | "non_fi_stored_value_card_purchase_load"
                    | "nondurable_goods"
                    | "nurseries_lawn_and_garden_supply_stores"
                    | "nursing_personal_care"
                    | "office_and_commercial_furniture"
                    | "opticians_eyeglasses"
                    | "optometrists_ophthalmologist"
                    | "orthopedic_goods_prosthetic_devices"
                    | "osteopaths"
                    | "package_stores_beer_wine_and_liquor"
                    | "paints_varnishes_and_supplies"
                    | "parking_lots_garages"
                    | "passenger_railways"
                    | "pawn_shops"
                    | "pet_shops_pet_food_and_supplies"
                    | "petroleum_and_petroleum_products"
                    | "photo_developing"
                    | "photographic_photocopy_microfilm_equipment_and_supplies"
                    | "photographic_studios"
                    | "picture_video_production"
                    | "piece_goods_notions_and_other_dry_goods"
                    | "plumbing_heating_equipment_and_supplies"
                    | "political_organizations"
                    | "postal_services_government_only"
                    | "precious_stones_and_metals_watches_and_jewelry"
                    | "professional_services"
                    | "public_warehousing_and_storage"
                    | "quick_copy_repro_and_blueprint"
                    | "railroads"
                    | "real_estate_agents_and_managers_rentals"
                    | "record_stores"
                    | "recreational_vehicle_rentals"
                    | "religious_goods_stores"
                    | "religious_organizations"
                    | "roofing_siding_sheet_metal"
                    | "secretarial_support_services"
                    | "security_brokers_dealers"
                    | "service_stations"
                    | "sewing_needlework_fabric_and_piece_goods_stores"
                    | "shoe_repair_hat_cleaning"
                    | "shoe_stores"
                    | "small_appliance_repair"
                    | "snowmobile_dealers"
                    | "special_trade_services"
                    | "specialty_cleaning"
                    | "sporting_goods_stores"
                    | "sporting_recreation_camps"
                    | "sports_and_riding_apparel_stores"
                    | "sports_clubs_fields"
                    | "stamp_and_coin_stores"
                    | "stationary_office_supplies_printing_and_writing_paper"
                    | "stationery_stores_office_and_school_supply_stores"
                    | "swimming_pools_sales"
                    | "t_ui_travel_germany"
                    | "tailors_alterations"
                    | "tax_payments_government_agencies"
                    | "tax_preparation_services"
                    | "taxicabs_limousines"
                    | "telecommunication_equipment_and_telephone_sales"
                    | "telecommunication_services"
                    | "telegraph_services"
                    | "tent_and_awning_shops"
                    | "testing_laboratories"
                    | "theatrical_ticket_agencies"
                    | "timeshares"
                    | "tire_retreading_and_repair"
                    | "tolls_bridge_fees"
                    | "tourist_attractions_and_exhibits"
                    | "towing_services"
                    | "trailer_parks_campgrounds"
                    | "transportation_services"
                    | "travel_agencies_tour_operators"
                    | "truck_stop_iteration"
                    | "truck_utility_trailer_rentals"
                    | "typesetting_plate_making_and_related_services"
                    | "typewriter_stores"
                    | "u_s_federal_government_agencies_or_departments"
                    | "uniforms_commercial_clothing"
                    | "used_merchandise_and_secondhand_stores"
                    | "utilities"
                    | "variety_stores"
                    | "veterinary_services"
                    | "video_amusement_game_supplies"
                    | "video_game_arcades"
                    | "video_tape_rental_stores"
                    | "vocational_trade_schools"
                    | "watch_jewelry_repair"
                    | "welding_repair"
                    | "wholesale_clubs"
                    | "wig_and_toupee_stores"
                    | "wires_money_orders"
                    | "womens_accessory_and_specialty_shops"
                    | "womens_ready_to_wear_stores"
                    | "wrecking_and_salvage_yards"
                    | UnknownEnumStringValue
                  )[]
                | undefined
              allowed_merchant_countries?: string[] | undefined
              blocked_categories?:
                | (
                    | "ac_refrigeration_repair"
                    | "accounting_bookkeeping_services"
                    | "advertising_services"
                    | "agricultural_cooperative"
                    | "airlines_air_carriers"
                    | "airports_flying_fields"
                    | "ambulance_services"
                    | "amusement_parks_carnivals"
                    | "antique_reproductions"
                    | "antique_shops"
                    | "aquariums"
                    | "architectural_surveying_services"
                    | "art_dealers_and_galleries"
                    | "artists_supply_and_craft_shops"
                    | "auto_and_home_supply_stores"
                    | "auto_body_repair_shops"
                    | "auto_paint_shops"
                    | "auto_service_shops"
                    | "automated_cash_disburse"
                    | "automated_fuel_dispensers"
                    | "automobile_associations"
                    | "automotive_parts_and_accessories_stores"
                    | "automotive_tire_stores"
                    | "bail_and_bond_payments"
                    | "bakeries"
                    | "bands_orchestras"
                    | "barber_and_beauty_shops"
                    | "betting_casino_gambling"
                    | "bicycle_shops"
                    | "billiard_pool_establishments"
                    | "boat_dealers"
                    | "boat_rentals_and_leases"
                    | "book_stores"
                    | "books_periodicals_and_newspapers"
                    | "bowling_alleys"
                    | "bus_lines"
                    | "business_secretarial_schools"
                    | "buying_shopping_services"
                    | "cable_satellite_and_other_pay_television_and_radio"
                    | "camera_and_photographic_supply_stores"
                    | "candy_nut_and_confectionery_stores"
                    | "car_and_truck_dealers_new_used"
                    | "car_and_truck_dealers_used_only"
                    | "car_rental_agencies"
                    | "car_washes"
                    | "carpentry_services"
                    | "carpet_upholstery_cleaning"
                    | "caterers"
                    | "charitable_and_social_service_organizations_fundraising"
                    | "chemicals_and_allied_products"
                    | "child_care_services"
                    | "childrens_and_infants_wear_stores"
                    | "chiropodists_podiatrists"
                    | "chiropractors"
                    | "cigar_stores_and_stands"
                    | "civic_social_fraternal_associations"
                    | "cleaning_and_maintenance"
                    | "clothing_rental"
                    | "colleges_universities"
                    | "commercial_equipment"
                    | "commercial_footwear"
                    | "commercial_photography_art_and_graphics"
                    | "commuter_transport_and_ferries"
                    | "computer_network_services"
                    | "computer_programming"
                    | "computer_repair"
                    | "computer_software_stores"
                    | "computers_peripherals_and_software"
                    | "concrete_work_services"
                    | "construction_materials"
                    | "consulting_public_relations"
                    | "correspondence_schools"
                    | "cosmetic_stores"
                    | "counseling_services"
                    | "country_clubs"
                    | "courier_services"
                    | "court_costs"
                    | "credit_reporting_agencies"
                    | "cruise_lines"
                    | "dairy_products_stores"
                    | "dance_hall_studios_schools"
                    | "dating_escort_services"
                    | "dentists_orthodontists"
                    | "department_stores"
                    | "detective_agencies"
                    | "digital_goods_applications"
                    | "digital_goods_games"
                    | "digital_goods_large_volume"
                    | "digital_goods_media"
                    | "direct_marketing_catalog_merchant"
                    | "direct_marketing_combination_catalog_and_retail_merchant"
                    | "direct_marketing_inbound_telemarketing"
                    | "direct_marketing_insurance_services"
                    | "direct_marketing_other"
                    | "direct_marketing_outbound_telemarketing"
                    | "direct_marketing_subscription"
                    | "direct_marketing_travel"
                    | "discount_stores"
                    | "doctors"
                    | "door_to_door_sales"
                    | "drapery_window_covering_and_upholstery_stores"
                    | "drinking_places"
                    | "drug_stores_and_pharmacies"
                    | "drugs_drug_proprietaries_and_druggist_sundries"
                    | "dry_cleaners"
                    | "durable_goods"
                    | "duty_free_stores"
                    | "eating_places_restaurants"
                    | "educational_services"
                    | "electric_razor_stores"
                    | "electric_vehicle_charging"
                    | "electrical_parts_and_equipment"
                    | "electrical_services"
                    | "electronics_repair_shops"
                    | "electronics_stores"
                    | "elementary_secondary_schools"
                    | "emergency_services_gcas_visa_use_only"
                    | "employment_temp_agencies"
                    | "equipment_rental"
                    | "exterminating_services"
                    | "family_clothing_stores"
                    | "fast_food_restaurants"
                    | "financial_institutions"
                    | "fines_government_administrative_entities"
                    | "fireplace_fireplace_screens_and_accessories_stores"
                    | "floor_covering_stores"
                    | "florists"
                    | "florists_supplies_nursery_stock_and_flowers"
                    | "freezer_and_locker_meat_provisioners"
                    | "fuel_dealers_non_automotive"
                    | "funeral_services_crematories"
                    | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    | "furniture_repair_refinishing"
                    | "furriers_and_fur_shops"
                    | "general_services"
                    | "gift_card_novelty_and_souvenir_shops"
                    | "glass_paint_and_wallpaper_stores"
                    | "glassware_crystal_stores"
                    | "golf_courses_public"
                    | "government_licensed_horse_dog_racing_us_region_only"
                    | "government_licensed_online_casions_online_gambling_us_region_only"
                    | "government_owned_lotteries_non_us_region"
                    | "government_owned_lotteries_us_region_only"
                    | "government_services"
                    | "grocery_stores_supermarkets"
                    | "hardware_equipment_and_supplies"
                    | "hardware_stores"
                    | "health_and_beauty_spas"
                    | "hearing_aids_sales_and_supplies"
                    | "heating_plumbing_a_c"
                    | "hobby_toy_and_game_shops"
                    | "home_supply_warehouse_stores"
                    | "hospitals"
                    | "hotels_motels_and_resorts"
                    | "household_appliance_stores"
                    | "industrial_supplies"
                    | "information_retrieval_services"
                    | "insurance_default"
                    | "insurance_underwriting_premiums"
                    | "intra_company_purchases"
                    | "jewelry_stores_watches_clocks_and_silverware_stores"
                    | "landscaping_services"
                    | "laundries"
                    | "laundry_cleaning_services"
                    | "legal_services_attorneys"
                    | "luggage_and_leather_goods_stores"
                    | "lumber_building_materials_stores"
                    | "manual_cash_disburse"
                    | "marinas_service_and_supplies"
                    | "marketplaces"
                    | "masonry_stonework_and_plaster"
                    | "massage_parlors"
                    | "medical_and_dental_labs"
                    | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    | "medical_services"
                    | "membership_organizations"
                    | "mens_and_boys_clothing_and_accessories_stores"
                    | "mens_womens_clothing_stores"
                    | "metal_service_centers"
                    | "miscellaneous"
                    | "miscellaneous_apparel_and_accessory_shops"
                    | "miscellaneous_auto_dealers"
                    | "miscellaneous_business_services"
                    | "miscellaneous_food_stores"
                    | "miscellaneous_general_merchandise"
                    | "miscellaneous_general_services"
                    | "miscellaneous_home_furnishing_specialty_stores"
                    | "miscellaneous_publishing_and_printing"
                    | "miscellaneous_recreation_services"
                    | "miscellaneous_repair_shops"
                    | "miscellaneous_specialty_retail"
                    | "mobile_home_dealers"
                    | "motion_picture_theaters"
                    | "motor_freight_carriers_and_trucking"
                    | "motor_homes_dealers"
                    | "motor_vehicle_supplies_and_new_parts"
                    | "motorcycle_shops_and_dealers"
                    | "motorcycle_shops_dealers"
                    | "music_stores_musical_instruments_pianos_and_sheet_music"
                    | "news_dealers_and_newsstands"
                    | "non_fi_money_orders"
                    | "non_fi_stored_value_card_purchase_load"
                    | "nondurable_goods"
                    | "nurseries_lawn_and_garden_supply_stores"
                    | "nursing_personal_care"
                    | "office_and_commercial_furniture"
                    | "opticians_eyeglasses"
                    | "optometrists_ophthalmologist"
                    | "orthopedic_goods_prosthetic_devices"
                    | "osteopaths"
                    | "package_stores_beer_wine_and_liquor"
                    | "paints_varnishes_and_supplies"
                    | "parking_lots_garages"
                    | "passenger_railways"
                    | "pawn_shops"
                    | "pet_shops_pet_food_and_supplies"
                    | "petroleum_and_petroleum_products"
                    | "photo_developing"
                    | "photographic_photocopy_microfilm_equipment_and_supplies"
                    | "photographic_studios"
                    | "picture_video_production"
                    | "piece_goods_notions_and_other_dry_goods"
                    | "plumbing_heating_equipment_and_supplies"
                    | "political_organizations"
                    | "postal_services_government_only"
                    | "precious_stones_and_metals_watches_and_jewelry"
                    | "professional_services"
                    | "public_warehousing_and_storage"
                    | "quick_copy_repro_and_blueprint"
                    | "railroads"
                    | "real_estate_agents_and_managers_rentals"
                    | "record_stores"
                    | "recreational_vehicle_rentals"
                    | "religious_goods_stores"
                    | "religious_organizations"
                    | "roofing_siding_sheet_metal"
                    | "secretarial_support_services"
                    | "security_brokers_dealers"
                    | "service_stations"
                    | "sewing_needlework_fabric_and_piece_goods_stores"
                    | "shoe_repair_hat_cleaning"
                    | "shoe_stores"
                    | "small_appliance_repair"
                    | "snowmobile_dealers"
                    | "special_trade_services"
                    | "specialty_cleaning"
                    | "sporting_goods_stores"
                    | "sporting_recreation_camps"
                    | "sports_and_riding_apparel_stores"
                    | "sports_clubs_fields"
                    | "stamp_and_coin_stores"
                    | "stationary_office_supplies_printing_and_writing_paper"
                    | "stationery_stores_office_and_school_supply_stores"
                    | "swimming_pools_sales"
                    | "t_ui_travel_germany"
                    | "tailors_alterations"
                    | "tax_payments_government_agencies"
                    | "tax_preparation_services"
                    | "taxicabs_limousines"
                    | "telecommunication_equipment_and_telephone_sales"
                    | "telecommunication_services"
                    | "telegraph_services"
                    | "tent_and_awning_shops"
                    | "testing_laboratories"
                    | "theatrical_ticket_agencies"
                    | "timeshares"
                    | "tire_retreading_and_repair"
                    | "tolls_bridge_fees"
                    | "tourist_attractions_and_exhibits"
                    | "towing_services"
                    | "trailer_parks_campgrounds"
                    | "transportation_services"
                    | "travel_agencies_tour_operators"
                    | "truck_stop_iteration"
                    | "truck_utility_trailer_rentals"
                    | "typesetting_plate_making_and_related_services"
                    | "typewriter_stores"
                    | "u_s_federal_government_agencies_or_departments"
                    | "uniforms_commercial_clothing"
                    | "used_merchandise_and_secondhand_stores"
                    | "utilities"
                    | "variety_stores"
                    | "veterinary_services"
                    | "video_amusement_game_supplies"
                    | "video_game_arcades"
                    | "video_tape_rental_stores"
                    | "vocational_trade_schools"
                    | "watch_jewelry_repair"
                    | "welding_repair"
                    | "wholesale_clubs"
                    | "wig_and_toupee_stores"
                    | "wires_money_orders"
                    | "womens_accessory_and_specialty_shops"
                    | "womens_ready_to_wear_stores"
                    | "wrecking_and_salvage_yards"
                    | UnknownEnumStringValue
                  )[]
                | undefined
              blocked_merchant_countries?: string[] | undefined
              spending_limits?:
                | {
                    amount: number
                    categories?:
                      | (
                          | "ac_refrigeration_repair"
                          | "accounting_bookkeeping_services"
                          | "advertising_services"
                          | "agricultural_cooperative"
                          | "airlines_air_carriers"
                          | "airports_flying_fields"
                          | "ambulance_services"
                          | "amusement_parks_carnivals"
                          | "antique_reproductions"
                          | "antique_shops"
                          | "aquariums"
                          | "architectural_surveying_services"
                          | "art_dealers_and_galleries"
                          | "artists_supply_and_craft_shops"
                          | "auto_and_home_supply_stores"
                          | "auto_body_repair_shops"
                          | "auto_paint_shops"
                          | "auto_service_shops"
                          | "automated_cash_disburse"
                          | "automated_fuel_dispensers"
                          | "automobile_associations"
                          | "automotive_parts_and_accessories_stores"
                          | "automotive_tire_stores"
                          | "bail_and_bond_payments"
                          | "bakeries"
                          | "bands_orchestras"
                          | "barber_and_beauty_shops"
                          | "betting_casino_gambling"
                          | "bicycle_shops"
                          | "billiard_pool_establishments"
                          | "boat_dealers"
                          | "boat_rentals_and_leases"
                          | "book_stores"
                          | "books_periodicals_and_newspapers"
                          | "bowling_alleys"
                          | "bus_lines"
                          | "business_secretarial_schools"
                          | "buying_shopping_services"
                          | "cable_satellite_and_other_pay_television_and_radio"
                          | "camera_and_photographic_supply_stores"
                          | "candy_nut_and_confectionery_stores"
                          | "car_and_truck_dealers_new_used"
                          | "car_and_truck_dealers_used_only"
                          | "car_rental_agencies"
                          | "car_washes"
                          | "carpentry_services"
                          | "carpet_upholstery_cleaning"
                          | "caterers"
                          | "charitable_and_social_service_organizations_fundraising"
                          | "chemicals_and_allied_products"
                          | "child_care_services"
                          | "childrens_and_infants_wear_stores"
                          | "chiropodists_podiatrists"
                          | "chiropractors"
                          | "cigar_stores_and_stands"
                          | "civic_social_fraternal_associations"
                          | "cleaning_and_maintenance"
                          | "clothing_rental"
                          | "colleges_universities"
                          | "commercial_equipment"
                          | "commercial_footwear"
                          | "commercial_photography_art_and_graphics"
                          | "commuter_transport_and_ferries"
                          | "computer_network_services"
                          | "computer_programming"
                          | "computer_repair"
                          | "computer_software_stores"
                          | "computers_peripherals_and_software"
                          | "concrete_work_services"
                          | "construction_materials"
                          | "consulting_public_relations"
                          | "correspondence_schools"
                          | "cosmetic_stores"
                          | "counseling_services"
                          | "country_clubs"
                          | "courier_services"
                          | "court_costs"
                          | "credit_reporting_agencies"
                          | "cruise_lines"
                          | "dairy_products_stores"
                          | "dance_hall_studios_schools"
                          | "dating_escort_services"
                          | "dentists_orthodontists"
                          | "department_stores"
                          | "detective_agencies"
                          | "digital_goods_applications"
                          | "digital_goods_games"
                          | "digital_goods_large_volume"
                          | "digital_goods_media"
                          | "direct_marketing_catalog_merchant"
                          | "direct_marketing_combination_catalog_and_retail_merchant"
                          | "direct_marketing_inbound_telemarketing"
                          | "direct_marketing_insurance_services"
                          | "direct_marketing_other"
                          | "direct_marketing_outbound_telemarketing"
                          | "direct_marketing_subscription"
                          | "direct_marketing_travel"
                          | "discount_stores"
                          | "doctors"
                          | "door_to_door_sales"
                          | "drapery_window_covering_and_upholstery_stores"
                          | "drinking_places"
                          | "drug_stores_and_pharmacies"
                          | "drugs_drug_proprietaries_and_druggist_sundries"
                          | "dry_cleaners"
                          | "durable_goods"
                          | "duty_free_stores"
                          | "eating_places_restaurants"
                          | "educational_services"
                          | "electric_razor_stores"
                          | "electric_vehicle_charging"
                          | "electrical_parts_and_equipment"
                          | "electrical_services"
                          | "electronics_repair_shops"
                          | "electronics_stores"
                          | "elementary_secondary_schools"
                          | "emergency_services_gcas_visa_use_only"
                          | "employment_temp_agencies"
                          | "equipment_rental"
                          | "exterminating_services"
                          | "family_clothing_stores"
                          | "fast_food_restaurants"
                          | "financial_institutions"
                          | "fines_government_administrative_entities"
                          | "fireplace_fireplace_screens_and_accessories_stores"
                          | "floor_covering_stores"
                          | "florists"
                          | "florists_supplies_nursery_stock_and_flowers"
                          | "freezer_and_locker_meat_provisioners"
                          | "fuel_dealers_non_automotive"
                          | "funeral_services_crematories"
                          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                          | "furniture_repair_refinishing"
                          | "furriers_and_fur_shops"
                          | "general_services"
                          | "gift_card_novelty_and_souvenir_shops"
                          | "glass_paint_and_wallpaper_stores"
                          | "glassware_crystal_stores"
                          | "golf_courses_public"
                          | "government_licensed_horse_dog_racing_us_region_only"
                          | "government_licensed_online_casions_online_gambling_us_region_only"
                          | "government_owned_lotteries_non_us_region"
                          | "government_owned_lotteries_us_region_only"
                          | "government_services"
                          | "grocery_stores_supermarkets"
                          | "hardware_equipment_and_supplies"
                          | "hardware_stores"
                          | "health_and_beauty_spas"
                          | "hearing_aids_sales_and_supplies"
                          | "heating_plumbing_a_c"
                          | "hobby_toy_and_game_shops"
                          | "home_supply_warehouse_stores"
                          | "hospitals"
                          | "hotels_motels_and_resorts"
                          | "household_appliance_stores"
                          | "industrial_supplies"
                          | "information_retrieval_services"
                          | "insurance_default"
                          | "insurance_underwriting_premiums"
                          | "intra_company_purchases"
                          | "jewelry_stores_watches_clocks_and_silverware_stores"
                          | "landscaping_services"
                          | "laundries"
                          | "laundry_cleaning_services"
                          | "legal_services_attorneys"
                          | "luggage_and_leather_goods_stores"
                          | "lumber_building_materials_stores"
                          | "manual_cash_disburse"
                          | "marinas_service_and_supplies"
                          | "marketplaces"
                          | "masonry_stonework_and_plaster"
                          | "massage_parlors"
                          | "medical_and_dental_labs"
                          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                          | "medical_services"
                          | "membership_organizations"
                          | "mens_and_boys_clothing_and_accessories_stores"
                          | "mens_womens_clothing_stores"
                          | "metal_service_centers"
                          | "miscellaneous"
                          | "miscellaneous_apparel_and_accessory_shops"
                          | "miscellaneous_auto_dealers"
                          | "miscellaneous_business_services"
                          | "miscellaneous_food_stores"
                          | "miscellaneous_general_merchandise"
                          | "miscellaneous_general_services"
                          | "miscellaneous_home_furnishing_specialty_stores"
                          | "miscellaneous_publishing_and_printing"
                          | "miscellaneous_recreation_services"
                          | "miscellaneous_repair_shops"
                          | "miscellaneous_specialty_retail"
                          | "mobile_home_dealers"
                          | "motion_picture_theaters"
                          | "motor_freight_carriers_and_trucking"
                          | "motor_homes_dealers"
                          | "motor_vehicle_supplies_and_new_parts"
                          | "motorcycle_shops_and_dealers"
                          | "motorcycle_shops_dealers"
                          | "music_stores_musical_instruments_pianos_and_sheet_music"
                          | "news_dealers_and_newsstands"
                          | "non_fi_money_orders"
                          | "non_fi_stored_value_card_purchase_load"
                          | "nondurable_goods"
                          | "nurseries_lawn_and_garden_supply_stores"
                          | "nursing_personal_care"
                          | "office_and_commercial_furniture"
                          | "opticians_eyeglasses"
                          | "optometrists_ophthalmologist"
                          | "orthopedic_goods_prosthetic_devices"
                          | "osteopaths"
                          | "package_stores_beer_wine_and_liquor"
                          | "paints_varnishes_and_supplies"
                          | "parking_lots_garages"
                          | "passenger_railways"
                          | "pawn_shops"
                          | "pet_shops_pet_food_and_supplies"
                          | "petroleum_and_petroleum_products"
                          | "photo_developing"
                          | "photographic_photocopy_microfilm_equipment_and_supplies"
                          | "photographic_studios"
                          | "picture_video_production"
                          | "piece_goods_notions_and_other_dry_goods"
                          | "plumbing_heating_equipment_and_supplies"
                          | "political_organizations"
                          | "postal_services_government_only"
                          | "precious_stones_and_metals_watches_and_jewelry"
                          | "professional_services"
                          | "public_warehousing_and_storage"
                          | "quick_copy_repro_and_blueprint"
                          | "railroads"
                          | "real_estate_agents_and_managers_rentals"
                          | "record_stores"
                          | "recreational_vehicle_rentals"
                          | "religious_goods_stores"
                          | "religious_organizations"
                          | "roofing_siding_sheet_metal"
                          | "secretarial_support_services"
                          | "security_brokers_dealers"
                          | "service_stations"
                          | "sewing_needlework_fabric_and_piece_goods_stores"
                          | "shoe_repair_hat_cleaning"
                          | "shoe_stores"
                          | "small_appliance_repair"
                          | "snowmobile_dealers"
                          | "special_trade_services"
                          | "specialty_cleaning"
                          | "sporting_goods_stores"
                          | "sporting_recreation_camps"
                          | "sports_and_riding_apparel_stores"
                          | "sports_clubs_fields"
                          | "stamp_and_coin_stores"
                          | "stationary_office_supplies_printing_and_writing_paper"
                          | "stationery_stores_office_and_school_supply_stores"
                          | "swimming_pools_sales"
                          | "t_ui_travel_germany"
                          | "tailors_alterations"
                          | "tax_payments_government_agencies"
                          | "tax_preparation_services"
                          | "taxicabs_limousines"
                          | "telecommunication_equipment_and_telephone_sales"
                          | "telecommunication_services"
                          | "telegraph_services"
                          | "tent_and_awning_shops"
                          | "testing_laboratories"
                          | "theatrical_ticket_agencies"
                          | "timeshares"
                          | "tire_retreading_and_repair"
                          | "tolls_bridge_fees"
                          | "tourist_attractions_and_exhibits"
                          | "towing_services"
                          | "trailer_parks_campgrounds"
                          | "transportation_services"
                          | "travel_agencies_tour_operators"
                          | "truck_stop_iteration"
                          | "truck_utility_trailer_rentals"
                          | "typesetting_plate_making_and_related_services"
                          | "typewriter_stores"
                          | "u_s_federal_government_agencies_or_departments"
                          | "uniforms_commercial_clothing"
                          | "used_merchandise_and_secondhand_stores"
                          | "utilities"
                          | "variety_stores"
                          | "veterinary_services"
                          | "video_amusement_game_supplies"
                          | "video_game_arcades"
                          | "video_tape_rental_stores"
                          | "vocational_trade_schools"
                          | "watch_jewelry_repair"
                          | "welding_repair"
                          | "wholesale_clubs"
                          | "wig_and_toupee_stores"
                          | "wires_money_orders"
                          | "womens_accessory_and_specialty_shops"
                          | "womens_ready_to_wear_stores"
                          | "wrecking_and_salvage_yards"
                          | UnknownEnumStringValue
                        )[]
                      | undefined
                    interval:
                      | "all_time"
                      | "daily"
                      | "monthly"
                      | "per_authorization"
                      | "weekly"
                      | "yearly"
                      | UnknownEnumStringValue
                  }[]
                | undefined
              spending_limits_currency?: string | undefined
            }
          | undefined
        status?: ("active" | "inactive" | UnknownEnumStringValue) | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_cardholder>> {
    const url = `/v1/issuing/cardholders/${p["cardholder"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingCards(
    p: {
      cardholder?: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expMonth?: number
      expYear?: number
      expand?: string[]
      last4?: string
      limit?: number
      personalizationDesign?: string
      startingAfter?: string
      status?: "active" | "canceled" | "inactive" | UnknownEnumStringValue
      type?: "physical" | "virtual" | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_issuing_card[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/issuing/cards`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      cardholder: p["cardholder"],
      created: p["created"],
      ending_before: p["endingBefore"],
      exp_month: p["expMonth"],
      exp_year: p["expYear"],
      expand: p["expand"],
      last4: p["last4"],
      limit: p["limit"],
      personalization_design: p["personalizationDesign"],
      starting_after: p["startingAfter"],
      status: p["status"],
      type: p["type"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingCards(
    p: {
      requestBody: {
        cardholder?: string | undefined
        currency: string
        expand?: string[] | undefined
        financial_account?: string | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        personalization_design?: string | undefined
        pin?:
          | {
              encrypted_number?: string | undefined
            }
          | undefined
        replacement_for?: string | undefined
        replacement_reason?:
          | ("damaged" | "expired" | "lost" | "stolen" | UnknownEnumStringValue)
          | undefined
        second_line?: (string | "" | UnknownEnumStringValue) | undefined
        shipping?:
          | {
              address: {
                city: string
                country: string
                line1: string
                line2?: string | undefined
                postal_code: string
                state?: string | undefined
              }
              address_validation?:
                | {
                    mode:
                      | "disabled"
                      | "normalization_only"
                      | "validation_and_normalization"
                      | UnknownEnumStringValue
                  }
                | undefined
              customs?:
                | {
                    eori_number?: string | undefined
                  }
                | undefined
              name: string
              phone_number?: string | undefined
              require_signature?: boolean | undefined
              service?:
                | ("express" | "priority" | "standard" | UnknownEnumStringValue)
                | undefined
              type?:
                | ("bulk" | "individual" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        spending_controls?:
          | {
              allowed_categories?:
                | (
                    | "ac_refrigeration_repair"
                    | "accounting_bookkeeping_services"
                    | "advertising_services"
                    | "agricultural_cooperative"
                    | "airlines_air_carriers"
                    | "airports_flying_fields"
                    | "ambulance_services"
                    | "amusement_parks_carnivals"
                    | "antique_reproductions"
                    | "antique_shops"
                    | "aquariums"
                    | "architectural_surveying_services"
                    | "art_dealers_and_galleries"
                    | "artists_supply_and_craft_shops"
                    | "auto_and_home_supply_stores"
                    | "auto_body_repair_shops"
                    | "auto_paint_shops"
                    | "auto_service_shops"
                    | "automated_cash_disburse"
                    | "automated_fuel_dispensers"
                    | "automobile_associations"
                    | "automotive_parts_and_accessories_stores"
                    | "automotive_tire_stores"
                    | "bail_and_bond_payments"
                    | "bakeries"
                    | "bands_orchestras"
                    | "barber_and_beauty_shops"
                    | "betting_casino_gambling"
                    | "bicycle_shops"
                    | "billiard_pool_establishments"
                    | "boat_dealers"
                    | "boat_rentals_and_leases"
                    | "book_stores"
                    | "books_periodicals_and_newspapers"
                    | "bowling_alleys"
                    | "bus_lines"
                    | "business_secretarial_schools"
                    | "buying_shopping_services"
                    | "cable_satellite_and_other_pay_television_and_radio"
                    | "camera_and_photographic_supply_stores"
                    | "candy_nut_and_confectionery_stores"
                    | "car_and_truck_dealers_new_used"
                    | "car_and_truck_dealers_used_only"
                    | "car_rental_agencies"
                    | "car_washes"
                    | "carpentry_services"
                    | "carpet_upholstery_cleaning"
                    | "caterers"
                    | "charitable_and_social_service_organizations_fundraising"
                    | "chemicals_and_allied_products"
                    | "child_care_services"
                    | "childrens_and_infants_wear_stores"
                    | "chiropodists_podiatrists"
                    | "chiropractors"
                    | "cigar_stores_and_stands"
                    | "civic_social_fraternal_associations"
                    | "cleaning_and_maintenance"
                    | "clothing_rental"
                    | "colleges_universities"
                    | "commercial_equipment"
                    | "commercial_footwear"
                    | "commercial_photography_art_and_graphics"
                    | "commuter_transport_and_ferries"
                    | "computer_network_services"
                    | "computer_programming"
                    | "computer_repair"
                    | "computer_software_stores"
                    | "computers_peripherals_and_software"
                    | "concrete_work_services"
                    | "construction_materials"
                    | "consulting_public_relations"
                    | "correspondence_schools"
                    | "cosmetic_stores"
                    | "counseling_services"
                    | "country_clubs"
                    | "courier_services"
                    | "court_costs"
                    | "credit_reporting_agencies"
                    | "cruise_lines"
                    | "dairy_products_stores"
                    | "dance_hall_studios_schools"
                    | "dating_escort_services"
                    | "dentists_orthodontists"
                    | "department_stores"
                    | "detective_agencies"
                    | "digital_goods_applications"
                    | "digital_goods_games"
                    | "digital_goods_large_volume"
                    | "digital_goods_media"
                    | "direct_marketing_catalog_merchant"
                    | "direct_marketing_combination_catalog_and_retail_merchant"
                    | "direct_marketing_inbound_telemarketing"
                    | "direct_marketing_insurance_services"
                    | "direct_marketing_other"
                    | "direct_marketing_outbound_telemarketing"
                    | "direct_marketing_subscription"
                    | "direct_marketing_travel"
                    | "discount_stores"
                    | "doctors"
                    | "door_to_door_sales"
                    | "drapery_window_covering_and_upholstery_stores"
                    | "drinking_places"
                    | "drug_stores_and_pharmacies"
                    | "drugs_drug_proprietaries_and_druggist_sundries"
                    | "dry_cleaners"
                    | "durable_goods"
                    | "duty_free_stores"
                    | "eating_places_restaurants"
                    | "educational_services"
                    | "electric_razor_stores"
                    | "electric_vehicle_charging"
                    | "electrical_parts_and_equipment"
                    | "electrical_services"
                    | "electronics_repair_shops"
                    | "electronics_stores"
                    | "elementary_secondary_schools"
                    | "emergency_services_gcas_visa_use_only"
                    | "employment_temp_agencies"
                    | "equipment_rental"
                    | "exterminating_services"
                    | "family_clothing_stores"
                    | "fast_food_restaurants"
                    | "financial_institutions"
                    | "fines_government_administrative_entities"
                    | "fireplace_fireplace_screens_and_accessories_stores"
                    | "floor_covering_stores"
                    | "florists"
                    | "florists_supplies_nursery_stock_and_flowers"
                    | "freezer_and_locker_meat_provisioners"
                    | "fuel_dealers_non_automotive"
                    | "funeral_services_crematories"
                    | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    | "furniture_repair_refinishing"
                    | "furriers_and_fur_shops"
                    | "general_services"
                    | "gift_card_novelty_and_souvenir_shops"
                    | "glass_paint_and_wallpaper_stores"
                    | "glassware_crystal_stores"
                    | "golf_courses_public"
                    | "government_licensed_horse_dog_racing_us_region_only"
                    | "government_licensed_online_casions_online_gambling_us_region_only"
                    | "government_owned_lotteries_non_us_region"
                    | "government_owned_lotteries_us_region_only"
                    | "government_services"
                    | "grocery_stores_supermarkets"
                    | "hardware_equipment_and_supplies"
                    | "hardware_stores"
                    | "health_and_beauty_spas"
                    | "hearing_aids_sales_and_supplies"
                    | "heating_plumbing_a_c"
                    | "hobby_toy_and_game_shops"
                    | "home_supply_warehouse_stores"
                    | "hospitals"
                    | "hotels_motels_and_resorts"
                    | "household_appliance_stores"
                    | "industrial_supplies"
                    | "information_retrieval_services"
                    | "insurance_default"
                    | "insurance_underwriting_premiums"
                    | "intra_company_purchases"
                    | "jewelry_stores_watches_clocks_and_silverware_stores"
                    | "landscaping_services"
                    | "laundries"
                    | "laundry_cleaning_services"
                    | "legal_services_attorneys"
                    | "luggage_and_leather_goods_stores"
                    | "lumber_building_materials_stores"
                    | "manual_cash_disburse"
                    | "marinas_service_and_supplies"
                    | "marketplaces"
                    | "masonry_stonework_and_plaster"
                    | "massage_parlors"
                    | "medical_and_dental_labs"
                    | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    | "medical_services"
                    | "membership_organizations"
                    | "mens_and_boys_clothing_and_accessories_stores"
                    | "mens_womens_clothing_stores"
                    | "metal_service_centers"
                    | "miscellaneous"
                    | "miscellaneous_apparel_and_accessory_shops"
                    | "miscellaneous_auto_dealers"
                    | "miscellaneous_business_services"
                    | "miscellaneous_food_stores"
                    | "miscellaneous_general_merchandise"
                    | "miscellaneous_general_services"
                    | "miscellaneous_home_furnishing_specialty_stores"
                    | "miscellaneous_publishing_and_printing"
                    | "miscellaneous_recreation_services"
                    | "miscellaneous_repair_shops"
                    | "miscellaneous_specialty_retail"
                    | "mobile_home_dealers"
                    | "motion_picture_theaters"
                    | "motor_freight_carriers_and_trucking"
                    | "motor_homes_dealers"
                    | "motor_vehicle_supplies_and_new_parts"
                    | "motorcycle_shops_and_dealers"
                    | "motorcycle_shops_dealers"
                    | "music_stores_musical_instruments_pianos_and_sheet_music"
                    | "news_dealers_and_newsstands"
                    | "non_fi_money_orders"
                    | "non_fi_stored_value_card_purchase_load"
                    | "nondurable_goods"
                    | "nurseries_lawn_and_garden_supply_stores"
                    | "nursing_personal_care"
                    | "office_and_commercial_furniture"
                    | "opticians_eyeglasses"
                    | "optometrists_ophthalmologist"
                    | "orthopedic_goods_prosthetic_devices"
                    | "osteopaths"
                    | "package_stores_beer_wine_and_liquor"
                    | "paints_varnishes_and_supplies"
                    | "parking_lots_garages"
                    | "passenger_railways"
                    | "pawn_shops"
                    | "pet_shops_pet_food_and_supplies"
                    | "petroleum_and_petroleum_products"
                    | "photo_developing"
                    | "photographic_photocopy_microfilm_equipment_and_supplies"
                    | "photographic_studios"
                    | "picture_video_production"
                    | "piece_goods_notions_and_other_dry_goods"
                    | "plumbing_heating_equipment_and_supplies"
                    | "political_organizations"
                    | "postal_services_government_only"
                    | "precious_stones_and_metals_watches_and_jewelry"
                    | "professional_services"
                    | "public_warehousing_and_storage"
                    | "quick_copy_repro_and_blueprint"
                    | "railroads"
                    | "real_estate_agents_and_managers_rentals"
                    | "record_stores"
                    | "recreational_vehicle_rentals"
                    | "religious_goods_stores"
                    | "religious_organizations"
                    | "roofing_siding_sheet_metal"
                    | "secretarial_support_services"
                    | "security_brokers_dealers"
                    | "service_stations"
                    | "sewing_needlework_fabric_and_piece_goods_stores"
                    | "shoe_repair_hat_cleaning"
                    | "shoe_stores"
                    | "small_appliance_repair"
                    | "snowmobile_dealers"
                    | "special_trade_services"
                    | "specialty_cleaning"
                    | "sporting_goods_stores"
                    | "sporting_recreation_camps"
                    | "sports_and_riding_apparel_stores"
                    | "sports_clubs_fields"
                    | "stamp_and_coin_stores"
                    | "stationary_office_supplies_printing_and_writing_paper"
                    | "stationery_stores_office_and_school_supply_stores"
                    | "swimming_pools_sales"
                    | "t_ui_travel_germany"
                    | "tailors_alterations"
                    | "tax_payments_government_agencies"
                    | "tax_preparation_services"
                    | "taxicabs_limousines"
                    | "telecommunication_equipment_and_telephone_sales"
                    | "telecommunication_services"
                    | "telegraph_services"
                    | "tent_and_awning_shops"
                    | "testing_laboratories"
                    | "theatrical_ticket_agencies"
                    | "timeshares"
                    | "tire_retreading_and_repair"
                    | "tolls_bridge_fees"
                    | "tourist_attractions_and_exhibits"
                    | "towing_services"
                    | "trailer_parks_campgrounds"
                    | "transportation_services"
                    | "travel_agencies_tour_operators"
                    | "truck_stop_iteration"
                    | "truck_utility_trailer_rentals"
                    | "typesetting_plate_making_and_related_services"
                    | "typewriter_stores"
                    | "u_s_federal_government_agencies_or_departments"
                    | "uniforms_commercial_clothing"
                    | "used_merchandise_and_secondhand_stores"
                    | "utilities"
                    | "variety_stores"
                    | "veterinary_services"
                    | "video_amusement_game_supplies"
                    | "video_game_arcades"
                    | "video_tape_rental_stores"
                    | "vocational_trade_schools"
                    | "watch_jewelry_repair"
                    | "welding_repair"
                    | "wholesale_clubs"
                    | "wig_and_toupee_stores"
                    | "wires_money_orders"
                    | "womens_accessory_and_specialty_shops"
                    | "womens_ready_to_wear_stores"
                    | "wrecking_and_salvage_yards"
                    | UnknownEnumStringValue
                  )[]
                | undefined
              allowed_merchant_countries?: string[] | undefined
              blocked_categories?:
                | (
                    | "ac_refrigeration_repair"
                    | "accounting_bookkeeping_services"
                    | "advertising_services"
                    | "agricultural_cooperative"
                    | "airlines_air_carriers"
                    | "airports_flying_fields"
                    | "ambulance_services"
                    | "amusement_parks_carnivals"
                    | "antique_reproductions"
                    | "antique_shops"
                    | "aquariums"
                    | "architectural_surveying_services"
                    | "art_dealers_and_galleries"
                    | "artists_supply_and_craft_shops"
                    | "auto_and_home_supply_stores"
                    | "auto_body_repair_shops"
                    | "auto_paint_shops"
                    | "auto_service_shops"
                    | "automated_cash_disburse"
                    | "automated_fuel_dispensers"
                    | "automobile_associations"
                    | "automotive_parts_and_accessories_stores"
                    | "automotive_tire_stores"
                    | "bail_and_bond_payments"
                    | "bakeries"
                    | "bands_orchestras"
                    | "barber_and_beauty_shops"
                    | "betting_casino_gambling"
                    | "bicycle_shops"
                    | "billiard_pool_establishments"
                    | "boat_dealers"
                    | "boat_rentals_and_leases"
                    | "book_stores"
                    | "books_periodicals_and_newspapers"
                    | "bowling_alleys"
                    | "bus_lines"
                    | "business_secretarial_schools"
                    | "buying_shopping_services"
                    | "cable_satellite_and_other_pay_television_and_radio"
                    | "camera_and_photographic_supply_stores"
                    | "candy_nut_and_confectionery_stores"
                    | "car_and_truck_dealers_new_used"
                    | "car_and_truck_dealers_used_only"
                    | "car_rental_agencies"
                    | "car_washes"
                    | "carpentry_services"
                    | "carpet_upholstery_cleaning"
                    | "caterers"
                    | "charitable_and_social_service_organizations_fundraising"
                    | "chemicals_and_allied_products"
                    | "child_care_services"
                    | "childrens_and_infants_wear_stores"
                    | "chiropodists_podiatrists"
                    | "chiropractors"
                    | "cigar_stores_and_stands"
                    | "civic_social_fraternal_associations"
                    | "cleaning_and_maintenance"
                    | "clothing_rental"
                    | "colleges_universities"
                    | "commercial_equipment"
                    | "commercial_footwear"
                    | "commercial_photography_art_and_graphics"
                    | "commuter_transport_and_ferries"
                    | "computer_network_services"
                    | "computer_programming"
                    | "computer_repair"
                    | "computer_software_stores"
                    | "computers_peripherals_and_software"
                    | "concrete_work_services"
                    | "construction_materials"
                    | "consulting_public_relations"
                    | "correspondence_schools"
                    | "cosmetic_stores"
                    | "counseling_services"
                    | "country_clubs"
                    | "courier_services"
                    | "court_costs"
                    | "credit_reporting_agencies"
                    | "cruise_lines"
                    | "dairy_products_stores"
                    | "dance_hall_studios_schools"
                    | "dating_escort_services"
                    | "dentists_orthodontists"
                    | "department_stores"
                    | "detective_agencies"
                    | "digital_goods_applications"
                    | "digital_goods_games"
                    | "digital_goods_large_volume"
                    | "digital_goods_media"
                    | "direct_marketing_catalog_merchant"
                    | "direct_marketing_combination_catalog_and_retail_merchant"
                    | "direct_marketing_inbound_telemarketing"
                    | "direct_marketing_insurance_services"
                    | "direct_marketing_other"
                    | "direct_marketing_outbound_telemarketing"
                    | "direct_marketing_subscription"
                    | "direct_marketing_travel"
                    | "discount_stores"
                    | "doctors"
                    | "door_to_door_sales"
                    | "drapery_window_covering_and_upholstery_stores"
                    | "drinking_places"
                    | "drug_stores_and_pharmacies"
                    | "drugs_drug_proprietaries_and_druggist_sundries"
                    | "dry_cleaners"
                    | "durable_goods"
                    | "duty_free_stores"
                    | "eating_places_restaurants"
                    | "educational_services"
                    | "electric_razor_stores"
                    | "electric_vehicle_charging"
                    | "electrical_parts_and_equipment"
                    | "electrical_services"
                    | "electronics_repair_shops"
                    | "electronics_stores"
                    | "elementary_secondary_schools"
                    | "emergency_services_gcas_visa_use_only"
                    | "employment_temp_agencies"
                    | "equipment_rental"
                    | "exterminating_services"
                    | "family_clothing_stores"
                    | "fast_food_restaurants"
                    | "financial_institutions"
                    | "fines_government_administrative_entities"
                    | "fireplace_fireplace_screens_and_accessories_stores"
                    | "floor_covering_stores"
                    | "florists"
                    | "florists_supplies_nursery_stock_and_flowers"
                    | "freezer_and_locker_meat_provisioners"
                    | "fuel_dealers_non_automotive"
                    | "funeral_services_crematories"
                    | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    | "furniture_repair_refinishing"
                    | "furriers_and_fur_shops"
                    | "general_services"
                    | "gift_card_novelty_and_souvenir_shops"
                    | "glass_paint_and_wallpaper_stores"
                    | "glassware_crystal_stores"
                    | "golf_courses_public"
                    | "government_licensed_horse_dog_racing_us_region_only"
                    | "government_licensed_online_casions_online_gambling_us_region_only"
                    | "government_owned_lotteries_non_us_region"
                    | "government_owned_lotteries_us_region_only"
                    | "government_services"
                    | "grocery_stores_supermarkets"
                    | "hardware_equipment_and_supplies"
                    | "hardware_stores"
                    | "health_and_beauty_spas"
                    | "hearing_aids_sales_and_supplies"
                    | "heating_plumbing_a_c"
                    | "hobby_toy_and_game_shops"
                    | "home_supply_warehouse_stores"
                    | "hospitals"
                    | "hotels_motels_and_resorts"
                    | "household_appliance_stores"
                    | "industrial_supplies"
                    | "information_retrieval_services"
                    | "insurance_default"
                    | "insurance_underwriting_premiums"
                    | "intra_company_purchases"
                    | "jewelry_stores_watches_clocks_and_silverware_stores"
                    | "landscaping_services"
                    | "laundries"
                    | "laundry_cleaning_services"
                    | "legal_services_attorneys"
                    | "luggage_and_leather_goods_stores"
                    | "lumber_building_materials_stores"
                    | "manual_cash_disburse"
                    | "marinas_service_and_supplies"
                    | "marketplaces"
                    | "masonry_stonework_and_plaster"
                    | "massage_parlors"
                    | "medical_and_dental_labs"
                    | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    | "medical_services"
                    | "membership_organizations"
                    | "mens_and_boys_clothing_and_accessories_stores"
                    | "mens_womens_clothing_stores"
                    | "metal_service_centers"
                    | "miscellaneous"
                    | "miscellaneous_apparel_and_accessory_shops"
                    | "miscellaneous_auto_dealers"
                    | "miscellaneous_business_services"
                    | "miscellaneous_food_stores"
                    | "miscellaneous_general_merchandise"
                    | "miscellaneous_general_services"
                    | "miscellaneous_home_furnishing_specialty_stores"
                    | "miscellaneous_publishing_and_printing"
                    | "miscellaneous_recreation_services"
                    | "miscellaneous_repair_shops"
                    | "miscellaneous_specialty_retail"
                    | "mobile_home_dealers"
                    | "motion_picture_theaters"
                    | "motor_freight_carriers_and_trucking"
                    | "motor_homes_dealers"
                    | "motor_vehicle_supplies_and_new_parts"
                    | "motorcycle_shops_and_dealers"
                    | "motorcycle_shops_dealers"
                    | "music_stores_musical_instruments_pianos_and_sheet_music"
                    | "news_dealers_and_newsstands"
                    | "non_fi_money_orders"
                    | "non_fi_stored_value_card_purchase_load"
                    | "nondurable_goods"
                    | "nurseries_lawn_and_garden_supply_stores"
                    | "nursing_personal_care"
                    | "office_and_commercial_furniture"
                    | "opticians_eyeglasses"
                    | "optometrists_ophthalmologist"
                    | "orthopedic_goods_prosthetic_devices"
                    | "osteopaths"
                    | "package_stores_beer_wine_and_liquor"
                    | "paints_varnishes_and_supplies"
                    | "parking_lots_garages"
                    | "passenger_railways"
                    | "pawn_shops"
                    | "pet_shops_pet_food_and_supplies"
                    | "petroleum_and_petroleum_products"
                    | "photo_developing"
                    | "photographic_photocopy_microfilm_equipment_and_supplies"
                    | "photographic_studios"
                    | "picture_video_production"
                    | "piece_goods_notions_and_other_dry_goods"
                    | "plumbing_heating_equipment_and_supplies"
                    | "political_organizations"
                    | "postal_services_government_only"
                    | "precious_stones_and_metals_watches_and_jewelry"
                    | "professional_services"
                    | "public_warehousing_and_storage"
                    | "quick_copy_repro_and_blueprint"
                    | "railroads"
                    | "real_estate_agents_and_managers_rentals"
                    | "record_stores"
                    | "recreational_vehicle_rentals"
                    | "religious_goods_stores"
                    | "religious_organizations"
                    | "roofing_siding_sheet_metal"
                    | "secretarial_support_services"
                    | "security_brokers_dealers"
                    | "service_stations"
                    | "sewing_needlework_fabric_and_piece_goods_stores"
                    | "shoe_repair_hat_cleaning"
                    | "shoe_stores"
                    | "small_appliance_repair"
                    | "snowmobile_dealers"
                    | "special_trade_services"
                    | "specialty_cleaning"
                    | "sporting_goods_stores"
                    | "sporting_recreation_camps"
                    | "sports_and_riding_apparel_stores"
                    | "sports_clubs_fields"
                    | "stamp_and_coin_stores"
                    | "stationary_office_supplies_printing_and_writing_paper"
                    | "stationery_stores_office_and_school_supply_stores"
                    | "swimming_pools_sales"
                    | "t_ui_travel_germany"
                    | "tailors_alterations"
                    | "tax_payments_government_agencies"
                    | "tax_preparation_services"
                    | "taxicabs_limousines"
                    | "telecommunication_equipment_and_telephone_sales"
                    | "telecommunication_services"
                    | "telegraph_services"
                    | "tent_and_awning_shops"
                    | "testing_laboratories"
                    | "theatrical_ticket_agencies"
                    | "timeshares"
                    | "tire_retreading_and_repair"
                    | "tolls_bridge_fees"
                    | "tourist_attractions_and_exhibits"
                    | "towing_services"
                    | "trailer_parks_campgrounds"
                    | "transportation_services"
                    | "travel_agencies_tour_operators"
                    | "truck_stop_iteration"
                    | "truck_utility_trailer_rentals"
                    | "typesetting_plate_making_and_related_services"
                    | "typewriter_stores"
                    | "u_s_federal_government_agencies_or_departments"
                    | "uniforms_commercial_clothing"
                    | "used_merchandise_and_secondhand_stores"
                    | "utilities"
                    | "variety_stores"
                    | "veterinary_services"
                    | "video_amusement_game_supplies"
                    | "video_game_arcades"
                    | "video_tape_rental_stores"
                    | "vocational_trade_schools"
                    | "watch_jewelry_repair"
                    | "welding_repair"
                    | "wholesale_clubs"
                    | "wig_and_toupee_stores"
                    | "wires_money_orders"
                    | "womens_accessory_and_specialty_shops"
                    | "womens_ready_to_wear_stores"
                    | "wrecking_and_salvage_yards"
                    | UnknownEnumStringValue
                  )[]
                | undefined
              blocked_merchant_countries?: string[] | undefined
              spending_limits?:
                | {
                    amount: number
                    categories?:
                      | (
                          | "ac_refrigeration_repair"
                          | "accounting_bookkeeping_services"
                          | "advertising_services"
                          | "agricultural_cooperative"
                          | "airlines_air_carriers"
                          | "airports_flying_fields"
                          | "ambulance_services"
                          | "amusement_parks_carnivals"
                          | "antique_reproductions"
                          | "antique_shops"
                          | "aquariums"
                          | "architectural_surveying_services"
                          | "art_dealers_and_galleries"
                          | "artists_supply_and_craft_shops"
                          | "auto_and_home_supply_stores"
                          | "auto_body_repair_shops"
                          | "auto_paint_shops"
                          | "auto_service_shops"
                          | "automated_cash_disburse"
                          | "automated_fuel_dispensers"
                          | "automobile_associations"
                          | "automotive_parts_and_accessories_stores"
                          | "automotive_tire_stores"
                          | "bail_and_bond_payments"
                          | "bakeries"
                          | "bands_orchestras"
                          | "barber_and_beauty_shops"
                          | "betting_casino_gambling"
                          | "bicycle_shops"
                          | "billiard_pool_establishments"
                          | "boat_dealers"
                          | "boat_rentals_and_leases"
                          | "book_stores"
                          | "books_periodicals_and_newspapers"
                          | "bowling_alleys"
                          | "bus_lines"
                          | "business_secretarial_schools"
                          | "buying_shopping_services"
                          | "cable_satellite_and_other_pay_television_and_radio"
                          | "camera_and_photographic_supply_stores"
                          | "candy_nut_and_confectionery_stores"
                          | "car_and_truck_dealers_new_used"
                          | "car_and_truck_dealers_used_only"
                          | "car_rental_agencies"
                          | "car_washes"
                          | "carpentry_services"
                          | "carpet_upholstery_cleaning"
                          | "caterers"
                          | "charitable_and_social_service_organizations_fundraising"
                          | "chemicals_and_allied_products"
                          | "child_care_services"
                          | "childrens_and_infants_wear_stores"
                          | "chiropodists_podiatrists"
                          | "chiropractors"
                          | "cigar_stores_and_stands"
                          | "civic_social_fraternal_associations"
                          | "cleaning_and_maintenance"
                          | "clothing_rental"
                          | "colleges_universities"
                          | "commercial_equipment"
                          | "commercial_footwear"
                          | "commercial_photography_art_and_graphics"
                          | "commuter_transport_and_ferries"
                          | "computer_network_services"
                          | "computer_programming"
                          | "computer_repair"
                          | "computer_software_stores"
                          | "computers_peripherals_and_software"
                          | "concrete_work_services"
                          | "construction_materials"
                          | "consulting_public_relations"
                          | "correspondence_schools"
                          | "cosmetic_stores"
                          | "counseling_services"
                          | "country_clubs"
                          | "courier_services"
                          | "court_costs"
                          | "credit_reporting_agencies"
                          | "cruise_lines"
                          | "dairy_products_stores"
                          | "dance_hall_studios_schools"
                          | "dating_escort_services"
                          | "dentists_orthodontists"
                          | "department_stores"
                          | "detective_agencies"
                          | "digital_goods_applications"
                          | "digital_goods_games"
                          | "digital_goods_large_volume"
                          | "digital_goods_media"
                          | "direct_marketing_catalog_merchant"
                          | "direct_marketing_combination_catalog_and_retail_merchant"
                          | "direct_marketing_inbound_telemarketing"
                          | "direct_marketing_insurance_services"
                          | "direct_marketing_other"
                          | "direct_marketing_outbound_telemarketing"
                          | "direct_marketing_subscription"
                          | "direct_marketing_travel"
                          | "discount_stores"
                          | "doctors"
                          | "door_to_door_sales"
                          | "drapery_window_covering_and_upholstery_stores"
                          | "drinking_places"
                          | "drug_stores_and_pharmacies"
                          | "drugs_drug_proprietaries_and_druggist_sundries"
                          | "dry_cleaners"
                          | "durable_goods"
                          | "duty_free_stores"
                          | "eating_places_restaurants"
                          | "educational_services"
                          | "electric_razor_stores"
                          | "electric_vehicle_charging"
                          | "electrical_parts_and_equipment"
                          | "electrical_services"
                          | "electronics_repair_shops"
                          | "electronics_stores"
                          | "elementary_secondary_schools"
                          | "emergency_services_gcas_visa_use_only"
                          | "employment_temp_agencies"
                          | "equipment_rental"
                          | "exterminating_services"
                          | "family_clothing_stores"
                          | "fast_food_restaurants"
                          | "financial_institutions"
                          | "fines_government_administrative_entities"
                          | "fireplace_fireplace_screens_and_accessories_stores"
                          | "floor_covering_stores"
                          | "florists"
                          | "florists_supplies_nursery_stock_and_flowers"
                          | "freezer_and_locker_meat_provisioners"
                          | "fuel_dealers_non_automotive"
                          | "funeral_services_crematories"
                          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                          | "furniture_repair_refinishing"
                          | "furriers_and_fur_shops"
                          | "general_services"
                          | "gift_card_novelty_and_souvenir_shops"
                          | "glass_paint_and_wallpaper_stores"
                          | "glassware_crystal_stores"
                          | "golf_courses_public"
                          | "government_licensed_horse_dog_racing_us_region_only"
                          | "government_licensed_online_casions_online_gambling_us_region_only"
                          | "government_owned_lotteries_non_us_region"
                          | "government_owned_lotteries_us_region_only"
                          | "government_services"
                          | "grocery_stores_supermarkets"
                          | "hardware_equipment_and_supplies"
                          | "hardware_stores"
                          | "health_and_beauty_spas"
                          | "hearing_aids_sales_and_supplies"
                          | "heating_plumbing_a_c"
                          | "hobby_toy_and_game_shops"
                          | "home_supply_warehouse_stores"
                          | "hospitals"
                          | "hotels_motels_and_resorts"
                          | "household_appliance_stores"
                          | "industrial_supplies"
                          | "information_retrieval_services"
                          | "insurance_default"
                          | "insurance_underwriting_premiums"
                          | "intra_company_purchases"
                          | "jewelry_stores_watches_clocks_and_silverware_stores"
                          | "landscaping_services"
                          | "laundries"
                          | "laundry_cleaning_services"
                          | "legal_services_attorneys"
                          | "luggage_and_leather_goods_stores"
                          | "lumber_building_materials_stores"
                          | "manual_cash_disburse"
                          | "marinas_service_and_supplies"
                          | "marketplaces"
                          | "masonry_stonework_and_plaster"
                          | "massage_parlors"
                          | "medical_and_dental_labs"
                          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                          | "medical_services"
                          | "membership_organizations"
                          | "mens_and_boys_clothing_and_accessories_stores"
                          | "mens_womens_clothing_stores"
                          | "metal_service_centers"
                          | "miscellaneous"
                          | "miscellaneous_apparel_and_accessory_shops"
                          | "miscellaneous_auto_dealers"
                          | "miscellaneous_business_services"
                          | "miscellaneous_food_stores"
                          | "miscellaneous_general_merchandise"
                          | "miscellaneous_general_services"
                          | "miscellaneous_home_furnishing_specialty_stores"
                          | "miscellaneous_publishing_and_printing"
                          | "miscellaneous_recreation_services"
                          | "miscellaneous_repair_shops"
                          | "miscellaneous_specialty_retail"
                          | "mobile_home_dealers"
                          | "motion_picture_theaters"
                          | "motor_freight_carriers_and_trucking"
                          | "motor_homes_dealers"
                          | "motor_vehicle_supplies_and_new_parts"
                          | "motorcycle_shops_and_dealers"
                          | "motorcycle_shops_dealers"
                          | "music_stores_musical_instruments_pianos_and_sheet_music"
                          | "news_dealers_and_newsstands"
                          | "non_fi_money_orders"
                          | "non_fi_stored_value_card_purchase_load"
                          | "nondurable_goods"
                          | "nurseries_lawn_and_garden_supply_stores"
                          | "nursing_personal_care"
                          | "office_and_commercial_furniture"
                          | "opticians_eyeglasses"
                          | "optometrists_ophthalmologist"
                          | "orthopedic_goods_prosthetic_devices"
                          | "osteopaths"
                          | "package_stores_beer_wine_and_liquor"
                          | "paints_varnishes_and_supplies"
                          | "parking_lots_garages"
                          | "passenger_railways"
                          | "pawn_shops"
                          | "pet_shops_pet_food_and_supplies"
                          | "petroleum_and_petroleum_products"
                          | "photo_developing"
                          | "photographic_photocopy_microfilm_equipment_and_supplies"
                          | "photographic_studios"
                          | "picture_video_production"
                          | "piece_goods_notions_and_other_dry_goods"
                          | "plumbing_heating_equipment_and_supplies"
                          | "political_organizations"
                          | "postal_services_government_only"
                          | "precious_stones_and_metals_watches_and_jewelry"
                          | "professional_services"
                          | "public_warehousing_and_storage"
                          | "quick_copy_repro_and_blueprint"
                          | "railroads"
                          | "real_estate_agents_and_managers_rentals"
                          | "record_stores"
                          | "recreational_vehicle_rentals"
                          | "religious_goods_stores"
                          | "religious_organizations"
                          | "roofing_siding_sheet_metal"
                          | "secretarial_support_services"
                          | "security_brokers_dealers"
                          | "service_stations"
                          | "sewing_needlework_fabric_and_piece_goods_stores"
                          | "shoe_repair_hat_cleaning"
                          | "shoe_stores"
                          | "small_appliance_repair"
                          | "snowmobile_dealers"
                          | "special_trade_services"
                          | "specialty_cleaning"
                          | "sporting_goods_stores"
                          | "sporting_recreation_camps"
                          | "sports_and_riding_apparel_stores"
                          | "sports_clubs_fields"
                          | "stamp_and_coin_stores"
                          | "stationary_office_supplies_printing_and_writing_paper"
                          | "stationery_stores_office_and_school_supply_stores"
                          | "swimming_pools_sales"
                          | "t_ui_travel_germany"
                          | "tailors_alterations"
                          | "tax_payments_government_agencies"
                          | "tax_preparation_services"
                          | "taxicabs_limousines"
                          | "telecommunication_equipment_and_telephone_sales"
                          | "telecommunication_services"
                          | "telegraph_services"
                          | "tent_and_awning_shops"
                          | "testing_laboratories"
                          | "theatrical_ticket_agencies"
                          | "timeshares"
                          | "tire_retreading_and_repair"
                          | "tolls_bridge_fees"
                          | "tourist_attractions_and_exhibits"
                          | "towing_services"
                          | "trailer_parks_campgrounds"
                          | "transportation_services"
                          | "travel_agencies_tour_operators"
                          | "truck_stop_iteration"
                          | "truck_utility_trailer_rentals"
                          | "typesetting_plate_making_and_related_services"
                          | "typewriter_stores"
                          | "u_s_federal_government_agencies_or_departments"
                          | "uniforms_commercial_clothing"
                          | "used_merchandise_and_secondhand_stores"
                          | "utilities"
                          | "variety_stores"
                          | "veterinary_services"
                          | "video_amusement_game_supplies"
                          | "video_game_arcades"
                          | "video_tape_rental_stores"
                          | "vocational_trade_schools"
                          | "watch_jewelry_repair"
                          | "welding_repair"
                          | "wholesale_clubs"
                          | "wig_and_toupee_stores"
                          | "wires_money_orders"
                          | "womens_accessory_and_specialty_shops"
                          | "womens_ready_to_wear_stores"
                          | "wrecking_and_salvage_yards"
                          | UnknownEnumStringValue
                        )[]
                      | undefined
                    interval:
                      | "all_time"
                      | "daily"
                      | "monthly"
                      | "per_authorization"
                      | "weekly"
                      | "yearly"
                      | UnknownEnumStringValue
                  }[]
                | undefined
            }
          | undefined
        status?: ("active" | "inactive" | UnknownEnumStringValue) | undefined
        type: "physical" | "virtual" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_card>> {
    const url = `/v1/issuing/cards`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingCardsCard(
    p: {
      card: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_card>> {
    const url = `/v1/issuing/cards/${p["card"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingCardsCard(
    p: {
      card: string
      requestBody?: {
        cancellation_reason?:
          | ("lost" | "stolen" | UnknownEnumStringValue)
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        personalization_design?: string | undefined
        pin?:
          | {
              encrypted_number?: string | undefined
            }
          | undefined
        shipping?:
          | {
              address: {
                city: string
                country: string
                line1: string
                line2?: string | undefined
                postal_code: string
                state?: string | undefined
              }
              address_validation?:
                | {
                    mode:
                      | "disabled"
                      | "normalization_only"
                      | "validation_and_normalization"
                      | UnknownEnumStringValue
                  }
                | undefined
              customs?:
                | {
                    eori_number?: string | undefined
                  }
                | undefined
              name: string
              phone_number?: string | undefined
              require_signature?: boolean | undefined
              service?:
                | ("express" | "priority" | "standard" | UnknownEnumStringValue)
                | undefined
              type?:
                | ("bulk" | "individual" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        spending_controls?:
          | {
              allowed_categories?:
                | (
                    | "ac_refrigeration_repair"
                    | "accounting_bookkeeping_services"
                    | "advertising_services"
                    | "agricultural_cooperative"
                    | "airlines_air_carriers"
                    | "airports_flying_fields"
                    | "ambulance_services"
                    | "amusement_parks_carnivals"
                    | "antique_reproductions"
                    | "antique_shops"
                    | "aquariums"
                    | "architectural_surveying_services"
                    | "art_dealers_and_galleries"
                    | "artists_supply_and_craft_shops"
                    | "auto_and_home_supply_stores"
                    | "auto_body_repair_shops"
                    | "auto_paint_shops"
                    | "auto_service_shops"
                    | "automated_cash_disburse"
                    | "automated_fuel_dispensers"
                    | "automobile_associations"
                    | "automotive_parts_and_accessories_stores"
                    | "automotive_tire_stores"
                    | "bail_and_bond_payments"
                    | "bakeries"
                    | "bands_orchestras"
                    | "barber_and_beauty_shops"
                    | "betting_casino_gambling"
                    | "bicycle_shops"
                    | "billiard_pool_establishments"
                    | "boat_dealers"
                    | "boat_rentals_and_leases"
                    | "book_stores"
                    | "books_periodicals_and_newspapers"
                    | "bowling_alleys"
                    | "bus_lines"
                    | "business_secretarial_schools"
                    | "buying_shopping_services"
                    | "cable_satellite_and_other_pay_television_and_radio"
                    | "camera_and_photographic_supply_stores"
                    | "candy_nut_and_confectionery_stores"
                    | "car_and_truck_dealers_new_used"
                    | "car_and_truck_dealers_used_only"
                    | "car_rental_agencies"
                    | "car_washes"
                    | "carpentry_services"
                    | "carpet_upholstery_cleaning"
                    | "caterers"
                    | "charitable_and_social_service_organizations_fundraising"
                    | "chemicals_and_allied_products"
                    | "child_care_services"
                    | "childrens_and_infants_wear_stores"
                    | "chiropodists_podiatrists"
                    | "chiropractors"
                    | "cigar_stores_and_stands"
                    | "civic_social_fraternal_associations"
                    | "cleaning_and_maintenance"
                    | "clothing_rental"
                    | "colleges_universities"
                    | "commercial_equipment"
                    | "commercial_footwear"
                    | "commercial_photography_art_and_graphics"
                    | "commuter_transport_and_ferries"
                    | "computer_network_services"
                    | "computer_programming"
                    | "computer_repair"
                    | "computer_software_stores"
                    | "computers_peripherals_and_software"
                    | "concrete_work_services"
                    | "construction_materials"
                    | "consulting_public_relations"
                    | "correspondence_schools"
                    | "cosmetic_stores"
                    | "counseling_services"
                    | "country_clubs"
                    | "courier_services"
                    | "court_costs"
                    | "credit_reporting_agencies"
                    | "cruise_lines"
                    | "dairy_products_stores"
                    | "dance_hall_studios_schools"
                    | "dating_escort_services"
                    | "dentists_orthodontists"
                    | "department_stores"
                    | "detective_agencies"
                    | "digital_goods_applications"
                    | "digital_goods_games"
                    | "digital_goods_large_volume"
                    | "digital_goods_media"
                    | "direct_marketing_catalog_merchant"
                    | "direct_marketing_combination_catalog_and_retail_merchant"
                    | "direct_marketing_inbound_telemarketing"
                    | "direct_marketing_insurance_services"
                    | "direct_marketing_other"
                    | "direct_marketing_outbound_telemarketing"
                    | "direct_marketing_subscription"
                    | "direct_marketing_travel"
                    | "discount_stores"
                    | "doctors"
                    | "door_to_door_sales"
                    | "drapery_window_covering_and_upholstery_stores"
                    | "drinking_places"
                    | "drug_stores_and_pharmacies"
                    | "drugs_drug_proprietaries_and_druggist_sundries"
                    | "dry_cleaners"
                    | "durable_goods"
                    | "duty_free_stores"
                    | "eating_places_restaurants"
                    | "educational_services"
                    | "electric_razor_stores"
                    | "electric_vehicle_charging"
                    | "electrical_parts_and_equipment"
                    | "electrical_services"
                    | "electronics_repair_shops"
                    | "electronics_stores"
                    | "elementary_secondary_schools"
                    | "emergency_services_gcas_visa_use_only"
                    | "employment_temp_agencies"
                    | "equipment_rental"
                    | "exterminating_services"
                    | "family_clothing_stores"
                    | "fast_food_restaurants"
                    | "financial_institutions"
                    | "fines_government_administrative_entities"
                    | "fireplace_fireplace_screens_and_accessories_stores"
                    | "floor_covering_stores"
                    | "florists"
                    | "florists_supplies_nursery_stock_and_flowers"
                    | "freezer_and_locker_meat_provisioners"
                    | "fuel_dealers_non_automotive"
                    | "funeral_services_crematories"
                    | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    | "furniture_repair_refinishing"
                    | "furriers_and_fur_shops"
                    | "general_services"
                    | "gift_card_novelty_and_souvenir_shops"
                    | "glass_paint_and_wallpaper_stores"
                    | "glassware_crystal_stores"
                    | "golf_courses_public"
                    | "government_licensed_horse_dog_racing_us_region_only"
                    | "government_licensed_online_casions_online_gambling_us_region_only"
                    | "government_owned_lotteries_non_us_region"
                    | "government_owned_lotteries_us_region_only"
                    | "government_services"
                    | "grocery_stores_supermarkets"
                    | "hardware_equipment_and_supplies"
                    | "hardware_stores"
                    | "health_and_beauty_spas"
                    | "hearing_aids_sales_and_supplies"
                    | "heating_plumbing_a_c"
                    | "hobby_toy_and_game_shops"
                    | "home_supply_warehouse_stores"
                    | "hospitals"
                    | "hotels_motels_and_resorts"
                    | "household_appliance_stores"
                    | "industrial_supplies"
                    | "information_retrieval_services"
                    | "insurance_default"
                    | "insurance_underwriting_premiums"
                    | "intra_company_purchases"
                    | "jewelry_stores_watches_clocks_and_silverware_stores"
                    | "landscaping_services"
                    | "laundries"
                    | "laundry_cleaning_services"
                    | "legal_services_attorneys"
                    | "luggage_and_leather_goods_stores"
                    | "lumber_building_materials_stores"
                    | "manual_cash_disburse"
                    | "marinas_service_and_supplies"
                    | "marketplaces"
                    | "masonry_stonework_and_plaster"
                    | "massage_parlors"
                    | "medical_and_dental_labs"
                    | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    | "medical_services"
                    | "membership_organizations"
                    | "mens_and_boys_clothing_and_accessories_stores"
                    | "mens_womens_clothing_stores"
                    | "metal_service_centers"
                    | "miscellaneous"
                    | "miscellaneous_apparel_and_accessory_shops"
                    | "miscellaneous_auto_dealers"
                    | "miscellaneous_business_services"
                    | "miscellaneous_food_stores"
                    | "miscellaneous_general_merchandise"
                    | "miscellaneous_general_services"
                    | "miscellaneous_home_furnishing_specialty_stores"
                    | "miscellaneous_publishing_and_printing"
                    | "miscellaneous_recreation_services"
                    | "miscellaneous_repair_shops"
                    | "miscellaneous_specialty_retail"
                    | "mobile_home_dealers"
                    | "motion_picture_theaters"
                    | "motor_freight_carriers_and_trucking"
                    | "motor_homes_dealers"
                    | "motor_vehicle_supplies_and_new_parts"
                    | "motorcycle_shops_and_dealers"
                    | "motorcycle_shops_dealers"
                    | "music_stores_musical_instruments_pianos_and_sheet_music"
                    | "news_dealers_and_newsstands"
                    | "non_fi_money_orders"
                    | "non_fi_stored_value_card_purchase_load"
                    | "nondurable_goods"
                    | "nurseries_lawn_and_garden_supply_stores"
                    | "nursing_personal_care"
                    | "office_and_commercial_furniture"
                    | "opticians_eyeglasses"
                    | "optometrists_ophthalmologist"
                    | "orthopedic_goods_prosthetic_devices"
                    | "osteopaths"
                    | "package_stores_beer_wine_and_liquor"
                    | "paints_varnishes_and_supplies"
                    | "parking_lots_garages"
                    | "passenger_railways"
                    | "pawn_shops"
                    | "pet_shops_pet_food_and_supplies"
                    | "petroleum_and_petroleum_products"
                    | "photo_developing"
                    | "photographic_photocopy_microfilm_equipment_and_supplies"
                    | "photographic_studios"
                    | "picture_video_production"
                    | "piece_goods_notions_and_other_dry_goods"
                    | "plumbing_heating_equipment_and_supplies"
                    | "political_organizations"
                    | "postal_services_government_only"
                    | "precious_stones_and_metals_watches_and_jewelry"
                    | "professional_services"
                    | "public_warehousing_and_storage"
                    | "quick_copy_repro_and_blueprint"
                    | "railroads"
                    | "real_estate_agents_and_managers_rentals"
                    | "record_stores"
                    | "recreational_vehicle_rentals"
                    | "religious_goods_stores"
                    | "religious_organizations"
                    | "roofing_siding_sheet_metal"
                    | "secretarial_support_services"
                    | "security_brokers_dealers"
                    | "service_stations"
                    | "sewing_needlework_fabric_and_piece_goods_stores"
                    | "shoe_repair_hat_cleaning"
                    | "shoe_stores"
                    | "small_appliance_repair"
                    | "snowmobile_dealers"
                    | "special_trade_services"
                    | "specialty_cleaning"
                    | "sporting_goods_stores"
                    | "sporting_recreation_camps"
                    | "sports_and_riding_apparel_stores"
                    | "sports_clubs_fields"
                    | "stamp_and_coin_stores"
                    | "stationary_office_supplies_printing_and_writing_paper"
                    | "stationery_stores_office_and_school_supply_stores"
                    | "swimming_pools_sales"
                    | "t_ui_travel_germany"
                    | "tailors_alterations"
                    | "tax_payments_government_agencies"
                    | "tax_preparation_services"
                    | "taxicabs_limousines"
                    | "telecommunication_equipment_and_telephone_sales"
                    | "telecommunication_services"
                    | "telegraph_services"
                    | "tent_and_awning_shops"
                    | "testing_laboratories"
                    | "theatrical_ticket_agencies"
                    | "timeshares"
                    | "tire_retreading_and_repair"
                    | "tolls_bridge_fees"
                    | "tourist_attractions_and_exhibits"
                    | "towing_services"
                    | "trailer_parks_campgrounds"
                    | "transportation_services"
                    | "travel_agencies_tour_operators"
                    | "truck_stop_iteration"
                    | "truck_utility_trailer_rentals"
                    | "typesetting_plate_making_and_related_services"
                    | "typewriter_stores"
                    | "u_s_federal_government_agencies_or_departments"
                    | "uniforms_commercial_clothing"
                    | "used_merchandise_and_secondhand_stores"
                    | "utilities"
                    | "variety_stores"
                    | "veterinary_services"
                    | "video_amusement_game_supplies"
                    | "video_game_arcades"
                    | "video_tape_rental_stores"
                    | "vocational_trade_schools"
                    | "watch_jewelry_repair"
                    | "welding_repair"
                    | "wholesale_clubs"
                    | "wig_and_toupee_stores"
                    | "wires_money_orders"
                    | "womens_accessory_and_specialty_shops"
                    | "womens_ready_to_wear_stores"
                    | "wrecking_and_salvage_yards"
                    | UnknownEnumStringValue
                  )[]
                | undefined
              allowed_merchant_countries?: string[] | undefined
              blocked_categories?:
                | (
                    | "ac_refrigeration_repair"
                    | "accounting_bookkeeping_services"
                    | "advertising_services"
                    | "agricultural_cooperative"
                    | "airlines_air_carriers"
                    | "airports_flying_fields"
                    | "ambulance_services"
                    | "amusement_parks_carnivals"
                    | "antique_reproductions"
                    | "antique_shops"
                    | "aquariums"
                    | "architectural_surveying_services"
                    | "art_dealers_and_galleries"
                    | "artists_supply_and_craft_shops"
                    | "auto_and_home_supply_stores"
                    | "auto_body_repair_shops"
                    | "auto_paint_shops"
                    | "auto_service_shops"
                    | "automated_cash_disburse"
                    | "automated_fuel_dispensers"
                    | "automobile_associations"
                    | "automotive_parts_and_accessories_stores"
                    | "automotive_tire_stores"
                    | "bail_and_bond_payments"
                    | "bakeries"
                    | "bands_orchestras"
                    | "barber_and_beauty_shops"
                    | "betting_casino_gambling"
                    | "bicycle_shops"
                    | "billiard_pool_establishments"
                    | "boat_dealers"
                    | "boat_rentals_and_leases"
                    | "book_stores"
                    | "books_periodicals_and_newspapers"
                    | "bowling_alleys"
                    | "bus_lines"
                    | "business_secretarial_schools"
                    | "buying_shopping_services"
                    | "cable_satellite_and_other_pay_television_and_radio"
                    | "camera_and_photographic_supply_stores"
                    | "candy_nut_and_confectionery_stores"
                    | "car_and_truck_dealers_new_used"
                    | "car_and_truck_dealers_used_only"
                    | "car_rental_agencies"
                    | "car_washes"
                    | "carpentry_services"
                    | "carpet_upholstery_cleaning"
                    | "caterers"
                    | "charitable_and_social_service_organizations_fundraising"
                    | "chemicals_and_allied_products"
                    | "child_care_services"
                    | "childrens_and_infants_wear_stores"
                    | "chiropodists_podiatrists"
                    | "chiropractors"
                    | "cigar_stores_and_stands"
                    | "civic_social_fraternal_associations"
                    | "cleaning_and_maintenance"
                    | "clothing_rental"
                    | "colleges_universities"
                    | "commercial_equipment"
                    | "commercial_footwear"
                    | "commercial_photography_art_and_graphics"
                    | "commuter_transport_and_ferries"
                    | "computer_network_services"
                    | "computer_programming"
                    | "computer_repair"
                    | "computer_software_stores"
                    | "computers_peripherals_and_software"
                    | "concrete_work_services"
                    | "construction_materials"
                    | "consulting_public_relations"
                    | "correspondence_schools"
                    | "cosmetic_stores"
                    | "counseling_services"
                    | "country_clubs"
                    | "courier_services"
                    | "court_costs"
                    | "credit_reporting_agencies"
                    | "cruise_lines"
                    | "dairy_products_stores"
                    | "dance_hall_studios_schools"
                    | "dating_escort_services"
                    | "dentists_orthodontists"
                    | "department_stores"
                    | "detective_agencies"
                    | "digital_goods_applications"
                    | "digital_goods_games"
                    | "digital_goods_large_volume"
                    | "digital_goods_media"
                    | "direct_marketing_catalog_merchant"
                    | "direct_marketing_combination_catalog_and_retail_merchant"
                    | "direct_marketing_inbound_telemarketing"
                    | "direct_marketing_insurance_services"
                    | "direct_marketing_other"
                    | "direct_marketing_outbound_telemarketing"
                    | "direct_marketing_subscription"
                    | "direct_marketing_travel"
                    | "discount_stores"
                    | "doctors"
                    | "door_to_door_sales"
                    | "drapery_window_covering_and_upholstery_stores"
                    | "drinking_places"
                    | "drug_stores_and_pharmacies"
                    | "drugs_drug_proprietaries_and_druggist_sundries"
                    | "dry_cleaners"
                    | "durable_goods"
                    | "duty_free_stores"
                    | "eating_places_restaurants"
                    | "educational_services"
                    | "electric_razor_stores"
                    | "electric_vehicle_charging"
                    | "electrical_parts_and_equipment"
                    | "electrical_services"
                    | "electronics_repair_shops"
                    | "electronics_stores"
                    | "elementary_secondary_schools"
                    | "emergency_services_gcas_visa_use_only"
                    | "employment_temp_agencies"
                    | "equipment_rental"
                    | "exterminating_services"
                    | "family_clothing_stores"
                    | "fast_food_restaurants"
                    | "financial_institutions"
                    | "fines_government_administrative_entities"
                    | "fireplace_fireplace_screens_and_accessories_stores"
                    | "floor_covering_stores"
                    | "florists"
                    | "florists_supplies_nursery_stock_and_flowers"
                    | "freezer_and_locker_meat_provisioners"
                    | "fuel_dealers_non_automotive"
                    | "funeral_services_crematories"
                    | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    | "furniture_repair_refinishing"
                    | "furriers_and_fur_shops"
                    | "general_services"
                    | "gift_card_novelty_and_souvenir_shops"
                    | "glass_paint_and_wallpaper_stores"
                    | "glassware_crystal_stores"
                    | "golf_courses_public"
                    | "government_licensed_horse_dog_racing_us_region_only"
                    | "government_licensed_online_casions_online_gambling_us_region_only"
                    | "government_owned_lotteries_non_us_region"
                    | "government_owned_lotteries_us_region_only"
                    | "government_services"
                    | "grocery_stores_supermarkets"
                    | "hardware_equipment_and_supplies"
                    | "hardware_stores"
                    | "health_and_beauty_spas"
                    | "hearing_aids_sales_and_supplies"
                    | "heating_plumbing_a_c"
                    | "hobby_toy_and_game_shops"
                    | "home_supply_warehouse_stores"
                    | "hospitals"
                    | "hotels_motels_and_resorts"
                    | "household_appliance_stores"
                    | "industrial_supplies"
                    | "information_retrieval_services"
                    | "insurance_default"
                    | "insurance_underwriting_premiums"
                    | "intra_company_purchases"
                    | "jewelry_stores_watches_clocks_and_silverware_stores"
                    | "landscaping_services"
                    | "laundries"
                    | "laundry_cleaning_services"
                    | "legal_services_attorneys"
                    | "luggage_and_leather_goods_stores"
                    | "lumber_building_materials_stores"
                    | "manual_cash_disburse"
                    | "marinas_service_and_supplies"
                    | "marketplaces"
                    | "masonry_stonework_and_plaster"
                    | "massage_parlors"
                    | "medical_and_dental_labs"
                    | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    | "medical_services"
                    | "membership_organizations"
                    | "mens_and_boys_clothing_and_accessories_stores"
                    | "mens_womens_clothing_stores"
                    | "metal_service_centers"
                    | "miscellaneous"
                    | "miscellaneous_apparel_and_accessory_shops"
                    | "miscellaneous_auto_dealers"
                    | "miscellaneous_business_services"
                    | "miscellaneous_food_stores"
                    | "miscellaneous_general_merchandise"
                    | "miscellaneous_general_services"
                    | "miscellaneous_home_furnishing_specialty_stores"
                    | "miscellaneous_publishing_and_printing"
                    | "miscellaneous_recreation_services"
                    | "miscellaneous_repair_shops"
                    | "miscellaneous_specialty_retail"
                    | "mobile_home_dealers"
                    | "motion_picture_theaters"
                    | "motor_freight_carriers_and_trucking"
                    | "motor_homes_dealers"
                    | "motor_vehicle_supplies_and_new_parts"
                    | "motorcycle_shops_and_dealers"
                    | "motorcycle_shops_dealers"
                    | "music_stores_musical_instruments_pianos_and_sheet_music"
                    | "news_dealers_and_newsstands"
                    | "non_fi_money_orders"
                    | "non_fi_stored_value_card_purchase_load"
                    | "nondurable_goods"
                    | "nurseries_lawn_and_garden_supply_stores"
                    | "nursing_personal_care"
                    | "office_and_commercial_furniture"
                    | "opticians_eyeglasses"
                    | "optometrists_ophthalmologist"
                    | "orthopedic_goods_prosthetic_devices"
                    | "osteopaths"
                    | "package_stores_beer_wine_and_liquor"
                    | "paints_varnishes_and_supplies"
                    | "parking_lots_garages"
                    | "passenger_railways"
                    | "pawn_shops"
                    | "pet_shops_pet_food_and_supplies"
                    | "petroleum_and_petroleum_products"
                    | "photo_developing"
                    | "photographic_photocopy_microfilm_equipment_and_supplies"
                    | "photographic_studios"
                    | "picture_video_production"
                    | "piece_goods_notions_and_other_dry_goods"
                    | "plumbing_heating_equipment_and_supplies"
                    | "political_organizations"
                    | "postal_services_government_only"
                    | "precious_stones_and_metals_watches_and_jewelry"
                    | "professional_services"
                    | "public_warehousing_and_storage"
                    | "quick_copy_repro_and_blueprint"
                    | "railroads"
                    | "real_estate_agents_and_managers_rentals"
                    | "record_stores"
                    | "recreational_vehicle_rentals"
                    | "religious_goods_stores"
                    | "religious_organizations"
                    | "roofing_siding_sheet_metal"
                    | "secretarial_support_services"
                    | "security_brokers_dealers"
                    | "service_stations"
                    | "sewing_needlework_fabric_and_piece_goods_stores"
                    | "shoe_repair_hat_cleaning"
                    | "shoe_stores"
                    | "small_appliance_repair"
                    | "snowmobile_dealers"
                    | "special_trade_services"
                    | "specialty_cleaning"
                    | "sporting_goods_stores"
                    | "sporting_recreation_camps"
                    | "sports_and_riding_apparel_stores"
                    | "sports_clubs_fields"
                    | "stamp_and_coin_stores"
                    | "stationary_office_supplies_printing_and_writing_paper"
                    | "stationery_stores_office_and_school_supply_stores"
                    | "swimming_pools_sales"
                    | "t_ui_travel_germany"
                    | "tailors_alterations"
                    | "tax_payments_government_agencies"
                    | "tax_preparation_services"
                    | "taxicabs_limousines"
                    | "telecommunication_equipment_and_telephone_sales"
                    | "telecommunication_services"
                    | "telegraph_services"
                    | "tent_and_awning_shops"
                    | "testing_laboratories"
                    | "theatrical_ticket_agencies"
                    | "timeshares"
                    | "tire_retreading_and_repair"
                    | "tolls_bridge_fees"
                    | "tourist_attractions_and_exhibits"
                    | "towing_services"
                    | "trailer_parks_campgrounds"
                    | "transportation_services"
                    | "travel_agencies_tour_operators"
                    | "truck_stop_iteration"
                    | "truck_utility_trailer_rentals"
                    | "typesetting_plate_making_and_related_services"
                    | "typewriter_stores"
                    | "u_s_federal_government_agencies_or_departments"
                    | "uniforms_commercial_clothing"
                    | "used_merchandise_and_secondhand_stores"
                    | "utilities"
                    | "variety_stores"
                    | "veterinary_services"
                    | "video_amusement_game_supplies"
                    | "video_game_arcades"
                    | "video_tape_rental_stores"
                    | "vocational_trade_schools"
                    | "watch_jewelry_repair"
                    | "welding_repair"
                    | "wholesale_clubs"
                    | "wig_and_toupee_stores"
                    | "wires_money_orders"
                    | "womens_accessory_and_specialty_shops"
                    | "womens_ready_to_wear_stores"
                    | "wrecking_and_salvage_yards"
                    | UnknownEnumStringValue
                  )[]
                | undefined
              blocked_merchant_countries?: string[] | undefined
              spending_limits?:
                | {
                    amount: number
                    categories?:
                      | (
                          | "ac_refrigeration_repair"
                          | "accounting_bookkeeping_services"
                          | "advertising_services"
                          | "agricultural_cooperative"
                          | "airlines_air_carriers"
                          | "airports_flying_fields"
                          | "ambulance_services"
                          | "amusement_parks_carnivals"
                          | "antique_reproductions"
                          | "antique_shops"
                          | "aquariums"
                          | "architectural_surveying_services"
                          | "art_dealers_and_galleries"
                          | "artists_supply_and_craft_shops"
                          | "auto_and_home_supply_stores"
                          | "auto_body_repair_shops"
                          | "auto_paint_shops"
                          | "auto_service_shops"
                          | "automated_cash_disburse"
                          | "automated_fuel_dispensers"
                          | "automobile_associations"
                          | "automotive_parts_and_accessories_stores"
                          | "automotive_tire_stores"
                          | "bail_and_bond_payments"
                          | "bakeries"
                          | "bands_orchestras"
                          | "barber_and_beauty_shops"
                          | "betting_casino_gambling"
                          | "bicycle_shops"
                          | "billiard_pool_establishments"
                          | "boat_dealers"
                          | "boat_rentals_and_leases"
                          | "book_stores"
                          | "books_periodicals_and_newspapers"
                          | "bowling_alleys"
                          | "bus_lines"
                          | "business_secretarial_schools"
                          | "buying_shopping_services"
                          | "cable_satellite_and_other_pay_television_and_radio"
                          | "camera_and_photographic_supply_stores"
                          | "candy_nut_and_confectionery_stores"
                          | "car_and_truck_dealers_new_used"
                          | "car_and_truck_dealers_used_only"
                          | "car_rental_agencies"
                          | "car_washes"
                          | "carpentry_services"
                          | "carpet_upholstery_cleaning"
                          | "caterers"
                          | "charitable_and_social_service_organizations_fundraising"
                          | "chemicals_and_allied_products"
                          | "child_care_services"
                          | "childrens_and_infants_wear_stores"
                          | "chiropodists_podiatrists"
                          | "chiropractors"
                          | "cigar_stores_and_stands"
                          | "civic_social_fraternal_associations"
                          | "cleaning_and_maintenance"
                          | "clothing_rental"
                          | "colleges_universities"
                          | "commercial_equipment"
                          | "commercial_footwear"
                          | "commercial_photography_art_and_graphics"
                          | "commuter_transport_and_ferries"
                          | "computer_network_services"
                          | "computer_programming"
                          | "computer_repair"
                          | "computer_software_stores"
                          | "computers_peripherals_and_software"
                          | "concrete_work_services"
                          | "construction_materials"
                          | "consulting_public_relations"
                          | "correspondence_schools"
                          | "cosmetic_stores"
                          | "counseling_services"
                          | "country_clubs"
                          | "courier_services"
                          | "court_costs"
                          | "credit_reporting_agencies"
                          | "cruise_lines"
                          | "dairy_products_stores"
                          | "dance_hall_studios_schools"
                          | "dating_escort_services"
                          | "dentists_orthodontists"
                          | "department_stores"
                          | "detective_agencies"
                          | "digital_goods_applications"
                          | "digital_goods_games"
                          | "digital_goods_large_volume"
                          | "digital_goods_media"
                          | "direct_marketing_catalog_merchant"
                          | "direct_marketing_combination_catalog_and_retail_merchant"
                          | "direct_marketing_inbound_telemarketing"
                          | "direct_marketing_insurance_services"
                          | "direct_marketing_other"
                          | "direct_marketing_outbound_telemarketing"
                          | "direct_marketing_subscription"
                          | "direct_marketing_travel"
                          | "discount_stores"
                          | "doctors"
                          | "door_to_door_sales"
                          | "drapery_window_covering_and_upholstery_stores"
                          | "drinking_places"
                          | "drug_stores_and_pharmacies"
                          | "drugs_drug_proprietaries_and_druggist_sundries"
                          | "dry_cleaners"
                          | "durable_goods"
                          | "duty_free_stores"
                          | "eating_places_restaurants"
                          | "educational_services"
                          | "electric_razor_stores"
                          | "electric_vehicle_charging"
                          | "electrical_parts_and_equipment"
                          | "electrical_services"
                          | "electronics_repair_shops"
                          | "electronics_stores"
                          | "elementary_secondary_schools"
                          | "emergency_services_gcas_visa_use_only"
                          | "employment_temp_agencies"
                          | "equipment_rental"
                          | "exterminating_services"
                          | "family_clothing_stores"
                          | "fast_food_restaurants"
                          | "financial_institutions"
                          | "fines_government_administrative_entities"
                          | "fireplace_fireplace_screens_and_accessories_stores"
                          | "floor_covering_stores"
                          | "florists"
                          | "florists_supplies_nursery_stock_and_flowers"
                          | "freezer_and_locker_meat_provisioners"
                          | "fuel_dealers_non_automotive"
                          | "funeral_services_crematories"
                          | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                          | "furniture_repair_refinishing"
                          | "furriers_and_fur_shops"
                          | "general_services"
                          | "gift_card_novelty_and_souvenir_shops"
                          | "glass_paint_and_wallpaper_stores"
                          | "glassware_crystal_stores"
                          | "golf_courses_public"
                          | "government_licensed_horse_dog_racing_us_region_only"
                          | "government_licensed_online_casions_online_gambling_us_region_only"
                          | "government_owned_lotteries_non_us_region"
                          | "government_owned_lotteries_us_region_only"
                          | "government_services"
                          | "grocery_stores_supermarkets"
                          | "hardware_equipment_and_supplies"
                          | "hardware_stores"
                          | "health_and_beauty_spas"
                          | "hearing_aids_sales_and_supplies"
                          | "heating_plumbing_a_c"
                          | "hobby_toy_and_game_shops"
                          | "home_supply_warehouse_stores"
                          | "hospitals"
                          | "hotels_motels_and_resorts"
                          | "household_appliance_stores"
                          | "industrial_supplies"
                          | "information_retrieval_services"
                          | "insurance_default"
                          | "insurance_underwriting_premiums"
                          | "intra_company_purchases"
                          | "jewelry_stores_watches_clocks_and_silverware_stores"
                          | "landscaping_services"
                          | "laundries"
                          | "laundry_cleaning_services"
                          | "legal_services_attorneys"
                          | "luggage_and_leather_goods_stores"
                          | "lumber_building_materials_stores"
                          | "manual_cash_disburse"
                          | "marinas_service_and_supplies"
                          | "marketplaces"
                          | "masonry_stonework_and_plaster"
                          | "massage_parlors"
                          | "medical_and_dental_labs"
                          | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                          | "medical_services"
                          | "membership_organizations"
                          | "mens_and_boys_clothing_and_accessories_stores"
                          | "mens_womens_clothing_stores"
                          | "metal_service_centers"
                          | "miscellaneous"
                          | "miscellaneous_apparel_and_accessory_shops"
                          | "miscellaneous_auto_dealers"
                          | "miscellaneous_business_services"
                          | "miscellaneous_food_stores"
                          | "miscellaneous_general_merchandise"
                          | "miscellaneous_general_services"
                          | "miscellaneous_home_furnishing_specialty_stores"
                          | "miscellaneous_publishing_and_printing"
                          | "miscellaneous_recreation_services"
                          | "miscellaneous_repair_shops"
                          | "miscellaneous_specialty_retail"
                          | "mobile_home_dealers"
                          | "motion_picture_theaters"
                          | "motor_freight_carriers_and_trucking"
                          | "motor_homes_dealers"
                          | "motor_vehicle_supplies_and_new_parts"
                          | "motorcycle_shops_and_dealers"
                          | "motorcycle_shops_dealers"
                          | "music_stores_musical_instruments_pianos_and_sheet_music"
                          | "news_dealers_and_newsstands"
                          | "non_fi_money_orders"
                          | "non_fi_stored_value_card_purchase_load"
                          | "nondurable_goods"
                          | "nurseries_lawn_and_garden_supply_stores"
                          | "nursing_personal_care"
                          | "office_and_commercial_furniture"
                          | "opticians_eyeglasses"
                          | "optometrists_ophthalmologist"
                          | "orthopedic_goods_prosthetic_devices"
                          | "osteopaths"
                          | "package_stores_beer_wine_and_liquor"
                          | "paints_varnishes_and_supplies"
                          | "parking_lots_garages"
                          | "passenger_railways"
                          | "pawn_shops"
                          | "pet_shops_pet_food_and_supplies"
                          | "petroleum_and_petroleum_products"
                          | "photo_developing"
                          | "photographic_photocopy_microfilm_equipment_and_supplies"
                          | "photographic_studios"
                          | "picture_video_production"
                          | "piece_goods_notions_and_other_dry_goods"
                          | "plumbing_heating_equipment_and_supplies"
                          | "political_organizations"
                          | "postal_services_government_only"
                          | "precious_stones_and_metals_watches_and_jewelry"
                          | "professional_services"
                          | "public_warehousing_and_storage"
                          | "quick_copy_repro_and_blueprint"
                          | "railroads"
                          | "real_estate_agents_and_managers_rentals"
                          | "record_stores"
                          | "recreational_vehicle_rentals"
                          | "religious_goods_stores"
                          | "religious_organizations"
                          | "roofing_siding_sheet_metal"
                          | "secretarial_support_services"
                          | "security_brokers_dealers"
                          | "service_stations"
                          | "sewing_needlework_fabric_and_piece_goods_stores"
                          | "shoe_repair_hat_cleaning"
                          | "shoe_stores"
                          | "small_appliance_repair"
                          | "snowmobile_dealers"
                          | "special_trade_services"
                          | "specialty_cleaning"
                          | "sporting_goods_stores"
                          | "sporting_recreation_camps"
                          | "sports_and_riding_apparel_stores"
                          | "sports_clubs_fields"
                          | "stamp_and_coin_stores"
                          | "stationary_office_supplies_printing_and_writing_paper"
                          | "stationery_stores_office_and_school_supply_stores"
                          | "swimming_pools_sales"
                          | "t_ui_travel_germany"
                          | "tailors_alterations"
                          | "tax_payments_government_agencies"
                          | "tax_preparation_services"
                          | "taxicabs_limousines"
                          | "telecommunication_equipment_and_telephone_sales"
                          | "telecommunication_services"
                          | "telegraph_services"
                          | "tent_and_awning_shops"
                          | "testing_laboratories"
                          | "theatrical_ticket_agencies"
                          | "timeshares"
                          | "tire_retreading_and_repair"
                          | "tolls_bridge_fees"
                          | "tourist_attractions_and_exhibits"
                          | "towing_services"
                          | "trailer_parks_campgrounds"
                          | "transportation_services"
                          | "travel_agencies_tour_operators"
                          | "truck_stop_iteration"
                          | "truck_utility_trailer_rentals"
                          | "typesetting_plate_making_and_related_services"
                          | "typewriter_stores"
                          | "u_s_federal_government_agencies_or_departments"
                          | "uniforms_commercial_clothing"
                          | "used_merchandise_and_secondhand_stores"
                          | "utilities"
                          | "variety_stores"
                          | "veterinary_services"
                          | "video_amusement_game_supplies"
                          | "video_game_arcades"
                          | "video_tape_rental_stores"
                          | "vocational_trade_schools"
                          | "watch_jewelry_repair"
                          | "welding_repair"
                          | "wholesale_clubs"
                          | "wig_and_toupee_stores"
                          | "wires_money_orders"
                          | "womens_accessory_and_specialty_shops"
                          | "womens_ready_to_wear_stores"
                          | "wrecking_and_salvage_yards"
                          | UnknownEnumStringValue
                        )[]
                      | undefined
                    interval:
                      | "all_time"
                      | "daily"
                      | "monthly"
                      | "per_authorization"
                      | "weekly"
                      | "yearly"
                      | UnknownEnumStringValue
                  }[]
                | undefined
            }
          | undefined
        status?:
          | ("active" | "canceled" | "inactive" | UnknownEnumStringValue)
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_card>> {
    const url = `/v1/issuing/cards/${p["card"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingDisputes(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "expired"
        | "lost"
        | "submitted"
        | "unsubmitted"
        | "won"
        | UnknownEnumStringValue
      transaction?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_issuing_dispute[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/issuing/disputes`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      transaction: p["transaction"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingDisputes(
    p: {
      requestBody?: {
        amount?: number | undefined
        evidence?:
          | {
              canceled?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        canceled_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        cancellation_policy_provided?:
                          | (boolean | "" | UnknownEnumStringValue)
                          | undefined
                        cancellation_reason?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        expected_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_description?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_type?:
                          | (
                              | ""
                              | "merchandise"
                              | "service"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        return_status?:
                          | (
                              | ""
                              | "merchant_rejected"
                              | "successful"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        returned_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              duplicate?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        card_statement?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        cash_receipt?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        check_image?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        original_transaction?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              fraudulent?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              merchandise_not_as_described?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        received_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        return_description?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        return_status?:
                          | (
                              | ""
                              | "merchant_rejected"
                              | "successful"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        returned_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              no_valid_authorization?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              not_received?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        expected_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_description?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_type?:
                          | (
                              | ""
                              | "merchandise"
                              | "service"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              other?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_description?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_type?:
                          | (
                              | ""
                              | "merchandise"
                              | "service"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              reason?:
                | (
                    | "canceled"
                    | "duplicate"
                    | "fraudulent"
                    | "merchandise_not_as_described"
                    | "no_valid_authorization"
                    | "not_received"
                    | "other"
                    | "service_not_as_described"
                    | UnknownEnumStringValue
                  )
                | undefined
              service_not_as_described?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        canceled_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        cancellation_reason?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        received_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        transaction?: string | undefined
        treasury?:
          | {
              received_debit: string
            }
          | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_dispute>> {
    const url = `/v1/issuing/disputes`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingDisputesDispute(
    p: {
      dispute: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_dispute>> {
    const url = `/v1/issuing/disputes/${p["dispute"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingDisputesDispute(
    p: {
      dispute: string
      requestBody?: {
        amount?: number | undefined
        evidence?:
          | {
              canceled?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        canceled_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        cancellation_policy_provided?:
                          | (boolean | "" | UnknownEnumStringValue)
                          | undefined
                        cancellation_reason?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        expected_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_description?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_type?:
                          | (
                              | ""
                              | "merchandise"
                              | "service"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        return_status?:
                          | (
                              | ""
                              | "merchant_rejected"
                              | "successful"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        returned_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              duplicate?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        card_statement?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        cash_receipt?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        check_image?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        original_transaction?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              fraudulent?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              merchandise_not_as_described?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        received_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        return_description?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        return_status?:
                          | (
                              | ""
                              | "merchant_rejected"
                              | "successful"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        returned_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              no_valid_authorization?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              not_received?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        expected_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_description?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_type?:
                          | (
                              | ""
                              | "merchandise"
                              | "service"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              other?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_description?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        product_type?:
                          | (
                              | ""
                              | "merchandise"
                              | "service"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              reason?:
                | (
                    | "canceled"
                    | "duplicate"
                    | "fraudulent"
                    | "merchandise_not_as_described"
                    | "no_valid_authorization"
                    | "not_received"
                    | "other"
                    | "service_not_as_described"
                    | UnknownEnumStringValue
                  )
                | undefined
              service_not_as_described?:
                | (
                    | {
                        additional_documentation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        canceled_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        cancellation_reason?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        explanation?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        received_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_dispute>> {
    const url = `/v1/issuing/disputes/${p["dispute"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingDisputesDisputeSubmit(
    p: {
      dispute: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_dispute>> {
    const url = `/v1/issuing/disputes/${p["dispute"]}/submit`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingPersonalizationDesigns(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      lookupKeys?: string[]
      preferences?: {
        is_default?: boolean | undefined
        is_platform_default?: boolean | undefined
      }
      startingAfter?: string
      status?:
        | "active"
        | "inactive"
        | "rejected"
        | "review"
        | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_issuing_personalization_design[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/issuing/personalization_designs`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      lookup_keys: p["lookupKeys"],
      preferences: p["preferences"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingPersonalizationDesigns(
    p: {
      requestBody: {
        card_logo?: string | undefined
        carrier_text?:
          | {
              footer_body?: (string | "" | UnknownEnumStringValue) | undefined
              footer_title?: (string | "" | UnknownEnumStringValue) | undefined
              header_body?: (string | "" | UnknownEnumStringValue) | undefined
              header_title?: (string | "" | UnknownEnumStringValue) | undefined
            }
          | undefined
        expand?: string[] | undefined
        lookup_key?: string | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        name?: string | undefined
        physical_bundle: string
        preferences?:
          | {
              is_default: boolean
            }
          | undefined
        transfer_lookup_key?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_personalization_design>> {
    const url = `/v1/issuing/personalization_designs`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingPersonalizationDesignsPersonalizationDesign(
    p: {
      expand?: string[]
      personalizationDesign: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_personalization_design>> {
    const url = `/v1/issuing/personalization_designs/${p["personalizationDesign"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingPersonalizationDesignsPersonalizationDesign(
    p: {
      personalizationDesign: string
      requestBody?: {
        card_logo?: (string | "" | UnknownEnumStringValue) | undefined
        carrier_text?:
          | (
              | {
                  footer_body?:
                    | (string | "" | UnknownEnumStringValue)
                    | undefined
                  footer_title?:
                    | (string | "" | UnknownEnumStringValue)
                    | undefined
                  header_body?:
                    | (string | "" | UnknownEnumStringValue)
                    | undefined
                  header_title?:
                    | (string | "" | UnknownEnumStringValue)
                    | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        lookup_key?: (string | "" | UnknownEnumStringValue) | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        name?: (string | "" | UnknownEnumStringValue) | undefined
        physical_bundle?: string | undefined
        preferences?:
          | {
              is_default: boolean
            }
          | undefined
        transfer_lookup_key?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_personalization_design>> {
    const url = `/v1/issuing/personalization_designs/${p["personalizationDesign"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingPhysicalBundles(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: "active" | "inactive" | "review" | UnknownEnumStringValue
      type?: "custom" | "standard" | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_issuing_physical_bundle[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/issuing/physical_bundles`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      type: p["type"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingPhysicalBundlesPhysicalBundle(
    p: {
      expand?: string[]
      physicalBundle: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_physical_bundle>> {
    const url = `/v1/issuing/physical_bundles/${p["physicalBundle"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingSettlementsSettlement(
    p: {
      expand?: string[]
      settlement: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_settlement>> {
    const url = `/v1/issuing/settlements/${p["settlement"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingSettlementsSettlement(
    p: {
      settlement: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_settlement>> {
    const url = `/v1/issuing/settlements/${p["settlement"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingTokens(
    p: {
      card: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "active"
        | "deleted"
        | "requested"
        | "suspended"
        | UnknownEnumStringValue
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_issuing_token[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/issuing/tokens`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      card: p["card"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingTokensToken(
    p: {
      expand?: string[]
      token: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_token>> {
    const url = `/v1/issuing/tokens/${p["token"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingTokensToken(
    p: {
      token: string
      requestBody: {
        expand?: string[] | undefined
        status: "active" | "deleted" | "suspended" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_token>> {
    const url = `/v1/issuing/tokens/${p["token"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingTransactions(
    p: {
      card?: string
      cardholder?: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?: "capture" | "refund" | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_issuing_transaction[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/issuing/transactions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      card: p["card"],
      cardholder: p["cardholder"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getIssuingTransactionsTransaction(
    p: {
      expand?: string[]
      transaction: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_transaction>> {
    const url = `/v1/issuing/transactions/${p["transaction"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postIssuingTransactionsTransaction(
    p: {
      transaction: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_transaction>> {
    const url = `/v1/issuing/transactions/${p["transaction"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postLinkAccountSessions(
    p: {
      requestBody: {
        account_holder: {
          account?: string | undefined
          customer?: string | undefined
          type: "account" | "customer" | UnknownEnumStringValue
        }
        expand?: string[] | undefined
        filters?:
          | {
              account_subcategories?:
                | (
                    | "checking"
                    | "credit_card"
                    | "line_of_credit"
                    | "mortgage"
                    | "savings"
                    | UnknownEnumStringValue
                  )[]
                | undefined
              countries?: string[] | undefined
            }
          | undefined
        permissions: (
          | "balances"
          | "ownership"
          | "payment_method"
          | "transactions"
          | UnknownEnumStringValue
        )[]
        prefetch?:
          | (
              | "balances"
              | "ownership"
              | "transactions"
              | UnknownEnumStringValue
            )[]
          | undefined
        return_url?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_session>> {
    const url = `/v1/link_account_sessions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getLinkAccountSessionsSession(
    p: {
      expand?: string[]
      session: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_session>> {
    const url = `/v1/link_account_sessions/${p["session"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getLinkedAccounts(
    p: {
      accountHolder?: {
        account?: string | undefined
        customer?: string | undefined
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      session?: string
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_financial_connections_account[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/linked_accounts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      account_holder: p["accountHolder"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      session: p["session"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getLinkedAccountsAccount(
    p: {
      account: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_account>> {
    const url = `/v1/linked_accounts/${p["account"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postLinkedAccountsAccountDisconnect(
    p: {
      account: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_account>> {
    const url = `/v1/linked_accounts/${p["account"]}/disconnect`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getLinkedAccountsAccountOwners(
    p: {
      account: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      ownership: string
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_financial_connections_account_owner[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/linked_accounts/${p["account"]}/owners`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      ownership: p["ownership"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postLinkedAccountsAccountRefresh(
    p: {
      account: string
      requestBody: {
        expand?: string[] | undefined
        features: (
          | "balance"
          | "ownership"
          | "transactions"
          | UnknownEnumStringValue
        )[]
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_financial_connections_account>> {
    const url = `/v1/linked_accounts/${p["account"]}/refresh`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getMandatesMandate(
    p: {
      expand?: string[]
      mandate: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_mandate>> {
    const url = `/v1/mandates/${p["mandate"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentIntents(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_payment_intent[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/payment_intents`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentIntents(
    p: {
      requestBody: {
        amount: number
        application_fee_amount?: number | undefined
        automatic_payment_methods?:
          | {
              allow_redirects?:
                | ("always" | "never" | UnknownEnumStringValue)
                | undefined
              enabled: boolean
            }
          | undefined
        capture_method?:
          | (
              | "automatic"
              | "automatic_async"
              | "manual"
              | UnknownEnumStringValue
            )
          | undefined
        confirm?: boolean | undefined
        confirmation_method?:
          | ("automatic" | "manual" | UnknownEnumStringValue)
          | undefined
        confirmation_token?: string | undefined
        currency: string
        customer?: string | undefined
        description?: string | undefined
        error_on_requires_action?: boolean | undefined
        expand?: string[] | undefined
        mandate?: string | undefined
        mandate_data?:
          | (
              | {
                  customer_acceptance: {
                    accepted_at?: number | undefined
                    offline?: EmptyObject | undefined
                    online?:
                      | {
                          ip_address: string
                          user_agent: string
                        }
                      | undefined
                    type: "offline" | "online" | UnknownEnumStringValue
                  }
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        off_session?:
          | (boolean | "one_off" | "recurring" | UnknownEnumStringValue)
          | undefined
        on_behalf_of?: string | undefined
        payment_method?: string | undefined
        payment_method_configuration?: string | undefined
        payment_method_data?:
          | {
              acss_debit?:
                | {
                    account_number: string
                    institution_number: string
                    transit_number: string
                  }
                | undefined
              affirm?: EmptyObject | undefined
              afterpay_clearpay?: EmptyObject | undefined
              alipay?: EmptyObject | undefined
              allow_redisplay?:
                | (
                    | "always"
                    | "limited"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              alma?: EmptyObject | undefined
              amazon_pay?: EmptyObject | undefined
              au_becs_debit?:
                | {
                    account_number: string
                    bsb_number: string
                  }
                | undefined
              bacs_debit?:
                | {
                    account_number?: string | undefined
                    sort_code?: string | undefined
                  }
                | undefined
              bancontact?: EmptyObject | undefined
              billie?: EmptyObject | undefined
              billing_details?:
                | {
                    address?:
                      | (
                          | {
                              city?: string | undefined
                              country?: string | undefined
                              line1?: string | undefined
                              line2?: string | undefined
                              postal_code?: string | undefined
                              state?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    email?: (string | "" | UnknownEnumStringValue) | undefined
                    name?: (string | "" | UnknownEnumStringValue) | undefined
                    phone?: (string | "" | UnknownEnumStringValue) | undefined
                  }
                | undefined
              blik?: EmptyObject | undefined
              boleto?:
                | {
                    tax_id: string
                  }
                | undefined
              cashapp?: EmptyObject | undefined
              customer_balance?: EmptyObject | undefined
              eps?:
                | {
                    bank?:
                      | (
                          | "arzte_und_apotheker_bank"
                          | "austrian_anadi_bank_ag"
                          | "bank_austria"
                          | "bankhaus_carl_spangler"
                          | "bankhaus_schelhammer_und_schattera_ag"
                          | "bawag_psk_ag"
                          | "bks_bank_ag"
                          | "brull_kallmus_bank_ag"
                          | "btv_vier_lander_bank"
                          | "capital_bank_grawe_gruppe_ag"
                          | "deutsche_bank_ag"
                          | "dolomitenbank"
                          | "easybank_ag"
                          | "erste_bank_und_sparkassen"
                          | "hypo_alpeadriabank_international_ag"
                          | "hypo_bank_burgenland_aktiengesellschaft"
                          | "hypo_noe_lb_fur_niederosterreich_u_wien"
                          | "hypo_oberosterreich_salzburg_steiermark"
                          | "hypo_tirol_bank_ag"
                          | "hypo_vorarlberg_bank_ag"
                          | "marchfelder_bank"
                          | "oberbank_ag"
                          | "raiffeisen_bankengruppe_osterreich"
                          | "schoellerbank_ag"
                          | "sparda_bank_wien"
                          | "volksbank_gruppe"
                          | "volkskreditbank_ag"
                          | "vr_bank_braunau"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              fpx?:
                | {
                    bank:
                      | "affin_bank"
                      | "agrobank"
                      | "alliance_bank"
                      | "ambank"
                      | "bank_islam"
                      | "bank_muamalat"
                      | "bank_of_china"
                      | "bank_rakyat"
                      | "bsn"
                      | "cimb"
                      | "deutsche_bank"
                      | "hong_leong_bank"
                      | "hsbc"
                      | "kfh"
                      | "maybank2e"
                      | "maybank2u"
                      | "ocbc"
                      | "pb_enterprise"
                      | "public_bank"
                      | "rhb"
                      | "standard_chartered"
                      | "uob"
                      | UnknownEnumStringValue
                  }
                | undefined
              giropay?: EmptyObject | undefined
              grabpay?: EmptyObject | undefined
              ideal?:
                | {
                    bank?:
                      | (
                          | "abn_amro"
                          | "asn_bank"
                          | "bunq"
                          | "handelsbanken"
                          | "ing"
                          | "knab"
                          | "moneyou"
                          | "n26"
                          | "nn"
                          | "rabobank"
                          | "regiobank"
                          | "revolut"
                          | "sns_bank"
                          | "triodos_bank"
                          | "van_lanschot"
                          | "yoursafe"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              interac_present?: EmptyObject | undefined
              kakao_pay?: EmptyObject | undefined
              klarna?:
                | {
                    dob?:
                      | {
                          day: number
                          month: number
                          year: number
                        }
                      | undefined
                  }
                | undefined
              konbini?: EmptyObject | undefined
              kr_card?: EmptyObject | undefined
              link?: EmptyObject | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              mobilepay?: EmptyObject | undefined
              multibanco?: EmptyObject | undefined
              naver_pay?:
                | {
                    funding?:
                      | ("card" | "points" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              nz_bank_account?:
                | {
                    account_holder_name?: string | undefined
                    account_number: string
                    bank_code: string
                    branch_code: string
                    reference?: string | undefined
                    suffix: string
                  }
                | undefined
              oxxo?: EmptyObject | undefined
              p24?:
                | {
                    bank?:
                      | (
                          | "alior_bank"
                          | "bank_millennium"
                          | "bank_nowy_bfg_sa"
                          | "bank_pekao_sa"
                          | "banki_spbdzielcze"
                          | "blik"
                          | "bnp_paribas"
                          | "boz"
                          | "citi_handlowy"
                          | "credit_agricole"
                          | "envelobank"
                          | "etransfer_pocztowy24"
                          | "getin_bank"
                          | "ideabank"
                          | "ing"
                          | "inteligo"
                          | "mbank_mtransfer"
                          | "nest_przelew"
                          | "noble_pay"
                          | "pbac_z_ipko"
                          | "plus_bank"
                          | "santander_przelew24"
                          | "tmobile_usbugi_bankowe"
                          | "toyota_bank"
                          | "velobank"
                          | "volkswagen_bank"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              pay_by_bank?: EmptyObject | undefined
              payco?: EmptyObject | undefined
              paynow?: EmptyObject | undefined
              paypal?: EmptyObject | undefined
              pix?: EmptyObject | undefined
              promptpay?: EmptyObject | undefined
              radar_options?:
                | {
                    session?: string | undefined
                  }
                | undefined
              revolut_pay?: EmptyObject | undefined
              samsung_pay?: EmptyObject | undefined
              satispay?: EmptyObject | undefined
              sepa_debit?:
                | {
                    iban: string
                  }
                | undefined
              sofort?:
                | {
                    country:
                      | "AT"
                      | "BE"
                      | "DE"
                      | "ES"
                      | "IT"
                      | "NL"
                      | UnknownEnumStringValue
                  }
                | undefined
              swish?: EmptyObject | undefined
              twint?: EmptyObject | undefined
              type:
                | "acss_debit"
                | "affirm"
                | "afterpay_clearpay"
                | "alipay"
                | "alma"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "billie"
                | "blik"
                | "boleto"
                | "cashapp"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "mobilepay"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "oxxo"
                | "p24"
                | "pay_by_bank"
                | "payco"
                | "paynow"
                | "paypal"
                | "pix"
                | "promptpay"
                | "revolut_pay"
                | "samsung_pay"
                | "satispay"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "twint"
                | "us_bank_account"
                | "wechat_pay"
                | "zip"
                | UnknownEnumStringValue
              us_bank_account?:
                | {
                    account_holder_type?:
                      | ("company" | "individual" | UnknownEnumStringValue)
                      | undefined
                    account_number?: string | undefined
                    account_type?:
                      | ("checking" | "savings" | UnknownEnumStringValue)
                      | undefined
                    financial_connections_account?: string | undefined
                    routing_number?: string | undefined
                  }
                | undefined
              wechat_pay?: EmptyObject | undefined
              zip?: EmptyObject | undefined
            }
          | undefined
        payment_method_options?:
          | {
              acss_debit?:
                | (
                    | {
                        mandate_options?:
                          | {
                              custom_mandate_url?:
                                | (string | "" | UnknownEnumStringValue)
                                | undefined
                              interval_description?: string | undefined
                              payment_schedule?:
                                | (
                                    | "combined"
                                    | "interval"
                                    | "sporadic"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              transaction_type?:
                                | (
                                    | "business"
                                    | "personal"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                        verification_method?:
                          | (
                              | "automatic"
                              | "instant"
                              | "microdeposits"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              affirm?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        preferred_locale?: string | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              afterpay_clearpay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        reference?: string | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              alipay?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              alma?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              amazon_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              au_becs_debit?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              bacs_debit?:
                | (
                    | {
                        mandate_options?:
                          | {
                              reference_prefix?:
                                | (string | "" | UnknownEnumStringValue)
                                | undefined
                            }
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              bancontact?:
                | (
                    | {
                        preferred_language?:
                          | ("de" | "en" | "fr" | "nl" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              blik?:
                | (
                    | {
                        code?: string | undefined
                        setup_future_usage?:
                          | ("" | "none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              boleto?:
                | (
                    | {
                        expires_after_days?: number | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              card?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        cvc_token?: string | undefined
                        installments?:
                          | {
                              enabled?: boolean | undefined
                              plan?:
                                | (
                                    | {
                                        count?: number | undefined
                                        interval?:
                                          | ("month" | UnknownEnumStringValue)
                                          | undefined
                                        type:
                                          | "fixed_count"
                                          | UnknownEnumStringValue
                                      }
                                    | ""
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | undefined
                        mandate_options?:
                          | {
                              amount: number
                              amount_type:
                                | "fixed"
                                | "maximum"
                                | UnknownEnumStringValue
                              description?: string | undefined
                              end_date?: number | undefined
                              interval:
                                | "day"
                                | "month"
                                | "sporadic"
                                | "week"
                                | "year"
                                | UnknownEnumStringValue
                              interval_count?: number | undefined
                              reference: string
                              start_date: number
                              supported_types?:
                                | ("india" | UnknownEnumStringValue)[]
                                | undefined
                            }
                          | undefined
                        network?:
                          | (
                              | "amex"
                              | "cartes_bancaires"
                              | "diners"
                              | "discover"
                              | "eftpos_au"
                              | "girocard"
                              | "interac"
                              | "jcb"
                              | "link"
                              | "mastercard"
                              | "unionpay"
                              | "unknown"
                              | "visa"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        request_extended_authorization?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_incremental_authorization?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_multicapture?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_overcapture?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_three_d_secure?:
                          | (
                              | "any"
                              | "automatic"
                              | "challenge"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        require_cvc_recollection?: boolean | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        statement_descriptor_suffix_kana?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        statement_descriptor_suffix_kanji?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        three_d_secure?:
                          | {
                              ares_trans_status?:
                                | (
                                    | "A"
                                    | "C"
                                    | "I"
                                    | "N"
                                    | "R"
                                    | "U"
                                    | "Y"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              cryptogram: string
                              electronic_commerce_indicator?:
                                | (
                                    | "01"
                                    | "02"
                                    | "05"
                                    | "06"
                                    | "07"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              exemption_indicator?:
                                | ("low_risk" | "none" | UnknownEnumStringValue)
                                | undefined
                              network_options?:
                                | {
                                    cartes_bancaires?:
                                      | {
                                          cb_avalgo:
                                            | "0"
                                            | "1"
                                            | "2"
                                            | "3"
                                            | "4"
                                            | "A"
                                            | UnknownEnumStringValue
                                          cb_exemption?: string | undefined
                                          cb_score?: number | undefined
                                        }
                                      | undefined
                                  }
                                | undefined
                              requestor_challenge_indicator?: string | undefined
                              transaction_id: string
                              version:
                                | "1.0.2"
                                | "2.1.0"
                                | "2.2.0"
                                | UnknownEnumStringValue
                            }
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              card_present?:
                | (
                    | {
                        request_extended_authorization?: boolean | undefined
                        request_incremental_authorization_support?:
                          | boolean
                          | undefined
                        routing?:
                          | {
                              requested_priority?:
                                | (
                                    | "domestic"
                                    | "international"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              cashapp?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              customer_balance?:
                | (
                    | {
                        bank_transfer?:
                          | {
                              eu_bank_transfer?:
                                | {
                                    country: string
                                  }
                                | undefined
                              requested_address_types?:
                                | (
                                    | "aba"
                                    | "iban"
                                    | "sepa"
                                    | "sort_code"
                                    | "spei"
                                    | "swift"
                                    | "zengin"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                              type:
                                | "eu_bank_transfer"
                                | "gb_bank_transfer"
                                | "jp_bank_transfer"
                                | "mx_bank_transfer"
                                | "us_bank_transfer"
                                | UnknownEnumStringValue
                            }
                          | undefined
                        funding_type?:
                          | ("bank_transfer" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              eps?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              fpx?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              giropay?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              grabpay?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              ideal?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              interac_present?:
                | (EmptyObject | "" | UnknownEnumStringValue)
                | undefined
              kakao_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              klarna?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        preferred_locale?:
                          | (
                              | "cs-CZ"
                              | "da-DK"
                              | "de-AT"
                              | "de-CH"
                              | "de-DE"
                              | "el-GR"
                              | "en-AT"
                              | "en-AU"
                              | "en-BE"
                              | "en-CA"
                              | "en-CH"
                              | "en-CZ"
                              | "en-DE"
                              | "en-DK"
                              | "en-ES"
                              | "en-FI"
                              | "en-FR"
                              | "en-GB"
                              | "en-GR"
                              | "en-IE"
                              | "en-IT"
                              | "en-NL"
                              | "en-NO"
                              | "en-NZ"
                              | "en-PL"
                              | "en-PT"
                              | "en-RO"
                              | "en-SE"
                              | "en-US"
                              | "es-ES"
                              | "es-US"
                              | "fi-FI"
                              | "fr-BE"
                              | "fr-CA"
                              | "fr-CH"
                              | "fr-FR"
                              | "it-CH"
                              | "it-IT"
                              | "nb-NO"
                              | "nl-BE"
                              | "nl-NL"
                              | "pl-PL"
                              | "pt-PT"
                              | "ro-RO"
                              | "sv-FI"
                              | "sv-SE"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              konbini?:
                | (
                    | {
                        confirmation_number?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        expires_after_days?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        expires_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        product_description?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              kr_card?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              link?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              mobilepay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              multibanco?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              naver_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              nz_bank_account?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              oxxo?:
                | (
                    | {
                        expires_after_days?: number | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              p24?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                        tos_shown_and_accepted?: boolean | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              pay_by_bank?:
                | (EmptyObject | "" | UnknownEnumStringValue)
                | undefined
              payco?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              paynow?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              paypal?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        preferred_locale?:
                          | (
                              | "cs-CZ"
                              | "da-DK"
                              | "de-AT"
                              | "de-DE"
                              | "de-LU"
                              | "el-GR"
                              | "en-GB"
                              | "en-US"
                              | "es-ES"
                              | "fi-FI"
                              | "fr-BE"
                              | "fr-FR"
                              | "fr-LU"
                              | "hu-HU"
                              | "it-IT"
                              | "nl-BE"
                              | "nl-NL"
                              | "pl-PL"
                              | "pt-PT"
                              | "sk-SK"
                              | "sv-SE"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        reference?: string | undefined
                        risk_correlation_id?: string | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              pix?:
                | (
                    | {
                        expires_after_seconds?: number | undefined
                        expires_at?: number | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              promptpay?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              revolut_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              samsung_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              sepa_debit?:
                | (
                    | {
                        mandate_options?:
                          | {
                              reference_prefix?:
                                | (string | "" | UnknownEnumStringValue)
                                | undefined
                            }
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              sofort?:
                | (
                    | {
                        preferred_language?:
                          | (
                              | ""
                              | "de"
                              | "en"
                              | "es"
                              | "fr"
                              | "it"
                              | "nl"
                              | "pl"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              swish?:
                | (
                    | {
                        reference?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              twint?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              us_bank_account?:
                | (
                    | {
                        financial_connections?:
                          | {
                              filters?:
                                | {
                                    account_subcategories?:
                                      | (
                                          | "checking"
                                          | "savings"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                  }
                                | undefined
                              permissions?:
                                | (
                                    | "balances"
                                    | "ownership"
                                    | "payment_method"
                                    | "transactions"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                              prefetch?:
                                | (
                                    | "balances"
                                    | "ownership"
                                    | "transactions"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                              return_url?: string | undefined
                            }
                          | undefined
                        mandate_options?:
                          | {
                              collection_method?:
                                | ("" | "paper" | UnknownEnumStringValue)
                                | undefined
                            }
                          | undefined
                        networks?:
                          | {
                              requested?:
                                | (
                                    | "ach"
                                    | "us_domestic_wire"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                            }
                          | undefined
                        preferred_settlement_speed?:
                          | (
                              | ""
                              | "fastest"
                              | "standard"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                        verification_method?:
                          | (
                              | "automatic"
                              | "instant"
                              | "microdeposits"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              wechat_pay?:
                | (
                    | {
                        app_id?: string | undefined
                        client?:
                          | ("android" | "ios" | "web" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              zip?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        payment_method_types?: string[] | undefined
        radar_options?:
          | {
              session?: string | undefined
            }
          | undefined
        receipt_email?: string | undefined
        return_url?: string | undefined
        setup_future_usage?:
          | ("off_session" | "on_session" | UnknownEnumStringValue)
          | undefined
        shipping?:
          | {
              address: {
                city?: string | undefined
                country?: string | undefined
                line1?: string | undefined
                line2?: string | undefined
                postal_code?: string | undefined
                state?: string | undefined
              }
              carrier?: string | undefined
              name: string
              phone?: string | undefined
              tracking_number?: string | undefined
            }
          | undefined
        statement_descriptor?: string | undefined
        statement_descriptor_suffix?: string | undefined
        transfer_data?:
          | {
              amount?: number | undefined
              destination: string
            }
          | undefined
        transfer_group?: string | undefined
        use_stripe_sdk?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_intent>> {
    const url = `/v1/payment_intents`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentIntentsSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_payment_intent[]
      has_more: boolean
      next_page?: (string | null) | undefined
      object: "search_result" | UnknownEnumStringValue
      total_count?: number | undefined
      url: string
    }>
  > {
    const url = `/v1/payment_intents/search`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentIntentsIntent(
    p: {
      clientSecret?: string
      expand?: string[]
      intent: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_intent>> {
    const url = `/v1/payment_intents/${p["intent"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      client_secret: p["clientSecret"],
      expand: p["expand"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentIntentsIntent(
    p: {
      intent: string
      requestBody?: {
        amount?: number | undefined
        application_fee_amount?:
          | (number | "" | UnknownEnumStringValue)
          | undefined
        capture_method?:
          | (
              | "automatic"
              | "automatic_async"
              | "manual"
              | UnknownEnumStringValue
            )
          | undefined
        currency?: string | undefined
        customer?: string | undefined
        description?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        payment_method?: string | undefined
        payment_method_configuration?: string | undefined
        payment_method_data?:
          | {
              acss_debit?:
                | {
                    account_number: string
                    institution_number: string
                    transit_number: string
                  }
                | undefined
              affirm?: EmptyObject | undefined
              afterpay_clearpay?: EmptyObject | undefined
              alipay?: EmptyObject | undefined
              allow_redisplay?:
                | (
                    | "always"
                    | "limited"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              alma?: EmptyObject | undefined
              amazon_pay?: EmptyObject | undefined
              au_becs_debit?:
                | {
                    account_number: string
                    bsb_number: string
                  }
                | undefined
              bacs_debit?:
                | {
                    account_number?: string | undefined
                    sort_code?: string | undefined
                  }
                | undefined
              bancontact?: EmptyObject | undefined
              billie?: EmptyObject | undefined
              billing_details?:
                | {
                    address?:
                      | (
                          | {
                              city?: string | undefined
                              country?: string | undefined
                              line1?: string | undefined
                              line2?: string | undefined
                              postal_code?: string | undefined
                              state?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    email?: (string | "" | UnknownEnumStringValue) | undefined
                    name?: (string | "" | UnknownEnumStringValue) | undefined
                    phone?: (string | "" | UnknownEnumStringValue) | undefined
                  }
                | undefined
              blik?: EmptyObject | undefined
              boleto?:
                | {
                    tax_id: string
                  }
                | undefined
              cashapp?: EmptyObject | undefined
              customer_balance?: EmptyObject | undefined
              eps?:
                | {
                    bank?:
                      | (
                          | "arzte_und_apotheker_bank"
                          | "austrian_anadi_bank_ag"
                          | "bank_austria"
                          | "bankhaus_carl_spangler"
                          | "bankhaus_schelhammer_und_schattera_ag"
                          | "bawag_psk_ag"
                          | "bks_bank_ag"
                          | "brull_kallmus_bank_ag"
                          | "btv_vier_lander_bank"
                          | "capital_bank_grawe_gruppe_ag"
                          | "deutsche_bank_ag"
                          | "dolomitenbank"
                          | "easybank_ag"
                          | "erste_bank_und_sparkassen"
                          | "hypo_alpeadriabank_international_ag"
                          | "hypo_bank_burgenland_aktiengesellschaft"
                          | "hypo_noe_lb_fur_niederosterreich_u_wien"
                          | "hypo_oberosterreich_salzburg_steiermark"
                          | "hypo_tirol_bank_ag"
                          | "hypo_vorarlberg_bank_ag"
                          | "marchfelder_bank"
                          | "oberbank_ag"
                          | "raiffeisen_bankengruppe_osterreich"
                          | "schoellerbank_ag"
                          | "sparda_bank_wien"
                          | "volksbank_gruppe"
                          | "volkskreditbank_ag"
                          | "vr_bank_braunau"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              fpx?:
                | {
                    bank:
                      | "affin_bank"
                      | "agrobank"
                      | "alliance_bank"
                      | "ambank"
                      | "bank_islam"
                      | "bank_muamalat"
                      | "bank_of_china"
                      | "bank_rakyat"
                      | "bsn"
                      | "cimb"
                      | "deutsche_bank"
                      | "hong_leong_bank"
                      | "hsbc"
                      | "kfh"
                      | "maybank2e"
                      | "maybank2u"
                      | "ocbc"
                      | "pb_enterprise"
                      | "public_bank"
                      | "rhb"
                      | "standard_chartered"
                      | "uob"
                      | UnknownEnumStringValue
                  }
                | undefined
              giropay?: EmptyObject | undefined
              grabpay?: EmptyObject | undefined
              ideal?:
                | {
                    bank?:
                      | (
                          | "abn_amro"
                          | "asn_bank"
                          | "bunq"
                          | "handelsbanken"
                          | "ing"
                          | "knab"
                          | "moneyou"
                          | "n26"
                          | "nn"
                          | "rabobank"
                          | "regiobank"
                          | "revolut"
                          | "sns_bank"
                          | "triodos_bank"
                          | "van_lanschot"
                          | "yoursafe"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              interac_present?: EmptyObject | undefined
              kakao_pay?: EmptyObject | undefined
              klarna?:
                | {
                    dob?:
                      | {
                          day: number
                          month: number
                          year: number
                        }
                      | undefined
                  }
                | undefined
              konbini?: EmptyObject | undefined
              kr_card?: EmptyObject | undefined
              link?: EmptyObject | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              mobilepay?: EmptyObject | undefined
              multibanco?: EmptyObject | undefined
              naver_pay?:
                | {
                    funding?:
                      | ("card" | "points" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              nz_bank_account?:
                | {
                    account_holder_name?: string | undefined
                    account_number: string
                    bank_code: string
                    branch_code: string
                    reference?: string | undefined
                    suffix: string
                  }
                | undefined
              oxxo?: EmptyObject | undefined
              p24?:
                | {
                    bank?:
                      | (
                          | "alior_bank"
                          | "bank_millennium"
                          | "bank_nowy_bfg_sa"
                          | "bank_pekao_sa"
                          | "banki_spbdzielcze"
                          | "blik"
                          | "bnp_paribas"
                          | "boz"
                          | "citi_handlowy"
                          | "credit_agricole"
                          | "envelobank"
                          | "etransfer_pocztowy24"
                          | "getin_bank"
                          | "ideabank"
                          | "ing"
                          | "inteligo"
                          | "mbank_mtransfer"
                          | "nest_przelew"
                          | "noble_pay"
                          | "pbac_z_ipko"
                          | "plus_bank"
                          | "santander_przelew24"
                          | "tmobile_usbugi_bankowe"
                          | "toyota_bank"
                          | "velobank"
                          | "volkswagen_bank"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              pay_by_bank?: EmptyObject | undefined
              payco?: EmptyObject | undefined
              paynow?: EmptyObject | undefined
              paypal?: EmptyObject | undefined
              pix?: EmptyObject | undefined
              promptpay?: EmptyObject | undefined
              radar_options?:
                | {
                    session?: string | undefined
                  }
                | undefined
              revolut_pay?: EmptyObject | undefined
              samsung_pay?: EmptyObject | undefined
              satispay?: EmptyObject | undefined
              sepa_debit?:
                | {
                    iban: string
                  }
                | undefined
              sofort?:
                | {
                    country:
                      | "AT"
                      | "BE"
                      | "DE"
                      | "ES"
                      | "IT"
                      | "NL"
                      | UnknownEnumStringValue
                  }
                | undefined
              swish?: EmptyObject | undefined
              twint?: EmptyObject | undefined
              type:
                | "acss_debit"
                | "affirm"
                | "afterpay_clearpay"
                | "alipay"
                | "alma"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "billie"
                | "blik"
                | "boleto"
                | "cashapp"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "mobilepay"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "oxxo"
                | "p24"
                | "pay_by_bank"
                | "payco"
                | "paynow"
                | "paypal"
                | "pix"
                | "promptpay"
                | "revolut_pay"
                | "samsung_pay"
                | "satispay"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "twint"
                | "us_bank_account"
                | "wechat_pay"
                | "zip"
                | UnknownEnumStringValue
              us_bank_account?:
                | {
                    account_holder_type?:
                      | ("company" | "individual" | UnknownEnumStringValue)
                      | undefined
                    account_number?: string | undefined
                    account_type?:
                      | ("checking" | "savings" | UnknownEnumStringValue)
                      | undefined
                    financial_connections_account?: string | undefined
                    routing_number?: string | undefined
                  }
                | undefined
              wechat_pay?: EmptyObject | undefined
              zip?: EmptyObject | undefined
            }
          | undefined
        payment_method_options?:
          | {
              acss_debit?:
                | (
                    | {
                        mandate_options?:
                          | {
                              custom_mandate_url?:
                                | (string | "" | UnknownEnumStringValue)
                                | undefined
                              interval_description?: string | undefined
                              payment_schedule?:
                                | (
                                    | "combined"
                                    | "interval"
                                    | "sporadic"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              transaction_type?:
                                | (
                                    | "business"
                                    | "personal"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                        verification_method?:
                          | (
                              | "automatic"
                              | "instant"
                              | "microdeposits"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              affirm?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        preferred_locale?: string | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              afterpay_clearpay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        reference?: string | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              alipay?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              alma?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              amazon_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              au_becs_debit?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              bacs_debit?:
                | (
                    | {
                        mandate_options?:
                          | {
                              reference_prefix?:
                                | (string | "" | UnknownEnumStringValue)
                                | undefined
                            }
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              bancontact?:
                | (
                    | {
                        preferred_language?:
                          | ("de" | "en" | "fr" | "nl" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              blik?:
                | (
                    | {
                        code?: string | undefined
                        setup_future_usage?:
                          | ("" | "none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              boleto?:
                | (
                    | {
                        expires_after_days?: number | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              card?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        cvc_token?: string | undefined
                        installments?:
                          | {
                              enabled?: boolean | undefined
                              plan?:
                                | (
                                    | {
                                        count?: number | undefined
                                        interval?:
                                          | ("month" | UnknownEnumStringValue)
                                          | undefined
                                        type:
                                          | "fixed_count"
                                          | UnknownEnumStringValue
                                      }
                                    | ""
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | undefined
                        mandate_options?:
                          | {
                              amount: number
                              amount_type:
                                | "fixed"
                                | "maximum"
                                | UnknownEnumStringValue
                              description?: string | undefined
                              end_date?: number | undefined
                              interval:
                                | "day"
                                | "month"
                                | "sporadic"
                                | "week"
                                | "year"
                                | UnknownEnumStringValue
                              interval_count?: number | undefined
                              reference: string
                              start_date: number
                              supported_types?:
                                | ("india" | UnknownEnumStringValue)[]
                                | undefined
                            }
                          | undefined
                        network?:
                          | (
                              | "amex"
                              | "cartes_bancaires"
                              | "diners"
                              | "discover"
                              | "eftpos_au"
                              | "girocard"
                              | "interac"
                              | "jcb"
                              | "link"
                              | "mastercard"
                              | "unionpay"
                              | "unknown"
                              | "visa"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        request_extended_authorization?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_incremental_authorization?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_multicapture?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_overcapture?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_three_d_secure?:
                          | (
                              | "any"
                              | "automatic"
                              | "challenge"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        require_cvc_recollection?: boolean | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        statement_descriptor_suffix_kana?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        statement_descriptor_suffix_kanji?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        three_d_secure?:
                          | {
                              ares_trans_status?:
                                | (
                                    | "A"
                                    | "C"
                                    | "I"
                                    | "N"
                                    | "R"
                                    | "U"
                                    | "Y"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              cryptogram: string
                              electronic_commerce_indicator?:
                                | (
                                    | "01"
                                    | "02"
                                    | "05"
                                    | "06"
                                    | "07"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              exemption_indicator?:
                                | ("low_risk" | "none" | UnknownEnumStringValue)
                                | undefined
                              network_options?:
                                | {
                                    cartes_bancaires?:
                                      | {
                                          cb_avalgo:
                                            | "0"
                                            | "1"
                                            | "2"
                                            | "3"
                                            | "4"
                                            | "A"
                                            | UnknownEnumStringValue
                                          cb_exemption?: string | undefined
                                          cb_score?: number | undefined
                                        }
                                      | undefined
                                  }
                                | undefined
                              requestor_challenge_indicator?: string | undefined
                              transaction_id: string
                              version:
                                | "1.0.2"
                                | "2.1.0"
                                | "2.2.0"
                                | UnknownEnumStringValue
                            }
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              card_present?:
                | (
                    | {
                        request_extended_authorization?: boolean | undefined
                        request_incremental_authorization_support?:
                          | boolean
                          | undefined
                        routing?:
                          | {
                              requested_priority?:
                                | (
                                    | "domestic"
                                    | "international"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              cashapp?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              customer_balance?:
                | (
                    | {
                        bank_transfer?:
                          | {
                              eu_bank_transfer?:
                                | {
                                    country: string
                                  }
                                | undefined
                              requested_address_types?:
                                | (
                                    | "aba"
                                    | "iban"
                                    | "sepa"
                                    | "sort_code"
                                    | "spei"
                                    | "swift"
                                    | "zengin"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                              type:
                                | "eu_bank_transfer"
                                | "gb_bank_transfer"
                                | "jp_bank_transfer"
                                | "mx_bank_transfer"
                                | "us_bank_transfer"
                                | UnknownEnumStringValue
                            }
                          | undefined
                        funding_type?:
                          | ("bank_transfer" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              eps?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              fpx?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              giropay?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              grabpay?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              ideal?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              interac_present?:
                | (EmptyObject | "" | UnknownEnumStringValue)
                | undefined
              kakao_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              klarna?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        preferred_locale?:
                          | (
                              | "cs-CZ"
                              | "da-DK"
                              | "de-AT"
                              | "de-CH"
                              | "de-DE"
                              | "el-GR"
                              | "en-AT"
                              | "en-AU"
                              | "en-BE"
                              | "en-CA"
                              | "en-CH"
                              | "en-CZ"
                              | "en-DE"
                              | "en-DK"
                              | "en-ES"
                              | "en-FI"
                              | "en-FR"
                              | "en-GB"
                              | "en-GR"
                              | "en-IE"
                              | "en-IT"
                              | "en-NL"
                              | "en-NO"
                              | "en-NZ"
                              | "en-PL"
                              | "en-PT"
                              | "en-RO"
                              | "en-SE"
                              | "en-US"
                              | "es-ES"
                              | "es-US"
                              | "fi-FI"
                              | "fr-BE"
                              | "fr-CA"
                              | "fr-CH"
                              | "fr-FR"
                              | "it-CH"
                              | "it-IT"
                              | "nb-NO"
                              | "nl-BE"
                              | "nl-NL"
                              | "pl-PL"
                              | "pt-PT"
                              | "ro-RO"
                              | "sv-FI"
                              | "sv-SE"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              konbini?:
                | (
                    | {
                        confirmation_number?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        expires_after_days?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        expires_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        product_description?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              kr_card?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              link?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              mobilepay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              multibanco?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              naver_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              nz_bank_account?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              oxxo?:
                | (
                    | {
                        expires_after_days?: number | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              p24?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                        tos_shown_and_accepted?: boolean | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              pay_by_bank?:
                | (EmptyObject | "" | UnknownEnumStringValue)
                | undefined
              payco?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              paynow?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              paypal?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        preferred_locale?:
                          | (
                              | "cs-CZ"
                              | "da-DK"
                              | "de-AT"
                              | "de-DE"
                              | "de-LU"
                              | "el-GR"
                              | "en-GB"
                              | "en-US"
                              | "es-ES"
                              | "fi-FI"
                              | "fr-BE"
                              | "fr-FR"
                              | "fr-LU"
                              | "hu-HU"
                              | "it-IT"
                              | "nl-BE"
                              | "nl-NL"
                              | "pl-PL"
                              | "pt-PT"
                              | "sk-SK"
                              | "sv-SE"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        reference?: string | undefined
                        risk_correlation_id?: string | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              pix?:
                | (
                    | {
                        expires_after_seconds?: number | undefined
                        expires_at?: number | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              promptpay?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              revolut_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              samsung_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              sepa_debit?:
                | (
                    | {
                        mandate_options?:
                          | {
                              reference_prefix?:
                                | (string | "" | UnknownEnumStringValue)
                                | undefined
                            }
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              sofort?:
                | (
                    | {
                        preferred_language?:
                          | (
                              | ""
                              | "de"
                              | "en"
                              | "es"
                              | "fr"
                              | "it"
                              | "nl"
                              | "pl"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              swish?:
                | (
                    | {
                        reference?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              twint?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              us_bank_account?:
                | (
                    | {
                        financial_connections?:
                          | {
                              filters?:
                                | {
                                    account_subcategories?:
                                      | (
                                          | "checking"
                                          | "savings"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                  }
                                | undefined
                              permissions?:
                                | (
                                    | "balances"
                                    | "ownership"
                                    | "payment_method"
                                    | "transactions"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                              prefetch?:
                                | (
                                    | "balances"
                                    | "ownership"
                                    | "transactions"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                              return_url?: string | undefined
                            }
                          | undefined
                        mandate_options?:
                          | {
                              collection_method?:
                                | ("" | "paper" | UnknownEnumStringValue)
                                | undefined
                            }
                          | undefined
                        networks?:
                          | {
                              requested?:
                                | (
                                    | "ach"
                                    | "us_domestic_wire"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                            }
                          | undefined
                        preferred_settlement_speed?:
                          | (
                              | ""
                              | "fastest"
                              | "standard"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                        verification_method?:
                          | (
                              | "automatic"
                              | "instant"
                              | "microdeposits"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              wechat_pay?:
                | (
                    | {
                        app_id?: string | undefined
                        client?:
                          | ("android" | "ios" | "web" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              zip?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        payment_method_types?: string[] | undefined
        receipt_email?: (string | "" | UnknownEnumStringValue) | undefined
        setup_future_usage?:
          | ("" | "off_session" | "on_session" | UnknownEnumStringValue)
          | undefined
        shipping?:
          | (
              | {
                  address: {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                  carrier?: string | undefined
                  name: string
                  phone?: string | undefined
                  tracking_number?: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        statement_descriptor?: string | undefined
        statement_descriptor_suffix?: string | undefined
        transfer_data?:
          | {
              amount?: number | undefined
            }
          | undefined
        transfer_group?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_intent>> {
    const url = `/v1/payment_intents/${p["intent"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentIntentsIntentApplyCustomerBalance(
    p: {
      intent: string
      requestBody?: {
        amount?: number | undefined
        currency?: string | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_intent>> {
    const url = `/v1/payment_intents/${p["intent"]}/apply_customer_balance`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentIntentsIntentCancel(
    p: {
      intent: string
      requestBody?: {
        cancellation_reason?:
          | (
              | "abandoned"
              | "duplicate"
              | "fraudulent"
              | "requested_by_customer"
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_intent>> {
    const url = `/v1/payment_intents/${p["intent"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentIntentsIntentCapture(
    p: {
      intent: string
      requestBody?: {
        amount_to_capture?: number | undefined
        application_fee_amount?: number | undefined
        expand?: string[] | undefined
        final_capture?: boolean | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        statement_descriptor?: string | undefined
        statement_descriptor_suffix?: string | undefined
        transfer_data?:
          | {
              amount?: number | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_intent>> {
    const url = `/v1/payment_intents/${p["intent"]}/capture`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentIntentsIntentConfirm(
    p: {
      intent: string
      requestBody?: {
        capture_method?:
          | (
              | "automatic"
              | "automatic_async"
              | "manual"
              | UnknownEnumStringValue
            )
          | undefined
        client_secret?: string | undefined
        confirmation_token?: string | undefined
        error_on_requires_action?: boolean | undefined
        expand?: string[] | undefined
        mandate?: string | undefined
        mandate_data?:
          | (
              | {
                  customer_acceptance: {
                    accepted_at?: number | undefined
                    offline?: EmptyObject | undefined
                    online?:
                      | {
                          ip_address: string
                          user_agent: string
                        }
                      | undefined
                    type: "offline" | "online" | UnknownEnumStringValue
                  }
                }
              | ""
              | UnknownEnumStringValue
              | {
                  customer_acceptance: {
                    online: {
                      ip_address?: string | undefined
                      user_agent?: string | undefined
                    }
                    type: "online" | UnknownEnumStringValue
                  }
                }
            )
          | undefined
        off_session?:
          | (boolean | "one_off" | "recurring" | UnknownEnumStringValue)
          | undefined
        payment_method?: string | undefined
        payment_method_data?:
          | {
              acss_debit?:
                | {
                    account_number: string
                    institution_number: string
                    transit_number: string
                  }
                | undefined
              affirm?: EmptyObject | undefined
              afterpay_clearpay?: EmptyObject | undefined
              alipay?: EmptyObject | undefined
              allow_redisplay?:
                | (
                    | "always"
                    | "limited"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              alma?: EmptyObject | undefined
              amazon_pay?: EmptyObject | undefined
              au_becs_debit?:
                | {
                    account_number: string
                    bsb_number: string
                  }
                | undefined
              bacs_debit?:
                | {
                    account_number?: string | undefined
                    sort_code?: string | undefined
                  }
                | undefined
              bancontact?: EmptyObject | undefined
              billie?: EmptyObject | undefined
              billing_details?:
                | {
                    address?:
                      | (
                          | {
                              city?: string | undefined
                              country?: string | undefined
                              line1?: string | undefined
                              line2?: string | undefined
                              postal_code?: string | undefined
                              state?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    email?: (string | "" | UnknownEnumStringValue) | undefined
                    name?: (string | "" | UnknownEnumStringValue) | undefined
                    phone?: (string | "" | UnknownEnumStringValue) | undefined
                  }
                | undefined
              blik?: EmptyObject | undefined
              boleto?:
                | {
                    tax_id: string
                  }
                | undefined
              cashapp?: EmptyObject | undefined
              customer_balance?: EmptyObject | undefined
              eps?:
                | {
                    bank?:
                      | (
                          | "arzte_und_apotheker_bank"
                          | "austrian_anadi_bank_ag"
                          | "bank_austria"
                          | "bankhaus_carl_spangler"
                          | "bankhaus_schelhammer_und_schattera_ag"
                          | "bawag_psk_ag"
                          | "bks_bank_ag"
                          | "brull_kallmus_bank_ag"
                          | "btv_vier_lander_bank"
                          | "capital_bank_grawe_gruppe_ag"
                          | "deutsche_bank_ag"
                          | "dolomitenbank"
                          | "easybank_ag"
                          | "erste_bank_und_sparkassen"
                          | "hypo_alpeadriabank_international_ag"
                          | "hypo_bank_burgenland_aktiengesellschaft"
                          | "hypo_noe_lb_fur_niederosterreich_u_wien"
                          | "hypo_oberosterreich_salzburg_steiermark"
                          | "hypo_tirol_bank_ag"
                          | "hypo_vorarlberg_bank_ag"
                          | "marchfelder_bank"
                          | "oberbank_ag"
                          | "raiffeisen_bankengruppe_osterreich"
                          | "schoellerbank_ag"
                          | "sparda_bank_wien"
                          | "volksbank_gruppe"
                          | "volkskreditbank_ag"
                          | "vr_bank_braunau"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              fpx?:
                | {
                    bank:
                      | "affin_bank"
                      | "agrobank"
                      | "alliance_bank"
                      | "ambank"
                      | "bank_islam"
                      | "bank_muamalat"
                      | "bank_of_china"
                      | "bank_rakyat"
                      | "bsn"
                      | "cimb"
                      | "deutsche_bank"
                      | "hong_leong_bank"
                      | "hsbc"
                      | "kfh"
                      | "maybank2e"
                      | "maybank2u"
                      | "ocbc"
                      | "pb_enterprise"
                      | "public_bank"
                      | "rhb"
                      | "standard_chartered"
                      | "uob"
                      | UnknownEnumStringValue
                  }
                | undefined
              giropay?: EmptyObject | undefined
              grabpay?: EmptyObject | undefined
              ideal?:
                | {
                    bank?:
                      | (
                          | "abn_amro"
                          | "asn_bank"
                          | "bunq"
                          | "handelsbanken"
                          | "ing"
                          | "knab"
                          | "moneyou"
                          | "n26"
                          | "nn"
                          | "rabobank"
                          | "regiobank"
                          | "revolut"
                          | "sns_bank"
                          | "triodos_bank"
                          | "van_lanschot"
                          | "yoursafe"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              interac_present?: EmptyObject | undefined
              kakao_pay?: EmptyObject | undefined
              klarna?:
                | {
                    dob?:
                      | {
                          day: number
                          month: number
                          year: number
                        }
                      | undefined
                  }
                | undefined
              konbini?: EmptyObject | undefined
              kr_card?: EmptyObject | undefined
              link?: EmptyObject | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              mobilepay?: EmptyObject | undefined
              multibanco?: EmptyObject | undefined
              naver_pay?:
                | {
                    funding?:
                      | ("card" | "points" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              nz_bank_account?:
                | {
                    account_holder_name?: string | undefined
                    account_number: string
                    bank_code: string
                    branch_code: string
                    reference?: string | undefined
                    suffix: string
                  }
                | undefined
              oxxo?: EmptyObject | undefined
              p24?:
                | {
                    bank?:
                      | (
                          | "alior_bank"
                          | "bank_millennium"
                          | "bank_nowy_bfg_sa"
                          | "bank_pekao_sa"
                          | "banki_spbdzielcze"
                          | "blik"
                          | "bnp_paribas"
                          | "boz"
                          | "citi_handlowy"
                          | "credit_agricole"
                          | "envelobank"
                          | "etransfer_pocztowy24"
                          | "getin_bank"
                          | "ideabank"
                          | "ing"
                          | "inteligo"
                          | "mbank_mtransfer"
                          | "nest_przelew"
                          | "noble_pay"
                          | "pbac_z_ipko"
                          | "plus_bank"
                          | "santander_przelew24"
                          | "tmobile_usbugi_bankowe"
                          | "toyota_bank"
                          | "velobank"
                          | "volkswagen_bank"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              pay_by_bank?: EmptyObject | undefined
              payco?: EmptyObject | undefined
              paynow?: EmptyObject | undefined
              paypal?: EmptyObject | undefined
              pix?: EmptyObject | undefined
              promptpay?: EmptyObject | undefined
              radar_options?:
                | {
                    session?: string | undefined
                  }
                | undefined
              revolut_pay?: EmptyObject | undefined
              samsung_pay?: EmptyObject | undefined
              satispay?: EmptyObject | undefined
              sepa_debit?:
                | {
                    iban: string
                  }
                | undefined
              sofort?:
                | {
                    country:
                      | "AT"
                      | "BE"
                      | "DE"
                      | "ES"
                      | "IT"
                      | "NL"
                      | UnknownEnumStringValue
                  }
                | undefined
              swish?: EmptyObject | undefined
              twint?: EmptyObject | undefined
              type:
                | "acss_debit"
                | "affirm"
                | "afterpay_clearpay"
                | "alipay"
                | "alma"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "billie"
                | "blik"
                | "boleto"
                | "cashapp"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "mobilepay"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "oxxo"
                | "p24"
                | "pay_by_bank"
                | "payco"
                | "paynow"
                | "paypal"
                | "pix"
                | "promptpay"
                | "revolut_pay"
                | "samsung_pay"
                | "satispay"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "twint"
                | "us_bank_account"
                | "wechat_pay"
                | "zip"
                | UnknownEnumStringValue
              us_bank_account?:
                | {
                    account_holder_type?:
                      | ("company" | "individual" | UnknownEnumStringValue)
                      | undefined
                    account_number?: string | undefined
                    account_type?:
                      | ("checking" | "savings" | UnknownEnumStringValue)
                      | undefined
                    financial_connections_account?: string | undefined
                    routing_number?: string | undefined
                  }
                | undefined
              wechat_pay?: EmptyObject | undefined
              zip?: EmptyObject | undefined
            }
          | undefined
        payment_method_options?:
          | {
              acss_debit?:
                | (
                    | {
                        mandate_options?:
                          | {
                              custom_mandate_url?:
                                | (string | "" | UnknownEnumStringValue)
                                | undefined
                              interval_description?: string | undefined
                              payment_schedule?:
                                | (
                                    | "combined"
                                    | "interval"
                                    | "sporadic"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              transaction_type?:
                                | (
                                    | "business"
                                    | "personal"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                        verification_method?:
                          | (
                              | "automatic"
                              | "instant"
                              | "microdeposits"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              affirm?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        preferred_locale?: string | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              afterpay_clearpay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        reference?: string | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              alipay?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              alma?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              amazon_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              au_becs_debit?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              bacs_debit?:
                | (
                    | {
                        mandate_options?:
                          | {
                              reference_prefix?:
                                | (string | "" | UnknownEnumStringValue)
                                | undefined
                            }
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              bancontact?:
                | (
                    | {
                        preferred_language?:
                          | ("de" | "en" | "fr" | "nl" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              blik?:
                | (
                    | {
                        code?: string | undefined
                        setup_future_usage?:
                          | ("" | "none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              boleto?:
                | (
                    | {
                        expires_after_days?: number | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              card?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        cvc_token?: string | undefined
                        installments?:
                          | {
                              enabled?: boolean | undefined
                              plan?:
                                | (
                                    | {
                                        count?: number | undefined
                                        interval?:
                                          | ("month" | UnknownEnumStringValue)
                                          | undefined
                                        type:
                                          | "fixed_count"
                                          | UnknownEnumStringValue
                                      }
                                    | ""
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | undefined
                        mandate_options?:
                          | {
                              amount: number
                              amount_type:
                                | "fixed"
                                | "maximum"
                                | UnknownEnumStringValue
                              description?: string | undefined
                              end_date?: number | undefined
                              interval:
                                | "day"
                                | "month"
                                | "sporadic"
                                | "week"
                                | "year"
                                | UnknownEnumStringValue
                              interval_count?: number | undefined
                              reference: string
                              start_date: number
                              supported_types?:
                                | ("india" | UnknownEnumStringValue)[]
                                | undefined
                            }
                          | undefined
                        network?:
                          | (
                              | "amex"
                              | "cartes_bancaires"
                              | "diners"
                              | "discover"
                              | "eftpos_au"
                              | "girocard"
                              | "interac"
                              | "jcb"
                              | "link"
                              | "mastercard"
                              | "unionpay"
                              | "unknown"
                              | "visa"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        request_extended_authorization?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_incremental_authorization?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_multicapture?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_overcapture?:
                          | ("if_available" | "never" | UnknownEnumStringValue)
                          | undefined
                        request_three_d_secure?:
                          | (
                              | "any"
                              | "automatic"
                              | "challenge"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        require_cvc_recollection?: boolean | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        statement_descriptor_suffix_kana?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        statement_descriptor_suffix_kanji?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        three_d_secure?:
                          | {
                              ares_trans_status?:
                                | (
                                    | "A"
                                    | "C"
                                    | "I"
                                    | "N"
                                    | "R"
                                    | "U"
                                    | "Y"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              cryptogram: string
                              electronic_commerce_indicator?:
                                | (
                                    | "01"
                                    | "02"
                                    | "05"
                                    | "06"
                                    | "07"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              exemption_indicator?:
                                | ("low_risk" | "none" | UnknownEnumStringValue)
                                | undefined
                              network_options?:
                                | {
                                    cartes_bancaires?:
                                      | {
                                          cb_avalgo:
                                            | "0"
                                            | "1"
                                            | "2"
                                            | "3"
                                            | "4"
                                            | "A"
                                            | UnknownEnumStringValue
                                          cb_exemption?: string | undefined
                                          cb_score?: number | undefined
                                        }
                                      | undefined
                                  }
                                | undefined
                              requestor_challenge_indicator?: string | undefined
                              transaction_id: string
                              version:
                                | "1.0.2"
                                | "2.1.0"
                                | "2.2.0"
                                | UnknownEnumStringValue
                            }
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              card_present?:
                | (
                    | {
                        request_extended_authorization?: boolean | undefined
                        request_incremental_authorization_support?:
                          | boolean
                          | undefined
                        routing?:
                          | {
                              requested_priority?:
                                | (
                                    | "domestic"
                                    | "international"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              cashapp?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              customer_balance?:
                | (
                    | {
                        bank_transfer?:
                          | {
                              eu_bank_transfer?:
                                | {
                                    country: string
                                  }
                                | undefined
                              requested_address_types?:
                                | (
                                    | "aba"
                                    | "iban"
                                    | "sepa"
                                    | "sort_code"
                                    | "spei"
                                    | "swift"
                                    | "zengin"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                              type:
                                | "eu_bank_transfer"
                                | "gb_bank_transfer"
                                | "jp_bank_transfer"
                                | "mx_bank_transfer"
                                | "us_bank_transfer"
                                | UnknownEnumStringValue
                            }
                          | undefined
                        funding_type?:
                          | ("bank_transfer" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              eps?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              fpx?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              giropay?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              grabpay?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              ideal?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              interac_present?:
                | (EmptyObject | "" | UnknownEnumStringValue)
                | undefined
              kakao_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              klarna?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        preferred_locale?:
                          | (
                              | "cs-CZ"
                              | "da-DK"
                              | "de-AT"
                              | "de-CH"
                              | "de-DE"
                              | "el-GR"
                              | "en-AT"
                              | "en-AU"
                              | "en-BE"
                              | "en-CA"
                              | "en-CH"
                              | "en-CZ"
                              | "en-DE"
                              | "en-DK"
                              | "en-ES"
                              | "en-FI"
                              | "en-FR"
                              | "en-GB"
                              | "en-GR"
                              | "en-IE"
                              | "en-IT"
                              | "en-NL"
                              | "en-NO"
                              | "en-NZ"
                              | "en-PL"
                              | "en-PT"
                              | "en-RO"
                              | "en-SE"
                              | "en-US"
                              | "es-ES"
                              | "es-US"
                              | "fi-FI"
                              | "fr-BE"
                              | "fr-CA"
                              | "fr-CH"
                              | "fr-FR"
                              | "it-CH"
                              | "it-IT"
                              | "nb-NO"
                              | "nl-BE"
                              | "nl-NL"
                              | "pl-PL"
                              | "pt-PT"
                              | "ro-RO"
                              | "sv-FI"
                              | "sv-SE"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              konbini?:
                | (
                    | {
                        confirmation_number?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        expires_after_days?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        expires_at?:
                          | (number | "" | UnknownEnumStringValue)
                          | undefined
                        product_description?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              kr_card?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              link?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              mobilepay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              multibanco?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              naver_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              nz_bank_account?:
                | (
                    | {
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              oxxo?:
                | (
                    | {
                        expires_after_days?: number | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              p24?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                        tos_shown_and_accepted?: boolean | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              pay_by_bank?:
                | (EmptyObject | "" | UnknownEnumStringValue)
                | undefined
              payco?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              paynow?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              paypal?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        preferred_locale?:
                          | (
                              | "cs-CZ"
                              | "da-DK"
                              | "de-AT"
                              | "de-DE"
                              | "de-LU"
                              | "el-GR"
                              | "en-GB"
                              | "en-US"
                              | "es-ES"
                              | "fi-FI"
                              | "fr-BE"
                              | "fr-FR"
                              | "fr-LU"
                              | "hu-HU"
                              | "it-IT"
                              | "nl-BE"
                              | "nl-NL"
                              | "pl-PL"
                              | "pt-PT"
                              | "sk-SK"
                              | "sv-SE"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        reference?: string | undefined
                        risk_correlation_id?: string | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              pix?:
                | (
                    | {
                        expires_after_seconds?: number | undefined
                        expires_at?: number | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              promptpay?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              revolut_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              samsung_pay?:
                | (
                    | {
                        capture_method?:
                          | ("" | "manual" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              sepa_debit?:
                | (
                    | {
                        mandate_options?:
                          | {
                              reference_prefix?:
                                | (string | "" | UnknownEnumStringValue)
                                | undefined
                            }
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              sofort?:
                | (
                    | {
                        preferred_language?:
                          | (
                              | ""
                              | "de"
                              | "en"
                              | "es"
                              | "fr"
                              | "it"
                              | "nl"
                              | "pl"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              swish?:
                | (
                    | {
                        reference?:
                          | (string | "" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              twint?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              us_bank_account?:
                | (
                    | {
                        financial_connections?:
                          | {
                              filters?:
                                | {
                                    account_subcategories?:
                                      | (
                                          | "checking"
                                          | "savings"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                  }
                                | undefined
                              permissions?:
                                | (
                                    | "balances"
                                    | "ownership"
                                    | "payment_method"
                                    | "transactions"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                              prefetch?:
                                | (
                                    | "balances"
                                    | "ownership"
                                    | "transactions"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                              return_url?: string | undefined
                            }
                          | undefined
                        mandate_options?:
                          | {
                              collection_method?:
                                | ("" | "paper" | UnknownEnumStringValue)
                                | undefined
                            }
                          | undefined
                        networks?:
                          | {
                              requested?:
                                | (
                                    | "ach"
                                    | "us_domestic_wire"
                                    | UnknownEnumStringValue
                                  )[]
                                | undefined
                            }
                          | undefined
                        preferred_settlement_speed?:
                          | (
                              | ""
                              | "fastest"
                              | "standard"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        setup_future_usage?:
                          | (
                              | ""
                              | "none"
                              | "off_session"
                              | "on_session"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        target_date?: string | undefined
                        verification_method?:
                          | (
                              | "automatic"
                              | "instant"
                              | "microdeposits"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              wechat_pay?:
                | (
                    | {
                        app_id?: string | undefined
                        client?:
                          | ("android" | "ios" | "web" | UnknownEnumStringValue)
                          | undefined
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              zip?:
                | (
                    | {
                        setup_future_usage?:
                          | ("none" | UnknownEnumStringValue)
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        payment_method_types?: string[] | undefined
        radar_options?:
          | {
              session?: string | undefined
            }
          | undefined
        receipt_email?: (string | "" | UnknownEnumStringValue) | undefined
        return_url?: string | undefined
        setup_future_usage?:
          | ("" | "off_session" | "on_session" | UnknownEnumStringValue)
          | undefined
        shipping?:
          | (
              | {
                  address: {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                  carrier?: string | undefined
                  name: string
                  phone?: string | undefined
                  tracking_number?: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        use_stripe_sdk?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_intent>> {
    const url = `/v1/payment_intents/${p["intent"]}/confirm`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentIntentsIntentIncrementAuthorization(
    p: {
      intent: string
      requestBody: {
        amount: number
        application_fee_amount?: number | undefined
        description?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        statement_descriptor?: string | undefined
        transfer_data?:
          | {
              amount?: number | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_intent>> {
    const url = `/v1/payment_intents/${p["intent"]}/increment_authorization`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentIntentsIntentVerifyMicrodeposits(
    p: {
      intent: string
      requestBody?: {
        amounts?: number[] | undefined
        client_secret?: string | undefined
        descriptor_code?: string | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_intent>> {
    const url = `/v1/payment_intents/${p["intent"]}/verify_microdeposits`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentLinks(
    p: {
      active?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_payment_link[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/payment_links`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      active: p["active"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentLinks(
    p: {
      requestBody: {
        after_completion?:
          | {
              hosted_confirmation?:
                | {
                    custom_message?: string | undefined
                  }
                | undefined
              redirect?:
                | {
                    url: string
                  }
                | undefined
              type: "hosted_confirmation" | "redirect" | UnknownEnumStringValue
            }
          | undefined
        allow_promotion_codes?: boolean | undefined
        application_fee_amount?: number | undefined
        application_fee_percent?: number | undefined
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        billing_address_collection?:
          | ("auto" | "required" | UnknownEnumStringValue)
          | undefined
        consent_collection?:
          | {
              payment_method_reuse_agreement?:
                | {
                    position: "auto" | "hidden" | UnknownEnumStringValue
                  }
                | undefined
              promotions?:
                | ("auto" | "none" | UnknownEnumStringValue)
                | undefined
              terms_of_service?:
                | ("none" | "required" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        currency?: string | undefined
        custom_fields?:
          | {
              dropdown?:
                | {
                    default_value?: string | undefined
                    options: {
                      label: string
                      value: string
                    }[]
                  }
                | undefined
              key: string
              label: {
                custom: string
                type: "custom" | UnknownEnumStringValue
              }
              numeric?:
                | {
                    default_value?: string | undefined
                    maximum_length?: number | undefined
                    minimum_length?: number | undefined
                  }
                | undefined
              optional?: boolean | undefined
              text?:
                | {
                    default_value?: string | undefined
                    maximum_length?: number | undefined
                    minimum_length?: number | undefined
                  }
                | undefined
              type: "dropdown" | "numeric" | "text" | UnknownEnumStringValue
            }[]
          | undefined
        custom_text?:
          | {
              after_submit?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              shipping_address?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              submit?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              terms_of_service_acceptance?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        customer_creation?:
          | ("always" | "if_required" | UnknownEnumStringValue)
          | undefined
        expand?: string[] | undefined
        inactive_message?: string | undefined
        invoice_creation?:
          | {
              enabled: boolean
              invoice_data?:
                | {
                    account_tax_ids?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                    custom_fields?:
                      | (
                          | {
                              name: string
                              value: string
                            }[]
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    description?: string | undefined
                    footer?: string | undefined
                    issuer?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                    metadata?:
                      | (
                          | {
                              [key: string]: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    rendering_options?:
                      | (
                          | {
                              amount_tax_display?:
                                | (
                                    | ""
                                    | "exclude_tax"
                                    | "include_inclusive_tax"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
            }
          | undefined
        line_items: {
          adjustable_quantity?:
            | {
                enabled: boolean
                maximum?: number | undefined
                minimum?: number | undefined
              }
            | undefined
          price: string
          quantity: number
        }[]
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        on_behalf_of?: string | undefined
        optional_items?:
          | {
              adjustable_quantity?:
                | {
                    enabled: boolean
                    maximum?: number | undefined
                    minimum?: number | undefined
                  }
                | undefined
              price: string
              quantity: number
            }[]
          | undefined
        payment_intent_data?:
          | {
              capture_method?:
                | (
                    | "automatic"
                    | "automatic_async"
                    | "manual"
                    | UnknownEnumStringValue
                  )
                | undefined
              description?: string | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              setup_future_usage?:
                | ("off_session" | "on_session" | UnknownEnumStringValue)
                | undefined
              statement_descriptor?: string | undefined
              statement_descriptor_suffix?: string | undefined
              transfer_group?: string | undefined
            }
          | undefined
        payment_method_collection?:
          | ("always" | "if_required" | UnknownEnumStringValue)
          | undefined
        payment_method_types?:
          | (
              | "affirm"
              | "afterpay_clearpay"
              | "alipay"
              | "alma"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "billie"
              | "blik"
              | "boleto"
              | "card"
              | "cashapp"
              | "eps"
              | "fpx"
              | "giropay"
              | "grabpay"
              | "ideal"
              | "klarna"
              | "konbini"
              | "link"
              | "mobilepay"
              | "multibanco"
              | "oxxo"
              | "p24"
              | "pay_by_bank"
              | "paynow"
              | "paypal"
              | "pix"
              | "promptpay"
              | "satispay"
              | "sepa_debit"
              | "sofort"
              | "swish"
              | "twint"
              | "us_bank_account"
              | "wechat_pay"
              | "zip"
              | UnknownEnumStringValue
            )[]
          | undefined
        phone_number_collection?:
          | {
              enabled: boolean
            }
          | undefined
        restrictions?:
          | {
              completed_sessions: {
                limit: number
              }
            }
          | undefined
        shipping_address_collection?:
          | {
              allowed_countries: (
                | "AC"
                | "AD"
                | "AE"
                | "AF"
                | "AG"
                | "AI"
                | "AL"
                | "AM"
                | "AO"
                | "AQ"
                | "AR"
                | "AT"
                | "AU"
                | "AW"
                | "AX"
                | "AZ"
                | "BA"
                | "BB"
                | "BD"
                | "BE"
                | "BF"
                | "BG"
                | "BH"
                | "BI"
                | "BJ"
                | "BL"
                | "BM"
                | "BN"
                | "BO"
                | "BQ"
                | "BR"
                | "BS"
                | "BT"
                | "BV"
                | "BW"
                | "BY"
                | "BZ"
                | "CA"
                | "CD"
                | "CF"
                | "CG"
                | "CH"
                | "CI"
                | "CK"
                | "CL"
                | "CM"
                | "CN"
                | "CO"
                | "CR"
                | "CV"
                | "CW"
                | "CY"
                | "CZ"
                | "DE"
                | "DJ"
                | "DK"
                | "DM"
                | "DO"
                | "DZ"
                | "EC"
                | "EE"
                | "EG"
                | "EH"
                | "ER"
                | "ES"
                | "ET"
                | "FI"
                | "FJ"
                | "FK"
                | "FO"
                | "FR"
                | "GA"
                | "GB"
                | "GD"
                | "GE"
                | "GF"
                | "GG"
                | "GH"
                | "GI"
                | "GL"
                | "GM"
                | "GN"
                | "GP"
                | "GQ"
                | "GR"
                | "GS"
                | "GT"
                | "GU"
                | "GW"
                | "GY"
                | "HK"
                | "HN"
                | "HR"
                | "HT"
                | "HU"
                | "ID"
                | "IE"
                | "IL"
                | "IM"
                | "IN"
                | "IO"
                | "IQ"
                | "IS"
                | "IT"
                | "JE"
                | "JM"
                | "JO"
                | "JP"
                | "KE"
                | "KG"
                | "KH"
                | "KI"
                | "KM"
                | "KN"
                | "KR"
                | "KW"
                | "KY"
                | "KZ"
                | "LA"
                | "LB"
                | "LC"
                | "LI"
                | "LK"
                | "LR"
                | "LS"
                | "LT"
                | "LU"
                | "LV"
                | "LY"
                | "MA"
                | "MC"
                | "MD"
                | "ME"
                | "MF"
                | "MG"
                | "MK"
                | "ML"
                | "MM"
                | "MN"
                | "MO"
                | "MQ"
                | "MR"
                | "MS"
                | "MT"
                | "MU"
                | "MV"
                | "MW"
                | "MX"
                | "MY"
                | "MZ"
                | "NA"
                | "NC"
                | "NE"
                | "NG"
                | "NI"
                | "NL"
                | "NO"
                | "NP"
                | "NR"
                | "NU"
                | "NZ"
                | "OM"
                | "PA"
                | "PE"
                | "PF"
                | "PG"
                | "PH"
                | "PK"
                | "PL"
                | "PM"
                | "PN"
                | "PR"
                | "PS"
                | "PT"
                | "PY"
                | "QA"
                | "RE"
                | "RO"
                | "RS"
                | "RU"
                | "RW"
                | "SA"
                | "SB"
                | "SC"
                | "SD"
                | "SE"
                | "SG"
                | "SH"
                | "SI"
                | "SJ"
                | "SK"
                | "SL"
                | "SM"
                | "SN"
                | "SO"
                | "SR"
                | "SS"
                | "ST"
                | "SV"
                | "SX"
                | "SZ"
                | "TA"
                | "TC"
                | "TD"
                | "TF"
                | "TG"
                | "TH"
                | "TJ"
                | "TK"
                | "TL"
                | "TM"
                | "TN"
                | "TO"
                | "TR"
                | "TT"
                | "TV"
                | "TW"
                | "TZ"
                | "UA"
                | "UG"
                | "US"
                | "UY"
                | "UZ"
                | "VA"
                | "VC"
                | "VE"
                | "VG"
                | "VN"
                | "VU"
                | "WF"
                | "WS"
                | "XK"
                | "YE"
                | "YT"
                | "ZA"
                | "ZM"
                | "ZW"
                | "ZZ"
                | UnknownEnumStringValue
              )[]
            }
          | undefined
        shipping_options?:
          | {
              shipping_rate?: string | undefined
            }[]
          | undefined
        submit_type?:
          | (
              | "auto"
              | "book"
              | "donate"
              | "pay"
              | "subscribe"
              | UnknownEnumStringValue
            )
          | undefined
        subscription_data?:
          | {
              description?: string | undefined
              invoice_settings?:
                | {
                    issuer?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                  }
                | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              trial_period_days?: number | undefined
              trial_settings?:
                | {
                    end_behavior: {
                      missing_payment_method:
                        | "cancel"
                        | "create_invoice"
                        | "pause"
                        | UnknownEnumStringValue
                    }
                  }
                | undefined
            }
          | undefined
        tax_id_collection?:
          | {
              enabled: boolean
              required?:
                | ("if_supported" | "never" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        transfer_data?:
          | {
              amount?: number | undefined
              destination: string
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_link>> {
    const url = `/v1/payment_links`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentLinksPaymentLink(
    p: {
      expand?: string[]
      paymentLink: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_link>> {
    const url = `/v1/payment_links/${p["paymentLink"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentLinksPaymentLink(
    p: {
      paymentLink: string
      requestBody?: {
        active?: boolean | undefined
        after_completion?:
          | {
              hosted_confirmation?:
                | {
                    custom_message?: string | undefined
                  }
                | undefined
              redirect?:
                | {
                    url: string
                  }
                | undefined
              type: "hosted_confirmation" | "redirect" | UnknownEnumStringValue
            }
          | undefined
        allow_promotion_codes?: boolean | undefined
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        billing_address_collection?:
          | ("auto" | "required" | UnknownEnumStringValue)
          | undefined
        custom_fields?:
          | (
              | {
                  dropdown?:
                    | {
                        default_value?: string | undefined
                        options: {
                          label: string
                          value: string
                        }[]
                      }
                    | undefined
                  key: string
                  label: {
                    custom: string
                    type: "custom" | UnknownEnumStringValue
                  }
                  numeric?:
                    | {
                        default_value?: string | undefined
                        maximum_length?: number | undefined
                        minimum_length?: number | undefined
                      }
                    | undefined
                  optional?: boolean | undefined
                  text?:
                    | {
                        default_value?: string | undefined
                        maximum_length?: number | undefined
                        minimum_length?: number | undefined
                      }
                    | undefined
                  type: "dropdown" | "numeric" | "text" | UnknownEnumStringValue
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        custom_text?:
          | {
              after_submit?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              shipping_address?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              submit?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              terms_of_service_acceptance?:
                | (
                    | {
                        message: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        customer_creation?:
          | ("always" | "if_required" | UnknownEnumStringValue)
          | undefined
        expand?: string[] | undefined
        inactive_message?: (string | "" | UnknownEnumStringValue) | undefined
        invoice_creation?:
          | {
              enabled: boolean
              invoice_data?:
                | {
                    account_tax_ids?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                    custom_fields?:
                      | (
                          | {
                              name: string
                              value: string
                            }[]
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    description?: string | undefined
                    footer?: string | undefined
                    issuer?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                    metadata?:
                      | (
                          | {
                              [key: string]: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    rendering_options?:
                      | (
                          | {
                              amount_tax_display?:
                                | (
                                    | ""
                                    | "exclude_tax"
                                    | "include_inclusive_tax"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
            }
          | undefined
        line_items?:
          | {
              adjustable_quantity?:
                | {
                    enabled: boolean
                    maximum?: number | undefined
                    minimum?: number | undefined
                  }
                | undefined
              id: string
              quantity?: number | undefined
            }[]
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        payment_intent_data?:
          | {
              description?: (string | "" | UnknownEnumStringValue) | undefined
              metadata?:
                | (
                    | {
                        [key: string]: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              statement_descriptor?:
                | (string | "" | UnknownEnumStringValue)
                | undefined
              statement_descriptor_suffix?:
                | (string | "" | UnknownEnumStringValue)
                | undefined
              transfer_group?:
                | (string | "" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        payment_method_collection?:
          | ("always" | "if_required" | UnknownEnumStringValue)
          | undefined
        payment_method_types?:
          | (
              | (
                  | "affirm"
                  | "afterpay_clearpay"
                  | "alipay"
                  | "alma"
                  | "au_becs_debit"
                  | "bacs_debit"
                  | "bancontact"
                  | "billie"
                  | "blik"
                  | "boleto"
                  | "card"
                  | "cashapp"
                  | "eps"
                  | "fpx"
                  | "giropay"
                  | "grabpay"
                  | "ideal"
                  | "klarna"
                  | "konbini"
                  | "link"
                  | "mobilepay"
                  | "multibanco"
                  | "oxxo"
                  | "p24"
                  | "pay_by_bank"
                  | "paynow"
                  | "paypal"
                  | "pix"
                  | "promptpay"
                  | "satispay"
                  | "sepa_debit"
                  | "sofort"
                  | "swish"
                  | "twint"
                  | "us_bank_account"
                  | "wechat_pay"
                  | "zip"
                  | UnknownEnumStringValue
                )[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        phone_number_collection?:
          | {
              enabled: boolean
            }
          | undefined
        restrictions?:
          | (
              | {
                  completed_sessions: {
                    limit: number
                  }
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        shipping_address_collection?:
          | (
              | {
                  allowed_countries: (
                    | "AC"
                    | "AD"
                    | "AE"
                    | "AF"
                    | "AG"
                    | "AI"
                    | "AL"
                    | "AM"
                    | "AO"
                    | "AQ"
                    | "AR"
                    | "AT"
                    | "AU"
                    | "AW"
                    | "AX"
                    | "AZ"
                    | "BA"
                    | "BB"
                    | "BD"
                    | "BE"
                    | "BF"
                    | "BG"
                    | "BH"
                    | "BI"
                    | "BJ"
                    | "BL"
                    | "BM"
                    | "BN"
                    | "BO"
                    | "BQ"
                    | "BR"
                    | "BS"
                    | "BT"
                    | "BV"
                    | "BW"
                    | "BY"
                    | "BZ"
                    | "CA"
                    | "CD"
                    | "CF"
                    | "CG"
                    | "CH"
                    | "CI"
                    | "CK"
                    | "CL"
                    | "CM"
                    | "CN"
                    | "CO"
                    | "CR"
                    | "CV"
                    | "CW"
                    | "CY"
                    | "CZ"
                    | "DE"
                    | "DJ"
                    | "DK"
                    | "DM"
                    | "DO"
                    | "DZ"
                    | "EC"
                    | "EE"
                    | "EG"
                    | "EH"
                    | "ER"
                    | "ES"
                    | "ET"
                    | "FI"
                    | "FJ"
                    | "FK"
                    | "FO"
                    | "FR"
                    | "GA"
                    | "GB"
                    | "GD"
                    | "GE"
                    | "GF"
                    | "GG"
                    | "GH"
                    | "GI"
                    | "GL"
                    | "GM"
                    | "GN"
                    | "GP"
                    | "GQ"
                    | "GR"
                    | "GS"
                    | "GT"
                    | "GU"
                    | "GW"
                    | "GY"
                    | "HK"
                    | "HN"
                    | "HR"
                    | "HT"
                    | "HU"
                    | "ID"
                    | "IE"
                    | "IL"
                    | "IM"
                    | "IN"
                    | "IO"
                    | "IQ"
                    | "IS"
                    | "IT"
                    | "JE"
                    | "JM"
                    | "JO"
                    | "JP"
                    | "KE"
                    | "KG"
                    | "KH"
                    | "KI"
                    | "KM"
                    | "KN"
                    | "KR"
                    | "KW"
                    | "KY"
                    | "KZ"
                    | "LA"
                    | "LB"
                    | "LC"
                    | "LI"
                    | "LK"
                    | "LR"
                    | "LS"
                    | "LT"
                    | "LU"
                    | "LV"
                    | "LY"
                    | "MA"
                    | "MC"
                    | "MD"
                    | "ME"
                    | "MF"
                    | "MG"
                    | "MK"
                    | "ML"
                    | "MM"
                    | "MN"
                    | "MO"
                    | "MQ"
                    | "MR"
                    | "MS"
                    | "MT"
                    | "MU"
                    | "MV"
                    | "MW"
                    | "MX"
                    | "MY"
                    | "MZ"
                    | "NA"
                    | "NC"
                    | "NE"
                    | "NG"
                    | "NI"
                    | "NL"
                    | "NO"
                    | "NP"
                    | "NR"
                    | "NU"
                    | "NZ"
                    | "OM"
                    | "PA"
                    | "PE"
                    | "PF"
                    | "PG"
                    | "PH"
                    | "PK"
                    | "PL"
                    | "PM"
                    | "PN"
                    | "PR"
                    | "PS"
                    | "PT"
                    | "PY"
                    | "QA"
                    | "RE"
                    | "RO"
                    | "RS"
                    | "RU"
                    | "RW"
                    | "SA"
                    | "SB"
                    | "SC"
                    | "SD"
                    | "SE"
                    | "SG"
                    | "SH"
                    | "SI"
                    | "SJ"
                    | "SK"
                    | "SL"
                    | "SM"
                    | "SN"
                    | "SO"
                    | "SR"
                    | "SS"
                    | "ST"
                    | "SV"
                    | "SX"
                    | "SZ"
                    | "TA"
                    | "TC"
                    | "TD"
                    | "TF"
                    | "TG"
                    | "TH"
                    | "TJ"
                    | "TK"
                    | "TL"
                    | "TM"
                    | "TN"
                    | "TO"
                    | "TR"
                    | "TT"
                    | "TV"
                    | "TW"
                    | "TZ"
                    | "UA"
                    | "UG"
                    | "US"
                    | "UY"
                    | "UZ"
                    | "VA"
                    | "VC"
                    | "VE"
                    | "VG"
                    | "VN"
                    | "VU"
                    | "WF"
                    | "WS"
                    | "XK"
                    | "YE"
                    | "YT"
                    | "ZA"
                    | "ZM"
                    | "ZW"
                    | "ZZ"
                    | UnknownEnumStringValue
                  )[]
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        submit_type?:
          | (
              | "auto"
              | "book"
              | "donate"
              | "pay"
              | "subscribe"
              | UnknownEnumStringValue
            )
          | undefined
        subscription_data?:
          | {
              invoice_settings?:
                | {
                    issuer?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                  }
                | undefined
              metadata?:
                | (
                    | {
                        [key: string]: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              trial_period_days?:
                | (number | "" | UnknownEnumStringValue)
                | undefined
              trial_settings?:
                | (
                    | {
                        end_behavior: {
                          missing_payment_method:
                            | "cancel"
                            | "create_invoice"
                            | "pause"
                            | UnknownEnumStringValue
                        }
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        tax_id_collection?:
          | {
              enabled: boolean
              required?:
                | ("if_supported" | "never" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_link>> {
    const url = `/v1/payment_links/${p["paymentLink"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentLinksPaymentLinkLineItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentLink: string
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_item[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/payment_links/${p["paymentLink"]}/line_items`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentMethodConfigurations(
    p: {
      application?: string | "" | UnknownEnumStringValue
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_payment_method_configuration[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/payment_method_configurations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      application: p["application"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentMethodConfigurations(
    p: {
      requestBody?: {
        acss_debit?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        affirm?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        afterpay_clearpay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        alipay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        alma?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        amazon_pay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        apple_pay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        apple_pay_later?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        au_becs_debit?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        bacs_debit?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        bancontact?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        billie?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        blik?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        boleto?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        card?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        cartes_bancaires?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        cashapp?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        customer_balance?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        eps?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        fpx?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        giropay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        google_pay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        grabpay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        ideal?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        jcb?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        klarna?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        konbini?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        link?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        mobilepay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        multibanco?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        name?: string | undefined
        nz_bank_account?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        oxxo?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        p24?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        parent?: string | undefined
        pay_by_bank?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        paynow?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        paypal?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        promptpay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        revolut_pay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        satispay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        sepa_debit?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        sofort?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        swish?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        twint?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        us_bank_account?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        wechat_pay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        zip?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method_configuration>> {
    const url = `/v1/payment_method_configurations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentMethodConfigurationsConfiguration(
    p: {
      configuration: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method_configuration>> {
    const url = `/v1/payment_method_configurations/${p["configuration"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentMethodConfigurationsConfiguration(
    p: {
      configuration: string
      requestBody?: {
        acss_debit?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        active?: boolean | undefined
        affirm?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        afterpay_clearpay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        alipay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        alma?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        amazon_pay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        apple_pay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        apple_pay_later?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        au_becs_debit?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        bacs_debit?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        bancontact?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        billie?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        blik?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        boleto?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        card?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        cartes_bancaires?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        cashapp?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        customer_balance?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        eps?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        fpx?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        giropay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        google_pay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        grabpay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        ideal?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        jcb?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        klarna?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        konbini?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        link?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        mobilepay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        multibanco?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        name?: string | undefined
        nz_bank_account?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        oxxo?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        p24?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        pay_by_bank?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        paynow?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        paypal?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        promptpay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        revolut_pay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        satispay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        sepa_debit?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        sofort?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        swish?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        twint?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        us_bank_account?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        wechat_pay?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
        zip?:
          | {
              display_preference?:
                | {
                    preference?:
                      | ("none" | "off" | "on" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method_configuration>> {
    const url = `/v1/payment_method_configurations/${p["configuration"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentMethodDomains(
    p: {
      domainName?: string
      enabled?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_payment_method_domain[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/payment_method_domains`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      domain_name: p["domainName"],
      enabled: p["enabled"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentMethodDomains(
    p: {
      requestBody: {
        domain_name: string
        enabled?: boolean | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method_domain>> {
    const url = `/v1/payment_method_domains`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentMethodDomainsPaymentMethodDomain(
    p: {
      expand?: string[]
      paymentMethodDomain: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method_domain>> {
    const url = `/v1/payment_method_domains/${p["paymentMethodDomain"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentMethodDomainsPaymentMethodDomain(
    p: {
      paymentMethodDomain: string
      requestBody?: {
        enabled?: boolean | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method_domain>> {
    const url = `/v1/payment_method_domains/${p["paymentMethodDomain"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentMethodDomainsPaymentMethodDomainValidate(
    p: {
      paymentMethodDomain: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method_domain>> {
    const url = `/v1/payment_method_domains/${p["paymentMethodDomain"]}/validate`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentMethods(
    p: {
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?:
        | "acss_debit"
        | "affirm"
        | "afterpay_clearpay"
        | "alipay"
        | "alma"
        | "amazon_pay"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "billie"
        | "blik"
        | "boleto"
        | "card"
        | "cashapp"
        | "customer_balance"
        | "eps"
        | "fpx"
        | "giropay"
        | "grabpay"
        | "ideal"
        | "kakao_pay"
        | "klarna"
        | "konbini"
        | "kr_card"
        | "link"
        | "mobilepay"
        | "multibanco"
        | "naver_pay"
        | "nz_bank_account"
        | "oxxo"
        | "p24"
        | "pay_by_bank"
        | "payco"
        | "paynow"
        | "paypal"
        | "pix"
        | "promptpay"
        | "revolut_pay"
        | "samsung_pay"
        | "satispay"
        | "sepa_debit"
        | "sofort"
        | "swish"
        | "twint"
        | "us_bank_account"
        | "wechat_pay"
        | "zip"
        | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_payment_method[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/payment_methods`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentMethods(
    p: {
      requestBody?: {
        acss_debit?:
          | {
              account_number: string
              institution_number: string
              transit_number: string
            }
          | undefined
        affirm?: EmptyObject | undefined
        afterpay_clearpay?: EmptyObject | undefined
        alipay?: EmptyObject | undefined
        allow_redisplay?:
          | ("always" | "limited" | "unspecified" | UnknownEnumStringValue)
          | undefined
        alma?: EmptyObject | undefined
        amazon_pay?: EmptyObject | undefined
        au_becs_debit?:
          | {
              account_number: string
              bsb_number: string
            }
          | undefined
        bacs_debit?:
          | {
              account_number?: string | undefined
              sort_code?: string | undefined
            }
          | undefined
        bancontact?: EmptyObject | undefined
        billie?: EmptyObject | undefined
        billing_details?:
          | {
              address?:
                | (
                    | {
                        city?: string | undefined
                        country?: string | undefined
                        line1?: string | undefined
                        line2?: string | undefined
                        postal_code?: string | undefined
                        state?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              email?: (string | "" | UnknownEnumStringValue) | undefined
              name?: (string | "" | UnknownEnumStringValue) | undefined
              phone?: (string | "" | UnknownEnumStringValue) | undefined
            }
          | undefined
        blik?: EmptyObject | undefined
        boleto?:
          | {
              tax_id: string
            }
          | undefined
        card?:
          | (
              | {
                  cvc?: string | undefined
                  exp_month: number
                  exp_year: number
                  networks?:
                    | {
                        preferred?:
                          | (
                              | "cartes_bancaires"
                              | "mastercard"
                              | "visa"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | undefined
                  number: string
                }
              | {
                  token: string
                }
            )
          | undefined
        cashapp?: EmptyObject | undefined
        customer?: string | undefined
        customer_balance?: EmptyObject | undefined
        eps?:
          | {
              bank?:
                | (
                    | "arzte_und_apotheker_bank"
                    | "austrian_anadi_bank_ag"
                    | "bank_austria"
                    | "bankhaus_carl_spangler"
                    | "bankhaus_schelhammer_und_schattera_ag"
                    | "bawag_psk_ag"
                    | "bks_bank_ag"
                    | "brull_kallmus_bank_ag"
                    | "btv_vier_lander_bank"
                    | "capital_bank_grawe_gruppe_ag"
                    | "deutsche_bank_ag"
                    | "dolomitenbank"
                    | "easybank_ag"
                    | "erste_bank_und_sparkassen"
                    | "hypo_alpeadriabank_international_ag"
                    | "hypo_bank_burgenland_aktiengesellschaft"
                    | "hypo_noe_lb_fur_niederosterreich_u_wien"
                    | "hypo_oberosterreich_salzburg_steiermark"
                    | "hypo_tirol_bank_ag"
                    | "hypo_vorarlberg_bank_ag"
                    | "marchfelder_bank"
                    | "oberbank_ag"
                    | "raiffeisen_bankengruppe_osterreich"
                    | "schoellerbank_ag"
                    | "sparda_bank_wien"
                    | "volksbank_gruppe"
                    | "volkskreditbank_ag"
                    | "vr_bank_braunau"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        fpx?:
          | {
              bank:
                | "affin_bank"
                | "agrobank"
                | "alliance_bank"
                | "ambank"
                | "bank_islam"
                | "bank_muamalat"
                | "bank_of_china"
                | "bank_rakyat"
                | "bsn"
                | "cimb"
                | "deutsche_bank"
                | "hong_leong_bank"
                | "hsbc"
                | "kfh"
                | "maybank2e"
                | "maybank2u"
                | "ocbc"
                | "pb_enterprise"
                | "public_bank"
                | "rhb"
                | "standard_chartered"
                | "uob"
                | UnknownEnumStringValue
            }
          | undefined
        giropay?: EmptyObject | undefined
        grabpay?: EmptyObject | undefined
        ideal?:
          | {
              bank?:
                | (
                    | "abn_amro"
                    | "asn_bank"
                    | "bunq"
                    | "handelsbanken"
                    | "ing"
                    | "knab"
                    | "moneyou"
                    | "n26"
                    | "nn"
                    | "rabobank"
                    | "regiobank"
                    | "revolut"
                    | "sns_bank"
                    | "triodos_bank"
                    | "van_lanschot"
                    | "yoursafe"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        interac_present?: EmptyObject | undefined
        kakao_pay?: EmptyObject | undefined
        klarna?:
          | {
              dob?:
                | {
                    day: number
                    month: number
                    year: number
                  }
                | undefined
            }
          | undefined
        konbini?: EmptyObject | undefined
        kr_card?: EmptyObject | undefined
        link?: EmptyObject | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        mobilepay?: EmptyObject | undefined
        multibanco?: EmptyObject | undefined
        naver_pay?:
          | {
              funding?: ("card" | "points" | UnknownEnumStringValue) | undefined
            }
          | undefined
        nz_bank_account?:
          | {
              account_holder_name?: string | undefined
              account_number: string
              bank_code: string
              branch_code: string
              reference?: string | undefined
              suffix: string
            }
          | undefined
        oxxo?: EmptyObject | undefined
        p24?:
          | {
              bank?:
                | (
                    | "alior_bank"
                    | "bank_millennium"
                    | "bank_nowy_bfg_sa"
                    | "bank_pekao_sa"
                    | "banki_spbdzielcze"
                    | "blik"
                    | "bnp_paribas"
                    | "boz"
                    | "citi_handlowy"
                    | "credit_agricole"
                    | "envelobank"
                    | "etransfer_pocztowy24"
                    | "getin_bank"
                    | "ideabank"
                    | "ing"
                    | "inteligo"
                    | "mbank_mtransfer"
                    | "nest_przelew"
                    | "noble_pay"
                    | "pbac_z_ipko"
                    | "plus_bank"
                    | "santander_przelew24"
                    | "tmobile_usbugi_bankowe"
                    | "toyota_bank"
                    | "velobank"
                    | "volkswagen_bank"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        pay_by_bank?: EmptyObject | undefined
        payco?: EmptyObject | undefined
        payment_method?: string | undefined
        paynow?: EmptyObject | undefined
        paypal?: EmptyObject | undefined
        pix?: EmptyObject | undefined
        promptpay?: EmptyObject | undefined
        radar_options?:
          | {
              session?: string | undefined
            }
          | undefined
        revolut_pay?: EmptyObject | undefined
        samsung_pay?: EmptyObject | undefined
        satispay?: EmptyObject | undefined
        sepa_debit?:
          | {
              iban: string
            }
          | undefined
        sofort?:
          | {
              country:
                | "AT"
                | "BE"
                | "DE"
                | "ES"
                | "IT"
                | "NL"
                | UnknownEnumStringValue
            }
          | undefined
        swish?: EmptyObject | undefined
        twint?: EmptyObject | undefined
        type?:
          | (
              | "acss_debit"
              | "affirm"
              | "afterpay_clearpay"
              | "alipay"
              | "alma"
              | "amazon_pay"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "billie"
              | "blik"
              | "boleto"
              | "card"
              | "cashapp"
              | "customer_balance"
              | "eps"
              | "fpx"
              | "giropay"
              | "grabpay"
              | "ideal"
              | "kakao_pay"
              | "klarna"
              | "konbini"
              | "kr_card"
              | "link"
              | "mobilepay"
              | "multibanco"
              | "naver_pay"
              | "nz_bank_account"
              | "oxxo"
              | "p24"
              | "pay_by_bank"
              | "payco"
              | "paynow"
              | "paypal"
              | "pix"
              | "promptpay"
              | "revolut_pay"
              | "samsung_pay"
              | "satispay"
              | "sepa_debit"
              | "sofort"
              | "swish"
              | "twint"
              | "us_bank_account"
              | "wechat_pay"
              | "zip"
              | UnknownEnumStringValue
            )
          | undefined
        us_bank_account?:
          | {
              account_holder_type?:
                | ("company" | "individual" | UnknownEnumStringValue)
                | undefined
              account_number?: string | undefined
              account_type?:
                | ("checking" | "savings" | UnknownEnumStringValue)
                | undefined
              financial_connections_account?: string | undefined
              routing_number?: string | undefined
            }
          | undefined
        wechat_pay?: EmptyObject | undefined
        zip?: EmptyObject | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method>> {
    const url = `/v1/payment_methods`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPaymentMethodsPaymentMethod(
    p: {
      expand?: string[]
      paymentMethod: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method>> {
    const url = `/v1/payment_methods/${p["paymentMethod"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentMethodsPaymentMethod(
    p: {
      paymentMethod: string
      requestBody?: {
        allow_redisplay?:
          | ("always" | "limited" | "unspecified" | UnknownEnumStringValue)
          | undefined
        billing_details?:
          | {
              address?:
                | (
                    | {
                        city?: string | undefined
                        country?: string | undefined
                        line1?: string | undefined
                        line2?: string | undefined
                        postal_code?: string | undefined
                        state?: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              email?: (string | "" | UnknownEnumStringValue) | undefined
              name?: (string | "" | UnknownEnumStringValue) | undefined
              phone?: (string | "" | UnknownEnumStringValue) | undefined
            }
          | undefined
        card?:
          | {
              exp_month?: number | undefined
              exp_year?: number | undefined
              networks?:
                | {
                    preferred?:
                      | (
                          | ""
                          | "cartes_bancaires"
                          | "mastercard"
                          | "visa"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        link?: EmptyObject | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        pay_by_bank?: EmptyObject | undefined
        us_bank_account?:
          | {
              account_holder_type?:
                | ("company" | "individual" | UnknownEnumStringValue)
                | undefined
              account_type?:
                | ("checking" | "savings" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method>> {
    const url = `/v1/payment_methods/${p["paymentMethod"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentMethodsPaymentMethodAttach(
    p: {
      paymentMethod: string
      requestBody: {
        customer: string
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method>> {
    const url = `/v1/payment_methods/${p["paymentMethod"]}/attach`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPaymentMethodsPaymentMethodDetach(
    p: {
      paymentMethod: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payment_method>> {
    const url = `/v1/payment_methods/${p["paymentMethod"]}/detach`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPayouts(
    p: {
      arrivalDate?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      destination?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_payout[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/payouts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      arrival_date: p["arrivalDate"],
      created: p["created"],
      destination: p["destination"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPayouts(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string | undefined
        destination?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        method?: ("instant" | "standard" | UnknownEnumStringValue) | undefined
        source_type?:
          | ("bank_account" | "card" | "fpx" | UnknownEnumStringValue)
          | undefined
        statement_descriptor?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payout>> {
    const url = `/v1/payouts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPayoutsPayout(
    p: {
      expand?: string[]
      payout: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payout>> {
    const url = `/v1/payouts/${p["payout"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPayoutsPayout(
    p: {
      payout: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payout>> {
    const url = `/v1/payouts/${p["payout"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPayoutsPayoutCancel(
    p: {
      payout: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payout>> {
    const url = `/v1/payouts/${p["payout"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPayoutsPayoutReverse(
    p: {
      payout: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_payout>> {
    const url = `/v1/payouts/${p["payout"]}/reverse`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPlans(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      product?: string
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_plan[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/plans`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      active: p["active"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      product: p["product"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPlans(
    p: {
      requestBody: {
        active?: boolean | undefined
        amount?: number | undefined
        amount_decimal?: string | undefined
        billing_scheme?:
          | ("per_unit" | "tiered" | UnknownEnumStringValue)
          | undefined
        currency: string
        expand?: string[] | undefined
        id?: string | undefined
        interval: "day" | "month" | "week" | "year" | UnknownEnumStringValue
        interval_count?: number | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        meter?: string | undefined
        nickname?: string | undefined
        product?:
          | (
              | {
                  active?: boolean | undefined
                  id?: string | undefined
                  metadata?:
                    | {
                        [key: string]: string | undefined
                      }
                    | undefined
                  name: string
                  statement_descriptor?: string | undefined
                  tax_code?: string | undefined
                  unit_label?: string | undefined
                }
              | string
            )
          | undefined
        tiers?:
          | {
              flat_amount?: number | undefined
              flat_amount_decimal?: string | undefined
              unit_amount?: number | undefined
              unit_amount_decimal?: string | undefined
              up_to: "inf" | UnknownEnumStringValue | number
            }[]
          | undefined
        tiers_mode?:
          | ("graduated" | "volume" | UnknownEnumStringValue)
          | undefined
        transform_usage?:
          | {
              divide_by: number
              round: "down" | "up" | UnknownEnumStringValue
            }
          | undefined
        trial_period_days?: number | undefined
        usage_type?:
          | ("licensed" | "metered" | UnknownEnumStringValue)
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_plan>> {
    const url = `/v1/plans`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deletePlansPlan(
    p: {
      plan: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_plan>> {
    const url = `/v1/plans/${p["plan"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPlansPlan(
    p: {
      expand?: string[]
      plan: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_plan>> {
    const url = `/v1/plans/${p["plan"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPlansPlan(
    p: {
      plan: string
      requestBody?: {
        active?: boolean | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        nickname?: string | undefined
        product?: string | undefined
        trial_period_days?: number | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_plan>> {
    const url = `/v1/plans/${p["plan"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPrices(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      lookupKeys?: string[]
      product?: string
      recurring?: {
        interval?:
          | ("day" | "month" | "week" | "year" | UnknownEnumStringValue)
          | undefined
        meter?: string | undefined
        usage_type?:
          | ("licensed" | "metered" | UnknownEnumStringValue)
          | undefined
      }
      startingAfter?: string
      type?: "one_time" | "recurring" | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_price[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/prices`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      active: p["active"],
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      lookup_keys: p["lookupKeys"],
      product: p["product"],
      recurring: p["recurring"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPrices(
    p: {
      requestBody: {
        active?: boolean | undefined
        billing_scheme?:
          | ("per_unit" | "tiered" | UnknownEnumStringValue)
          | undefined
        currency: string
        currency_options?:
          | {
              [key: string]:
                | {
                    custom_unit_amount?:
                      | {
                          enabled: boolean
                          maximum?: number | undefined
                          minimum?: number | undefined
                          preset?: number | undefined
                        }
                      | undefined
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    tiers?:
                      | {
                          flat_amount?: number | undefined
                          flat_amount_decimal?: string | undefined
                          unit_amount?: number | undefined
                          unit_amount_decimal?: string | undefined
                          up_to: "inf" | UnknownEnumStringValue | number
                        }[]
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
            }
          | undefined
        custom_unit_amount?:
          | {
              enabled: boolean
              maximum?: number | undefined
              minimum?: number | undefined
              preset?: number | undefined
            }
          | undefined
        expand?: string[] | undefined
        lookup_key?: string | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        nickname?: string | undefined
        product?: string | undefined
        product_data?:
          | {
              active?: boolean | undefined
              id?: string | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              name: string
              statement_descriptor?: string | undefined
              tax_code?: string | undefined
              unit_label?: string | undefined
            }
          | undefined
        recurring?:
          | {
              interval:
                | "day"
                | "month"
                | "week"
                | "year"
                | UnknownEnumStringValue
              interval_count?: number | undefined
              meter?: string | undefined
              usage_type?:
                | ("licensed" | "metered" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        tax_behavior?:
          | ("exclusive" | "inclusive" | "unspecified" | UnknownEnumStringValue)
          | undefined
        tiers?:
          | {
              flat_amount?: number | undefined
              flat_amount_decimal?: string | undefined
              unit_amount?: number | undefined
              unit_amount_decimal?: string | undefined
              up_to: "inf" | UnknownEnumStringValue | number
            }[]
          | undefined
        tiers_mode?:
          | ("graduated" | "volume" | UnknownEnumStringValue)
          | undefined
        transfer_lookup_key?: boolean | undefined
        transform_quantity?:
          | {
              divide_by: number
              round: "down" | "up" | UnknownEnumStringValue
            }
          | undefined
        unit_amount?: number | undefined
        unit_amount_decimal?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_price>> {
    const url = `/v1/prices`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPricesSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_price[]
      has_more: boolean
      next_page?: (string | null) | undefined
      object: "search_result" | UnknownEnumStringValue
      total_count?: number | undefined
      url: string
    }>
  > {
    const url = `/v1/prices/search`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPricesPrice(
    p: {
      expand?: string[]
      price: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_price>> {
    const url = `/v1/prices/${p["price"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPricesPrice(
    p: {
      price: string
      requestBody?: {
        active?: boolean | undefined
        currency_options?:
          | (
              | {
                  [key: string]:
                    | {
                        custom_unit_amount?:
                          | {
                              enabled: boolean
                              maximum?: number | undefined
                              minimum?: number | undefined
                              preset?: number | undefined
                            }
                          | undefined
                        tax_behavior?:
                          | (
                              | "exclusive"
                              | "inclusive"
                              | "unspecified"
                              | UnknownEnumStringValue
                            )
                          | undefined
                        tiers?:
                          | {
                              flat_amount?: number | undefined
                              flat_amount_decimal?: string | undefined
                              unit_amount?: number | undefined
                              unit_amount_decimal?: string | undefined
                              up_to: "inf" | UnknownEnumStringValue | number
                            }[]
                          | undefined
                        unit_amount?: number | undefined
                        unit_amount_decimal?: string | undefined
                      }
                    | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        lookup_key?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        nickname?: string | undefined
        tax_behavior?:
          | ("exclusive" | "inclusive" | "unspecified" | UnknownEnumStringValue)
          | undefined
        transfer_lookup_key?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_price>> {
    const url = `/v1/prices/${p["price"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getProducts(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      ids?: string[]
      limit?: number
      shippable?: boolean
      startingAfter?: string
      url?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_product[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/products`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      active: p["active"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      ids: p["ids"],
      limit: p["limit"],
      shippable: p["shippable"],
      starting_after: p["startingAfter"],
      url: p["url"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postProducts(
    p: {
      requestBody: {
        active?: boolean | undefined
        default_price_data?:
          | {
              currency: string
              currency_options?:
                | {
                    [key: string]:
                      | {
                          custom_unit_amount?:
                            | {
                                enabled: boolean
                                maximum?: number | undefined
                                minimum?: number | undefined
                                preset?: number | undefined
                              }
                            | undefined
                          tax_behavior?:
                            | (
                                | "exclusive"
                                | "inclusive"
                                | "unspecified"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          tiers?:
                            | {
                                flat_amount?: number | undefined
                                flat_amount_decimal?: string | undefined
                                unit_amount?: number | undefined
                                unit_amount_decimal?: string | undefined
                                up_to: "inf" | UnknownEnumStringValue | number
                              }[]
                            | undefined
                          unit_amount?: number | undefined
                          unit_amount_decimal?: string | undefined
                        }
                      | undefined
                  }
                | undefined
              custom_unit_amount?:
                | {
                    enabled: boolean
                    maximum?: number | undefined
                    minimum?: number | undefined
                    preset?: number | undefined
                  }
                | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              recurring?:
                | {
                    interval:
                      | "day"
                      | "month"
                      | "week"
                      | "year"
                      | UnknownEnumStringValue
                    interval_count?: number | undefined
                  }
                | undefined
              tax_behavior?:
                | (
                    | "exclusive"
                    | "inclusive"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              unit_amount?: number | undefined
              unit_amount_decimal?: string | undefined
            }
          | undefined
        description?: string | undefined
        expand?: string[] | undefined
        id?: string | undefined
        images?: string[] | undefined
        marketing_features?:
          | {
              name: string
            }[]
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        name: string
        package_dimensions?:
          | {
              height: number
              length: number
              weight: number
              width: number
            }
          | undefined
        shippable?: boolean | undefined
        statement_descriptor?: string | undefined
        tax_code?: string | undefined
        unit_label?: string | undefined
        url?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_product>> {
    const url = `/v1/products`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getProductsSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_product[]
      has_more: boolean
      next_page?: (string | null) | undefined
      object: "search_result" | UnknownEnumStringValue
      total_count?: number | undefined
      url: string
    }>
  > {
    const url = `/v1/products/search`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteProductsId(
    p: {
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_product>> {
    const url = `/v1/products/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getProductsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_product>> {
    const url = `/v1/products/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postProductsId(
    p: {
      id: string
      requestBody?: {
        active?: boolean | undefined
        default_price?: string | undefined
        description?: (string | "" | UnknownEnumStringValue) | undefined
        expand?: string[] | undefined
        images?: (string[] | "" | UnknownEnumStringValue) | undefined
        marketing_features?:
          | (
              | {
                  name: string
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        name?: string | undefined
        package_dimensions?:
          | (
              | {
                  height: number
                  length: number
                  weight: number
                  width: number
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        shippable?: boolean | undefined
        statement_descriptor?: string | undefined
        tax_code?: (string | "" | UnknownEnumStringValue) | undefined
        unit_label?: (string | "" | UnknownEnumStringValue) | undefined
        url?: (string | "" | UnknownEnumStringValue) | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_product>> {
    const url = `/v1/products/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getProductsProductFeatures(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      product: string
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_product_feature[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/products/${p["product"]}/features`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postProductsProductFeatures(
    p: {
      product: string
      requestBody: {
        entitlement_feature: string
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_product_feature>> {
    const url = `/v1/products/${p["product"]}/features`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteProductsProductFeaturesId(
    p: {
      id: string
      product: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_product_feature>> {
    const url = `/v1/products/${p["product"]}/features/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getProductsProductFeaturesId(
    p: {
      expand?: string[]
      id: string
      product: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_product_feature>> {
    const url = `/v1/products/${p["product"]}/features/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPromotionCodes(
    p: {
      active?: boolean
      code?: string
      coupon?: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_promotion_code[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/promotion_codes`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      active: p["active"],
      code: p["code"],
      coupon: p["coupon"],
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPromotionCodes(
    p: {
      requestBody: {
        active?: boolean | undefined
        code?: string | undefined
        coupon: string
        customer?: string | undefined
        expand?: string[] | undefined
        expires_at?: number | undefined
        max_redemptions?: number | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        restrictions?:
          | {
              currency_options?:
                | {
                    [key: string]:
                      | {
                          minimum_amount?: number | undefined
                        }
                      | undefined
                  }
                | undefined
              first_time_transaction?: boolean | undefined
              minimum_amount?: number | undefined
              minimum_amount_currency?: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_promotion_code>> {
    const url = `/v1/promotion_codes`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getPromotionCodesPromotionCode(
    p: {
      expand?: string[]
      promotionCode: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_promotion_code>> {
    const url = `/v1/promotion_codes/${p["promotionCode"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postPromotionCodesPromotionCode(
    p: {
      promotionCode: string
      requestBody?: {
        active?: boolean | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        restrictions?:
          | {
              currency_options?:
                | {
                    [key: string]:
                      | {
                          minimum_amount?: number | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_promotion_code>> {
    const url = `/v1/promotion_codes/${p["promotionCode"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getQuotes(
    p: {
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "accepted"
        | "canceled"
        | "draft"
        | "open"
        | UnknownEnumStringValue
      testClock?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_quote[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/quotes`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      test_clock: p["testClock"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postQuotes(
    p: {
      requestBody?: {
        application_fee_amount?:
          | (number | "" | UnknownEnumStringValue)
          | undefined
        application_fee_percent?:
          | (number | "" | UnknownEnumStringValue)
          | undefined
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        collection_method?:
          | ("charge_automatically" | "send_invoice" | UnknownEnumStringValue)
          | undefined
        customer?: string | undefined
        default_tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        description?: (string | "" | UnknownEnumStringValue) | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        expires_at?: number | undefined
        footer?: (string | "" | UnknownEnumStringValue) | undefined
        from_quote?:
          | {
              is_revision?: boolean | undefined
              quote: string
            }
          | undefined
        header?: (string | "" | UnknownEnumStringValue) | undefined
        invoice_settings?:
          | {
              days_until_due?: number | undefined
              issuer?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        line_items?:
          | {
              discounts?:
                | (
                    | {
                        coupon?: string | undefined
                        discount?: string | undefined
                        promotion_code?: string | undefined
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product: string
                    recurring?:
                      | {
                          interval:
                            | "day"
                            | "month"
                            | "week"
                            | "year"
                            | UnknownEnumStringValue
                          interval_count?: number | undefined
                        }
                      | undefined
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
            }[]
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        on_behalf_of?: (string | "" | UnknownEnumStringValue) | undefined
        subscription_data?:
          | {
              description?: string | undefined
              effective_date?:
                | ("current_period_end" | UnknownEnumStringValue | number | "")
                | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              trial_period_days?:
                | (number | "" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        test_clock?: string | undefined
        transfer_data?:
          | (
              | {
                  amount?: number | undefined
                  amount_percent?: number | undefined
                  destination: string
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_quote>> {
    const url = `/v1/quotes`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getQuotesQuote(
    p: {
      expand?: string[]
      quote: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_quote>> {
    const url = `/v1/quotes/${p["quote"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postQuotesQuote(
    p: {
      quote: string
      requestBody?: {
        application_fee_amount?:
          | (number | "" | UnknownEnumStringValue)
          | undefined
        application_fee_percent?:
          | (number | "" | UnknownEnumStringValue)
          | undefined
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        collection_method?:
          | ("charge_automatically" | "send_invoice" | UnknownEnumStringValue)
          | undefined
        customer?: string | undefined
        default_tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        description?: (string | "" | UnknownEnumStringValue) | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        expires_at?: number | undefined
        footer?: (string | "" | UnknownEnumStringValue) | undefined
        header?: (string | "" | UnknownEnumStringValue) | undefined
        invoice_settings?:
          | {
              days_until_due?: number | undefined
              issuer?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        line_items?:
          | {
              discounts?:
                | (
                    | {
                        coupon?: string | undefined
                        discount?: string | undefined
                        promotion_code?: string | undefined
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              id?: string | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product: string
                    recurring?:
                      | {
                          interval:
                            | "day"
                            | "month"
                            | "week"
                            | "year"
                            | UnknownEnumStringValue
                          interval_count?: number | undefined
                        }
                      | undefined
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
            }[]
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        on_behalf_of?: (string | "" | UnknownEnumStringValue) | undefined
        subscription_data?:
          | {
              description?: (string | "" | UnknownEnumStringValue) | undefined
              effective_date?:
                | ("current_period_end" | UnknownEnumStringValue | number | "")
                | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              trial_period_days?:
                | (number | "" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        transfer_data?:
          | (
              | {
                  amount?: number | undefined
                  amount_percent?: number | undefined
                  destination: string
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_quote>> {
    const url = `/v1/quotes/${p["quote"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postQuotesQuoteAccept(
    p: {
      quote: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_quote>> {
    const url = `/v1/quotes/${p["quote"]}/accept`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postQuotesQuoteCancel(
    p: {
      quote: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_quote>> {
    const url = `/v1/quotes/${p["quote"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getQuotesQuoteComputedUpfrontLineItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      quote: string
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_item[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/quotes/${p["quote"]}/computed_upfront_line_items`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postQuotesQuoteFinalize(
    p: {
      quote: string
      requestBody?: {
        expand?: string[] | undefined
        expires_at?: number | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_quote>> {
    const url = `/v1/quotes/${p["quote"]}/finalize`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getQuotesQuoteLineItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      quote: string
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_item[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/quotes/${p["quote"]}/line_items`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getQuotesQuotePdf(
    p: {
      expand?: string[]
      quote: string
      requestBody?: EmptyObject
    },
    basePath:
      | Server<"getQuotesQuotePdf_StripeApi">
      | string = StripeApiServers.operations.getQuotesQuotePdf().build(),
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<string>> {
    const url = `/v1/quotes/${p["quote"]}/pdf`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      baseURL: basePath,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getRadarEarlyFraudWarnings(
    p: {
      charge?: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_radar_early_fraud_warning[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/radar/early_fraud_warnings`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getRadarEarlyFraudWarningsEarlyFraudWarning(
    p: {
      earlyFraudWarning: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_radar_early_fraud_warning>> {
    const url = `/v1/radar/early_fraud_warnings/${p["earlyFraudWarning"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getRadarValueListItems(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      value?: string
      valueList: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_radar_value_list_item[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/radar/value_list_items`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      value: p["value"],
      value_list: p["valueList"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postRadarValueListItems(
    p: {
      requestBody: {
        expand?: string[] | undefined
        value: string
        value_list: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_radar_value_list_item>> {
    const url = `/v1/radar/value_list_items`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteRadarValueListItemsItem(
    p: {
      item: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_radar_value_list_item>> {
    const url = `/v1/radar/value_list_items/${p["item"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getRadarValueListItemsItem(
    p: {
      expand?: string[]
      item: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_radar_value_list_item>> {
    const url = `/v1/radar/value_list_items/${p["item"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getRadarValueLists(
    p: {
      alias?: string
      contains?: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_radar_value_list[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/radar/value_lists`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      alias: p["alias"],
      contains: p["contains"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postRadarValueLists(
    p: {
      requestBody: {
        alias: string
        expand?: string[] | undefined
        item_type?:
          | (
              | "card_bin"
              | "card_fingerprint"
              | "case_sensitive_string"
              | "country"
              | "customer_id"
              | "email"
              | "ip_address"
              | "sepa_debit_fingerprint"
              | "string"
              | "us_bank_account_fingerprint"
              | UnknownEnumStringValue
            )
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        name: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_radar_value_list>> {
    const url = `/v1/radar/value_lists`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteRadarValueListsValueList(
    p: {
      valueList: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_radar_value_list>> {
    const url = `/v1/radar/value_lists/${p["valueList"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getRadarValueListsValueList(
    p: {
      expand?: string[]
      valueList: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_radar_value_list>> {
    const url = `/v1/radar/value_lists/${p["valueList"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postRadarValueListsValueList(
    p: {
      valueList: string
      requestBody?: {
        alias?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        name?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_radar_value_list>> {
    const url = `/v1/radar/value_lists/${p["valueList"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getRefunds(
    p: {
      charge?: string
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_refund[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/refunds`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postRefunds(
    p: {
      requestBody?: {
        amount?: number | undefined
        charge?: string | undefined
        currency?: string | undefined
        customer?: string | undefined
        expand?: string[] | undefined
        instructions_email?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        origin?: ("customer_balance" | UnknownEnumStringValue) | undefined
        payment_intent?: string | undefined
        reason?:
          | (
              | "duplicate"
              | "fraudulent"
              | "requested_by_customer"
              | UnknownEnumStringValue
            )
          | undefined
        refund_application_fee?: boolean | undefined
        reverse_transfer?: boolean | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_refund>> {
    const url = `/v1/refunds`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getRefundsRefund(
    p: {
      expand?: string[]
      refund: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_refund>> {
    const url = `/v1/refunds/${p["refund"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postRefundsRefund(
    p: {
      refund: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_refund>> {
    const url = `/v1/refunds/${p["refund"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postRefundsRefundCancel(
    p: {
      refund: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_refund>> {
    const url = `/v1/refunds/${p["refund"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getReportingReportRuns(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_reporting_report_run[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/reporting/report_runs`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postReportingReportRuns(
    p: {
      requestBody: {
        expand?: string[] | undefined
        parameters?:
          | {
              columns?: string[] | undefined
              connected_account?: string | undefined
              currency?: string | undefined
              interval_end?: number | undefined
              interval_start?: number | undefined
              payout?: string | undefined
              reporting_category?:
                | (
                    | "advance"
                    | "advance_funding"
                    | "anticipation_repayment"
                    | "charge"
                    | "charge_failure"
                    | "climate_order_purchase"
                    | "climate_order_refund"
                    | "connect_collection_transfer"
                    | "connect_reserved_funds"
                    | "contribution"
                    | "dispute"
                    | "dispute_reversal"
                    | "fee"
                    | "financing_paydown"
                    | "financing_paydown_reversal"
                    | "financing_payout"
                    | "financing_payout_reversal"
                    | "issuing_authorization_hold"
                    | "issuing_authorization_release"
                    | "issuing_dispute"
                    | "issuing_transaction"
                    | "network_cost"
                    | "other_adjustment"
                    | "partial_capture_reversal"
                    | "payout"
                    | "payout_reversal"
                    | "platform_earning"
                    | "platform_earning_refund"
                    | "refund"
                    | "refund_failure"
                    | "risk_reserved_funds"
                    | "tax"
                    | "topup"
                    | "topup_reversal"
                    | "transfer"
                    | "transfer_reversal"
                    | "unreconciled_customer_funds"
                    | UnknownEnumStringValue
                  )
                | undefined
              timezone?:
                | (
                    | "Africa/Abidjan"
                    | "Africa/Accra"
                    | "Africa/Addis_Ababa"
                    | "Africa/Algiers"
                    | "Africa/Asmara"
                    | "Africa/Asmera"
                    | "Africa/Bamako"
                    | "Africa/Bangui"
                    | "Africa/Banjul"
                    | "Africa/Bissau"
                    | "Africa/Blantyre"
                    | "Africa/Brazzaville"
                    | "Africa/Bujumbura"
                    | "Africa/Cairo"
                    | "Africa/Casablanca"
                    | "Africa/Ceuta"
                    | "Africa/Conakry"
                    | "Africa/Dakar"
                    | "Africa/Dar_es_Salaam"
                    | "Africa/Djibouti"
                    | "Africa/Douala"
                    | "Africa/El_Aaiun"
                    | "Africa/Freetown"
                    | "Africa/Gaborone"
                    | "Africa/Harare"
                    | "Africa/Johannesburg"
                    | "Africa/Juba"
                    | "Africa/Kampala"
                    | "Africa/Khartoum"
                    | "Africa/Kigali"
                    | "Africa/Kinshasa"
                    | "Africa/Lagos"
                    | "Africa/Libreville"
                    | "Africa/Lome"
                    | "Africa/Luanda"
                    | "Africa/Lubumbashi"
                    | "Africa/Lusaka"
                    | "Africa/Malabo"
                    | "Africa/Maputo"
                    | "Africa/Maseru"
                    | "Africa/Mbabane"
                    | "Africa/Mogadishu"
                    | "Africa/Monrovia"
                    | "Africa/Nairobi"
                    | "Africa/Ndjamena"
                    | "Africa/Niamey"
                    | "Africa/Nouakchott"
                    | "Africa/Ouagadougou"
                    | "Africa/Porto-Novo"
                    | "Africa/Sao_Tome"
                    | "Africa/Timbuktu"
                    | "Africa/Tripoli"
                    | "Africa/Tunis"
                    | "Africa/Windhoek"
                    | "America/Adak"
                    | "America/Anchorage"
                    | "America/Anguilla"
                    | "America/Antigua"
                    | "America/Araguaina"
                    | "America/Argentina/Buenos_Aires"
                    | "America/Argentina/Catamarca"
                    | "America/Argentina/ComodRivadavia"
                    | "America/Argentina/Cordoba"
                    | "America/Argentina/Jujuy"
                    | "America/Argentina/La_Rioja"
                    | "America/Argentina/Mendoza"
                    | "America/Argentina/Rio_Gallegos"
                    | "America/Argentina/Salta"
                    | "America/Argentina/San_Juan"
                    | "America/Argentina/San_Luis"
                    | "America/Argentina/Tucuman"
                    | "America/Argentina/Ushuaia"
                    | "America/Aruba"
                    | "America/Asuncion"
                    | "America/Atikokan"
                    | "America/Atka"
                    | "America/Bahia"
                    | "America/Bahia_Banderas"
                    | "America/Barbados"
                    | "America/Belem"
                    | "America/Belize"
                    | "America/Blanc-Sablon"
                    | "America/Boa_Vista"
                    | "America/Bogota"
                    | "America/Boise"
                    | "America/Buenos_Aires"
                    | "America/Cambridge_Bay"
                    | "America/Campo_Grande"
                    | "America/Cancun"
                    | "America/Caracas"
                    | "America/Catamarca"
                    | "America/Cayenne"
                    | "America/Cayman"
                    | "America/Chicago"
                    | "America/Chihuahua"
                    | "America/Ciudad_Juarez"
                    | "America/Coral_Harbour"
                    | "America/Cordoba"
                    | "America/Costa_Rica"
                    | "America/Creston"
                    | "America/Cuiaba"
                    | "America/Curacao"
                    | "America/Danmarkshavn"
                    | "America/Dawson"
                    | "America/Dawson_Creek"
                    | "America/Denver"
                    | "America/Detroit"
                    | "America/Dominica"
                    | "America/Edmonton"
                    | "America/Eirunepe"
                    | "America/El_Salvador"
                    | "America/Ensenada"
                    | "America/Fort_Nelson"
                    | "America/Fort_Wayne"
                    | "America/Fortaleza"
                    | "America/Glace_Bay"
                    | "America/Godthab"
                    | "America/Goose_Bay"
                    | "America/Grand_Turk"
                    | "America/Grenada"
                    | "America/Guadeloupe"
                    | "America/Guatemala"
                    | "America/Guayaquil"
                    | "America/Guyana"
                    | "America/Halifax"
                    | "America/Havana"
                    | "America/Hermosillo"
                    | "America/Indiana/Indianapolis"
                    | "America/Indiana/Knox"
                    | "America/Indiana/Marengo"
                    | "America/Indiana/Petersburg"
                    | "America/Indiana/Tell_City"
                    | "America/Indiana/Vevay"
                    | "America/Indiana/Vincennes"
                    | "America/Indiana/Winamac"
                    | "America/Indianapolis"
                    | "America/Inuvik"
                    | "America/Iqaluit"
                    | "America/Jamaica"
                    | "America/Jujuy"
                    | "America/Juneau"
                    | "America/Kentucky/Louisville"
                    | "America/Kentucky/Monticello"
                    | "America/Knox_IN"
                    | "America/Kralendijk"
                    | "America/La_Paz"
                    | "America/Lima"
                    | "America/Los_Angeles"
                    | "America/Louisville"
                    | "America/Lower_Princes"
                    | "America/Maceio"
                    | "America/Managua"
                    | "America/Manaus"
                    | "America/Marigot"
                    | "America/Martinique"
                    | "America/Matamoros"
                    | "America/Mazatlan"
                    | "America/Mendoza"
                    | "America/Menominee"
                    | "America/Merida"
                    | "America/Metlakatla"
                    | "America/Mexico_City"
                    | "America/Miquelon"
                    | "America/Moncton"
                    | "America/Monterrey"
                    | "America/Montevideo"
                    | "America/Montreal"
                    | "America/Montserrat"
                    | "America/Nassau"
                    | "America/New_York"
                    | "America/Nipigon"
                    | "America/Nome"
                    | "America/Noronha"
                    | "America/North_Dakota/Beulah"
                    | "America/North_Dakota/Center"
                    | "America/North_Dakota/New_Salem"
                    | "America/Nuuk"
                    | "America/Ojinaga"
                    | "America/Panama"
                    | "America/Pangnirtung"
                    | "America/Paramaribo"
                    | "America/Phoenix"
                    | "America/Port-au-Prince"
                    | "America/Port_of_Spain"
                    | "America/Porto_Acre"
                    | "America/Porto_Velho"
                    | "America/Puerto_Rico"
                    | "America/Punta_Arenas"
                    | "America/Rainy_River"
                    | "America/Rankin_Inlet"
                    | "America/Recife"
                    | "America/Regina"
                    | "America/Resolute"
                    | "America/Rio_Branco"
                    | "America/Rosario"
                    | "America/Santa_Isabel"
                    | "America/Santarem"
                    | "America/Santiago"
                    | "America/Santo_Domingo"
                    | "America/Sao_Paulo"
                    | "America/Scoresbysund"
                    | "America/Shiprock"
                    | "America/Sitka"
                    | "America/St_Barthelemy"
                    | "America/St_Johns"
                    | "America/St_Kitts"
                    | "America/St_Lucia"
                    | "America/St_Thomas"
                    | "America/St_Vincent"
                    | "America/Swift_Current"
                    | "America/Tegucigalpa"
                    | "America/Thule"
                    | "America/Thunder_Bay"
                    | "America/Tijuana"
                    | "America/Toronto"
                    | "America/Tortola"
                    | "America/Vancouver"
                    | "America/Virgin"
                    | "America/Whitehorse"
                    | "America/Winnipeg"
                    | "America/Yakutat"
                    | "America/Yellowknife"
                    | "Antarctica/Casey"
                    | "Antarctica/Davis"
                    | "Antarctica/DumontDUrville"
                    | "Antarctica/Macquarie"
                    | "Antarctica/Mawson"
                    | "Antarctica/McMurdo"
                    | "Antarctica/Palmer"
                    | "Antarctica/Rothera"
                    | "Antarctica/South_Pole"
                    | "Antarctica/Syowa"
                    | "Antarctica/Troll"
                    | "Antarctica/Vostok"
                    | "Arctic/Longyearbyen"
                    | "Asia/Aden"
                    | "Asia/Almaty"
                    | "Asia/Amman"
                    | "Asia/Anadyr"
                    | "Asia/Aqtau"
                    | "Asia/Aqtobe"
                    | "Asia/Ashgabat"
                    | "Asia/Ashkhabad"
                    | "Asia/Atyrau"
                    | "Asia/Baghdad"
                    | "Asia/Bahrain"
                    | "Asia/Baku"
                    | "Asia/Bangkok"
                    | "Asia/Barnaul"
                    | "Asia/Beirut"
                    | "Asia/Bishkek"
                    | "Asia/Brunei"
                    | "Asia/Calcutta"
                    | "Asia/Chita"
                    | "Asia/Choibalsan"
                    | "Asia/Chongqing"
                    | "Asia/Chungking"
                    | "Asia/Colombo"
                    | "Asia/Dacca"
                    | "Asia/Damascus"
                    | "Asia/Dhaka"
                    | "Asia/Dili"
                    | "Asia/Dubai"
                    | "Asia/Dushanbe"
                    | "Asia/Famagusta"
                    | "Asia/Gaza"
                    | "Asia/Harbin"
                    | "Asia/Hebron"
                    | "Asia/Ho_Chi_Minh"
                    | "Asia/Hong_Kong"
                    | "Asia/Hovd"
                    | "Asia/Irkutsk"
                    | "Asia/Istanbul"
                    | "Asia/Jakarta"
                    | "Asia/Jayapura"
                    | "Asia/Jerusalem"
                    | "Asia/Kabul"
                    | "Asia/Kamchatka"
                    | "Asia/Karachi"
                    | "Asia/Kashgar"
                    | "Asia/Kathmandu"
                    | "Asia/Katmandu"
                    | "Asia/Khandyga"
                    | "Asia/Kolkata"
                    | "Asia/Krasnoyarsk"
                    | "Asia/Kuala_Lumpur"
                    | "Asia/Kuching"
                    | "Asia/Kuwait"
                    | "Asia/Macao"
                    | "Asia/Macau"
                    | "Asia/Magadan"
                    | "Asia/Makassar"
                    | "Asia/Manila"
                    | "Asia/Muscat"
                    | "Asia/Nicosia"
                    | "Asia/Novokuznetsk"
                    | "Asia/Novosibirsk"
                    | "Asia/Omsk"
                    | "Asia/Oral"
                    | "Asia/Phnom_Penh"
                    | "Asia/Pontianak"
                    | "Asia/Pyongyang"
                    | "Asia/Qatar"
                    | "Asia/Qostanay"
                    | "Asia/Qyzylorda"
                    | "Asia/Rangoon"
                    | "Asia/Riyadh"
                    | "Asia/Saigon"
                    | "Asia/Sakhalin"
                    | "Asia/Samarkand"
                    | "Asia/Seoul"
                    | "Asia/Shanghai"
                    | "Asia/Singapore"
                    | "Asia/Srednekolymsk"
                    | "Asia/Taipei"
                    | "Asia/Tashkent"
                    | "Asia/Tbilisi"
                    | "Asia/Tehran"
                    | "Asia/Tel_Aviv"
                    | "Asia/Thimbu"
                    | "Asia/Thimphu"
                    | "Asia/Tokyo"
                    | "Asia/Tomsk"
                    | "Asia/Ujung_Pandang"
                    | "Asia/Ulaanbaatar"
                    | "Asia/Ulan_Bator"
                    | "Asia/Urumqi"
                    | "Asia/Ust-Nera"
                    | "Asia/Vientiane"
                    | "Asia/Vladivostok"
                    | "Asia/Yakutsk"
                    | "Asia/Yangon"
                    | "Asia/Yekaterinburg"
                    | "Asia/Yerevan"
                    | "Atlantic/Azores"
                    | "Atlantic/Bermuda"
                    | "Atlantic/Canary"
                    | "Atlantic/Cape_Verde"
                    | "Atlantic/Faeroe"
                    | "Atlantic/Faroe"
                    | "Atlantic/Jan_Mayen"
                    | "Atlantic/Madeira"
                    | "Atlantic/Reykjavik"
                    | "Atlantic/South_Georgia"
                    | "Atlantic/St_Helena"
                    | "Atlantic/Stanley"
                    | "Australia/ACT"
                    | "Australia/Adelaide"
                    | "Australia/Brisbane"
                    | "Australia/Broken_Hill"
                    | "Australia/Canberra"
                    | "Australia/Currie"
                    | "Australia/Darwin"
                    | "Australia/Eucla"
                    | "Australia/Hobart"
                    | "Australia/LHI"
                    | "Australia/Lindeman"
                    | "Australia/Lord_Howe"
                    | "Australia/Melbourne"
                    | "Australia/NSW"
                    | "Australia/North"
                    | "Australia/Perth"
                    | "Australia/Queensland"
                    | "Australia/South"
                    | "Australia/Sydney"
                    | "Australia/Tasmania"
                    | "Australia/Victoria"
                    | "Australia/West"
                    | "Australia/Yancowinna"
                    | "Brazil/Acre"
                    | "Brazil/DeNoronha"
                    | "Brazil/East"
                    | "Brazil/West"
                    | "CET"
                    | "CST6CDT"
                    | "Canada/Atlantic"
                    | "Canada/Central"
                    | "Canada/Eastern"
                    | "Canada/Mountain"
                    | "Canada/Newfoundland"
                    | "Canada/Pacific"
                    | "Canada/Saskatchewan"
                    | "Canada/Yukon"
                    | "Chile/Continental"
                    | "Chile/EasterIsland"
                    | "Cuba"
                    | "EET"
                    | "EST"
                    | "EST5EDT"
                    | "Egypt"
                    | "Eire"
                    | "Etc/GMT"
                    | "Etc/GMT+0"
                    | "Etc/GMT+1"
                    | "Etc/GMT+10"
                    | "Etc/GMT+11"
                    | "Etc/GMT+12"
                    | "Etc/GMT+2"
                    | "Etc/GMT+3"
                    | "Etc/GMT+4"
                    | "Etc/GMT+5"
                    | "Etc/GMT+6"
                    | "Etc/GMT+7"
                    | "Etc/GMT+8"
                    | "Etc/GMT+9"
                    | "Etc/GMT-0"
                    | "Etc/GMT-1"
                    | "Etc/GMT-10"
                    | "Etc/GMT-11"
                    | "Etc/GMT-12"
                    | "Etc/GMT-13"
                    | "Etc/GMT-14"
                    | "Etc/GMT-2"
                    | "Etc/GMT-3"
                    | "Etc/GMT-4"
                    | "Etc/GMT-5"
                    | "Etc/GMT-6"
                    | "Etc/GMT-7"
                    | "Etc/GMT-8"
                    | "Etc/GMT-9"
                    | "Etc/GMT0"
                    | "Etc/Greenwich"
                    | "Etc/UCT"
                    | "Etc/UTC"
                    | "Etc/Universal"
                    | "Etc/Zulu"
                    | "Europe/Amsterdam"
                    | "Europe/Andorra"
                    | "Europe/Astrakhan"
                    | "Europe/Athens"
                    | "Europe/Belfast"
                    | "Europe/Belgrade"
                    | "Europe/Berlin"
                    | "Europe/Bratislava"
                    | "Europe/Brussels"
                    | "Europe/Bucharest"
                    | "Europe/Budapest"
                    | "Europe/Busingen"
                    | "Europe/Chisinau"
                    | "Europe/Copenhagen"
                    | "Europe/Dublin"
                    | "Europe/Gibraltar"
                    | "Europe/Guernsey"
                    | "Europe/Helsinki"
                    | "Europe/Isle_of_Man"
                    | "Europe/Istanbul"
                    | "Europe/Jersey"
                    | "Europe/Kaliningrad"
                    | "Europe/Kiev"
                    | "Europe/Kirov"
                    | "Europe/Kyiv"
                    | "Europe/Lisbon"
                    | "Europe/Ljubljana"
                    | "Europe/London"
                    | "Europe/Luxembourg"
                    | "Europe/Madrid"
                    | "Europe/Malta"
                    | "Europe/Mariehamn"
                    | "Europe/Minsk"
                    | "Europe/Monaco"
                    | "Europe/Moscow"
                    | "Europe/Nicosia"
                    | "Europe/Oslo"
                    | "Europe/Paris"
                    | "Europe/Podgorica"
                    | "Europe/Prague"
                    | "Europe/Riga"
                    | "Europe/Rome"
                    | "Europe/Samara"
                    | "Europe/San_Marino"
                    | "Europe/Sarajevo"
                    | "Europe/Saratov"
                    | "Europe/Simferopol"
                    | "Europe/Skopje"
                    | "Europe/Sofia"
                    | "Europe/Stockholm"
                    | "Europe/Tallinn"
                    | "Europe/Tirane"
                    | "Europe/Tiraspol"
                    | "Europe/Ulyanovsk"
                    | "Europe/Uzhgorod"
                    | "Europe/Vaduz"
                    | "Europe/Vatican"
                    | "Europe/Vienna"
                    | "Europe/Vilnius"
                    | "Europe/Volgograd"
                    | "Europe/Warsaw"
                    | "Europe/Zagreb"
                    | "Europe/Zaporozhye"
                    | "Europe/Zurich"
                    | "Factory"
                    | "GB"
                    | "GB-Eire"
                    | "GMT"
                    | "GMT+0"
                    | "GMT-0"
                    | "GMT0"
                    | "Greenwich"
                    | "HST"
                    | "Hongkong"
                    | "Iceland"
                    | "Indian/Antananarivo"
                    | "Indian/Chagos"
                    | "Indian/Christmas"
                    | "Indian/Cocos"
                    | "Indian/Comoro"
                    | "Indian/Kerguelen"
                    | "Indian/Mahe"
                    | "Indian/Maldives"
                    | "Indian/Mauritius"
                    | "Indian/Mayotte"
                    | "Indian/Reunion"
                    | "Iran"
                    | "Israel"
                    | "Jamaica"
                    | "Japan"
                    | "Kwajalein"
                    | "Libya"
                    | "MET"
                    | "MST"
                    | "MST7MDT"
                    | "Mexico/BajaNorte"
                    | "Mexico/BajaSur"
                    | "Mexico/General"
                    | "NZ"
                    | "NZ-CHAT"
                    | "Navajo"
                    | "PRC"
                    | "PST8PDT"
                    | "Pacific/Apia"
                    | "Pacific/Auckland"
                    | "Pacific/Bougainville"
                    | "Pacific/Chatham"
                    | "Pacific/Chuuk"
                    | "Pacific/Easter"
                    | "Pacific/Efate"
                    | "Pacific/Enderbury"
                    | "Pacific/Fakaofo"
                    | "Pacific/Fiji"
                    | "Pacific/Funafuti"
                    | "Pacific/Galapagos"
                    | "Pacific/Gambier"
                    | "Pacific/Guadalcanal"
                    | "Pacific/Guam"
                    | "Pacific/Honolulu"
                    | "Pacific/Johnston"
                    | "Pacific/Kanton"
                    | "Pacific/Kiritimati"
                    | "Pacific/Kosrae"
                    | "Pacific/Kwajalein"
                    | "Pacific/Majuro"
                    | "Pacific/Marquesas"
                    | "Pacific/Midway"
                    | "Pacific/Nauru"
                    | "Pacific/Niue"
                    | "Pacific/Norfolk"
                    | "Pacific/Noumea"
                    | "Pacific/Pago_Pago"
                    | "Pacific/Palau"
                    | "Pacific/Pitcairn"
                    | "Pacific/Pohnpei"
                    | "Pacific/Ponape"
                    | "Pacific/Port_Moresby"
                    | "Pacific/Rarotonga"
                    | "Pacific/Saipan"
                    | "Pacific/Samoa"
                    | "Pacific/Tahiti"
                    | "Pacific/Tarawa"
                    | "Pacific/Tongatapu"
                    | "Pacific/Truk"
                    | "Pacific/Wake"
                    | "Pacific/Wallis"
                    | "Pacific/Yap"
                    | "Poland"
                    | "Portugal"
                    | "ROC"
                    | "ROK"
                    | "Singapore"
                    | "Turkey"
                    | "UCT"
                    | "US/Alaska"
                    | "US/Aleutian"
                    | "US/Arizona"
                    | "US/Central"
                    | "US/East-Indiana"
                    | "US/Eastern"
                    | "US/Hawaii"
                    | "US/Indiana-Starke"
                    | "US/Michigan"
                    | "US/Mountain"
                    | "US/Pacific"
                    | "US/Pacific-New"
                    | "US/Samoa"
                    | "UTC"
                    | "Universal"
                    | "W-SU"
                    | "WET"
                    | "Zulu"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        report_type: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_reporting_report_run>> {
    const url = `/v1/reporting/report_runs`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getReportingReportRunsReportRun(
    p: {
      expand?: string[]
      reportRun: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_reporting_report_run>> {
    const url = `/v1/reporting/report_runs/${p["reportRun"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getReportingReportTypes(
    p: {
      expand?: string[]
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_reporting_report_type[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/reporting/report_types`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getReportingReportTypesReportType(
    p: {
      expand?: string[]
      reportType: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_reporting_report_type>> {
    const url = `/v1/reporting/report_types/${p["reportType"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getReviews(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_review[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/reviews`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getReviewsReview(
    p: {
      expand?: string[]
      review: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_review>> {
    const url = `/v1/reviews/${p["review"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postReviewsReviewApprove(
    p: {
      review: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_review>> {
    const url = `/v1/reviews/${p["review"]}/approve`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSetupAttempts(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      setupIntent: string
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_setup_attempt[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/setup_attempts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      setup_intent: p["setupIntent"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSetupIntents(
    p: {
      attachToSelf?: boolean
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentMethod?: string
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_setup_intent[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/setup_intents`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      attach_to_self: p["attachToSelf"],
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_method: p["paymentMethod"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSetupIntents(
    p: {
      requestBody?: {
        attach_to_self?: boolean | undefined
        automatic_payment_methods?:
          | {
              allow_redirects?:
                | ("always" | "never" | UnknownEnumStringValue)
                | undefined
              enabled: boolean
            }
          | undefined
        confirm?: boolean | undefined
        confirmation_token?: string | undefined
        customer?: string | undefined
        description?: string | undefined
        expand?: string[] | undefined
        flow_directions?:
          | ("inbound" | "outbound" | UnknownEnumStringValue)[]
          | undefined
        mandate_data?:
          | (
              | {
                  customer_acceptance: {
                    accepted_at?: number | undefined
                    offline?: EmptyObject | undefined
                    online?:
                      | {
                          ip_address: string
                          user_agent: string
                        }
                      | undefined
                    type: "offline" | "online" | UnknownEnumStringValue
                  }
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        on_behalf_of?: string | undefined
        payment_method?: string | undefined
        payment_method_configuration?: string | undefined
        payment_method_data?:
          | {
              acss_debit?:
                | {
                    account_number: string
                    institution_number: string
                    transit_number: string
                  }
                | undefined
              affirm?: EmptyObject | undefined
              afterpay_clearpay?: EmptyObject | undefined
              alipay?: EmptyObject | undefined
              allow_redisplay?:
                | (
                    | "always"
                    | "limited"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              alma?: EmptyObject | undefined
              amazon_pay?: EmptyObject | undefined
              au_becs_debit?:
                | {
                    account_number: string
                    bsb_number: string
                  }
                | undefined
              bacs_debit?:
                | {
                    account_number?: string | undefined
                    sort_code?: string | undefined
                  }
                | undefined
              bancontact?: EmptyObject | undefined
              billie?: EmptyObject | undefined
              billing_details?:
                | {
                    address?:
                      | (
                          | {
                              city?: string | undefined
                              country?: string | undefined
                              line1?: string | undefined
                              line2?: string | undefined
                              postal_code?: string | undefined
                              state?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    email?: (string | "" | UnknownEnumStringValue) | undefined
                    name?: (string | "" | UnknownEnumStringValue) | undefined
                    phone?: (string | "" | UnknownEnumStringValue) | undefined
                  }
                | undefined
              blik?: EmptyObject | undefined
              boleto?:
                | {
                    tax_id: string
                  }
                | undefined
              cashapp?: EmptyObject | undefined
              customer_balance?: EmptyObject | undefined
              eps?:
                | {
                    bank?:
                      | (
                          | "arzte_und_apotheker_bank"
                          | "austrian_anadi_bank_ag"
                          | "bank_austria"
                          | "bankhaus_carl_spangler"
                          | "bankhaus_schelhammer_und_schattera_ag"
                          | "bawag_psk_ag"
                          | "bks_bank_ag"
                          | "brull_kallmus_bank_ag"
                          | "btv_vier_lander_bank"
                          | "capital_bank_grawe_gruppe_ag"
                          | "deutsche_bank_ag"
                          | "dolomitenbank"
                          | "easybank_ag"
                          | "erste_bank_und_sparkassen"
                          | "hypo_alpeadriabank_international_ag"
                          | "hypo_bank_burgenland_aktiengesellschaft"
                          | "hypo_noe_lb_fur_niederosterreich_u_wien"
                          | "hypo_oberosterreich_salzburg_steiermark"
                          | "hypo_tirol_bank_ag"
                          | "hypo_vorarlberg_bank_ag"
                          | "marchfelder_bank"
                          | "oberbank_ag"
                          | "raiffeisen_bankengruppe_osterreich"
                          | "schoellerbank_ag"
                          | "sparda_bank_wien"
                          | "volksbank_gruppe"
                          | "volkskreditbank_ag"
                          | "vr_bank_braunau"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              fpx?:
                | {
                    bank:
                      | "affin_bank"
                      | "agrobank"
                      | "alliance_bank"
                      | "ambank"
                      | "bank_islam"
                      | "bank_muamalat"
                      | "bank_of_china"
                      | "bank_rakyat"
                      | "bsn"
                      | "cimb"
                      | "deutsche_bank"
                      | "hong_leong_bank"
                      | "hsbc"
                      | "kfh"
                      | "maybank2e"
                      | "maybank2u"
                      | "ocbc"
                      | "pb_enterprise"
                      | "public_bank"
                      | "rhb"
                      | "standard_chartered"
                      | "uob"
                      | UnknownEnumStringValue
                  }
                | undefined
              giropay?: EmptyObject | undefined
              grabpay?: EmptyObject | undefined
              ideal?:
                | {
                    bank?:
                      | (
                          | "abn_amro"
                          | "asn_bank"
                          | "bunq"
                          | "handelsbanken"
                          | "ing"
                          | "knab"
                          | "moneyou"
                          | "n26"
                          | "nn"
                          | "rabobank"
                          | "regiobank"
                          | "revolut"
                          | "sns_bank"
                          | "triodos_bank"
                          | "van_lanschot"
                          | "yoursafe"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              interac_present?: EmptyObject | undefined
              kakao_pay?: EmptyObject | undefined
              klarna?:
                | {
                    dob?:
                      | {
                          day: number
                          month: number
                          year: number
                        }
                      | undefined
                  }
                | undefined
              konbini?: EmptyObject | undefined
              kr_card?: EmptyObject | undefined
              link?: EmptyObject | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              mobilepay?: EmptyObject | undefined
              multibanco?: EmptyObject | undefined
              naver_pay?:
                | {
                    funding?:
                      | ("card" | "points" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              nz_bank_account?:
                | {
                    account_holder_name?: string | undefined
                    account_number: string
                    bank_code: string
                    branch_code: string
                    reference?: string | undefined
                    suffix: string
                  }
                | undefined
              oxxo?: EmptyObject | undefined
              p24?:
                | {
                    bank?:
                      | (
                          | "alior_bank"
                          | "bank_millennium"
                          | "bank_nowy_bfg_sa"
                          | "bank_pekao_sa"
                          | "banki_spbdzielcze"
                          | "blik"
                          | "bnp_paribas"
                          | "boz"
                          | "citi_handlowy"
                          | "credit_agricole"
                          | "envelobank"
                          | "etransfer_pocztowy24"
                          | "getin_bank"
                          | "ideabank"
                          | "ing"
                          | "inteligo"
                          | "mbank_mtransfer"
                          | "nest_przelew"
                          | "noble_pay"
                          | "pbac_z_ipko"
                          | "plus_bank"
                          | "santander_przelew24"
                          | "tmobile_usbugi_bankowe"
                          | "toyota_bank"
                          | "velobank"
                          | "volkswagen_bank"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              pay_by_bank?: EmptyObject | undefined
              payco?: EmptyObject | undefined
              paynow?: EmptyObject | undefined
              paypal?: EmptyObject | undefined
              pix?: EmptyObject | undefined
              promptpay?: EmptyObject | undefined
              radar_options?:
                | {
                    session?: string | undefined
                  }
                | undefined
              revolut_pay?: EmptyObject | undefined
              samsung_pay?: EmptyObject | undefined
              satispay?: EmptyObject | undefined
              sepa_debit?:
                | {
                    iban: string
                  }
                | undefined
              sofort?:
                | {
                    country:
                      | "AT"
                      | "BE"
                      | "DE"
                      | "ES"
                      | "IT"
                      | "NL"
                      | UnknownEnumStringValue
                  }
                | undefined
              swish?: EmptyObject | undefined
              twint?: EmptyObject | undefined
              type:
                | "acss_debit"
                | "affirm"
                | "afterpay_clearpay"
                | "alipay"
                | "alma"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "billie"
                | "blik"
                | "boleto"
                | "cashapp"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "mobilepay"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "oxxo"
                | "p24"
                | "pay_by_bank"
                | "payco"
                | "paynow"
                | "paypal"
                | "pix"
                | "promptpay"
                | "revolut_pay"
                | "samsung_pay"
                | "satispay"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "twint"
                | "us_bank_account"
                | "wechat_pay"
                | "zip"
                | UnknownEnumStringValue
              us_bank_account?:
                | {
                    account_holder_type?:
                      | ("company" | "individual" | UnknownEnumStringValue)
                      | undefined
                    account_number?: string | undefined
                    account_type?:
                      | ("checking" | "savings" | UnknownEnumStringValue)
                      | undefined
                    financial_connections_account?: string | undefined
                    routing_number?: string | undefined
                  }
                | undefined
              wechat_pay?: EmptyObject | undefined
              zip?: EmptyObject | undefined
            }
          | undefined
        payment_method_options?:
          | {
              acss_debit?:
                | {
                    currency?:
                      | ("cad" | "usd" | UnknownEnumStringValue)
                      | undefined
                    mandate_options?:
                      | {
                          custom_mandate_url?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                          default_for?:
                            | (
                                | "invoice"
                                | "subscription"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          interval_description?: string | undefined
                          payment_schedule?:
                            | (
                                | "combined"
                                | "interval"
                                | "sporadic"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          transaction_type?:
                            | ("business" | "personal" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                    verification_method?:
                      | (
                          | "automatic"
                          | "instant"
                          | "microdeposits"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              amazon_pay?: EmptyObject | undefined
              bacs_debit?:
                | {
                    mandate_options?:
                      | {
                          reference_prefix?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              card?:
                | {
                    mandate_options?:
                      | {
                          amount: number
                          amount_type:
                            | "fixed"
                            | "maximum"
                            | UnknownEnumStringValue
                          currency: string
                          description?: string | undefined
                          end_date?: number | undefined
                          interval:
                            | "day"
                            | "month"
                            | "sporadic"
                            | "week"
                            | "year"
                            | UnknownEnumStringValue
                          interval_count?: number | undefined
                          reference: string
                          start_date: number
                          supported_types?:
                            | ("india" | UnknownEnumStringValue)[]
                            | undefined
                        }
                      | undefined
                    network?:
                      | (
                          | "amex"
                          | "cartes_bancaires"
                          | "diners"
                          | "discover"
                          | "eftpos_au"
                          | "girocard"
                          | "interac"
                          | "jcb"
                          | "link"
                          | "mastercard"
                          | "unionpay"
                          | "unknown"
                          | "visa"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    request_three_d_secure?:
                      | (
                          | "any"
                          | "automatic"
                          | "challenge"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    three_d_secure?:
                      | {
                          ares_trans_status?:
                            | (
                                | "A"
                                | "C"
                                | "I"
                                | "N"
                                | "R"
                                | "U"
                                | "Y"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          cryptogram?: string | undefined
                          electronic_commerce_indicator?:
                            | (
                                | "01"
                                | "02"
                                | "05"
                                | "06"
                                | "07"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          network_options?:
                            | {
                                cartes_bancaires?:
                                  | {
                                      cb_avalgo:
                                        | "0"
                                        | "1"
                                        | "2"
                                        | "3"
                                        | "4"
                                        | "A"
                                        | UnknownEnumStringValue
                                      cb_exemption?: string | undefined
                                      cb_score?: number | undefined
                                    }
                                  | undefined
                              }
                            | undefined
                          requestor_challenge_indicator?: string | undefined
                          transaction_id?: string | undefined
                          version?:
                            | (
                                | "1.0.2"
                                | "2.1.0"
                                | "2.2.0"
                                | UnknownEnumStringValue
                              )
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              card_present?: EmptyObject | undefined
              link?: EmptyObject | undefined
              paypal?:
                | {
                    billing_agreement_id?: string | undefined
                  }
                | undefined
              sepa_debit?:
                | {
                    mandate_options?:
                      | {
                          reference_prefix?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              us_bank_account?:
                | {
                    financial_connections?:
                      | {
                          filters?:
                            | {
                                account_subcategories?:
                                  | (
                                      | "checking"
                                      | "savings"
                                      | UnknownEnumStringValue
                                    )[]
                                  | undefined
                              }
                            | undefined
                          permissions?:
                            | (
                                | "balances"
                                | "ownership"
                                | "payment_method"
                                | "transactions"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          prefetch?:
                            | (
                                | "balances"
                                | "ownership"
                                | "transactions"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          return_url?: string | undefined
                        }
                      | undefined
                    mandate_options?:
                      | {
                          collection_method?:
                            | ("" | "paper" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                    networks?:
                      | {
                          requested?:
                            | (
                                | "ach"
                                | "us_domestic_wire"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                        }
                      | undefined
                    verification_method?:
                      | (
                          | "automatic"
                          | "instant"
                          | "microdeposits"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
            }
          | undefined
        payment_method_types?: string[] | undefined
        return_url?: string | undefined
        single_use?:
          | {
              amount: number
              currency: string
            }
          | undefined
        usage?:
          | ("off_session" | "on_session" | UnknownEnumStringValue)
          | undefined
        use_stripe_sdk?: boolean | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_setup_intent>> {
    const url = `/v1/setup_intents`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSetupIntentsIntent(
    p: {
      clientSecret?: string
      expand?: string[]
      intent: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_setup_intent>> {
    const url = `/v1/setup_intents/${p["intent"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      client_secret: p["clientSecret"],
      expand: p["expand"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSetupIntentsIntent(
    p: {
      intent: string
      requestBody?: {
        attach_to_self?: boolean | undefined
        customer?: string | undefined
        description?: string | undefined
        expand?: string[] | undefined
        flow_directions?:
          | ("inbound" | "outbound" | UnknownEnumStringValue)[]
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        payment_method?: string | undefined
        payment_method_configuration?: string | undefined
        payment_method_data?:
          | {
              acss_debit?:
                | {
                    account_number: string
                    institution_number: string
                    transit_number: string
                  }
                | undefined
              affirm?: EmptyObject | undefined
              afterpay_clearpay?: EmptyObject | undefined
              alipay?: EmptyObject | undefined
              allow_redisplay?:
                | (
                    | "always"
                    | "limited"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              alma?: EmptyObject | undefined
              amazon_pay?: EmptyObject | undefined
              au_becs_debit?:
                | {
                    account_number: string
                    bsb_number: string
                  }
                | undefined
              bacs_debit?:
                | {
                    account_number?: string | undefined
                    sort_code?: string | undefined
                  }
                | undefined
              bancontact?: EmptyObject | undefined
              billie?: EmptyObject | undefined
              billing_details?:
                | {
                    address?:
                      | (
                          | {
                              city?: string | undefined
                              country?: string | undefined
                              line1?: string | undefined
                              line2?: string | undefined
                              postal_code?: string | undefined
                              state?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    email?: (string | "" | UnknownEnumStringValue) | undefined
                    name?: (string | "" | UnknownEnumStringValue) | undefined
                    phone?: (string | "" | UnknownEnumStringValue) | undefined
                  }
                | undefined
              blik?: EmptyObject | undefined
              boleto?:
                | {
                    tax_id: string
                  }
                | undefined
              cashapp?: EmptyObject | undefined
              customer_balance?: EmptyObject | undefined
              eps?:
                | {
                    bank?:
                      | (
                          | "arzte_und_apotheker_bank"
                          | "austrian_anadi_bank_ag"
                          | "bank_austria"
                          | "bankhaus_carl_spangler"
                          | "bankhaus_schelhammer_und_schattera_ag"
                          | "bawag_psk_ag"
                          | "bks_bank_ag"
                          | "brull_kallmus_bank_ag"
                          | "btv_vier_lander_bank"
                          | "capital_bank_grawe_gruppe_ag"
                          | "deutsche_bank_ag"
                          | "dolomitenbank"
                          | "easybank_ag"
                          | "erste_bank_und_sparkassen"
                          | "hypo_alpeadriabank_international_ag"
                          | "hypo_bank_burgenland_aktiengesellschaft"
                          | "hypo_noe_lb_fur_niederosterreich_u_wien"
                          | "hypo_oberosterreich_salzburg_steiermark"
                          | "hypo_tirol_bank_ag"
                          | "hypo_vorarlberg_bank_ag"
                          | "marchfelder_bank"
                          | "oberbank_ag"
                          | "raiffeisen_bankengruppe_osterreich"
                          | "schoellerbank_ag"
                          | "sparda_bank_wien"
                          | "volksbank_gruppe"
                          | "volkskreditbank_ag"
                          | "vr_bank_braunau"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              fpx?:
                | {
                    bank:
                      | "affin_bank"
                      | "agrobank"
                      | "alliance_bank"
                      | "ambank"
                      | "bank_islam"
                      | "bank_muamalat"
                      | "bank_of_china"
                      | "bank_rakyat"
                      | "bsn"
                      | "cimb"
                      | "deutsche_bank"
                      | "hong_leong_bank"
                      | "hsbc"
                      | "kfh"
                      | "maybank2e"
                      | "maybank2u"
                      | "ocbc"
                      | "pb_enterprise"
                      | "public_bank"
                      | "rhb"
                      | "standard_chartered"
                      | "uob"
                      | UnknownEnumStringValue
                  }
                | undefined
              giropay?: EmptyObject | undefined
              grabpay?: EmptyObject | undefined
              ideal?:
                | {
                    bank?:
                      | (
                          | "abn_amro"
                          | "asn_bank"
                          | "bunq"
                          | "handelsbanken"
                          | "ing"
                          | "knab"
                          | "moneyou"
                          | "n26"
                          | "nn"
                          | "rabobank"
                          | "regiobank"
                          | "revolut"
                          | "sns_bank"
                          | "triodos_bank"
                          | "van_lanschot"
                          | "yoursafe"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              interac_present?: EmptyObject | undefined
              kakao_pay?: EmptyObject | undefined
              klarna?:
                | {
                    dob?:
                      | {
                          day: number
                          month: number
                          year: number
                        }
                      | undefined
                  }
                | undefined
              konbini?: EmptyObject | undefined
              kr_card?: EmptyObject | undefined
              link?: EmptyObject | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              mobilepay?: EmptyObject | undefined
              multibanco?: EmptyObject | undefined
              naver_pay?:
                | {
                    funding?:
                      | ("card" | "points" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              nz_bank_account?:
                | {
                    account_holder_name?: string | undefined
                    account_number: string
                    bank_code: string
                    branch_code: string
                    reference?: string | undefined
                    suffix: string
                  }
                | undefined
              oxxo?: EmptyObject | undefined
              p24?:
                | {
                    bank?:
                      | (
                          | "alior_bank"
                          | "bank_millennium"
                          | "bank_nowy_bfg_sa"
                          | "bank_pekao_sa"
                          | "banki_spbdzielcze"
                          | "blik"
                          | "bnp_paribas"
                          | "boz"
                          | "citi_handlowy"
                          | "credit_agricole"
                          | "envelobank"
                          | "etransfer_pocztowy24"
                          | "getin_bank"
                          | "ideabank"
                          | "ing"
                          | "inteligo"
                          | "mbank_mtransfer"
                          | "nest_przelew"
                          | "noble_pay"
                          | "pbac_z_ipko"
                          | "plus_bank"
                          | "santander_przelew24"
                          | "tmobile_usbugi_bankowe"
                          | "toyota_bank"
                          | "velobank"
                          | "volkswagen_bank"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              pay_by_bank?: EmptyObject | undefined
              payco?: EmptyObject | undefined
              paynow?: EmptyObject | undefined
              paypal?: EmptyObject | undefined
              pix?: EmptyObject | undefined
              promptpay?: EmptyObject | undefined
              radar_options?:
                | {
                    session?: string | undefined
                  }
                | undefined
              revolut_pay?: EmptyObject | undefined
              samsung_pay?: EmptyObject | undefined
              satispay?: EmptyObject | undefined
              sepa_debit?:
                | {
                    iban: string
                  }
                | undefined
              sofort?:
                | {
                    country:
                      | "AT"
                      | "BE"
                      | "DE"
                      | "ES"
                      | "IT"
                      | "NL"
                      | UnknownEnumStringValue
                  }
                | undefined
              swish?: EmptyObject | undefined
              twint?: EmptyObject | undefined
              type:
                | "acss_debit"
                | "affirm"
                | "afterpay_clearpay"
                | "alipay"
                | "alma"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "billie"
                | "blik"
                | "boleto"
                | "cashapp"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "mobilepay"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "oxxo"
                | "p24"
                | "pay_by_bank"
                | "payco"
                | "paynow"
                | "paypal"
                | "pix"
                | "promptpay"
                | "revolut_pay"
                | "samsung_pay"
                | "satispay"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "twint"
                | "us_bank_account"
                | "wechat_pay"
                | "zip"
                | UnknownEnumStringValue
              us_bank_account?:
                | {
                    account_holder_type?:
                      | ("company" | "individual" | UnknownEnumStringValue)
                      | undefined
                    account_number?: string | undefined
                    account_type?:
                      | ("checking" | "savings" | UnknownEnumStringValue)
                      | undefined
                    financial_connections_account?: string | undefined
                    routing_number?: string | undefined
                  }
                | undefined
              wechat_pay?: EmptyObject | undefined
              zip?: EmptyObject | undefined
            }
          | undefined
        payment_method_options?:
          | {
              acss_debit?:
                | {
                    currency?:
                      | ("cad" | "usd" | UnknownEnumStringValue)
                      | undefined
                    mandate_options?:
                      | {
                          custom_mandate_url?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                          default_for?:
                            | (
                                | "invoice"
                                | "subscription"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          interval_description?: string | undefined
                          payment_schedule?:
                            | (
                                | "combined"
                                | "interval"
                                | "sporadic"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          transaction_type?:
                            | ("business" | "personal" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                    verification_method?:
                      | (
                          | "automatic"
                          | "instant"
                          | "microdeposits"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              amazon_pay?: EmptyObject | undefined
              bacs_debit?:
                | {
                    mandate_options?:
                      | {
                          reference_prefix?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              card?:
                | {
                    mandate_options?:
                      | {
                          amount: number
                          amount_type:
                            | "fixed"
                            | "maximum"
                            | UnknownEnumStringValue
                          currency: string
                          description?: string | undefined
                          end_date?: number | undefined
                          interval:
                            | "day"
                            | "month"
                            | "sporadic"
                            | "week"
                            | "year"
                            | UnknownEnumStringValue
                          interval_count?: number | undefined
                          reference: string
                          start_date: number
                          supported_types?:
                            | ("india" | UnknownEnumStringValue)[]
                            | undefined
                        }
                      | undefined
                    network?:
                      | (
                          | "amex"
                          | "cartes_bancaires"
                          | "diners"
                          | "discover"
                          | "eftpos_au"
                          | "girocard"
                          | "interac"
                          | "jcb"
                          | "link"
                          | "mastercard"
                          | "unionpay"
                          | "unknown"
                          | "visa"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    request_three_d_secure?:
                      | (
                          | "any"
                          | "automatic"
                          | "challenge"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    three_d_secure?:
                      | {
                          ares_trans_status?:
                            | (
                                | "A"
                                | "C"
                                | "I"
                                | "N"
                                | "R"
                                | "U"
                                | "Y"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          cryptogram?: string | undefined
                          electronic_commerce_indicator?:
                            | (
                                | "01"
                                | "02"
                                | "05"
                                | "06"
                                | "07"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          network_options?:
                            | {
                                cartes_bancaires?:
                                  | {
                                      cb_avalgo:
                                        | "0"
                                        | "1"
                                        | "2"
                                        | "3"
                                        | "4"
                                        | "A"
                                        | UnknownEnumStringValue
                                      cb_exemption?: string | undefined
                                      cb_score?: number | undefined
                                    }
                                  | undefined
                              }
                            | undefined
                          requestor_challenge_indicator?: string | undefined
                          transaction_id?: string | undefined
                          version?:
                            | (
                                | "1.0.2"
                                | "2.1.0"
                                | "2.2.0"
                                | UnknownEnumStringValue
                              )
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              card_present?: EmptyObject | undefined
              link?: EmptyObject | undefined
              paypal?:
                | {
                    billing_agreement_id?: string | undefined
                  }
                | undefined
              sepa_debit?:
                | {
                    mandate_options?:
                      | {
                          reference_prefix?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              us_bank_account?:
                | {
                    financial_connections?:
                      | {
                          filters?:
                            | {
                                account_subcategories?:
                                  | (
                                      | "checking"
                                      | "savings"
                                      | UnknownEnumStringValue
                                    )[]
                                  | undefined
                              }
                            | undefined
                          permissions?:
                            | (
                                | "balances"
                                | "ownership"
                                | "payment_method"
                                | "transactions"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          prefetch?:
                            | (
                                | "balances"
                                | "ownership"
                                | "transactions"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          return_url?: string | undefined
                        }
                      | undefined
                    mandate_options?:
                      | {
                          collection_method?:
                            | ("" | "paper" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                    networks?:
                      | {
                          requested?:
                            | (
                                | "ach"
                                | "us_domestic_wire"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                        }
                      | undefined
                    verification_method?:
                      | (
                          | "automatic"
                          | "instant"
                          | "microdeposits"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
            }
          | undefined
        payment_method_types?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_setup_intent>> {
    const url = `/v1/setup_intents/${p["intent"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSetupIntentsIntentCancel(
    p: {
      intent: string
      requestBody?: {
        cancellation_reason?:
          | (
              | "abandoned"
              | "duplicate"
              | "requested_by_customer"
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_setup_intent>> {
    const url = `/v1/setup_intents/${p["intent"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSetupIntentsIntentConfirm(
    p: {
      intent: string
      requestBody?: {
        client_secret?: string | undefined
        confirmation_token?: string | undefined
        expand?: string[] | undefined
        mandate_data?:
          | (
              | {
                  customer_acceptance: {
                    accepted_at?: number | undefined
                    offline?: EmptyObject | undefined
                    online?:
                      | {
                          ip_address: string
                          user_agent: string
                        }
                      | undefined
                    type: "offline" | "online" | UnknownEnumStringValue
                  }
                }
              | ""
              | UnknownEnumStringValue
              | {
                  customer_acceptance: {
                    online: {
                      ip_address?: string | undefined
                      user_agent?: string | undefined
                    }
                    type: "online" | UnknownEnumStringValue
                  }
                }
            )
          | undefined
        payment_method?: string | undefined
        payment_method_data?:
          | {
              acss_debit?:
                | {
                    account_number: string
                    institution_number: string
                    transit_number: string
                  }
                | undefined
              affirm?: EmptyObject | undefined
              afterpay_clearpay?: EmptyObject | undefined
              alipay?: EmptyObject | undefined
              allow_redisplay?:
                | (
                    | "always"
                    | "limited"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              alma?: EmptyObject | undefined
              amazon_pay?: EmptyObject | undefined
              au_becs_debit?:
                | {
                    account_number: string
                    bsb_number: string
                  }
                | undefined
              bacs_debit?:
                | {
                    account_number?: string | undefined
                    sort_code?: string | undefined
                  }
                | undefined
              bancontact?: EmptyObject | undefined
              billie?: EmptyObject | undefined
              billing_details?:
                | {
                    address?:
                      | (
                          | {
                              city?: string | undefined
                              country?: string | undefined
                              line1?: string | undefined
                              line2?: string | undefined
                              postal_code?: string | undefined
                              state?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    email?: (string | "" | UnknownEnumStringValue) | undefined
                    name?: (string | "" | UnknownEnumStringValue) | undefined
                    phone?: (string | "" | UnknownEnumStringValue) | undefined
                  }
                | undefined
              blik?: EmptyObject | undefined
              boleto?:
                | {
                    tax_id: string
                  }
                | undefined
              cashapp?: EmptyObject | undefined
              customer_balance?: EmptyObject | undefined
              eps?:
                | {
                    bank?:
                      | (
                          | "arzte_und_apotheker_bank"
                          | "austrian_anadi_bank_ag"
                          | "bank_austria"
                          | "bankhaus_carl_spangler"
                          | "bankhaus_schelhammer_und_schattera_ag"
                          | "bawag_psk_ag"
                          | "bks_bank_ag"
                          | "brull_kallmus_bank_ag"
                          | "btv_vier_lander_bank"
                          | "capital_bank_grawe_gruppe_ag"
                          | "deutsche_bank_ag"
                          | "dolomitenbank"
                          | "easybank_ag"
                          | "erste_bank_und_sparkassen"
                          | "hypo_alpeadriabank_international_ag"
                          | "hypo_bank_burgenland_aktiengesellschaft"
                          | "hypo_noe_lb_fur_niederosterreich_u_wien"
                          | "hypo_oberosterreich_salzburg_steiermark"
                          | "hypo_tirol_bank_ag"
                          | "hypo_vorarlberg_bank_ag"
                          | "marchfelder_bank"
                          | "oberbank_ag"
                          | "raiffeisen_bankengruppe_osterreich"
                          | "schoellerbank_ag"
                          | "sparda_bank_wien"
                          | "volksbank_gruppe"
                          | "volkskreditbank_ag"
                          | "vr_bank_braunau"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              fpx?:
                | {
                    bank:
                      | "affin_bank"
                      | "agrobank"
                      | "alliance_bank"
                      | "ambank"
                      | "bank_islam"
                      | "bank_muamalat"
                      | "bank_of_china"
                      | "bank_rakyat"
                      | "bsn"
                      | "cimb"
                      | "deutsche_bank"
                      | "hong_leong_bank"
                      | "hsbc"
                      | "kfh"
                      | "maybank2e"
                      | "maybank2u"
                      | "ocbc"
                      | "pb_enterprise"
                      | "public_bank"
                      | "rhb"
                      | "standard_chartered"
                      | "uob"
                      | UnknownEnumStringValue
                  }
                | undefined
              giropay?: EmptyObject | undefined
              grabpay?: EmptyObject | undefined
              ideal?:
                | {
                    bank?:
                      | (
                          | "abn_amro"
                          | "asn_bank"
                          | "bunq"
                          | "handelsbanken"
                          | "ing"
                          | "knab"
                          | "moneyou"
                          | "n26"
                          | "nn"
                          | "rabobank"
                          | "regiobank"
                          | "revolut"
                          | "sns_bank"
                          | "triodos_bank"
                          | "van_lanschot"
                          | "yoursafe"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              interac_present?: EmptyObject | undefined
              kakao_pay?: EmptyObject | undefined
              klarna?:
                | {
                    dob?:
                      | {
                          day: number
                          month: number
                          year: number
                        }
                      | undefined
                  }
                | undefined
              konbini?: EmptyObject | undefined
              kr_card?: EmptyObject | undefined
              link?: EmptyObject | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              mobilepay?: EmptyObject | undefined
              multibanco?: EmptyObject | undefined
              naver_pay?:
                | {
                    funding?:
                      | ("card" | "points" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              nz_bank_account?:
                | {
                    account_holder_name?: string | undefined
                    account_number: string
                    bank_code: string
                    branch_code: string
                    reference?: string | undefined
                    suffix: string
                  }
                | undefined
              oxxo?: EmptyObject | undefined
              p24?:
                | {
                    bank?:
                      | (
                          | "alior_bank"
                          | "bank_millennium"
                          | "bank_nowy_bfg_sa"
                          | "bank_pekao_sa"
                          | "banki_spbdzielcze"
                          | "blik"
                          | "bnp_paribas"
                          | "boz"
                          | "citi_handlowy"
                          | "credit_agricole"
                          | "envelobank"
                          | "etransfer_pocztowy24"
                          | "getin_bank"
                          | "ideabank"
                          | "ing"
                          | "inteligo"
                          | "mbank_mtransfer"
                          | "nest_przelew"
                          | "noble_pay"
                          | "pbac_z_ipko"
                          | "plus_bank"
                          | "santander_przelew24"
                          | "tmobile_usbugi_bankowe"
                          | "toyota_bank"
                          | "velobank"
                          | "volkswagen_bank"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              pay_by_bank?: EmptyObject | undefined
              payco?: EmptyObject | undefined
              paynow?: EmptyObject | undefined
              paypal?: EmptyObject | undefined
              pix?: EmptyObject | undefined
              promptpay?: EmptyObject | undefined
              radar_options?:
                | {
                    session?: string | undefined
                  }
                | undefined
              revolut_pay?: EmptyObject | undefined
              samsung_pay?: EmptyObject | undefined
              satispay?: EmptyObject | undefined
              sepa_debit?:
                | {
                    iban: string
                  }
                | undefined
              sofort?:
                | {
                    country:
                      | "AT"
                      | "BE"
                      | "DE"
                      | "ES"
                      | "IT"
                      | "NL"
                      | UnknownEnumStringValue
                  }
                | undefined
              swish?: EmptyObject | undefined
              twint?: EmptyObject | undefined
              type:
                | "acss_debit"
                | "affirm"
                | "afterpay_clearpay"
                | "alipay"
                | "alma"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "billie"
                | "blik"
                | "boleto"
                | "cashapp"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "mobilepay"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "oxxo"
                | "p24"
                | "pay_by_bank"
                | "payco"
                | "paynow"
                | "paypal"
                | "pix"
                | "promptpay"
                | "revolut_pay"
                | "samsung_pay"
                | "satispay"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "twint"
                | "us_bank_account"
                | "wechat_pay"
                | "zip"
                | UnknownEnumStringValue
              us_bank_account?:
                | {
                    account_holder_type?:
                      | ("company" | "individual" | UnknownEnumStringValue)
                      | undefined
                    account_number?: string | undefined
                    account_type?:
                      | ("checking" | "savings" | UnknownEnumStringValue)
                      | undefined
                    financial_connections_account?: string | undefined
                    routing_number?: string | undefined
                  }
                | undefined
              wechat_pay?: EmptyObject | undefined
              zip?: EmptyObject | undefined
            }
          | undefined
        payment_method_options?:
          | {
              acss_debit?:
                | {
                    currency?:
                      | ("cad" | "usd" | UnknownEnumStringValue)
                      | undefined
                    mandate_options?:
                      | {
                          custom_mandate_url?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                          default_for?:
                            | (
                                | "invoice"
                                | "subscription"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          interval_description?: string | undefined
                          payment_schedule?:
                            | (
                                | "combined"
                                | "interval"
                                | "sporadic"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          transaction_type?:
                            | ("business" | "personal" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                    verification_method?:
                      | (
                          | "automatic"
                          | "instant"
                          | "microdeposits"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              amazon_pay?: EmptyObject | undefined
              bacs_debit?:
                | {
                    mandate_options?:
                      | {
                          reference_prefix?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              card?:
                | {
                    mandate_options?:
                      | {
                          amount: number
                          amount_type:
                            | "fixed"
                            | "maximum"
                            | UnknownEnumStringValue
                          currency: string
                          description?: string | undefined
                          end_date?: number | undefined
                          interval:
                            | "day"
                            | "month"
                            | "sporadic"
                            | "week"
                            | "year"
                            | UnknownEnumStringValue
                          interval_count?: number | undefined
                          reference: string
                          start_date: number
                          supported_types?:
                            | ("india" | UnknownEnumStringValue)[]
                            | undefined
                        }
                      | undefined
                    network?:
                      | (
                          | "amex"
                          | "cartes_bancaires"
                          | "diners"
                          | "discover"
                          | "eftpos_au"
                          | "girocard"
                          | "interac"
                          | "jcb"
                          | "link"
                          | "mastercard"
                          | "unionpay"
                          | "unknown"
                          | "visa"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    request_three_d_secure?:
                      | (
                          | "any"
                          | "automatic"
                          | "challenge"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    three_d_secure?:
                      | {
                          ares_trans_status?:
                            | (
                                | "A"
                                | "C"
                                | "I"
                                | "N"
                                | "R"
                                | "U"
                                | "Y"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          cryptogram?: string | undefined
                          electronic_commerce_indicator?:
                            | (
                                | "01"
                                | "02"
                                | "05"
                                | "06"
                                | "07"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          network_options?:
                            | {
                                cartes_bancaires?:
                                  | {
                                      cb_avalgo:
                                        | "0"
                                        | "1"
                                        | "2"
                                        | "3"
                                        | "4"
                                        | "A"
                                        | UnknownEnumStringValue
                                      cb_exemption?: string | undefined
                                      cb_score?: number | undefined
                                    }
                                  | undefined
                              }
                            | undefined
                          requestor_challenge_indicator?: string | undefined
                          transaction_id?: string | undefined
                          version?:
                            | (
                                | "1.0.2"
                                | "2.1.0"
                                | "2.2.0"
                                | UnknownEnumStringValue
                              )
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              card_present?: EmptyObject | undefined
              link?: EmptyObject | undefined
              paypal?:
                | {
                    billing_agreement_id?: string | undefined
                  }
                | undefined
              sepa_debit?:
                | {
                    mandate_options?:
                      | {
                          reference_prefix?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              us_bank_account?:
                | {
                    financial_connections?:
                      | {
                          filters?:
                            | {
                                account_subcategories?:
                                  | (
                                      | "checking"
                                      | "savings"
                                      | UnknownEnumStringValue
                                    )[]
                                  | undefined
                              }
                            | undefined
                          permissions?:
                            | (
                                | "balances"
                                | "ownership"
                                | "payment_method"
                                | "transactions"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          prefetch?:
                            | (
                                | "balances"
                                | "ownership"
                                | "transactions"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                          return_url?: string | undefined
                        }
                      | undefined
                    mandate_options?:
                      | {
                          collection_method?:
                            | ("" | "paper" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                    networks?:
                      | {
                          requested?:
                            | (
                                | "ach"
                                | "us_domestic_wire"
                                | UnknownEnumStringValue
                              )[]
                            | undefined
                        }
                      | undefined
                    verification_method?:
                      | (
                          | "automatic"
                          | "instant"
                          | "microdeposits"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
            }
          | undefined
        return_url?: string | undefined
        use_stripe_sdk?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_setup_intent>> {
    const url = `/v1/setup_intents/${p["intent"]}/confirm`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSetupIntentsIntentVerifyMicrodeposits(
    p: {
      intent: string
      requestBody?: {
        amounts?: number[] | undefined
        client_secret?: string | undefined
        descriptor_code?: string | undefined
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_setup_intent>> {
    const url = `/v1/setup_intents/${p["intent"]}/verify_microdeposits`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getShippingRates(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_shipping_rate[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/shipping_rates`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      active: p["active"],
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postShippingRates(
    p: {
      requestBody: {
        delivery_estimate?:
          | {
              maximum?:
                | {
                    unit:
                      | "business_day"
                      | "day"
                      | "hour"
                      | "month"
                      | "week"
                      | UnknownEnumStringValue
                    value: number
                  }
                | undefined
              minimum?:
                | {
                    unit:
                      | "business_day"
                      | "day"
                      | "hour"
                      | "month"
                      | "week"
                      | UnknownEnumStringValue
                    value: number
                  }
                | undefined
            }
          | undefined
        display_name: string
        expand?: string[] | undefined
        fixed_amount?:
          | {
              amount: number
              currency: string
              currency_options?:
                | {
                    [key: string]:
                      | {
                          amount: number
                          tax_behavior?:
                            | (
                                | "exclusive"
                                | "inclusive"
                                | "unspecified"
                                | UnknownEnumStringValue
                              )
                            | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        tax_behavior?:
          | ("exclusive" | "inclusive" | "unspecified" | UnknownEnumStringValue)
          | undefined
        tax_code?: string | undefined
        type?: ("fixed_amount" | UnknownEnumStringValue) | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_shipping_rate>> {
    const url = `/v1/shipping_rates`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getShippingRatesShippingRateToken(
    p: {
      expand?: string[]
      shippingRateToken: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_shipping_rate>> {
    const url = `/v1/shipping_rates/${p["shippingRateToken"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postShippingRatesShippingRateToken(
    p: {
      shippingRateToken: string
      requestBody?: {
        active?: boolean | undefined
        expand?: string[] | undefined
        fixed_amount?:
          | {
              currency_options?:
                | {
                    [key: string]:
                      | {
                          amount?: number | undefined
                          tax_behavior?:
                            | (
                                | "exclusive"
                                | "inclusive"
                                | "unspecified"
                                | UnknownEnumStringValue
                              )
                            | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        tax_behavior?:
          | ("exclusive" | "inclusive" | "unspecified" | UnknownEnumStringValue)
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_shipping_rate>> {
    const url = `/v1/shipping_rates/${p["shippingRateToken"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSigmaSavedQueriesId(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
        name?: string | undefined
        sql?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_sigma_sigma_api_query>> {
    const url = `/v1/sigma/saved_queries/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSigmaScheduledQueryRuns(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_scheduled_query_run[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/sigma/scheduled_query_runs`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSigmaScheduledQueryRunsScheduledQueryRun(
    p: {
      expand?: string[]
      scheduledQueryRun: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_scheduled_query_run>> {
    const url = `/v1/sigma/scheduled_query_runs/${p["scheduledQueryRun"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSources(
    p: {
      requestBody?: {
        amount?: number | undefined
        currency?: string | undefined
        customer?: string | undefined
        expand?: string[] | undefined
        flow?:
          | (
              | "code_verification"
              | "none"
              | "receiver"
              | "redirect"
              | UnknownEnumStringValue
            )
          | undefined
        mandate?:
          | {
              acceptance?:
                | {
                    date?: number | undefined
                    ip?: string | undefined
                    offline?:
                      | {
                          contact_email: string
                        }
                      | undefined
                    online?:
                      | {
                          date?: number | undefined
                          ip?: string | undefined
                          user_agent?: string | undefined
                        }
                      | undefined
                    status:
                      | "accepted"
                      | "pending"
                      | "refused"
                      | "revoked"
                      | UnknownEnumStringValue
                    type?:
                      | ("offline" | "online" | UnknownEnumStringValue)
                      | undefined
                    user_agent?: string | undefined
                  }
                | undefined
              amount?: (number | "" | UnknownEnumStringValue) | undefined
              currency?: string | undefined
              interval?:
                | (
                    | "one_time"
                    | "scheduled"
                    | "variable"
                    | UnknownEnumStringValue
                  )
                | undefined
              notification_method?:
                | (
                    | "deprecated_none"
                    | "email"
                    | "manual"
                    | "none"
                    | "stripe_email"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        original_source?: string | undefined
        owner?:
          | {
              address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              email?: string | undefined
              name?: string | undefined
              phone?: string | undefined
            }
          | undefined
        receiver?:
          | {
              refund_attributes_method?:
                | ("email" | "manual" | "none" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        redirect?:
          | {
              return_url: string
            }
          | undefined
        source_order?:
          | {
              items?:
                | {
                    amount?: number | undefined
                    currency?: string | undefined
                    description?: string | undefined
                    parent?: string | undefined
                    quantity?: number | undefined
                    type?:
                      | (
                          | "discount"
                          | "shipping"
                          | "sku"
                          | "tax"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }[]
                | undefined
              shipping?:
                | {
                    address: {
                      city?: string | undefined
                      country?: string | undefined
                      line1: string
                      line2?: string | undefined
                      postal_code?: string | undefined
                      state?: string | undefined
                    }
                    carrier?: string | undefined
                    name?: string | undefined
                    phone?: string | undefined
                    tracking_number?: string | undefined
                  }
                | undefined
            }
          | undefined
        statement_descriptor?: string | undefined
        token?: string | undefined
        type?: string | undefined
        usage?: ("reusable" | "single_use" | UnknownEnumStringValue) | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_source>> {
    const url = `/v1/sources`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSourcesSource(
    p: {
      clientSecret?: string
      expand?: string[]
      source: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_source>> {
    const url = `/v1/sources/${p["source"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      client_secret: p["clientSecret"],
      expand: p["expand"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSourcesSource(
    p: {
      source: string
      requestBody?: {
        amount?: number | undefined
        expand?: string[] | undefined
        mandate?:
          | {
              acceptance?:
                | {
                    date?: number | undefined
                    ip?: string | undefined
                    offline?:
                      | {
                          contact_email: string
                        }
                      | undefined
                    online?:
                      | {
                          date?: number | undefined
                          ip?: string | undefined
                          user_agent?: string | undefined
                        }
                      | undefined
                    status:
                      | "accepted"
                      | "pending"
                      | "refused"
                      | "revoked"
                      | UnknownEnumStringValue
                    type?:
                      | ("offline" | "online" | UnknownEnumStringValue)
                      | undefined
                    user_agent?: string | undefined
                  }
                | undefined
              amount?: (number | "" | UnknownEnumStringValue) | undefined
              currency?: string | undefined
              interval?:
                | (
                    | "one_time"
                    | "scheduled"
                    | "variable"
                    | UnknownEnumStringValue
                  )
                | undefined
              notification_method?:
                | (
                    | "deprecated_none"
                    | "email"
                    | "manual"
                    | "none"
                    | "stripe_email"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        owner?:
          | {
              address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              email?: string | undefined
              name?: string | undefined
              phone?: string | undefined
            }
          | undefined
        source_order?:
          | {
              items?:
                | {
                    amount?: number | undefined
                    currency?: string | undefined
                    description?: string | undefined
                    parent?: string | undefined
                    quantity?: number | undefined
                    type?:
                      | (
                          | "discount"
                          | "shipping"
                          | "sku"
                          | "tax"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }[]
                | undefined
              shipping?:
                | {
                    address: {
                      city?: string | undefined
                      country?: string | undefined
                      line1: string
                      line2?: string | undefined
                      postal_code?: string | undefined
                      state?: string | undefined
                    }
                    carrier?: string | undefined
                    name?: string | undefined
                    phone?: string | undefined
                    tracking_number?: string | undefined
                  }
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_source>> {
    const url = `/v1/sources/${p["source"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSourcesSourceMandateNotificationsMandateNotification(
    p: {
      expand?: string[]
      mandateNotification: string
      source: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_source_mandate_notification>> {
    const url = `/v1/sources/${p["source"]}/mandate_notifications/${p["mandateNotification"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSourcesSourceSourceTransactions(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      source: string
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_source_transaction[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/sources/${p["source"]}/source_transactions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSourcesSourceSourceTransactionsSourceTransaction(
    p: {
      expand?: string[]
      source: string
      sourceTransaction: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_source_transaction>> {
    const url = `/v1/sources/${p["source"]}/source_transactions/${p["sourceTransaction"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSourcesSourceVerify(
    p: {
      source: string
      requestBody: {
        expand?: string[] | undefined
        values: string[]
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_source>> {
    const url = `/v1/sources/${p["source"]}/verify`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSubscriptionItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      subscription: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_subscription_item[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/subscription_items`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      subscription: p["subscription"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSubscriptionItems(
    p: {
      requestBody: {
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        payment_behavior?:
          | (
              | "allow_incomplete"
              | "default_incomplete"
              | "error_if_incomplete"
              | "pending_if_incomplete"
              | UnknownEnumStringValue
            )
          | undefined
        price?: string | undefined
        price_data?:
          | {
              currency: string
              product: string
              recurring: {
                interval:
                  | "day"
                  | "month"
                  | "week"
                  | "year"
                  | UnknownEnumStringValue
                interval_count?: number | undefined
              }
              tax_behavior?:
                | (
                    | "exclusive"
                    | "inclusive"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              unit_amount?: number | undefined
              unit_amount_decimal?: string | undefined
            }
          | undefined
        proration_behavior?:
          | (
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            )
          | undefined
        proration_date?: number | undefined
        quantity?: number | undefined
        subscription: string
        tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription_item>> {
    const url = `/v1/subscription_items`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteSubscriptionItemsItem(
    p: {
      item: string
      requestBody?: {
        clear_usage?: boolean | undefined
        proration_behavior?:
          | (
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            )
          | undefined
        proration_date?: number | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_subscription_item>> {
    const url = `/v1/subscription_items/${p["item"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSubscriptionItemsItem(
    p: {
      expand?: string[]
      item: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription_item>> {
    const url = `/v1/subscription_items/${p["item"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSubscriptionItemsItem(
    p: {
      item: string
      requestBody?: {
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        off_session?: boolean | undefined
        payment_behavior?:
          | (
              | "allow_incomplete"
              | "default_incomplete"
              | "error_if_incomplete"
              | "pending_if_incomplete"
              | UnknownEnumStringValue
            )
          | undefined
        price?: string | undefined
        price_data?:
          | {
              currency: string
              product: string
              recurring: {
                interval:
                  | "day"
                  | "month"
                  | "week"
                  | "year"
                  | UnknownEnumStringValue
                interval_count?: number | undefined
              }
              tax_behavior?:
                | (
                    | "exclusive"
                    | "inclusive"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              unit_amount?: number | undefined
              unit_amount_decimal?: string | undefined
            }
          | undefined
        proration_behavior?:
          | (
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            )
          | undefined
        proration_date?: number | undefined
        quantity?: number | undefined
        tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription_item>> {
    const url = `/v1/subscription_items/${p["item"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSubscriptionSchedules(
    p: {
      canceledAt?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      completedAt?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      releasedAt?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      scheduled?: boolean
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_subscription_schedule[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/subscription_schedules`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      canceled_at: p["canceledAt"],
      completed_at: p["completedAt"],
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      released_at: p["releasedAt"],
      scheduled: p["scheduled"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSubscriptionSchedules(
    p: {
      requestBody?: {
        customer?: string | undefined
        default_settings?:
          | {
              application_fee_percent?: number | undefined
              automatic_tax?:
                | {
                    enabled: boolean
                    liability?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                  }
                | undefined
              billing_cycle_anchor?:
                | ("automatic" | "phase_start" | UnknownEnumStringValue)
                | undefined
              collection_method?:
                | (
                    | "charge_automatically"
                    | "send_invoice"
                    | UnknownEnumStringValue
                  )
                | undefined
              default_payment_method?: string | undefined
              description?: (string | "" | UnknownEnumStringValue) | undefined
              invoice_settings?:
                | {
                    account_tax_ids?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                    days_until_due?: number | undefined
                    issuer?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                  }
                | undefined
              on_behalf_of?: (string | "" | UnknownEnumStringValue) | undefined
              transfer_data?:
                | (
                    | {
                        amount_percent?: number | undefined
                        destination: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        end_behavior?:
          | ("cancel" | "none" | "release" | "renew" | UnknownEnumStringValue)
          | undefined
        expand?: string[] | undefined
        from_subscription?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        phases?:
          | {
              add_invoice_items?:
                | {
                    discounts?:
                      | {
                          coupon?: string | undefined
                          discount?: string | undefined
                          promotion_code?: string | undefined
                        }[]
                      | undefined
                    price?: string | undefined
                    price_data?:
                      | {
                          currency: string
                          product: string
                          tax_behavior?:
                            | (
                                | "exclusive"
                                | "inclusive"
                                | "unspecified"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          unit_amount?: number | undefined
                          unit_amount_decimal?: string | undefined
                        }
                      | undefined
                    quantity?: number | undefined
                    tax_rates?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                  }[]
                | undefined
              application_fee_percent?: number | undefined
              automatic_tax?:
                | {
                    enabled: boolean
                    liability?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                  }
                | undefined
              billing_cycle_anchor?:
                | ("automatic" | "phase_start" | UnknownEnumStringValue)
                | undefined
              collection_method?:
                | (
                    | "charge_automatically"
                    | "send_invoice"
                    | UnknownEnumStringValue
                  )
                | undefined
              currency?: string | undefined
              default_payment_method?: string | undefined
              default_tax_rates?:
                | (string[] | "" | UnknownEnumStringValue)
                | undefined
              description?: (string | "" | UnknownEnumStringValue) | undefined
              discounts?:
                | (
                    | {
                        coupon?: string | undefined
                        discount?: string | undefined
                        promotion_code?: string | undefined
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              end_date?: number | undefined
              invoice_settings?:
                | {
                    account_tax_ids?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                    days_until_due?: number | undefined
                    issuer?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                  }
                | undefined
              items: {
                discounts?:
                  | (
                      | {
                          coupon?: string | undefined
                          discount?: string | undefined
                          promotion_code?: string | undefined
                        }[]
                      | ""
                      | UnknownEnumStringValue
                    )
                  | undefined
                metadata?:
                  | {
                      [key: string]: string | undefined
                    }
                  | undefined
                price?: string | undefined
                price_data?:
                  | {
                      currency: string
                      product: string
                      recurring: {
                        interval:
                          | "day"
                          | "month"
                          | "week"
                          | "year"
                          | UnknownEnumStringValue
                        interval_count?: number | undefined
                      }
                      tax_behavior?:
                        | (
                            | "exclusive"
                            | "inclusive"
                            | "unspecified"
                            | UnknownEnumStringValue
                          )
                        | undefined
                      unit_amount?: number | undefined
                      unit_amount_decimal?: string | undefined
                    }
                  | undefined
                quantity?: number | undefined
                tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
              }[]
              iterations?: number | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              on_behalf_of?: string | undefined
              proration_behavior?:
                | (
                    | "always_invoice"
                    | "create_prorations"
                    | "none"
                    | UnknownEnumStringValue
                  )
                | undefined
              transfer_data?:
                | {
                    amount_percent?: number | undefined
                    destination: string
                  }
                | undefined
              trial?: boolean | undefined
              trial_end?: number | undefined
            }[]
          | undefined
        start_date?: (number | "now" | UnknownEnumStringValue) | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription_schedule>> {
    const url = `/v1/subscription_schedules`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSubscriptionSchedulesSchedule(
    p: {
      expand?: string[]
      schedule: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription_schedule>> {
    const url = `/v1/subscription_schedules/${p["schedule"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSubscriptionSchedulesSchedule(
    p: {
      schedule: string
      requestBody?: {
        default_settings?:
          | {
              application_fee_percent?: number | undefined
              automatic_tax?:
                | {
                    enabled: boolean
                    liability?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                  }
                | undefined
              billing_cycle_anchor?:
                | ("automatic" | "phase_start" | UnknownEnumStringValue)
                | undefined
              collection_method?:
                | (
                    | "charge_automatically"
                    | "send_invoice"
                    | UnknownEnumStringValue
                  )
                | undefined
              default_payment_method?: string | undefined
              description?: (string | "" | UnknownEnumStringValue) | undefined
              invoice_settings?:
                | {
                    account_tax_ids?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                    days_until_due?: number | undefined
                    issuer?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                  }
                | undefined
              on_behalf_of?: (string | "" | UnknownEnumStringValue) | undefined
              transfer_data?:
                | (
                    | {
                        amount_percent?: number | undefined
                        destination: string
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        end_behavior?:
          | ("cancel" | "none" | "release" | "renew" | UnknownEnumStringValue)
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        phases?:
          | {
              add_invoice_items?:
                | {
                    discounts?:
                      | {
                          coupon?: string | undefined
                          discount?: string | undefined
                          promotion_code?: string | undefined
                        }[]
                      | undefined
                    price?: string | undefined
                    price_data?:
                      | {
                          currency: string
                          product: string
                          tax_behavior?:
                            | (
                                | "exclusive"
                                | "inclusive"
                                | "unspecified"
                                | UnknownEnumStringValue
                              )
                            | undefined
                          unit_amount?: number | undefined
                          unit_amount_decimal?: string | undefined
                        }
                      | undefined
                    quantity?: number | undefined
                    tax_rates?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                  }[]
                | undefined
              application_fee_percent?: number | undefined
              automatic_tax?:
                | {
                    enabled: boolean
                    liability?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                  }
                | undefined
              billing_cycle_anchor?:
                | ("automatic" | "phase_start" | UnknownEnumStringValue)
                | undefined
              collection_method?:
                | (
                    | "charge_automatically"
                    | "send_invoice"
                    | UnknownEnumStringValue
                  )
                | undefined
              default_payment_method?: string | undefined
              default_tax_rates?:
                | (string[] | "" | UnknownEnumStringValue)
                | undefined
              description?: (string | "" | UnknownEnumStringValue) | undefined
              discounts?:
                | (
                    | {
                        coupon?: string | undefined
                        discount?: string | undefined
                        promotion_code?: string | undefined
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              end_date?: (number | "now" | UnknownEnumStringValue) | undefined
              invoice_settings?:
                | {
                    account_tax_ids?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                    days_until_due?: number | undefined
                    issuer?:
                      | {
                          account?: string | undefined
                          type: "account" | "self" | UnknownEnumStringValue
                        }
                      | undefined
                  }
                | undefined
              items: {
                discounts?:
                  | (
                      | {
                          coupon?: string | undefined
                          discount?: string | undefined
                          promotion_code?: string | undefined
                        }[]
                      | ""
                      | UnknownEnumStringValue
                    )
                  | undefined
                metadata?:
                  | {
                      [key: string]: string | undefined
                    }
                  | undefined
                price?: string | undefined
                price_data?:
                  | {
                      currency: string
                      product: string
                      recurring: {
                        interval:
                          | "day"
                          | "month"
                          | "week"
                          | "year"
                          | UnknownEnumStringValue
                        interval_count?: number | undefined
                      }
                      tax_behavior?:
                        | (
                            | "exclusive"
                            | "inclusive"
                            | "unspecified"
                            | UnknownEnumStringValue
                          )
                        | undefined
                      unit_amount?: number | undefined
                      unit_amount_decimal?: string | undefined
                    }
                  | undefined
                quantity?: number | undefined
                tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
              }[]
              iterations?: number | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              on_behalf_of?: string | undefined
              proration_behavior?:
                | (
                    | "always_invoice"
                    | "create_prorations"
                    | "none"
                    | UnknownEnumStringValue
                  )
                | undefined
              start_date?: (number | "now" | UnknownEnumStringValue) | undefined
              transfer_data?:
                | {
                    amount_percent?: number | undefined
                    destination: string
                  }
                | undefined
              trial?: boolean | undefined
              trial_end?: (number | "now" | UnknownEnumStringValue) | undefined
            }[]
          | undefined
        proration_behavior?:
          | (
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription_schedule>> {
    const url = `/v1/subscription_schedules/${p["schedule"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSubscriptionSchedulesScheduleCancel(
    p: {
      schedule: string
      requestBody?: {
        expand?: string[] | undefined
        invoice_now?: boolean | undefined
        prorate?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription_schedule>> {
    const url = `/v1/subscription_schedules/${p["schedule"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSubscriptionSchedulesScheduleRelease(
    p: {
      schedule: string
      requestBody?: {
        expand?: string[] | undefined
        preserve_cancel_date?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription_schedule>> {
    const url = `/v1/subscription_schedules/${p["schedule"]}/release`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSubscriptions(
    p: {
      automaticTax?: {
        enabled: boolean
      }
      collectionMethod?:
        | "charge_automatically"
        | "send_invoice"
        | UnknownEnumStringValue
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      currentPeriodEnd?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      currentPeriodStart?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      price?: string
      startingAfter?: string
      status?:
        | "active"
        | "all"
        | "canceled"
        | "ended"
        | "incomplete"
        | "incomplete_expired"
        | "past_due"
        | "paused"
        | "trialing"
        | "unpaid"
        | UnknownEnumStringValue
      testClock?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_subscription[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/subscriptions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      automatic_tax: p["automaticTax"],
      collection_method: p["collectionMethod"],
      created: p["created"],
      current_period_end: p["currentPeriodEnd"],
      current_period_start: p["currentPeriodStart"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      price: p["price"],
      starting_after: p["startingAfter"],
      status: p["status"],
      test_clock: p["testClock"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSubscriptions(
    p: {
      requestBody: {
        add_invoice_items?:
          | {
              discounts?:
                | {
                    coupon?: string | undefined
                    discount?: string | undefined
                    promotion_code?: string | undefined
                  }[]
                | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product: string
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
            }[]
          | undefined
        application_fee_percent?:
          | (number | "" | UnknownEnumStringValue)
          | undefined
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        backdate_start_date?: number | undefined
        billing_cycle_anchor?: number | undefined
        billing_cycle_anchor_config?:
          | {
              day_of_month: number
              hour?: number | undefined
              minute?: number | undefined
              month?: number | undefined
              second?: number | undefined
            }
          | undefined
        cancel_at?: number | undefined
        cancel_at_period_end?: boolean | undefined
        collection_method?:
          | ("charge_automatically" | "send_invoice" | UnknownEnumStringValue)
          | undefined
        currency?: string | undefined
        customer: string
        days_until_due?: number | undefined
        default_payment_method?: string | undefined
        default_source?: string | undefined
        default_tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        description?: string | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        invoice_settings?:
          | {
              account_tax_ids?:
                | (string[] | "" | UnknownEnumStringValue)
                | undefined
              issuer?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        items?:
          | {
              discounts?:
                | (
                    | {
                        coupon?: string | undefined
                        discount?: string | undefined
                        promotion_code?: string | undefined
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product: string
                    recurring: {
                      interval:
                        | "day"
                        | "month"
                        | "week"
                        | "year"
                        | UnknownEnumStringValue
                      interval_count?: number | undefined
                    }
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
            }[]
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        off_session?: boolean | undefined
        on_behalf_of?: (string | "" | UnknownEnumStringValue) | undefined
        payment_behavior?:
          | (
              | "allow_incomplete"
              | "default_incomplete"
              | "error_if_incomplete"
              | "pending_if_incomplete"
              | UnknownEnumStringValue
            )
          | undefined
        payment_settings?:
          | {
              payment_method_options?:
                | {
                    acss_debit?:
                      | (
                          | {
                              mandate_options?:
                                | {
                                    transaction_type?:
                                      | (
                                          | "business"
                                          | "personal"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    bancontact?:
                      | (
                          | {
                              preferred_language?:
                                | (
                                    | "de"
                                    | "en"
                                    | "fr"
                                    | "nl"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    card?:
                      | (
                          | {
                              mandate_options?:
                                | {
                                    amount?: number | undefined
                                    amount_type?:
                                      | (
                                          | "fixed"
                                          | "maximum"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                    description?: string | undefined
                                  }
                                | undefined
                              network?:
                                | (
                                    | "amex"
                                    | "cartes_bancaires"
                                    | "diners"
                                    | "discover"
                                    | "eftpos_au"
                                    | "girocard"
                                    | "interac"
                                    | "jcb"
                                    | "link"
                                    | "mastercard"
                                    | "unionpay"
                                    | "unknown"
                                    | "visa"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              request_three_d_secure?:
                                | (
                                    | "any"
                                    | "automatic"
                                    | "challenge"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    customer_balance?:
                      | (
                          | {
                              bank_transfer?:
                                | {
                                    eu_bank_transfer?:
                                      | {
                                          country: string
                                        }
                                      | undefined
                                    type?: string | undefined
                                  }
                                | undefined
                              funding_type?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    konbini?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    sepa_debit?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    us_bank_account?:
                      | (
                          | {
                              financial_connections?:
                                | {
                                    filters?:
                                      | {
                                          account_subcategories?:
                                            | (
                                                | "checking"
                                                | "savings"
                                                | UnknownEnumStringValue
                                              )[]
                                            | undefined
                                        }
                                      | undefined
                                    permissions?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "payment_method"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                    prefetch?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              payment_method_types?:
                | (
                    | (
                        | "ach_credit_transfer"
                        | "ach_debit"
                        | "acss_debit"
                        | "amazon_pay"
                        | "au_becs_debit"
                        | "bacs_debit"
                        | "bancontact"
                        | "boleto"
                        | "card"
                        | "cashapp"
                        | "customer_balance"
                        | "eps"
                        | "fpx"
                        | "giropay"
                        | "grabpay"
                        | "ideal"
                        | "jp_credit_transfer"
                        | "kakao_pay"
                        | "klarna"
                        | "konbini"
                        | "kr_card"
                        | "link"
                        | "multibanco"
                        | "naver_pay"
                        | "nz_bank_account"
                        | "p24"
                        | "payco"
                        | "paynow"
                        | "paypal"
                        | "promptpay"
                        | "revolut_pay"
                        | "sepa_credit_transfer"
                        | "sepa_debit"
                        | "sofort"
                        | "swish"
                        | "us_bank_account"
                        | "wechat_pay"
                        | UnknownEnumStringValue
                      )[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              save_default_payment_method?:
                | ("off" | "on_subscription" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        pending_invoice_item_interval?:
          | (
              | {
                  interval:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        proration_behavior?:
          | (
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            )
          | undefined
        transfer_data?:
          | {
              amount_percent?: number | undefined
              destination: string
            }
          | undefined
        trial_end?: ("now" | UnknownEnumStringValue | number) | undefined
        trial_from_plan?: boolean | undefined
        trial_period_days?: number | undefined
        trial_settings?:
          | {
              end_behavior: {
                missing_payment_method:
                  | "cancel"
                  | "create_invoice"
                  | "pause"
                  | UnknownEnumStringValue
              }
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription>> {
    const url = `/v1/subscriptions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSubscriptionsSearch(
    p: {
      expand?: string[]
      limit?: number
      page?: string
      query: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_subscription[]
      has_more: boolean
      next_page?: (string | null) | undefined
      object: "search_result" | UnknownEnumStringValue
      total_count?: number | undefined
      url: string
    }>
  > {
    const url = `/v1/subscriptions/search`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteSubscriptionsSubscriptionExposedId(
    p: {
      subscriptionExposedId: string
      requestBody?: {
        cancellation_details?:
          | {
              comment?: (string | "" | UnknownEnumStringValue) | undefined
              feedback?:
                | (
                    | ""
                    | "customer_service"
                    | "low_quality"
                    | "missing_features"
                    | "other"
                    | "switched_service"
                    | "too_complex"
                    | "too_expensive"
                    | "unused"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        invoice_now?: boolean | undefined
        prorate?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription>> {
    const url = `/v1/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getSubscriptionsSubscriptionExposedId(
    p: {
      expand?: string[]
      subscriptionExposedId: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription>> {
    const url = `/v1/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSubscriptionsSubscriptionExposedId(
    p: {
      subscriptionExposedId: string
      requestBody?: {
        add_invoice_items?:
          | {
              discounts?:
                | {
                    coupon?: string | undefined
                    discount?: string | undefined
                    promotion_code?: string | undefined
                  }[]
                | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product: string
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
            }[]
          | undefined
        application_fee_percent?:
          | (number | "" | UnknownEnumStringValue)
          | undefined
        automatic_tax?:
          | {
              enabled: boolean
              liability?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        billing_cycle_anchor?:
          | ("now" | "unchanged" | UnknownEnumStringValue)
          | undefined
        cancel_at?: (number | "" | UnknownEnumStringValue) | undefined
        cancel_at_period_end?: boolean | undefined
        cancellation_details?:
          | {
              comment?: (string | "" | UnknownEnumStringValue) | undefined
              feedback?:
                | (
                    | ""
                    | "customer_service"
                    | "low_quality"
                    | "missing_features"
                    | "other"
                    | "switched_service"
                    | "too_complex"
                    | "too_expensive"
                    | "unused"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        collection_method?:
          | ("charge_automatically" | "send_invoice" | UnknownEnumStringValue)
          | undefined
        days_until_due?: number | undefined
        default_payment_method?: string | undefined
        default_source?: (string | "" | UnknownEnumStringValue) | undefined
        default_tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
        description?: (string | "" | UnknownEnumStringValue) | undefined
        discounts?:
          | (
              | {
                  coupon?: string | undefined
                  discount?: string | undefined
                  promotion_code?: string | undefined
                }[]
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        invoice_settings?:
          | {
              account_tax_ids?:
                | (string[] | "" | UnknownEnumStringValue)
                | undefined
              issuer?:
                | {
                    account?: string | undefined
                    type: "account" | "self" | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        items?:
          | {
              clear_usage?: boolean | undefined
              deleted?: boolean | undefined
              discounts?:
                | (
                    | {
                        coupon?: string | undefined
                        discount?: string | undefined
                        promotion_code?: string | undefined
                      }[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              id?: string | undefined
              metadata?:
                | (
                    | {
                        [key: string]: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              price?: string | undefined
              price_data?:
                | {
                    currency: string
                    product: string
                    recurring: {
                      interval:
                        | "day"
                        | "month"
                        | "week"
                        | "year"
                        | UnknownEnumStringValue
                      interval_count?: number | undefined
                    }
                    tax_behavior?:
                      | (
                          | "exclusive"
                          | "inclusive"
                          | "unspecified"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_amount?: number | undefined
                    unit_amount_decimal?: string | undefined
                  }
                | undefined
              quantity?: number | undefined
              tax_rates?: (string[] | "" | UnknownEnumStringValue) | undefined
            }[]
          | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        off_session?: boolean | undefined
        on_behalf_of?: (string | "" | UnknownEnumStringValue) | undefined
        pause_collection?:
          | (
              | {
                  behavior:
                    | "keep_as_draft"
                    | "mark_uncollectible"
                    | "void"
                    | UnknownEnumStringValue
                  resumes_at?: number | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        payment_behavior?:
          | (
              | "allow_incomplete"
              | "default_incomplete"
              | "error_if_incomplete"
              | "pending_if_incomplete"
              | UnknownEnumStringValue
            )
          | undefined
        payment_settings?:
          | {
              payment_method_options?:
                | {
                    acss_debit?:
                      | (
                          | {
                              mandate_options?:
                                | {
                                    transaction_type?:
                                      | (
                                          | "business"
                                          | "personal"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    bancontact?:
                      | (
                          | {
                              preferred_language?:
                                | (
                                    | "de"
                                    | "en"
                                    | "fr"
                                    | "nl"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    card?:
                      | (
                          | {
                              mandate_options?:
                                | {
                                    amount?: number | undefined
                                    amount_type?:
                                      | (
                                          | "fixed"
                                          | "maximum"
                                          | UnknownEnumStringValue
                                        )
                                      | undefined
                                    description?: string | undefined
                                  }
                                | undefined
                              network?:
                                | (
                                    | "amex"
                                    | "cartes_bancaires"
                                    | "diners"
                                    | "discover"
                                    | "eftpos_au"
                                    | "girocard"
                                    | "interac"
                                    | "jcb"
                                    | "link"
                                    | "mastercard"
                                    | "unionpay"
                                    | "unknown"
                                    | "visa"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                              request_three_d_secure?:
                                | (
                                    | "any"
                                    | "automatic"
                                    | "challenge"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    customer_balance?:
                      | (
                          | {
                              bank_transfer?:
                                | {
                                    eu_bank_transfer?:
                                      | {
                                          country: string
                                        }
                                      | undefined
                                    type?: string | undefined
                                  }
                                | undefined
                              funding_type?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    konbini?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    sepa_debit?:
                      | (EmptyObject | "" | UnknownEnumStringValue)
                      | undefined
                    us_bank_account?:
                      | (
                          | {
                              financial_connections?:
                                | {
                                    filters?:
                                      | {
                                          account_subcategories?:
                                            | (
                                                | "checking"
                                                | "savings"
                                                | UnknownEnumStringValue
                                              )[]
                                            | undefined
                                        }
                                      | undefined
                                    permissions?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "payment_method"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                    prefetch?:
                                      | (
                                          | "balances"
                                          | "ownership"
                                          | "transactions"
                                          | UnknownEnumStringValue
                                        )[]
                                      | undefined
                                  }
                                | undefined
                              verification_method?:
                                | (
                                    | "automatic"
                                    | "instant"
                                    | "microdeposits"
                                    | UnknownEnumStringValue
                                  )
                                | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              payment_method_types?:
                | (
                    | (
                        | "ach_credit_transfer"
                        | "ach_debit"
                        | "acss_debit"
                        | "amazon_pay"
                        | "au_becs_debit"
                        | "bacs_debit"
                        | "bancontact"
                        | "boleto"
                        | "card"
                        | "cashapp"
                        | "customer_balance"
                        | "eps"
                        | "fpx"
                        | "giropay"
                        | "grabpay"
                        | "ideal"
                        | "jp_credit_transfer"
                        | "kakao_pay"
                        | "klarna"
                        | "konbini"
                        | "kr_card"
                        | "link"
                        | "multibanco"
                        | "naver_pay"
                        | "nz_bank_account"
                        | "p24"
                        | "payco"
                        | "paynow"
                        | "paypal"
                        | "promptpay"
                        | "revolut_pay"
                        | "sepa_credit_transfer"
                        | "sepa_debit"
                        | "sofort"
                        | "swish"
                        | "us_bank_account"
                        | "wechat_pay"
                        | UnknownEnumStringValue
                      )[]
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              save_default_payment_method?:
                | ("off" | "on_subscription" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        pending_invoice_item_interval?:
          | (
              | {
                  interval:
                    | "day"
                    | "month"
                    | "week"
                    | "year"
                    | UnknownEnumStringValue
                  interval_count?: number | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        proration_behavior?:
          | (
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            )
          | undefined
        proration_date?: number | undefined
        transfer_data?:
          | (
              | {
                  amount_percent?: number | undefined
                  destination: string
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        trial_end?: ("now" | UnknownEnumStringValue | number) | undefined
        trial_from_plan?: boolean | undefined
        trial_settings?:
          | {
              end_behavior: {
                missing_payment_method:
                  | "cancel"
                  | "create_invoice"
                  | "pause"
                  | UnknownEnumStringValue
              }
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription>> {
    const url = `/v1/subscriptions/${p["subscriptionExposedId"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteSubscriptionsSubscriptionExposedIdDiscount(
    p: {
      subscriptionExposedId: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_discount>> {
    const url = `/v1/subscriptions/${p["subscriptionExposedId"]}/discount`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postSubscriptionsSubscriptionResume(
    p: {
      subscription: string
      requestBody?: {
        billing_cycle_anchor?:
          | ("now" | "unchanged" | UnknownEnumStringValue)
          | undefined
        expand?: string[] | undefined
        proration_behavior?:
          | (
              | "always_invoice"
              | "create_prorations"
              | "none"
              | UnknownEnumStringValue
            )
          | undefined
        proration_date?: number | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_subscription>> {
    const url = `/v1/subscriptions/${p["subscription"]}/resume`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTaxCalculations(
    p: {
      requestBody: {
        currency: string
        customer?: string | undefined
        customer_details?:
          | {
              address?:
                | {
                    city?: (string | "" | UnknownEnumStringValue) | undefined
                    country: string
                    line1?: (string | "" | UnknownEnumStringValue) | undefined
                    line2?: (string | "" | UnknownEnumStringValue) | undefined
                    postal_code?:
                      | (string | "" | UnknownEnumStringValue)
                      | undefined
                    state?: (string | "" | UnknownEnumStringValue) | undefined
                  }
                | undefined
              address_source?:
                | ("billing" | "shipping" | UnknownEnumStringValue)
                | undefined
              ip_address?: string | undefined
              tax_ids?:
                | {
                    type:
                      | "ad_nrt"
                      | "ae_trn"
                      | "al_tin"
                      | "am_tin"
                      | "ao_tin"
                      | "ar_cuit"
                      | "au_abn"
                      | "au_arn"
                      | "ba_tin"
                      | "bb_tin"
                      | "bg_uic"
                      | "bh_vat"
                      | "bo_tin"
                      | "br_cnpj"
                      | "br_cpf"
                      | "bs_tin"
                      | "by_tin"
                      | "ca_bn"
                      | "ca_gst_hst"
                      | "ca_pst_bc"
                      | "ca_pst_mb"
                      | "ca_pst_sk"
                      | "ca_qst"
                      | "cd_nif"
                      | "ch_uid"
                      | "ch_vat"
                      | "cl_tin"
                      | "cn_tin"
                      | "co_nit"
                      | "cr_tin"
                      | "de_stn"
                      | "do_rcn"
                      | "ec_ruc"
                      | "eg_tin"
                      | "es_cif"
                      | "eu_oss_vat"
                      | "eu_vat"
                      | "gb_vat"
                      | "ge_vat"
                      | "gn_nif"
                      | "hk_br"
                      | "hr_oib"
                      | "hu_tin"
                      | "id_npwp"
                      | "il_vat"
                      | "in_gst"
                      | "is_vat"
                      | "jp_cn"
                      | "jp_rn"
                      | "jp_trn"
                      | "ke_pin"
                      | "kh_tin"
                      | "kr_brn"
                      | "kz_bin"
                      | "li_uid"
                      | "li_vat"
                      | "ma_vat"
                      | "md_vat"
                      | "me_pib"
                      | "mk_vat"
                      | "mr_nif"
                      | "mx_rfc"
                      | "my_frp"
                      | "my_itn"
                      | "my_sst"
                      | "ng_tin"
                      | "no_vat"
                      | "no_voec"
                      | "np_pan"
                      | "nz_gst"
                      | "om_vat"
                      | "pe_ruc"
                      | "ph_tin"
                      | "ro_tin"
                      | "rs_pib"
                      | "ru_inn"
                      | "ru_kpp"
                      | "sa_vat"
                      | "sg_gst"
                      | "sg_uen"
                      | "si_tin"
                      | "sn_ninea"
                      | "sr_fin"
                      | "sv_nit"
                      | "th_vat"
                      | "tj_tin"
                      | "tr_tin"
                      | "tw_vat"
                      | "tz_vat"
                      | "ua_vat"
                      | "ug_tin"
                      | "us_ein"
                      | "uy_ruc"
                      | "uz_tin"
                      | "uz_vat"
                      | "ve_rif"
                      | "vn_tin"
                      | "za_vat"
                      | "zm_tin"
                      | "zw_tin"
                      | UnknownEnumStringValue
                    value: string
                  }[]
                | undefined
              taxability_override?:
                | (
                    | "customer_exempt"
                    | "none"
                    | "reverse_charge"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        line_items: {
          amount: number
          product?: string | undefined
          quantity?: number | undefined
          reference?: string | undefined
          tax_behavior?:
            | ("exclusive" | "inclusive" | UnknownEnumStringValue)
            | undefined
          tax_code?: string | undefined
        }[]
        ship_from_details?:
          | {
              address: {
                city?: (string | "" | UnknownEnumStringValue) | undefined
                country: string
                line1?: (string | "" | UnknownEnumStringValue) | undefined
                line2?: (string | "" | UnknownEnumStringValue) | undefined
                postal_code?: (string | "" | UnknownEnumStringValue) | undefined
                state?: (string | "" | UnknownEnumStringValue) | undefined
              }
            }
          | undefined
        shipping_cost?:
          | {
              amount?: number | undefined
              shipping_rate?: string | undefined
              tax_behavior?:
                | ("exclusive" | "inclusive" | UnknownEnumStringValue)
                | undefined
              tax_code?: string | undefined
            }
          | undefined
        tax_date?: number | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_calculation>> {
    const url = `/v1/tax/calculations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxCalculationsCalculation(
    p: {
      calculation: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_calculation>> {
    const url = `/v1/tax/calculations/${p["calculation"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxCalculationsCalculationLineItems(
    p: {
      calculation: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_tax_calculation_line_item[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/tax/calculations/${p["calculation"]}/line_items`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxRegistrations(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "active"
        | "all"
        | "expired"
        | "scheduled"
        | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_tax_registration[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/tax/registrations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTaxRegistrations(
    p: {
      requestBody: {
        active_from: "now" | UnknownEnumStringValue | number
        country: string
        country_options: {
          ae?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          al?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          am?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          ao?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          at?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          au?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          ba?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          bb?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          be?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          bg?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          bh?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          bs?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          by?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          ca?:
            | {
                province_standard?:
                  | {
                      province: string
                    }
                  | undefined
                type:
                  | "province_standard"
                  | "simplified"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          cd?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          ch?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          cl?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          co?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          cr?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          cy?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          cz?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          de?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          dk?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          ec?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          ee?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          eg?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          es?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          fi?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          fr?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          gb?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          ge?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          gn?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          gr?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          hr?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          hu?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          id?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          ie?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          is?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          it?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          jp?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          ke?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          kh?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          kr?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          kz?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          lt?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          lu?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          lv?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          ma?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          md?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          me?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          mk?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          mr?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          mt?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          mx?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          my?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          ng?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          nl?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          no?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          np?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          nz?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          om?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          pe?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          pl?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          pt?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          ro?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          rs?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          ru?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          sa?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          se?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          sg?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          si?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          sk?:
            | {
                standard?:
                  | {
                      place_of_supply_scheme:
                        | "small_seller"
                        | "standard"
                        | UnknownEnumStringValue
                    }
                  | undefined
                type:
                  | "ioss"
                  | "oss_non_union"
                  | "oss_union"
                  | "standard"
                  | UnknownEnumStringValue
              }
            | undefined
          sn?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          sr?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          th?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          tj?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          tr?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          tz?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          ug?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          us?:
            | {
                local_amusement_tax?:
                  | {
                      jurisdiction: string
                    }
                  | undefined
                local_lease_tax?:
                  | {
                      jurisdiction: string
                    }
                  | undefined
                state: string
                state_sales_tax?:
                  | {
                      elections: {
                        jurisdiction?: string | undefined
                        type:
                          | "local_use_tax"
                          | "simplified_sellers_use_tax"
                          | "single_local_use_tax"
                          | UnknownEnumStringValue
                      }[]
                    }
                  | undefined
                type:
                  | "local_amusement_tax"
                  | "local_lease_tax"
                  | "state_communications_tax"
                  | "state_retail_delivery_fee"
                  | "state_sales_tax"
                  | UnknownEnumStringValue
              }
            | undefined
          uy?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          uz?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          vn?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          za?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
          zm?:
            | {
                type: "simplified" | UnknownEnumStringValue
              }
            | undefined
          zw?:
            | {
                type: "standard" | UnknownEnumStringValue
              }
            | undefined
        }
        expand?: string[] | undefined
        expires_at?: number | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_registration>> {
    const url = `/v1/tax/registrations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxRegistrationsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_registration>> {
    const url = `/v1/tax/registrations/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTaxRegistrationsId(
    p: {
      id: string
      requestBody?: {
        active_from?: ("now" | UnknownEnumStringValue | number) | undefined
        expand?: string[] | undefined
        expires_at?: ("now" | UnknownEnumStringValue | number | "") | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_registration>> {
    const url = `/v1/tax/registrations/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxSettings(
    p: {
      expand?: string[]
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_settings>> {
    const url = `/v1/tax/settings`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTaxSettings(
    p: {
      requestBody?: {
        defaults?:
          | {
              tax_behavior?:
                | (
                    | "exclusive"
                    | "inclusive"
                    | "inferred_by_currency"
                    | UnknownEnumStringValue
                  )
                | undefined
              tax_code?: string | undefined
            }
          | undefined
        expand?: string[] | undefined
        head_office?:
          | {
              address: {
                city?: string | undefined
                country?: string | undefined
                line1?: string | undefined
                line2?: string | undefined
                postal_code?: string | undefined
                state?: string | undefined
              }
            }
          | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_settings>> {
    const url = `/v1/tax/settings`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTaxTransactionsCreateFromCalculation(
    p: {
      requestBody: {
        calculation: string
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        posted_at?: number | undefined
        reference: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_transaction>> {
    const url = `/v1/tax/transactions/create_from_calculation`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTaxTransactionsCreateReversal(
    p: {
      requestBody: {
        expand?: string[] | undefined
        flat_amount?: number | undefined
        line_items?:
          | {
              amount: number
              amount_tax: number
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              original_line_item: string
              quantity?: number | undefined
              reference: string
            }[]
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        mode: "full" | "partial" | UnknownEnumStringValue
        original_transaction: string
        reference: string
        shipping_cost?:
          | {
              amount: number
              amount_tax: number
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_transaction>> {
    const url = `/v1/tax/transactions/create_reversal`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxTransactionsTransaction(
    p: {
      expand?: string[]
      transaction: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_transaction>> {
    const url = `/v1/tax/transactions/${p["transaction"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxTransactionsTransactionLineItems(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      transaction: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_tax_transaction_line_item[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/tax/transactions/${p["transaction"]}/line_items`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxCodes(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_tax_code[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/tax_codes`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxCodesId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_code>> {
    const url = `/v1/tax_codes/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxIds(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      owner?: {
        account?: string | undefined
        customer?: string | undefined
        type:
          | "account"
          | "application"
          | "customer"
          | "self"
          | UnknownEnumStringValue
      }
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_tax_id[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/tax_ids`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      owner: p["owner"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTaxIds(
    p: {
      requestBody: {
        expand?: string[] | undefined
        owner?:
          | {
              account?: string | undefined
              customer?: string | undefined
              type:
                | "account"
                | "application"
                | "customer"
                | "self"
                | UnknownEnumStringValue
            }
          | undefined
        type:
          | "ad_nrt"
          | "ae_trn"
          | "al_tin"
          | "am_tin"
          | "ao_tin"
          | "ar_cuit"
          | "au_abn"
          | "au_arn"
          | "ba_tin"
          | "bb_tin"
          | "bg_uic"
          | "bh_vat"
          | "bo_tin"
          | "br_cnpj"
          | "br_cpf"
          | "bs_tin"
          | "by_tin"
          | "ca_bn"
          | "ca_gst_hst"
          | "ca_pst_bc"
          | "ca_pst_mb"
          | "ca_pst_sk"
          | "ca_qst"
          | "cd_nif"
          | "ch_uid"
          | "ch_vat"
          | "cl_tin"
          | "cn_tin"
          | "co_nit"
          | "cr_tin"
          | "de_stn"
          | "do_rcn"
          | "ec_ruc"
          | "eg_tin"
          | "es_cif"
          | "eu_oss_vat"
          | "eu_vat"
          | "gb_vat"
          | "ge_vat"
          | "gn_nif"
          | "hk_br"
          | "hr_oib"
          | "hu_tin"
          | "id_npwp"
          | "il_vat"
          | "in_gst"
          | "is_vat"
          | "jp_cn"
          | "jp_rn"
          | "jp_trn"
          | "ke_pin"
          | "kh_tin"
          | "kr_brn"
          | "kz_bin"
          | "li_uid"
          | "li_vat"
          | "ma_vat"
          | "md_vat"
          | "me_pib"
          | "mk_vat"
          | "mr_nif"
          | "mx_rfc"
          | "my_frp"
          | "my_itn"
          | "my_sst"
          | "ng_tin"
          | "no_vat"
          | "no_voec"
          | "np_pan"
          | "nz_gst"
          | "om_vat"
          | "pe_ruc"
          | "ph_tin"
          | "ro_tin"
          | "rs_pib"
          | "ru_inn"
          | "ru_kpp"
          | "sa_vat"
          | "sg_gst"
          | "sg_uen"
          | "si_tin"
          | "sn_ninea"
          | "sr_fin"
          | "sv_nit"
          | "th_vat"
          | "tj_tin"
          | "tr_tin"
          | "tw_vat"
          | "tz_vat"
          | "ua_vat"
          | "ug_tin"
          | "us_ein"
          | "uy_ruc"
          | "uz_tin"
          | "uz_vat"
          | "ve_rif"
          | "vn_tin"
          | "za_vat"
          | "zm_tin"
          | "zw_tin"
          | UnknownEnumStringValue
        value: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_id>> {
    const url = `/v1/tax_ids`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteTaxIdsId(
    p: {
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_tax_id>> {
    const url = `/v1/tax_ids/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxIdsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_id>> {
    const url = `/v1/tax_ids/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxRates(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      inclusive?: boolean
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_tax_rate[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/tax_rates`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      active: p["active"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      inclusive: p["inclusive"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTaxRates(
    p: {
      requestBody: {
        active?: boolean | undefined
        country?: string | undefined
        description?: string | undefined
        display_name: string
        expand?: string[] | undefined
        inclusive: boolean
        jurisdiction?: string | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        percentage: number
        state?: string | undefined
        tax_type?:
          | (
              | "amusement_tax"
              | "communications_tax"
              | "gst"
              | "hst"
              | "igst"
              | "jct"
              | "lease_tax"
              | "pst"
              | "qst"
              | "retail_delivery_fee"
              | "rst"
              | "sales_tax"
              | "service_tax"
              | "vat"
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_rate>> {
    const url = `/v1/tax_rates`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTaxRatesTaxRate(
    p: {
      expand?: string[]
      taxRate: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_rate>> {
    const url = `/v1/tax_rates/${p["taxRate"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTaxRatesTaxRate(
    p: {
      taxRate: string
      requestBody?: {
        active?: boolean | undefined
        country?: string | undefined
        description?: string | undefined
        display_name?: string | undefined
        expand?: string[] | undefined
        jurisdiction?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        state?: string | undefined
        tax_type?:
          | (
              | "amusement_tax"
              | "communications_tax"
              | "gst"
              | "hst"
              | "igst"
              | "jct"
              | "lease_tax"
              | "pst"
              | "qst"
              | "retail_delivery_fee"
              | "rst"
              | "sales_tax"
              | "service_tax"
              | "vat"
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_tax_rate>> {
    const url = `/v1/tax_rates/${p["taxRate"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTerminalConfigurations(
    p: {
      endingBefore?: string
      expand?: string[]
      isAccountDefault?: boolean
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_terminal_configuration[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/terminal/configurations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      is_account_default: p["isAccountDefault"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalConfigurations(
    p: {
      requestBody?: {
        bbpos_wisepos_e?:
          | {
              splashscreen?: (string | "" | UnknownEnumStringValue) | undefined
            }
          | undefined
        expand?: string[] | undefined
        name?: string | undefined
        offline?:
          | (
              | {
                  enabled: boolean
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        reboot_window?:
          | {
              end_hour: number
              start_hour: number
            }
          | undefined
        stripe_s700?:
          | {
              splashscreen?: (string | "" | UnknownEnumStringValue) | undefined
            }
          | undefined
        tipping?:
          | (
              | {
                  aud?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  cad?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  chf?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  czk?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  dkk?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  eur?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  gbp?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  hkd?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  jpy?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  myr?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  nok?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  nzd?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  pln?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  sek?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  sgd?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  usd?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        verifone_p400?:
          | {
              splashscreen?: (string | "" | UnknownEnumStringValue) | undefined
            }
          | undefined
        wifi?:
          | (
              | {
                  enterprise_eap_peap?:
                    | {
                        ca_certificate_file?: string | undefined
                        password: string
                        ssid: string
                        username: string
                      }
                    | undefined
                  enterprise_eap_tls?:
                    | {
                        ca_certificate_file?: string | undefined
                        client_certificate_file: string
                        private_key_file: string
                        private_key_file_password?: string | undefined
                        ssid: string
                      }
                    | undefined
                  personal_psk?:
                    | {
                        password: string
                        ssid: string
                      }
                    | undefined
                  type:
                    | "enterprise_eap_peap"
                    | "enterprise_eap_tls"
                    | "personal_psk"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_configuration>> {
    const url = `/v1/terminal/configurations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteTerminalConfigurationsConfiguration(
    p: {
      configuration: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_terminal_configuration>> {
    const url = `/v1/terminal/configurations/${p["configuration"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTerminalConfigurationsConfiguration(
    p: {
      configuration: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<t_terminal_configuration | t_deleted_terminal_configuration>
  > {
    const url = `/v1/terminal/configurations/${p["configuration"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalConfigurationsConfiguration(
    p: {
      configuration: string
      requestBody?: {
        bbpos_wisepos_e?:
          | (
              | {
                  splashscreen?:
                    | (string | "" | UnknownEnumStringValue)
                    | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        expand?: string[] | undefined
        name?: string | undefined
        offline?:
          | (
              | {
                  enabled: boolean
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        reboot_window?:
          | (
              | {
                  end_hour: number
                  start_hour: number
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        stripe_s700?:
          | (
              | {
                  splashscreen?:
                    | (string | "" | UnknownEnumStringValue)
                    | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        tipping?:
          | (
              | {
                  aud?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  cad?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  chf?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  czk?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  dkk?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  eur?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  gbp?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  hkd?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  jpy?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  myr?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  nok?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  nzd?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  pln?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  sek?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  sgd?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                  usd?:
                    | {
                        fixed_amounts?: number[] | undefined
                        percentages?: number[] | undefined
                        smart_tip_threshold?: number | undefined
                      }
                    | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        verifone_p400?:
          | (
              | {
                  splashscreen?:
                    | (string | "" | UnknownEnumStringValue)
                    | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        wifi?:
          | (
              | {
                  enterprise_eap_peap?:
                    | {
                        ca_certificate_file?: string | undefined
                        password: string
                        ssid: string
                        username: string
                      }
                    | undefined
                  enterprise_eap_tls?:
                    | {
                        ca_certificate_file?: string | undefined
                        client_certificate_file: string
                        private_key_file: string
                        private_key_file_password?: string | undefined
                        ssid: string
                      }
                    | undefined
                  personal_psk?:
                    | {
                        password: string
                        ssid: string
                      }
                    | undefined
                  type:
                    | "enterprise_eap_peap"
                    | "enterprise_eap_tls"
                    | "personal_psk"
                    | UnknownEnumStringValue
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<t_terminal_configuration | t_deleted_terminal_configuration>
  > {
    const url = `/v1/terminal/configurations/${p["configuration"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalConnectionTokens(
    p: {
      requestBody?: {
        expand?: string[] | undefined
        location?: string | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_connection_token>> {
    const url = `/v1/terminal/connection_tokens`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTerminalLocations(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_terminal_location[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/terminal/locations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalLocations(
    p: {
      requestBody: {
        address: {
          city?: string | undefined
          country: string
          line1?: string | undefined
          line2?: string | undefined
          postal_code?: string | undefined
          state?: string | undefined
        }
        configuration_overrides?: string | undefined
        display_name: string
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_location>> {
    const url = `/v1/terminal/locations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteTerminalLocationsLocation(
    p: {
      location: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_terminal_location>> {
    const url = `/v1/terminal/locations/${p["location"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTerminalLocationsLocation(
    p: {
      expand?: string[]
      location: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_location | t_deleted_terminal_location>> {
    const url = `/v1/terminal/locations/${p["location"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalLocationsLocation(
    p: {
      location: string
      requestBody?: {
        address?:
          | {
              city?: string | undefined
              country?: string | undefined
              line1?: string | undefined
              line2?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
            }
          | undefined
        configuration_overrides?:
          | (string | "" | UnknownEnumStringValue)
          | undefined
        display_name?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_location | t_deleted_terminal_location>> {
    const url = `/v1/terminal/locations/${p["location"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTerminalReaders(
    p: {
      deviceType?:
        | "bbpos_chipper2x"
        | "bbpos_wisepad3"
        | "bbpos_wisepos_e"
        | "mobile_phone_reader"
        | "simulated_wisepos_e"
        | "stripe_m2"
        | "stripe_s700"
        | "verifone_P400"
        | UnknownEnumStringValue
      endingBefore?: string
      expand?: string[]
      limit?: number
      location?: string
      serialNumber?: string
      startingAfter?: string
      status?: "offline" | "online" | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_terminal_reader[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/terminal/readers`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      device_type: p["deviceType"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      location: p["location"],
      serial_number: p["serialNumber"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalReaders(
    p: {
      requestBody: {
        expand?: string[] | undefined
        label?: string | undefined
        location?: string | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        registration_code: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_reader>> {
    const url = `/v1/terminal/readers`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteTerminalReadersReader(
    p: {
      reader: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_terminal_reader>> {
    const url = `/v1/terminal/readers/${p["reader"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTerminalReadersReader(
    p: {
      expand?: string[]
      reader: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_reader | t_deleted_terminal_reader>> {
    const url = `/v1/terminal/readers/${p["reader"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalReadersReader(
    p: {
      reader: string
      requestBody?: {
        expand?: string[] | undefined
        label?: (string | "" | UnknownEnumStringValue) | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_reader | t_deleted_terminal_reader>> {
    const url = `/v1/terminal/readers/${p["reader"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalReadersReaderCancelAction(
    p: {
      reader: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_reader>> {
    const url = `/v1/terminal/readers/${p["reader"]}/cancel_action`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalReadersReaderProcessPaymentIntent(
    p: {
      reader: string
      requestBody: {
        expand?: string[] | undefined
        payment_intent: string
        process_config?:
          | {
              allow_redisplay?:
                | (
                    | "always"
                    | "limited"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              enable_customer_cancellation?: boolean | undefined
              skip_tipping?: boolean | undefined
              tipping?:
                | {
                    amount_eligible?: number | undefined
                  }
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_reader>> {
    const url = `/v1/terminal/readers/${p["reader"]}/process_payment_intent`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalReadersReaderProcessSetupIntent(
    p: {
      reader: string
      requestBody: {
        allow_redisplay:
          | "always"
          | "limited"
          | "unspecified"
          | UnknownEnumStringValue
        expand?: string[] | undefined
        process_config?:
          | {
              enable_customer_cancellation?: boolean | undefined
            }
          | undefined
        setup_intent: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_reader>> {
    const url = `/v1/terminal/readers/${p["reader"]}/process_setup_intent`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalReadersReaderRefundPayment(
    p: {
      reader: string
      requestBody?: {
        amount?: number | undefined
        charge?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        payment_intent?: string | undefined
        refund_application_fee?: boolean | undefined
        refund_payment_config?:
          | {
              enable_customer_cancellation?: boolean | undefined
            }
          | undefined
        reverse_transfer?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_reader>> {
    const url = `/v1/terminal/readers/${p["reader"]}/refund_payment`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTerminalReadersReaderSetReaderDisplay(
    p: {
      reader: string
      requestBody: {
        cart?:
          | {
              currency: string
              line_items: {
                amount: number
                description: string
                quantity: number
              }[]
              tax?: number | undefined
              total: number
            }
          | undefined
        expand?: string[] | undefined
        type: "cart" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_reader>> {
    const url = `/v1/terminal/readers/${p["reader"]}/set_reader_display`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersConfirmationTokens(
    p: {
      requestBody?: {
        expand?: string[] | undefined
        payment_method?: string | undefined
        payment_method_data?:
          | {
              acss_debit?:
                | {
                    account_number: string
                    institution_number: string
                    transit_number: string
                  }
                | undefined
              affirm?: EmptyObject | undefined
              afterpay_clearpay?: EmptyObject | undefined
              alipay?: EmptyObject | undefined
              allow_redisplay?:
                | (
                    | "always"
                    | "limited"
                    | "unspecified"
                    | UnknownEnumStringValue
                  )
                | undefined
              alma?: EmptyObject | undefined
              amazon_pay?: EmptyObject | undefined
              au_becs_debit?:
                | {
                    account_number: string
                    bsb_number: string
                  }
                | undefined
              bacs_debit?:
                | {
                    account_number?: string | undefined
                    sort_code?: string | undefined
                  }
                | undefined
              bancontact?: EmptyObject | undefined
              billie?: EmptyObject | undefined
              billing_details?:
                | {
                    address?:
                      | (
                          | {
                              city?: string | undefined
                              country?: string | undefined
                              line1?: string | undefined
                              line2?: string | undefined
                              postal_code?: string | undefined
                              state?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    email?: (string | "" | UnknownEnumStringValue) | undefined
                    name?: (string | "" | UnknownEnumStringValue) | undefined
                    phone?: (string | "" | UnknownEnumStringValue) | undefined
                  }
                | undefined
              blik?: EmptyObject | undefined
              boleto?:
                | {
                    tax_id: string
                  }
                | undefined
              cashapp?: EmptyObject | undefined
              customer_balance?: EmptyObject | undefined
              eps?:
                | {
                    bank?:
                      | (
                          | "arzte_und_apotheker_bank"
                          | "austrian_anadi_bank_ag"
                          | "bank_austria"
                          | "bankhaus_carl_spangler"
                          | "bankhaus_schelhammer_und_schattera_ag"
                          | "bawag_psk_ag"
                          | "bks_bank_ag"
                          | "brull_kallmus_bank_ag"
                          | "btv_vier_lander_bank"
                          | "capital_bank_grawe_gruppe_ag"
                          | "deutsche_bank_ag"
                          | "dolomitenbank"
                          | "easybank_ag"
                          | "erste_bank_und_sparkassen"
                          | "hypo_alpeadriabank_international_ag"
                          | "hypo_bank_burgenland_aktiengesellschaft"
                          | "hypo_noe_lb_fur_niederosterreich_u_wien"
                          | "hypo_oberosterreich_salzburg_steiermark"
                          | "hypo_tirol_bank_ag"
                          | "hypo_vorarlberg_bank_ag"
                          | "marchfelder_bank"
                          | "oberbank_ag"
                          | "raiffeisen_bankengruppe_osterreich"
                          | "schoellerbank_ag"
                          | "sparda_bank_wien"
                          | "volksbank_gruppe"
                          | "volkskreditbank_ag"
                          | "vr_bank_braunau"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              fpx?:
                | {
                    bank:
                      | "affin_bank"
                      | "agrobank"
                      | "alliance_bank"
                      | "ambank"
                      | "bank_islam"
                      | "bank_muamalat"
                      | "bank_of_china"
                      | "bank_rakyat"
                      | "bsn"
                      | "cimb"
                      | "deutsche_bank"
                      | "hong_leong_bank"
                      | "hsbc"
                      | "kfh"
                      | "maybank2e"
                      | "maybank2u"
                      | "ocbc"
                      | "pb_enterprise"
                      | "public_bank"
                      | "rhb"
                      | "standard_chartered"
                      | "uob"
                      | UnknownEnumStringValue
                  }
                | undefined
              giropay?: EmptyObject | undefined
              grabpay?: EmptyObject | undefined
              ideal?:
                | {
                    bank?:
                      | (
                          | "abn_amro"
                          | "asn_bank"
                          | "bunq"
                          | "handelsbanken"
                          | "ing"
                          | "knab"
                          | "moneyou"
                          | "n26"
                          | "nn"
                          | "rabobank"
                          | "regiobank"
                          | "revolut"
                          | "sns_bank"
                          | "triodos_bank"
                          | "van_lanschot"
                          | "yoursafe"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              interac_present?: EmptyObject | undefined
              kakao_pay?: EmptyObject | undefined
              klarna?:
                | {
                    dob?:
                      | {
                          day: number
                          month: number
                          year: number
                        }
                      | undefined
                  }
                | undefined
              konbini?: EmptyObject | undefined
              kr_card?: EmptyObject | undefined
              link?: EmptyObject | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              mobilepay?: EmptyObject | undefined
              multibanco?: EmptyObject | undefined
              naver_pay?:
                | {
                    funding?:
                      | ("card" | "points" | UnknownEnumStringValue)
                      | undefined
                  }
                | undefined
              nz_bank_account?:
                | {
                    account_holder_name?: string | undefined
                    account_number: string
                    bank_code: string
                    branch_code: string
                    reference?: string | undefined
                    suffix: string
                  }
                | undefined
              oxxo?: EmptyObject | undefined
              p24?:
                | {
                    bank?:
                      | (
                          | "alior_bank"
                          | "bank_millennium"
                          | "bank_nowy_bfg_sa"
                          | "bank_pekao_sa"
                          | "banki_spbdzielcze"
                          | "blik"
                          | "bnp_paribas"
                          | "boz"
                          | "citi_handlowy"
                          | "credit_agricole"
                          | "envelobank"
                          | "etransfer_pocztowy24"
                          | "getin_bank"
                          | "ideabank"
                          | "ing"
                          | "inteligo"
                          | "mbank_mtransfer"
                          | "nest_przelew"
                          | "noble_pay"
                          | "pbac_z_ipko"
                          | "plus_bank"
                          | "santander_przelew24"
                          | "tmobile_usbugi_bankowe"
                          | "toyota_bank"
                          | "velobank"
                          | "volkswagen_bank"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              pay_by_bank?: EmptyObject | undefined
              payco?: EmptyObject | undefined
              paynow?: EmptyObject | undefined
              paypal?: EmptyObject | undefined
              pix?: EmptyObject | undefined
              promptpay?: EmptyObject | undefined
              radar_options?:
                | {
                    session?: string | undefined
                  }
                | undefined
              revolut_pay?: EmptyObject | undefined
              samsung_pay?: EmptyObject | undefined
              satispay?: EmptyObject | undefined
              sepa_debit?:
                | {
                    iban: string
                  }
                | undefined
              sofort?:
                | {
                    country:
                      | "AT"
                      | "BE"
                      | "DE"
                      | "ES"
                      | "IT"
                      | "NL"
                      | UnknownEnumStringValue
                  }
                | undefined
              swish?: EmptyObject | undefined
              twint?: EmptyObject | undefined
              type:
                | "acss_debit"
                | "affirm"
                | "afterpay_clearpay"
                | "alipay"
                | "alma"
                | "amazon_pay"
                | "au_becs_debit"
                | "bacs_debit"
                | "bancontact"
                | "billie"
                | "blik"
                | "boleto"
                | "cashapp"
                | "customer_balance"
                | "eps"
                | "fpx"
                | "giropay"
                | "grabpay"
                | "ideal"
                | "kakao_pay"
                | "klarna"
                | "konbini"
                | "kr_card"
                | "link"
                | "mobilepay"
                | "multibanco"
                | "naver_pay"
                | "nz_bank_account"
                | "oxxo"
                | "p24"
                | "pay_by_bank"
                | "payco"
                | "paynow"
                | "paypal"
                | "pix"
                | "promptpay"
                | "revolut_pay"
                | "samsung_pay"
                | "satispay"
                | "sepa_debit"
                | "sofort"
                | "swish"
                | "twint"
                | "us_bank_account"
                | "wechat_pay"
                | "zip"
                | UnknownEnumStringValue
              us_bank_account?:
                | {
                    account_holder_type?:
                      | ("company" | "individual" | UnknownEnumStringValue)
                      | undefined
                    account_number?: string | undefined
                    account_type?:
                      | ("checking" | "savings" | UnknownEnumStringValue)
                      | undefined
                    financial_connections_account?: string | undefined
                    routing_number?: string | undefined
                  }
                | undefined
              wechat_pay?: EmptyObject | undefined
              zip?: EmptyObject | undefined
            }
          | undefined
        return_url?: string | undefined
        setup_future_usage?:
          | ("off_session" | "on_session" | UnknownEnumStringValue)
          | undefined
        shipping?:
          | {
              address: {
                city?: string | undefined
                country?: string | undefined
                line1?: string | undefined
                line2?: string | undefined
                postal_code?: string | undefined
                state?: string | undefined
              }
              name: string
              phone?: (string | "" | UnknownEnumStringValue) | undefined
            }
          | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_confirmation_token>> {
    const url = `/v1/test_helpers/confirmation_tokens`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersCustomersCustomerFundCashBalance(
    p: {
      customer: string
      requestBody: {
        amount: number
        currency: string
        expand?: string[] | undefined
        reference?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_customer_cash_balance_transaction>> {
    const url = `/v1/test_helpers/customers/${p["customer"]}/fund_cash_balance`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingAuthorizations(
    p: {
      requestBody: {
        amount?: number | undefined
        amount_details?:
          | {
              atm_fee?: number | undefined
              cashback_amount?: number | undefined
            }
          | undefined
        authorization_method?:
          | (
              | "chip"
              | "contactless"
              | "keyed_in"
              | "online"
              | "swipe"
              | UnknownEnumStringValue
            )
          | undefined
        card: string
        currency?: string | undefined
        expand?: string[] | undefined
        fleet?:
          | {
              cardholder_prompt_data?:
                | {
                    driver_id?: string | undefined
                    odometer?: number | undefined
                    unspecified_id?: string | undefined
                    user_id?: string | undefined
                    vehicle_number?: string | undefined
                  }
                | undefined
              purchase_type?:
                | (
                    | "fuel_and_non_fuel_purchase"
                    | "fuel_purchase"
                    | "non_fuel_purchase"
                    | UnknownEnumStringValue
                  )
                | undefined
              reported_breakdown?:
                | {
                    fuel?:
                      | {
                          gross_amount_decimal?: string | undefined
                        }
                      | undefined
                    non_fuel?:
                      | {
                          gross_amount_decimal?: string | undefined
                        }
                      | undefined
                    tax?:
                      | {
                          local_amount_decimal?: string | undefined
                          national_amount_decimal?: string | undefined
                        }
                      | undefined
                  }
                | undefined
              service_type?:
                | (
                    | "full_service"
                    | "non_fuel_transaction"
                    | "self_service"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        fuel?:
          | {
              industry_product_code?: string | undefined
              quantity_decimal?: string | undefined
              type?:
                | (
                    | "diesel"
                    | "other"
                    | "unleaded_plus"
                    | "unleaded_regular"
                    | "unleaded_super"
                    | UnknownEnumStringValue
                  )
                | undefined
              unit?:
                | (
                    | "charging_minute"
                    | "imperial_gallon"
                    | "kilogram"
                    | "kilowatt_hour"
                    | "liter"
                    | "other"
                    | "pound"
                    | "us_gallon"
                    | UnknownEnumStringValue
                  )
                | undefined
              unit_cost_decimal?: string | undefined
            }
          | undefined
        is_amount_controllable?: boolean | undefined
        merchant_amount?: number | undefined
        merchant_currency?: string | undefined
        merchant_data?:
          | {
              category?:
                | (
                    | "ac_refrigeration_repair"
                    | "accounting_bookkeeping_services"
                    | "advertising_services"
                    | "agricultural_cooperative"
                    | "airlines_air_carriers"
                    | "airports_flying_fields"
                    | "ambulance_services"
                    | "amusement_parks_carnivals"
                    | "antique_reproductions"
                    | "antique_shops"
                    | "aquariums"
                    | "architectural_surveying_services"
                    | "art_dealers_and_galleries"
                    | "artists_supply_and_craft_shops"
                    | "auto_and_home_supply_stores"
                    | "auto_body_repair_shops"
                    | "auto_paint_shops"
                    | "auto_service_shops"
                    | "automated_cash_disburse"
                    | "automated_fuel_dispensers"
                    | "automobile_associations"
                    | "automotive_parts_and_accessories_stores"
                    | "automotive_tire_stores"
                    | "bail_and_bond_payments"
                    | "bakeries"
                    | "bands_orchestras"
                    | "barber_and_beauty_shops"
                    | "betting_casino_gambling"
                    | "bicycle_shops"
                    | "billiard_pool_establishments"
                    | "boat_dealers"
                    | "boat_rentals_and_leases"
                    | "book_stores"
                    | "books_periodicals_and_newspapers"
                    | "bowling_alleys"
                    | "bus_lines"
                    | "business_secretarial_schools"
                    | "buying_shopping_services"
                    | "cable_satellite_and_other_pay_television_and_radio"
                    | "camera_and_photographic_supply_stores"
                    | "candy_nut_and_confectionery_stores"
                    | "car_and_truck_dealers_new_used"
                    | "car_and_truck_dealers_used_only"
                    | "car_rental_agencies"
                    | "car_washes"
                    | "carpentry_services"
                    | "carpet_upholstery_cleaning"
                    | "caterers"
                    | "charitable_and_social_service_organizations_fundraising"
                    | "chemicals_and_allied_products"
                    | "child_care_services"
                    | "childrens_and_infants_wear_stores"
                    | "chiropodists_podiatrists"
                    | "chiropractors"
                    | "cigar_stores_and_stands"
                    | "civic_social_fraternal_associations"
                    | "cleaning_and_maintenance"
                    | "clothing_rental"
                    | "colleges_universities"
                    | "commercial_equipment"
                    | "commercial_footwear"
                    | "commercial_photography_art_and_graphics"
                    | "commuter_transport_and_ferries"
                    | "computer_network_services"
                    | "computer_programming"
                    | "computer_repair"
                    | "computer_software_stores"
                    | "computers_peripherals_and_software"
                    | "concrete_work_services"
                    | "construction_materials"
                    | "consulting_public_relations"
                    | "correspondence_schools"
                    | "cosmetic_stores"
                    | "counseling_services"
                    | "country_clubs"
                    | "courier_services"
                    | "court_costs"
                    | "credit_reporting_agencies"
                    | "cruise_lines"
                    | "dairy_products_stores"
                    | "dance_hall_studios_schools"
                    | "dating_escort_services"
                    | "dentists_orthodontists"
                    | "department_stores"
                    | "detective_agencies"
                    | "digital_goods_applications"
                    | "digital_goods_games"
                    | "digital_goods_large_volume"
                    | "digital_goods_media"
                    | "direct_marketing_catalog_merchant"
                    | "direct_marketing_combination_catalog_and_retail_merchant"
                    | "direct_marketing_inbound_telemarketing"
                    | "direct_marketing_insurance_services"
                    | "direct_marketing_other"
                    | "direct_marketing_outbound_telemarketing"
                    | "direct_marketing_subscription"
                    | "direct_marketing_travel"
                    | "discount_stores"
                    | "doctors"
                    | "door_to_door_sales"
                    | "drapery_window_covering_and_upholstery_stores"
                    | "drinking_places"
                    | "drug_stores_and_pharmacies"
                    | "drugs_drug_proprietaries_and_druggist_sundries"
                    | "dry_cleaners"
                    | "durable_goods"
                    | "duty_free_stores"
                    | "eating_places_restaurants"
                    | "educational_services"
                    | "electric_razor_stores"
                    | "electric_vehicle_charging"
                    | "electrical_parts_and_equipment"
                    | "electrical_services"
                    | "electronics_repair_shops"
                    | "electronics_stores"
                    | "elementary_secondary_schools"
                    | "emergency_services_gcas_visa_use_only"
                    | "employment_temp_agencies"
                    | "equipment_rental"
                    | "exterminating_services"
                    | "family_clothing_stores"
                    | "fast_food_restaurants"
                    | "financial_institutions"
                    | "fines_government_administrative_entities"
                    | "fireplace_fireplace_screens_and_accessories_stores"
                    | "floor_covering_stores"
                    | "florists"
                    | "florists_supplies_nursery_stock_and_flowers"
                    | "freezer_and_locker_meat_provisioners"
                    | "fuel_dealers_non_automotive"
                    | "funeral_services_crematories"
                    | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    | "furniture_repair_refinishing"
                    | "furriers_and_fur_shops"
                    | "general_services"
                    | "gift_card_novelty_and_souvenir_shops"
                    | "glass_paint_and_wallpaper_stores"
                    | "glassware_crystal_stores"
                    | "golf_courses_public"
                    | "government_licensed_horse_dog_racing_us_region_only"
                    | "government_licensed_online_casions_online_gambling_us_region_only"
                    | "government_owned_lotteries_non_us_region"
                    | "government_owned_lotteries_us_region_only"
                    | "government_services"
                    | "grocery_stores_supermarkets"
                    | "hardware_equipment_and_supplies"
                    | "hardware_stores"
                    | "health_and_beauty_spas"
                    | "hearing_aids_sales_and_supplies"
                    | "heating_plumbing_a_c"
                    | "hobby_toy_and_game_shops"
                    | "home_supply_warehouse_stores"
                    | "hospitals"
                    | "hotels_motels_and_resorts"
                    | "household_appliance_stores"
                    | "industrial_supplies"
                    | "information_retrieval_services"
                    | "insurance_default"
                    | "insurance_underwriting_premiums"
                    | "intra_company_purchases"
                    | "jewelry_stores_watches_clocks_and_silverware_stores"
                    | "landscaping_services"
                    | "laundries"
                    | "laundry_cleaning_services"
                    | "legal_services_attorneys"
                    | "luggage_and_leather_goods_stores"
                    | "lumber_building_materials_stores"
                    | "manual_cash_disburse"
                    | "marinas_service_and_supplies"
                    | "marketplaces"
                    | "masonry_stonework_and_plaster"
                    | "massage_parlors"
                    | "medical_and_dental_labs"
                    | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    | "medical_services"
                    | "membership_organizations"
                    | "mens_and_boys_clothing_and_accessories_stores"
                    | "mens_womens_clothing_stores"
                    | "metal_service_centers"
                    | "miscellaneous_apparel_and_accessory_shops"
                    | "miscellaneous_auto_dealers"
                    | "miscellaneous_business_services"
                    | "miscellaneous_food_stores"
                    | "miscellaneous_general_merchandise"
                    | "miscellaneous_general_services"
                    | "miscellaneous_home_furnishing_specialty_stores"
                    | "miscellaneous_publishing_and_printing"
                    | "miscellaneous_recreation_services"
                    | "miscellaneous_repair_shops"
                    | "miscellaneous_specialty_retail"
                    | "mobile_home_dealers"
                    | "motion_picture_theaters"
                    | "motor_freight_carriers_and_trucking"
                    | "motor_homes_dealers"
                    | "motor_vehicle_supplies_and_new_parts"
                    | "motorcycle_shops_and_dealers"
                    | "motorcycle_shops_dealers"
                    | "music_stores_musical_instruments_pianos_and_sheet_music"
                    | "news_dealers_and_newsstands"
                    | "non_fi_money_orders"
                    | "non_fi_stored_value_card_purchase_load"
                    | "nondurable_goods"
                    | "nurseries_lawn_and_garden_supply_stores"
                    | "nursing_personal_care"
                    | "office_and_commercial_furniture"
                    | "opticians_eyeglasses"
                    | "optometrists_ophthalmologist"
                    | "orthopedic_goods_prosthetic_devices"
                    | "osteopaths"
                    | "package_stores_beer_wine_and_liquor"
                    | "paints_varnishes_and_supplies"
                    | "parking_lots_garages"
                    | "passenger_railways"
                    | "pawn_shops"
                    | "pet_shops_pet_food_and_supplies"
                    | "petroleum_and_petroleum_products"
                    | "photo_developing"
                    | "photographic_photocopy_microfilm_equipment_and_supplies"
                    | "photographic_studios"
                    | "picture_video_production"
                    | "piece_goods_notions_and_other_dry_goods"
                    | "plumbing_heating_equipment_and_supplies"
                    | "political_organizations"
                    | "postal_services_government_only"
                    | "precious_stones_and_metals_watches_and_jewelry"
                    | "professional_services"
                    | "public_warehousing_and_storage"
                    | "quick_copy_repro_and_blueprint"
                    | "railroads"
                    | "real_estate_agents_and_managers_rentals"
                    | "record_stores"
                    | "recreational_vehicle_rentals"
                    | "religious_goods_stores"
                    | "religious_organizations"
                    | "roofing_siding_sheet_metal"
                    | "secretarial_support_services"
                    | "security_brokers_dealers"
                    | "service_stations"
                    | "sewing_needlework_fabric_and_piece_goods_stores"
                    | "shoe_repair_hat_cleaning"
                    | "shoe_stores"
                    | "small_appliance_repair"
                    | "snowmobile_dealers"
                    | "special_trade_services"
                    | "specialty_cleaning"
                    | "sporting_goods_stores"
                    | "sporting_recreation_camps"
                    | "sports_and_riding_apparel_stores"
                    | "sports_clubs_fields"
                    | "stamp_and_coin_stores"
                    | "stationary_office_supplies_printing_and_writing_paper"
                    | "stationery_stores_office_and_school_supply_stores"
                    | "swimming_pools_sales"
                    | "t_ui_travel_germany"
                    | "tailors_alterations"
                    | "tax_payments_government_agencies"
                    | "tax_preparation_services"
                    | "taxicabs_limousines"
                    | "telecommunication_equipment_and_telephone_sales"
                    | "telecommunication_services"
                    | "telegraph_services"
                    | "tent_and_awning_shops"
                    | "testing_laboratories"
                    | "theatrical_ticket_agencies"
                    | "timeshares"
                    | "tire_retreading_and_repair"
                    | "tolls_bridge_fees"
                    | "tourist_attractions_and_exhibits"
                    | "towing_services"
                    | "trailer_parks_campgrounds"
                    | "transportation_services"
                    | "travel_agencies_tour_operators"
                    | "truck_stop_iteration"
                    | "truck_utility_trailer_rentals"
                    | "typesetting_plate_making_and_related_services"
                    | "typewriter_stores"
                    | "u_s_federal_government_agencies_or_departments"
                    | "uniforms_commercial_clothing"
                    | "used_merchandise_and_secondhand_stores"
                    | "utilities"
                    | "variety_stores"
                    | "veterinary_services"
                    | "video_amusement_game_supplies"
                    | "video_game_arcades"
                    | "video_tape_rental_stores"
                    | "vocational_trade_schools"
                    | "watch_jewelry_repair"
                    | "welding_repair"
                    | "wholesale_clubs"
                    | "wig_and_toupee_stores"
                    | "wires_money_orders"
                    | "womens_accessory_and_specialty_shops"
                    | "womens_ready_to_wear_stores"
                    | "wrecking_and_salvage_yards"
                    | UnknownEnumStringValue
                  )
                | undefined
              city?: string | undefined
              country?: string | undefined
              name?: string | undefined
              network_id?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
              terminal_id?: string | undefined
              url?: string | undefined
            }
          | undefined
        network_data?:
          | {
              acquiring_institution_id?: string | undefined
            }
          | undefined
        verification_data?:
          | {
              address_line1_check?:
                | (
                    | "match"
                    | "mismatch"
                    | "not_provided"
                    | UnknownEnumStringValue
                  )
                | undefined
              address_postal_code_check?:
                | (
                    | "match"
                    | "mismatch"
                    | "not_provided"
                    | UnknownEnumStringValue
                  )
                | undefined
              authentication_exemption?:
                | {
                    claimed_by: "acquirer" | "issuer" | UnknownEnumStringValue
                    type:
                      | "low_value_transaction"
                      | "transaction_risk_analysis"
                      | "unknown"
                      | UnknownEnumStringValue
                  }
                | undefined
              cvc_check?:
                | (
                    | "match"
                    | "mismatch"
                    | "not_provided"
                    | UnknownEnumStringValue
                  )
                | undefined
              expiry_check?:
                | (
                    | "match"
                    | "mismatch"
                    | "not_provided"
                    | UnknownEnumStringValue
                  )
                | undefined
              three_d_secure?:
                | {
                    result:
                      | "attempt_acknowledged"
                      | "authenticated"
                      | "failed"
                      | "required"
                      | UnknownEnumStringValue
                  }
                | undefined
            }
          | undefined
        wallet?:
          | (
              | "apple_pay"
              | "google_pay"
              | "samsung_pay"
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_authorization>> {
    const url = `/v1/test_helpers/issuing/authorizations`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationCapture(
    p: {
      authorization: string
      requestBody?: {
        capture_amount?: number | undefined
        close_authorization?: boolean | undefined
        expand?: string[] | undefined
        purchase_details?:
          | {
              fleet?:
                | {
                    cardholder_prompt_data?:
                      | {
                          driver_id?: string | undefined
                          odometer?: number | undefined
                          unspecified_id?: string | undefined
                          user_id?: string | undefined
                          vehicle_number?: string | undefined
                        }
                      | undefined
                    purchase_type?:
                      | (
                          | "fuel_and_non_fuel_purchase"
                          | "fuel_purchase"
                          | "non_fuel_purchase"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    reported_breakdown?:
                      | {
                          fuel?:
                            | {
                                gross_amount_decimal?: string | undefined
                              }
                            | undefined
                          non_fuel?:
                            | {
                                gross_amount_decimal?: string | undefined
                              }
                            | undefined
                          tax?:
                            | {
                                local_amount_decimal?: string | undefined
                                national_amount_decimal?: string | undefined
                              }
                            | undefined
                        }
                      | undefined
                    service_type?:
                      | (
                          | "full_service"
                          | "non_fuel_transaction"
                          | "self_service"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              flight?:
                | {
                    departure_at?: number | undefined
                    passenger_name?: string | undefined
                    refundable?: boolean | undefined
                    segments?:
                      | {
                          arrival_airport_code?: string | undefined
                          carrier?: string | undefined
                          departure_airport_code?: string | undefined
                          flight_number?: string | undefined
                          service_class?: string | undefined
                          stopover_allowed?: boolean | undefined
                        }[]
                      | undefined
                    travel_agency?: string | undefined
                  }
                | undefined
              fuel?:
                | {
                    industry_product_code?: string | undefined
                    quantity_decimal?: string | undefined
                    type?:
                      | (
                          | "diesel"
                          | "other"
                          | "unleaded_plus"
                          | "unleaded_regular"
                          | "unleaded_super"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit?:
                      | (
                          | "charging_minute"
                          | "imperial_gallon"
                          | "kilogram"
                          | "kilowatt_hour"
                          | "liter"
                          | "other"
                          | "pound"
                          | "us_gallon"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_cost_decimal?: string | undefined
                  }
                | undefined
              lodging?:
                | {
                    check_in_at?: number | undefined
                    nights?: number | undefined
                  }
                | undefined
              receipt?:
                | {
                    description?: string | undefined
                    quantity?: string | undefined
                    total?: number | undefined
                    unit_cost?: number | undefined
                  }[]
                | undefined
              reference?: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_authorization>> {
    const url = `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/capture`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationExpire(
    p: {
      authorization: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_authorization>> {
    const url = `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/expire`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmount(
    p: {
      authorization: string
      requestBody: {
        expand?: string[] | undefined
        final_amount: number
        fleet?:
          | {
              cardholder_prompt_data?:
                | {
                    driver_id?: string | undefined
                    odometer?: number | undefined
                    unspecified_id?: string | undefined
                    user_id?: string | undefined
                    vehicle_number?: string | undefined
                  }
                | undefined
              purchase_type?:
                | (
                    | "fuel_and_non_fuel_purchase"
                    | "fuel_purchase"
                    | "non_fuel_purchase"
                    | UnknownEnumStringValue
                  )
                | undefined
              reported_breakdown?:
                | {
                    fuel?:
                      | {
                          gross_amount_decimal?: string | undefined
                        }
                      | undefined
                    non_fuel?:
                      | {
                          gross_amount_decimal?: string | undefined
                        }
                      | undefined
                    tax?:
                      | {
                          local_amount_decimal?: string | undefined
                          national_amount_decimal?: string | undefined
                        }
                      | undefined
                  }
                | undefined
              service_type?:
                | (
                    | "full_service"
                    | "non_fuel_transaction"
                    | "self_service"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        fuel?:
          | {
              industry_product_code?: string | undefined
              quantity_decimal?: string | undefined
              type?:
                | (
                    | "diesel"
                    | "other"
                    | "unleaded_plus"
                    | "unleaded_regular"
                    | "unleaded_super"
                    | UnknownEnumStringValue
                  )
                | undefined
              unit?:
                | (
                    | "charging_minute"
                    | "imperial_gallon"
                    | "kilogram"
                    | "kilowatt_hour"
                    | "liter"
                    | "other"
                    | "pound"
                    | "us_gallon"
                    | UnknownEnumStringValue
                  )
                | undefined
              unit_cost_decimal?: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_authorization>> {
    const url = `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/finalize_amount`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond(
    p: {
      authorization: string
      requestBody: {
        confirmed: boolean
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_authorization>> {
    const url = `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/fraud_challenges/respond`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationIncrement(
    p: {
      authorization: string
      requestBody: {
        expand?: string[] | undefined
        increment_amount: number
        is_amount_controllable?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_authorization>> {
    const url = `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/increment`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingAuthorizationsAuthorizationReverse(
    p: {
      authorization: string
      requestBody?: {
        expand?: string[] | undefined
        reverse_amount?: number | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_authorization>> {
    const url = `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/reverse`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingCardsCardShippingDeliver(
    p: {
      card: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_card>> {
    const url = `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/deliver`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingCardsCardShippingFail(
    p: {
      card: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_card>> {
    const url = `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/fail`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingCardsCardShippingReturn(
    p: {
      card: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_card>> {
    const url = `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/return`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingCardsCardShippingShip(
    p: {
      card: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_card>> {
    const url = `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/ship`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingCardsCardShippingSubmit(
    p: {
      card: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_card>> {
    const url = `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/submit`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate(
    p: {
      personalizationDesign: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_personalization_design>> {
    const url = `/v1/test_helpers/issuing/personalization_designs/${p["personalizationDesign"]}/activate`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate(
    p: {
      personalizationDesign: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_personalization_design>> {
    const url = `/v1/test_helpers/issuing/personalization_designs/${p["personalizationDesign"]}/deactivate`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject(
    p: {
      personalizationDesign: string
      requestBody: {
        expand?: string[] | undefined
        rejection_reasons: {
          card_logo?:
            | (
                | "geographic_location"
                | "inappropriate"
                | "network_name"
                | "non_binary_image"
                | "non_fiat_currency"
                | "other"
                | "other_entity"
                | "promotional_material"
                | UnknownEnumStringValue
              )[]
            | undefined
          carrier_text?:
            | (
                | "geographic_location"
                | "inappropriate"
                | "network_name"
                | "non_fiat_currency"
                | "other"
                | "other_entity"
                | "promotional_material"
                | UnknownEnumStringValue
              )[]
            | undefined
        }
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_personalization_design>> {
    const url = `/v1/test_helpers/issuing/personalization_designs/${p["personalizationDesign"]}/reject`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingSettlements(
    p: {
      requestBody: {
        bin: string
        clearing_date: number
        currency: string
        expand?: string[] | undefined
        interchange_fees_amount?: number | undefined
        net_total_amount: number
        network?: ("maestro" | "visa" | UnknownEnumStringValue) | undefined
        network_settlement_identifier?: string | undefined
        transaction_amount?: number | undefined
        transaction_count?: number | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_settlement>> {
    const url = `/v1/test_helpers/issuing/settlements`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingSettlementsSettlementComplete(
    p: {
      settlement: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_settlement>> {
    const url = `/v1/test_helpers/issuing/settlements/${p["settlement"]}/complete`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingTransactionsCreateForceCapture(
    p: {
      requestBody: {
        amount: number
        card: string
        currency?: string | undefined
        expand?: string[] | undefined
        merchant_data?:
          | {
              category?:
                | (
                    | "ac_refrigeration_repair"
                    | "accounting_bookkeeping_services"
                    | "advertising_services"
                    | "agricultural_cooperative"
                    | "airlines_air_carriers"
                    | "airports_flying_fields"
                    | "ambulance_services"
                    | "amusement_parks_carnivals"
                    | "antique_reproductions"
                    | "antique_shops"
                    | "aquariums"
                    | "architectural_surveying_services"
                    | "art_dealers_and_galleries"
                    | "artists_supply_and_craft_shops"
                    | "auto_and_home_supply_stores"
                    | "auto_body_repair_shops"
                    | "auto_paint_shops"
                    | "auto_service_shops"
                    | "automated_cash_disburse"
                    | "automated_fuel_dispensers"
                    | "automobile_associations"
                    | "automotive_parts_and_accessories_stores"
                    | "automotive_tire_stores"
                    | "bail_and_bond_payments"
                    | "bakeries"
                    | "bands_orchestras"
                    | "barber_and_beauty_shops"
                    | "betting_casino_gambling"
                    | "bicycle_shops"
                    | "billiard_pool_establishments"
                    | "boat_dealers"
                    | "boat_rentals_and_leases"
                    | "book_stores"
                    | "books_periodicals_and_newspapers"
                    | "bowling_alleys"
                    | "bus_lines"
                    | "business_secretarial_schools"
                    | "buying_shopping_services"
                    | "cable_satellite_and_other_pay_television_and_radio"
                    | "camera_and_photographic_supply_stores"
                    | "candy_nut_and_confectionery_stores"
                    | "car_and_truck_dealers_new_used"
                    | "car_and_truck_dealers_used_only"
                    | "car_rental_agencies"
                    | "car_washes"
                    | "carpentry_services"
                    | "carpet_upholstery_cleaning"
                    | "caterers"
                    | "charitable_and_social_service_organizations_fundraising"
                    | "chemicals_and_allied_products"
                    | "child_care_services"
                    | "childrens_and_infants_wear_stores"
                    | "chiropodists_podiatrists"
                    | "chiropractors"
                    | "cigar_stores_and_stands"
                    | "civic_social_fraternal_associations"
                    | "cleaning_and_maintenance"
                    | "clothing_rental"
                    | "colleges_universities"
                    | "commercial_equipment"
                    | "commercial_footwear"
                    | "commercial_photography_art_and_graphics"
                    | "commuter_transport_and_ferries"
                    | "computer_network_services"
                    | "computer_programming"
                    | "computer_repair"
                    | "computer_software_stores"
                    | "computers_peripherals_and_software"
                    | "concrete_work_services"
                    | "construction_materials"
                    | "consulting_public_relations"
                    | "correspondence_schools"
                    | "cosmetic_stores"
                    | "counseling_services"
                    | "country_clubs"
                    | "courier_services"
                    | "court_costs"
                    | "credit_reporting_agencies"
                    | "cruise_lines"
                    | "dairy_products_stores"
                    | "dance_hall_studios_schools"
                    | "dating_escort_services"
                    | "dentists_orthodontists"
                    | "department_stores"
                    | "detective_agencies"
                    | "digital_goods_applications"
                    | "digital_goods_games"
                    | "digital_goods_large_volume"
                    | "digital_goods_media"
                    | "direct_marketing_catalog_merchant"
                    | "direct_marketing_combination_catalog_and_retail_merchant"
                    | "direct_marketing_inbound_telemarketing"
                    | "direct_marketing_insurance_services"
                    | "direct_marketing_other"
                    | "direct_marketing_outbound_telemarketing"
                    | "direct_marketing_subscription"
                    | "direct_marketing_travel"
                    | "discount_stores"
                    | "doctors"
                    | "door_to_door_sales"
                    | "drapery_window_covering_and_upholstery_stores"
                    | "drinking_places"
                    | "drug_stores_and_pharmacies"
                    | "drugs_drug_proprietaries_and_druggist_sundries"
                    | "dry_cleaners"
                    | "durable_goods"
                    | "duty_free_stores"
                    | "eating_places_restaurants"
                    | "educational_services"
                    | "electric_razor_stores"
                    | "electric_vehicle_charging"
                    | "electrical_parts_and_equipment"
                    | "electrical_services"
                    | "electronics_repair_shops"
                    | "electronics_stores"
                    | "elementary_secondary_schools"
                    | "emergency_services_gcas_visa_use_only"
                    | "employment_temp_agencies"
                    | "equipment_rental"
                    | "exterminating_services"
                    | "family_clothing_stores"
                    | "fast_food_restaurants"
                    | "financial_institutions"
                    | "fines_government_administrative_entities"
                    | "fireplace_fireplace_screens_and_accessories_stores"
                    | "floor_covering_stores"
                    | "florists"
                    | "florists_supplies_nursery_stock_and_flowers"
                    | "freezer_and_locker_meat_provisioners"
                    | "fuel_dealers_non_automotive"
                    | "funeral_services_crematories"
                    | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    | "furniture_repair_refinishing"
                    | "furriers_and_fur_shops"
                    | "general_services"
                    | "gift_card_novelty_and_souvenir_shops"
                    | "glass_paint_and_wallpaper_stores"
                    | "glassware_crystal_stores"
                    | "golf_courses_public"
                    | "government_licensed_horse_dog_racing_us_region_only"
                    | "government_licensed_online_casions_online_gambling_us_region_only"
                    | "government_owned_lotteries_non_us_region"
                    | "government_owned_lotteries_us_region_only"
                    | "government_services"
                    | "grocery_stores_supermarkets"
                    | "hardware_equipment_and_supplies"
                    | "hardware_stores"
                    | "health_and_beauty_spas"
                    | "hearing_aids_sales_and_supplies"
                    | "heating_plumbing_a_c"
                    | "hobby_toy_and_game_shops"
                    | "home_supply_warehouse_stores"
                    | "hospitals"
                    | "hotels_motels_and_resorts"
                    | "household_appliance_stores"
                    | "industrial_supplies"
                    | "information_retrieval_services"
                    | "insurance_default"
                    | "insurance_underwriting_premiums"
                    | "intra_company_purchases"
                    | "jewelry_stores_watches_clocks_and_silverware_stores"
                    | "landscaping_services"
                    | "laundries"
                    | "laundry_cleaning_services"
                    | "legal_services_attorneys"
                    | "luggage_and_leather_goods_stores"
                    | "lumber_building_materials_stores"
                    | "manual_cash_disburse"
                    | "marinas_service_and_supplies"
                    | "marketplaces"
                    | "masonry_stonework_and_plaster"
                    | "massage_parlors"
                    | "medical_and_dental_labs"
                    | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    | "medical_services"
                    | "membership_organizations"
                    | "mens_and_boys_clothing_and_accessories_stores"
                    | "mens_womens_clothing_stores"
                    | "metal_service_centers"
                    | "miscellaneous_apparel_and_accessory_shops"
                    | "miscellaneous_auto_dealers"
                    | "miscellaneous_business_services"
                    | "miscellaneous_food_stores"
                    | "miscellaneous_general_merchandise"
                    | "miscellaneous_general_services"
                    | "miscellaneous_home_furnishing_specialty_stores"
                    | "miscellaneous_publishing_and_printing"
                    | "miscellaneous_recreation_services"
                    | "miscellaneous_repair_shops"
                    | "miscellaneous_specialty_retail"
                    | "mobile_home_dealers"
                    | "motion_picture_theaters"
                    | "motor_freight_carriers_and_trucking"
                    | "motor_homes_dealers"
                    | "motor_vehicle_supplies_and_new_parts"
                    | "motorcycle_shops_and_dealers"
                    | "motorcycle_shops_dealers"
                    | "music_stores_musical_instruments_pianos_and_sheet_music"
                    | "news_dealers_and_newsstands"
                    | "non_fi_money_orders"
                    | "non_fi_stored_value_card_purchase_load"
                    | "nondurable_goods"
                    | "nurseries_lawn_and_garden_supply_stores"
                    | "nursing_personal_care"
                    | "office_and_commercial_furniture"
                    | "opticians_eyeglasses"
                    | "optometrists_ophthalmologist"
                    | "orthopedic_goods_prosthetic_devices"
                    | "osteopaths"
                    | "package_stores_beer_wine_and_liquor"
                    | "paints_varnishes_and_supplies"
                    | "parking_lots_garages"
                    | "passenger_railways"
                    | "pawn_shops"
                    | "pet_shops_pet_food_and_supplies"
                    | "petroleum_and_petroleum_products"
                    | "photo_developing"
                    | "photographic_photocopy_microfilm_equipment_and_supplies"
                    | "photographic_studios"
                    | "picture_video_production"
                    | "piece_goods_notions_and_other_dry_goods"
                    | "plumbing_heating_equipment_and_supplies"
                    | "political_organizations"
                    | "postal_services_government_only"
                    | "precious_stones_and_metals_watches_and_jewelry"
                    | "professional_services"
                    | "public_warehousing_and_storage"
                    | "quick_copy_repro_and_blueprint"
                    | "railroads"
                    | "real_estate_agents_and_managers_rentals"
                    | "record_stores"
                    | "recreational_vehicle_rentals"
                    | "religious_goods_stores"
                    | "religious_organizations"
                    | "roofing_siding_sheet_metal"
                    | "secretarial_support_services"
                    | "security_brokers_dealers"
                    | "service_stations"
                    | "sewing_needlework_fabric_and_piece_goods_stores"
                    | "shoe_repair_hat_cleaning"
                    | "shoe_stores"
                    | "small_appliance_repair"
                    | "snowmobile_dealers"
                    | "special_trade_services"
                    | "specialty_cleaning"
                    | "sporting_goods_stores"
                    | "sporting_recreation_camps"
                    | "sports_and_riding_apparel_stores"
                    | "sports_clubs_fields"
                    | "stamp_and_coin_stores"
                    | "stationary_office_supplies_printing_and_writing_paper"
                    | "stationery_stores_office_and_school_supply_stores"
                    | "swimming_pools_sales"
                    | "t_ui_travel_germany"
                    | "tailors_alterations"
                    | "tax_payments_government_agencies"
                    | "tax_preparation_services"
                    | "taxicabs_limousines"
                    | "telecommunication_equipment_and_telephone_sales"
                    | "telecommunication_services"
                    | "telegraph_services"
                    | "tent_and_awning_shops"
                    | "testing_laboratories"
                    | "theatrical_ticket_agencies"
                    | "timeshares"
                    | "tire_retreading_and_repair"
                    | "tolls_bridge_fees"
                    | "tourist_attractions_and_exhibits"
                    | "towing_services"
                    | "trailer_parks_campgrounds"
                    | "transportation_services"
                    | "travel_agencies_tour_operators"
                    | "truck_stop_iteration"
                    | "truck_utility_trailer_rentals"
                    | "typesetting_plate_making_and_related_services"
                    | "typewriter_stores"
                    | "u_s_federal_government_agencies_or_departments"
                    | "uniforms_commercial_clothing"
                    | "used_merchandise_and_secondhand_stores"
                    | "utilities"
                    | "variety_stores"
                    | "veterinary_services"
                    | "video_amusement_game_supplies"
                    | "video_game_arcades"
                    | "video_tape_rental_stores"
                    | "vocational_trade_schools"
                    | "watch_jewelry_repair"
                    | "welding_repair"
                    | "wholesale_clubs"
                    | "wig_and_toupee_stores"
                    | "wires_money_orders"
                    | "womens_accessory_and_specialty_shops"
                    | "womens_ready_to_wear_stores"
                    | "wrecking_and_salvage_yards"
                    | UnknownEnumStringValue
                  )
                | undefined
              city?: string | undefined
              country?: string | undefined
              name?: string | undefined
              network_id?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
              terminal_id?: string | undefined
              url?: string | undefined
            }
          | undefined
        purchase_details?:
          | {
              fleet?:
                | {
                    cardholder_prompt_data?:
                      | {
                          driver_id?: string | undefined
                          odometer?: number | undefined
                          unspecified_id?: string | undefined
                          user_id?: string | undefined
                          vehicle_number?: string | undefined
                        }
                      | undefined
                    purchase_type?:
                      | (
                          | "fuel_and_non_fuel_purchase"
                          | "fuel_purchase"
                          | "non_fuel_purchase"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    reported_breakdown?:
                      | {
                          fuel?:
                            | {
                                gross_amount_decimal?: string | undefined
                              }
                            | undefined
                          non_fuel?:
                            | {
                                gross_amount_decimal?: string | undefined
                              }
                            | undefined
                          tax?:
                            | {
                                local_amount_decimal?: string | undefined
                                national_amount_decimal?: string | undefined
                              }
                            | undefined
                        }
                      | undefined
                    service_type?:
                      | (
                          | "full_service"
                          | "non_fuel_transaction"
                          | "self_service"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              flight?:
                | {
                    departure_at?: number | undefined
                    passenger_name?: string | undefined
                    refundable?: boolean | undefined
                    segments?:
                      | {
                          arrival_airport_code?: string | undefined
                          carrier?: string | undefined
                          departure_airport_code?: string | undefined
                          flight_number?: string | undefined
                          service_class?: string | undefined
                          stopover_allowed?: boolean | undefined
                        }[]
                      | undefined
                    travel_agency?: string | undefined
                  }
                | undefined
              fuel?:
                | {
                    industry_product_code?: string | undefined
                    quantity_decimal?: string | undefined
                    type?:
                      | (
                          | "diesel"
                          | "other"
                          | "unleaded_plus"
                          | "unleaded_regular"
                          | "unleaded_super"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit?:
                      | (
                          | "charging_minute"
                          | "imperial_gallon"
                          | "kilogram"
                          | "kilowatt_hour"
                          | "liter"
                          | "other"
                          | "pound"
                          | "us_gallon"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_cost_decimal?: string | undefined
                  }
                | undefined
              lodging?:
                | {
                    check_in_at?: number | undefined
                    nights?: number | undefined
                  }
                | undefined
              receipt?:
                | {
                    description?: string | undefined
                    quantity?: string | undefined
                    total?: number | undefined
                    unit_cost?: number | undefined
                  }[]
                | undefined
              reference?: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_transaction>> {
    const url = `/v1/test_helpers/issuing/transactions/create_force_capture`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingTransactionsCreateUnlinkedRefund(
    p: {
      requestBody: {
        amount: number
        card: string
        currency?: string | undefined
        expand?: string[] | undefined
        merchant_data?:
          | {
              category?:
                | (
                    | "ac_refrigeration_repair"
                    | "accounting_bookkeeping_services"
                    | "advertising_services"
                    | "agricultural_cooperative"
                    | "airlines_air_carriers"
                    | "airports_flying_fields"
                    | "ambulance_services"
                    | "amusement_parks_carnivals"
                    | "antique_reproductions"
                    | "antique_shops"
                    | "aquariums"
                    | "architectural_surveying_services"
                    | "art_dealers_and_galleries"
                    | "artists_supply_and_craft_shops"
                    | "auto_and_home_supply_stores"
                    | "auto_body_repair_shops"
                    | "auto_paint_shops"
                    | "auto_service_shops"
                    | "automated_cash_disburse"
                    | "automated_fuel_dispensers"
                    | "automobile_associations"
                    | "automotive_parts_and_accessories_stores"
                    | "automotive_tire_stores"
                    | "bail_and_bond_payments"
                    | "bakeries"
                    | "bands_orchestras"
                    | "barber_and_beauty_shops"
                    | "betting_casino_gambling"
                    | "bicycle_shops"
                    | "billiard_pool_establishments"
                    | "boat_dealers"
                    | "boat_rentals_and_leases"
                    | "book_stores"
                    | "books_periodicals_and_newspapers"
                    | "bowling_alleys"
                    | "bus_lines"
                    | "business_secretarial_schools"
                    | "buying_shopping_services"
                    | "cable_satellite_and_other_pay_television_and_radio"
                    | "camera_and_photographic_supply_stores"
                    | "candy_nut_and_confectionery_stores"
                    | "car_and_truck_dealers_new_used"
                    | "car_and_truck_dealers_used_only"
                    | "car_rental_agencies"
                    | "car_washes"
                    | "carpentry_services"
                    | "carpet_upholstery_cleaning"
                    | "caterers"
                    | "charitable_and_social_service_organizations_fundraising"
                    | "chemicals_and_allied_products"
                    | "child_care_services"
                    | "childrens_and_infants_wear_stores"
                    | "chiropodists_podiatrists"
                    | "chiropractors"
                    | "cigar_stores_and_stands"
                    | "civic_social_fraternal_associations"
                    | "cleaning_and_maintenance"
                    | "clothing_rental"
                    | "colleges_universities"
                    | "commercial_equipment"
                    | "commercial_footwear"
                    | "commercial_photography_art_and_graphics"
                    | "commuter_transport_and_ferries"
                    | "computer_network_services"
                    | "computer_programming"
                    | "computer_repair"
                    | "computer_software_stores"
                    | "computers_peripherals_and_software"
                    | "concrete_work_services"
                    | "construction_materials"
                    | "consulting_public_relations"
                    | "correspondence_schools"
                    | "cosmetic_stores"
                    | "counseling_services"
                    | "country_clubs"
                    | "courier_services"
                    | "court_costs"
                    | "credit_reporting_agencies"
                    | "cruise_lines"
                    | "dairy_products_stores"
                    | "dance_hall_studios_schools"
                    | "dating_escort_services"
                    | "dentists_orthodontists"
                    | "department_stores"
                    | "detective_agencies"
                    | "digital_goods_applications"
                    | "digital_goods_games"
                    | "digital_goods_large_volume"
                    | "digital_goods_media"
                    | "direct_marketing_catalog_merchant"
                    | "direct_marketing_combination_catalog_and_retail_merchant"
                    | "direct_marketing_inbound_telemarketing"
                    | "direct_marketing_insurance_services"
                    | "direct_marketing_other"
                    | "direct_marketing_outbound_telemarketing"
                    | "direct_marketing_subscription"
                    | "direct_marketing_travel"
                    | "discount_stores"
                    | "doctors"
                    | "door_to_door_sales"
                    | "drapery_window_covering_and_upholstery_stores"
                    | "drinking_places"
                    | "drug_stores_and_pharmacies"
                    | "drugs_drug_proprietaries_and_druggist_sundries"
                    | "dry_cleaners"
                    | "durable_goods"
                    | "duty_free_stores"
                    | "eating_places_restaurants"
                    | "educational_services"
                    | "electric_razor_stores"
                    | "electric_vehicle_charging"
                    | "electrical_parts_and_equipment"
                    | "electrical_services"
                    | "electronics_repair_shops"
                    | "electronics_stores"
                    | "elementary_secondary_schools"
                    | "emergency_services_gcas_visa_use_only"
                    | "employment_temp_agencies"
                    | "equipment_rental"
                    | "exterminating_services"
                    | "family_clothing_stores"
                    | "fast_food_restaurants"
                    | "financial_institutions"
                    | "fines_government_administrative_entities"
                    | "fireplace_fireplace_screens_and_accessories_stores"
                    | "floor_covering_stores"
                    | "florists"
                    | "florists_supplies_nursery_stock_and_flowers"
                    | "freezer_and_locker_meat_provisioners"
                    | "fuel_dealers_non_automotive"
                    | "funeral_services_crematories"
                    | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                    | "furniture_repair_refinishing"
                    | "furriers_and_fur_shops"
                    | "general_services"
                    | "gift_card_novelty_and_souvenir_shops"
                    | "glass_paint_and_wallpaper_stores"
                    | "glassware_crystal_stores"
                    | "golf_courses_public"
                    | "government_licensed_horse_dog_racing_us_region_only"
                    | "government_licensed_online_casions_online_gambling_us_region_only"
                    | "government_owned_lotteries_non_us_region"
                    | "government_owned_lotteries_us_region_only"
                    | "government_services"
                    | "grocery_stores_supermarkets"
                    | "hardware_equipment_and_supplies"
                    | "hardware_stores"
                    | "health_and_beauty_spas"
                    | "hearing_aids_sales_and_supplies"
                    | "heating_plumbing_a_c"
                    | "hobby_toy_and_game_shops"
                    | "home_supply_warehouse_stores"
                    | "hospitals"
                    | "hotels_motels_and_resorts"
                    | "household_appliance_stores"
                    | "industrial_supplies"
                    | "information_retrieval_services"
                    | "insurance_default"
                    | "insurance_underwriting_premiums"
                    | "intra_company_purchases"
                    | "jewelry_stores_watches_clocks_and_silverware_stores"
                    | "landscaping_services"
                    | "laundries"
                    | "laundry_cleaning_services"
                    | "legal_services_attorneys"
                    | "luggage_and_leather_goods_stores"
                    | "lumber_building_materials_stores"
                    | "manual_cash_disburse"
                    | "marinas_service_and_supplies"
                    | "marketplaces"
                    | "masonry_stonework_and_plaster"
                    | "massage_parlors"
                    | "medical_and_dental_labs"
                    | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                    | "medical_services"
                    | "membership_organizations"
                    | "mens_and_boys_clothing_and_accessories_stores"
                    | "mens_womens_clothing_stores"
                    | "metal_service_centers"
                    | "miscellaneous_apparel_and_accessory_shops"
                    | "miscellaneous_auto_dealers"
                    | "miscellaneous_business_services"
                    | "miscellaneous_food_stores"
                    | "miscellaneous_general_merchandise"
                    | "miscellaneous_general_services"
                    | "miscellaneous_home_furnishing_specialty_stores"
                    | "miscellaneous_publishing_and_printing"
                    | "miscellaneous_recreation_services"
                    | "miscellaneous_repair_shops"
                    | "miscellaneous_specialty_retail"
                    | "mobile_home_dealers"
                    | "motion_picture_theaters"
                    | "motor_freight_carriers_and_trucking"
                    | "motor_homes_dealers"
                    | "motor_vehicle_supplies_and_new_parts"
                    | "motorcycle_shops_and_dealers"
                    | "motorcycle_shops_dealers"
                    | "music_stores_musical_instruments_pianos_and_sheet_music"
                    | "news_dealers_and_newsstands"
                    | "non_fi_money_orders"
                    | "non_fi_stored_value_card_purchase_load"
                    | "nondurable_goods"
                    | "nurseries_lawn_and_garden_supply_stores"
                    | "nursing_personal_care"
                    | "office_and_commercial_furniture"
                    | "opticians_eyeglasses"
                    | "optometrists_ophthalmologist"
                    | "orthopedic_goods_prosthetic_devices"
                    | "osteopaths"
                    | "package_stores_beer_wine_and_liquor"
                    | "paints_varnishes_and_supplies"
                    | "parking_lots_garages"
                    | "passenger_railways"
                    | "pawn_shops"
                    | "pet_shops_pet_food_and_supplies"
                    | "petroleum_and_petroleum_products"
                    | "photo_developing"
                    | "photographic_photocopy_microfilm_equipment_and_supplies"
                    | "photographic_studios"
                    | "picture_video_production"
                    | "piece_goods_notions_and_other_dry_goods"
                    | "plumbing_heating_equipment_and_supplies"
                    | "political_organizations"
                    | "postal_services_government_only"
                    | "precious_stones_and_metals_watches_and_jewelry"
                    | "professional_services"
                    | "public_warehousing_and_storage"
                    | "quick_copy_repro_and_blueprint"
                    | "railroads"
                    | "real_estate_agents_and_managers_rentals"
                    | "record_stores"
                    | "recreational_vehicle_rentals"
                    | "religious_goods_stores"
                    | "religious_organizations"
                    | "roofing_siding_sheet_metal"
                    | "secretarial_support_services"
                    | "security_brokers_dealers"
                    | "service_stations"
                    | "sewing_needlework_fabric_and_piece_goods_stores"
                    | "shoe_repair_hat_cleaning"
                    | "shoe_stores"
                    | "small_appliance_repair"
                    | "snowmobile_dealers"
                    | "special_trade_services"
                    | "specialty_cleaning"
                    | "sporting_goods_stores"
                    | "sporting_recreation_camps"
                    | "sports_and_riding_apparel_stores"
                    | "sports_clubs_fields"
                    | "stamp_and_coin_stores"
                    | "stationary_office_supplies_printing_and_writing_paper"
                    | "stationery_stores_office_and_school_supply_stores"
                    | "swimming_pools_sales"
                    | "t_ui_travel_germany"
                    | "tailors_alterations"
                    | "tax_payments_government_agencies"
                    | "tax_preparation_services"
                    | "taxicabs_limousines"
                    | "telecommunication_equipment_and_telephone_sales"
                    | "telecommunication_services"
                    | "telegraph_services"
                    | "tent_and_awning_shops"
                    | "testing_laboratories"
                    | "theatrical_ticket_agencies"
                    | "timeshares"
                    | "tire_retreading_and_repair"
                    | "tolls_bridge_fees"
                    | "tourist_attractions_and_exhibits"
                    | "towing_services"
                    | "trailer_parks_campgrounds"
                    | "transportation_services"
                    | "travel_agencies_tour_operators"
                    | "truck_stop_iteration"
                    | "truck_utility_trailer_rentals"
                    | "typesetting_plate_making_and_related_services"
                    | "typewriter_stores"
                    | "u_s_federal_government_agencies_or_departments"
                    | "uniforms_commercial_clothing"
                    | "used_merchandise_and_secondhand_stores"
                    | "utilities"
                    | "variety_stores"
                    | "veterinary_services"
                    | "video_amusement_game_supplies"
                    | "video_game_arcades"
                    | "video_tape_rental_stores"
                    | "vocational_trade_schools"
                    | "watch_jewelry_repair"
                    | "welding_repair"
                    | "wholesale_clubs"
                    | "wig_and_toupee_stores"
                    | "wires_money_orders"
                    | "womens_accessory_and_specialty_shops"
                    | "womens_ready_to_wear_stores"
                    | "wrecking_and_salvage_yards"
                    | UnknownEnumStringValue
                  )
                | undefined
              city?: string | undefined
              country?: string | undefined
              name?: string | undefined
              network_id?: string | undefined
              postal_code?: string | undefined
              state?: string | undefined
              terminal_id?: string | undefined
              url?: string | undefined
            }
          | undefined
        purchase_details?:
          | {
              fleet?:
                | {
                    cardholder_prompt_data?:
                      | {
                          driver_id?: string | undefined
                          odometer?: number | undefined
                          unspecified_id?: string | undefined
                          user_id?: string | undefined
                          vehicle_number?: string | undefined
                        }
                      | undefined
                    purchase_type?:
                      | (
                          | "fuel_and_non_fuel_purchase"
                          | "fuel_purchase"
                          | "non_fuel_purchase"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    reported_breakdown?:
                      | {
                          fuel?:
                            | {
                                gross_amount_decimal?: string | undefined
                              }
                            | undefined
                          non_fuel?:
                            | {
                                gross_amount_decimal?: string | undefined
                              }
                            | undefined
                          tax?:
                            | {
                                local_amount_decimal?: string | undefined
                                national_amount_decimal?: string | undefined
                              }
                            | undefined
                        }
                      | undefined
                    service_type?:
                      | (
                          | "full_service"
                          | "non_fuel_transaction"
                          | "self_service"
                          | UnknownEnumStringValue
                        )
                      | undefined
                  }
                | undefined
              flight?:
                | {
                    departure_at?: number | undefined
                    passenger_name?: string | undefined
                    refundable?: boolean | undefined
                    segments?:
                      | {
                          arrival_airport_code?: string | undefined
                          carrier?: string | undefined
                          departure_airport_code?: string | undefined
                          flight_number?: string | undefined
                          service_class?: string | undefined
                          stopover_allowed?: boolean | undefined
                        }[]
                      | undefined
                    travel_agency?: string | undefined
                  }
                | undefined
              fuel?:
                | {
                    industry_product_code?: string | undefined
                    quantity_decimal?: string | undefined
                    type?:
                      | (
                          | "diesel"
                          | "other"
                          | "unleaded_plus"
                          | "unleaded_regular"
                          | "unleaded_super"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit?:
                      | (
                          | "charging_minute"
                          | "imperial_gallon"
                          | "kilogram"
                          | "kilowatt_hour"
                          | "liter"
                          | "other"
                          | "pound"
                          | "us_gallon"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    unit_cost_decimal?: string | undefined
                  }
                | undefined
              lodging?:
                | {
                    check_in_at?: number | undefined
                    nights?: number | undefined
                  }
                | undefined
              receipt?:
                | {
                    description?: string | undefined
                    quantity?: string | undefined
                    total?: number | undefined
                    unit_cost?: number | undefined
                  }[]
                | undefined
              reference?: string | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_transaction>> {
    const url = `/v1/test_helpers/issuing/transactions/create_unlinked_refund`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersIssuingTransactionsTransactionRefund(
    p: {
      transaction: string
      requestBody?: {
        expand?: string[] | undefined
        refund_amount?: number | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_issuing_transaction>> {
    const url = `/v1/test_helpers/issuing/transactions/${p["transaction"]}/refund`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersRefundsRefundExpire(
    p: {
      refund: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_refund>> {
    const url = `/v1/test_helpers/refunds/${p["refund"]}/expire`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTerminalReadersReaderPresentPaymentMethod(
    p: {
      reader: string
      requestBody?: {
        amount_tip?: number | undefined
        card_present?:
          | {
              number?: string | undefined
            }
          | undefined
        expand?: string[] | undefined
        interac_present?:
          | {
              number?: string | undefined
            }
          | undefined
        type?:
          | ("card_present" | "interac_present" | UnknownEnumStringValue)
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_terminal_reader>> {
    const url = `/v1/test_helpers/terminal/readers/${p["reader"]}/present_payment_method`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTestHelpersTestClocks(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_test_helpers_test_clock[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/test_helpers/test_clocks`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTestClocks(
    p: {
      requestBody: {
        expand?: string[] | undefined
        frozen_time: number
        name?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_test_helpers_test_clock>> {
    const url = `/v1/test_helpers/test_clocks`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteTestHelpersTestClocksTestClock(
    p: {
      testClock: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_test_helpers_test_clock>> {
    const url = `/v1/test_helpers/test_clocks/${p["testClock"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTestHelpersTestClocksTestClock(
    p: {
      expand?: string[]
      testClock: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_test_helpers_test_clock>> {
    const url = `/v1/test_helpers/test_clocks/${p["testClock"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTestClocksTestClockAdvance(
    p: {
      testClock: string
      requestBody: {
        expand?: string[] | undefined
        frozen_time: number
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_test_helpers_test_clock>> {
    const url = `/v1/test_helpers/test_clocks/${p["testClock"]}/advance`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryInboundTransfersIdFail(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
        failure_details?:
          | {
              code?:
                | (
                    | "account_closed"
                    | "account_frozen"
                    | "bank_account_restricted"
                    | "bank_ownership_changed"
                    | "debit_not_authorized"
                    | "incorrect_account_holder_address"
                    | "incorrect_account_holder_name"
                    | "incorrect_account_holder_tax_id"
                    | "insufficient_funds"
                    | "invalid_account_number"
                    | "invalid_currency"
                    | "no_account"
                    | "other"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_inbound_transfer>> {
    const url = `/v1/test_helpers/treasury/inbound_transfers/${p["id"]}/fail`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryInboundTransfersIdReturn(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_inbound_transfer>> {
    const url = `/v1/test_helpers/treasury/inbound_transfers/${p["id"]}/return`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryInboundTransfersIdSucceed(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_inbound_transfer>> {
    const url = `/v1/test_helpers/treasury/inbound_transfers/${p["id"]}/succeed`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryOutboundPaymentsId(
    p: {
      id: string
      requestBody: {
        expand?: string[] | undefined
        tracking_details: {
          ach?:
            | {
                trace_id: string
              }
            | undefined
          type: "ach" | "us_domestic_wire" | UnknownEnumStringValue
          us_domestic_wire?:
            | {
                chips?: string | undefined
                imad?: string | undefined
                omad?: string | undefined
              }
            | undefined
        }
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_payment>> {
    const url = `/v1/test_helpers/treasury/outbound_payments/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryOutboundPaymentsIdFail(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_payment>> {
    const url = `/v1/test_helpers/treasury/outbound_payments/${p["id"]}/fail`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryOutboundPaymentsIdPost(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_payment>> {
    const url = `/v1/test_helpers/treasury/outbound_payments/${p["id"]}/post`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryOutboundPaymentsIdReturn(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
        returned_details?:
          | {
              code?:
                | (
                    | "account_closed"
                    | "account_frozen"
                    | "bank_account_restricted"
                    | "bank_ownership_changed"
                    | "declined"
                    | "incorrect_account_holder_name"
                    | "invalid_account_number"
                    | "invalid_currency"
                    | "no_account"
                    | "other"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_payment>> {
    const url = `/v1/test_helpers/treasury/outbound_payments/${p["id"]}/return`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryOutboundTransfersOutboundTransfer(
    p: {
      outboundTransfer: string
      requestBody: {
        expand?: string[] | undefined
        tracking_details: {
          ach?:
            | {
                trace_id: string
              }
            | undefined
          type: "ach" | "us_domestic_wire" | UnknownEnumStringValue
          us_domestic_wire?:
            | {
                chips?: string | undefined
                imad?: string | undefined
                omad?: string | undefined
              }
            | undefined
        }
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_transfer>> {
    const url = `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryOutboundTransfersOutboundTransferFail(
    p: {
      outboundTransfer: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_transfer>> {
    const url = `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}/fail`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryOutboundTransfersOutboundTransferPost(
    p: {
      outboundTransfer: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_transfer>> {
    const url = `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}/post`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn(
    p: {
      outboundTransfer: string
      requestBody?: {
        expand?: string[] | undefined
        returned_details?:
          | {
              code?:
                | (
                    | "account_closed"
                    | "account_frozen"
                    | "bank_account_restricted"
                    | "bank_ownership_changed"
                    | "declined"
                    | "incorrect_account_holder_name"
                    | "invalid_account_number"
                    | "invalid_currency"
                    | "no_account"
                    | "other"
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_transfer>> {
    const url = `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}/return`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryReceivedCredits(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string | undefined
        expand?: string[] | undefined
        financial_account: string
        initiating_payment_method_details?:
          | {
              type: "us_bank_account" | UnknownEnumStringValue
              us_bank_account?:
                | {
                    account_holder_name?: string | undefined
                    account_number?: string | undefined
                    routing_number?: string | undefined
                  }
                | undefined
            }
          | undefined
        network: "ach" | "us_domestic_wire" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_received_credit>> {
    const url = `/v1/test_helpers/treasury/received_credits`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTestHelpersTreasuryReceivedDebits(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string | undefined
        expand?: string[] | undefined
        financial_account: string
        initiating_payment_method_details?:
          | {
              type: "us_bank_account" | UnknownEnumStringValue
              us_bank_account?:
                | {
                    account_holder_name?: string | undefined
                    account_number?: string | undefined
                    routing_number?: string | undefined
                  }
                | undefined
            }
          | undefined
        network: "ach" | UnknownEnumStringValue
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_received_debit>> {
    const url = `/v1/test_helpers/treasury/received_debits`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTokens(
    p: {
      requestBody?: {
        account?:
          | {
              business_type?:
                | (
                    | "company"
                    | "government_entity"
                    | "individual"
                    | "non_profit"
                    | UnknownEnumStringValue
                  )
                | undefined
              company?:
                | {
                    address?:
                      | {
                          city?: string | undefined
                          country?: string | undefined
                          line1?: string | undefined
                          line2?: string | undefined
                          postal_code?: string | undefined
                          state?: string | undefined
                        }
                      | undefined
                    address_kana?:
                      | {
                          city?: string | undefined
                          country?: string | undefined
                          line1?: string | undefined
                          line2?: string | undefined
                          postal_code?: string | undefined
                          state?: string | undefined
                          town?: string | undefined
                        }
                      | undefined
                    address_kanji?:
                      | {
                          city?: string | undefined
                          country?: string | undefined
                          line1?: string | undefined
                          line2?: string | undefined
                          postal_code?: string | undefined
                          state?: string | undefined
                          town?: string | undefined
                        }
                      | undefined
                    directors_provided?: boolean | undefined
                    directorship_declaration?:
                      | {
                          date?: number | undefined
                          ip?: string | undefined
                          user_agent?: string | undefined
                        }
                      | undefined
                    executives_provided?: boolean | undefined
                    export_license_id?: string | undefined
                    export_purpose_code?: string | undefined
                    name?: string | undefined
                    name_kana?: string | undefined
                    name_kanji?: string | undefined
                    owners_provided?: boolean | undefined
                    ownership_declaration?:
                      | {
                          date?: number | undefined
                          ip?: string | undefined
                          user_agent?: string | undefined
                        }
                      | undefined
                    ownership_declaration_shown_and_signed?: boolean | undefined
                    ownership_exemption_reason?:
                      | (
                          | ""
                          | "qualified_entity_exceeds_ownership_threshold"
                          | "qualifies_as_financial_institution"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    phone?: string | undefined
                    registration_number?: string | undefined
                    structure?:
                      | (
                          | ""
                          | "free_zone_establishment"
                          | "free_zone_llc"
                          | "government_instrumentality"
                          | "governmental_unit"
                          | "incorporated_non_profit"
                          | "incorporated_partnership"
                          | "limited_liability_partnership"
                          | "llc"
                          | "multi_member_llc"
                          | "private_company"
                          | "private_corporation"
                          | "private_partnership"
                          | "public_company"
                          | "public_corporation"
                          | "public_partnership"
                          | "registered_charity"
                          | "single_member_llc"
                          | "sole_establishment"
                          | "sole_proprietorship"
                          | "tax_exempt_government_instrumentality"
                          | "unincorporated_association"
                          | "unincorporated_non_profit"
                          | "unincorporated_partnership"
                          | UnknownEnumStringValue
                        )
                      | undefined
                    tax_id?: string | undefined
                    tax_id_registrar?: string | undefined
                    vat_id?: string | undefined
                    verification?:
                      | {
                          document?:
                            | {
                                back?: string | undefined
                                front?: string | undefined
                              }
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              individual?:
                | {
                    address?:
                      | {
                          city?: string | undefined
                          country?: string | undefined
                          line1?: string | undefined
                          line2?: string | undefined
                          postal_code?: string | undefined
                          state?: string | undefined
                        }
                      | undefined
                    address_kana?:
                      | {
                          city?: string | undefined
                          country?: string | undefined
                          line1?: string | undefined
                          line2?: string | undefined
                          postal_code?: string | undefined
                          state?: string | undefined
                          town?: string | undefined
                        }
                      | undefined
                    address_kanji?:
                      | {
                          city?: string | undefined
                          country?: string | undefined
                          line1?: string | undefined
                          line2?: string | undefined
                          postal_code?: string | undefined
                          state?: string | undefined
                          town?: string | undefined
                        }
                      | undefined
                    dob?:
                      | (
                          | {
                              day: number
                              month: number
                              year: number
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    email?: string | undefined
                    first_name?: string | undefined
                    first_name_kana?: string | undefined
                    first_name_kanji?: string | undefined
                    full_name_aliases?:
                      | (string[] | "" | UnknownEnumStringValue)
                      | undefined
                    gender?: string | undefined
                    id_number?: string | undefined
                    id_number_secondary?: string | undefined
                    last_name?: string | undefined
                    last_name_kana?: string | undefined
                    last_name_kanji?: string | undefined
                    maiden_name?: string | undefined
                    metadata?:
                      | (
                          | {
                              [key: string]: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    phone?: string | undefined
                    political_exposure?:
                      | ("existing" | "none" | UnknownEnumStringValue)
                      | undefined
                    registered_address?:
                      | {
                          city?: string | undefined
                          country?: string | undefined
                          line1?: string | undefined
                          line2?: string | undefined
                          postal_code?: string | undefined
                          state?: string | undefined
                        }
                      | undefined
                    relationship?:
                      | {
                          director?: boolean | undefined
                          executive?: boolean | undefined
                          owner?: boolean | undefined
                          percent_ownership?:
                            | (number | "" | UnknownEnumStringValue)
                            | undefined
                          title?: string | undefined
                        }
                      | undefined
                    ssn_last_4?: string | undefined
                    verification?:
                      | {
                          additional_document?:
                            | {
                                back?: string | undefined
                                front?: string | undefined
                              }
                            | undefined
                          document?:
                            | {
                                back?: string | undefined
                                front?: string | undefined
                              }
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              tos_shown_and_accepted?: boolean | undefined
            }
          | undefined
        bank_account?:
          | {
              account_holder_name?: string | undefined
              account_holder_type?:
                | ("company" | "individual" | UnknownEnumStringValue)
                | undefined
              account_number: string
              account_type?:
                | (
                    | "checking"
                    | "futsu"
                    | "savings"
                    | "toza"
                    | UnknownEnumStringValue
                  )
                | undefined
              country: string
              currency?: string | undefined
              payment_method?: string | undefined
              routing_number?: string | undefined
            }
          | undefined
        card?:
          | (
              | {
                  address_city?: string | undefined
                  address_country?: string | undefined
                  address_line1?: string | undefined
                  address_line2?: string | undefined
                  address_state?: string | undefined
                  address_zip?: string | undefined
                  currency?: string | undefined
                  cvc?: string | undefined
                  exp_month: string
                  exp_year: string
                  name?: string | undefined
                  networks?:
                    | {
                        preferred?:
                          | (
                              | "cartes_bancaires"
                              | "mastercard"
                              | "visa"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | undefined
                  number: string
                }
              | string
            )
          | undefined
        customer?: string | undefined
        cvc_update?:
          | {
              cvc: string
            }
          | undefined
        expand?: string[] | undefined
        person?:
          | {
              additional_tos_acceptances?:
                | {
                    account?:
                      | {
                          date?: number | undefined
                          ip?: string | undefined
                          user_agent?:
                            | (string | "" | UnknownEnumStringValue)
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              address_kana?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                    town?: string | undefined
                  }
                | undefined
              address_kanji?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                    town?: string | undefined
                  }
                | undefined
              dob?:
                | (
                    | {
                        day: number
                        month: number
                        year: number
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              documents?:
                | {
                    company_authorization?:
                      | {
                          files?:
                            | (string | "" | UnknownEnumStringValue)[]
                            | undefined
                        }
                      | undefined
                    passport?:
                      | {
                          files?:
                            | (string | "" | UnknownEnumStringValue)[]
                            | undefined
                        }
                      | undefined
                    visa?:
                      | {
                          files?:
                            | (string | "" | UnknownEnumStringValue)[]
                            | undefined
                        }
                      | undefined
                  }
                | undefined
              email?: string | undefined
              first_name?: string | undefined
              first_name_kana?: string | undefined
              first_name_kanji?: string | undefined
              full_name_aliases?:
                | (string[] | "" | UnknownEnumStringValue)
                | undefined
              gender?: string | undefined
              id_number?: string | undefined
              id_number_secondary?: string | undefined
              last_name?: string | undefined
              last_name_kana?: string | undefined
              last_name_kanji?: string | undefined
              maiden_name?: string | undefined
              metadata?:
                | (
                    | {
                        [key: string]: string | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
              nationality?: string | undefined
              phone?: string | undefined
              political_exposure?:
                | ("existing" | "none" | UnknownEnumStringValue)
                | undefined
              registered_address?:
                | {
                    city?: string | undefined
                    country?: string | undefined
                    line1?: string | undefined
                    line2?: string | undefined
                    postal_code?: string | undefined
                    state?: string | undefined
                  }
                | undefined
              relationship?:
                | {
                    authorizer?: boolean | undefined
                    director?: boolean | undefined
                    executive?: boolean | undefined
                    legal_guardian?: boolean | undefined
                    owner?: boolean | undefined
                    percent_ownership?:
                      | (number | "" | UnknownEnumStringValue)
                      | undefined
                    representative?: boolean | undefined
                    title?: string | undefined
                  }
                | undefined
              ssn_last_4?: string | undefined
              verification?:
                | {
                    additional_document?:
                      | {
                          back?: string | undefined
                          front?: string | undefined
                        }
                      | undefined
                    document?:
                      | {
                          back?: string | undefined
                          front?: string | undefined
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        pii?:
          | {
              id_number?: string | undefined
            }
          | undefined
      }
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_token>> {
    const url = `/v1/tokens`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTokensToken(
    p: {
      expand?: string[]
      token: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_token>> {
    const url = `/v1/tokens/${p["token"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTopups(
    p: {
      amount?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "canceled"
        | "failed"
        | "pending"
        | "succeeded"
        | UnknownEnumStringValue
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_topup[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/topups`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      amount: p["amount"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTopups(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        source?: string | undefined
        statement_descriptor?: string | undefined
        transfer_group?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_topup>> {
    const url = `/v1/topups`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTopupsTopup(
    p: {
      expand?: string[]
      topup: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_topup>> {
    const url = `/v1/topups/${p["topup"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTopupsTopup(
    p: {
      topup: string
      requestBody?: {
        description?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_topup>> {
    const url = `/v1/topups/${p["topup"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTopupsTopupCancel(
    p: {
      topup: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_topup>> {
    const url = `/v1/topups/${p["topup"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTransfers(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      destination?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      transferGroup?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_transfer[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/transfers`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      destination: p["destination"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      transfer_group: p["transferGroup"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTransfers(
    p: {
      requestBody: {
        amount?: number | undefined
        currency: string
        description?: string | undefined
        destination: string
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        source_transaction?: string | undefined
        source_type?:
          | ("bank_account" | "card" | "fpx" | UnknownEnumStringValue)
          | undefined
        transfer_group?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_transfer>> {
    const url = `/v1/transfers`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTransfersIdReversals(
    p: {
      endingBefore?: string
      expand?: string[]
      id: string
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_transfer_reversal[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/transfers/${p["id"]}/reversals`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTransfersIdReversals(
    p: {
      id: string
      requestBody?: {
        amount?: number | undefined
        description?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        refund_application_fee?: boolean | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_transfer_reversal>> {
    const url = `/v1/transfers/${p["id"]}/reversals`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTransfersTransfer(
    p: {
      expand?: string[]
      transfer: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_transfer>> {
    const url = `/v1/transfers/${p["transfer"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTransfersTransfer(
    p: {
      transfer: string
      requestBody?: {
        description?: string | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_transfer>> {
    const url = `/v1/transfers/${p["transfer"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTransfersTransferReversalsId(
    p: {
      expand?: string[]
      id: string
      transfer: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_transfer_reversal>> {
    const url = `/v1/transfers/${p["transfer"]}/reversals/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTransfersTransferReversalsId(
    p: {
      id: string
      transfer: string
      requestBody?: {
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_transfer_reversal>> {
    const url = `/v1/transfers/${p["transfer"]}/reversals/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryCreditReversals(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      receivedCredit?: string
      startingAfter?: string
      status?: "canceled" | "posted" | "processing" | UnknownEnumStringValue
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_treasury_credit_reversal[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/treasury/credit_reversals`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      received_credit: p["receivedCredit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryCreditReversals(
    p: {
      requestBody: {
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        received_credit: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_credit_reversal>> {
    const url = `/v1/treasury/credit_reversals`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryCreditReversalsCreditReversal(
    p: {
      creditReversal: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_credit_reversal>> {
    const url = `/v1/treasury/credit_reversals/${p["creditReversal"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryDebitReversals(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      receivedDebit?: string
      resolution?: "lost" | "won" | UnknownEnumStringValue
      startingAfter?: string
      status?: "canceled" | "completed" | "processing" | UnknownEnumStringValue
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_treasury_debit_reversal[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/treasury/debit_reversals`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      received_debit: p["receivedDebit"],
      resolution: p["resolution"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryDebitReversals(
    p: {
      requestBody: {
        expand?: string[] | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        received_debit: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_debit_reversal>> {
    const url = `/v1/treasury/debit_reversals`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryDebitReversalsDebitReversal(
    p: {
      debitReversal: string
      expand?: string[]
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_debit_reversal>> {
    const url = `/v1/treasury/debit_reversals/${p["debitReversal"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryFinancialAccounts(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_treasury_financial_account[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/treasury/financial_accounts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryFinancialAccounts(
    p: {
      requestBody: {
        expand?: string[] | undefined
        features?:
          | {
              card_issuing?:
                | {
                    requested: boolean
                  }
                | undefined
              deposit_insurance?:
                | {
                    requested: boolean
                  }
                | undefined
              financial_addresses?:
                | {
                    aba?:
                      | {
                          requested: boolean
                        }
                      | undefined
                  }
                | undefined
              inbound_transfers?:
                | {
                    ach?:
                      | {
                          requested: boolean
                        }
                      | undefined
                  }
                | undefined
              intra_stripe_flows?:
                | {
                    requested: boolean
                  }
                | undefined
              outbound_payments?:
                | {
                    ach?:
                      | {
                          requested: boolean
                        }
                      | undefined
                    us_domestic_wire?:
                      | {
                          requested: boolean
                        }
                      | undefined
                  }
                | undefined
              outbound_transfers?:
                | {
                    ach?:
                      | {
                          requested: boolean
                        }
                      | undefined
                    us_domestic_wire?:
                      | {
                          requested: boolean
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        nickname?: (string | "" | UnknownEnumStringValue) | undefined
        platform_restrictions?:
          | {
              inbound_flows?:
                | ("restricted" | "unrestricted" | UnknownEnumStringValue)
                | undefined
              outbound_flows?:
                | ("restricted" | "unrestricted" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
        supported_currencies: string[]
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_financial_account>> {
    const url = `/v1/treasury/financial_accounts`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryFinancialAccountsFinancialAccount(
    p: {
      expand?: string[]
      financialAccount: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_financial_account>> {
    const url = `/v1/treasury/financial_accounts/${p["financialAccount"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryFinancialAccountsFinancialAccount(
    p: {
      financialAccount: string
      requestBody?: {
        expand?: string[] | undefined
        features?:
          | {
              card_issuing?:
                | {
                    requested: boolean
                  }
                | undefined
              deposit_insurance?:
                | {
                    requested: boolean
                  }
                | undefined
              financial_addresses?:
                | {
                    aba?:
                      | {
                          requested: boolean
                        }
                      | undefined
                  }
                | undefined
              inbound_transfers?:
                | {
                    ach?:
                      | {
                          requested: boolean
                        }
                      | undefined
                  }
                | undefined
              intra_stripe_flows?:
                | {
                    requested: boolean
                  }
                | undefined
              outbound_payments?:
                | {
                    ach?:
                      | {
                          requested: boolean
                        }
                      | undefined
                    us_domestic_wire?:
                      | {
                          requested: boolean
                        }
                      | undefined
                  }
                | undefined
              outbound_transfers?:
                | {
                    ach?:
                      | {
                          requested: boolean
                        }
                      | undefined
                    us_domestic_wire?:
                      | {
                          requested: boolean
                        }
                      | undefined
                  }
                | undefined
            }
          | undefined
        forwarding_settings?:
          | {
              financial_account?: string | undefined
              payment_method?: string | undefined
              type:
                | "financial_account"
                | "payment_method"
                | UnknownEnumStringValue
            }
          | undefined
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        nickname?: (string | "" | UnknownEnumStringValue) | undefined
        platform_restrictions?:
          | {
              inbound_flows?:
                | ("restricted" | "unrestricted" | UnknownEnumStringValue)
                | undefined
              outbound_flows?:
                | ("restricted" | "unrestricted" | UnknownEnumStringValue)
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_financial_account>> {
    const url = `/v1/treasury/financial_accounts/${p["financialAccount"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryFinancialAccountsFinancialAccountClose(
    p: {
      financialAccount: string
      requestBody?: {
        expand?: string[] | undefined
        forwarding_settings?:
          | {
              financial_account?: string | undefined
              payment_method?: string | undefined
              type:
                | "financial_account"
                | "payment_method"
                | UnknownEnumStringValue
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_financial_account>> {
    const url = `/v1/treasury/financial_accounts/${p["financialAccount"]}/close`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryFinancialAccountsFinancialAccountFeatures(
    p: {
      expand?: string[]
      financialAccount: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_financial_account_features>> {
    const url = `/v1/treasury/financial_accounts/${p["financialAccount"]}/features`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryFinancialAccountsFinancialAccountFeatures(
    p: {
      financialAccount: string
      requestBody?: {
        card_issuing?:
          | {
              requested: boolean
            }
          | undefined
        deposit_insurance?:
          | {
              requested: boolean
            }
          | undefined
        expand?: string[] | undefined
        financial_addresses?:
          | {
              aba?:
                | {
                    requested: boolean
                  }
                | undefined
            }
          | undefined
        inbound_transfers?:
          | {
              ach?:
                | {
                    requested: boolean
                  }
                | undefined
            }
          | undefined
        intra_stripe_flows?:
          | {
              requested: boolean
            }
          | undefined
        outbound_payments?:
          | {
              ach?:
                | {
                    requested: boolean
                  }
                | undefined
              us_domestic_wire?:
                | {
                    requested: boolean
                  }
                | undefined
            }
          | undefined
        outbound_transfers?:
          | {
              ach?:
                | {
                    requested: boolean
                  }
                | undefined
              us_domestic_wire?:
                | {
                    requested: boolean
                  }
                | undefined
            }
          | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_financial_account_features>> {
    const url = `/v1/treasury/financial_accounts/${p["financialAccount"]}/features`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryInboundTransfers(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      startingAfter?: string
      status?:
        | "canceled"
        | "failed"
        | "processing"
        | "succeeded"
        | UnknownEnumStringValue
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_treasury_inbound_transfer[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/treasury/inbound_transfers`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryInboundTransfers(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string | undefined
        expand?: string[] | undefined
        financial_account: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        origin_payment_method: string
        statement_descriptor?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_inbound_transfer>> {
    const url = `/v1/treasury/inbound_transfers`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryInboundTransfersId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_inbound_transfer>> {
    const url = `/v1/treasury/inbound_transfers/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryInboundTransfersInboundTransferCancel(
    p: {
      inboundTransfer: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_inbound_transfer>> {
    const url = `/v1/treasury/inbound_transfers/${p["inboundTransfer"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryOutboundPayments(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      startingAfter?: string
      status?:
        | "canceled"
        | "failed"
        | "posted"
        | "processing"
        | "returned"
        | UnknownEnumStringValue
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_treasury_outbound_payment[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/treasury/outbound_payments`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryOutboundPayments(
    p: {
      requestBody: {
        amount: number
        currency: string
        customer?: string | undefined
        description?: string | undefined
        destination_payment_method?: string | undefined
        destination_payment_method_data?:
          | {
              billing_details?:
                | {
                    address?:
                      | (
                          | {
                              city?: string | undefined
                              country?: string | undefined
                              line1?: string | undefined
                              line2?: string | undefined
                              postal_code?: string | undefined
                              state?: string | undefined
                            }
                          | ""
                          | UnknownEnumStringValue
                        )
                      | undefined
                    email?: (string | "" | UnknownEnumStringValue) | undefined
                    name?: (string | "" | UnknownEnumStringValue) | undefined
                    phone?: (string | "" | UnknownEnumStringValue) | undefined
                  }
                | undefined
              financial_account?: string | undefined
              metadata?:
                | {
                    [key: string]: string | undefined
                  }
                | undefined
              type:
                | "financial_account"
                | "us_bank_account"
                | UnknownEnumStringValue
              us_bank_account?:
                | {
                    account_holder_type?:
                      | ("company" | "individual" | UnknownEnumStringValue)
                      | undefined
                    account_number?: string | undefined
                    account_type?:
                      | ("checking" | "savings" | UnknownEnumStringValue)
                      | undefined
                    financial_connections_account?: string | undefined
                    routing_number?: string | undefined
                  }
                | undefined
            }
          | undefined
        destination_payment_method_options?:
          | {
              us_bank_account?:
                | (
                    | {
                        network?:
                          | (
                              | "ach"
                              | "us_domestic_wire"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        end_user_details?:
          | {
              ip_address?: string | undefined
              present: boolean
            }
          | undefined
        expand?: string[] | undefined
        financial_account: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        statement_descriptor?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_payment>> {
    const url = `/v1/treasury/outbound_payments`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryOutboundPaymentsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_payment>> {
    const url = `/v1/treasury/outbound_payments/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryOutboundPaymentsIdCancel(
    p: {
      id: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_payment>> {
    const url = `/v1/treasury/outbound_payments/${p["id"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryOutboundTransfers(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      startingAfter?: string
      status?:
        | "canceled"
        | "failed"
        | "posted"
        | "processing"
        | "returned"
        | UnknownEnumStringValue
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_treasury_outbound_transfer[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/treasury/outbound_transfers`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryOutboundTransfers(
    p: {
      requestBody: {
        amount: number
        currency: string
        description?: string | undefined
        destination_payment_method?: string | undefined
        destination_payment_method_data?:
          | {
              financial_account?: string | undefined
              type: "financial_account" | UnknownEnumStringValue
            }
          | undefined
        destination_payment_method_options?:
          | {
              us_bank_account?:
                | (
                    | {
                        network?:
                          | (
                              | "ach"
                              | "us_domestic_wire"
                              | UnknownEnumStringValue
                            )
                          | undefined
                      }
                    | ""
                    | UnknownEnumStringValue
                  )
                | undefined
            }
          | undefined
        expand?: string[] | undefined
        financial_account: string
        metadata?:
          | {
              [key: string]: string | undefined
            }
          | undefined
        statement_descriptor?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_transfer>> {
    const url = `/v1/treasury/outbound_transfers`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryOutboundTransfersOutboundTransfer(
    p: {
      expand?: string[]
      outboundTransfer: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_transfer>> {
    const url = `/v1/treasury/outbound_transfers/${p["outboundTransfer"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postTreasuryOutboundTransfersOutboundTransferCancel(
    p: {
      outboundTransfer: string
      requestBody?: {
        expand?: string[] | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_outbound_transfer>> {
    const url = `/v1/treasury/outbound_transfers/${p["outboundTransfer"]}/cancel`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryReceivedCredits(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      linkedFlows?: {
        source_flow_type:
          | "credit_reversal"
          | "other"
          | "outbound_payment"
          | "outbound_transfer"
          | "payout"
          | UnknownEnumStringValue
      }
      startingAfter?: string
      status?: "failed" | "succeeded" | UnknownEnumStringValue
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_treasury_received_credit[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/treasury/received_credits`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      linked_flows: p["linkedFlows"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryReceivedCreditsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_received_credit>> {
    const url = `/v1/treasury/received_credits/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryReceivedDebits(
    p: {
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      startingAfter?: string
      status?: "failed" | "succeeded" | UnknownEnumStringValue
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_treasury_received_debit[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/treasury/received_debits`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryReceivedDebitsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_received_debit>> {
    const url = `/v1/treasury/received_debits/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryTransactionEntries(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      effectiveAt?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      orderBy?: "created" | "effective_at" | UnknownEnumStringValue
      startingAfter?: string
      transaction?: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_treasury_transaction_entry[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/treasury/transaction_entries`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      effective_at: p["effectiveAt"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      order_by: p["orderBy"],
      starting_after: p["startingAfter"],
      transaction: p["transaction"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryTransactionEntriesId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_transaction_entry>> {
    const url = `/v1/treasury/transaction_entries/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryTransactions(
    p: {
      created?:
        | {
            gt?: number | undefined
            gte?: number | undefined
            lt?: number | undefined
            lte?: number | undefined
          }
        | number
      endingBefore?: string
      expand?: string[]
      financialAccount: string
      limit?: number
      orderBy?: "created" | "posted_at" | UnknownEnumStringValue
      startingAfter?: string
      status?: "open" | "posted" | "void" | UnknownEnumStringValue
      statusTransitions?: {
        posted_at?:
          | (
              | {
                  gt?: number | undefined
                  gte?: number | undefined
                  lt?: number | undefined
                  lte?: number | undefined
                }
              | number
            )
          | undefined
      }
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_treasury_transaction[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/treasury/transactions`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      order_by: p["orderBy"],
      starting_after: p["startingAfter"],
      status: p["status"],
      status_transitions: p["statusTransitions"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTreasuryTransactionsId(
    p: {
      expand?: string[]
      id: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_treasury_transaction>> {
    const url = `/v1/treasury/transactions/${p["id"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getWebhookEndpoints(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: EmptyObject
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      data: t_webhook_endpoint[]
      has_more: boolean
      object: "list" | UnknownEnumStringValue
      url: string
    }>
  > {
    const url = `/v1/webhook_endpoints`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postWebhookEndpoints(
    p: {
      requestBody: {
        api_version?:
          | (
              | "2011-01-01"
              | "2011-06-21"
              | "2011-06-28"
              | "2011-08-01"
              | "2011-09-15"
              | "2011-11-17"
              | "2012-02-23"
              | "2012-03-25"
              | "2012-06-18"
              | "2012-06-28"
              | "2012-07-09"
              | "2012-09-24"
              | "2012-10-26"
              | "2012-11-07"
              | "2013-02-11"
              | "2013-02-13"
              | "2013-07-05"
              | "2013-08-12"
              | "2013-08-13"
              | "2013-10-29"
              | "2013-12-03"
              | "2014-01-31"
              | "2014-03-13"
              | "2014-03-28"
              | "2014-05-19"
              | "2014-06-13"
              | "2014-06-17"
              | "2014-07-22"
              | "2014-07-26"
              | "2014-08-04"
              | "2014-08-20"
              | "2014-09-08"
              | "2014-10-07"
              | "2014-11-05"
              | "2014-11-20"
              | "2014-12-08"
              | "2014-12-17"
              | "2014-12-22"
              | "2015-01-11"
              | "2015-01-26"
              | "2015-02-10"
              | "2015-02-16"
              | "2015-02-18"
              | "2015-03-24"
              | "2015-04-07"
              | "2015-06-15"
              | "2015-07-07"
              | "2015-07-13"
              | "2015-07-28"
              | "2015-08-07"
              | "2015-08-19"
              | "2015-09-03"
              | "2015-09-08"
              | "2015-09-23"
              | "2015-10-01"
              | "2015-10-12"
              | "2015-10-16"
              | "2016-02-03"
              | "2016-02-19"
              | "2016-02-22"
              | "2016-02-23"
              | "2016-02-29"
              | "2016-03-07"
              | "2016-06-15"
              | "2016-07-06"
              | "2016-10-19"
              | "2017-01-27"
              | "2017-02-14"
              | "2017-04-06"
              | "2017-05-25"
              | "2017-06-05"
              | "2017-08-15"
              | "2017-12-14"
              | "2018-01-23"
              | "2018-02-05"
              | "2018-02-06"
              | "2018-02-28"
              | "2018-05-21"
              | "2018-07-27"
              | "2018-08-23"
              | "2018-09-06"
              | "2018-09-24"
              | "2018-10-31"
              | "2018-11-08"
              | "2019-02-11"
              | "2019-02-19"
              | "2019-03-14"
              | "2019-05-16"
              | "2019-08-14"
              | "2019-09-09"
              | "2019-10-08"
              | "2019-10-17"
              | "2019-11-05"
              | "2019-12-03"
              | "2020-03-02"
              | "2020-08-27"
              | "2022-08-01"
              | "2022-11-15"
              | "2023-08-16"
              | "2023-10-16"
              | "2024-04-10"
              | "2024-06-20"
              | "2024-09-30.acacia"
              | "2024-10-28.acacia"
              | "2024-11-20.acacia"
              | "2024-12-18.acacia"
              | "2025-01-27.acacia"
              | "2025-02-24.acacia"
              | "2025-03-01.dashboard"
              | "2025-03-31.basil"
              | UnknownEnumStringValue
            )
          | undefined
        connect?: boolean | undefined
        description?: (string | "" | UnknownEnumStringValue) | undefined
        enabled_events: (
          | "*"
          | "account.application.authorized"
          | "account.application.deauthorized"
          | "account.external_account.created"
          | "account.external_account.deleted"
          | "account.external_account.updated"
          | "account.updated"
          | "application_fee.created"
          | "application_fee.refund.updated"
          | "application_fee.refunded"
          | "balance.available"
          | "billing.alert.triggered"
          | "billing_portal.configuration.created"
          | "billing_portal.configuration.updated"
          | "billing_portal.session.created"
          | "capability.updated"
          | "cash_balance.funds_available"
          | "charge.captured"
          | "charge.dispute.closed"
          | "charge.dispute.created"
          | "charge.dispute.funds_reinstated"
          | "charge.dispute.funds_withdrawn"
          | "charge.dispute.updated"
          | "charge.expired"
          | "charge.failed"
          | "charge.pending"
          | "charge.refund.updated"
          | "charge.refunded"
          | "charge.succeeded"
          | "charge.updated"
          | "checkout.session.async_payment_failed"
          | "checkout.session.async_payment_succeeded"
          | "checkout.session.completed"
          | "checkout.session.expired"
          | "climate.order.canceled"
          | "climate.order.created"
          | "climate.order.delayed"
          | "climate.order.delivered"
          | "climate.order.product_substituted"
          | "climate.product.created"
          | "climate.product.pricing_updated"
          | "coupon.created"
          | "coupon.deleted"
          | "coupon.updated"
          | "credit_note.created"
          | "credit_note.updated"
          | "credit_note.voided"
          | "customer.created"
          | "customer.deleted"
          | "customer.discount.created"
          | "customer.discount.deleted"
          | "customer.discount.updated"
          | "customer.source.created"
          | "customer.source.deleted"
          | "customer.source.expiring"
          | "customer.source.updated"
          | "customer.subscription.created"
          | "customer.subscription.deleted"
          | "customer.subscription.paused"
          | "customer.subscription.pending_update_applied"
          | "customer.subscription.pending_update_expired"
          | "customer.subscription.resumed"
          | "customer.subscription.trial_will_end"
          | "customer.subscription.updated"
          | "customer.tax_id.created"
          | "customer.tax_id.deleted"
          | "customer.tax_id.updated"
          | "customer.updated"
          | "customer_cash_balance_transaction.created"
          | "entitlements.active_entitlement_summary.updated"
          | "file.created"
          | "financial_connections.account.created"
          | "financial_connections.account.deactivated"
          | "financial_connections.account.disconnected"
          | "financial_connections.account.reactivated"
          | "financial_connections.account.refreshed_balance"
          | "financial_connections.account.refreshed_ownership"
          | "financial_connections.account.refreshed_transactions"
          | "identity.verification_session.canceled"
          | "identity.verification_session.created"
          | "identity.verification_session.processing"
          | "identity.verification_session.redacted"
          | "identity.verification_session.requires_input"
          | "identity.verification_session.verified"
          | "invoice.created"
          | "invoice.deleted"
          | "invoice.finalization_failed"
          | "invoice.finalized"
          | "invoice.marked_uncollectible"
          | "invoice.overdue"
          | "invoice.overpaid"
          | "invoice.paid"
          | "invoice.payment_action_required"
          | "invoice.payment_failed"
          | "invoice.payment_succeeded"
          | "invoice.sent"
          | "invoice.upcoming"
          | "invoice.updated"
          | "invoice.voided"
          | "invoice.will_be_due"
          | "invoiceitem.created"
          | "invoiceitem.deleted"
          | "issuing_authorization.created"
          | "issuing_authorization.request"
          | "issuing_authorization.updated"
          | "issuing_card.created"
          | "issuing_card.updated"
          | "issuing_cardholder.created"
          | "issuing_cardholder.updated"
          | "issuing_dispute.closed"
          | "issuing_dispute.created"
          | "issuing_dispute.funds_reinstated"
          | "issuing_dispute.funds_rescinded"
          | "issuing_dispute.submitted"
          | "issuing_dispute.updated"
          | "issuing_personalization_design.activated"
          | "issuing_personalization_design.deactivated"
          | "issuing_personalization_design.rejected"
          | "issuing_personalization_design.updated"
          | "issuing_token.created"
          | "issuing_token.updated"
          | "issuing_transaction.created"
          | "issuing_transaction.purchase_details_receipt_updated"
          | "issuing_transaction.updated"
          | "mandate.updated"
          | "payment_intent.amount_capturable_updated"
          | "payment_intent.canceled"
          | "payment_intent.created"
          | "payment_intent.partially_funded"
          | "payment_intent.payment_failed"
          | "payment_intent.processing"
          | "payment_intent.requires_action"
          | "payment_intent.succeeded"
          | "payment_link.created"
          | "payment_link.updated"
          | "payment_method.attached"
          | "payment_method.automatically_updated"
          | "payment_method.detached"
          | "payment_method.updated"
          | "payout.canceled"
          | "payout.created"
          | "payout.failed"
          | "payout.paid"
          | "payout.reconciliation_completed"
          | "payout.updated"
          | "person.created"
          | "person.deleted"
          | "person.updated"
          | "plan.created"
          | "plan.deleted"
          | "plan.updated"
          | "price.created"
          | "price.deleted"
          | "price.updated"
          | "product.created"
          | "product.deleted"
          | "product.updated"
          | "promotion_code.created"
          | "promotion_code.updated"
          | "quote.accepted"
          | "quote.canceled"
          | "quote.created"
          | "quote.finalized"
          | "radar.early_fraud_warning.created"
          | "radar.early_fraud_warning.updated"
          | "refund.created"
          | "refund.failed"
          | "refund.updated"
          | "reporting.report_run.failed"
          | "reporting.report_run.succeeded"
          | "reporting.report_type.updated"
          | "review.closed"
          | "review.opened"
          | "setup_intent.canceled"
          | "setup_intent.created"
          | "setup_intent.requires_action"
          | "setup_intent.setup_failed"
          | "setup_intent.succeeded"
          | "sigma.scheduled_query_run.created"
          | "source.canceled"
          | "source.chargeable"
          | "source.failed"
          | "source.mandate_notification"
          | "source.refund_attributes_required"
          | "source.transaction.created"
          | "source.transaction.updated"
          | "subscription_schedule.aborted"
          | "subscription_schedule.canceled"
          | "subscription_schedule.completed"
          | "subscription_schedule.created"
          | "subscription_schedule.expiring"
          | "subscription_schedule.released"
          | "subscription_schedule.updated"
          | "tax.settings.updated"
          | "tax_rate.created"
          | "tax_rate.updated"
          | "terminal.reader.action_failed"
          | "terminal.reader.action_succeeded"
          | "test_helpers.test_clock.advancing"
          | "test_helpers.test_clock.created"
          | "test_helpers.test_clock.deleted"
          | "test_helpers.test_clock.internal_failure"
          | "test_helpers.test_clock.ready"
          | "topup.canceled"
          | "topup.created"
          | "topup.failed"
          | "topup.reversed"
          | "topup.succeeded"
          | "transfer.created"
          | "transfer.reversed"
          | "transfer.updated"
          | "treasury.credit_reversal.created"
          | "treasury.credit_reversal.posted"
          | "treasury.debit_reversal.completed"
          | "treasury.debit_reversal.created"
          | "treasury.debit_reversal.initial_credit_granted"
          | "treasury.financial_account.closed"
          | "treasury.financial_account.created"
          | "treasury.financial_account.features_status_updated"
          | "treasury.inbound_transfer.canceled"
          | "treasury.inbound_transfer.created"
          | "treasury.inbound_transfer.failed"
          | "treasury.inbound_transfer.succeeded"
          | "treasury.outbound_payment.canceled"
          | "treasury.outbound_payment.created"
          | "treasury.outbound_payment.expected_arrival_date_updated"
          | "treasury.outbound_payment.failed"
          | "treasury.outbound_payment.posted"
          | "treasury.outbound_payment.returned"
          | "treasury.outbound_payment.tracking_details_updated"
          | "treasury.outbound_transfer.canceled"
          | "treasury.outbound_transfer.created"
          | "treasury.outbound_transfer.expected_arrival_date_updated"
          | "treasury.outbound_transfer.failed"
          | "treasury.outbound_transfer.posted"
          | "treasury.outbound_transfer.returned"
          | "treasury.outbound_transfer.tracking_details_updated"
          | "treasury.received_credit.created"
          | "treasury.received_credit.failed"
          | "treasury.received_credit.succeeded"
          | "treasury.received_debit.created"
          | UnknownEnumStringValue
        )[]
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        url: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_webhook_endpoint>> {
    const url = `/v1/webhook_endpoints`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteWebhookEndpointsWebhookEndpoint(
    p: {
      webhookEndpoint: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_deleted_webhook_endpoint>> {
    const url = `/v1/webhook_endpoints/${p["webhookEndpoint"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "DELETE",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getWebhookEndpointsWebhookEndpoint(
    p: {
      expand?: string[]
      webhookEndpoint: string
      requestBody?: EmptyObject
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_webhook_endpoint>> {
    const url = `/v1/webhook_endpoints/${p["webhookEndpoint"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const query = this._query({ expand: p["expand"] })
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url + query,
      method: "GET",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async postWebhookEndpointsWebhookEndpoint(
    p: {
      webhookEndpoint: string
      requestBody?: {
        description?: (string | "" | UnknownEnumStringValue) | undefined
        disabled?: boolean | undefined
        enabled_events?:
          | (
              | "*"
              | "account.application.authorized"
              | "account.application.deauthorized"
              | "account.external_account.created"
              | "account.external_account.deleted"
              | "account.external_account.updated"
              | "account.updated"
              | "application_fee.created"
              | "application_fee.refund.updated"
              | "application_fee.refunded"
              | "balance.available"
              | "billing.alert.triggered"
              | "billing_portal.configuration.created"
              | "billing_portal.configuration.updated"
              | "billing_portal.session.created"
              | "capability.updated"
              | "cash_balance.funds_available"
              | "charge.captured"
              | "charge.dispute.closed"
              | "charge.dispute.created"
              | "charge.dispute.funds_reinstated"
              | "charge.dispute.funds_withdrawn"
              | "charge.dispute.updated"
              | "charge.expired"
              | "charge.failed"
              | "charge.pending"
              | "charge.refund.updated"
              | "charge.refunded"
              | "charge.succeeded"
              | "charge.updated"
              | "checkout.session.async_payment_failed"
              | "checkout.session.async_payment_succeeded"
              | "checkout.session.completed"
              | "checkout.session.expired"
              | "climate.order.canceled"
              | "climate.order.created"
              | "climate.order.delayed"
              | "climate.order.delivered"
              | "climate.order.product_substituted"
              | "climate.product.created"
              | "climate.product.pricing_updated"
              | "coupon.created"
              | "coupon.deleted"
              | "coupon.updated"
              | "credit_note.created"
              | "credit_note.updated"
              | "credit_note.voided"
              | "customer.created"
              | "customer.deleted"
              | "customer.discount.created"
              | "customer.discount.deleted"
              | "customer.discount.updated"
              | "customer.source.created"
              | "customer.source.deleted"
              | "customer.source.expiring"
              | "customer.source.updated"
              | "customer.subscription.created"
              | "customer.subscription.deleted"
              | "customer.subscription.paused"
              | "customer.subscription.pending_update_applied"
              | "customer.subscription.pending_update_expired"
              | "customer.subscription.resumed"
              | "customer.subscription.trial_will_end"
              | "customer.subscription.updated"
              | "customer.tax_id.created"
              | "customer.tax_id.deleted"
              | "customer.tax_id.updated"
              | "customer.updated"
              | "customer_cash_balance_transaction.created"
              | "entitlements.active_entitlement_summary.updated"
              | "file.created"
              | "financial_connections.account.created"
              | "financial_connections.account.deactivated"
              | "financial_connections.account.disconnected"
              | "financial_connections.account.reactivated"
              | "financial_connections.account.refreshed_balance"
              | "financial_connections.account.refreshed_ownership"
              | "financial_connections.account.refreshed_transactions"
              | "identity.verification_session.canceled"
              | "identity.verification_session.created"
              | "identity.verification_session.processing"
              | "identity.verification_session.redacted"
              | "identity.verification_session.requires_input"
              | "identity.verification_session.verified"
              | "invoice.created"
              | "invoice.deleted"
              | "invoice.finalization_failed"
              | "invoice.finalized"
              | "invoice.marked_uncollectible"
              | "invoice.overdue"
              | "invoice.overpaid"
              | "invoice.paid"
              | "invoice.payment_action_required"
              | "invoice.payment_failed"
              | "invoice.payment_succeeded"
              | "invoice.sent"
              | "invoice.upcoming"
              | "invoice.updated"
              | "invoice.voided"
              | "invoice.will_be_due"
              | "invoiceitem.created"
              | "invoiceitem.deleted"
              | "issuing_authorization.created"
              | "issuing_authorization.request"
              | "issuing_authorization.updated"
              | "issuing_card.created"
              | "issuing_card.updated"
              | "issuing_cardholder.created"
              | "issuing_cardholder.updated"
              | "issuing_dispute.closed"
              | "issuing_dispute.created"
              | "issuing_dispute.funds_reinstated"
              | "issuing_dispute.funds_rescinded"
              | "issuing_dispute.submitted"
              | "issuing_dispute.updated"
              | "issuing_personalization_design.activated"
              | "issuing_personalization_design.deactivated"
              | "issuing_personalization_design.rejected"
              | "issuing_personalization_design.updated"
              | "issuing_token.created"
              | "issuing_token.updated"
              | "issuing_transaction.created"
              | "issuing_transaction.purchase_details_receipt_updated"
              | "issuing_transaction.updated"
              | "mandate.updated"
              | "payment_intent.amount_capturable_updated"
              | "payment_intent.canceled"
              | "payment_intent.created"
              | "payment_intent.partially_funded"
              | "payment_intent.payment_failed"
              | "payment_intent.processing"
              | "payment_intent.requires_action"
              | "payment_intent.succeeded"
              | "payment_link.created"
              | "payment_link.updated"
              | "payment_method.attached"
              | "payment_method.automatically_updated"
              | "payment_method.detached"
              | "payment_method.updated"
              | "payout.canceled"
              | "payout.created"
              | "payout.failed"
              | "payout.paid"
              | "payout.reconciliation_completed"
              | "payout.updated"
              | "person.created"
              | "person.deleted"
              | "person.updated"
              | "plan.created"
              | "plan.deleted"
              | "plan.updated"
              | "price.created"
              | "price.deleted"
              | "price.updated"
              | "product.created"
              | "product.deleted"
              | "product.updated"
              | "promotion_code.created"
              | "promotion_code.updated"
              | "quote.accepted"
              | "quote.canceled"
              | "quote.created"
              | "quote.finalized"
              | "radar.early_fraud_warning.created"
              | "radar.early_fraud_warning.updated"
              | "refund.created"
              | "refund.failed"
              | "refund.updated"
              | "reporting.report_run.failed"
              | "reporting.report_run.succeeded"
              | "reporting.report_type.updated"
              | "review.closed"
              | "review.opened"
              | "setup_intent.canceled"
              | "setup_intent.created"
              | "setup_intent.requires_action"
              | "setup_intent.setup_failed"
              | "setup_intent.succeeded"
              | "sigma.scheduled_query_run.created"
              | "source.canceled"
              | "source.chargeable"
              | "source.failed"
              | "source.mandate_notification"
              | "source.refund_attributes_required"
              | "source.transaction.created"
              | "source.transaction.updated"
              | "subscription_schedule.aborted"
              | "subscription_schedule.canceled"
              | "subscription_schedule.completed"
              | "subscription_schedule.created"
              | "subscription_schedule.expiring"
              | "subscription_schedule.released"
              | "subscription_schedule.updated"
              | "tax.settings.updated"
              | "tax_rate.created"
              | "tax_rate.updated"
              | "terminal.reader.action_failed"
              | "terminal.reader.action_succeeded"
              | "test_helpers.test_clock.advancing"
              | "test_helpers.test_clock.created"
              | "test_helpers.test_clock.deleted"
              | "test_helpers.test_clock.internal_failure"
              | "test_helpers.test_clock.ready"
              | "topup.canceled"
              | "topup.created"
              | "topup.failed"
              | "topup.reversed"
              | "topup.succeeded"
              | "transfer.created"
              | "transfer.reversed"
              | "transfer.updated"
              | "treasury.credit_reversal.created"
              | "treasury.credit_reversal.posted"
              | "treasury.debit_reversal.completed"
              | "treasury.debit_reversal.created"
              | "treasury.debit_reversal.initial_credit_granted"
              | "treasury.financial_account.closed"
              | "treasury.financial_account.created"
              | "treasury.financial_account.features_status_updated"
              | "treasury.inbound_transfer.canceled"
              | "treasury.inbound_transfer.created"
              | "treasury.inbound_transfer.failed"
              | "treasury.inbound_transfer.succeeded"
              | "treasury.outbound_payment.canceled"
              | "treasury.outbound_payment.created"
              | "treasury.outbound_payment.expected_arrival_date_updated"
              | "treasury.outbound_payment.failed"
              | "treasury.outbound_payment.posted"
              | "treasury.outbound_payment.returned"
              | "treasury.outbound_payment.tracking_details_updated"
              | "treasury.outbound_transfer.canceled"
              | "treasury.outbound_transfer.created"
              | "treasury.outbound_transfer.expected_arrival_date_updated"
              | "treasury.outbound_transfer.failed"
              | "treasury.outbound_transfer.posted"
              | "treasury.outbound_transfer.returned"
              | "treasury.outbound_transfer.tracking_details_updated"
              | "treasury.received_credit.created"
              | "treasury.received_credit.failed"
              | "treasury.received_credit.succeeded"
              | "treasury.received_debit.created"
              | UnknownEnumStringValue
            )[]
          | undefined
        expand?: string[] | undefined
        metadata?:
          | (
              | {
                  [key: string]: string | undefined
                }
              | ""
              | UnknownEnumStringValue
            )
          | undefined
        url?: string | undefined
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_webhook_endpoint>> {
    const url = `/v1/webhook_endpoints/${p["webhookEndpoint"]}`
    const headers = this._headers(
      { "Content-Type": "application/x-www-form-urlencoded" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }
}

export { StripeApi as ApiClient }
export type { StripeApiConfig as ApiClientConfig }
