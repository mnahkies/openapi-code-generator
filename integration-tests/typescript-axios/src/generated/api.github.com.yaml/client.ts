/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  EmptyObject,
  t_actions_billing_usage,
  t_actions_cache_list,
  t_actions_cache_usage_by_repository,
  t_actions_cache_usage_org_enterprise,
  t_actions_can_approve_pull_request_reviews,
  t_actions_default_workflow_permissions,
  t_actions_enabled,
  t_actions_get_default_workflow_permissions,
  t_actions_organization_permissions,
  t_actions_public_key,
  t_actions_repository_permissions,
  t_actions_secret,
  t_actions_set_default_workflow_permissions,
  t_actions_variable,
  t_actions_workflow_access_to_repository,
  t_activity,
  t_actor,
  t_added_to_project_issue_event,
  t_alert_auto_dismissed_at,
  t_alert_created_at,
  t_alert_dismissed_at,
  t_alert_fixed_at,
  t_alert_html_url,
  t_alert_instances_url,
  t_alert_number,
  t_alert_updated_at,
  t_alert_url,
  t_allowed_actions,
  t_api_overview,
  t_app_permissions,
  t_artifact,
  t_assigned_issue_event,
  t_authentication_token,
  t_author_association,
  t_authorization,
  t_auto_merge,
  t_autolink,
  t_base_gist,
  t_basic_error,
  t_blob,
  t_branch_protection,
  t_branch_restriction_policy,
  t_branch_short,
  t_branch_with_protection,
  t_check_annotation,
  t_check_automated_security_fixes,
  t_check_run,
  t_check_suite,
  t_check_suite_preference,
  t_classroom,
  t_classroom_accepted_assignment,
  t_classroom_assignment,
  t_classroom_assignment_grade,
  t_clone_traffic,
  t_code_frequency_stat,
  t_code_of_conduct,
  t_code_of_conduct_simple,
  t_code_scanning_alert,
  t_code_scanning_alert_classification,
  t_code_scanning_alert_dismissed_comment,
  t_code_scanning_alert_dismissed_reason,
  t_code_scanning_alert_environment,
  t_code_scanning_alert_instance,
  t_code_scanning_alert_items,
  t_code_scanning_alert_location,
  t_code_scanning_alert_rule,
  t_code_scanning_alert_rule_summary,
  t_code_scanning_alert_set_state,
  t_code_scanning_alert_severity,
  t_code_scanning_alert_state,
  t_code_scanning_alert_state_query,
  t_code_scanning_analysis,
  t_code_scanning_analysis_analysis_key,
  t_code_scanning_analysis_category,
  t_code_scanning_analysis_commit_sha,
  t_code_scanning_analysis_created_at,
  t_code_scanning_analysis_deletion,
  t_code_scanning_analysis_environment,
  t_code_scanning_analysis_sarif_file,
  t_code_scanning_analysis_sarif_id,
  t_code_scanning_analysis_tool,
  t_code_scanning_analysis_tool_guid,
  t_code_scanning_analysis_tool_name,
  t_code_scanning_analysis_tool_version,
  t_code_scanning_analysis_url,
  t_code_scanning_codeql_database,
  t_code_scanning_default_setup,
  t_code_scanning_default_setup_update,
  t_code_scanning_default_setup_update_response,
  t_code_scanning_organization_alert_items,
  t_code_scanning_ref,
  t_code_scanning_sarifs_receipt,
  t_code_scanning_sarifs_status,
  t_code_search_result_item,
  t_codeowners_errors,
  t_codespace,
  t_codespace_export_details,
  t_codespace_machine,
  t_codespace_with_full_repository,
  t_codespaces_org_secret,
  t_codespaces_public_key,
  t_codespaces_secret,
  t_codespaces_user_public_key,
  t_collaborator,
  t_combined_billing_usage,
  t_combined_commit_status,
  t_commit,
  t_commit_activity,
  t_commit_comment,
  t_commit_comparison,
  t_commit_search_result_item,
  t_community_profile,
  t_content_directory,
  t_content_file,
  t_content_submodule,
  t_content_symlink,
  t_content_traffic,
  t_contributor,
  t_contributor_activity,
  t_converted_note_to_issue_issue_event,
  t_copilot_organization_details,
  t_copilot_seat_breakdown,
  t_copilot_seat_details,
  t_custom_deployment_rule_app,
  t_demilestoned_issue_event,
  t_dependabot_alert,
  t_dependabot_alert_package,
  t_dependabot_alert_security_advisory,
  t_dependabot_alert_security_vulnerability,
  t_dependabot_alert_with_repository,
  t_dependabot_public_key,
  t_dependabot_secret,
  t_dependency,
  t_dependency_graph_diff,
  t_dependency_graph_spdx_sbom,
  t_deploy_key,
  t_deployment,
  t_deployment_branch_policy,
  t_deployment_branch_policy_name_pattern,
  t_deployment_branch_policy_settings,
  t_deployment_protection_rule,
  t_deployment_reviewer_type,
  t_deployment_simple,
  t_deployment_status,
  t_diff_entry,
  t_email,
  t_empty_object,
  t_enabled_repositories,
  t_enterprise,
  t_environment,
  t_environment_approvals,
  t_event,
  t_feed,
  t_file_commit,
  t_full_repository,
  t_gist_comment,
  t_gist_commit,
  t_gist_history,
  t_gist_simple,
  t_git_commit,
  t_git_ref,
  t_git_tag,
  t_git_tree,
  t_gitignore_template,
  t_global_advisory,
  t_gpg_key,
  t_hook,
  t_hook_delivery,
  t_hook_delivery_item,
  t_hook_response,
  t_hovercard,
  t_import,
  t_installation,
  t_installation_token,
  t_integration,
  t_integration_installation_request,
  t_interaction_expiry,
  t_interaction_group,
  t_interaction_limit,
  t_interaction_limit_response,
  t_issue,
  t_issue_comment,
  t_issue_event,
  t_issue_event_dismissed_review,
  t_issue_event_for_issue,
  t_issue_event_label,
  t_issue_event_milestone,
  t_issue_event_project_card,
  t_issue_event_rename,
  t_issue_search_result_item,
  t_job,
  t_key,
  t_key_simple,
  t_label,
  t_label_search_result_item,
  t_labeled_issue_event,
  t_language,
  t_license,
  t_license_content,
  t_license_simple,
  t_link,
  t_link_with_type,
  t_locked_issue_event,
  t_manifest,
  t_marketplace_account,
  t_marketplace_listing_plan,
  t_marketplace_purchase,
  t_merged_upstream,
  t_metadata,
  t_migration,
  t_milestone,
  t_milestoned_issue_event,
  t_minimal_repository,
  t_moved_column_in_project_issue_event,
  t_nullable_alert_updated_at,
  t_nullable_code_of_conduct_simple,
  t_nullable_codespace_machine,
  t_nullable_collaborator,
  t_nullable_community_health_file,
  t_nullable_git_user,
  t_nullable_integration,
  t_nullable_issue,
  t_nullable_license_simple,
  t_nullable_milestone,
  t_nullable_minimal_repository,
  t_nullable_repository,
  t_nullable_scoped_installation,
  t_nullable_simple_commit,
  t_nullable_simple_user,
  t_nullable_team_simple,
  t_oidc_custom_sub,
  t_oidc_custom_sub_repo,
  t_org_hook,
  t_org_membership,
  t_org_ruleset_conditions,
  t_organization_actions_secret,
  t_organization_actions_variable,
  t_organization_dependabot_secret,
  t_organization_full,
  t_organization_invitation,
  t_organization_programmatic_access_grant,
  t_organization_programmatic_access_grant_request,
  t_organization_secret_scanning_alert,
  t_organization_simple,
  t_package,
  t_package_version,
  t_packages_billing_usage,
  t_page,
  t_page_build,
  t_page_build_status,
  t_page_deployment,
  t_pages_health_check,
  t_pages_https_certificate,
  t_pages_source_hash,
  t_participation_stats,
  t_pending_deployment,
  t_porter_author,
  t_porter_large_file,
  t_private_user,
  t_private_vulnerability_report_create,
  t_project,
  t_project_card,
  t_project_collaborator_permission,
  t_project_column,
  t_protected_branch,
  t_protected_branch_admin_enforced,
  t_protected_branch_pull_request_review,
  t_protected_branch_required_status_check,
  t_public_user,
  t_pull_request,
  t_pull_request_merge_result,
  t_pull_request_minimal,
  t_pull_request_review,
  t_pull_request_review_comment,
  t_pull_request_review_request,
  t_pull_request_simple,
  t_rate_limit,
  t_rate_limit_overview,
  t_reaction,
  t_reaction_rollup,
  t_referenced_workflow,
  t_referrer_traffic,
  t_release,
  t_release_asset,
  t_release_notes_content,
  t_removed_from_project_issue_event,
  t_renamed_issue_event,
  t_repo_codespaces_secret,
  t_repo_search_result_item,
  t_repository,
  t_repository_advisory,
  t_repository_advisory_create,
  t_repository_advisory_credit,
  t_repository_advisory_update,
  t_repository_advisory_vulnerability,
  t_repository_collaborator_permission,
  t_repository_invitation,
  t_repository_rule,
  t_repository_rule_branch_name_pattern,
  t_repository_rule_commit_author_email_pattern,
  t_repository_rule_commit_message_pattern,
  t_repository_rule_committer_email_pattern,
  t_repository_rule_creation,
  t_repository_rule_deletion,
  t_repository_rule_detailed,
  t_repository_rule_enforcement,
  t_repository_rule_non_fast_forward,
  t_repository_rule_params_status_check_configuration,
  t_repository_rule_pull_request,
  t_repository_rule_required_deployments,
  t_repository_rule_required_linear_history,
  t_repository_rule_required_signatures,
  t_repository_rule_required_status_checks,
  t_repository_rule_ruleset_info,
  t_repository_rule_tag_name_pattern,
  t_repository_rule_update,
  t_repository_ruleset,
  t_repository_ruleset_bypass_actor,
  t_repository_ruleset_conditions,
  t_repository_ruleset_conditions_repository_id_target,
  t_repository_ruleset_conditions_repository_name_target,
  t_repository_subscription,
  t_review_comment,
  t_review_custom_gates_comment_required,
  t_review_custom_gates_state_required,
  t_review_dismissed_issue_event,
  t_review_request_removed_issue_event,
  t_review_requested_issue_event,
  t_root,
  t_runner,
  t_runner_application,
  t_runner_label,
  t_scim_error,
  t_search_result_text_matches,
  t_secret_scanning_alert,
  t_secret_scanning_alert_resolution,
  t_secret_scanning_alert_resolution_comment,
  t_secret_scanning_alert_state,
  t_secret_scanning_location,
  t_secret_scanning_location_commit,
  t_secret_scanning_location_issue_body,
  t_secret_scanning_location_issue_comment,
  t_secret_scanning_location_issue_title,
  t_security_advisory_credit_types,
  t_security_advisory_ecosystems,
  t_security_and_analysis,
  t_selected_actions,
  t_selected_actions_url,
  t_short_blob,
  t_short_branch,
  t_simple_classroom,
  t_simple_classroom_assignment,
  t_simple_classroom_organization,
  t_simple_classroom_repository,
  t_simple_classroom_user,
  t_simple_commit,
  t_simple_commit_status,
  t_simple_repository,
  t_simple_user,
  t_snapshot,
  t_social_account,
  t_ssh_signing_key,
  t_stargazer,
  t_starred_repository,
  t_state_change_issue_event,
  t_status,
  t_status_check_policy,
  t_tag,
  t_tag_protection,
  t_team,
  t_team_discussion,
  t_team_discussion_comment,
  t_team_full,
  t_team_membership,
  t_team_organization,
  t_team_project,
  t_team_repository,
  t_team_simple,
  t_thread,
  t_thread_subscription,
  t_timeline_assigned_issue_event,
  t_timeline_comment_event,
  t_timeline_commit_commented_event,
  t_timeline_committed_event,
  t_timeline_cross_referenced_event,
  t_timeline_issue_events,
  t_timeline_line_commented_event,
  t_timeline_reviewed_event,
  t_timeline_unassigned_issue_event,
  t_topic,
  t_topic_search_result_item,
  t_traffic,
  t_unassigned_issue_event,
  t_unlabeled_issue_event,
  t_user_marketplace_purchase,
  t_user_search_result_item,
  t_validation_error,
  t_validation_error_simple,
  t_verification,
  t_view_traffic,
  t_wait_timer,
  t_webhook_config,
  t_webhook_config_content_type,
  t_webhook_config_insecure_ssl,
  t_webhook_config_secret,
  t_webhook_config_url,
  t_workflow,
  t_workflow_run,
  t_workflow_run_usage,
  t_workflow_usage,
} from "./models"
import {
  s_actions_billing_usage,
  s_actions_cache_list,
  s_actions_cache_usage_by_repository,
  s_actions_cache_usage_org_enterprise,
  s_actions_can_approve_pull_request_reviews,
  s_actions_default_workflow_permissions,
  s_actions_enabled,
  s_actions_get_default_workflow_permissions,
  s_actions_organization_permissions,
  s_actions_public_key,
  s_actions_repository_permissions,
  s_actions_secret,
  s_actions_variable,
  s_actions_workflow_access_to_repository,
  s_activity,
  s_actor,
  s_added_to_project_issue_event,
  s_alert_auto_dismissed_at,
  s_alert_created_at,
  s_alert_dismissed_at,
  s_alert_fixed_at,
  s_alert_html_url,
  s_alert_instances_url,
  s_alert_number,
  s_alert_updated_at,
  s_alert_url,
  s_allowed_actions,
  s_api_overview,
  s_app_permissions,
  s_artifact,
  s_assigned_issue_event,
  s_authentication_token,
  s_author_association,
  s_authorization,
  s_auto_merge,
  s_autolink,
  s_base_gist,
  s_basic_error,
  s_blob,
  s_branch_protection,
  s_branch_restriction_policy,
  s_branch_short,
  s_branch_with_protection,
  s_check_annotation,
  s_check_automated_security_fixes,
  s_check_run,
  s_check_suite,
  s_check_suite_preference,
  s_classroom,
  s_classroom_accepted_assignment,
  s_classroom_assignment,
  s_classroom_assignment_grade,
  s_clone_traffic,
  s_code_frequency_stat,
  s_code_of_conduct,
  s_code_of_conduct_simple,
  s_code_scanning_alert,
  s_code_scanning_alert_classification,
  s_code_scanning_alert_dismissed_comment,
  s_code_scanning_alert_dismissed_reason,
  s_code_scanning_alert_environment,
  s_code_scanning_alert_instance,
  s_code_scanning_alert_items,
  s_code_scanning_alert_location,
  s_code_scanning_alert_rule,
  s_code_scanning_alert_rule_summary,
  s_code_scanning_alert_state,
  s_code_scanning_analysis,
  s_code_scanning_analysis_analysis_key,
  s_code_scanning_analysis_category,
  s_code_scanning_analysis_commit_sha,
  s_code_scanning_analysis_created_at,
  s_code_scanning_analysis_deletion,
  s_code_scanning_analysis_environment,
  s_code_scanning_analysis_sarif_id,
  s_code_scanning_analysis_tool,
  s_code_scanning_analysis_tool_guid,
  s_code_scanning_analysis_tool_name,
  s_code_scanning_analysis_tool_version,
  s_code_scanning_analysis_url,
  s_code_scanning_codeql_database,
  s_code_scanning_default_setup,
  s_code_scanning_default_setup_update_response,
  s_code_scanning_organization_alert_items,
  s_code_scanning_ref,
  s_code_scanning_sarifs_receipt,
  s_code_scanning_sarifs_status,
  s_code_search_result_item,
  s_codeowners_errors,
  s_codespace,
  s_codespace_export_details,
  s_codespace_machine,
  s_codespace_with_full_repository,
  s_codespaces_org_secret,
  s_codespaces_public_key,
  s_codespaces_secret,
  s_codespaces_user_public_key,
  s_collaborator,
  s_combined_billing_usage,
  s_combined_commit_status,
  s_commit,
  s_commit_activity,
  s_commit_comment,
  s_commit_comparison,
  s_commit_search_result_item,
  s_community_profile,
  s_content_directory,
  s_content_file,
  s_content_submodule,
  s_content_symlink,
  s_content_traffic,
  s_contributor,
  s_contributor_activity,
  s_converted_note_to_issue_issue_event,
  s_copilot_organization_details,
  s_copilot_seat_breakdown,
  s_copilot_seat_details,
  s_custom_deployment_rule_app,
  s_demilestoned_issue_event,
  s_dependabot_alert,
  s_dependabot_alert_package,
  s_dependabot_alert_security_advisory,
  s_dependabot_alert_security_vulnerability,
  s_dependabot_alert_with_repository,
  s_dependabot_public_key,
  s_dependabot_secret,
  s_dependency_graph_diff,
  s_dependency_graph_spdx_sbom,
  s_deploy_key,
  s_deployment,
  s_deployment_branch_policy,
  s_deployment_branch_policy_settings,
  s_deployment_protection_rule,
  s_deployment_reviewer_type,
  s_deployment_simple,
  s_deployment_status,
  s_diff_entry,
  s_email,
  s_empty_object,
  s_enabled_repositories,
  s_enterprise,
  s_environment,
  s_environment_approvals,
  s_event,
  s_feed,
  s_file_commit,
  s_full_repository,
  s_gist_comment,
  s_gist_commit,
  s_gist_history,
  s_gist_simple,
  s_git_commit,
  s_git_ref,
  s_git_tag,
  s_git_tree,
  s_gitignore_template,
  s_global_advisory,
  s_gpg_key,
  s_hook,
  s_hook_delivery,
  s_hook_delivery_item,
  s_hook_response,
  s_hovercard,
  s_import,
  s_installation,
  s_installation_token,
  s_integration,
  s_integration_installation_request,
  s_interaction_group,
  s_interaction_limit_response,
  s_issue,
  s_issue_comment,
  s_issue_event,
  s_issue_event_dismissed_review,
  s_issue_event_for_issue,
  s_issue_event_label,
  s_issue_event_milestone,
  s_issue_event_project_card,
  s_issue_event_rename,
  s_issue_search_result_item,
  s_job,
  s_key,
  s_key_simple,
  s_label,
  s_label_search_result_item,
  s_labeled_issue_event,
  s_language,
  s_license,
  s_license_content,
  s_license_simple,
  s_link,
  s_link_with_type,
  s_locked_issue_event,
  s_marketplace_account,
  s_marketplace_listing_plan,
  s_marketplace_purchase,
  s_merged_upstream,
  s_migration,
  s_milestone,
  s_milestoned_issue_event,
  s_minimal_repository,
  s_moved_column_in_project_issue_event,
  s_nullable_alert_updated_at,
  s_nullable_code_of_conduct_simple,
  s_nullable_codespace_machine,
  s_nullable_collaborator,
  s_nullable_community_health_file,
  s_nullable_git_user,
  s_nullable_integration,
  s_nullable_issue,
  s_nullable_license_simple,
  s_nullable_milestone,
  s_nullable_minimal_repository,
  s_nullable_repository,
  s_nullable_scoped_installation,
  s_nullable_simple_commit,
  s_nullable_simple_user,
  s_nullable_team_simple,
  s_oidc_custom_sub,
  s_oidc_custom_sub_repo,
  s_org_hook,
  s_org_membership,
  s_org_ruleset_conditions,
  s_organization_actions_secret,
  s_organization_actions_variable,
  s_organization_dependabot_secret,
  s_organization_full,
  s_organization_invitation,
  s_organization_programmatic_access_grant,
  s_organization_programmatic_access_grant_request,
  s_organization_secret_scanning_alert,
  s_organization_simple,
  s_package,
  s_package_version,
  s_packages_billing_usage,
  s_page,
  s_page_build,
  s_page_build_status,
  s_page_deployment,
  s_pages_health_check,
  s_pages_https_certificate,
  s_pages_source_hash,
  s_participation_stats,
  s_pending_deployment,
  s_porter_author,
  s_porter_large_file,
  s_private_user,
  s_project,
  s_project_card,
  s_project_collaborator_permission,
  s_project_column,
  s_protected_branch,
  s_protected_branch_admin_enforced,
  s_protected_branch_pull_request_review,
  s_protected_branch_required_status_check,
  s_public_user,
  s_pull_request,
  s_pull_request_merge_result,
  s_pull_request_minimal,
  s_pull_request_review,
  s_pull_request_review_comment,
  s_pull_request_review_request,
  s_pull_request_simple,
  s_rate_limit,
  s_rate_limit_overview,
  s_reaction,
  s_reaction_rollup,
  s_referenced_workflow,
  s_referrer_traffic,
  s_release,
  s_release_asset,
  s_release_notes_content,
  s_removed_from_project_issue_event,
  s_renamed_issue_event,
  s_repo_codespaces_secret,
  s_repo_search_result_item,
  s_repository,
  s_repository_advisory,
  s_repository_advisory_credit,
  s_repository_advisory_vulnerability,
  s_repository_collaborator_permission,
  s_repository_invitation,
  s_repository_rule,
  s_repository_rule_branch_name_pattern,
  s_repository_rule_commit_author_email_pattern,
  s_repository_rule_commit_message_pattern,
  s_repository_rule_committer_email_pattern,
  s_repository_rule_creation,
  s_repository_rule_deletion,
  s_repository_rule_detailed,
  s_repository_rule_enforcement,
  s_repository_rule_non_fast_forward,
  s_repository_rule_params_status_check_configuration,
  s_repository_rule_pull_request,
  s_repository_rule_required_deployments,
  s_repository_rule_required_linear_history,
  s_repository_rule_required_signatures,
  s_repository_rule_required_status_checks,
  s_repository_rule_ruleset_info,
  s_repository_rule_tag_name_pattern,
  s_repository_rule_update,
  s_repository_ruleset,
  s_repository_ruleset_bypass_actor,
  s_repository_ruleset_conditions,
  s_repository_ruleset_conditions_repository_id_target,
  s_repository_ruleset_conditions_repository_name_target,
  s_repository_subscription,
  s_review_comment,
  s_review_dismissed_issue_event,
  s_review_request_removed_issue_event,
  s_review_requested_issue_event,
  s_root,
  s_runner,
  s_runner_application,
  s_runner_label,
  s_scim_error,
  s_search_result_text_matches,
  s_secret_scanning_alert,
  s_secret_scanning_alert_resolution,
  s_secret_scanning_alert_state,
  s_secret_scanning_location,
  s_secret_scanning_location_commit,
  s_secret_scanning_location_issue_body,
  s_secret_scanning_location_issue_comment,
  s_secret_scanning_location_issue_title,
  s_security_advisory_credit_types,
  s_security_advisory_ecosystems,
  s_security_and_analysis,
  s_selected_actions,
  s_selected_actions_url,
  s_short_blob,
  s_short_branch,
  s_simple_classroom,
  s_simple_classroom_assignment,
  s_simple_classroom_organization,
  s_simple_classroom_repository,
  s_simple_classroom_user,
  s_simple_commit,
  s_simple_commit_status,
  s_simple_repository,
  s_simple_user,
  s_social_account,
  s_ssh_signing_key,
  s_stargazer,
  s_starred_repository,
  s_state_change_issue_event,
  s_status,
  s_status_check_policy,
  s_tag,
  s_tag_protection,
  s_team,
  s_team_discussion,
  s_team_discussion_comment,
  s_team_full,
  s_team_membership,
  s_team_organization,
  s_team_project,
  s_team_repository,
  s_team_simple,
  s_thread,
  s_thread_subscription,
  s_timeline_assigned_issue_event,
  s_timeline_comment_event,
  s_timeline_commit_commented_event,
  s_timeline_committed_event,
  s_timeline_cross_referenced_event,
  s_timeline_issue_events,
  s_timeline_line_commented_event,
  s_timeline_reviewed_event,
  s_timeline_unassigned_issue_event,
  s_topic,
  s_topic_search_result_item,
  s_traffic,
  s_unassigned_issue_event,
  s_unlabeled_issue_event,
  s_user_marketplace_purchase,
  s_user_search_result_item,
  s_validation_error,
  s_validation_error_simple,
  s_verification,
  s_view_traffic,
  s_wait_timer,
  s_webhook_config,
  s_webhook_config_content_type,
  s_webhook_config_insecure_ssl,
  s_webhook_config_secret,
  s_webhook_config_url,
  s_workflow,
  s_workflow_run,
  s_workflow_run_usage,
  s_workflow_usage,
} from "./schemas"
import {
  AbstractAxiosClient,
  AbstractAxiosConfig,
} from "@nahkies/typescript-axios-runtime/main"
import axios, { AxiosRequestConfig, AxiosResponse } from "axios"
import { z } from "zod"

export class ApiClient extends AbstractAxiosClient {
  constructor(config: AbstractAxiosConfig) {
    super(config)
  }

  async metaRoot(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_root>> {
    const url = `/`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_root.parse(res.data) }
  }

  async securityAdvisoriesListGlobalAdvisories(
    p: {
      ghsaId?: string
      type?: "reviewed" | "malware" | "unreviewed"
      cveId?: string
      ecosystem?:
        | "actions"
        | "composer"
        | "erlang"
        | "go"
        | "maven"
        | "npm"
        | "nuget"
        | "other"
        | "pip"
        | "pub"
        | "rubygems"
        | "rust"
      severity?: "unknown" | "low" | "medium" | "high" | "critical"
      cwes?: string | string[]
      isWithdrawn?: boolean
      affects?: string | string[]
      published?: string
      updated?: string
      modified?: string
      before?: string
      after?: string
      direction?: "asc" | "desc"
      perPage?: number
      sort?: "updated" | "published"
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_global_advisory[]>> {
    const url = `/advisories`
    const query = this._query({
      ghsa_id: p["ghsaId"],
      type: p["type"],
      cve_id: p["cveId"],
      ecosystem: p["ecosystem"],
      severity: p["severity"],
      cwes: p["cwes"],
      is_withdrawn: p["isWithdrawn"],
      affects: p["affects"],
      published: p["published"],
      updated: p["updated"],
      modified: p["modified"],
      before: p["before"],
      after: p["after"],
      direction: p["direction"],
      per_page: p["perPage"],
      sort: p["sort"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_global_advisory).parse(res.data) }
  }

  async securityAdvisoriesGetGlobalAdvisory(
    p: {
      ghsaId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_global_advisory>> {
    const url = `/advisories/${p["ghsaId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_global_advisory.parse(res.data) }
  }

  async appsGetAuthenticated(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_integration>> {
    const url = `/app`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_integration.parse(res.data) }
  }

  async appsCreateFromManifest(
    p: {
      code: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<
      t_integration &
        (
          | {
              client_id: string
              client_secret: string
              pem: string
              webhook_secret: string | null
            }
          | {
              [key: string]: unknown
            }
        )
    >
  > {
    const url = `/app-manifests/${p["code"]}/conversions`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: s_integration
        .merge(
          z.object({
            client_id: z.string(),
            client_secret: z.string(),
            webhook_secret: z.string().nullable(),
            pem: z.string(),
          }),
        )
        .parse(res.data),
    }
  }

  async appsGetWebhookConfigForApp(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_webhook_config>> {
    const url = `/app/hook/config`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_webhook_config.parse(res.data) }
  }

  async appsUpdateWebhookConfigForApp(
    p: {
      requestBody: {
        content_type?: t_webhook_config_content_type
        insecure_ssl?: t_webhook_config_insecure_ssl
        secret?: t_webhook_config_secret
        url?: t_webhook_config_url
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_webhook_config>> {
    const url = `/app/hook/config`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_webhook_config.parse(res.data) }
  }

  async appsListWebhookDeliveries(
    p: {
      perPage?: number
      cursor?: string
      redelivery?: boolean
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_hook_delivery_item[]>> {
    const url = `/app/hook/deliveries`
    const query = this._query({
      per_page: p["perPage"],
      cursor: p["cursor"],
      redelivery: p["redelivery"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_hook_delivery_item).parse(res.data) }
  }

  async appsGetWebhookDelivery(
    p: {
      deliveryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_hook_delivery>> {
    const url = `/app/hook/deliveries/${p["deliveryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_hook_delivery.parse(res.data) }
  }

  async appsRedeliverWebhookDelivery(
    p: {
      deliveryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject>> {
    const url = `/app/hook/deliveries/${p["deliveryId"]}/attempts`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async appsListInstallationRequestsForAuthenticatedApp(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_integration_installation_request[]>> {
    const url = `/app/installation-requests`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_integration_installation_request).parse(res.data),
    }
  }

  async appsListInstallations(
    p: {
      perPage?: number
      page?: number
      since?: string
      outdated?: string
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_installation[]>> {
    const url = `/app/installations`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      since: p["since"],
      outdated: p["outdated"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_installation).parse(res.data) }
  }

  async appsGetInstallation(
    p: {
      installationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_installation>> {
    const url = `/app/installations/${p["installationId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_installation.parse(res.data) }
  }

  async appsDeleteInstallation(
    p: {
      installationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/app/installations/${p["installationId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async appsCreateInstallationAccessToken(
    p: {
      installationId: number
      requestBody?: {
        permissions?: t_app_permissions
        repositories?: string[]
        repository_ids?: number[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_installation_token>> {
    const url = `/app/installations/${p["installationId"]}/access_tokens`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_installation_token.parse(res.data) }
  }

  async appsSuspendInstallation(
    p: {
      installationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/app/installations/${p["installationId"]}/suspended`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async appsUnsuspendInstallation(
    p: {
      installationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/app/installations/${p["installationId"]}/suspended`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async appsDeleteAuthorization(
    p: {
      clientId: string
      requestBody: {
        access_token: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/applications/${p["clientId"]}/grant`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async appsCheckToken(
    p: {
      clientId: string
      requestBody: {
        access_token: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_authorization>> {
    const url = `/applications/${p["clientId"]}/token`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_authorization.parse(res.data) }
  }

  async appsResetToken(
    p: {
      clientId: string
      requestBody: {
        access_token: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_authorization>> {
    const url = `/applications/${p["clientId"]}/token`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_authorization.parse(res.data) }
  }

  async appsDeleteToken(
    p: {
      clientId: string
      requestBody: {
        access_token: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/applications/${p["clientId"]}/token`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async appsScopeToken(
    p: {
      clientId: string
      requestBody: {
        access_token: string
        permissions?: t_app_permissions
        repositories?: string[]
        repository_ids?: number[]
        target?: string
        target_id?: number
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_authorization>> {
    const url = `/applications/${p["clientId"]}/token/scoped`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_authorization.parse(res.data) }
  }

  async appsGetBySlug(
    p: {
      appSlug: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_integration>> {
    const url = `/apps/${p["appSlug"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_integration.parse(res.data) }
  }

  async classroomGetAnAssignment(
    p: {
      assignmentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_classroom_assignment>> {
    const url = `/assignments/${p["assignmentId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_classroom_assignment.parse(res.data) }
  }

  async classroomListAcceptedAssigmentsForAnAssignment(
    p: {
      assignmentId: number
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_classroom_accepted_assignment[]>> {
    const url = `/assignments/${p["assignmentId"]}/accepted_assignments`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_classroom_accepted_assignment).parse(res.data),
    }
  }

  async classroomGetAssignmentGrades(
    p: {
      assignmentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_classroom_assignment_grade[]>> {
    const url = `/assignments/${p["assignmentId"]}/grades`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_classroom_assignment_grade).parse(res.data),
    }
  }

  async classroomListClassrooms(
    p: {
      page?: number
      perPage?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_classroom[]>> {
    const url = `/classrooms`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_classroom).parse(res.data) }
  }

  async classroomGetAClassroom(
    p: {
      classroomId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_classroom>> {
    const url = `/classrooms/${p["classroomId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_classroom.parse(res.data) }
  }

  async classroomListAssignmentsForAClassroom(
    p: {
      classroomId: number
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_classroom_assignment[]>> {
    const url = `/classrooms/${p["classroomId"]}/assignments`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_simple_classroom_assignment).parse(res.data),
    }
  }

  async codesOfConductGetAllCodesOfConduct(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_of_conduct[]>> {
    const url = `/codes_of_conduct`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_code_of_conduct).parse(res.data) }
  }

  async codesOfConductGetConductCode(
    p: {
      key: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_of_conduct>> {
    const url = `/codes_of_conduct/${p["key"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_code_of_conduct.parse(res.data) }
  }

  async emojisGet(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      [key: string]: string
    }>
  > {
    const url = `/emojis`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async dependabotListAlertsForEnterprise(
    p: {
      enterprise: string
      state?: string
      severity?: string
      ecosystem?: string
      package?: string
      scope?: "development" | "runtime"
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      before?: string
      after?: string
      first?: number
      last?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_dependabot_alert_with_repository[]>> {
    const url = `/enterprises/${p["enterprise"]}/dependabot/alerts`
    const query = this._query({
      state: p["state"],
      severity: p["severity"],
      ecosystem: p["ecosystem"],
      package: p["package"],
      scope: p["scope"],
      sort: p["sort"],
      direction: p["direction"],
      before: p["before"],
      after: p["after"],
      first: p["first"],
      last: p["last"],
      per_page: p["perPage"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_dependabot_alert_with_repository).parse(res.data),
    }
  }

  async secretScanningListAlertsForEnterprise(
    p: {
      enterprise: string
      state?: "open" | "resolved"
      secretType?: string
      resolution?: string
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      perPage?: number
      before?: string
      after?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_secret_scanning_alert[]>> {
    const url = `/enterprises/${p["enterprise"]}/secret-scanning/alerts`
    const query = this._query({
      state: p["state"],
      secret_type: p["secretType"],
      resolution: p["resolution"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_organization_secret_scanning_alert).parse(res.data),
    }
  }

  async activityListPublicEvents(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_event[]>> {
    const url = `/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_event).parse(res.data) }
  }

  async activityGetFeeds(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_feed>> {
    const url = `/feeds`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_feed.parse(res.data) }
  }

  async gistsList(
    p: {
      since?: string
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_base_gist[]>> {
    const url = `/gists`
    const query = this._query({
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_base_gist).parse(res.data) }
  }

  async gistsCreate(
    p: {
      requestBody: {
        description?: string
        files: {
          [key: string]: {
            content: string
          }
        }
        public?: boolean | "true" | "false"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gist_simple>> {
    const url = `/gists`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_gist_simple.parse(res.data) }
  }

  async gistsListPublic(
    p: {
      since?: string
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_base_gist[]>> {
    const url = `/gists/public`
    const query = this._query({
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_base_gist).parse(res.data) }
  }

  async gistsListStarred(
    p: {
      since?: string
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_base_gist[]>> {
    const url = `/gists/starred`
    const query = this._query({
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_base_gist).parse(res.data) }
  }

  async gistsGet(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gist_simple>> {
    const url = `/gists/${p["gistId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_gist_simple.parse(res.data) }
  }

  async gistsUpdate(
    p: {
      gistId: string
      requestBody: {
        description?: string
        files?: {
          [key: string]: {
            content?: string
            filename?: string | null
          } | null
        }
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gist_simple>> {
    const url = `/gists/${p["gistId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_gist_simple.parse(res.data) }
  }

  async gistsDelete(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/gists/${p["gistId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async gistsListComments(
    p: {
      gistId: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gist_comment[]>> {
    const url = `/gists/${p["gistId"]}/comments`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_gist_comment).parse(res.data) }
  }

  async gistsCreateComment(
    p: {
      gistId: string
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gist_comment>> {
    const url = `/gists/${p["gistId"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_gist_comment.parse(res.data) }
  }

  async gistsGetComment(
    p: {
      gistId: string
      commentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gist_comment>> {
    const url = `/gists/${p["gistId"]}/comments/${p["commentId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_gist_comment.parse(res.data) }
  }

  async gistsUpdateComment(
    p: {
      gistId: string
      commentId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gist_comment>> {
    const url = `/gists/${p["gistId"]}/comments/${p["commentId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_gist_comment.parse(res.data) }
  }

  async gistsDeleteComment(
    p: {
      gistId: string
      commentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/gists/${p["gistId"]}/comments/${p["commentId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async gistsListCommits(
    p: {
      gistId: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gist_commit[]>> {
    const url = `/gists/${p["gistId"]}/commits`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_gist_commit).parse(res.data) }
  }

  async gistsListForks(
    p: {
      gistId: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gist_simple[]>> {
    const url = `/gists/${p["gistId"]}/forks`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_gist_simple).parse(res.data) }
  }

  async gistsFork(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_base_gist>> {
    const url = `/gists/${p["gistId"]}/forks`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_base_gist.parse(res.data) }
  }

  async gistsCheckIsStarred(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/gists/${p["gistId"]}/star`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async gistsStar(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/gists/${p["gistId"]}/star`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async gistsUnstar(
    p: {
      gistId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/gists/${p["gistId"]}/star`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async gistsGetRevision(
    p: {
      gistId: string
      sha: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gist_simple>> {
    const url = `/gists/${p["gistId"]}/${p["sha"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_gist_simple.parse(res.data) }
  }

  async gitignoreGetAllTemplates(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<string[]>> {
    const url = `/gitignore/templates`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(z.string()).parse(res.data) }
  }

  async gitignoreGetTemplate(
    p: {
      name: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gitignore_template>> {
    const url = `/gitignore/templates/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_gitignore_template.parse(res.data) }
  }

  async appsListReposAccessibleToInstallation(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      repositories: t_repository[]
      repository_selection?: string
      total_count: number
    }>
  > {
    const url = `/installation/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          repositories: z.array(s_repository),
          repository_selection: z.string().optional(),
        })
        .parse(res.data),
    }
  }

  async appsRevokeInstallationAccessToken(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/installation/token`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async issuesList(
    p: {
      filter?:
        | "assigned"
        | "created"
        | "mentioned"
        | "subscribed"
        | "repos"
        | "all"
      state?: "open" | "closed" | "all"
      labels?: string
      sort?: "created" | "updated" | "comments"
      direction?: "asc" | "desc"
      since?: string
      collab?: boolean
      orgs?: boolean
      owned?: boolean
      pulls?: boolean
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue[]>> {
    const url = `/issues`
    const query = this._query({
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      collab: p["collab"],
      orgs: p["orgs"],
      owned: p["owned"],
      pulls: p["pulls"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_issue).parse(res.data) }
  }

  async licensesGetAllCommonlyUsed(
    p: {
      featured?: boolean
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_license_simple[]>> {
    const url = `/licenses`
    const query = this._query({
      featured: p["featured"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_license_simple).parse(res.data) }
  }

  async licensesGet(
    p: {
      license: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_license>> {
    const url = `/licenses/${p["license"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_license.parse(res.data) }
  }

  async markdownRender(
    p: {
      requestBody: {
        context?: string
        mode?: "markdown" | "gfm"
        text: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<string>> {
    const url = `/markdown`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.string().parse(res.data) }
  }

  async markdownRenderRaw(
    p: {
      requestBody?: string
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<string>> {
    const url = `/markdown/raw`
    const headers = this._headers({ "Content-Type": "text/plain" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.string().parse(res.data) }
  }

  async appsGetSubscriptionPlanForAccount(
    p: {
      accountId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_marketplace_purchase>> {
    const url = `/marketplace_listing/accounts/${p["accountId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_marketplace_purchase.parse(res.data) }
  }

  async appsListPlans(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_marketplace_listing_plan[]>> {
    const url = `/marketplace_listing/plans`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_marketplace_listing_plan).parse(res.data) }
  }

  async appsListAccountsForPlan(
    p: {
      planId: number
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_marketplace_purchase[]>> {
    const url = `/marketplace_listing/plans/${p["planId"]}/accounts`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_marketplace_purchase).parse(res.data) }
  }

  async appsGetSubscriptionPlanForAccountStubbed(
    p: {
      accountId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_marketplace_purchase>> {
    const url = `/marketplace_listing/stubbed/accounts/${p["accountId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_marketplace_purchase.parse(res.data) }
  }

  async appsListPlansStubbed(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_marketplace_listing_plan[]>> {
    const url = `/marketplace_listing/stubbed/plans`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_marketplace_listing_plan).parse(res.data) }
  }

  async appsListAccountsForPlanStubbed(
    p: {
      planId: number
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_marketplace_purchase[]>> {
    const url = `/marketplace_listing/stubbed/plans/${p["planId"]}/accounts`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_marketplace_purchase).parse(res.data) }
  }

  async metaGet(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_api_overview>> {
    const url = `/meta`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_api_overview.parse(res.data) }
  }

  async activityListPublicEventsForRepoNetwork(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_event[]>> {
    const url = `/networks/${p["owner"]}/${p["repo"]}/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_event).parse(res.data) }
  }

  async activityListNotificationsForAuthenticatedUser(
    p: {
      all?: boolean
      participating?: boolean
      since?: string
      before?: string
      page?: number
      perPage?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_thread[]>> {
    const url = `/notifications`
    const query = this._query({
      all: p["all"],
      participating: p["participating"],
      since: p["since"],
      before: p["before"],
      page: p["page"],
      per_page: p["perPage"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_thread).parse(res.data) }
  }

  async activityMarkNotificationsAsRead(
    p: {
      requestBody?: {
        last_read_at?: string
        read?: boolean
      }
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    | AxiosResponse<{
        message?: string
      }>
    | AxiosResponse<void>
  > {
    const url = `/notifications`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.object({ message: z.string().optional() }).parse(res.data),
    }
  }

  async activityGetThread(
    p: {
      threadId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_thread>> {
    const url = `/notifications/threads/${p["threadId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_thread.parse(res.data) }
  }

  async activityMarkThreadAsRead(
    p: {
      threadId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/notifications/threads/${p["threadId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async activityGetThreadSubscriptionForAuthenticatedUser(
    p: {
      threadId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_thread_subscription>> {
    const url = `/notifications/threads/${p["threadId"]}/subscription`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_thread_subscription.parse(res.data) }
  }

  async activitySetThreadSubscription(
    p: {
      threadId: number
      requestBody?: {
        ignored?: boolean
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_thread_subscription>> {
    const url = `/notifications/threads/${p["threadId"]}/subscription`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_thread_subscription.parse(res.data) }
  }

  async activityDeleteThreadSubscription(
    p: {
      threadId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/notifications/threads/${p["threadId"]}/subscription`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async metaGetOctocat(
    p: {
      s?: string
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<string>> {
    const url = `/octocat`
    const query = this._query({ s: p["s"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.string().parse(res.data) }
  }

  async orgsList(
    p: {
      since?: number
      perPage?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_simple[]>> {
    const url = `/organizations`
    const query = this._query({ since: p["since"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_organization_simple).parse(res.data) }
  }

  async orgsGet(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_full>> {
    const url = `/orgs/${p["org"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_organization_full.parse(res.data) }
  }

  async orgsUpdate(
    p: {
      org: string
      requestBody?: {
        advanced_security_enabled_for_new_repositories?: boolean
        billing_email?: string
        blog?: string
        company?: string
        default_repository_permission?: "read" | "write" | "admin" | "none"
        dependabot_alerts_enabled_for_new_repositories?: boolean
        dependabot_security_updates_enabled_for_new_repositories?: boolean
        dependency_graph_enabled_for_new_repositories?: boolean
        description?: string
        email?: string
        has_organization_projects?: boolean
        has_repository_projects?: boolean
        location?: string
        members_allowed_repository_creation_type?: "all" | "private" | "none"
        members_can_create_internal_repositories?: boolean
        members_can_create_pages?: boolean
        members_can_create_private_pages?: boolean
        members_can_create_private_repositories?: boolean
        members_can_create_public_pages?: boolean
        members_can_create_public_repositories?: boolean
        members_can_create_repositories?: boolean
        members_can_fork_private_repositories?: boolean
        name?: string
        secret_scanning_enabled_for_new_repositories?: boolean
        secret_scanning_push_protection_custom_link?: string
        secret_scanning_push_protection_custom_link_enabled?: boolean
        secret_scanning_push_protection_enabled_for_new_repositories?: boolean
        twitter_username?: string
        web_commit_signoff_required?: boolean
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_full>> {
    const url = `/orgs/${p["org"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_organization_full.parse(res.data) }
  }

  async orgsDelete(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject>> {
    const url = `/orgs/${p["org"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async actionsGetActionsCacheUsageForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_cache_usage_org_enterprise>> {
    const url = `/orgs/${p["org"]}/actions/cache/usage`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: s_actions_cache_usage_org_enterprise.parse(res.data),
    }
  }

  async actionsGetActionsCacheUsageByRepoForOrg(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      repository_cache_usages: t_actions_cache_usage_by_repository[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/cache/usage-by-repository`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          repository_cache_usages: z.array(s_actions_cache_usage_by_repository),
        })
        .parse(res.data),
    }
  }

  async oidcGetOidcCustomSubTemplateForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_oidc_custom_sub>> {
    const url = `/orgs/${p["org"]}/actions/oidc/customization/sub`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_oidc_custom_sub.parse(res.data) }
  }

  async oidcUpdateOidcCustomSubTemplateForOrg(
    p: {
      org: string
      requestBody: t_oidc_custom_sub
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/orgs/${p["org"]}/actions/oidc/customization/sub`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsGetGithubActionsPermissionsOrganization(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_organization_permissions>> {
    const url = `/orgs/${p["org"]}/actions/permissions`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_organization_permissions.parse(res.data) }
  }

  async actionsSetGithubActionsPermissionsOrganization(
    p: {
      org: string
      requestBody: {
        allowed_actions?: t_allowed_actions
        enabled_repositories: t_enabled_repositories
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/permissions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListSelectedRepositoriesEnabledGithubActionsOrganization(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      repositories: t_repository[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/permissions/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          repositories: z.array(s_repository),
        })
        .parse(res.data),
    }
  }

  async actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(
    p: {
      org: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/permissions/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsEnableSelectedRepositoryGithubActionsOrganization(
    p: {
      org: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/permissions/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsDisableSelectedRepositoryGithubActionsOrganization(
    p: {
      org: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/permissions/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsGetAllowedActionsOrganization(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_selected_actions>> {
    const url = `/orgs/${p["org"]}/actions/permissions/selected-actions`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_selected_actions.parse(res.data) }
  }

  async actionsSetAllowedActionsOrganization(
    p: {
      org: string
      requestBody?: t_selected_actions
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/permissions/selected-actions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_get_default_workflow_permissions>> {
    const url = `/orgs/${p["org"]}/actions/permissions/workflow`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: s_actions_get_default_workflow_permissions.parse(res.data),
    }
  }

  async actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(
    p: {
      org: string
      requestBody?: t_actions_set_default_workflow_permissions
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/permissions/workflow`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListSelfHostedRunnersForOrg(
    p: {
      name?: string
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      runners: t_runner[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/runners`
    const query = this._query({
      name: p["name"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({ total_count: z.coerce.number(), runners: z.array(s_runner) })
        .parse(res.data),
    }
  }

  async actionsListRunnerApplicationsForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_runner_application[]>> {
    const url = `/orgs/${p["org"]}/actions/runners/downloads`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_runner_application).parse(res.data) }
  }

  async actionsGenerateRunnerJitconfigForOrg(
    p: {
      org: string
      requestBody: {
        labels: string[]
        name: string
        runner_group_id: number
        work_folder?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      encoded_jit_config: string
      runner: t_runner
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/runners/generate-jitconfig`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({ runner: s_runner, encoded_jit_config: z.string() })
        .parse(res.data),
    }
  }

  async actionsCreateRegistrationTokenForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_authentication_token>> {
    const url = `/orgs/${p["org"]}/actions/runners/registration-token`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_authentication_token.parse(res.data) }
  }

  async actionsCreateRemoveTokenForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_authentication_token>> {
    const url = `/orgs/${p["org"]}/actions/runners/remove-token`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_authentication_token.parse(res.data) }
  }

  async actionsGetSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_runner>> {
    const url = `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_runner.parse(res.data) }
  }

  async actionsDeleteSelfHostedRunnerFromOrg(
    p: {
      org: string
      runnerId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListLabelsForSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      labels: t_runner_label[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        })
        .parse(res.data),
    }
  }

  async actionsAddCustomLabelsToSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
      requestBody: {
        labels: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      labels: t_runner_label[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        })
        .parse(res.data),
    }
  }

  async actionsSetCustomLabelsForSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
      requestBody: {
        labels: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      labels: t_runner_label[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        })
        .parse(res.data),
    }
  }

  async actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      labels: t_runner_label[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        })
        .parse(res.data),
    }
  }

  async actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(
    p: {
      org: string
      runnerId: number
      name: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      labels: t_runner_label[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        })
        .parse(res.data),
    }
  }

  async actionsListOrgSecrets(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      secrets: t_organization_actions_secret[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          secrets: z.array(s_organization_actions_secret),
        })
        .parse(res.data),
    }
  }

  async actionsGetOrgPublicKey(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_public_key>> {
    const url = `/orgs/${p["org"]}/actions/secrets/public-key`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_public_key.parse(res.data) }
  }

  async actionsGetOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_actions_secret>> {
    const url = `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_organization_actions_secret.parse(res.data) }
  }

  async actionsCreateOrUpdateOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
        selected_repository_ids?: number[]
        visibility: "all" | "private" | "selected"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object> | AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsDeleteOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      repositories: t_minimal_repository[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          repositories: z.array(s_minimal_repository),
        })
        .parse(res.data),
    }
  }

  async actionsSetSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsAddSelectedRepoToOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsRemoveSelectedRepoFromOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListOrgVariables(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      total_count: number
      variables: t_organization_actions_variable[]
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/variables`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          variables: z.array(s_organization_actions_variable),
        })
        .parse(res.data),
    }
  }

  async actionsCreateOrgVariable(
    p: {
      org: string
      requestBody: {
        name: string
        selected_repository_ids?: number[]
        value: string
        visibility: "all" | "private" | "selected"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/orgs/${p["org"]}/actions/variables`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsGetOrgVariable(
    p: {
      org: string
      name: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_actions_variable>> {
    const url = `/orgs/${p["org"]}/actions/variables/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_organization_actions_variable.parse(res.data) }
  }

  async actionsUpdateOrgVariable(
    p: {
      org: string
      name: string
      requestBody: {
        name?: string
        selected_repository_ids?: number[]
        value?: string
        visibility?: "all" | "private" | "selected"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/variables/${p["name"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsDeleteOrgVariable(
    p: {
      org: string
      name: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/variables/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListSelectedReposForOrgVariable(
    p: {
      org: string
      name: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      repositories: t_minimal_repository[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          repositories: z.array(s_minimal_repository),
        })
        .parse(res.data),
    }
  }

  async actionsSetSelectedReposForOrgVariable(
    p: {
      org: string
      name: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsAddSelectedRepoToOrgVariable(
    p: {
      org: string
      name: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsRemoveSelectedRepoFromOrgVariable(
    p: {
      org: string
      name: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsListBlockedUsers(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/orgs/${p["org"]}/blocks`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async orgsCheckBlockedUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/blocks/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsBlockUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/blocks/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsUnblockUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/blocks/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codeScanningListAlertsForOrg(
    p: {
      org: string
      toolName?: t_code_scanning_analysis_tool_name
      toolGuid?: t_code_scanning_analysis_tool_guid
      before?: string
      after?: string
      page?: number
      perPage?: number
      direction?: "asc" | "desc"
      state?: t_code_scanning_alert_state_query
      sort?: "created" | "updated"
      severity?: t_code_scanning_alert_severity
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_organization_alert_items[]>> {
    const url = `/orgs/${p["org"]}/code-scanning/alerts`
    const query = this._query({
      tool_name: p["toolName"],
      tool_guid: p["toolGuid"],
      before: p["before"],
      after: p["after"],
      page: p["page"],
      per_page: p["perPage"],
      direction: p["direction"],
      state: p["state"],
      sort: p["sort"],
      severity: p["severity"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_code_scanning_organization_alert_items).parse(res.data),
    }
  }

  async codespacesListInOrganization(
    p: {
      perPage?: number
      page?: number
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      codespaces: t_codespace[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/codespaces`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          codespaces: z.array(s_codespace),
        })
        .parse(res.data),
    }
  }

  async codespacesSetCodespacesAccess(
    p: {
      org: string
      requestBody: {
        selected_usernames?: string[]
        visibility:
          | "disabled"
          | "selected_members"
          | "all_members"
          | "all_members_and_outside_collaborators"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/codespaces/access`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesSetCodespacesAccessUsers(
    p: {
      org: string
      requestBody: {
        selected_usernames: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/codespaces/access/selected_users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesDeleteCodespacesAccessUsers(
    p: {
      org: string
      requestBody: {
        selected_usernames: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/codespaces/access/selected_users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesListOrgSecrets(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      secrets: t_codespaces_org_secret[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/codespaces/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          secrets: z.array(s_codespaces_org_secret),
        })
        .parse(res.data),
    }
  }

  async codespacesGetOrgPublicKey(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespaces_public_key>> {
    const url = `/orgs/${p["org"]}/codespaces/secrets/public-key`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespaces_public_key.parse(res.data) }
  }

  async codespacesGetOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespaces_org_secret>> {
    const url = `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespaces_org_secret.parse(res.data) }
  }

  async codespacesCreateOrUpdateOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
        selected_repository_ids?: number[]
        visibility: "all" | "private" | "selected"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object> | AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async codespacesDeleteOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesListSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      repositories: t_minimal_repository[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          repositories: z.array(s_minimal_repository),
        })
        .parse(res.data),
    }
  }

  async codespacesSetSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesAddSelectedRepoToOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesRemoveSelectedRepoFromOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async copilotGetCopilotOrganizationDetails(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_copilot_organization_details>> {
    const url = `/orgs/${p["org"]}/copilot/billing`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_copilot_organization_details.parse(res.data) }
  }

  async copilotListCopilotSeats(
    p: {
      org: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      seats?: t_copilot_seat_details[]
      total_seats?: number
    }>
  > {
    const url = `/orgs/${p["org"]}/copilot/billing/seats`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_seats: z.coerce.number().optional(),
          seats: z.array(s_copilot_seat_details).optional(),
        })
        .parse(res.data),
    }
  }

  async copilotAddCopilotForBusinessSeatsForTeams(
    p: {
      org: string
      requestBody: {
        selected_teams: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      seats_created: number
    }>
  > {
    const url = `/orgs/${p["org"]}/copilot/billing/selected_teams`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.object({ seats_created: z.coerce.number() }).parse(res.data),
    }
  }

  async copilotCancelCopilotSeatAssignmentForTeams(
    p: {
      org: string
      requestBody: {
        selected_teams: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      seats_cancelled: number
    }>
  > {
    const url = `/orgs/${p["org"]}/copilot/billing/selected_teams`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.object({ seats_cancelled: z.coerce.number() }).parse(res.data),
    }
  }

  async copilotAddCopilotForBusinessSeatsForUsers(
    p: {
      org: string
      requestBody: {
        selected_usernames: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      seats_created: number
    }>
  > {
    const url = `/orgs/${p["org"]}/copilot/billing/selected_users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.object({ seats_created: z.coerce.number() }).parse(res.data),
    }
  }

  async copilotCancelCopilotSeatAssignmentForUsers(
    p: {
      org: string
      requestBody: {
        selected_usernames: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      seats_cancelled: number
    }>
  > {
    const url = `/orgs/${p["org"]}/copilot/billing/selected_users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.object({ seats_cancelled: z.coerce.number() }).parse(res.data),
    }
  }

  async dependabotListAlertsForOrg(
    p: {
      org: string
      state?: string
      severity?: string
      ecosystem?: string
      package?: string
      scope?: "development" | "runtime"
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      before?: string
      after?: string
      first?: number
      last?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_dependabot_alert_with_repository[]>> {
    const url = `/orgs/${p["org"]}/dependabot/alerts`
    const query = this._query({
      state: p["state"],
      severity: p["severity"],
      ecosystem: p["ecosystem"],
      package: p["package"],
      scope: p["scope"],
      sort: p["sort"],
      direction: p["direction"],
      before: p["before"],
      after: p["after"],
      first: p["first"],
      last: p["last"],
      per_page: p["perPage"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_dependabot_alert_with_repository).parse(res.data),
    }
  }

  async dependabotListOrgSecrets(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      secrets: t_organization_dependabot_secret[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/dependabot/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          secrets: z.array(s_organization_dependabot_secret),
        })
        .parse(res.data),
    }
  }

  async dependabotGetOrgPublicKey(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_dependabot_public_key>> {
    const url = `/orgs/${p["org"]}/dependabot/secrets/public-key`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_dependabot_public_key.parse(res.data) }
  }

  async dependabotGetOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_dependabot_secret>> {
    const url = `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_organization_dependabot_secret.parse(res.data) }
  }

  async dependabotCreateOrUpdateOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
        selected_repository_ids?: string[]
        visibility: "all" | "private" | "selected"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object> | AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async dependabotDeleteOrgSecret(
    p: {
      org: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async dependabotListSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      repositories: t_minimal_repository[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          repositories: z.array(s_minimal_repository),
        })
        .parse(res.data),
    }
  }

  async dependabotSetSelectedReposForOrgSecret(
    p: {
      org: string
      secretName: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async dependabotAddSelectedRepoToOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async dependabotRemoveSelectedRepoFromOrgSecret(
    p: {
      org: string
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async packagesListDockerMigrationConflictingPackagesForOrganization(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package[]>> {
    const url = `/orgs/${p["org"]}/docker/conflicts`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_package).parse(res.data) }
  }

  async activityListPublicOrgEvents(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_event[]>> {
    const url = `/orgs/${p["org"]}/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_event).parse(res.data) }
  }

  async orgsListFailedInvitations(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_invitation[]>> {
    const url = `/orgs/${p["org"]}/failed_invitations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_organization_invitation).parse(res.data) }
  }

  async orgsListWebhooks(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_org_hook[]>> {
    const url = `/orgs/${p["org"]}/hooks`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_org_hook).parse(res.data) }
  }

  async orgsCreateWebhook(
    p: {
      org: string
      requestBody: {
        active?: boolean
        config: {
          content_type?: t_webhook_config_content_type
          insecure_ssl?: t_webhook_config_insecure_ssl
          password?: string
          secret?: t_webhook_config_secret
          url: t_webhook_config_url
          username?: string
        }
        events?: string[]
        name: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_org_hook>> {
    const url = `/orgs/${p["org"]}/hooks`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_org_hook.parse(res.data) }
  }

  async orgsGetWebhook(
    p: {
      org: string
      hookId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_org_hook>> {
    const url = `/orgs/${p["org"]}/hooks/${p["hookId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_org_hook.parse(res.data) }
  }

  async orgsUpdateWebhook(
    p: {
      org: string
      hookId: number
      requestBody?: {
        active?: boolean
        config?: {
          content_type?: t_webhook_config_content_type
          insecure_ssl?: t_webhook_config_insecure_ssl
          secret?: t_webhook_config_secret
          url: t_webhook_config_url
        }
        events?: string[]
        name?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_org_hook>> {
    const url = `/orgs/${p["org"]}/hooks/${p["hookId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_org_hook.parse(res.data) }
  }

  async orgsDeleteWebhook(
    p: {
      org: string
      hookId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/hooks/${p["hookId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsGetWebhookConfigForOrg(
    p: {
      org: string
      hookId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_webhook_config>> {
    const url = `/orgs/${p["org"]}/hooks/${p["hookId"]}/config`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_webhook_config.parse(res.data) }
  }

  async orgsUpdateWebhookConfigForOrg(
    p: {
      org: string
      hookId: number
      requestBody?: {
        content_type?: t_webhook_config_content_type
        insecure_ssl?: t_webhook_config_insecure_ssl
        secret?: t_webhook_config_secret
        url?: t_webhook_config_url
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_webhook_config>> {
    const url = `/orgs/${p["org"]}/hooks/${p["hookId"]}/config`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_webhook_config.parse(res.data) }
  }

  async orgsListWebhookDeliveries(
    p: {
      org: string
      hookId: number
      perPage?: number
      cursor?: string
      redelivery?: boolean
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_hook_delivery_item[]>> {
    const url = `/orgs/${p["org"]}/hooks/${p["hookId"]}/deliveries`
    const query = this._query({
      per_page: p["perPage"],
      cursor: p["cursor"],
      redelivery: p["redelivery"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_hook_delivery_item).parse(res.data) }
  }

  async orgsGetWebhookDelivery(
    p: {
      org: string
      hookId: number
      deliveryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_hook_delivery>> {
    const url = `/orgs/${p["org"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_hook_delivery.parse(res.data) }
  }

  async orgsRedeliverWebhookDelivery(
    p: {
      org: string
      hookId: number
      deliveryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject>> {
    const url = `/orgs/${p["org"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}/attempts`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async orgsPingWebhook(
    p: {
      org: string
      hookId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/hooks/${p["hookId"]}/pings`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async appsGetOrgInstallation(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_installation>> {
    const url = `/orgs/${p["org"]}/installation`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_installation.parse(res.data) }
  }

  async orgsListAppInstallations(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      installations: t_installation[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/installations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          installations: z.array(s_installation),
        })
        .parse(res.data),
    }
  }

  async interactionsGetRestrictionsForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_interaction_limit_response | EmptyObject>> {
    const url = `/orgs/${p["org"]}/interaction-limits`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .union([s_interaction_limit_response, z.object({})])
        .parse(res.data),
    }
  }

  async interactionsSetRestrictionsForOrg(
    p: {
      org: string
      requestBody: t_interaction_limit
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_interaction_limit_response>> {
    const url = `/orgs/${p["org"]}/interaction-limits`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_interaction_limit_response.parse(res.data) }
  }

  async interactionsRemoveRestrictionsForOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/interaction-limits`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsListPendingInvitations(
    p: {
      org: string
      perPage?: number
      page?: number
      role?:
        | "all"
        | "admin"
        | "direct_member"
        | "billing_manager"
        | "hiring_manager"
      invitationSource?: "all" | "member" | "scim"
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_invitation[]>> {
    const url = `/orgs/${p["org"]}/invitations`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      role: p["role"],
      invitation_source: p["invitationSource"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_organization_invitation).parse(res.data) }
  }

  async orgsCreateInvitation(
    p: {
      org: string
      requestBody?: {
        email?: string
        invitee_id?: number
        role?: "admin" | "direct_member" | "billing_manager"
        team_ids?: number[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_invitation>> {
    const url = `/orgs/${p["org"]}/invitations`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_organization_invitation.parse(res.data) }
  }

  async orgsCancelInvitation(
    p: {
      org: string
      invitationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/invitations/${p["invitationId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsListInvitationTeams(
    p: {
      org: string
      invitationId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team[]>> {
    const url = `/orgs/${p["org"]}/invitations/${p["invitationId"]}/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team).parse(res.data) }
  }

  async issuesListForOrg(
    p: {
      org: string
      filter?:
        | "assigned"
        | "created"
        | "mentioned"
        | "subscribed"
        | "repos"
        | "all"
      state?: "open" | "closed" | "all"
      labels?: string
      sort?: "created" | "updated" | "comments"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue[]>> {
    const url = `/orgs/${p["org"]}/issues`
    const query = this._query({
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_issue).parse(res.data) }
  }

  async orgsListMembers(
    p: {
      org: string
      filter?: "2fa_disabled" | "all"
      role?: "all" | "admin" | "member"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/orgs/${p["org"]}/members`
    const query = this._query({
      filter: p["filter"],
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async orgsCheckMembershipForUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/members/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsRemoveMember(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/members/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesGetCodespacesForUserInOrg(
    p: {
      perPage?: number
      page?: number
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      codespaces: t_codespace[]
      total_count: number
    }>
  > {
    const url = `/orgs/${p["org"]}/members/${p["username"]}/codespaces`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          codespaces: z.array(s_codespace),
        })
        .parse(res.data),
    }
  }

  async codespacesDeleteFromOrganization(
    p: {
      org: string
      username: string
      codespaceName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject>> {
    const url = `/orgs/${p["org"]}/members/${p["username"]}/codespaces/${p["codespaceName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async codespacesStopInOrganization(
    p: {
      org: string
      username: string
      codespaceName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespace>> {
    const url = `/orgs/${p["org"]}/members/${p["username"]}/codespaces/${p["codespaceName"]}/stop`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespace.parse(res.data) }
  }

  async copilotGetCopilotSeatAssignmentDetailsForUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_copilot_seat_details>> {
    const url = `/orgs/${p["org"]}/members/${p["username"]}/copilot`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_copilot_seat_details.parse(res.data) }
  }

  async orgsGetMembershipForUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_org_membership>> {
    const url = `/orgs/${p["org"]}/memberships/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_org_membership.parse(res.data) }
  }

  async orgsSetMembershipForUser(
    p: {
      org: string
      username: string
      requestBody?: {
        role?: "admin" | "member"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_org_membership>> {
    const url = `/orgs/${p["org"]}/memberships/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_org_membership.parse(res.data) }
  }

  async orgsRemoveMembershipForUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/memberships/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async migrationsListForOrg(
    p: {
      org: string
      perPage?: number
      page?: number
      exclude?: "repositories"[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_migration[]>> {
    const url = `/orgs/${p["org"]}/migrations`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      exclude: p["exclude"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_migration).parse(res.data) }
  }

  async migrationsStartForOrg(
    p: {
      org: string
      requestBody: {
        exclude?: "repositories"[]
        exclude_attachments?: boolean
        exclude_git_data?: boolean
        exclude_metadata?: boolean
        exclude_owner_projects?: boolean
        exclude_releases?: boolean
        lock_repositories?: boolean
        org_metadata_only?: boolean
        repositories: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_migration>> {
    const url = `/orgs/${p["org"]}/migrations`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_migration.parse(res.data) }
  }

  async migrationsGetStatusForOrg(
    p: {
      org: string
      migrationId: number
      exclude?: "repositories"[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_migration>> {
    const url = `/orgs/${p["org"]}/migrations/${p["migrationId"]}`
    const query = this._query({ exclude: p["exclude"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_migration.parse(res.data) }
  }

  async migrationsDownloadArchiveForOrg(
    p: {
      org: string
      migrationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/migrations/${p["migrationId"]}/archive`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async migrationsDeleteArchiveForOrg(
    p: {
      org: string
      migrationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/migrations/${p["migrationId"]}/archive`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async migrationsUnlockRepoForOrg(
    p: {
      org: string
      migrationId: number
      repoName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/migrations/${p["migrationId"]}/repos/${p["repoName"]}/lock`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async migrationsListReposForOrg(
    p: {
      org: string
      migrationId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/orgs/${p["org"]}/migrations/${p["migrationId"]}/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async orgsListOutsideCollaborators(
    p: {
      org: string
      filter?: "2fa_disabled" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/orgs/${p["org"]}/outside_collaborators`
    const query = this._query({
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async orgsConvertMemberToOutsideCollaborator(
    p: {
      org: string
      username: string
      requestBody?: {
        async?: boolean
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject> | AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/outside_collaborators/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async orgsRemoveOutsideCollaborator(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/outside_collaborators/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async packagesListPackagesForOrganization(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      org: string
      visibility?: "public" | "private" | "internal"
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package[]>> {
    const url = `/orgs/${p["org"]}/packages`
    const query = this._query({
      package_type: p["packageType"],
      visibility: p["visibility"],
      page: p["page"],
      per_page: p["perPage"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_package).parse(res.data) }
  }

  async packagesGetPackageForOrganization(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package>> {
    const url = `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_package.parse(res.data) }
  }

  async packagesDeletePackageForOrg(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async packagesRestorePackageForOrg(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
      token?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/restore`
    const query = this._query({ token: p["token"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async packagesGetAllPackageVersionsForPackageOwnedByOrg(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
      page?: number
      perPage?: number
      state?: "active" | "deleted"
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package_version[]>> {
    const url = `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions`
    const query = this._query({
      page: p["page"],
      per_page: p["perPage"],
      state: p["state"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_package_version).parse(res.data) }
  }

  async packagesGetPackageVersionForOrganization(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package_version>> {
    const url = `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_package_version.parse(res.data) }
  }

  async packagesDeletePackageVersionForOrg(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async packagesRestorePackageVersionForOrg(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      org: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}/restore`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsListPatGrantRequests(
    p: {
      org: string
      perPage?: number
      page?: number
      sort?: "created_at"
      direction?: "asc" | "desc"
      owner?: string[]
      repository?: string
      permission?: string
      lastUsedBefore?: string
      lastUsedAfter?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<t_organization_programmatic_access_grant_request[]>
  > {
    const url = `/orgs/${p["org"]}/personal-access-token-requests`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      sort: p["sort"],
      direction: p["direction"],
      owner: p["owner"],
      repository: p["repository"],
      permission: p["permission"],
      last_used_before: p["lastUsedBefore"],
      last_used_after: p["lastUsedAfter"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .array(s_organization_programmatic_access_grant_request)
        .parse(res.data),
    }
  }

  async orgsReviewPatGrantRequestsInBulk(
    p: {
      org: string
      requestBody: {
        action: "approve" | "deny"
        pat_request_ids?: number[]
        reason?: string | null
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject>> {
    const url = `/orgs/${p["org"]}/personal-access-token-requests`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async orgsReviewPatGrantRequest(
    p: {
      org: string
      patRequestId: number
      requestBody: {
        action: "approve" | "deny"
        reason?: string | null
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/personal-access-token-requests/${p["patRequestId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsListPatGrantRequestRepositories(
    p: {
      org: string
      patRequestId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/orgs/${p["org"]}/personal-access-token-requests/${p["patRequestId"]}/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async orgsListPatGrants(
    p: {
      org: string
      perPage?: number
      page?: number
      sort?: "created_at"
      direction?: "asc" | "desc"
      owner?: string[]
      repository?: string
      permission?: string
      lastUsedBefore?: string
      lastUsedAfter?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_programmatic_access_grant[]>> {
    const url = `/orgs/${p["org"]}/personal-access-tokens`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      sort: p["sort"],
      direction: p["direction"],
      owner: p["owner"],
      repository: p["repository"],
      permission: p["permission"],
      last_used_before: p["lastUsedBefore"],
      last_used_after: p["lastUsedAfter"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_organization_programmatic_access_grant).parse(res.data),
    }
  }

  async orgsUpdatePatAccesses(
    p: {
      org: string
      requestBody: {
        action: "revoke"
        pat_ids: number[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject>> {
    const url = `/orgs/${p["org"]}/personal-access-tokens`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async orgsUpdatePatAccess(
    p: {
      org: string
      patId: number
      requestBody: {
        action: "revoke"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/personal-access-tokens/${p["patId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsListPatGrantRepositories(
    p: {
      org: string
      patId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/orgs/${p["org"]}/personal-access-tokens/${p["patId"]}/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async projectsListForOrg(
    p: {
      org: string
      state?: "open" | "closed" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project[]>> {
    const url = `/orgs/${p["org"]}/projects`
    const query = this._query({
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_project).parse(res.data) }
  }

  async projectsCreateForOrg(
    p: {
      org: string
      requestBody: {
        body?: string
        name: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project>> {
    const url = `/orgs/${p["org"]}/projects`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project.parse(res.data) }
  }

  async orgsListPublicMembers(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/orgs/${p["org"]}/public_members`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async orgsCheckPublicMembershipForUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/public_members/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsSetPublicMembershipForAuthenticatedUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/public_members/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsRemovePublicMembershipForAuthenticatedUser(
    p: {
      org: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/public_members/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListForOrg(
    p: {
      org: string
      type?: "all" | "public" | "private" | "forks" | "sources" | "member"
      sort?: "created" | "updated" | "pushed" | "full_name"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/orgs/${p["org"]}/repos`
    const query = this._query({
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async reposCreateInOrg(
    p: {
      org: string
      requestBody: {
        allow_auto_merge?: boolean
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        auto_init?: boolean
        delete_branch_on_merge?: boolean
        description?: string
        gitignore_template?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        is_template?: boolean
        license_template?: string
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
        name: string
        private?: boolean
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
        team_id?: number
        use_squash_pr_title_as_default?: boolean
        visibility?: "public" | "private"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository>> {
    const url = `/orgs/${p["org"]}/repos`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository.parse(res.data) }
  }

  async reposGetOrgRulesets(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_ruleset[]>> {
    const url = `/orgs/${p["org"]}/rulesets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_repository_ruleset).parse(res.data) }
  }

  async reposCreateOrgRuleset(
    p: {
      org: string
      requestBody: {
        bypass_actors?: t_repository_ruleset_bypass_actor[]
        conditions?: t_org_ruleset_conditions
        enforcement: t_repository_rule_enforcement
        name: string
        rules?: t_repository_rule[]
        target?: "branch" | "tag"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_ruleset>> {
    const url = `/orgs/${p["org"]}/rulesets`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_ruleset.parse(res.data) }
  }

  async reposGetOrgRuleset(
    p: {
      org: string
      rulesetId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_ruleset>> {
    const url = `/orgs/${p["org"]}/rulesets/${p["rulesetId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_ruleset.parse(res.data) }
  }

  async reposUpdateOrgRuleset(
    p: {
      org: string
      rulesetId: number
      requestBody?: {
        bypass_actors?: t_repository_ruleset_bypass_actor[]
        conditions?: t_org_ruleset_conditions
        enforcement?: t_repository_rule_enforcement
        name?: string
        rules?: t_repository_rule[]
        target?: "branch" | "tag"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_ruleset>> {
    const url = `/orgs/${p["org"]}/rulesets/${p["rulesetId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_ruleset.parse(res.data) }
  }

  async reposDeleteOrgRuleset(
    p: {
      org: string
      rulesetId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/rulesets/${p["rulesetId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async secretScanningListAlertsForOrg(
    p: {
      org: string
      state?: "open" | "resolved"
      secretType?: string
      resolution?: string
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      page?: number
      perPage?: number
      before?: string
      after?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_secret_scanning_alert[]>> {
    const url = `/orgs/${p["org"]}/secret-scanning/alerts`
    const query = this._query({
      state: p["state"],
      secret_type: p["secretType"],
      resolution: p["resolution"],
      sort: p["sort"],
      direction: p["direction"],
      page: p["page"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_organization_secret_scanning_alert).parse(res.data),
    }
  }

  async securityAdvisoriesListOrgRepositoryAdvisories(
    p: {
      org: string
      direction?: "asc" | "desc"
      sort?: "created" | "updated" | "published"
      before?: string
      after?: string
      perPage?: number
      state?: "triage" | "draft" | "published" | "closed"
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_advisory[]>> {
    const url = `/orgs/${p["org"]}/security-advisories`
    const query = this._query({
      direction: p["direction"],
      sort: p["sort"],
      before: p["before"],
      after: p["after"],
      per_page: p["perPage"],
      state: p["state"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_repository_advisory).parse(res.data) }
  }

  async orgsListSecurityManagerTeams(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_simple[]>> {
    const url = `/orgs/${p["org"]}/security-managers`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team_simple).parse(res.data) }
  }

  async orgsAddSecurityManagerTeam(
    p: {
      org: string
      teamSlug: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/security-managers/teams/${p["teamSlug"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async orgsRemoveSecurityManagerTeam(
    p: {
      org: string
      teamSlug: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/security-managers/teams/${p["teamSlug"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async billingGetGithubActionsBillingOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_billing_usage>> {
    const url = `/orgs/${p["org"]}/settings/billing/actions`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_billing_usage.parse(res.data) }
  }

  async billingGetGithubPackagesBillingOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_packages_billing_usage>> {
    const url = `/orgs/${p["org"]}/settings/billing/packages`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_packages_billing_usage.parse(res.data) }
  }

  async billingGetSharedStorageBillingOrg(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_combined_billing_usage>> {
    const url = `/orgs/${p["org"]}/settings/billing/shared-storage`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_combined_billing_usage.parse(res.data) }
  }

  async teamsList(
    p: {
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team[]>> {
    const url = `/orgs/${p["org"]}/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team).parse(res.data) }
  }

  async teamsCreate(
    p: {
      org: string
      requestBody: {
        description?: string
        maintainers?: string[]
        name: string
        notification_setting?:
          | "notifications_enabled"
          | "notifications_disabled"
        parent_team_id?: number
        permission?: "pull" | "push"
        privacy?: "secret" | "closed"
        repo_names?: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_full>> {
    const url = `/orgs/${p["org"]}/teams`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_full.parse(res.data) }
  }

  async teamsGetByName(
    p: {
      org: string
      teamSlug: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_full>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_full.parse(res.data) }
  }

  async teamsUpdateInOrg(
    p: {
      org: string
      teamSlug: string
      requestBody?: {
        description?: string
        name?: string
        notification_setting?:
          | "notifications_enabled"
          | "notifications_disabled"
        parent_team_id?: number | null
        permission?: "pull" | "push" | "admin"
        privacy?: "secret" | "closed"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_full>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_full.parse(res.data) }
  }

  async teamsDeleteInOrg(
    p: {
      org: string
      teamSlug: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsListDiscussionsInOrg(
    p: {
      org: string
      teamSlug: string
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
      pinned?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion[]>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions`
    const query = this._query({
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
      pinned: p["pinned"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team_discussion).parse(res.data) }
  }

  async teamsCreateDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      requestBody: {
        body: string
        private?: boolean
        title: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion.parse(res.data) }
  }

  async teamsGetDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion.parse(res.data) }
  }

  async teamsUpdateDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      requestBody?: {
        body?: string
        title?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion.parse(res.data) }
  }

  async teamsDeleteDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsListDiscussionCommentsInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion_comment[]>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments`
    const query = this._query({
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team_discussion_comment).parse(res.data) }
  }

  async teamsCreateDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion_comment>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion_comment.parse(res.data) }
  }

  async teamsGetDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion_comment>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion_comment.parse(res.data) }
  }

  async teamsUpdateDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion_comment>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion_comment.parse(res.data) }
  }

  async teamsDeleteDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reactionsListForTeamDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction[]>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_reaction).parse(res.data) }
  }

  async reactionsCreateForTeamDiscussionCommentInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_reaction.parse(res.data) }
  }

  async reactionsDeleteForTeamDiscussionComment(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      commentNumber: number
      reactionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions/${p["reactionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reactionsListForTeamDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction[]>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_reaction).parse(res.data) }
  }

  async reactionsCreateForTeamDiscussionInOrg(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_reaction.parse(res.data) }
  }

  async reactionsDeleteForTeamDiscussion(
    p: {
      org: string
      teamSlug: string
      discussionNumber: number
      reactionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions/${p["reactionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsListPendingInvitationsInOrg(
    p: {
      org: string
      teamSlug: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_invitation[]>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/invitations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_organization_invitation).parse(res.data) }
  }

  async teamsListMembersInOrg(
    p: {
      org: string
      teamSlug: string
      role?: "member" | "maintainer" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/members`
    const query = this._query({
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async teamsGetMembershipForUserInOrg(
    p: {
      org: string
      teamSlug: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_membership>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_membership.parse(res.data) }
  }

  async teamsAddOrUpdateMembershipForUserInOrg(
    p: {
      org: string
      teamSlug: string
      username: string
      requestBody?: {
        role?: "member" | "maintainer"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_membership>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_membership.parse(res.data) }
  }

  async teamsRemoveMembershipForUserInOrg(
    p: {
      org: string
      teamSlug: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsListProjectsInOrg(
    p: {
      org: string
      teamSlug: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_project[]>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team_project).parse(res.data) }
  }

  async teamsCheckPermissionsForProjectInOrg(
    p: {
      org: string
      teamSlug: string
      projectId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_project>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_project.parse(res.data) }
  }

  async teamsAddOrUpdateProjectPermissionsInOrg(
    p: {
      org: string
      teamSlug: string
      projectId: number
      requestBody?: {
        permission?: "read" | "write" | "admin"
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsRemoveProjectInOrg(
    p: {
      org: string
      teamSlug: string
      projectId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsListReposInOrg(
    p: {
      org: string
      teamSlug: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async teamsCheckPermissionsForRepoInOrg(
    p: {
      org: string
      teamSlug: string
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_repository> | AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_repository.parse(res.data) }
  }

  async teamsAddOrUpdateRepoPermissionsInOrg(
    p: {
      org: string
      teamSlug: string
      owner: string
      repo: string
      requestBody?: {
        permission?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsRemoveRepoInOrg(
    p: {
      org: string
      teamSlug: string
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsListChildInOrg(
    p: {
      org: string
      teamSlug: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team[]>> {
    const url = `/orgs/${p["org"]}/teams/${p["teamSlug"]}/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team).parse(res.data) }
  }

  async orgsEnableOrDisableSecurityProductOnAllOrgRepos(
    p: {
      org: string
      securityProduct:
        | "dependency_graph"
        | "dependabot_alerts"
        | "dependabot_security_updates"
        | "advanced_security"
        | "code_scanning_default_setup"
        | "secret_scanning"
        | "secret_scanning_push_protection"
      enablement: "enable_all" | "disable_all"
      requestBody?: {
        query_suite?: "default" | "extended"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/orgs/${p["org"]}/${p["securityProduct"]}/${p["enablement"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async projectsGetCard(
    p: {
      cardId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project_card>> {
    const url = `/projects/columns/cards/${p["cardId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project_card.parse(res.data) }
  }

  async projectsUpdateCard(
    p: {
      cardId: number
      requestBody?: {
        archived?: boolean
        note?: string | null
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project_card>> {
    const url = `/projects/columns/cards/${p["cardId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project_card.parse(res.data) }
  }

  async projectsDeleteCard(
    p: {
      cardId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/projects/columns/cards/${p["cardId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async projectsMoveCard(
    p: {
      cardId: number
      requestBody: {
        column_id?: number
        position: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject>> {
    const url = `/projects/columns/cards/${p["cardId"]}/moves`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async projectsGetColumn(
    p: {
      columnId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project_column>> {
    const url = `/projects/columns/${p["columnId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project_column.parse(res.data) }
  }

  async projectsUpdateColumn(
    p: {
      columnId: number
      requestBody: {
        name: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project_column>> {
    const url = `/projects/columns/${p["columnId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project_column.parse(res.data) }
  }

  async projectsDeleteColumn(
    p: {
      columnId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/projects/columns/${p["columnId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async projectsListCards(
    p: {
      columnId: number
      archivedState?: "all" | "archived" | "not_archived"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project_card[]>> {
    const url = `/projects/columns/${p["columnId"]}/cards`
    const query = this._query({
      archived_state: p["archivedState"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_project_card).parse(res.data) }
  }

  async projectsCreateCard(
    p: {
      columnId: number
      requestBody:
        | {
            note: string | null
          }
        | {
            content_id: number
            content_type: string
          }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project_card>> {
    const url = `/projects/columns/${p["columnId"]}/cards`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project_card.parse(res.data) }
  }

  async projectsMoveColumn(
    p: {
      columnId: number
      requestBody: {
        position: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject>> {
    const url = `/projects/columns/${p["columnId"]}/moves`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async projectsGet(
    p: {
      projectId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project>> {
    const url = `/projects/${p["projectId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project.parse(res.data) }
  }

  async projectsUpdate(
    p: {
      projectId: number
      requestBody?: {
        body?: string | null
        name?: string
        organization_permission?: "read" | "write" | "admin" | "none"
        private?: boolean
        state?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project>> {
    const url = `/projects/${p["projectId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project.parse(res.data) }
  }

  async projectsDelete(
    p: {
      projectId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/projects/${p["projectId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async projectsListCollaborators(
    p: {
      projectId: number
      affiliation?: "outside" | "direct" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/projects/${p["projectId"]}/collaborators`
    const query = this._query({
      affiliation: p["affiliation"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async projectsAddCollaborator(
    p: {
      projectId: number
      username: string
      requestBody?: {
        permission?: "read" | "write" | "admin"
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/projects/${p["projectId"]}/collaborators/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async projectsRemoveCollaborator(
    p: {
      projectId: number
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/projects/${p["projectId"]}/collaborators/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async projectsGetPermissionForUser(
    p: {
      projectId: number
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project_collaborator_permission>> {
    const url = `/projects/${p["projectId"]}/collaborators/${p["username"]}/permission`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project_collaborator_permission.parse(res.data) }
  }

  async projectsListColumns(
    p: {
      projectId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project_column[]>> {
    const url = `/projects/${p["projectId"]}/columns`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_project_column).parse(res.data) }
  }

  async projectsCreateColumn(
    p: {
      projectId: number
      requestBody: {
        name: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project_column>> {
    const url = `/projects/${p["projectId"]}/columns`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project_column.parse(res.data) }
  }

  async rateLimitGet(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_rate_limit_overview>> {
    const url = `/rate_limit`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_rate_limit_overview.parse(res.data) }
  }

  async reposGet(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_full_repository>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_full_repository.parse(res.data) }
  }

  async reposUpdate(
    p: {
      owner: string
      repo: string
      requestBody?: {
        allow_auto_merge?: boolean
        allow_forking?: boolean
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        allow_update_branch?: boolean
        archived?: boolean
        default_branch?: string
        delete_branch_on_merge?: boolean
        description?: string
        has_issues?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        is_template?: boolean
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
        name?: string
        private?: boolean
        security_and_analysis?: {
          advanced_security?: {
            status?: string
          }
          secret_scanning?: {
            status?: string
          }
          secret_scanning_push_protection?: {
            status?: string
          }
        } | null
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
        use_squash_pr_title_as_default?: boolean
        visibility?: "public" | "private"
        web_commit_signoff_required?: boolean
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_full_repository>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_full_repository.parse(res.data) }
  }

  async reposDelete(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListArtifactsForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
      name?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      artifacts: t_artifact[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      name: p["name"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          artifacts: z.array(s_artifact),
        })
        .parse(res.data),
    }
  }

  async actionsGetArtifact(
    p: {
      owner: string
      repo: string
      artifactId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_artifact>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_artifact.parse(res.data) }
  }

  async actionsDeleteArtifact(
    p: {
      owner: string
      repo: string
      artifactId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsDownloadArtifact(
    p: {
      owner: string
      repo: string
      artifactId: number
      archiveFormat: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}/${p["archiveFormat"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsGetActionsCacheUsage(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_cache_usage_by_repository>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/cache/usage`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_cache_usage_by_repository.parse(res.data) }
  }

  async actionsGetActionsCacheList(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
      ref?: string
      key?: string
      sort?: "created_at" | "last_accessed_at" | "size_in_bytes"
      direction?: "asc" | "desc"
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_cache_list>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/caches`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      ref: p["ref"],
      key: p["key"],
      sort: p["sort"],
      direction: p["direction"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_cache_list.parse(res.data) }
  }

  async actionsDeleteActionsCacheByKey(
    p: {
      owner: string
      repo: string
      key: string
      ref?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_cache_list>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/caches`
    const query = this._query({ key: p["key"], ref: p["ref"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_cache_list.parse(res.data) }
  }

  async actionsDeleteActionsCacheById(
    p: {
      owner: string
      repo: string
      cacheId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/caches/${p["cacheId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsGetJobForWorkflowRun(
    p: {
      owner: string
      repo: string
      jobId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_job>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/jobs/${p["jobId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_job.parse(res.data) }
  }

  async actionsDownloadJobLogsForWorkflowRun(
    p: {
      owner: string
      repo: string
      jobId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/jobs/${p["jobId"]}/logs`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsReRunJobForWorkflowRun(
    p: {
      owner: string
      repo: string
      jobId: number
      requestBody?: {
        enable_debug_logging?: boolean
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/jobs/${p["jobId"]}/rerun`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsGetCustomOidcSubClaimForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_oidc_custom_sub_repo>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/oidc/customization/sub`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_oidc_custom_sub_repo.parse(res.data) }
  }

  async actionsSetCustomOidcSubClaimForRepo(
    p: {
      owner: string
      repo: string
      requestBody: {
        include_claim_keys?: string[]
        use_default: boolean
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/oidc/customization/sub`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsListRepoOrganizationSecrets(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      secrets: t_actions_secret[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/organization-secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          secrets: z.array(s_actions_secret),
        })
        .parse(res.data),
    }
  }

  async actionsListRepoOrganizationVariables(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      total_count: number
      variables: t_actions_variable[]
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/organization-variables`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          variables: z.array(s_actions_variable),
        })
        .parse(res.data),
    }
  }

  async actionsGetGithubActionsPermissionsRepository(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_repository_permissions>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/permissions`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_repository_permissions.parse(res.data) }
  }

  async actionsSetGithubActionsPermissionsRepository(
    p: {
      owner: string
      repo: string
      requestBody: {
        allowed_actions?: t_allowed_actions
        enabled: t_actions_enabled
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/permissions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsGetWorkflowAccessToRepository(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_workflow_access_to_repository>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/access`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: s_actions_workflow_access_to_repository.parse(res.data),
    }
  }

  async actionsSetWorkflowAccessToRepository(
    p: {
      owner: string
      repo: string
      requestBody: t_actions_workflow_access_to_repository
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/access`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsGetAllowedActionsRepository(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_selected_actions>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/selected-actions`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_selected_actions.parse(res.data) }
  }

  async actionsSetAllowedActionsRepository(
    p: {
      owner: string
      repo: string
      requestBody?: t_selected_actions
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/selected-actions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsGetGithubActionsDefaultWorkflowPermissionsRepository(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_get_default_workflow_permissions>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/workflow`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: s_actions_get_default_workflow_permissions.parse(res.data),
    }
  }

  async actionsSetGithubActionsDefaultWorkflowPermissionsRepository(
    p: {
      owner: string
      repo: string
      requestBody: t_actions_set_default_workflow_permissions
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/workflow`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListSelfHostedRunnersForRepo(
    p: {
      name?: string
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      runners: t_runner[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners`
    const query = this._query({
      name: p["name"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({ total_count: z.coerce.number(), runners: z.array(s_runner) })
        .parse(res.data),
    }
  }

  async actionsListRunnerApplicationsForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_runner_application[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners/downloads`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_runner_application).parse(res.data) }
  }

  async actionsGenerateRunnerJitconfigForRepo(
    p: {
      owner: string
      repo: string
      requestBody: {
        labels: string[]
        name: string
        runner_group_id: number
        work_folder?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      encoded_jit_config: string
      runner: t_runner
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners/generate-jitconfig`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({ runner: s_runner, encoded_jit_config: z.string() })
        .parse(res.data),
    }
  }

  async actionsCreateRegistrationTokenForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_authentication_token>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners/registration-token`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_authentication_token.parse(res.data) }
  }

  async actionsCreateRemoveTokenForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_authentication_token>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners/remove-token`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_authentication_token.parse(res.data) }
  }

  async actionsGetSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_runner>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_runner.parse(res.data) }
  }

  async actionsDeleteSelfHostedRunnerFromRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListLabelsForSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      labels: t_runner_label[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        })
        .parse(res.data),
    }
  }

  async actionsAddCustomLabelsToSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
      requestBody: {
        labels: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      labels: t_runner_label[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        })
        .parse(res.data),
    }
  }

  async actionsSetCustomLabelsForSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
      requestBody: {
        labels: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      labels: t_runner_label[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        })
        .parse(res.data),
    }
  }

  async actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      labels: t_runner_label[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        })
        .parse(res.data),
    }
  }

  async actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(
    p: {
      owner: string
      repo: string
      runnerId: number
      name: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      labels: t_runner_label[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          labels: z.array(s_runner_label),
        })
        .parse(res.data),
    }
  }

  async actionsListWorkflowRunsForRepo(
    p: {
      owner: string
      repo: string
      actor?: string
      branch?: string
      event?: string
      status?:
        | "completed"
        | "action_required"
        | "cancelled"
        | "failure"
        | "neutral"
        | "skipped"
        | "stale"
        | "success"
        | "timed_out"
        | "in_progress"
        | "queued"
        | "requested"
        | "waiting"
        | "pending"
      perPage?: number
      page?: number
      created?: string
      excludePullRequests?: boolean
      checkSuiteId?: number
      headSha?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      total_count: number
      workflow_runs: t_workflow_run[]
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs`
    const query = this._query({
      actor: p["actor"],
      branch: p["branch"],
      event: p["event"],
      status: p["status"],
      per_page: p["perPage"],
      page: p["page"],
      created: p["created"],
      exclude_pull_requests: p["excludePullRequests"],
      check_suite_id: p["checkSuiteId"],
      head_sha: p["headSha"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          workflow_runs: z.array(s_workflow_run),
        })
        .parse(res.data),
    }
  }

  async actionsGetWorkflowRun(
    p: {
      owner: string
      repo: string
      runId: number
      excludePullRequests?: boolean
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_workflow_run>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}`
    const query = this._query({
      exclude_pull_requests: p["excludePullRequests"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_workflow_run.parse(res.data) }
  }

  async actionsDeleteWorkflowRun(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsGetReviewsForRun(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_environment_approvals[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/approvals`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_environment_approvals).parse(res.data) }
  }

  async actionsApproveWorkflowRun(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/approve`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsListWorkflowRunArtifacts(
    p: {
      owner: string
      repo: string
      runId: number
      perPage?: number
      page?: number
      name?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      artifacts: t_artifact[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/artifacts`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      name: p["name"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          artifacts: z.array(s_artifact),
        })
        .parse(res.data),
    }
  }

  async actionsGetWorkflowRunAttempt(
    p: {
      owner: string
      repo: string
      runId: number
      attemptNumber: number
      excludePullRequests?: boolean
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_workflow_run>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/attempts/${p["attemptNumber"]}`
    const query = this._query({
      exclude_pull_requests: p["excludePullRequests"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_workflow_run.parse(res.data) }
  }

  async actionsListJobsForWorkflowRunAttempt(
    p: {
      owner: string
      repo: string
      runId: number
      attemptNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      jobs: t_job[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/attempts/${p["attemptNumber"]}/jobs`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({ total_count: z.coerce.number(), jobs: z.array(s_job) })
        .parse(res.data),
    }
  }

  async actionsDownloadWorkflowRunAttemptLogs(
    p: {
      owner: string
      repo: string
      runId: number
      attemptNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/attempts/${p["attemptNumber"]}/logs`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsCancelWorkflowRun(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/cancel`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsReviewCustomGatesForRun(
    p: {
      owner: string
      repo: string
      runId: number
      requestBody:
        | t_review_custom_gates_comment_required
        | t_review_custom_gates_state_required
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/deployment_protection_rule`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListJobsForWorkflowRun(
    p: {
      owner: string
      repo: string
      runId: number
      filter?: "latest" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      jobs: t_job[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/jobs`
    const query = this._query({
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({ total_count: z.coerce.number(), jobs: z.array(s_job) })
        .parse(res.data),
    }
  }

  async actionsDownloadWorkflowRunLogs(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/logs`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsDeleteWorkflowRunLogs(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/logs`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsGetPendingDeploymentsForRun(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pending_deployment[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/pending_deployments`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_pending_deployment).parse(res.data) }
  }

  async actionsReviewPendingDeploymentsForRun(
    p: {
      owner: string
      repo: string
      runId: number
      requestBody: {
        comment: string
        environment_ids: number[]
        state: "approved" | "rejected"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deployment[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/pending_deployments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_deployment).parse(res.data) }
  }

  async actionsReRunWorkflow(
    p: {
      owner: string
      repo: string
      runId: number
      requestBody?: {
        enable_debug_logging?: boolean
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/rerun`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsReRunWorkflowFailedJobs(
    p: {
      owner: string
      repo: string
      runId: number
      requestBody?: {
        enable_debug_logging?: boolean
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/rerun-failed-jobs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsGetWorkflowRunUsage(
    p: {
      owner: string
      repo: string
      runId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_workflow_run_usage>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/timing`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_workflow_run_usage.parse(res.data) }
  }

  async actionsListRepoSecrets(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      secrets: t_actions_secret[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          secrets: z.array(s_actions_secret),
        })
        .parse(res.data),
    }
  }

  async actionsGetRepoPublicKey(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_public_key>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/public-key`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_public_key.parse(res.data) }
  }

  async actionsGetRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_secret>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_secret.parse(res.data) }
  }

  async actionsCreateOrUpdateRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object> | AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsDeleteRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListRepoVariables(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      total_count: number
      variables: t_actions_variable[]
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/variables`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          variables: z.array(s_actions_variable),
        })
        .parse(res.data),
    }
  }

  async actionsCreateRepoVariable(
    p: {
      owner: string
      repo: string
      requestBody: {
        name: string
        value: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/variables`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsGetRepoVariable(
    p: {
      owner: string
      repo: string
      name: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_variable>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/variables/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_variable.parse(res.data) }
  }

  async actionsUpdateRepoVariable(
    p: {
      owner: string
      repo: string
      name: string
      requestBody: {
        name?: string
        value?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/variables/${p["name"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsDeleteRepoVariable(
    p: {
      owner: string
      repo: string
      name: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/variables/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListRepoWorkflows(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      total_count: number
      workflows: t_workflow[]
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/workflows`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          workflows: z.array(s_workflow),
        })
        .parse(res.data),
    }
  }

  async actionsGetWorkflow(
    p: {
      owner: string
      repo: string
      workflowId: number | string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_workflow>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_workflow.parse(res.data) }
  }

  async actionsDisableWorkflow(
    p: {
      owner: string
      repo: string
      workflowId: number | string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/disable`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsCreateWorkflowDispatch(
    p: {
      owner: string
      repo: string
      workflowId: number | string
      requestBody: {
        inputs?: {
          [key: string]: unknown
        }
        ref: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/dispatches`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsEnableWorkflow(
    p: {
      owner: string
      repo: string
      workflowId: number | string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/enable`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListWorkflowRuns(
    p: {
      owner: string
      repo: string
      workflowId: number | string
      actor?: string
      branch?: string
      event?: string
      status?:
        | "completed"
        | "action_required"
        | "cancelled"
        | "failure"
        | "neutral"
        | "skipped"
        | "stale"
        | "success"
        | "timed_out"
        | "in_progress"
        | "queued"
        | "requested"
        | "waiting"
        | "pending"
      perPage?: number
      page?: number
      created?: string
      excludePullRequests?: boolean
      checkSuiteId?: number
      headSha?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      total_count: number
      workflow_runs: t_workflow_run[]
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/runs`
    const query = this._query({
      actor: p["actor"],
      branch: p["branch"],
      event: p["event"],
      status: p["status"],
      per_page: p["perPage"],
      page: p["page"],
      created: p["created"],
      exclude_pull_requests: p["excludePullRequests"],
      check_suite_id: p["checkSuiteId"],
      head_sha: p["headSha"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          workflow_runs: z.array(s_workflow_run),
        })
        .parse(res.data),
    }
  }

  async actionsGetWorkflowUsage(
    p: {
      owner: string
      repo: string
      workflowId: number | string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_workflow_usage>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/timing`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_workflow_usage.parse(res.data) }
  }

  async reposListActivities(
    p: {
      owner: string
      repo: string
      direction?: "asc" | "desc"
      perPage?: number
      before?: string
      after?: string
      ref?: string
      actor?: string
      timePeriod?: "day" | "week" | "month" | "quarter" | "year"
      activityType?:
        | "push"
        | "force_push"
        | "branch_creation"
        | "branch_deletion"
        | "pr_merge"
        | "merge_queue_merge"
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_activity[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/activity`
    const query = this._query({
      direction: p["direction"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
      ref: p["ref"],
      actor: p["actor"],
      time_period: p["timePeriod"],
      activity_type: p["activityType"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_activity).parse(res.data) }
  }

  async issuesListAssignees(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/assignees`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async issuesCheckUserCanBeAssigned(
    p: {
      owner: string
      repo: string
      assignee: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/assignees/${p["assignee"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListAutolinks(
    p: {
      owner: string
      repo: string
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_autolink[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/autolinks`
    const query = this._query({ page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_autolink).parse(res.data) }
  }

  async reposCreateAutolink(
    p: {
      owner: string
      repo: string
      requestBody: {
        is_alphanumeric?: boolean
        key_prefix: string
        url_template: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_autolink>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/autolinks`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_autolink.parse(res.data) }
  }

  async reposGetAutolink(
    p: {
      owner: string
      repo: string
      autolinkId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_autolink>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/autolinks/${p["autolinkId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_autolink.parse(res.data) }
  }

  async reposDeleteAutolink(
    p: {
      owner: string
      repo: string
      autolinkId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/autolinks/${p["autolinkId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposCheckAutomatedSecurityFixes(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_check_automated_security_fixes>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/automated-security-fixes`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_check_automated_security_fixes.parse(res.data) }
  }

  async reposEnableAutomatedSecurityFixes(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/automated-security-fixes`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposDisableAutomatedSecurityFixes(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/automated-security-fixes`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListBranches(
    p: {
      owner: string
      repo: string
      protected?: boolean
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_short_branch[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches`
    const query = this._query({
      protected: p["protected"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_short_branch).parse(res.data) }
  }

  async reposGetBranch(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_branch_with_protection>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_branch_with_protection.parse(res.data) }
  }

  async reposGetBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_branch_protection>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_branch_protection.parse(res.data) }
  }

  async reposUpdateBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody: {
        allow_deletions?: boolean
        allow_force_pushes?: boolean | null
        allow_fork_syncing?: boolean
        block_creations?: boolean
        enforce_admins: boolean | null
        lock_branch?: boolean
        required_conversation_resolution?: boolean
        required_linear_history?: boolean
        required_pull_request_reviews: {
          bypass_pull_request_allowances?: {
            apps?: string[]
            teams?: string[]
            users?: string[]
          }
          dismiss_stale_reviews?: boolean
          dismissal_restrictions?: {
            apps?: string[]
            teams?: string[]
            users?: string[]
          }
          require_code_owner_reviews?: boolean
          require_last_push_approval?: boolean
          required_approving_review_count?: number
        } | null
        required_status_checks: {
          checks?: {
            app_id?: number
            context: string
          }[]
          contexts: string[]
          strict: boolean
        } | null
        restrictions: {
          apps?: string[]
          teams: string[]
          users: string[]
        } | null
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_protected_branch>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_protected_branch.parse(res.data) }
  }

  async reposDeleteBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGetAdminBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_protected_branch_admin_enforced>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_protected_branch_admin_enforced.parse(res.data) }
  }

  async reposSetAdminBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_protected_branch_admin_enforced>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_protected_branch_admin_enforced.parse(res.data) }
  }

  async reposDeleteAdminBranchProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGetPullRequestReviewProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_protected_branch_pull_request_review>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: s_protected_branch_pull_request_review.parse(res.data),
    }
  }

  async reposUpdatePullRequestReviewProtection(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?: {
        bypass_pull_request_allowances?: {
          apps?: string[]
          teams?: string[]
          users?: string[]
        }
        dismiss_stale_reviews?: boolean
        dismissal_restrictions?: {
          apps?: string[]
          teams?: string[]
          users?: string[]
        }
        require_code_owner_reviews?: boolean
        require_last_push_approval?: boolean
        required_approving_review_count?: number
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_protected_branch_pull_request_review>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: s_protected_branch_pull_request_review.parse(res.data),
    }
  }

  async reposDeletePullRequestReviewProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGetCommitSignatureProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_protected_branch_admin_enforced>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_protected_branch_admin_enforced.parse(res.data) }
  }

  async reposCreateCommitSignatureProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_protected_branch_admin_enforced>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_protected_branch_admin_enforced.parse(res.data) }
  }

  async reposDeleteCommitSignatureProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGetStatusChecksProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_status_check_policy>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_status_check_policy.parse(res.data) }
  }

  async reposUpdateStatusCheckProtection(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?: {
        checks?: {
          app_id?: number
          context: string
        }[]
        contexts?: string[]
        strict?: boolean
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_status_check_policy>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_status_check_policy.parse(res.data) }
  }

  async reposRemoveStatusCheckProtection(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGetAllStatusCheckContexts(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<string[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(z.string()).parse(res.data) }
  }

  async reposAddStatusCheckContexts(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            contexts: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<string[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(z.string()).parse(res.data) }
  }

  async reposSetStatusCheckContexts(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            contexts: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<string[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(z.string()).parse(res.data) }
  }

  async reposRemoveStatusCheckContexts(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody:
        | {
            contexts: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<string[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(z.string()).parse(res.data) }
  }

  async reposGetAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_branch_restriction_policy>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_branch_restriction_policy.parse(res.data) }
  }

  async reposDeleteAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGetAppsWithAccessToProtectedBranch(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_integration[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_integration).parse(res.data) }
  }

  async reposAddAppAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            apps: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_integration[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_integration).parse(res.data) }
  }

  async reposSetAppAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            apps: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_integration[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_integration).parse(res.data) }
  }

  async reposRemoveAppAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody:
        | {
            apps: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_integration[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_integration).parse(res.data) }
  }

  async reposGetTeamsWithAccessToProtectedBranch(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team).parse(res.data) }
  }

  async reposAddTeamAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            teams: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team).parse(res.data) }
  }

  async reposSetTeamAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            teams: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team).parse(res.data) }
  }

  async reposRemoveTeamAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody:
        | {
            teams: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team).parse(res.data) }
  }

  async reposGetUsersWithAccessToProtectedBranch(
    p: {
      owner: string
      repo: string
      branch: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async reposAddUserAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            users: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async reposSetUserAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody?:
        | {
            users: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async reposRemoveUserAccessRestrictions(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody:
        | {
            users: string[]
          }
        | string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async reposRenameBranch(
    p: {
      owner: string
      repo: string
      branch: string
      requestBody: {
        new_name: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_branch_with_protection>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/rename`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_branch_with_protection.parse(res.data) }
  }

  async checksCreate(
    p: {
      owner: string
      repo: string
      requestBody:
        | {
            status: EmptyObject
          }
        | {
            [key: string]: unknown
          }
        | {
            status?: EmptyObject
          }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_check_run>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/check-runs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_check_run.parse(res.data) }
  }

  async checksGet(
    p: {
      owner: string
      repo: string
      checkRunId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_check_run>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_check_run.parse(res.data) }
  }

  async checksUpdate(
    p: {
      owner: string
      repo: string
      checkRunId: number
      requestBody: {
        actions?: {
          description: string
          identifier: string
          label: string
        }[]
        completed_at?: string
        conclusion?:
          | "action_required"
          | "cancelled"
          | "failure"
          | "neutral"
          | "success"
          | "skipped"
          | "stale"
          | "timed_out"
        details_url?: string
        external_id?: string
        name?: string
        output?: {
          annotations?: {
            annotation_level: "notice" | "warning" | "failure"
            end_column?: number
            end_line: number
            message: string
            path: string
            raw_details?: string
            start_column?: number
            start_line: number
            title?: string
          }[]
          images?: {
            alt: string
            caption?: string
            image_url: string
          }[]
          summary: string
          text?: string
          title?: string
        }
        started_at?: string
        status?: "queued" | "in_progress" | "completed"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_check_run>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_check_run.parse(res.data) }
  }

  async checksListAnnotations(
    p: {
      owner: string
      repo: string
      checkRunId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_check_annotation[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}/annotations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_check_annotation).parse(res.data) }
  }

  async checksRerequestRun(
    p: {
      owner: string
      repo: string
      checkRunId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}/rerequest`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async checksCreateSuite(
    p: {
      owner: string
      repo: string
      requestBody: {
        head_sha: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_check_suite>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/check-suites`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_check_suite.parse(res.data) }
  }

  async checksSetSuitesPreferences(
    p: {
      owner: string
      repo: string
      requestBody: {
        auto_trigger_checks?: {
          app_id: number
          setting: boolean
        }[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_check_suite_preference>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/check-suites/preferences`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_check_suite_preference.parse(res.data) }
  }

  async checksGetSuite(
    p: {
      owner: string
      repo: string
      checkSuiteId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_check_suite>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_check_suite.parse(res.data) }
  }

  async checksListForSuite(
    p: {
      owner: string
      repo: string
      checkSuiteId: number
      checkName?: string
      status?: "queued" | "in_progress" | "completed"
      filter?: "latest" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      check_runs: t_check_run[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}/check-runs`
    const query = this._query({
      check_name: p["checkName"],
      status: p["status"],
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          check_runs: z.array(s_check_run),
        })
        .parse(res.data),
    }
  }

  async checksRerequestSuite(
    p: {
      owner: string
      repo: string
      checkSuiteId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}/rerequest`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async codeScanningListAlertsForRepo(
    p: {
      owner: string
      repo: string
      toolName?: t_code_scanning_analysis_tool_name
      toolGuid?: t_code_scanning_analysis_tool_guid
      page?: number
      perPage?: number
      ref?: t_code_scanning_ref
      direction?: "asc" | "desc"
      sort?: "created" | "updated"
      state?: t_code_scanning_alert_state_query
      severity?: t_code_scanning_alert_severity
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_alert_items[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts`
    const query = this._query({
      tool_name: p["toolName"],
      tool_guid: p["toolGuid"],
      page: p["page"],
      per_page: p["perPage"],
      ref: p["ref"],
      direction: p["direction"],
      sort: p["sort"],
      state: p["state"],
      severity: p["severity"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_code_scanning_alert_items).parse(res.data),
    }
  }

  async codeScanningGetAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_alert>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts/${p["alertNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_code_scanning_alert.parse(res.data) }
  }

  async codeScanningUpdateAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
      requestBody: {
        dismissed_comment?: t_code_scanning_alert_dismissed_comment
        dismissed_reason?: t_code_scanning_alert_dismissed_reason
        state: t_code_scanning_alert_set_state
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_alert>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts/${p["alertNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_code_scanning_alert.parse(res.data) }
  }

  async codeScanningListAlertInstances(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
      page?: number
      perPage?: number
      ref?: t_code_scanning_ref
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_alert_instance[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts/${p["alertNumber"]}/instances`
    const query = this._query({
      page: p["page"],
      per_page: p["perPage"],
      ref: p["ref"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_code_scanning_alert_instance).parse(res.data),
    }
  }

  async codeScanningListRecentAnalyses(
    p: {
      owner: string
      repo: string
      toolName?: t_code_scanning_analysis_tool_name
      toolGuid?: t_code_scanning_analysis_tool_guid
      page?: number
      perPage?: number
      ref?: t_code_scanning_ref
      sarifId?: t_code_scanning_analysis_sarif_id
      direction?: "asc" | "desc"
      sort?: "created"
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_analysis[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/analyses`
    const query = this._query({
      tool_name: p["toolName"],
      tool_guid: p["toolGuid"],
      page: p["page"],
      per_page: p["perPage"],
      ref: p["ref"],
      sarif_id: p["sarifId"],
      direction: p["direction"],
      sort: p["sort"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_code_scanning_analysis).parse(res.data) }
  }

  async codeScanningGetAnalysis(
    p: {
      owner: string
      repo: string
      analysisId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      [key: string]: unknown
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/analyses/${p["analysisId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async codeScanningDeleteAnalysis(
    p: {
      owner: string
      repo: string
      analysisId: number
      confirmDelete?: string | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_analysis_deletion>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/analyses/${p["analysisId"]}`
    const query = this._query({ confirm_delete: p["confirmDelete"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_code_scanning_analysis_deletion.parse(res.data) }
  }

  async codeScanningListCodeqlDatabases(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_codeql_database[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/codeql/databases`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_code_scanning_codeql_database).parse(res.data),
    }
  }

  async codeScanningGetCodeqlDatabase(
    p: {
      owner: string
      repo: string
      language: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_codeql_database>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/codeql/databases/${p["language"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_code_scanning_codeql_database.parse(res.data) }
  }

  async codeScanningGetDefaultSetup(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_default_setup>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/default-setup`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_code_scanning_default_setup.parse(res.data) }
  }

  async codeScanningUpdateDefaultSetup(
    p: {
      owner: string
      repo: string
      requestBody: t_code_scanning_default_setup_update
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    | AxiosResponse<t_empty_object>
    | AxiosResponse<t_code_scanning_default_setup_update_response>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/default-setup`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async codeScanningUploadSarif(
    p: {
      owner: string
      repo: string
      requestBody: {
        checkout_uri?: string
        commit_sha: t_code_scanning_analysis_commit_sha
        ref: t_code_scanning_ref
        sarif: t_code_scanning_analysis_sarif_file
        started_at?: string
        tool_name?: string
        validate?: boolean
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_sarifs_receipt>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/sarifs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_code_scanning_sarifs_receipt.parse(res.data) }
  }

  async codeScanningGetSarif(
    p: {
      owner: string
      repo: string
      sarifId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_scanning_sarifs_status>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/code-scanning/sarifs/${p["sarifId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_code_scanning_sarifs_status.parse(res.data) }
  }

  async reposCodeownersErrors(
    p: {
      owner: string
      repo: string
      ref?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codeowners_errors>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/codeowners/errors`
    const query = this._query({ ref: p["ref"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codeowners_errors.parse(res.data) }
  }

  async codespacesListInRepositoryForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      codespaces: t_codespace[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/codespaces`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          codespaces: z.array(s_codespace),
        })
        .parse(res.data),
    }
  }

  async codespacesCreateWithRepoForAuthenticatedUser(
    p: {
      owner: string
      repo: string
      requestBody: {
        client_ip?: string
        devcontainer_path?: string
        display_name?: string
        geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest"
        idle_timeout_minutes?: number
        location?: string
        machine?: string
        multi_repo_permissions_opt_out?: boolean
        ref?: string
        retention_period_minutes?: number
        working_directory?: string
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespace>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/codespaces`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespace.parse(res.data) }
  }

  async codespacesListDevcontainersInRepositoryForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      devcontainers: {
        display_name?: string
        name?: string
        path: string
      }[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/codespaces/devcontainers`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          devcontainers: z.array(
            z.object({
              path: z.string(),
              name: z.string().optional(),
              display_name: z.string().optional(),
            }),
          ),
        })
        .parse(res.data),
    }
  }

  async codespacesRepoMachinesForAuthenticatedUser(
    p: {
      owner: string
      repo: string
      location?: string
      clientIp?: string
      ref?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      machines: t_codespace_machine[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/codespaces/machines`
    const query = this._query({
      location: p["location"],
      client_ip: p["clientIp"],
      ref: p["ref"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          machines: z.array(s_codespace_machine),
        })
        .parse(res.data),
    }
  }

  async codespacesPreFlightWithRepoForAuthenticatedUser(
    p: {
      owner: string
      repo: string
      ref?: string
      clientIp?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      billable_owner?: t_simple_user
      defaults?: {
        devcontainer_path: string | null
        location: string
      }
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/codespaces/new`
    const query = this._query({ ref: p["ref"], client_ip: p["clientIp"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          billable_owner: s_simple_user.optional(),
          defaults: z
            .object({
              location: z.string(),
              devcontainer_path: z.string().nullable(),
            })
            .optional(),
        })
        .parse(res.data),
    }
  }

  async codespacesListRepoSecrets(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      secrets: t_repo_codespaces_secret[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          secrets: z.array(s_repo_codespaces_secret),
        })
        .parse(res.data),
    }
  }

  async codespacesGetRepoPublicKey(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespaces_public_key>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/public-key`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespaces_public_key.parse(res.data) }
  }

  async codespacesGetRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repo_codespaces_secret>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repo_codespaces_secret.parse(res.data) }
  }

  async codespacesCreateOrUpdateRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object> | AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async codespacesDeleteRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListCollaborators(
    p: {
      owner: string
      repo: string
      affiliation?: "outside" | "direct" | "all"
      permission?: "pull" | "triage" | "push" | "maintain" | "admin"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_collaborator[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/collaborators`
    const query = this._query({
      affiliation: p["affiliation"],
      permission: p["permission"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_collaborator).parse(res.data) }
  }

  async reposCheckCollaborator(
    p: {
      owner: string
      repo: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposAddCollaborator(
    p: {
      owner: string
      repo: string
      username: string
      requestBody?: {
        permission?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_invitation> | AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_invitation.parse(res.data) }
  }

  async reposRemoveCollaborator(
    p: {
      owner: string
      repo: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGetCollaboratorPermissionLevel(
    p: {
      owner: string
      repo: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_collaborator_permission>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}/permission`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: s_repository_collaborator_permission.parse(res.data),
    }
  }

  async reposListCommitCommentsForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_commit_comment[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/comments`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_commit_comment).parse(res.data) }
  }

  async reposGetCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_commit_comment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_commit_comment.parse(res.data) }
  }

  async reposUpdateCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_commit_comment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_commit_comment.parse(res.data) }
  }

  async reposDeleteCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reactionsListForCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_reaction).parse(res.data) }
  }

  async reactionsCreateForCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_reaction.parse(res.data) }
  }

  async reactionsDeleteForCommitComment(
    p: {
      owner: string
      repo: string
      commentId: number
      reactionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions/${p["reactionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListCommits(
    p: {
      owner: string
      repo: string
      sha?: string
      path?: string
      author?: string
      committer?: string
      since?: string
      until?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_commit[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/commits`
    const query = this._query({
      sha: p["sha"],
      path: p["path"],
      author: p["author"],
      committer: p["committer"],
      since: p["since"],
      until: p["until"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_commit).parse(res.data) }
  }

  async reposListBranchesForHeadCommit(
    p: {
      owner: string
      repo: string
      commitSha: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_branch_short[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/branches-where-head`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_branch_short).parse(res.data) }
  }

  async reposListCommentsForCommit(
    p: {
      owner: string
      repo: string
      commitSha: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_commit_comment[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/comments`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_commit_comment).parse(res.data) }
  }

  async reposCreateCommitComment(
    p: {
      owner: string
      repo: string
      commitSha: string
      requestBody: {
        body: string
        line?: number
        path?: string
        position?: number
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_commit_comment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_commit_comment.parse(res.data) }
  }

  async reposListPullRequestsAssociatedWithCommit(
    p: {
      owner: string
      repo: string
      commitSha: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_simple[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/pulls`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_pull_request_simple).parse(res.data) }
  }

  async reposGetCommit(
    p: {
      owner: string
      repo: string
      page?: number
      perPage?: number
      ref: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_commit>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_commit.parse(res.data) }
  }

  async checksListForRef(
    p: {
      owner: string
      repo: string
      ref: string
      checkName?: string
      status?: "queued" | "in_progress" | "completed"
      filter?: "latest" | "all"
      perPage?: number
      page?: number
      appId?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      check_runs: t_check_run[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/check-runs`
    const query = this._query({
      check_name: p["checkName"],
      status: p["status"],
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
      app_id: p["appId"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          check_runs: z.array(s_check_run),
        })
        .parse(res.data),
    }
  }

  async checksListSuitesForRef(
    p: {
      owner: string
      repo: string
      ref: string
      appId?: number
      checkName?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      check_suites: t_check_suite[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/check-suites`
    const query = this._query({
      app_id: p["appId"],
      check_name: p["checkName"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          check_suites: z.array(s_check_suite),
        })
        .parse(res.data),
    }
  }

  async reposGetCombinedStatusForRef(
    p: {
      owner: string
      repo: string
      ref: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_combined_commit_status>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/status`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_combined_commit_status.parse(res.data) }
  }

  async reposListCommitStatusesForRef(
    p: {
      owner: string
      repo: string
      ref: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_status[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/statuses`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_status).parse(res.data) }
  }

  async reposGetCommunityProfileMetrics(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_community_profile>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/community/profile`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_community_profile.parse(res.data) }
  }

  async reposCompareCommits(
    p: {
      owner: string
      repo: string
      page?: number
      perPage?: number
      basehead: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_commit_comparison>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/compare/${p["basehead"]}`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_commit_comparison.parse(res.data) }
  }

  async reposGetContent(
    p: {
      owner: string
      repo: string
      path: string
      ref?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<
      | t_content_directory
      | t_content_file
      | t_content_symlink
      | t_content_submodule
    >
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`
    const query = this._query({ ref: p["ref"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .union([
          s_content_directory,
          s_content_file,
          s_content_symlink,
          s_content_submodule,
        ])
        .parse(res.data),
    }
  }

  async reposCreateOrUpdateFileContents(
    p: {
      owner: string
      repo: string
      path: string
      requestBody: {
        author?: {
          date?: string
          email: string
          name: string
        }
        branch?: string
        committer?: {
          date?: string
          email: string
          name: string
        }
        content: string
        message: string
        sha?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_file_commit>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_file_commit.parse(res.data) }
  }

  async reposDeleteFile(
    p: {
      owner: string
      repo: string
      path: string
      requestBody: {
        author?: {
          email?: string
          name?: string
        }
        branch?: string
        committer?: {
          email?: string
          name?: string
        }
        message: string
        sha: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_file_commit>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_file_commit.parse(res.data) }
  }

  async reposListContributors(
    p: {
      owner: string
      repo: string
      anon?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_contributor[]> | AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/contributors`
    const query = this._query({
      anon: p["anon"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_contributor).parse(res.data) }
  }

  async dependabotListAlertsForRepo(
    p: {
      owner: string
      repo: string
      state?: string
      severity?: string
      ecosystem?: string
      package?: string
      manifest?: string
      scope?: "development" | "runtime"
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      page?: number
      perPage?: number
      before?: string
      after?: string
      first?: number
      last?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_dependabot_alert[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dependabot/alerts`
    const query = this._query({
      state: p["state"],
      severity: p["severity"],
      ecosystem: p["ecosystem"],
      package: p["package"],
      manifest: p["manifest"],
      scope: p["scope"],
      sort: p["sort"],
      direction: p["direction"],
      page: p["page"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
      first: p["first"],
      last: p["last"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_dependabot_alert).parse(res.data) }
  }

  async dependabotGetAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_dependabot_alert>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dependabot/alerts/${p["alertNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_dependabot_alert.parse(res.data) }
  }

  async dependabotUpdateAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
      requestBody: {
        dismissed_comment?: string
        dismissed_reason?:
          | "fix_started"
          | "inaccurate"
          | "no_bandwidth"
          | "not_used"
          | "tolerable_risk"
        state: "dismissed" | "open"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_dependabot_alert>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dependabot/alerts/${p["alertNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_dependabot_alert.parse(res.data) }
  }

  async dependabotListRepoSecrets(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      secrets: t_dependabot_secret[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          secrets: z.array(s_dependabot_secret),
        })
        .parse(res.data),
    }
  }

  async dependabotGetRepoPublicKey(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_dependabot_public_key>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/public-key`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_dependabot_public_key.parse(res.data) }
  }

  async dependabotGetRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_dependabot_secret>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_dependabot_secret.parse(res.data) }
  }

  async dependabotCreateOrUpdateRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object> | AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async dependabotDeleteRepoSecret(
    p: {
      owner: string
      repo: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async dependencyGraphDiffRange(
    p: {
      owner: string
      repo: string
      basehead: string
      name?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_dependency_graph_diff>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dependency-graph/compare/${p["basehead"]}`
    const query = this._query({ name: p["name"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_dependency_graph_diff.parse(res.data) }
  }

  async dependencyGraphExportSbom(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_dependency_graph_spdx_sbom>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dependency-graph/sbom`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_dependency_graph_spdx_sbom.parse(res.data) }
  }

  async dependencyGraphCreateRepositorySnapshot(
    p: {
      owner: string
      repo: string
      requestBody: t_snapshot
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      created_at: string
      id: number
      message: string
      result: string
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dependency-graph/snapshots`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          id: z.coerce.number(),
          created_at: z.string(),
          result: z.string(),
          message: z.string(),
        })
        .parse(res.data),
    }
  }

  async reposListDeployments(
    p: {
      owner: string
      repo: string
      sha?: string
      ref?: string
      task?: string
      environment?: string | null
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deployment[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/deployments`
    const query = this._query({
      sha: p["sha"],
      ref: p["ref"],
      task: p["task"],
      environment: p["environment"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_deployment).parse(res.data) }
  }

  async reposCreateDeployment(
    p: {
      owner: string
      repo: string
      requestBody: {
        auto_merge?: boolean
        description?: string | null
        environment?: string
        payload?:
          | {
              [key: string]: unknown
            }
          | string
        production_environment?: boolean
        ref: string
        required_contexts?: string[]
        task?: string
        transient_environment?: boolean
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    | AxiosResponse<t_deployment>
    | AxiosResponse<{
        message?: string
      }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/deployments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_deployment.parse(res.data) }
  }

  async reposGetDeployment(
    p: {
      owner: string
      repo: string
      deploymentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deployment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_deployment.parse(res.data) }
  }

  async reposDeleteDeployment(
    p: {
      owner: string
      repo: string
      deploymentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListDeploymentStatuses(
    p: {
      owner: string
      repo: string
      deploymentId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deployment_status[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_deployment_status).parse(res.data) }
  }

  async reposCreateDeploymentStatus(
    p: {
      owner: string
      repo: string
      deploymentId: number
      requestBody: {
        auto_inactive?: boolean
        description?: string
        environment?: string
        environment_url?: string
        log_url?: string
        state:
          | "error"
          | "failure"
          | "inactive"
          | "in_progress"
          | "queued"
          | "pending"
          | "success"
        target_url?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deployment_status>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_deployment_status.parse(res.data) }
  }

  async reposGetDeploymentStatus(
    p: {
      owner: string
      repo: string
      deploymentId: number
      statusId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deployment_status>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses/${p["statusId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_deployment_status.parse(res.data) }
  }

  async reposCreateDispatchEvent(
    p: {
      owner: string
      repo: string
      requestBody: {
        client_payload?: {
          [key: string]: unknown
        }
        event_type: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/dispatches`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGetAllEnvironments(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      environments?: t_environment[]
      total_count?: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number().optional(),
          environments: z.array(s_environment).optional(),
        })
        .parse(res.data),
    }
  }

  async reposGetEnvironment(
    p: {
      owner: string
      repo: string
      environmentName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_environment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_environment.parse(res.data) }
  }

  async reposCreateOrUpdateEnvironment(
    p: {
      owner: string
      repo: string
      environmentName: string
      requestBody?: {
        deployment_branch_policy?: t_deployment_branch_policy_settings
        reviewers?:
          | {
              id?: number
              type?: t_deployment_reviewer_type
            }[]
          | null
        wait_timer?: t_wait_timer
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_environment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_environment.parse(res.data) }
  }

  async reposDeleteAnEnvironment(
    p: {
      owner: string
      repo: string
      environmentName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListDeploymentBranchPolicies(
    p: {
      owner: string
      repo: string
      environmentName: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      branch_policies: t_deployment_branch_policy[]
      total_count: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          branch_policies: z.array(s_deployment_branch_policy),
        })
        .parse(res.data),
    }
  }

  async reposCreateDeploymentBranchPolicy(
    p: {
      owner: string
      repo: string
      environmentName: string
      requestBody: t_deployment_branch_policy_name_pattern
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deployment_branch_policy>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_deployment_branch_policy.parse(res.data) }
  }

  async reposGetDeploymentBranchPolicy(
    p: {
      owner: string
      repo: string
      environmentName: string
      branchPolicyId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deployment_branch_policy>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies/${p["branchPolicyId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_deployment_branch_policy.parse(res.data) }
  }

  async reposUpdateDeploymentBranchPolicy(
    p: {
      owner: string
      repo: string
      environmentName: string
      branchPolicyId: number
      requestBody: t_deployment_branch_policy_name_pattern
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deployment_branch_policy>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies/${p["branchPolicyId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_deployment_branch_policy.parse(res.data) }
  }

  async reposDeleteDeploymentBranchPolicy(
    p: {
      owner: string
      repo: string
      environmentName: string
      branchPolicyId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies/${p["branchPolicyId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGetAllDeploymentProtectionRules(
    p: {
      environmentName: string
      repo: string
      owner: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      custom_deployment_protection_rules?: t_deployment_protection_rule[]
      total_count?: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment_protection_rules`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number().optional(),
          custom_deployment_protection_rules: z
            .array(s_deployment_protection_rule)
            .optional(),
        })
        .parse(res.data),
    }
  }

  async reposCreateDeploymentProtectionRule(
    p: {
      environmentName: string
      repo: string
      owner: string
      requestBody: {
        integration_id?: number
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deployment_protection_rule>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment_protection_rules`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_deployment_protection_rule.parse(res.data) }
  }

  async reposListCustomDeploymentRuleIntegrations(
    p: {
      environmentName: string
      repo: string
      owner: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      available_custom_deployment_protection_rule_integrations?: t_custom_deployment_rule_app[]
      total_count?: number
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment_protection_rules/apps`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number().optional(),
          available_custom_deployment_protection_rule_integrations: z
            .array(s_custom_deployment_rule_app)
            .optional(),
        })
        .parse(res.data),
    }
  }

  async reposGetCustomDeploymentProtectionRule(
    p: {
      owner: string
      repo: string
      environmentName: string
      protectionRuleId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deployment_protection_rule>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment_protection_rules/${p["protectionRuleId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_deployment_protection_rule.parse(res.data) }
  }

  async reposDisableDeploymentProtectionRule(
    p: {
      environmentName: string
      repo: string
      owner: string
      protectionRuleId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment_protection_rules/${p["protectionRuleId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async activityListRepoEvents(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_event[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_event).parse(res.data) }
  }

  async reposListForks(
    p: {
      owner: string
      repo: string
      sort?: "newest" | "oldest" | "stargazers" | "watchers"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/forks`
    const query = this._query({
      sort: p["sort"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async reposCreateFork(
    p: {
      owner: string
      repo: string
      requestBody?: {
        default_branch_only?: boolean
        name?: string
        organization?: string
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_full_repository>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/forks`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_full_repository.parse(res.data) }
  }

  async gitCreateBlob(
    p: {
      owner: string
      repo: string
      requestBody: {
        content: string
        encoding?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_short_blob>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/blobs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_short_blob.parse(res.data) }
  }

  async gitGetBlob(
    p: {
      owner: string
      repo: string
      fileSha: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_blob>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/blobs/${p["fileSha"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_blob.parse(res.data) }
  }

  async gitCreateCommit(
    p: {
      owner: string
      repo: string
      requestBody: {
        author?: {
          date?: string
          email: string
          name: string
        }
        committer?: {
          date?: string
          email?: string
          name?: string
        }
        message: string
        parents?: string[]
        signature?: string
        tree: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_git_commit>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/commits`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_git_commit.parse(res.data) }
  }

  async gitGetCommit(
    p: {
      owner: string
      repo: string
      commitSha: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_git_commit>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/commits/${p["commitSha"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_git_commit.parse(res.data) }
  }

  async gitListMatchingRefs(
    p: {
      owner: string
      repo: string
      ref: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_git_ref[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/matching-refs/${p["ref"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_git_ref).parse(res.data) }
  }

  async gitGetRef(
    p: {
      owner: string
      repo: string
      ref: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_git_ref>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/ref/${p["ref"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_git_ref.parse(res.data) }
  }

  async gitCreateRef(
    p: {
      owner: string
      repo: string
      requestBody: {
        ref: string
        sha: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_git_ref>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/refs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_git_ref.parse(res.data) }
  }

  async gitUpdateRef(
    p: {
      owner: string
      repo: string
      ref: string
      requestBody: {
        force?: boolean
        sha: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_git_ref>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/refs/${p["ref"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_git_ref.parse(res.data) }
  }

  async gitDeleteRef(
    p: {
      owner: string
      repo: string
      ref: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/refs/${p["ref"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async gitCreateTag(
    p: {
      owner: string
      repo: string
      requestBody: {
        message: string
        object: string
        tag: string
        tagger?: {
          date?: string
          email: string
          name: string
        }
        type: "commit" | "tree" | "blob"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_git_tag>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/tags`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_git_tag.parse(res.data) }
  }

  async gitGetTag(
    p: {
      owner: string
      repo: string
      tagSha: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_git_tag>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/tags/${p["tagSha"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_git_tag.parse(res.data) }
  }

  async gitCreateTree(
    p: {
      owner: string
      repo: string
      requestBody: {
        base_tree?: string
        tree: {
          content?: string
          mode?: "100644" | "100755" | "040000" | "160000" | "120000"
          path?: string
          sha?: string | null
          type?: "blob" | "tree" | "commit"
        }[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_git_tree>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/trees`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_git_tree.parse(res.data) }
  }

  async gitGetTree(
    p: {
      owner: string
      repo: string
      treeSha: string
      recursive?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_git_tree>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/git/trees/${p["treeSha"]}`
    const query = this._query({ recursive: p["recursive"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_git_tree.parse(res.data) }
  }

  async reposListWebhooks(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_hook[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_hook).parse(res.data) }
  }

  async reposCreateWebhook(
    p: {
      owner: string
      repo: string
      requestBody?: {
        active?: boolean
        config?: {
          content_type?: t_webhook_config_content_type
          digest?: string
          insecure_ssl?: t_webhook_config_insecure_ssl
          secret?: t_webhook_config_secret
          token?: string
          url?: t_webhook_config_url
        }
        events?: string[]
        name?: string
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_hook>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_hook.parse(res.data) }
  }

  async reposGetWebhook(
    p: {
      owner: string
      repo: string
      hookId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_hook>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_hook.parse(res.data) }
  }

  async reposUpdateWebhook(
    p: {
      owner: string
      repo: string
      hookId: number
      requestBody: {
        active?: boolean
        add_events?: string[]
        config?: {
          address?: string
          content_type?: t_webhook_config_content_type
          insecure_ssl?: t_webhook_config_insecure_ssl
          room?: string
          secret?: t_webhook_config_secret
          url: t_webhook_config_url
        }
        events?: string[]
        remove_events?: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_hook>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_hook.parse(res.data) }
  }

  async reposDeleteWebhook(
    p: {
      owner: string
      repo: string
      hookId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGetWebhookConfigForRepo(
    p: {
      owner: string
      repo: string
      hookId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_webhook_config>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/config`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_webhook_config.parse(res.data) }
  }

  async reposUpdateWebhookConfigForRepo(
    p: {
      owner: string
      repo: string
      hookId: number
      requestBody?: {
        content_type?: t_webhook_config_content_type
        insecure_ssl?: t_webhook_config_insecure_ssl
        secret?: t_webhook_config_secret
        url?: t_webhook_config_url
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_webhook_config>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/config`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_webhook_config.parse(res.data) }
  }

  async reposListWebhookDeliveries(
    p: {
      owner: string
      repo: string
      hookId: number
      perPage?: number
      cursor?: string
      redelivery?: boolean
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_hook_delivery_item[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/deliveries`
    const query = this._query({
      per_page: p["perPage"],
      cursor: p["cursor"],
      redelivery: p["redelivery"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_hook_delivery_item).parse(res.data) }
  }

  async reposGetWebhookDelivery(
    p: {
      owner: string
      repo: string
      hookId: number
      deliveryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_hook_delivery>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_hook_delivery.parse(res.data) }
  }

  async reposRedeliverWebhookDelivery(
    p: {
      owner: string
      repo: string
      hookId: number
      deliveryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}/attempts`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async reposPingWebhook(
    p: {
      owner: string
      repo: string
      hookId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/pings`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposTestPushWebhook(
    p: {
      owner: string
      repo: string
      hookId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/tests`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async migrationsGetImportStatus(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_import>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/import`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_import.parse(res.data) }
  }

  async migrationsStartImport(
    p: {
      owner: string
      repo: string
      requestBody: {
        tfvc_project?: string
        vcs?: "subversion" | "git" | "mercurial" | "tfvc"
        vcs_password?: string
        vcs_url: string
        vcs_username?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_import>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/import`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_import.parse(res.data) }
  }

  async migrationsUpdateImport(
    p: {
      owner: string
      repo: string
      requestBody?: {
        tfvc_project?: string
        vcs?: "subversion" | "tfvc" | "git" | "mercurial"
        vcs_password?: string
        vcs_username?: string
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_import>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/import`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_import.parse(res.data) }
  }

  async migrationsCancelImport(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/import`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async migrationsGetCommitAuthors(
    p: {
      owner: string
      repo: string
      since?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_porter_author[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/import/authors`
    const query = this._query({ since: p["since"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_porter_author).parse(res.data) }
  }

  async migrationsMapCommitAuthor(
    p: {
      owner: string
      repo: string
      authorId: number
      requestBody?: {
        email?: string
        name?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_porter_author>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/import/authors/${p["authorId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_porter_author.parse(res.data) }
  }

  async migrationsGetLargeFiles(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_porter_large_file[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/import/large_files`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_porter_large_file).parse(res.data) }
  }

  async migrationsSetLfsPreference(
    p: {
      owner: string
      repo: string
      requestBody: {
        use_lfs: "opt_in" | "opt_out"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_import>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/import/lfs`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_import.parse(res.data) }
  }

  async appsGetRepoInstallation(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_installation>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/installation`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_installation.parse(res.data) }
  }

  async interactionsGetRestrictionsForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_interaction_limit_response | EmptyObject>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .union([s_interaction_limit_response, z.object({})])
        .parse(res.data),
    }
  }

  async interactionsSetRestrictionsForRepo(
    p: {
      owner: string
      repo: string
      requestBody: t_interaction_limit
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_interaction_limit_response>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_interaction_limit_response.parse(res.data) }
  }

  async interactionsRemoveRestrictionsForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListInvitations(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_invitation[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/invitations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_repository_invitation).parse(res.data) }
  }

  async reposUpdateInvitation(
    p: {
      owner: string
      repo: string
      invitationId: number
      requestBody?: {
        permissions?: "read" | "write" | "maintain" | "triage" | "admin"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_invitation>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/invitations/${p["invitationId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_invitation.parse(res.data) }
  }

  async reposDeleteInvitation(
    p: {
      owner: string
      repo: string
      invitationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/invitations/${p["invitationId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async issuesListForRepo(
    p: {
      owner: string
      repo: string
      milestone?: string
      state?: "open" | "closed" | "all"
      assignee?: string
      creator?: string
      mentioned?: string
      labels?: string
      sort?: "created" | "updated" | "comments"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues`
    const query = this._query({
      milestone: p["milestone"],
      state: p["state"],
      assignee: p["assignee"],
      creator: p["creator"],
      mentioned: p["mentioned"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_issue).parse(res.data) }
  }

  async issuesCreate(
    p: {
      owner: string
      repo: string
      requestBody: {
        assignee?: string | null
        assignees?: string[]
        body?: string
        labels?: (
          | string
          | {
              color?: string | null
              description?: string | null
              id?: number
              name?: string
            }
        )[]
        milestone?: string | number | null
        title: string | number
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_issue.parse(res.data) }
  }

  async issuesListCommentsForRepo(
    p: {
      owner: string
      repo: string
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue_comment[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/comments`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_issue_comment).parse(res.data) }
  }

  async issuesGetComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue_comment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_issue_comment.parse(res.data) }
  }

  async issuesUpdateComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue_comment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_issue_comment.parse(res.data) }
  }

  async issuesDeleteComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reactionsListForIssueComment(
    p: {
      owner: string
      repo: string
      commentId: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_reaction).parse(res.data) }
  }

  async reactionsCreateForIssueComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_reaction.parse(res.data) }
  }

  async reactionsDeleteForIssueComment(
    p: {
      owner: string
      repo: string
      commentId: number
      reactionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions/${p["reactionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async issuesListEventsForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue_event[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_issue_event).parse(res.data) }
  }

  async issuesGetEvent(
    p: {
      owner: string
      repo: string
      eventId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue_event>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/events/${p["eventId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_issue_event.parse(res.data) }
  }

  async issuesGet(
    p: {
      owner: string
      repo: string
      issueNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_issue.parse(res.data) }
  }

  async issuesUpdate(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody?: {
        assignee?: string | null
        assignees?: string[]
        body?: string | null
        labels?: (
          | string
          | {
              color?: string | null
              description?: string | null
              id?: number
              name?: string
            }
        )[]
        milestone?: string | number | null
        state?: "open" | "closed"
        state_reason?: "completed" | "not_planned" | "reopened" | null
        title?: string | number | null
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_issue.parse(res.data) }
  }

  async issuesAddAssignees(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody?: {
        assignees?: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/assignees`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_issue.parse(res.data) }
  }

  async issuesRemoveAssignees(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody: {
        assignees?: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/assignees`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_issue.parse(res.data) }
  }

  async issuesCheckUserCanBeAssignedToIssue(
    p: {
      owner: string
      repo: string
      issueNumber: number
      assignee: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/assignees/${p["assignee"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async issuesListComments(
    p: {
      owner: string
      repo: string
      issueNumber: number
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue_comment[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/comments`
    const query = this._query({
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_issue_comment).parse(res.data) }
  }

  async issuesCreateComment(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue_comment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_issue_comment.parse(res.data) }
  }

  async issuesListEvents(
    p: {
      owner: string
      repo: string
      issueNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue_event_for_issue[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_issue_event_for_issue).parse(res.data) }
  }

  async issuesListLabelsOnIssue(
    p: {
      owner: string
      repo: string
      issueNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_label[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_label).parse(res.data) }
  }

  async issuesAddLabels(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody?:
        | {
            labels?: string[]
          }
        | string[]
        | {
            labels?: {
              name: string
            }[]
          }
        | {
            name: string
          }[]
        | string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_label[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_label).parse(res.data) }
  }

  async issuesSetLabels(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody?:
        | {
            labels?: string[]
          }
        | string[]
        | {
            labels?: {
              name: string
            }[]
          }
        | {
            name: string
          }[]
        | string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_label[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_label).parse(res.data) }
  }

  async issuesRemoveAllLabels(
    p: {
      owner: string
      repo: string
      issueNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async issuesRemoveLabel(
    p: {
      owner: string
      repo: string
      issueNumber: number
      name: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_label[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_label).parse(res.data) }
  }

  async issuesLock(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody?: {
        lock_reason?: "off-topic" | "too heated" | "resolved" | "spam"
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/lock`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async issuesUnlock(
    p: {
      owner: string
      repo: string
      issueNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/lock`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reactionsListForIssue(
    p: {
      owner: string
      repo: string
      issueNumber: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_reaction).parse(res.data) }
  }

  async reactionsCreateForIssue(
    p: {
      owner: string
      repo: string
      issueNumber: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_reaction.parse(res.data) }
  }

  async reactionsDeleteForIssue(
    p: {
      owner: string
      repo: string
      issueNumber: number
      reactionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions/${p["reactionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async issuesListEventsForTimeline(
    p: {
      owner: string
      repo: string
      issueNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_timeline_issue_events[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/timeline`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_timeline_issue_events).parse(res.data) }
  }

  async reposListDeployKeys(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deploy_key[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_deploy_key).parse(res.data) }
  }

  async reposCreateDeployKey(
    p: {
      owner: string
      repo: string
      requestBody: {
        key: string
        read_only?: boolean
        title?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deploy_key>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/keys`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_deploy_key.parse(res.data) }
  }

  async reposGetDeployKey(
    p: {
      owner: string
      repo: string
      keyId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_deploy_key>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/keys/${p["keyId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_deploy_key.parse(res.data) }
  }

  async reposDeleteDeployKey(
    p: {
      owner: string
      repo: string
      keyId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/keys/${p["keyId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async issuesListLabelsForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_label[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/labels`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_label).parse(res.data) }
  }

  async issuesCreateLabel(
    p: {
      owner: string
      repo: string
      requestBody: {
        color?: string
        description?: string
        name: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_label>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/labels`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_label.parse(res.data) }
  }

  async issuesGetLabel(
    p: {
      owner: string
      repo: string
      name: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_label>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_label.parse(res.data) }
  }

  async issuesUpdateLabel(
    p: {
      owner: string
      repo: string
      name: string
      requestBody?: {
        color?: string
        description?: string
        new_name?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_label>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_label.parse(res.data) }
  }

  async issuesDeleteLabel(
    p: {
      owner: string
      repo: string
      name: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListLanguages(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_language>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/languages`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_language.parse(res.data) }
  }

  async licensesGetForRepo(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_license_content>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/license`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_license_content.parse(res.data) }
  }

  async reposMergeUpstream(
    p: {
      owner: string
      repo: string
      requestBody: {
        branch: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_merged_upstream>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/merge-upstream`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_merged_upstream.parse(res.data) }
  }

  async reposMerge(
    p: {
      owner: string
      repo: string
      requestBody: {
        base: string
        commit_message?: string
        head: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_commit> | AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/merges`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_commit.parse(res.data) }
  }

  async issuesListMilestones(
    p: {
      owner: string
      repo: string
      state?: "open" | "closed" | "all"
      sort?: "due_on" | "completeness"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_milestone[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/milestones`
    const query = this._query({
      state: p["state"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_milestone).parse(res.data) }
  }

  async issuesCreateMilestone(
    p: {
      owner: string
      repo: string
      requestBody: {
        description?: string
        due_on?: string
        state?: "open" | "closed"
        title: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_milestone>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/milestones`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_milestone.parse(res.data) }
  }

  async issuesGetMilestone(
    p: {
      owner: string
      repo: string
      milestoneNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_milestone>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_milestone.parse(res.data) }
  }

  async issuesUpdateMilestone(
    p: {
      owner: string
      repo: string
      milestoneNumber: number
      requestBody?: {
        description?: string
        due_on?: string
        state?: "open" | "closed"
        title?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_milestone>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_milestone.parse(res.data) }
  }

  async issuesDeleteMilestone(
    p: {
      owner: string
      repo: string
      milestoneNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async issuesListLabelsForMilestone(
    p: {
      owner: string
      repo: string
      milestoneNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_label[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}/labels`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_label).parse(res.data) }
  }

  async activityListRepoNotificationsForAuthenticatedUser(
    p: {
      owner: string
      repo: string
      all?: boolean
      participating?: boolean
      since?: string
      before?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_thread[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/notifications`
    const query = this._query({
      all: p["all"],
      participating: p["participating"],
      since: p["since"],
      before: p["before"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_thread).parse(res.data) }
  }

  async activityMarkRepoNotificationsAsRead(
    p: {
      owner: string
      repo: string
      requestBody?: {
        last_read_at?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    | AxiosResponse<{
        message?: string
        url?: string
      }>
    | AxiosResponse<void>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/notifications`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({ message: z.string().optional(), url: z.string().optional() })
        .parse(res.data),
    }
  }

  async reposGetPages(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_page>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pages`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_page.parse(res.data) }
  }

  async reposCreatePagesSite(
    p: {
      owner: string
      repo: string
      requestBody: {
        build_type?: "legacy" | "workflow"
        source?: {
          branch: string
          path?: "/" | "/docs"
        }
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_page>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pages`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_page.parse(res.data) }
  }

  async reposUpdateInformationAboutPagesSite(
    p: {
      owner: string
      repo: string
      requestBody: {
        build_type?: "legacy" | "workflow"
        cname?: string | null
        https_enforced?: boolean
        source?:
          | "gh-pages"
          | "master"
          | "master /docs"
          | {
              branch: string
              path: "/" | "/docs"
            }
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pages`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposDeletePagesSite(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pages`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListPagesBuilds(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_page_build[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pages/builds`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_page_build).parse(res.data) }
  }

  async reposRequestPagesBuild(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_page_build_status>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pages/builds`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_page_build_status.parse(res.data) }
  }

  async reposGetLatestPagesBuild(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_page_build>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pages/builds/latest`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_page_build.parse(res.data) }
  }

  async reposGetPagesBuild(
    p: {
      owner: string
      repo: string
      buildId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_page_build>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pages/builds/${p["buildId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_page_build.parse(res.data) }
  }

  async reposCreatePagesDeployment(
    p: {
      owner: string
      repo: string
      requestBody: {
        artifact_url: string
        environment?: string
        oidc_token: string
        pages_build_version: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_page_deployment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pages/deployment`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_page_deployment.parse(res.data) }
  }

  async reposGetPagesHealthCheck(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<t_pages_health_check> | AxiosResponse<t_empty_object>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pages/health`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pages_health_check.parse(res.data) }
  }

  async reposEnablePrivateVulnerabilityReporting(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/private-vulnerability-reporting`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposDisablePrivateVulnerabilityReporting(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/private-vulnerability-reporting`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async projectsListForRepo(
    p: {
      owner: string
      repo: string
      state?: "open" | "closed" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/projects`
    const query = this._query({
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_project).parse(res.data) }
  }

  async projectsCreateForRepo(
    p: {
      owner: string
      repo: string
      requestBody: {
        body?: string
        name: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/projects`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project.parse(res.data) }
  }

  async pullsList(
    p: {
      owner: string
      repo: string
      state?: "open" | "closed" | "all"
      head?: string
      base?: string
      sort?: "created" | "updated" | "popularity" | "long-running"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_simple[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls`
    const query = this._query({
      state: p["state"],
      head: p["head"],
      base: p["base"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_pull_request_simple).parse(res.data) }
  }

  async pullsCreate(
    p: {
      owner: string
      repo: string
      requestBody: {
        base: string
        body?: string
        draft?: boolean
        head: string
        head_repo?: string
        issue?: number
        maintainer_can_modify?: boolean
        title?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request.parse(res.data) }
  }

  async pullsListReviewCommentsForRepo(
    p: {
      owner: string
      repo: string
      sort?: "created" | "updated" | "created_at"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review_comment[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/comments`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_pull_request_review_comment).parse(res.data),
    }
  }

  async pullsGetReviewComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review_comment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_review_comment.parse(res.data) }
  }

  async pullsUpdateReviewComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review_comment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_review_comment.parse(res.data) }
  }

  async pullsDeleteReviewComment(
    p: {
      owner: string
      repo: string
      commentId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reactionsListForPullRequestReviewComment(
    p: {
      owner: string
      repo: string
      commentId: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_reaction).parse(res.data) }
  }

  async reactionsCreateForPullRequestReviewComment(
    p: {
      owner: string
      repo: string
      commentId: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_reaction.parse(res.data) }
  }

  async reactionsDeleteForPullRequestComment(
    p: {
      owner: string
      repo: string
      commentId: number
      reactionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions/${p["reactionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async pullsGet(
    p: {
      owner: string
      repo: string
      pullNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request.parse(res.data) }
  }

  async pullsUpdate(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody?: {
        base?: string
        body?: string
        maintainer_can_modify?: boolean
        state?: "open" | "closed"
        title?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request.parse(res.data) }
  }

  async codespacesCreateWithPrForAuthenticatedUser(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody: {
        client_ip?: string
        devcontainer_path?: string
        display_name?: string
        geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest"
        idle_timeout_minutes?: number
        location?: string
        machine?: string
        multi_repo_permissions_opt_out?: boolean
        retention_period_minutes?: number
        working_directory?: string
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespace>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/codespaces`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespace.parse(res.data) }
  }

  async pullsListReviewComments(
    p: {
      owner: string
      repo: string
      pullNumber: number
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review_comment[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_pull_request_review_comment).parse(res.data),
    }
  }

  async pullsCreateReviewComment(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody: {
        body: string
        commit_id: string
        in_reply_to?: number
        line?: number
        path: string
        position?: number
        side?: "LEFT" | "RIGHT"
        start_line?: number
        start_side?: "LEFT" | "RIGHT" | "side"
        subject_type?: "line" | "file"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review_comment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_review_comment.parse(res.data) }
  }

  async pullsCreateReplyForReviewComment(
    p: {
      owner: string
      repo: string
      pullNumber: number
      commentId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review_comment>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments/${p["commentId"]}/replies`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_review_comment.parse(res.data) }
  }

  async pullsListCommits(
    p: {
      owner: string
      repo: string
      pullNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_commit[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/commits`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_commit).parse(res.data) }
  }

  async pullsListFiles(
    p: {
      owner: string
      repo: string
      pullNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_diff_entry[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/files`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_diff_entry).parse(res.data) }
  }

  async pullsCheckIfMerged(
    p: {
      owner: string
      repo: string
      pullNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/merge`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async pullsMerge(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody?: {
        commit_message?: string
        commit_title?: string
        merge_method?: "merge" | "squash" | "rebase"
        sha?: string
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_merge_result>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/merge`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_merge_result.parse(res.data) }
  }

  async pullsListRequestedReviewers(
    p: {
      owner: string
      repo: string
      pullNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review_request>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_review_request.parse(res.data) }
  }

  async pullsRequestReviewers(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody?: {
        reviewers?: string[]
        team_reviewers?: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_simple>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_simple.parse(res.data) }
  }

  async pullsRemoveRequestedReviewers(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody: {
        reviewers: string[]
        team_reviewers?: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_simple>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_simple.parse(res.data) }
  }

  async pullsListReviews(
    p: {
      owner: string
      repo: string
      pullNumber: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_pull_request_review).parse(res.data) }
  }

  async pullsCreateReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody?: {
        body?: string
        comments?: {
          body: string
          line?: number
          path: string
          position?: number
          side?: string
          start_line?: number
          start_side?: string
        }[]
        commit_id?: string
        event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_review.parse(res.data) }
  }

  async pullsGetReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_review.parse(res.data) }
  }

  async pullsUpdateReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_review.parse(res.data) }
  }

  async pullsDeletePendingReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_review.parse(res.data) }
  }

  async pullsListCommentsForReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_review_comment[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/comments`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_review_comment).parse(res.data) }
  }

  async pullsDismissReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
      requestBody: {
        event?: "DISMISS"
        message: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/dismissals`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_review.parse(res.data) }
  }

  async pullsSubmitReview(
    p: {
      owner: string
      repo: string
      pullNumber: number
      reviewId: number
      requestBody: {
        body?: string
        event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_pull_request_review>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/events`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_pull_request_review.parse(res.data) }
  }

  async pullsUpdateBranch(
    p: {
      owner: string
      repo: string
      pullNumber: number
      requestBody?: {
        expected_head_sha?: string
      } | null
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      message?: string
      url?: string
    }>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/update-branch`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({ message: z.string().optional(), url: z.string().optional() })
        .parse(res.data),
    }
  }

  async reposGetReadme(
    p: {
      owner: string
      repo: string
      ref?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_content_file>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/readme`
    const query = this._query({ ref: p["ref"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_content_file.parse(res.data) }
  }

  async reposGetReadmeInDirectory(
    p: {
      owner: string
      repo: string
      dir: string
      ref?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_content_file>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/readme/${p["dir"]}`
    const query = this._query({ ref: p["ref"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_content_file.parse(res.data) }
  }

  async reposListReleases(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_release[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_release).parse(res.data) }
  }

  async reposCreateRelease(
    p: {
      owner: string
      repo: string
      requestBody: {
        body?: string
        discussion_category_name?: string
        draft?: boolean
        generate_release_notes?: boolean
        make_latest?: "true" | "false" | "legacy"
        name?: string
        prerelease?: boolean
        tag_name: string
        target_commitish?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_release>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_release.parse(res.data) }
  }

  async reposGetReleaseAsset(
    p: {
      owner: string
      repo: string
      assetId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_release_asset>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_release_asset.parse(res.data) }
  }

  async reposUpdateReleaseAsset(
    p: {
      owner: string
      repo: string
      assetId: number
      requestBody?: {
        label?: string
        name?: string
        state?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_release_asset>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_release_asset.parse(res.data) }
  }

  async reposDeleteReleaseAsset(
    p: {
      owner: string
      repo: string
      assetId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGenerateReleaseNotes(
    p: {
      owner: string
      repo: string
      requestBody: {
        configuration_file_path?: string
        previous_tag_name?: string
        tag_name: string
        target_commitish?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_release_notes_content>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/generate-notes`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_release_notes_content.parse(res.data) }
  }

  async reposGetLatestRelease(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_release>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/latest`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_release.parse(res.data) }
  }

  async reposGetReleaseByTag(
    p: {
      owner: string
      repo: string
      tag: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_release>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/tags/${p["tag"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_release.parse(res.data) }
  }

  async reposGetRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_release>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_release.parse(res.data) }
  }

  async reposUpdateRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
      requestBody?: {
        body?: string
        discussion_category_name?: string
        draft?: boolean
        make_latest?: "true" | "false" | "legacy"
        name?: string
        prerelease?: boolean
        tag_name?: string
        target_commitish?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_release>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_release.parse(res.data) }
  }

  async reposDeleteRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListReleaseAssets(
    p: {
      owner: string
      repo: string
      releaseId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_release_asset[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/assets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_release_asset).parse(res.data) }
  }

  async reposUploadReleaseAsset(
    p: {
      owner: string
      repo: string
      releaseId: number
      name: string
      label?: string
      requestBody?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_release_asset>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/assets`
    const headers = this._headers({
      "Content-Type": "application/octet-stream",
    })
    const query = this._query({ name: p["name"], label: p["label"] })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_release_asset.parse(res.data) }
  }

  async reactionsListForRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
      content?: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_reaction).parse(res.data) }
  }

  async reactionsCreateForRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
      requestBody: {
        content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_reaction.parse(res.data) }
  }

  async reactionsDeleteForRelease(
    p: {
      owner: string
      repo: string
      releaseId: number
      reactionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/reactions/${p["reactionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposGetBranchRules(
    p: {
      owner: string
      repo: string
      branch: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_rule_detailed[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/rules/branches/${p["branch"]}`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_repository_rule_detailed).parse(res.data) }
  }

  async reposGetRepoRulesets(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
      includesParents?: boolean
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_ruleset[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/rulesets`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      includes_parents: p["includesParents"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_repository_ruleset).parse(res.data) }
  }

  async reposCreateRepoRuleset(
    p: {
      owner: string
      repo: string
      requestBody: {
        bypass_actors?: t_repository_ruleset_bypass_actor[]
        conditions?: t_repository_ruleset_conditions
        enforcement: t_repository_rule_enforcement
        name: string
        rules?: t_repository_rule[]
        target?: "branch" | "tag"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_ruleset>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/rulesets`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_ruleset.parse(res.data) }
  }

  async reposGetRepoRuleset(
    p: {
      owner: string
      repo: string
      rulesetId: number
      includesParents?: boolean
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_ruleset>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/rulesets/${p["rulesetId"]}`
    const query = this._query({ includes_parents: p["includesParents"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_ruleset.parse(res.data) }
  }

  async reposUpdateRepoRuleset(
    p: {
      owner: string
      repo: string
      rulesetId: number
      requestBody?: {
        bypass_actors?: t_repository_ruleset_bypass_actor[]
        conditions?: t_repository_ruleset_conditions
        enforcement?: t_repository_rule_enforcement
        name?: string
        rules?: t_repository_rule[]
        target?: "branch" | "tag"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_ruleset>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/rulesets/${p["rulesetId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_ruleset.parse(res.data) }
  }

  async reposDeleteRepoRuleset(
    p: {
      owner: string
      repo: string
      rulesetId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/rulesets/${p["rulesetId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async secretScanningListAlertsForRepo(
    p: {
      owner: string
      repo: string
      state?: "open" | "resolved"
      secretType?: string
      resolution?: string
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      page?: number
      perPage?: number
      before?: string
      after?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_secret_scanning_alert[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts`
    const query = this._query({
      state: p["state"],
      secret_type: p["secretType"],
      resolution: p["resolution"],
      sort: p["sort"],
      direction: p["direction"],
      page: p["page"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_secret_scanning_alert).parse(res.data) }
  }

  async secretScanningGetAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_secret_scanning_alert>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts/${p["alertNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_secret_scanning_alert.parse(res.data) }
  }

  async secretScanningUpdateAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
      requestBody: {
        resolution?: t_secret_scanning_alert_resolution
        resolution_comment?: t_secret_scanning_alert_resolution_comment
        state: t_secret_scanning_alert_state
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_secret_scanning_alert>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts/${p["alertNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_secret_scanning_alert.parse(res.data) }
  }

  async secretScanningListLocationsForAlert(
    p: {
      owner: string
      repo: string
      alertNumber: t_alert_number
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_secret_scanning_location[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts/${p["alertNumber"]}/locations`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_secret_scanning_location).parse(res.data) }
  }

  async securityAdvisoriesListRepositoryAdvisories(
    p: {
      owner: string
      repo: string
      direction?: "asc" | "desc"
      sort?: "created" | "updated" | "published"
      before?: string
      after?: string
      perPage?: number
      state?: "triage" | "draft" | "published" | "closed"
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_advisory[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/security-advisories`
    const query = this._query({
      direction: p["direction"],
      sort: p["sort"],
      before: p["before"],
      after: p["after"],
      per_page: p["perPage"],
      state: p["state"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_repository_advisory).parse(res.data) }
  }

  async securityAdvisoriesCreateRepositoryAdvisory(
    p: {
      owner: string
      repo: string
      requestBody: t_repository_advisory_create
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_advisory>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/security-advisories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_advisory.parse(res.data) }
  }

  async securityAdvisoriesCreatePrivateVulnerabilityReport(
    p: {
      owner: string
      repo: string
      requestBody: t_private_vulnerability_report_create
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_advisory>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/security-advisories/reports`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_advisory.parse(res.data) }
  }

  async securityAdvisoriesGetRepositoryAdvisory(
    p: {
      owner: string
      repo: string
      ghsaId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_advisory>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/security-advisories/${p["ghsaId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_advisory.parse(res.data) }
  }

  async securityAdvisoriesUpdateRepositoryAdvisory(
    p: {
      owner: string
      repo: string
      ghsaId: string
      requestBody: t_repository_advisory_update
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_advisory>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/security-advisories/${p["ghsaId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_advisory.parse(res.data) }
  }

  async securityAdvisoriesCreateRepositoryAdvisoryCveRequest(
    p: {
      owner: string
      repo: string
      ghsaId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/security-advisories/${p["ghsaId"]}/cve`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async activityListStargazersForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[] | t_stargazer[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/stargazers`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .union([z.array(s_simple_user), z.array(s_stargazer)])
        .parse(res.data),
    }
  }

  async reposGetCodeFrequencyStats(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    | AxiosResponse<t_code_frequency_stat[]>
    | AxiosResponse<EmptyObject>
    | AxiosResponse<void>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/stats/code_frequency`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_code_frequency_stat).parse(res.data) }
  }

  async reposGetCommitActivityStats(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    | AxiosResponse<t_commit_activity[]>
    | AxiosResponse<EmptyObject>
    | AxiosResponse<void>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/stats/commit_activity`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_commit_activity).parse(res.data) }
  }

  async reposGetContributorsStats(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    | AxiosResponse<t_contributor_activity[]>
    | AxiosResponse<EmptyObject>
    | AxiosResponse<void>
  > {
    const url = `/repos/${p["owner"]}/${p["repo"]}/stats/contributors`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_contributor_activity).parse(res.data) }
  }

  async reposGetParticipationStats(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_participation_stats>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/stats/participation`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_participation_stats.parse(res.data) }
  }

  async reposGetPunchCardStats(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_code_frequency_stat[]> | AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/stats/punch_card`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_code_frequency_stat).parse(res.data) }
  }

  async reposCreateCommitStatus(
    p: {
      owner: string
      repo: string
      sha: string
      requestBody: {
        context?: string
        description?: string | null
        state: "error" | "failure" | "pending" | "success"
        target_url?: string | null
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_status>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/statuses/${p["sha"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_status.parse(res.data) }
  }

  async activityListWatchersForRepo(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/subscribers`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async activityGetRepoSubscription(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_subscription>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/subscription`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_subscription.parse(res.data) }
  }

  async activitySetRepoSubscription(
    p: {
      owner: string
      repo: string
      requestBody?: {
        ignored?: boolean
        subscribed?: boolean
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_subscription>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/subscription`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository_subscription.parse(res.data) }
  }

  async activityDeleteRepoSubscription(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/subscription`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListTags(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_tag[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/tags`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_tag).parse(res.data) }
  }

  async reposListTagProtection(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_tag_protection[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/tags/protection`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_tag_protection).parse(res.data) }
  }

  async reposCreateTagProtection(
    p: {
      owner: string
      repo: string
      requestBody: {
        pattern: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_tag_protection>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/tags/protection`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_tag_protection.parse(res.data) }
  }

  async reposDeleteTagProtection(
    p: {
      owner: string
      repo: string
      tagProtectionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/tags/protection/${p["tagProtectionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposDownloadTarballArchive(
    p: {
      owner: string
      repo: string
      ref: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/tarball/${p["ref"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposListTeams(
    p: {
      owner: string
      repo: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team).parse(res.data) }
  }

  async reposGetAllTopics(
    p: {
      owner: string
      repo: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_topic>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/topics`
    const query = this._query({ page: p["page"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_topic.parse(res.data) }
  }

  async reposReplaceAllTopics(
    p: {
      owner: string
      repo: string
      requestBody: {
        names: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_topic>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/topics`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_topic.parse(res.data) }
  }

  async reposGetClones(
    p: {
      owner: string
      repo: string
      per?: "day" | "week"
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_clone_traffic>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/traffic/clones`
    const query = this._query({ per: p["per"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_clone_traffic.parse(res.data) }
  }

  async reposGetTopPaths(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_content_traffic[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/traffic/popular/paths`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_content_traffic).parse(res.data) }
  }

  async reposGetTopReferrers(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_referrer_traffic[]>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/traffic/popular/referrers`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_referrer_traffic).parse(res.data) }
  }

  async reposGetViews(
    p: {
      owner: string
      repo: string
      per?: "day" | "week"
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_view_traffic>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/traffic/views`
    const query = this._query({ per: p["per"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_view_traffic.parse(res.data) }
  }

  async reposTransfer(
    p: {
      owner: string
      repo: string
      requestBody: {
        new_name?: string
        new_owner: string
        team_ids?: number[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/transfer`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_minimal_repository.parse(res.data) }
  }

  async reposCheckVulnerabilityAlerts(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposEnableVulnerabilityAlerts(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposDisableVulnerabilityAlerts(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposDownloadZipballArchive(
    p: {
      owner: string
      repo: string
      ref: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repos/${p["owner"]}/${p["repo"]}/zipball/${p["ref"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposCreateUsingTemplate(
    p: {
      templateOwner: string
      templateRepo: string
      requestBody: {
        description?: string
        include_all_branches?: boolean
        name: string
        owner?: string
        private?: boolean
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository>> {
    const url = `/repos/${p["templateOwner"]}/${p["templateRepo"]}/generate`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository.parse(res.data) }
  }

  async reposListPublic(
    p: {
      since?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/repositories`
    const query = this._query({ since: p["since"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async actionsListEnvironmentSecrets(
    p: {
      repositoryId: number
      environmentName: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      secrets: t_actions_secret[]
      total_count: number
    }>
  > {
    const url = `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          secrets: z.array(s_actions_secret),
        })
        .parse(res.data),
    }
  }

  async actionsGetEnvironmentPublicKey(
    p: {
      repositoryId: number
      environmentName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_public_key>> {
    const url = `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/public-key`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_public_key.parse(res.data) }
  }

  async actionsGetEnvironmentSecret(
    p: {
      repositoryId: number
      environmentName: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_secret>> {
    const url = `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_secret.parse(res.data) }
  }

  async actionsCreateOrUpdateEnvironmentSecret(
    p: {
      repositoryId: number
      environmentName: string
      secretName: string
      requestBody: {
        encrypted_value: string
        key_id: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object> | AxiosResponse<void>> {
    const url = `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsDeleteEnvironmentSecret(
    p: {
      repositoryId: number
      environmentName: string
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsListEnvironmentVariables(
    p: {
      repositoryId: number
      environmentName: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      total_count: number
      variables: t_actions_variable[]
    }>
  > {
    const url = `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          variables: z.array(s_actions_variable),
        })
        .parse(res.data),
    }
  }

  async actionsCreateEnvironmentVariable(
    p: {
      repositoryId: number
      environmentName: string
      requestBody: {
        name: string
        value: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object>> {
    const url = `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async actionsGetEnvironmentVariable(
    p: {
      repositoryId: number
      environmentName: string
      name: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_variable>> {
    const url = `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_variable.parse(res.data) }
  }

  async actionsUpdateEnvironmentVariable(
    p: {
      repositoryId: number
      name: string
      environmentName: string
      requestBody: {
        name?: string
        value?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables/${p["name"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async actionsDeleteEnvironmentVariable(
    p: {
      repositoryId: number
      name: string
      environmentName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables/${p["name"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async searchCode(
    p: {
      q: string
      sort?: "indexed"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      incomplete_results: boolean
      items: t_code_search_result_item[]
      total_count: number
    }>
  > {
    const url = `/search/code`
    const query = this._query({
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_code_search_result_item),
        })
        .parse(res.data),
    }
  }

  async searchCommits(
    p: {
      q: string
      sort?: "author-date" | "committer-date"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      incomplete_results: boolean
      items: t_commit_search_result_item[]
      total_count: number
    }>
  > {
    const url = `/search/commits`
    const query = this._query({
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_commit_search_result_item),
        })
        .parse(res.data),
    }
  }

  async searchIssuesAndPullRequests(
    p: {
      q: string
      sort?:
        | "comments"
        | "reactions"
        | "reactions-+1"
        | "reactions--1"
        | "reactions-smile"
        | "reactions-thinking_face"
        | "reactions-heart"
        | "reactions-tada"
        | "interactions"
        | "created"
        | "updated"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      incomplete_results: boolean
      items: t_issue_search_result_item[]
      total_count: number
    }>
  > {
    const url = `/search/issues`
    const query = this._query({
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_issue_search_result_item),
        })
        .parse(res.data),
    }
  }

  async searchLabels(
    p: {
      repositoryId: number
      q: string
      sort?: "created" | "updated"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      incomplete_results: boolean
      items: t_label_search_result_item[]
      total_count: number
    }>
  > {
    const url = `/search/labels`
    const query = this._query({
      repository_id: p["repositoryId"],
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_label_search_result_item),
        })
        .parse(res.data),
    }
  }

  async searchRepos(
    p: {
      q: string
      sort?: "stars" | "forks" | "help-wanted-issues" | "updated"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      incomplete_results: boolean
      items: t_repo_search_result_item[]
      total_count: number
    }>
  > {
    const url = `/search/repositories`
    const query = this._query({
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_repo_search_result_item),
        })
        .parse(res.data),
    }
  }

  async searchTopics(
    p: {
      q: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      incomplete_results: boolean
      items: t_topic_search_result_item[]
      total_count: number
    }>
  > {
    const url = `/search/topics`
    const query = this._query({
      q: p["q"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_topic_search_result_item),
        })
        .parse(res.data),
    }
  }

  async searchUsers(
    p: {
      q: string
      sort?: "followers" | "repositories" | "joined"
      order?: "desc" | "asc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      incomplete_results: boolean
      items: t_user_search_result_item[]
      total_count: number
    }>
  > {
    const url = `/search/users`
    const query = this._query({
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          incomplete_results: z.coerce.boolean(),
          items: z.array(s_user_search_result_item),
        })
        .parse(res.data),
    }
  }

  async teamsGetLegacy(
    p: {
      teamId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_full>> {
    const url = `/teams/${p["teamId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_full.parse(res.data) }
  }

  async teamsUpdateLegacy(
    p: {
      teamId: number
      requestBody: {
        description?: string
        name: string
        notification_setting?:
          | "notifications_enabled"
          | "notifications_disabled"
        parent_team_id?: number | null
        permission?: "pull" | "push" | "admin"
        privacy?: "secret" | "closed"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_full>> {
    const url = `/teams/${p["teamId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_full.parse(res.data) }
  }

  async teamsDeleteLegacy(
    p: {
      teamId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsListDiscussionsLegacy(
    p: {
      teamId: number
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion[]>> {
    const url = `/teams/${p["teamId"]}/discussions`
    const query = this._query({
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team_discussion).parse(res.data) }
  }

  async teamsCreateDiscussionLegacy(
    p: {
      teamId: number
      requestBody: {
        body: string
        private?: boolean
        title: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion>> {
    const url = `/teams/${p["teamId"]}/discussions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion.parse(res.data) }
  }

  async teamsGetDiscussionLegacy(
    p: {
      teamId: number
      discussionNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion.parse(res.data) }
  }

  async teamsUpdateDiscussionLegacy(
    p: {
      teamId: number
      discussionNumber: number
      requestBody?: {
        body?: string
        title?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion.parse(res.data) }
  }

  async teamsDeleteDiscussionLegacy(
    p: {
      teamId: number
      discussionNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsListDiscussionCommentsLegacy(
    p: {
      teamId: number
      discussionNumber: number
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion_comment[]>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments`
    const query = this._query({
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team_discussion_comment).parse(res.data) }
  }

  async teamsCreateDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion_comment>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion_comment.parse(res.data) }
  }

  async teamsGetDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      commentNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion_comment>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion_comment.parse(res.data) }
  }

  async teamsUpdateDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      commentNumber: number
      requestBody: {
        body: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_discussion_comment>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_discussion_comment.parse(res.data) }
  }

  async teamsDeleteDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      commentNumber: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reactionsListForTeamDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      commentNumber: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction[]>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_reaction).parse(res.data) }
  }

  async reactionsCreateForTeamDiscussionCommentLegacy(
    p: {
      teamId: number
      discussionNumber: number
      commentNumber: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_reaction.parse(res.data) }
  }

  async reactionsListForTeamDiscussionLegacy(
    p: {
      teamId: number
      discussionNumber: number
      content?:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction[]>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/reactions`
    const query = this._query({
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_reaction).parse(res.data) }
  }

  async reactionsCreateForTeamDiscussionLegacy(
    p: {
      teamId: number
      discussionNumber: number
      requestBody: {
        content:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_reaction>> {
    const url = `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/reactions`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_reaction.parse(res.data) }
  }

  async teamsListPendingInvitationsLegacy(
    p: {
      teamId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_invitation[]>> {
    const url = `/teams/${p["teamId"]}/invitations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_organization_invitation).parse(res.data) }
  }

  async teamsListMembersLegacy(
    p: {
      teamId: number
      role?: "member" | "maintainer" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/teams/${p["teamId"]}/members`
    const query = this._query({
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async teamsGetMemberLegacy(
    p: {
      teamId: number
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}/members/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsAddMemberLegacy(
    p: {
      teamId: number
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}/members/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsRemoveMemberLegacy(
    p: {
      teamId: number
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}/members/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsGetMembershipForUserLegacy(
    p: {
      teamId: number
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_membership>> {
    const url = `/teams/${p["teamId"]}/memberships/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_membership.parse(res.data) }
  }

  async teamsAddOrUpdateMembershipForUserLegacy(
    p: {
      teamId: number
      username: string
      requestBody?: {
        role?: "member" | "maintainer"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_membership>> {
    const url = `/teams/${p["teamId"]}/memberships/${p["username"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_membership.parse(res.data) }
  }

  async teamsRemoveMembershipForUserLegacy(
    p: {
      teamId: number
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}/memberships/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsListProjectsLegacy(
    p: {
      teamId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_project[]>> {
    const url = `/teams/${p["teamId"]}/projects`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team_project).parse(res.data) }
  }

  async teamsCheckPermissionsForProjectLegacy(
    p: {
      teamId: number
      projectId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_project>> {
    const url = `/teams/${p["teamId"]}/projects/${p["projectId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_project.parse(res.data) }
  }

  async teamsAddOrUpdateProjectPermissionsLegacy(
    p: {
      teamId: number
      projectId: number
      requestBody?: {
        permission?: "read" | "write" | "admin"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}/projects/${p["projectId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsRemoveProjectLegacy(
    p: {
      teamId: number
      projectId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}/projects/${p["projectId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsListReposLegacy(
    p: {
      teamId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/teams/${p["teamId"]}/repos`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async teamsCheckPermissionsForRepoLegacy(
    p: {
      teamId: number
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_repository> | AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_team_repository.parse(res.data) }
  }

  async teamsAddOrUpdateRepoPermissionsLegacy(
    p: {
      teamId: number
      owner: string
      repo: string
      requestBody?: {
        permission?: "pull" | "push" | "admin"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsRemoveRepoLegacy(
    p: {
      teamId: number
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async teamsListChildLegacy(
    p: {
      teamId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team[]>> {
    const url = `/teams/${p["teamId"]}/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team).parse(res.data) }
  }

  async usersGetAuthenticated(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_private_user | t_public_user>> {
    const url = `/user`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.union([s_private_user, s_public_user]).parse(res.data),
    }
  }

  async usersUpdateAuthenticated(
    p: {
      requestBody?: {
        bio?: string
        blog?: string
        company?: string
        email?: string
        hireable?: boolean
        location?: string
        name?: string
        twitter_username?: string | null
      }
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_private_user>> {
    const url = `/user`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_private_user.parse(res.data) }
  }

  async usersListBlockedByAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/user/blocks`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async usersCheckBlocked(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/blocks/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async usersBlock(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/blocks/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async usersUnblock(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/blocks/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesListForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
      repositoryId?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      codespaces: t_codespace[]
      total_count: number
    }>
  > {
    const url = `/user/codespaces`
    const query = this._query({
      per_page: p["perPage"],
      page: p["page"],
      repository_id: p["repositoryId"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          codespaces: z.array(s_codespace),
        })
        .parse(res.data),
    }
  }

  async codespacesCreateForAuthenticatedUser(
    p: {
      requestBody:
        | {
            client_ip?: string
            devcontainer_path?: string
            display_name?: string
            geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest"
            idle_timeout_minutes?: number
            location?: string
            machine?: string
            multi_repo_permissions_opt_out?: boolean
            ref?: string
            repository_id: number
            retention_period_minutes?: number
            working_directory?: string
          }
        | {
            devcontainer_path?: string
            geo?: "EuropeWest" | "SoutheastAsia" | "UsEast" | "UsWest"
            idle_timeout_minutes?: number
            location?: string
            machine?: string
            pull_request: {
              pull_request_number: number
              repository_id: number
            }
            working_directory?: string
          }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespace>> {
    const url = `/user/codespaces`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespace.parse(res.data) }
  }

  async codespacesListSecretsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      secrets: t_codespaces_secret[]
      total_count: number
    }>
  > {
    const url = `/user/codespaces/secrets`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          secrets: z.array(s_codespaces_secret),
        })
        .parse(res.data),
    }
  }

  async codespacesGetPublicKeyForAuthenticatedUser(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespaces_user_public_key>> {
    const url = `/user/codespaces/secrets/public-key`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespaces_user_public_key.parse(res.data) }
  }

  async codespacesGetSecretForAuthenticatedUser(
    p: {
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespaces_secret>> {
    const url = `/user/codespaces/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespaces_secret.parse(res.data) }
  }

  async codespacesCreateOrUpdateSecretForAuthenticatedUser(
    p: {
      secretName: string
      requestBody: {
        encrypted_value?: string
        key_id: string
        selected_repository_ids?: (number | string)[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_empty_object> | AxiosResponse<void>> {
    const url = `/user/codespaces/secrets/${p["secretName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_empty_object.parse(res.data) }
  }

  async codespacesDeleteSecretForAuthenticatedUser(
    p: {
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/codespaces/secrets/${p["secretName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesListRepositoriesForSecretForAuthenticatedUser(
    p: {
      secretName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      repositories: t_minimal_repository[]
      total_count: number
    }>
  > {
    const url = `/user/codespaces/secrets/${p["secretName"]}/repositories`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          repositories: z.array(s_minimal_repository),
        })
        .parse(res.data),
    }
  }

  async codespacesSetRepositoriesForSecretForAuthenticatedUser(
    p: {
      secretName: string
      requestBody: {
        selected_repository_ids: number[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/codespaces/secrets/${p["secretName"]}/repositories`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesAddRepositoryForSecretForAuthenticatedUser(
    p: {
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesRemoveRepositoryForSecretForAuthenticatedUser(
    p: {
      secretName: string
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async codespacesGetForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespace>> {
    const url = `/user/codespaces/${p["codespaceName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespace.parse(res.data) }
  }

  async codespacesUpdateForAuthenticatedUser(
    p: {
      codespaceName: string
      requestBody?: {
        display_name?: string
        machine?: string
        recent_folders?: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespace>> {
    const url = `/user/codespaces/${p["codespaceName"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespace.parse(res.data) }
  }

  async codespacesDeleteForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<EmptyObject>> {
    const url = `/user/codespaces/${p["codespaceName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.object({}).parse(res.data) }
  }

  async codespacesExportForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespace_export_details>> {
    const url = `/user/codespaces/${p["codespaceName"]}/exports`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespace_export_details.parse(res.data) }
  }

  async codespacesGetExportDetailsForAuthenticatedUser(
    p: {
      codespaceName: string
      exportId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespace_export_details>> {
    const url = `/user/codespaces/${p["codespaceName"]}/exports/${p["exportId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespace_export_details.parse(res.data) }
  }

  async codespacesCodespaceMachinesForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      machines: t_codespace_machine[]
      total_count: number
    }>
  > {
    const url = `/user/codespaces/${p["codespaceName"]}/machines`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          machines: z.array(s_codespace_machine),
        })
        .parse(res.data),
    }
  }

  async codespacesPublishForAuthenticatedUser(
    p: {
      codespaceName: string
      requestBody: {
        name?: string
        private?: boolean
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespace_with_full_repository>> {
    const url = `/user/codespaces/${p["codespaceName"]}/publish`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespace_with_full_repository.parse(res.data) }
  }

  async codespacesStartForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespace>> {
    const url = `/user/codespaces/${p["codespaceName"]}/start`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespace.parse(res.data) }
  }

  async codespacesStopForAuthenticatedUser(
    p: {
      codespaceName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_codespace>> {
    const url = `/user/codespaces/${p["codespaceName"]}/stop`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_codespace.parse(res.data) }
  }

  async packagesListDockerMigrationConflictingPackagesForAuthenticatedUser(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package[]>> {
    const url = `/user/docker/conflicts`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_package).parse(res.data) }
  }

  async usersSetPrimaryEmailVisibilityForAuthenticatedUser(
    p: {
      requestBody: {
        visibility: "public" | "private"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_email[]>> {
    const url = `/user/email/visibility`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_email).parse(res.data) }
  }

  async usersListEmailsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_email[]>> {
    const url = `/user/emails`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_email).parse(res.data) }
  }

  async usersAddEmailForAuthenticatedUser(
    p: {
      requestBody?:
        | {
            emails: string[]
          }
        | string[]
        | string
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_email[]>> {
    const url = `/user/emails`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_email).parse(res.data) }
  }

  async usersDeleteEmailForAuthenticatedUser(
    p: {
      requestBody:
        | {
            emails: string[]
          }
        | string[]
        | string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/emails`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async usersListFollowersForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/user/followers`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async usersListFollowedByAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/user/following`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async usersCheckPersonIsFollowedByAuthenticated(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/following/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async usersFollow(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/following/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async usersUnfollow(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/following/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async usersListGpgKeysForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gpg_key[]>> {
    const url = `/user/gpg_keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_gpg_key).parse(res.data) }
  }

  async usersCreateGpgKeyForAuthenticatedUser(
    p: {
      requestBody: {
        armored_public_key: string
        name?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gpg_key>> {
    const url = `/user/gpg_keys`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_gpg_key.parse(res.data) }
  }

  async usersGetGpgKeyForAuthenticatedUser(
    p: {
      gpgKeyId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gpg_key>> {
    const url = `/user/gpg_keys/${p["gpgKeyId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_gpg_key.parse(res.data) }
  }

  async usersDeleteGpgKeyForAuthenticatedUser(
    p: {
      gpgKeyId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/gpg_keys/${p["gpgKeyId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async appsListInstallationsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      installations: t_installation[]
      total_count: number
    }>
  > {
    const url = `/user/installations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          installations: z.array(s_installation),
        })
        .parse(res.data),
    }
  }

  async appsListInstallationReposForAuthenticatedUser(
    p: {
      installationId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    AxiosResponse<{
      repositories: t_repository[]
      repository_selection?: string
      total_count: number
    }>
  > {
    const url = `/user/installations/${p["installationId"]}/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .object({
          total_count: z.coerce.number(),
          repository_selection: z.string().optional(),
          repositories: z.array(s_repository),
        })
        .parse(res.data),
    }
  }

  async appsAddRepoToInstallationForAuthenticatedUser(
    p: {
      installationId: number
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/installations/${p["installationId"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async appsRemoveRepoFromInstallationForAuthenticatedUser(
    p: {
      installationId: number
      repositoryId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/installations/${p["installationId"]}/repositories/${p["repositoryId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async interactionsGetRestrictionsForAuthenticatedUser(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<
    | AxiosResponse<t_interaction_limit_response | EmptyObject>
    | AxiosResponse<void>
  > {
    const url = `/user/interaction-limits`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .union([s_interaction_limit_response, z.object({})])
        .parse(res.data),
    }
  }

  async interactionsSetRestrictionsForAuthenticatedUser(
    p: {
      requestBody: t_interaction_limit
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_interaction_limit_response>> {
    const url = `/user/interaction-limits`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_interaction_limit_response.parse(res.data) }
  }

  async interactionsRemoveRestrictionsForAuthenticatedUser(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/interaction-limits`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async issuesListForAuthenticatedUser(
    p: {
      filter?:
        | "assigned"
        | "created"
        | "mentioned"
        | "subscribed"
        | "repos"
        | "all"
      state?: "open" | "closed" | "all"
      labels?: string
      sort?: "created" | "updated" | "comments"
      direction?: "asc" | "desc"
      since?: string
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_issue[]>> {
    const url = `/user/issues`
    const query = this._query({
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_issue).parse(res.data) }
  }

  async usersListPublicSshKeysForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_key[]>> {
    const url = `/user/keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_key).parse(res.data) }
  }

  async usersCreatePublicSshKeyForAuthenticatedUser(
    p: {
      requestBody: {
        key: string
        title?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_key>> {
    const url = `/user/keys`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_key.parse(res.data) }
  }

  async usersGetPublicSshKeyForAuthenticatedUser(
    p: {
      keyId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_key>> {
    const url = `/user/keys/${p["keyId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_key.parse(res.data) }
  }

  async usersDeletePublicSshKeyForAuthenticatedUser(
    p: {
      keyId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/keys/${p["keyId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async appsListSubscriptionsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_user_marketplace_purchase[]>> {
    const url = `/user/marketplace_purchases`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_user_marketplace_purchase).parse(res.data),
    }
  }

  async appsListSubscriptionsForAuthenticatedUserStubbed(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_user_marketplace_purchase[]>> {
    const url = `/user/marketplace_purchases/stubbed`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.array(s_user_marketplace_purchase).parse(res.data),
    }
  }

  async orgsListMembershipsForAuthenticatedUser(
    p: {
      state?: "active" | "pending"
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_org_membership[]>> {
    const url = `/user/memberships/orgs`
    const query = this._query({
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_org_membership).parse(res.data) }
  }

  async orgsGetMembershipForAuthenticatedUser(
    p: {
      org: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_org_membership>> {
    const url = `/user/memberships/orgs/${p["org"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_org_membership.parse(res.data) }
  }

  async orgsUpdateMembershipForAuthenticatedUser(
    p: {
      org: string
      requestBody: {
        state: "active"
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_org_membership>> {
    const url = `/user/memberships/orgs/${p["org"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_org_membership.parse(res.data) }
  }

  async migrationsListForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_migration[]>> {
    const url = `/user/migrations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_migration).parse(res.data) }
  }

  async migrationsStartForAuthenticatedUser(
    p: {
      requestBody: {
        exclude?: "repositories"[]
        exclude_attachments?: boolean
        exclude_git_data?: boolean
        exclude_metadata?: boolean
        exclude_owner_projects?: boolean
        exclude_releases?: boolean
        lock_repositories?: boolean
        org_metadata_only?: boolean
        repositories: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_migration>> {
    const url = `/user/migrations`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_migration.parse(res.data) }
  }

  async migrationsGetStatusForAuthenticatedUser(
    p: {
      migrationId: number
      exclude?: string[]
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_migration>> {
    const url = `/user/migrations/${p["migrationId"]}`
    const query = this._query({ exclude: p["exclude"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_migration.parse(res.data) }
  }

  async migrationsGetArchiveForAuthenticatedUser(
    p: {
      migrationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/migrations/${p["migrationId"]}/archive`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async migrationsDeleteArchiveForAuthenticatedUser(
    p: {
      migrationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/migrations/${p["migrationId"]}/archive`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async migrationsUnlockRepoForAuthenticatedUser(
    p: {
      migrationId: number
      repoName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/migrations/${p["migrationId"]}/repos/${p["repoName"]}/lock`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async migrationsListReposForAuthenticatedUser(
    p: {
      migrationId: number
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/user/migrations/${p["migrationId"]}/repositories`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async orgsListForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_simple[]>> {
    const url = `/user/orgs`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_organization_simple).parse(res.data) }
  }

  async packagesListPackagesForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      visibility?: "public" | "private" | "internal"
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package[]>> {
    const url = `/user/packages`
    const query = this._query({
      package_type: p["packageType"],
      visibility: p["visibility"],
      page: p["page"],
      per_page: p["perPage"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_package).parse(res.data) }
  }

  async packagesGetPackageForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package>> {
    const url = `/user/packages/${p["packageType"]}/${p["packageName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_package.parse(res.data) }
  }

  async packagesDeletePackageForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/packages/${p["packageType"]}/${p["packageName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async packagesRestorePackageForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      token?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/packages/${p["packageType"]}/${p["packageName"]}/restore`
    const query = this._query({ token: p["token"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      page?: number
      perPage?: number
      state?: "active" | "deleted"
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package_version[]>> {
    const url = `/user/packages/${p["packageType"]}/${p["packageName"]}/versions`
    const query = this._query({
      page: p["page"],
      per_page: p["perPage"],
      state: p["state"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_package_version).parse(res.data) }
  }

  async packagesGetPackageVersionForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package_version>> {
    const url = `/user/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_package_version.parse(res.data) }
  }

  async packagesDeletePackageVersionForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async packagesRestorePackageVersionForAuthenticatedUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}/restore`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async projectsCreateForAuthenticatedUser(
    p: {
      requestBody: {
        body?: string | null
        name: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project>> {
    const url = `/user/projects`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_project.parse(res.data) }
  }

  async usersListPublicEmailsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_email[]>> {
    const url = `/user/public_emails`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_email).parse(res.data) }
  }

  async reposListForAuthenticatedUser(
    p: {
      visibility?: "all" | "public" | "private"
      affiliation?: string
      type?: "all" | "owner" | "public" | "private" | "member"
      sort?: "created" | "updated" | "pushed" | "full_name"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
      since?: string
      before?: string
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository[]>> {
    const url = `/user/repos`
    const query = this._query({
      visibility: p["visibility"],
      affiliation: p["affiliation"],
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
      since: p["since"],
      before: p["before"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_repository).parse(res.data) }
  }

  async reposCreateForAuthenticatedUser(
    p: {
      requestBody: {
        allow_auto_merge?: boolean
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        auto_init?: boolean
        delete_branch_on_merge?: boolean
        description?: string
        gitignore_template?: string
        has_discussions?: boolean
        has_downloads?: boolean
        has_issues?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        is_template?: boolean
        license_template?: string
        merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
        merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
        name: string
        private?: boolean
        squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
        squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
        team_id?: number
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository>> {
    const url = `/user/repos`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_repository.parse(res.data) }
  }

  async reposListInvitationsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_repository_invitation[]>> {
    const url = `/user/repository_invitations`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_repository_invitation).parse(res.data) }
  }

  async reposAcceptInvitationForAuthenticatedUser(
    p: {
      invitationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/repository_invitations/${p["invitationId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PATCH",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async reposDeclineInvitationForAuthenticatedUser(
    p: {
      invitationId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/repository_invitations/${p["invitationId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async usersListSocialAccountsForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_social_account[]>> {
    const url = `/user/social_accounts`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_social_account).parse(res.data) }
  }

  async usersAddSocialAccountForAuthenticatedUser(
    p: {
      requestBody: {
        account_urls: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_social_account[]>> {
    const url = `/user/social_accounts`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_social_account).parse(res.data) }
  }

  async usersDeleteSocialAccountForAuthenticatedUser(
    p: {
      requestBody: {
        account_urls: string[]
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/social_accounts`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async usersListSshSigningKeysForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_ssh_signing_key[]>> {
    const url = `/user/ssh_signing_keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_ssh_signing_key).parse(res.data) }
  }

  async usersCreateSshSigningKeyForAuthenticatedUser(
    p: {
      requestBody: {
        key: string
        title?: string
      }
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_ssh_signing_key>> {
    const url = `/user/ssh_signing_keys`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_ssh_signing_key.parse(res.data) }
  }

  async usersGetSshSigningKeyForAuthenticatedUser(
    p: {
      sshSigningKeyId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_ssh_signing_key>> {
    const url = `/user/ssh_signing_keys/${p["sshSigningKeyId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_ssh_signing_key.parse(res.data) }
  }

  async usersDeleteSshSigningKeyForAuthenticatedUser(
    p: {
      sshSigningKeyId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/ssh_signing_keys/${p["sshSigningKeyId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async activityListReposStarredByAuthenticatedUser(
    p: {
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_starred_repository[]>> {
    const url = `/user/starred`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_starred_repository).parse(res.data) }
  }

  async activityCheckRepoIsStarredByAuthenticatedUser(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/starred/${p["owner"]}/${p["repo"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async activityStarRepoForAuthenticatedUser(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/starred/${p["owner"]}/${p["repo"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async activityUnstarRepoForAuthenticatedUser(
    p: {
      owner: string
      repo: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/user/starred/${p["owner"]}/${p["repo"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async activityListWatchedReposForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/user/subscriptions`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async teamsListForAuthenticatedUser(
    p: {
      perPage?: number
      page?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_team_full[]>> {
    const url = `/user/teams`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_team_full).parse(res.data) }
  }

  async usersList(
    p: {
      since?: number
      perPage?: number
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/users`
    const query = this._query({ since: p["since"], per_page: p["perPage"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async usersGetByUsername(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_private_user | t_public_user>> {
    const url = `/users/${p["username"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z.union([s_private_user, s_public_user]).parse(res.data),
    }
  }

  async packagesListDockerMigrationConflictingPackagesForUser(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package[]>> {
    const url = `/users/${p["username"]}/docker/conflicts`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_package).parse(res.data) }
  }

  async activityListEventsForAuthenticatedUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_event[]>> {
    const url = `/users/${p["username"]}/events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_event).parse(res.data) }
  }

  async activityListOrgEventsForAuthenticatedUser(
    p: {
      username: string
      org: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_event[]>> {
    const url = `/users/${p["username"]}/events/orgs/${p["org"]}`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_event).parse(res.data) }
  }

  async activityListPublicEventsForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_event[]>> {
    const url = `/users/${p["username"]}/events/public`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_event).parse(res.data) }
  }

  async usersListFollowersForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/users/${p["username"]}/followers`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async usersListFollowingForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_simple_user[]>> {
    const url = `/users/${p["username"]}/following`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_simple_user).parse(res.data) }
  }

  async usersCheckFollowingForUser(
    p: {
      username: string
      targetUser: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/users/${p["username"]}/following/${p["targetUser"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async gistsListForUser(
    p: {
      username: string
      since?: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_base_gist[]>> {
    const url = `/users/${p["username"]}/gists`
    const query = this._query({
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_base_gist).parse(res.data) }
  }

  async usersListGpgKeysForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_gpg_key[]>> {
    const url = `/users/${p["username"]}/gpg_keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_gpg_key).parse(res.data) }
  }

  async usersGetContextForUser(
    p: {
      username: string
      subjectType?: "organization" | "repository" | "issue" | "pull_request"
      subjectId?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_hovercard>> {
    const url = `/users/${p["username"]}/hovercard`
    const query = this._query({
      subject_type: p["subjectType"],
      subject_id: p["subjectId"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_hovercard.parse(res.data) }
  }

  async appsGetUserInstallation(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_installation>> {
    const url = `/users/${p["username"]}/installation`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_installation.parse(res.data) }
  }

  async usersListPublicKeysForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_key_simple[]>> {
    const url = `/users/${p["username"]}/keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_key_simple).parse(res.data) }
  }

  async orgsListForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_organization_simple[]>> {
    const url = `/users/${p["username"]}/orgs`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_organization_simple).parse(res.data) }
  }

  async packagesListPackagesForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      visibility?: "public" | "private" | "internal"
      username: string
      page?: number
      perPage?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package[]>> {
    const url = `/users/${p["username"]}/packages`
    const query = this._query({
      package_type: p["packageType"],
      visibility: p["visibility"],
      page: p["page"],
      per_page: p["perPage"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_package).parse(res.data) }
  }

  async packagesGetPackageForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package>> {
    const url = `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_package.parse(res.data) }
  }

  async packagesDeletePackageForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async packagesRestorePackageForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
      token?: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/restore`
    const query = this._query({ token: p["token"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async packagesGetAllPackageVersionsForPackageOwnedByUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package_version[]>> {
    const url = `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_package_version).parse(res.data) }
  }

  async packagesGetPackageVersionForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      packageVersionId: number
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_package_version>> {
    const url = `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_package_version.parse(res.data) }
  }

  async packagesDeletePackageVersionForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async packagesRestorePackageVersionForUser(
    p: {
      packageType:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container"
      packageName: string
      username: string
      packageVersionId: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}/restore`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "POST",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.undefined().parse(res.data) }
  }

  async projectsListForUser(
    p: {
      username: string
      state?: "open" | "closed" | "all"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_project[]>> {
    const url = `/users/${p["username"]}/projects`
    const query = this._query({
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_project).parse(res.data) }
  }

  async activityListReceivedEventsForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_event[]>> {
    const url = `/users/${p["username"]}/received_events`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_event).parse(res.data) }
  }

  async activityListReceivedPublicEventsForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_event[]>> {
    const url = `/users/${p["username"]}/received_events/public`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_event).parse(res.data) }
  }

  async reposListForUser(
    p: {
      username: string
      type?: "all" | "owner" | "member"
      sort?: "created" | "updated" | "pushed" | "full_name"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/users/${p["username"]}/repos`
    const query = this._query({
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async billingGetGithubActionsBillingUser(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_actions_billing_usage>> {
    const url = `/users/${p["username"]}/settings/billing/actions`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_actions_billing_usage.parse(res.data) }
  }

  async billingGetGithubPackagesBillingUser(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_packages_billing_usage>> {
    const url = `/users/${p["username"]}/settings/billing/packages`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_packages_billing_usage.parse(res.data) }
  }

  async billingGetSharedStorageBillingUser(
    p: {
      username: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_combined_billing_usage>> {
    const url = `/users/${p["username"]}/settings/billing/shared-storage`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: s_combined_billing_usage.parse(res.data) }
  }

  async usersListSocialAccountsForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_social_account[]>> {
    const url = `/users/${p["username"]}/social_accounts`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_social_account).parse(res.data) }
  }

  async usersListSshSigningKeysForUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_ssh_signing_key[]>> {
    const url = `/users/${p["username"]}/ssh_signing_keys`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_ssh_signing_key).parse(res.data) }
  }

  async activityListReposStarredByUser(
    p: {
      username: string
      sort?: "created" | "updated"
      direction?: "asc" | "desc"
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_starred_repository[] | t_repository[]>> {
    const url = `/users/${p["username"]}/starred`
    const query = this._query({
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return {
      ...res,
      data: z
        .union([z.array(s_starred_repository), z.array(s_repository)])
        .parse(res.data),
    }
  }

  async activityListReposWatchedByUser(
    p: {
      username: string
      perPage?: number
      page?: number
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_minimal_repository[]>> {
    const url = `/users/${p["username"]}/subscriptions`
    const query = this._query({ per_page: p["perPage"], page: p["page"] })

    const res = await this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(s_minimal_repository).parse(res.data) }
  }

  async metaGetAllVersions(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<string[]>> {
    const url = `/versions`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.array(z.string()).parse(res.data) }
  }

  async metaGetZen(
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<string>> {
    const url = `/zen`

    const res = await this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })

    return { ...res, data: z.string().parse(res.data) }
  }
}
