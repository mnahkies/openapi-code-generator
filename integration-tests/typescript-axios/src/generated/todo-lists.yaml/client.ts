/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import { t_CreateUpdateTodoList, t_Error, t_TodoList } from "./models"
import {
  AbstractAxiosClient,
  AbstractAxiosConfig,
} from "@nahkies/typescript-axios-runtime/main"
import axios, { AxiosRequestConfig, AxiosResponse } from "axios"
import { z } from "zod"

export class ApiClient extends AbstractAxiosClient {
  constructor(config: AbstractAxiosConfig) {
    super(config)
  }

  async getTodoLists(
    p: {
      created?: string
      status?: "incomplete" | "complete"
    } = {},
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_TodoList[]>> {
    const url = `/list`
    const query = this._query({ created: p["created"], status: p["status"] })

    return this.axios.request({
      url: url + query,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async getTodoListById(
    p: {
      listId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_TodoList>> {
    const url = `/list/${p["listId"]}`

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "GET",
      timeout,
      ...(opts ?? {}),
    })
  }

  async updateTodoListById(
    p: {
      listId: string
      requestBody: t_CreateUpdateTodoList
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<t_TodoList>> {
    const url = `/list/${p["listId"]}`
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = JSON.stringify(p.requestBody)

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "PUT",
      headers,
      data: body,
      timeout,
      ...(opts ?? {}),
    })
  }

  async deleteTodoListById(
    p: {
      listId: string
    },
    timeout?: number,
    opts?: AxiosRequestConfig,
  ): Promise<AxiosResponse<void>> {
    const url = `/list/${p["listId"]}`

    return this.axios.request({
      url: url,
      baseURL: this.basePath,
      method: "DELETE",
      timeout,
      ...(opts ?? {}),
    })
  }
}
