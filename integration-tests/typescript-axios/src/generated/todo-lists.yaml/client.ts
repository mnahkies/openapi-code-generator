/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_CreateUpdateTodoList,
  t_Statuses,
  t_TodoList,
  t_UnknownObject,
} from "./models"
import {
  AbstractAxiosClient,
  AbstractAxiosConfig,
  Server,
} from "@nahkies/typescript-axios-runtime/main"
import { AxiosRequestConfig, AxiosResponse } from "axios"

export class TodoListsExampleApiServersOperations {
  static listAttachments(url?: "{schema}://{tenant}.attachments.example.com"): {
    build: (
      schema?: "http" | "https",
      tenant?: string,
    ) => Server<"listAttachments_TodoListsExampleApi">
  }
  static listAttachments(url?: "https://attachments.example.com"): {
    build: () => Server<"listAttachments_TodoListsExampleApi">
  }
  static listAttachments(
    url: string = "{schema}://{tenant}.attachments.example.com",
  ): unknown {
    switch (url) {
      case "{schema}://{tenant}.attachments.example.com":
        return {
          build(
            schema: "http" | "https" = "https",
            tenant = "your-slug",
          ): Server<"listAttachments_TodoListsExampleApi"> {
            return "{schema}://{tenant}.attachments.example.com"
              .replace("{schema}", schema)
              .replace(
                "{tenant}",
                tenant,
              ) as Server<"listAttachments_TodoListsExampleApi">
          },
        }

      case "https://attachments.example.com":
        return {
          build(): Server<"listAttachments_TodoListsExampleApi"> {
            return "https://attachments.example.com" as Server<"listAttachments_TodoListsExampleApi">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }

  static uploadAttachment(
    url?: "{schema}://{tenant}.attachments.example.com",
  ): {
    build: (
      schema?: "http" | "https",
      tenant?: string,
    ) => Server<"uploadAttachment_TodoListsExampleApi">
  }
  static uploadAttachment(url?: "https://attachments.example.com"): {
    build: () => Server<"uploadAttachment_TodoListsExampleApi">
  }
  static uploadAttachment(
    url: string = "{schema}://{tenant}.attachments.example.com",
  ): unknown {
    switch (url) {
      case "{schema}://{tenant}.attachments.example.com":
        return {
          build(
            schema: "http" | "https" = "https",
            tenant = "your-slug",
          ): Server<"uploadAttachment_TodoListsExampleApi"> {
            return "{schema}://{tenant}.attachments.example.com"
              .replace("{schema}", schema)
              .replace(
                "{tenant}",
                tenant,
              ) as Server<"uploadAttachment_TodoListsExampleApi">
          },
        }

      case "https://attachments.example.com":
        return {
          build(): Server<"uploadAttachment_TodoListsExampleApi"> {
            return "https://attachments.example.com" as Server<"uploadAttachment_TodoListsExampleApi">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }
}

export class TodoListsExampleApiServers {
  static default(): Server<"TodoListsExampleApi"> {
    return TodoListsExampleApiServers.server().build()
  }

  static server(url?: "{schema}://{tenant}.todo-lists.example.com"): {
    build: (
      schema?: "http" | "https",
      tenant?: string,
    ) => Server<"TodoListsExampleApi">
  }
  static server(url?: "https://todo-lists.example.com"): {
    build: () => Server<"TodoListsExampleApi">
  }
  static server(
    url: string = "{schema}://{tenant}.todo-lists.example.com",
  ): unknown {
    switch (url) {
      case "{schema}://{tenant}.todo-lists.example.com":
        return {
          build(
            schema: "http" | "https" = "https",
            tenant = "your-slug",
          ): Server<"TodoListsExampleApi"> {
            return "{schema}://{tenant}.todo-lists.example.com"
              .replace("{schema}", schema)
              .replace("{tenant}", tenant) as Server<"TodoListsExampleApi">
          },
        }

      case "https://todo-lists.example.com":
        return {
          build(): Server<"TodoListsExampleApi"> {
            return "https://todo-lists.example.com" as Server<"TodoListsExampleApi">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }

  static readonly operations = TodoListsExampleApiServersOperations
}

export interface TodoListsExampleApiConfig extends AbstractAxiosConfig {
  basePath: Server<"TodoListsExampleApi"> | string
}

export class TodoListsExampleApi extends AbstractAxiosClient {
  constructor(config: TodoListsExampleApiConfig) {
    super(config)
  }

  async getTodoLists(
    p: {
      created?: string
      statuses?: t_Statuses
      tags?: string[]
    } = {},
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_TodoList[]>> {
    const url = `/list`
    const headers = this._headers({}, opts.headers)
    const query = this._query({
      created: p["created"],
      statuses: p["statuses"],
      tags: p["tags"],
    })

    return this._request({
      url: url + query,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTodoListById(
    p: {
      listId: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_TodoList>> {
    const url = `/list/${p["listId"]}`
    const headers = this._headers({}, opts.headers)

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async updateTodoListById(
    p: {
      listId: string
      requestBody: t_CreateUpdateTodoList
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_TodoList>> {
    const url = `/list/${p["listId"]}`
    const headers = this._headers(
      { "Content-Type": "application/json" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "PUT",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async deleteTodoListById(
    p: {
      listId: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/list/${p["listId"]}`
    const headers = this._headers({}, opts.headers)

    return this._request({
      url: url,
      method: "DELETE",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async getTodoListItems(
    p: {
      listId: string
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<
    AxiosResponse<{
      completedAt?: string
      content: string
      createdAt: string
      id: string
    }>
  > {
    const url = `/list/${p["listId"]}/items`
    const headers = this._headers({}, opts.headers)

    return this._request({
      url: url,
      method: "GET",
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async createTodoListItem(
    p: {
      listId: string
      requestBody: {
        completedAt?: string
        content: string
        id: string
      }
    },
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/list/${p["listId"]}/items`
    const headers = this._headers(
      { "Content-Type": "application/json" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async listAttachments(
    basePath:
      | Server<"listAttachments_TodoListsExampleApi">
      | string = TodoListsExampleApiServers.operations
      .listAttachments()
      .build(),
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<t_UnknownObject[]>> {
    const url = `/attachments`
    const headers = this._headers({}, opts.headers)

    return this._request({
      url: url,
      method: "GET",
      baseURL: basePath,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }

  async uploadAttachment(
    p: {
      requestBody: {
        file?: unknown
      }
    },
    basePath:
      | Server<"uploadAttachment_TodoListsExampleApi">
      | string = TodoListsExampleApiServers.operations
      .uploadAttachment()
      .build(),
    timeout?: number,
    opts: AxiosRequestConfig = {},
  ): Promise<AxiosResponse<void>> {
    const url = `/attachments`
    const headers = this._headers(
      { "Content-Type": "multipart/form-data" },
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._request({
      url: url,
      method: "POST",
      data: body,
      baseURL: basePath,
      ...(timeout ? { timeout } : {}),
      ...opts,
      headers,
    })
  }
}

export { TodoListsExampleApi as ApiClient }
export type { TodoListsExampleApiConfig as ApiClientConfig }
