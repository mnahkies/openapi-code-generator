/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {HttpClient, HttpParams, type HttpResponse} from "@angular/common/http"
import {Injectable} from "@angular/core"
import type {Observable} from "rxjs"
import type {
  t_account,
  t_account_link,
  t_account_session,
  t_apple_pay_domain,
  t_application_fee,
  t_apps_secret,
  t_balance,
  t_balance_transaction,
  t_bank_account,
  t_billing_alert,
  t_billing_credit_balance_summary,
  t_billing_credit_balance_transaction,
  t_billing_credit_grant,
  t_billing_meter,
  t_billing_meter_event,
  t_billing_meter_event_adjustment,
  t_billing_meter_event_summary,
  t_billing_portal_configuration,
  t_billing_portal_session,
  t_capability,
  t_card,
  t_cash_balance,
  t_charge,
  t_checkout_session,
  t_climate_order,
  t_climate_product,
  t_climate_supplier,
  t_confirmation_token,
  t_country_spec,
  t_coupon,
  t_credit_note,
  t_credit_note_line_item,
  t_customer,
  t_customer_balance_transaction,
  t_customer_cash_balance_transaction,
  t_customer_session,
  t_deleted_account,
  t_deleted_apple_pay_domain,
  t_deleted_coupon,
  t_deleted_customer,
  t_deleted_discount,
  t_deleted_external_account,
  t_deleted_invoice,
  t_deleted_invoiceitem,
  t_deleted_payment_source,
  t_deleted_person,
  t_deleted_plan,
  t_deleted_product,
  t_deleted_product_feature,
  t_deleted_radar_value_list,
  t_deleted_radar_value_list_item,
  t_deleted_subscription_item,
  t_deleted_tax_id,
  t_deleted_terminal_configuration,
  t_deleted_terminal_location,
  t_deleted_terminal_reader,
  t_deleted_test_helpers_test_clock,
  t_deleted_webhook_endpoint,
  t_discount,
  t_dispute,
  t_entitlements_active_entitlement,
  t_entitlements_feature,
  t_ephemeral_key,
  t_error,
  t_event,
  t_exchange_rate,
  t_external_account,
  t_fee_refund,
  t_file,
  t_file_link,
  t_financial_connections_account,
  t_financial_connections_account_owner,
  t_financial_connections_session,
  t_financial_connections_transaction,
  t_forwarding_request,
  t_funding_instructions,
  t_identity_verification_report,
  t_identity_verification_session,
  t_invoice,
  t_invoice_payment,
  t_invoice_rendering_template,
  t_invoiceitem,
  t_issuing_authorization,
  t_issuing_card,
  t_issuing_cardholder,
  t_issuing_dispute,
  t_issuing_personalization_design,
  t_issuing_physical_bundle,
  t_issuing_settlement,
  t_issuing_token,
  t_issuing_transaction,
  t_item,
  t_line_item,
  t_login_link,
  t_mandate,
  t_payment_intent,
  t_payment_link,
  t_payment_method,
  t_payment_method_configuration,
  t_payment_method_domain,
  t_payment_source,
  t_payout,
  t_person,
  t_plan,
  t_price,
  t_product,
  t_product_feature,
  t_promotion_code,
  t_quote,
  t_radar_early_fraud_warning,
  t_radar_value_list,
  t_radar_value_list_item,
  t_refund,
  t_reporting_report_run,
  t_reporting_report_type,
  t_review,
  t_scheduled_query_run,
  t_setup_attempt,
  t_setup_intent,
  t_shipping_rate,
  t_sigma_sigma_api_query,
  t_source,
  t_source_mandate_notification,
  t_source_transaction,
  t_subscription,
  t_subscription_item,
  t_subscription_schedule,
  t_tax_calculation,
  t_tax_calculation_line_item,
  t_tax_code,
  t_tax_id,
  t_tax_rate,
  t_tax_registration,
  t_tax_settings,
  t_tax_transaction,
  t_tax_transaction_line_item,
  t_terminal_configuration,
  t_terminal_connection_token,
  t_terminal_location,
  t_terminal_reader,
  t_test_helpers_test_clock,
  t_token,
  t_topup,
  t_transfer,
  t_transfer_reversal,
  t_treasury_credit_reversal,
  t_treasury_debit_reversal,
  t_treasury_financial_account,
  t_treasury_financial_account_features,
  t_treasury_inbound_transfer,
  t_treasury_outbound_payment,
  t_treasury_outbound_transfer,
  t_treasury_received_credit,
  t_treasury_received_debit,
  t_treasury_transaction,
  t_treasury_transaction_entry,
  t_webhook_endpoint,
  UnknownEnumStringValue,
} from "./models.ts"

export class StripeApiServiceServersOperations {
  static postFiles(
    url: "https://files.stripe.com/" = "https://files.stripe.com/",
  ): {build: () => Server<"postFiles_StripeApiService">} {
    switch (url) {
      case "https://files.stripe.com/":
        return {
          build(): Server<"postFiles_StripeApiService"> {
            return "https://files.stripe.com/" as Server<"postFiles_StripeApiService">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }

  static getQuotesQuotePdf(
    url: "https://files.stripe.com/" = "https://files.stripe.com/",
  ): {build: () => Server<"getQuotesQuotePdf_StripeApiService">} {
    switch (url) {
      case "https://files.stripe.com/":
        return {
          build(): Server<"getQuotesQuotePdf_StripeApiService"> {
            return "https://files.stripe.com/" as Server<"getQuotesQuotePdf_StripeApiService">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }
}

export class StripeApiServiceServers {
  static default(): Server<"StripeApiService"> {
    return StripeApiServiceServers.server().build()
  }

  static server(url: "https://api.stripe.com/" = "https://api.stripe.com/"): {
    build: () => Server<"StripeApiService">
  } {
    switch (url) {
      case "https://api.stripe.com/":
        return {
          build(): Server<"StripeApiService"> {
            return "https://api.stripe.com/" as Server<"StripeApiService">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }

  static readonly operations = StripeApiServiceServersOperations
}

export class StripeApiServiceConfig {
  basePath: Server<"StripeApiService"> | string =
    StripeApiServiceServers.default()
  defaultHeaders: Record<string, string> = {}
}

// from https://stackoverflow.com/questions/39494689/is-it-possible-to-restrict-number-to-a-certain-range
type Enumerate<
  N extends number,
  Acc extends number[] = [],
> = Acc["length"] extends N
  ? Acc[number]
  : Enumerate<N, [...Acc, Acc["length"]]>

type IntRange<F extends number, T extends number> = F extends T
  ? F
  : Exclude<Enumerate<T>, Enumerate<F>> extends never
    ? never
    : Exclude<Enumerate<T>, Enumerate<F>> | T

export type StatusCode1xx = IntRange<100, 199>
export type StatusCode2xx = IntRange<200, 299>
export type StatusCode3xx = IntRange<300, 399>
export type StatusCode4xx = IntRange<400, 499>
export type StatusCode5xx = IntRange<500, 599>
export type StatusCode =
  | StatusCode1xx
  | StatusCode2xx
  | StatusCode3xx
  | StatusCode4xx
  | StatusCode5xx

export type QueryParams = {
  [name: string]:
    | string
    | number
    | boolean
    | string[]
    | undefined
    | null
    | QueryParams
    | QueryParams[]
}

export type Server<T> = string & {__server__: T}

@Injectable({
  providedIn: "root",
})
export class StripeApiService {
  constructor(
    private readonly httpClient: HttpClient,
    private readonly config: StripeApiServiceConfig,
  ) {}

  private _headers(
    headers: Record<string, string | undefined>,
  ): Record<string, string> {
    return Object.fromEntries(
      Object.entries({...this.config.defaultHeaders, ...headers}).filter(
        (it): it is [string, string] => it[1] !== undefined,
      ),
    )
  }

  private _queryParams(queryParams: QueryParams): HttpParams {
    return Object.entries(queryParams).reduce((result, [name, value]) => {
      if (
        typeof value === "string" ||
        typeof value === "boolean" ||
        typeof value === "number"
      ) {
        return result.set(name, value)
      } else if (value === null || value === undefined) {
        return result
      }
      throw new Error(
        `query parameter '${name}' with value '${value}' is not yet supported`,
      )
    }, new HttpParams())
  }

  getAccount(
    p: {expand?: string[]; requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/account`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountLinks(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_account_link> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/account_links`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountSessions(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_account_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/account_sessions`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAccounts(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_account[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/accounts`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccounts(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/accounts`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteAccountsAccount(p: {
    account: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/accounts/${p["account"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAccountsAccount(p: {
    account: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/accounts/${p["account"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccount(p: {
    account: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/accounts/${p["account"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccountBankAccounts(p: {
    account: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_external_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/accounts/${p["account"]}/bank_accounts`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteAccountsAccountBankAccountsId(p: {
    account: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_external_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/bank_accounts/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAccountsAccountBankAccountsId(p: {
    account: string
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_external_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/bank_accounts/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccountBankAccountsId(p: {
    account: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_external_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/bank_accounts/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAccountsAccountCapabilities(p: {
    account: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_capability[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/accounts/${p["account"]}/capabilities`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAccountsAccountCapabilitiesCapability(p: {
    account: string
    capability: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_capability> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/capabilities/${p["capability"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccountCapabilitiesCapability(p: {
    account: string
    capability: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_capability> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/capabilities/${p["capability"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAccountsAccountExternalAccounts(p: {
    account: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    object?: "bank_account" | "card" | UnknownEnumStringValue
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: (t_bank_account | t_card)[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      object: p["object"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/accounts/${p["account"]}/external_accounts`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccountExternalAccounts(p: {
    account: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_external_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/accounts/${p["account"]}/external_accounts`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteAccountsAccountExternalAccountsId(p: {
    account: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_external_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/external_accounts/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAccountsAccountExternalAccountsId(p: {
    account: string
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_external_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/external_accounts/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccountExternalAccountsId(p: {
    account: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_external_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/external_accounts/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccountLoginLinks(p: {
    account: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_login_link> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/accounts/${p["account"]}/login_links`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAccountsAccountPeople(p: {
    account: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    relationship?: {
      authorizer?: boolean
      director?: boolean
      executive?: boolean
      legal_guardian?: boolean
      owner?: boolean
      representative?: boolean
    }
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_person[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      relationship: p["relationship"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/accounts/${p["account"]}/people`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccountPeople(p: {
    account: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_person> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/accounts/${p["account"]}/people`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteAccountsAccountPeoplePerson(p: {
    account: string
    person: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_person> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/people/${p["person"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAccountsAccountPeoplePerson(p: {
    account: string
    expand?: string[]
    person: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_person> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/people/${p["person"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccountPeoplePerson(p: {
    account: string
    person: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_person> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/people/${p["person"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAccountsAccountPersons(p: {
    account: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    relationship?: {
      authorizer?: boolean
      director?: boolean
      executive?: boolean
      legal_guardian?: boolean
      owner?: boolean
      representative?: boolean
    }
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_person[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      relationship: p["relationship"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/accounts/${p["account"]}/persons`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccountPersons(p: {
    account: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_person> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/accounts/${p["account"]}/persons`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteAccountsAccountPersonsPerson(p: {
    account: string
    person: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_person> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/persons/${p["person"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAccountsAccountPersonsPerson(p: {
    account: string
    expand?: string[]
    person: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_person> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/persons/${p["person"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccountPersonsPerson(p: {
    account: string
    person: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_person> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/accounts/${p["account"]}/persons/${p["person"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAccountsAccountReject(p: {
    account: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/accounts/${p["account"]}/reject`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getApplePayDomains(
    p: {
      domainName?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_apple_pay_domain[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      domain_name: p["domainName"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/apple_pay/domains`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postApplePayDomains(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_apple_pay_domain> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/apple_pay/domains`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteApplePayDomainsDomain(p: {
    domain: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_apple_pay_domain> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/apple_pay/domains/${p["domain"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getApplePayDomainsDomain(p: {
    domain: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_apple_pay_domain> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/apple_pay/domains/${p["domain"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getApplicationFees(
    p: {
      charge?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_application_fee[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/application_fees`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getApplicationFeesFeeRefundsId(p: {
    expand?: string[]
    fee: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_fee_refund> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/application_fees/${p["fee"]}/refunds/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postApplicationFeesFeeRefundsId(p: {
    fee: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_fee_refund> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/application_fees/${p["fee"]}/refunds/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getApplicationFeesId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_application_fee> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/application_fees/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postApplicationFeesIdRefund(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_application_fee> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/application_fees/${p["id"]}/refund`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getApplicationFeesIdRefunds(p: {
    endingBefore?: string
    expand?: string[]
    id: string
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_fee_refund[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/application_fees/${p["id"]}/refunds`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postApplicationFeesIdRefunds(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_fee_refund> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/application_fees/${p["id"]}/refunds`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAppsSecrets(p: {
    endingBefore?: string
    expand?: string[]
    limit?: number
    scope: {
      type: "account" | "user" | UnknownEnumStringValue
      user?: string
    }
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_apps_secret[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      scope: p["scope"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/apps/secrets`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAppsSecrets(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_apps_secret> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/apps/secrets`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postAppsSecretsDelete(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_apps_secret> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/apps/secrets/delete`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAppsSecretsFind(p: {
    expand?: string[]
    name: string
    scope: {
      type: "account" | "user" | UnknownEnumStringValue
      user?: string
    }
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_apps_secret> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      expand: p["expand"],
      name: p["name"],
      scope: p["scope"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/apps/secrets/find`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBalance(
    p: {expand?: string[]; requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_balance> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/balance`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBalanceHistory(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      payout?: string
      source?: string
      startingAfter?: string
      type?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_balance_transaction[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payout: p["payout"],
      source: p["source"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/balance/history`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBalanceHistoryId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_balance_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/balance/history/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBalanceTransactions(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      payout?: string
      source?: string
      startingAfter?: string
      type?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_balance_transaction[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payout: p["payout"],
      source: p["source"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/balance_transactions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBalanceTransactionsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_balance_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/balance_transactions/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingAlerts(
    p: {
      alertType?: "usage_threshold" | UnknownEnumStringValue
      endingBefore?: string
      expand?: string[]
      limit?: number
      meter?: string
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_billing_alert[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      alert_type: p["alertType"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      meter: p["meter"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/billing/alerts`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingAlerts(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_billing_alert> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/alerts`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingAlertsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_alert> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/billing/alerts/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingAlertsIdActivate(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_alert> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/alerts/${p["id"]}/activate`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingAlertsIdArchive(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_alert> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/alerts/${p["id"]}/archive`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingAlertsIdDeactivate(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_alert> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/alerts/${p["id"]}/deactivate`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingCreditBalanceSummary(p: {
    customer: string
    expand?: string[]
    filter: {
      applicability_scope?: {
        price_type?: "metered" | UnknownEnumStringValue
        prices?: {
          id: string
        }[]
      }
      credit_grant?: string
      type: "applicability_scope" | "credit_grant" | UnknownEnumStringValue
    }
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_credit_balance_summary> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      customer: p["customer"],
      expand: p["expand"],
      filter: p["filter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/billing/credit_balance_summary`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingCreditBalanceTransactions(p: {
    creditGrant?: string
    customer: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_billing_credit_balance_transaction[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      credit_grant: p["creditGrant"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/billing/credit_balance_transactions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingCreditBalanceTransactionsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_credit_balance_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/billing/credit_balance_transactions/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingCreditGrants(
    p: {
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_billing_credit_grant[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/billing/credit_grants`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingCreditGrants(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_billing_credit_grant> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/credit_grants`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingCreditGrantsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_credit_grant> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/billing/credit_grants/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingCreditGrantsId(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_credit_grant> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/credit_grants/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingCreditGrantsIdExpire(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_credit_grant> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/credit_grants/${p["id"]}/expire`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingCreditGrantsIdVoid(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_credit_grant> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/credit_grants/${p["id"]}/void`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingMeterEventAdjustments(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_billing_meter_event_adjustment> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/meter_event_adjustments`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingMeterEvents(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_billing_meter_event> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/meter_events`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingMeters(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: "active" | "inactive" | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_billing_meter[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/billing/meters`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingMeters(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_billing_meter> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/meters`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingMetersId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_meter> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/billing/meters/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingMetersId(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_meter> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/meters/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingMetersIdDeactivate(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_meter> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/meters/${p["id"]}/deactivate`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingMetersIdEventSummaries(p: {
    customer: string
    endTime: number
    endingBefore?: string
    expand?: string[]
    id: string
    limit?: number
    startTime: number
    startingAfter?: string
    valueGroupingWindow?: "day" | "hour" | UnknownEnumStringValue
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_billing_meter_event_summary[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      customer: p["customer"],
      end_time: p["endTime"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      start_time: p["startTime"],
      starting_after: p["startingAfter"],
      value_grouping_window: p["valueGroupingWindow"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/billing/meters/${p["id"]}/event_summaries`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingMetersIdReactivate(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_meter> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing/meters/${p["id"]}/reactivate`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingPortalConfigurations(
    p: {
      active?: boolean
      endingBefore?: string
      expand?: string[]
      isDefault?: boolean
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_billing_portal_configuration[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      active: p["active"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      is_default: p["isDefault"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/billing_portal/configurations`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingPortalConfigurations(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_billing_portal_configuration> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing_portal/configurations`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBillingPortalConfigurationsConfiguration(p: {
    configuration: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_portal_configuration> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/billing_portal/configurations/${p["configuration"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingPortalConfigurationsConfiguration(p: {
    configuration: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_billing_portal_configuration> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/billing_portal/configurations/${p["configuration"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postBillingPortalSessions(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_billing_portal_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/billing_portal/sessions`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCharges(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
      transferGroup?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_charge[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
      transfer_group: p["transferGroup"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/charges`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCharges(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_charge> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/charges`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getChargesSearch(p: {
    expand?: string[]
    limit?: number
    page?: string
    query: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_charge[]
        has_more: boolean
        next_page?: string | null
        object: "search_result" | UnknownEnumStringValue
        total_count?: number
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/charges/search`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getChargesCharge(p: {
    charge: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_charge> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/charges/${p["charge"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postChargesCharge(p: {
    charge: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_charge> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/charges/${p["charge"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postChargesChargeCapture(p: {
    charge: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_charge> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/charges/${p["charge"]}/capture`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getChargesChargeDispute(p: {
    charge: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_dispute> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/charges/${p["charge"]}/dispute`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postChargesChargeDispute(p: {
    charge: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_dispute> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/charges/${p["charge"]}/dispute`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postChargesChargeDisputeClose(p: {
    charge: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_dispute> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/charges/${p["charge"]}/dispute/close`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postChargesChargeRefund(p: {
    charge: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_charge> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/charges/${p["charge"]}/refund`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getChargesChargeRefunds(p: {
    charge: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_refund[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/charges/${p["charge"]}/refunds`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postChargesChargeRefunds(p: {
    charge: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_refund> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/charges/${p["charge"]}/refunds`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getChargesChargeRefundsRefund(p: {
    charge: string
    expand?: string[]
    refund: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_refund> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/charges/${p["charge"]}/refunds/${p["refund"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postChargesChargeRefundsRefund(p: {
    charge: string
    refund: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_refund> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/charges/${p["charge"]}/refunds/${p["refund"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCheckoutSessions(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      customerDetails?: {
        email: string
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      paymentLink?: string
      startingAfter?: string
      status?: "complete" | "expired" | "open" | UnknownEnumStringValue
      subscription?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_checkout_session[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      customer: p["customer"],
      customer_details: p["customerDetails"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      payment_link: p["paymentLink"],
      starting_after: p["startingAfter"],
      status: p["status"],
      subscription: p["subscription"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/checkout/sessions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCheckoutSessions(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_checkout_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/checkout/sessions`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCheckoutSessionsSession(p: {
    expand?: string[]
    session: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_checkout_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/checkout/sessions/${p["session"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCheckoutSessionsSession(p: {
    session: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_checkout_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/checkout/sessions/${p["session"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCheckoutSessionsSessionExpire(p: {
    session: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_checkout_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/checkout/sessions/${p["session"]}/expire`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCheckoutSessionsSessionLineItems(p: {
    endingBefore?: string
    expand?: string[]
    limit?: number
    session: string
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_item[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/checkout/sessions/${p["session"]}/line_items`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getClimateOrders(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_climate_order[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/climate/orders`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postClimateOrders(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_climate_order> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/climate/orders`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getClimateOrdersOrder(p: {
    expand?: string[]
    order: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_climate_order> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/climate/orders/${p["order"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postClimateOrdersOrder(p: {
    order: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_climate_order> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/climate/orders/${p["order"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postClimateOrdersOrderCancel(p: {
    order: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_climate_order> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/climate/orders/${p["order"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getClimateProducts(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_climate_product[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/climate/products`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getClimateProductsProduct(p: {
    expand?: string[]
    product: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_climate_product> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/climate/products/${p["product"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getClimateSuppliers(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_climate_supplier[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/climate/suppliers`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getClimateSuppliersSupplier(p: {
    expand?: string[]
    supplier: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_climate_supplier> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/climate/suppliers/${p["supplier"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getConfirmationTokensConfirmationToken(p: {
    confirmationToken: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_confirmation_token> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/confirmation_tokens/${p["confirmationToken"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCountrySpecs(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_country_spec[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/country_specs`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCountrySpecsCountry(p: {
    country: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_country_spec> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/country_specs/${p["country"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCoupons(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_coupon[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/coupons`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCoupons(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_coupon> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/coupons`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteCouponsCoupon(p: {
    coupon: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_coupon> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/coupons/${p["coupon"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCouponsCoupon(p: {
    coupon: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_coupon> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/coupons/${p["coupon"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCouponsCoupon(p: {
    coupon: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_coupon> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/coupons/${p["coupon"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCreditNotes(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      invoice?: string
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_credit_note[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/credit_notes`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCreditNotes(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_credit_note> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/credit_notes`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCreditNotesPreview(p: {
    amount?: number
    creditAmount?: number
    effectiveAt?: number
    emailType?: "credit_note" | "none" | UnknownEnumStringValue
    expand?: string[]
    invoice: string
    lines?: {
      amount?: number
      description?: string
      invoice_line_item?: string
      quantity?: number
      tax_amounts?:
        | {
            amount: number
            tax_rate: string
            taxable_amount: number
          }[]
        | ""
        | UnknownEnumStringValue
      tax_rates?: string[] | "" | UnknownEnumStringValue
      type: "custom_line_item" | "invoice_line_item" | UnknownEnumStringValue
      unit_amount?: number
      unit_amount_decimal?: string
    }[]
    memo?: string
    metadata?: {
      [key: string]: string | undefined
    }
    outOfBandAmount?: number
    reason?:
      | "duplicate"
      | "fraudulent"
      | "order_change"
      | "product_unsatisfactory"
      | UnknownEnumStringValue
    refundAmount?: number
    refunds?: {
      amount_refunded?: number
      refund?: string
    }[]
    shippingCost?: {
      shipping_rate?: string
    }
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_credit_note> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      amount: p["amount"],
      credit_amount: p["creditAmount"],
      effective_at: p["effectiveAt"],
      email_type: p["emailType"],
      expand: p["expand"],
      invoice: p["invoice"],
      lines: p["lines"],
      memo: p["memo"],
      metadata: p["metadata"],
      out_of_band_amount: p["outOfBandAmount"],
      reason: p["reason"],
      refund_amount: p["refundAmount"],
      refunds: p["refunds"],
      shipping_cost: p["shippingCost"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/credit_notes/preview`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCreditNotesPreviewLines(p: {
    amount?: number
    creditAmount?: number
    effectiveAt?: number
    emailType?: "credit_note" | "none" | UnknownEnumStringValue
    endingBefore?: string
    expand?: string[]
    invoice: string
    limit?: number
    lines?: {
      amount?: number
      description?: string
      invoice_line_item?: string
      quantity?: number
      tax_amounts?:
        | {
            amount: number
            tax_rate: string
            taxable_amount: number
          }[]
        | ""
        | UnknownEnumStringValue
      tax_rates?: string[] | "" | UnknownEnumStringValue
      type: "custom_line_item" | "invoice_line_item" | UnknownEnumStringValue
      unit_amount?: number
      unit_amount_decimal?: string
    }[]
    memo?: string
    metadata?: {
      [key: string]: string | undefined
    }
    outOfBandAmount?: number
    reason?:
      | "duplicate"
      | "fraudulent"
      | "order_change"
      | "product_unsatisfactory"
      | UnknownEnumStringValue
    refundAmount?: number
    refunds?: {
      amount_refunded?: number
      refund?: string
    }[]
    shippingCost?: {
      shipping_rate?: string
    }
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_credit_note_line_item[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      amount: p["amount"],
      credit_amount: p["creditAmount"],
      effective_at: p["effectiveAt"],
      email_type: p["emailType"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      lines: p["lines"],
      memo: p["memo"],
      metadata: p["metadata"],
      out_of_band_amount: p["outOfBandAmount"],
      reason: p["reason"],
      refund_amount: p["refundAmount"],
      refunds: p["refunds"],
      shipping_cost: p["shippingCost"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/credit_notes/preview/lines`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCreditNotesCreditNoteLines(p: {
    creditNote: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_credit_note_line_item[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/credit_notes/${p["creditNote"]}/lines`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCreditNotesId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_credit_note> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/credit_notes/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCreditNotesId(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_credit_note> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/credit_notes/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCreditNotesIdVoid(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_credit_note> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/credit_notes/${p["id"]}/void`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomerSessions(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_customer_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/customer_sessions`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomers(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      email?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      testClock?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_customer[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      email: p["email"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      test_clock: p["testClock"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomers(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_customer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/customers`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersSearch(p: {
    expand?: string[]
    limit?: number
    page?: string
    query: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_customer[]
        has_more: boolean
        next_page?: string | null
        object: "search_result" | UnknownEnumStringValue
        total_count?: number
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers/search`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteCustomersCustomer(p: {
    customer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_customer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/customers/${p["customer"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomer(p: {
    customer: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_customer | t_deleted_customer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers/${p["customer"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomer(p: {
    customer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_customer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/customers/${p["customer"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerBalanceTransactions(p: {
    customer: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_customer_balance_transaction[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/balance_transactions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerBalanceTransactions(p: {
    customer: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_customer_balance_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/balance_transactions`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerBalanceTransactionsTransaction(p: {
    customer: string
    expand?: string[]
    transaction: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_customer_balance_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/balance_transactions/${p["transaction"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerBalanceTransactionsTransaction(p: {
    customer: string
    transaction: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_customer_balance_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/balance_transactions/${p["transaction"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerBankAccounts(p: {
    customer: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_bank_account[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers/${p["customer"]}/bank_accounts`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerBankAccounts(p: {
    customer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_source> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/customers/${p["customer"]}/bank_accounts`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteCustomersCustomerBankAccountsId(p: {
    customer: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_source | t_deleted_payment_source> & {
        status: 200
      })
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerBankAccountsId(p: {
    customer: string
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_bank_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerBankAccountsId(p: {
    customer: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_card | t_bank_account | t_source> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerBankAccountsIdVerify(p: {
    customer: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_bank_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/bank_accounts/${p["id"]}/verify`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerCards(p: {
    customer: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_card[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers/${p["customer"]}/cards`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerCards(p: {
    customer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_source> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/customers/${p["customer"]}/cards`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteCustomersCustomerCardsId(p: {
    customer: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_source | t_deleted_payment_source> & {
        status: 200
      })
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/customers/${p["customer"]}/cards/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerCardsId(p: {
    customer: string
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_card> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers/${p["customer"]}/cards/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerCardsId(p: {
    customer: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_card | t_bank_account | t_source> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/customers/${p["customer"]}/cards/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerCashBalance(p: {
    customer: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_cash_balance> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers/${p["customer"]}/cash_balance`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerCashBalance(p: {
    customer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_cash_balance> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/customers/${p["customer"]}/cash_balance`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerCashBalanceTransactions(p: {
    customer: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_customer_cash_balance_transaction[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/cash_balance_transactions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerCashBalanceTransactionsTransaction(p: {
    customer: string
    expand?: string[]
    transaction: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_customer_cash_balance_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/cash_balance_transactions/${p["transaction"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteCustomersCustomerDiscount(p: {
    customer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_discount> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/customers/${p["customer"]}/discount`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerDiscount(p: {
    customer: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_discount> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers/${p["customer"]}/discount`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerFundingInstructions(p: {
    customer: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_funding_instructions> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/funding_instructions`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerPaymentMethods(p: {
    allowRedisplay?:
      | "always"
      | "limited"
      | "unspecified"
      | UnknownEnumStringValue
    customer: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    type?:
      | "acss_debit"
      | "affirm"
      | "afterpay_clearpay"
      | "alipay"
      | "alma"
      | "amazon_pay"
      | "au_becs_debit"
      | "bacs_debit"
      | "bancontact"
      | "billie"
      | "blik"
      | "boleto"
      | "card"
      | "cashapp"
      | "crypto"
      | "customer_balance"
      | "eps"
      | "fpx"
      | "giropay"
      | "grabpay"
      | "ideal"
      | "kakao_pay"
      | "klarna"
      | "konbini"
      | "kr_card"
      | "link"
      | "mobilepay"
      | "multibanco"
      | "naver_pay"
      | "nz_bank_account"
      | "oxxo"
      | "p24"
      | "pay_by_bank"
      | "payco"
      | "paynow"
      | "paypal"
      | "pix"
      | "promptpay"
      | "revolut_pay"
      | "samsung_pay"
      | "satispay"
      | "sepa_debit"
      | "sofort"
      | "swish"
      | "twint"
      | "us_bank_account"
      | "wechat_pay"
      | "zip"
      | UnknownEnumStringValue
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_payment_method[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      allow_redisplay: p["allowRedisplay"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers/${p["customer"]}/payment_methods`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerPaymentMethodsPaymentMethod(p: {
    customer: string
    expand?: string[]
    paymentMethod: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_method> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/payment_methods/${p["paymentMethod"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerSources(p: {
    customer: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    object?: string
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: (t_bank_account | t_card | t_source)[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      object: p["object"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers/${p["customer"]}/sources`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerSources(p: {
    customer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_source> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/customers/${p["customer"]}/sources`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteCustomersCustomerSourcesId(p: {
    customer: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_source | t_deleted_payment_source> & {
        status: 200
      })
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/sources/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerSourcesId(p: {
    customer: string
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_source> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/sources/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerSourcesId(p: {
    customer: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_card | t_bank_account | t_source> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/sources/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerSourcesIdVerify(p: {
    customer: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_bank_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/sources/${p["id"]}/verify`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerSubscriptions(p: {
    customer: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_subscription[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers/${p["customer"]}/subscriptions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerSubscriptions(p: {
    customer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/customers/${p["customer"]}/subscriptions`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteCustomersCustomerSubscriptionsSubscriptionExposedId(p: {
    customer: string
    subscriptionExposedId: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerSubscriptionsSubscriptionExposedId(p: {
    customer: string
    expand?: string[]
    subscriptionExposedId: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerSubscriptionsSubscriptionExposedId(p: {
    customer: string
    subscriptionExposedId: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(p: {
    customer: string
    subscriptionExposedId: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_discount> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}/discount`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(p: {
    customer: string
    expand?: string[]
    subscriptionExposedId: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_discount> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/subscriptions/${p["subscriptionExposedId"]}/discount`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerTaxIds(p: {
    customer: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_tax_id[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/customers/${p["customer"]}/tax_ids`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postCustomersCustomerTaxIds(p: {
    customer: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_tax_id> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/customers/${p["customer"]}/tax_ids`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteCustomersCustomerTaxIdsId(p: {
    customer: string
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_tax_id> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/tax_ids/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getCustomersCustomerTaxIdsId(p: {
    customer: string
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_tax_id> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/customers/${p["customer"]}/tax_ids/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getDisputes(
    p: {
      charge?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_dispute[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/disputes`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getDisputesDispute(p: {
    dispute: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_dispute> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/disputes/${p["dispute"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postDisputesDispute(p: {
    dispute: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_dispute> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/disputes/${p["dispute"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postDisputesDisputeClose(p: {
    dispute: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_dispute> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/disputes/${p["dispute"]}/close`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getEntitlementsActiveEntitlements(p: {
    customer: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_entitlements_active_entitlement[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/entitlements/active_entitlements`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getEntitlementsActiveEntitlementsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_entitlements_active_entitlement> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/entitlements/active_entitlements/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getEntitlementsFeatures(
    p: {
      archived?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      lookupKey?: string
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_entitlements_feature[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      archived: p["archived"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      lookup_key: p["lookupKey"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/entitlements/features`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postEntitlementsFeatures(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_entitlements_feature> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/entitlements/features`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getEntitlementsFeaturesId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_entitlements_feature> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/entitlements/features/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postEntitlementsFeaturesId(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_entitlements_feature> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/entitlements/features/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postEphemeralKeys(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_ephemeral_key> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/ephemeral_keys`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteEphemeralKeysKey(p: {
    key: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_ephemeral_key> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/ephemeral_keys/${p["key"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getEvents(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      deliverySuccess?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?: string
      types?: string[]
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_event[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      delivery_success: p["deliverySuccess"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
      types: p["types"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/events`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getEventsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_event> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/events/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getExchangeRates(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_exchange_rate[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/exchange_rates`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getExchangeRatesRateId(p: {
    expand?: string[]
    rateId: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_exchange_rate> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/exchange_rates/${p["rateId"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postExternalAccountsId(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_external_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/external_accounts/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getFileLinks(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      expired?: boolean
      file?: string
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_file_link[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      expired: p["expired"],
      file: p["file"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/file_links`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postFileLinks(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_file_link> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/file_links`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getFileLinksLink(p: {
    expand?: string[]
    link: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_file_link> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/file_links/${p["link"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postFileLinksLink(p: {
    link: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_file_link> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/file_links/${p["link"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getFiles(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      purpose?:
        | "account_requirement"
        | "additional_verification"
        | "business_icon"
        | "business_logo"
        | "customer_signature"
        | "dispute_evidence"
        | "document_provider_identity_document"
        | "finance_report_run"
        | "financial_account_statement"
        | "identity_document"
        | "identity_document_downloadable"
        | "issuing_regulatory_reporting"
        | "pci_document"
        | "selfie"
        | "sigma_scheduled_query"
        | "tax_document_user_upload"
        | "terminal_reader_splashscreen"
        | UnknownEnumStringValue
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_file[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      purpose: p["purpose"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/files`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postFiles(
    p: {
      requestBody: never
    },
    basePath:
      | Server<"postFiles_StripeApiService">
      | string = StripeApiServiceServers.operations.postFiles().build(),
  ): Observable<
    | (HttpResponse<t_file> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>("POST", basePath + `/v1/files`, {
      headers,
      // todo: request bodies with content-type 'multipart/form-data' not yet supported,
      observe: "response",
      reportProgress: false,
    })
  }

  getFilesFile(p: {
    expand?: string[]
    file: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_file> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/files/${p["file"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getFinancialConnectionsAccounts(
    p: {
      accountHolder?: {
        account?: string
        customer?: string
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      session?: string
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_financial_connections_account[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      account_holder: p["accountHolder"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      session: p["session"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/financial_connections/accounts`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getFinancialConnectionsAccountsAccount(p: {
    account: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_financial_connections_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/financial_connections/accounts/${p["account"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postFinancialConnectionsAccountsAccountDisconnect(p: {
    account: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_financial_connections_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/financial_connections/accounts/${p["account"]}/disconnect`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getFinancialConnectionsAccountsAccountOwners(p: {
    account: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    ownership: string
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_financial_connections_account_owner[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      ownership: p["ownership"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/financial_connections/accounts/${p["account"]}/owners`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postFinancialConnectionsAccountsAccountRefresh(p: {
    account: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_financial_connections_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/financial_connections/accounts/${p["account"]}/refresh`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postFinancialConnectionsAccountsAccountSubscribe(p: {
    account: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_financial_connections_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/financial_connections/accounts/${p["account"]}/subscribe`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postFinancialConnectionsAccountsAccountUnsubscribe(p: {
    account: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_financial_connections_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/financial_connections/accounts/${p["account"]}/unsubscribe`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postFinancialConnectionsSessions(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_financial_connections_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/financial_connections/sessions`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getFinancialConnectionsSessionsSession(p: {
    expand?: string[]
    session: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_financial_connections_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/financial_connections/sessions/${p["session"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getFinancialConnectionsTransactions(p: {
    account: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    transactedAt?:
      | {
          gt?: number
          gte?: number
          lt?: number
          lte?: number
        }
      | number
    transactionRefresh?: {
      after: string
    }
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_financial_connections_transaction[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      account: p["account"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      transacted_at: p["transactedAt"],
      transaction_refresh: p["transactionRefresh"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/financial_connections/transactions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getFinancialConnectionsTransactionsTransaction(p: {
    expand?: string[]
    transaction: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_financial_connections_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/financial_connections/transactions/${p["transaction"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getForwardingRequests(
    p: {
      created?: {
        gt?: number
        gte?: number
        lt?: number
        lte?: number
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_forwarding_request[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/forwarding/requests`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postForwardingRequests(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_forwarding_request> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/forwarding/requests`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getForwardingRequestsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_forwarding_request> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/forwarding/requests/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIdentityVerificationReports(
    p: {
      clientReferenceId?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?: "document" | "id_number" | UnknownEnumStringValue
      verificationSession?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_identity_verification_report[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      client_reference_id: p["clientReferenceId"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
      verification_session: p["verificationSession"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/identity/verification_reports`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIdentityVerificationReportsReport(p: {
    expand?: string[]
    report: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_identity_verification_report> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/identity/verification_reports/${p["report"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIdentityVerificationSessions(
    p: {
      clientReferenceId?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      relatedCustomer?: string
      startingAfter?: string
      status?:
        | "canceled"
        | "processing"
        | "requires_input"
        | "verified"
        | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_identity_verification_session[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      client_reference_id: p["clientReferenceId"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      related_customer: p["relatedCustomer"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/identity/verification_sessions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIdentityVerificationSessions(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_identity_verification_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/identity/verification_sessions`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIdentityVerificationSessionsSession(p: {
    expand?: string[]
    session: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_identity_verification_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/identity/verification_sessions/${p["session"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIdentityVerificationSessionsSession(p: {
    session: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_identity_verification_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/identity/verification_sessions/${p["session"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIdentityVerificationSessionsSessionCancel(p: {
    session: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_identity_verification_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/identity/verification_sessions/${p["session"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIdentityVerificationSessionsSessionRedact(p: {
    session: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_identity_verification_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/identity/verification_sessions/${p["session"]}/redact`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getInvoicePayments(
    p: {
      endingBefore?: string
      expand?: string[]
      invoice?: string
      limit?: number
      payment?: {
        payment_intent?: string
        type: "payment_intent" | UnknownEnumStringValue
      }
      startingAfter?: string
      status?: "canceled" | "open" | "paid" | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_invoice_payment[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      payment: p["payment"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/invoice_payments`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getInvoicePaymentsInvoicePayment(p: {
    expand?: string[]
    invoicePayment: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice_payment> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/invoice_payments/${p["invoicePayment"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getInvoiceRenderingTemplates(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: "active" | "archived" | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_invoice_rendering_template[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/invoice_rendering_templates`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getInvoiceRenderingTemplatesTemplate(p: {
    expand?: string[]
    template: string
    version?: number
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice_rendering_template> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      expand: p["expand"],
      version: p["version"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/invoice_rendering_templates/${p["template"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoiceRenderingTemplatesTemplateArchive(p: {
    template: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice_rendering_template> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/invoice_rendering_templates/${p["template"]}/archive`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoiceRenderingTemplatesTemplateUnarchive(p: {
    template: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice_rendering_template> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/invoice_rendering_templates/${p["template"]}/unarchive`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getInvoiceitems(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      invoice?: string
      limit?: number
      pending?: boolean
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_invoiceitem[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      invoice: p["invoice"],
      limit: p["limit"],
      pending: p["pending"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/invoiceitems`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoiceitems(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_invoiceitem> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoiceitems`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteInvoiceitemsInvoiceitem(p: {
    invoiceitem: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_invoiceitem> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/invoiceitems/${p["invoiceitem"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getInvoiceitemsInvoiceitem(p: {
    expand?: string[]
    invoiceitem: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoiceitem> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/invoiceitems/${p["invoiceitem"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoiceitemsInvoiceitem(p: {
    invoiceitem: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoiceitem> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoiceitems/${p["invoiceitem"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getInvoices(
    p: {
      collectionMethod?:
        | "charge_automatically"
        | "send_invoice"
        | UnknownEnumStringValue
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      dueDate?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "draft"
        | "open"
        | "paid"
        | "uncollectible"
        | "void"
        | UnknownEnumStringValue
      subscription?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_invoice[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      collection_method: p["collectionMethod"],
      created: p["created"],
      customer: p["customer"],
      due_date: p["dueDate"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      subscription: p["subscription"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/invoices`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoices(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesCreatePreview(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices/create_preview`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getInvoicesSearch(p: {
    expand?: string[]
    limit?: number
    page?: string
    query: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_invoice[]
        has_more: boolean
        next_page?: string | null
        object: "search_result" | UnknownEnumStringValue
        total_count?: number
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/invoices/search`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteInvoicesInvoice(p: {
    invoice: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/invoices/${p["invoice"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getInvoicesInvoice(p: {
    expand?: string[]
    invoice: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/invoices/${p["invoice"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesInvoice(p: {
    invoice: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices/${p["invoice"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesInvoiceAddLines(p: {
    invoice: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices/${p["invoice"]}/add_lines`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesInvoiceAttachPayment(p: {
    invoice: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices/${p["invoice"]}/attach_payment`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesInvoiceFinalize(p: {
    invoice: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices/${p["invoice"]}/finalize`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getInvoicesInvoiceLines(p: {
    endingBefore?: string
    expand?: string[]
    invoice: string
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_line_item[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/invoices/${p["invoice"]}/lines`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesInvoiceLinesLineItemId(p: {
    invoice: string
    lineItemId: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_line_item> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/invoices/${p["invoice"]}/lines/${p["lineItemId"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesInvoiceMarkUncollectible(p: {
    invoice: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices/${p["invoice"]}/mark_uncollectible`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesInvoicePay(p: {
    invoice: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices/${p["invoice"]}/pay`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesInvoiceRemoveLines(p: {
    invoice: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices/${p["invoice"]}/remove_lines`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesInvoiceSend(p: {
    invoice: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices/${p["invoice"]}/send`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesInvoiceUpdateLines(p: {
    invoice: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices/${p["invoice"]}/update_lines`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postInvoicesInvoiceVoid(p: {
    invoice: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_invoice> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/invoices/${p["invoice"]}/void`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingAuthorizations(
    p: {
      card?: string
      cardholder?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "closed"
        | "expired"
        | "pending"
        | "reversed"
        | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_issuing_authorization[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      card: p["card"],
      cardholder: p["cardholder"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/authorizations`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingAuthorizationsAuthorization(p: {
    authorization: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_authorization> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/authorizations/${p["authorization"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingAuthorizationsAuthorization(p: {
    authorization: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_authorization> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/authorizations/${p["authorization"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingAuthorizationsAuthorizationApprove(p: {
    authorization: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_authorization> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/issuing/authorizations/${p["authorization"]}/approve`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingAuthorizationsAuthorizationDecline(p: {
    authorization: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_authorization> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/issuing/authorizations/${p["authorization"]}/decline`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingCardholders(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      email?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      phoneNumber?: string
      startingAfter?: string
      status?: "active" | "blocked" | "inactive" | UnknownEnumStringValue
      type?: "company" | "individual" | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_issuing_cardholder[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      email: p["email"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      phone_number: p["phoneNumber"],
      starting_after: p["startingAfter"],
      status: p["status"],
      type: p["type"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/cardholders`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingCardholders(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_cardholder> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/cardholders`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingCardholdersCardholder(p: {
    cardholder: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_cardholder> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/cardholders/${p["cardholder"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingCardholdersCardholder(p: {
    cardholder: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_cardholder> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/cardholders/${p["cardholder"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingCards(
    p: {
      cardholder?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expMonth?: number
      expYear?: number
      expand?: string[]
      last4?: string
      limit?: number
      personalizationDesign?: string
      startingAfter?: string
      status?: "active" | "canceled" | "inactive" | UnknownEnumStringValue
      type?: "physical" | "virtual" | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_issuing_card[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      cardholder: p["cardholder"],
      created: p["created"],
      ending_before: p["endingBefore"],
      exp_month: p["expMonth"],
      exp_year: p["expYear"],
      expand: p["expand"],
      last4: p["last4"],
      limit: p["limit"],
      personalization_design: p["personalizationDesign"],
      starting_after: p["startingAfter"],
      status: p["status"],
      type: p["type"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/cards`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingCards(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_card> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/cards`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingCardsCard(p: {
    card: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_card> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/cards/${p["card"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingCardsCard(p: {
    card: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_card> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/cards/${p["card"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingDisputes(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "expired"
        | "lost"
        | "submitted"
        | "unsubmitted"
        | "won"
        | UnknownEnumStringValue
      transaction?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_issuing_dispute[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      transaction: p["transaction"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/disputes`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingDisputes(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_issuing_dispute> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/disputes`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingDisputesDispute(p: {
    dispute: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_dispute> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/disputes/${p["dispute"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingDisputesDispute(p: {
    dispute: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_dispute> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/disputes/${p["dispute"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingDisputesDisputeSubmit(p: {
    dispute: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_dispute> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/disputes/${p["dispute"]}/submit`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingPersonalizationDesigns(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      lookupKeys?: string[]
      preferences?: {
        is_default?: boolean
        is_platform_default?: boolean
      }
      startingAfter?: string
      status?:
        | "active"
        | "inactive"
        | "rejected"
        | "review"
        | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_issuing_personalization_design[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      lookup_keys: p["lookupKeys"],
      preferences: p["preferences"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/personalization_designs`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingPersonalizationDesigns(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_personalization_design> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/personalization_designs`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingPersonalizationDesignsPersonalizationDesign(p: {
    expand?: string[]
    personalizationDesign: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_personalization_design> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/issuing/personalization_designs/${p["personalizationDesign"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingPersonalizationDesignsPersonalizationDesign(p: {
    personalizationDesign: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_personalization_design> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/issuing/personalization_designs/${p["personalizationDesign"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingPhysicalBundles(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: "active" | "inactive" | "review" | UnknownEnumStringValue
      type?: "custom" | "standard" | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_issuing_physical_bundle[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      type: p["type"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/physical_bundles`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingPhysicalBundlesPhysicalBundle(p: {
    expand?: string[]
    physicalBundle: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_physical_bundle> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/issuing/physical_bundles/${p["physicalBundle"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingSettlementsSettlement(p: {
    expand?: string[]
    settlement: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_settlement> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/settlements/${p["settlement"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingSettlementsSettlement(p: {
    settlement: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_settlement> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/settlements/${p["settlement"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingTokens(p: {
    card: string
    created?:
      | {
          gt?: number
          gte?: number
          lt?: number
          lte?: number
        }
      | number
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    status?:
      | "active"
      | "deleted"
      | "requested"
      | "suspended"
      | UnknownEnumStringValue
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_issuing_token[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      card: p["card"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/tokens`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingTokensToken(p: {
    expand?: string[]
    token: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_token> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/tokens/${p["token"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingTokensToken(p: {
    token: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_token> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/tokens/${p["token"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingTransactions(
    p: {
      card?: string
      cardholder?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?: "capture" | "refund" | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_issuing_transaction[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      card: p["card"],
      cardholder: p["cardholder"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/transactions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getIssuingTransactionsTransaction(p: {
    expand?: string[]
    transaction: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/issuing/transactions/${p["transaction"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postIssuingTransactionsTransaction(p: {
    transaction: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/issuing/transactions/${p["transaction"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postLinkAccountSessions(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_financial_connections_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/link_account_sessions`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getLinkAccountSessionsSession(p: {
    expand?: string[]
    session: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_financial_connections_session> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/link_account_sessions/${p["session"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getLinkedAccounts(
    p: {
      accountHolder?: {
        account?: string
        customer?: string
      }
      endingBefore?: string
      expand?: string[]
      limit?: number
      session?: string
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_financial_connections_account[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      account_holder: p["accountHolder"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      session: p["session"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/linked_accounts`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getLinkedAccountsAccount(p: {
    account: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_financial_connections_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/linked_accounts/${p["account"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postLinkedAccountsAccountDisconnect(p: {
    account: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_financial_connections_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/linked_accounts/${p["account"]}/disconnect`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getLinkedAccountsAccountOwners(p: {
    account: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    ownership: string
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_financial_connections_account_owner[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      ownership: p["ownership"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/linked_accounts/${p["account"]}/owners`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postLinkedAccountsAccountRefresh(p: {
    account: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_financial_connections_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/linked_accounts/${p["account"]}/refresh`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getMandatesMandate(p: {
    expand?: string[]
    mandate: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_mandate> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/mandates/${p["mandate"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentIntents(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_payment_intent[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payment_intents`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentIntents(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_payment_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_intents`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentIntentsSearch(p: {
    expand?: string[]
    limit?: number
    page?: string
    query: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_payment_intent[]
        has_more: boolean
        next_page?: string | null
        object: "search_result" | UnknownEnumStringValue
        total_count?: number
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payment_intents/search`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentIntentsIntent(p: {
    clientSecret?: string
    expand?: string[]
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      client_secret: p["clientSecret"],
      expand: p["expand"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payment_intents/${p["intent"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentIntentsIntent(p: {
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_intents/${p["intent"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentIntentsIntentApplyCustomerBalance(p: {
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/payment_intents/${p["intent"]}/apply_customer_balance`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentIntentsIntentCancel(p: {
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_intents/${p["intent"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentIntentsIntentCapture(p: {
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_intents/${p["intent"]}/capture`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentIntentsIntentConfirm(p: {
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_intents/${p["intent"]}/confirm`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentIntentsIntentIncrementAuthorization(p: {
    intent: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_payment_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/payment_intents/${p["intent"]}/increment_authorization`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentIntentsIntentVerifyMicrodeposits(p: {
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/payment_intents/${p["intent"]}/verify_microdeposits`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentLinks(
    p: {
      active?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_payment_link[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      active: p["active"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payment_links`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentLinks(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_payment_link> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_links`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentLinksPaymentLink(p: {
    expand?: string[]
    paymentLink: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_link> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payment_links/${p["paymentLink"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentLinksPaymentLink(p: {
    paymentLink: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_link> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_links/${p["paymentLink"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentLinksPaymentLinkLineItems(p: {
    endingBefore?: string
    expand?: string[]
    limit?: number
    paymentLink: string
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_item[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payment_links/${p["paymentLink"]}/line_items`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentMethodConfigurations(
    p: {
      application?: string | "" | UnknownEnumStringValue
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_payment_method_configuration[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      application: p["application"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payment_method_configurations`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentMethodConfigurations(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_payment_method_configuration> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_method_configurations`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentMethodConfigurationsConfiguration(p: {
    configuration: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_method_configuration> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/payment_method_configurations/${p["configuration"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentMethodConfigurationsConfiguration(p: {
    configuration: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_method_configuration> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/payment_method_configurations/${p["configuration"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentMethodDomains(
    p: {
      domainName?: string
      enabled?: boolean
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_payment_method_domain[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      domain_name: p["domainName"],
      enabled: p["enabled"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payment_method_domains`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentMethodDomains(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_payment_method_domain> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_method_domains`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentMethodDomainsPaymentMethodDomain(p: {
    expand?: string[]
    paymentMethodDomain: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_method_domain> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/payment_method_domains/${p["paymentMethodDomain"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentMethodDomainsPaymentMethodDomain(p: {
    paymentMethodDomain: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_method_domain> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/payment_method_domains/${p["paymentMethodDomain"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentMethodDomainsPaymentMethodDomainValidate(p: {
    paymentMethodDomain: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_method_domain> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/payment_method_domains/${p["paymentMethodDomain"]}/validate`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentMethods(
    p: {
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      type?:
        | "acss_debit"
        | "affirm"
        | "afterpay_clearpay"
        | "alipay"
        | "alma"
        | "amazon_pay"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "billie"
        | "blik"
        | "boleto"
        | "card"
        | "cashapp"
        | "crypto"
        | "customer_balance"
        | "eps"
        | "fpx"
        | "giropay"
        | "grabpay"
        | "ideal"
        | "kakao_pay"
        | "klarna"
        | "konbini"
        | "kr_card"
        | "link"
        | "mobilepay"
        | "multibanco"
        | "naver_pay"
        | "nz_bank_account"
        | "oxxo"
        | "p24"
        | "pay_by_bank"
        | "payco"
        | "paynow"
        | "paypal"
        | "pix"
        | "promptpay"
        | "revolut_pay"
        | "samsung_pay"
        | "satispay"
        | "sepa_debit"
        | "sofort"
        | "swish"
        | "twint"
        | "us_bank_account"
        | "wechat_pay"
        | "zip"
        | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_payment_method[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payment_methods`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentMethods(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_payment_method> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_methods`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPaymentMethodsPaymentMethod(p: {
    expand?: string[]
    paymentMethod: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_method> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payment_methods/${p["paymentMethod"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentMethodsPaymentMethod(p: {
    paymentMethod: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_method> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_methods/${p["paymentMethod"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentMethodsPaymentMethodAttach(p: {
    paymentMethod: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_payment_method> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_methods/${p["paymentMethod"]}/attach`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPaymentMethodsPaymentMethodDetach(p: {
    paymentMethod: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payment_method> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payment_methods/${p["paymentMethod"]}/detach`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPayouts(
    p: {
      arrivalDate?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      destination?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_payout[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      arrival_date: p["arrivalDate"],
      created: p["created"],
      destination: p["destination"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payouts`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPayouts(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_payout> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payouts`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPayoutsPayout(p: {
    expand?: string[]
    payout: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payout> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/payouts/${p["payout"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPayoutsPayout(p: {
    payout: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payout> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payouts/${p["payout"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPayoutsPayoutCancel(p: {
    payout: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payout> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payouts/${p["payout"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPayoutsPayoutReverse(p: {
    payout: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_payout> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/payouts/${p["payout"]}/reverse`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPlans(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      product?: string
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_plan[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      active: p["active"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      product: p["product"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/plans`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPlans(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_plan> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/plans`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deletePlansPlan(p: {
    plan: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_plan> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/plans/${p["plan"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPlansPlan(p: {
    expand?: string[]
    plan: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_plan> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/plans/${p["plan"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPlansPlan(p: {
    plan: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_plan> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/plans/${p["plan"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPrices(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      lookupKeys?: string[]
      product?: string
      recurring?: {
        interval?: "day" | "month" | "week" | "year" | UnknownEnumStringValue
        meter?: string
        usage_type?: "licensed" | "metered" | UnknownEnumStringValue
      }
      startingAfter?: string
      type?: "one_time" | "recurring" | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_price[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      active: p["active"],
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      lookup_keys: p["lookupKeys"],
      product: p["product"],
      recurring: p["recurring"],
      starting_after: p["startingAfter"],
      type: p["type"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/prices`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPrices(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_price> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/prices`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPricesSearch(p: {
    expand?: string[]
    limit?: number
    page?: string
    query: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_price[]
        has_more: boolean
        next_page?: string | null
        object: "search_result" | UnknownEnumStringValue
        total_count?: number
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/prices/search`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPricesPrice(p: {
    expand?: string[]
    price: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_price> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/prices/${p["price"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPricesPrice(p: {
    price: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_price> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/prices/${p["price"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getProducts(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      ids?: string[]
      limit?: number
      shippable?: boolean
      startingAfter?: string
      url?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_product[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      active: p["active"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      ids: p["ids"],
      limit: p["limit"],
      shippable: p["shippable"],
      starting_after: p["startingAfter"],
      url: p["url"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/products`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postProducts(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_product> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/products`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getProductsSearch(p: {
    expand?: string[]
    limit?: number
    page?: string
    query: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_product[]
        has_more: boolean
        next_page?: string | null
        object: "search_result" | UnknownEnumStringValue
        total_count?: number
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/products/search`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteProductsId(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_product> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/products/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getProductsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_product> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/products/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postProductsId(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_product> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/products/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getProductsProductFeatures(p: {
    endingBefore?: string
    expand?: string[]
    limit?: number
    product: string
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_product_feature[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/products/${p["product"]}/features`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postProductsProductFeatures(p: {
    product: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_product_feature> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/products/${p["product"]}/features`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteProductsProductFeaturesId(p: {
    id: string
    product: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_product_feature> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/products/${p["product"]}/features/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getProductsProductFeaturesId(p: {
    expand?: string[]
    id: string
    product: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_product_feature> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/products/${p["product"]}/features/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPromotionCodes(
    p: {
      active?: boolean
      code?: string
      coupon?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_promotion_code[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      active: p["active"],
      code: p["code"],
      coupon: p["coupon"],
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/promotion_codes`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPromotionCodes(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_promotion_code> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/promotion_codes`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPromotionCodesPromotionCode(p: {
    expand?: string[]
    promotionCode: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_promotion_code> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/promotion_codes/${p["promotionCode"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postPromotionCodesPromotionCode(p: {
    promotionCode: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_promotion_code> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/promotion_codes/${p["promotionCode"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getQuotes(
    p: {
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "accepted"
        | "canceled"
        | "draft"
        | "open"
        | UnknownEnumStringValue
      testClock?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_quote[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
      test_clock: p["testClock"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/quotes`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postQuotes(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_quote> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/quotes`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getQuotesQuote(p: {
    expand?: string[]
    quote: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_quote> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/quotes/${p["quote"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postQuotesQuote(p: {
    quote: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_quote> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/quotes/${p["quote"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postQuotesQuoteAccept(p: {
    quote: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_quote> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/quotes/${p["quote"]}/accept`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postQuotesQuoteCancel(p: {
    quote: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_quote> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/quotes/${p["quote"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getQuotesQuoteComputedUpfrontLineItems(p: {
    endingBefore?: string
    expand?: string[]
    limit?: number
    quote: string
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_item[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/quotes/${p["quote"]}/computed_upfront_line_items`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postQuotesQuoteFinalize(p: {
    quote: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_quote> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/quotes/${p["quote"]}/finalize`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getQuotesQuoteLineItems(p: {
    endingBefore?: string
    expand?: string[]
    limit?: number
    quote: string
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_item[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/quotes/${p["quote"]}/line_items`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getQuotesQuotePdf(
    p: {
      expand?: string[]
      quote: string
      requestBody?: never
    },
    basePath:
      | Server<"getQuotesQuotePdf_StripeApiService">
      | string = StripeApiServiceServers.operations.getQuotesQuotePdf().build(),
  ): Observable<
    | (HttpResponse<string> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      basePath + `/v1/quotes/${p["quote"]}/pdf`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getRadarEarlyFraudWarnings(
    p: {
      charge?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_radar_early_fraud_warning[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/radar/early_fraud_warnings`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getRadarEarlyFraudWarningsEarlyFraudWarning(p: {
    earlyFraudWarning: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_radar_early_fraud_warning> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/radar/early_fraud_warnings/${p["earlyFraudWarning"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getRadarValueListItems(p: {
    created?:
      | {
          gt?: number
          gte?: number
          lt?: number
          lte?: number
        }
      | number
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    value?: string
    valueList: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_radar_value_list_item[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      value: p["value"],
      value_list: p["valueList"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/radar/value_list_items`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postRadarValueListItems(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_radar_value_list_item> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/radar/value_list_items`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteRadarValueListItemsItem(p: {
    item: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_radar_value_list_item> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/radar/value_list_items/${p["item"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getRadarValueListItemsItem(p: {
    expand?: string[]
    item: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_radar_value_list_item> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/radar/value_list_items/${p["item"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getRadarValueLists(
    p: {
      alias?: string
      contains?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_radar_value_list[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      alias: p["alias"],
      contains: p["contains"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/radar/value_lists`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postRadarValueLists(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_radar_value_list> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/radar/value_lists`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteRadarValueListsValueList(p: {
    valueList: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_radar_value_list> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/radar/value_lists/${p["valueList"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getRadarValueListsValueList(p: {
    expand?: string[]
    valueList: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_radar_value_list> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/radar/value_lists/${p["valueList"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postRadarValueListsValueList(p: {
    valueList: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_radar_value_list> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/radar/value_lists/${p["valueList"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getRefunds(
    p: {
      charge?: string
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentIntent?: string
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_refund[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      charge: p["charge"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_intent: p["paymentIntent"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/refunds`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postRefunds(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_refund> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/refunds`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getRefundsRefund(p: {
    expand?: string[]
    refund: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_refund> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/refunds/${p["refund"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postRefundsRefund(p: {
    refund: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_refund> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/refunds/${p["refund"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postRefundsRefundCancel(p: {
    refund: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_refund> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/refunds/${p["refund"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getReportingReportRuns(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_reporting_report_run[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/reporting/report_runs`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postReportingReportRuns(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_reporting_report_run> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/reporting/report_runs`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getReportingReportRunsReportRun(p: {
    expand?: string[]
    reportRun: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_reporting_report_run> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/reporting/report_runs/${p["reportRun"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getReportingReportTypes(
    p: {expand?: string[]; requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<{
        data: t_reporting_report_type[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/reporting/report_types`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getReportingReportTypesReportType(p: {
    expand?: string[]
    reportType: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_reporting_report_type> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/reporting/report_types/${p["reportType"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getReviews(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_review[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/reviews`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getReviewsReview(p: {
    expand?: string[]
    review: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_review> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/reviews/${p["review"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postReviewsReviewApprove(p: {
    review: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_review> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/reviews/${p["review"]}/approve`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSetupAttempts(p: {
    created?:
      | {
          gt?: number
          gte?: number
          lt?: number
          lte?: number
        }
      | number
    endingBefore?: string
    expand?: string[]
    limit?: number
    setupIntent: string
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_setup_attempt[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      setup_intent: p["setupIntent"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/setup_attempts`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSetupIntents(
    p: {
      attachToSelf?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      paymentMethod?: string
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_setup_intent[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      attach_to_self: p["attachToSelf"],
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      payment_method: p["paymentMethod"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/setup_intents`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSetupIntents(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_setup_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/setup_intents`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSetupIntentsIntent(p: {
    clientSecret?: string
    expand?: string[]
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_setup_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      client_secret: p["clientSecret"],
      expand: p["expand"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/setup_intents/${p["intent"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSetupIntentsIntent(p: {
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_setup_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/setup_intents/${p["intent"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSetupIntentsIntentCancel(p: {
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_setup_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/setup_intents/${p["intent"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSetupIntentsIntentConfirm(p: {
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_setup_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/setup_intents/${p["intent"]}/confirm`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSetupIntentsIntentVerifyMicrodeposits(p: {
    intent: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_setup_intent> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/setup_intents/${p["intent"]}/verify_microdeposits`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getShippingRates(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currency?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_shipping_rate[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      active: p["active"],
      created: p["created"],
      currency: p["currency"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/shipping_rates`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postShippingRates(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_shipping_rate> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/shipping_rates`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getShippingRatesShippingRateToken(p: {
    expand?: string[]
    shippingRateToken: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_shipping_rate> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/shipping_rates/${p["shippingRateToken"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postShippingRatesShippingRateToken(p: {
    shippingRateToken: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_shipping_rate> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/shipping_rates/${p["shippingRateToken"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSigmaSavedQueriesId(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_sigma_sigma_api_query> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/sigma/saved_queries/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSigmaScheduledQueryRuns(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_scheduled_query_run[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/sigma/scheduled_query_runs`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSigmaScheduledQueryRunsScheduledQueryRun(p: {
    expand?: string[]
    scheduledQueryRun: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_scheduled_query_run> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/sigma/scheduled_query_runs/${p["scheduledQueryRun"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSources(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_source> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/sources`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSourcesSource(p: {
    clientSecret?: string
    expand?: string[]
    source: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_source> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      client_secret: p["clientSecret"],
      expand: p["expand"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/sources/${p["source"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSourcesSource(p: {
    source: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_source> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/sources/${p["source"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSourcesSourceMandateNotificationsMandateNotification(p: {
    expand?: string[]
    mandateNotification: string
    source: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_source_mandate_notification> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/sources/${p["source"]}/mandate_notifications/${p["mandateNotification"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSourcesSourceSourceTransactions(p: {
    endingBefore?: string
    expand?: string[]
    limit?: number
    source: string
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_source_transaction[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/sources/${p["source"]}/source_transactions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSourcesSourceSourceTransactionsSourceTransaction(p: {
    expand?: string[]
    source: string
    sourceTransaction: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_source_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/sources/${p["source"]}/source_transactions/${p["sourceTransaction"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSourcesSourceVerify(p: {
    source: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_source> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/sources/${p["source"]}/verify`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSubscriptionItems(p: {
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    subscription: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_subscription_item[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      subscription: p["subscription"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/subscription_items`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSubscriptionItems(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_subscription_item> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/subscription_items`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteSubscriptionItemsItem(p: {
    item: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_subscription_item> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/subscription_items/${p["item"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSubscriptionItemsItem(p: {
    expand?: string[]
    item: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription_item> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/subscription_items/${p["item"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSubscriptionItemsItem(p: {
    item: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription_item> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/subscription_items/${p["item"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSubscriptionSchedules(
    p: {
      canceledAt?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      completedAt?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      releasedAt?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      scheduled?: boolean
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_subscription_schedule[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      canceled_at: p["canceledAt"],
      completed_at: p["completedAt"],
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      released_at: p["releasedAt"],
      scheduled: p["scheduled"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/subscription_schedules`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSubscriptionSchedules(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_subscription_schedule> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/subscription_schedules`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSubscriptionSchedulesSchedule(p: {
    expand?: string[]
    schedule: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription_schedule> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/subscription_schedules/${p["schedule"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSubscriptionSchedulesSchedule(p: {
    schedule: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription_schedule> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/subscription_schedules/${p["schedule"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSubscriptionSchedulesScheduleCancel(p: {
    schedule: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription_schedule> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/subscription_schedules/${p["schedule"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSubscriptionSchedulesScheduleRelease(p: {
    schedule: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription_schedule> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/subscription_schedules/${p["schedule"]}/release`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSubscriptions(
    p: {
      automaticTax?: {
        enabled: boolean
      }
      collectionMethod?:
        | "charge_automatically"
        | "send_invoice"
        | UnknownEnumStringValue
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currentPeriodEnd?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      currentPeriodStart?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      customer?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      price?: string
      startingAfter?: string
      status?:
        | "active"
        | "all"
        | "canceled"
        | "ended"
        | "incomplete"
        | "incomplete_expired"
        | "past_due"
        | "paused"
        | "trialing"
        | "unpaid"
        | UnknownEnumStringValue
      testClock?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_subscription[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      automatic_tax: p["automaticTax"],
      collection_method: p["collectionMethod"],
      created: p["created"],
      current_period_end: p["currentPeriodEnd"],
      current_period_start: p["currentPeriodStart"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      price: p["price"],
      starting_after: p["startingAfter"],
      status: p["status"],
      test_clock: p["testClock"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/subscriptions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSubscriptions(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_subscription> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/subscriptions`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSubscriptionsSearch(p: {
    expand?: string[]
    limit?: number
    page?: string
    query: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_subscription[]
        has_more: boolean
        next_page?: string | null
        object: "search_result" | UnknownEnumStringValue
        total_count?: number
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      expand: p["expand"],
      limit: p["limit"],
      page: p["page"],
      query: p["query"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/subscriptions/search`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteSubscriptionsSubscriptionExposedId(p: {
    subscriptionExposedId: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/subscriptions/${p["subscriptionExposedId"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getSubscriptionsSubscriptionExposedId(p: {
    expand?: string[]
    subscriptionExposedId: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/subscriptions/${p["subscriptionExposedId"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSubscriptionsSubscriptionExposedId(p: {
    subscriptionExposedId: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/subscriptions/${p["subscriptionExposedId"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteSubscriptionsSubscriptionExposedIdDiscount(p: {
    subscriptionExposedId: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_discount> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/v1/subscriptions/${p["subscriptionExposedId"]}/discount`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSubscriptionsSubscriptionMigrate(p: {
    subscription: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_subscription> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/subscriptions/${p["subscription"]}/migrate`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postSubscriptionsSubscriptionResume(p: {
    subscription: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_subscription> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/subscriptions/${p["subscription"]}/resume`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTaxCalculations(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_tax_calculation> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/tax/calculations`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxCalculationsCalculation(p: {
    calculation: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_tax_calculation> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tax/calculations/${p["calculation"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxCalculationsCalculationLineItems(p: {
    calculation: string
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_tax_calculation_line_item[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/tax/calculations/${p["calculation"]}/line_items`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxRegistrations(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "active"
        | "all"
        | "expired"
        | "scheduled"
        | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_tax_registration[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tax/registrations`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTaxRegistrations(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_tax_registration> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/tax/registrations`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxRegistrationsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_tax_registration> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tax/registrations/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTaxRegistrationsId(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_tax_registration> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/tax/registrations/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxSettings(
    p: {expand?: string[]; requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_tax_settings> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tax/settings`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTaxSettings(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_tax_settings> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/tax/settings`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTaxTransactionsCreateFromCalculation(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_tax_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/tax/transactions/create_from_calculation`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTaxTransactionsCreateReversal(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_tax_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/tax/transactions/create_reversal`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxTransactionsTransaction(p: {
    expand?: string[]
    transaction: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_tax_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tax/transactions/${p["transaction"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxTransactionsTransactionLineItems(p: {
    endingBefore?: string
    expand?: string[]
    limit?: number
    startingAfter?: string
    transaction: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_tax_transaction_line_item[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/tax/transactions/${p["transaction"]}/line_items`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxCodes(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_tax_code[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tax_codes`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxCodesId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_tax_code> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tax_codes/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxIds(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      owner?: {
        account?: string
        customer?: string
        type:
          | "account"
          | "application"
          | "customer"
          | "self"
          | UnknownEnumStringValue
      }
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_tax_id[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      owner: p["owner"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tax_ids`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTaxIds(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_tax_id> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/tax_ids`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteTaxIdsId(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_tax_id> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/tax_ids/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxIdsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_tax_id> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tax_ids/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxRates(
    p: {
      active?: boolean
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      inclusive?: boolean
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_tax_rate[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      active: p["active"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      inclusive: p["inclusive"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tax_rates`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTaxRates(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_tax_rate> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/tax_rates`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTaxRatesTaxRate(p: {
    expand?: string[]
    taxRate: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_tax_rate> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tax_rates/${p["taxRate"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTaxRatesTaxRate(p: {
    taxRate: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_tax_rate> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/tax_rates/${p["taxRate"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTerminalConfigurations(
    p: {
      endingBefore?: string
      expand?: string[]
      isAccountDefault?: boolean
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_terminal_configuration[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      is_account_default: p["isAccountDefault"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/terminal/configurations`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalConfigurations(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_terminal_configuration> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/terminal/configurations`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteTerminalConfigurationsConfiguration(p: {
    configuration: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_terminal_configuration> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/v1/terminal/configurations/${p["configuration"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTerminalConfigurationsConfiguration(p: {
    configuration: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<
        t_terminal_configuration | t_deleted_terminal_configuration
      > & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/terminal/configurations/${p["configuration"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalConfigurationsConfiguration(p: {
    configuration: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<
        t_terminal_configuration | t_deleted_terminal_configuration
      > & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/terminal/configurations/${p["configuration"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalConnectionTokens(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_terminal_connection_token> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/terminal/connection_tokens`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTerminalLocations(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_terminal_location[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/terminal/locations`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalLocations(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_terminal_location> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/terminal/locations`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteTerminalLocationsLocation(p: {
    location: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_terminal_location> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/terminal/locations/${p["location"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTerminalLocationsLocation(p: {
    expand?: string[]
    location: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_terminal_location | t_deleted_terminal_location> & {
        status: 200
      })
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/terminal/locations/${p["location"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalLocationsLocation(p: {
    location: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_terminal_location | t_deleted_terminal_location> & {
        status: 200
      })
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/terminal/locations/${p["location"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTerminalReaders(
    p: {
      deviceType?:
        | "bbpos_chipper2x"
        | "bbpos_wisepad3"
        | "bbpos_wisepos_e"
        | "mobile_phone_reader"
        | "simulated_stripe_s700"
        | "simulated_wisepos_e"
        | "stripe_m2"
        | "stripe_s700"
        | "verifone_P400"
        | UnknownEnumStringValue
      endingBefore?: string
      expand?: string[]
      limit?: number
      location?: string
      serialNumber?: string
      startingAfter?: string
      status?: "offline" | "online" | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_terminal_reader[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      device_type: p["deviceType"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      location: p["location"],
      serial_number: p["serialNumber"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/terminal/readers`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalReaders(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/terminal/readers`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteTerminalReadersReader(p: {
    reader: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/terminal/readers/${p["reader"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTerminalReadersReader(p: {
    expand?: string[]
    reader: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_terminal_reader | t_deleted_terminal_reader> & {
        status: 200
      })
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/terminal/readers/${p["reader"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalReadersReader(p: {
    reader: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_terminal_reader | t_deleted_terminal_reader> & {
        status: 200
      })
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/terminal/readers/${p["reader"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalReadersReaderCancelAction(p: {
    reader: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/terminal/readers/${p["reader"]}/cancel_action`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalReadersReaderCollectInputs(p: {
    reader: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/terminal/readers/${p["reader"]}/collect_inputs`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalReadersReaderCollectPaymentMethod(p: {
    reader: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/terminal/readers/${p["reader"]}/collect_payment_method`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalReadersReaderConfirmPaymentIntent(p: {
    reader: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/terminal/readers/${p["reader"]}/confirm_payment_intent`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalReadersReaderProcessPaymentIntent(p: {
    reader: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/terminal/readers/${p["reader"]}/process_payment_intent`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalReadersReaderProcessSetupIntent(p: {
    reader: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/terminal/readers/${p["reader"]}/process_setup_intent`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalReadersReaderRefundPayment(p: {
    reader: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/terminal/readers/${p["reader"]}/refund_payment`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTerminalReadersReaderSetReaderDisplay(p: {
    reader: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/terminal/readers/${p["reader"]}/set_reader_display`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersConfirmationTokens(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_confirmation_token> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/test_helpers/confirmation_tokens`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersCustomersCustomerFundCashBalance(p: {
    customer: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_customer_cash_balance_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/customers/${p["customer"]}/fund_cash_balance`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingAuthorizations(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_authorization> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/test_helpers/issuing/authorizations`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingAuthorizationsAuthorizationCapture(p: {
    authorization: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_authorization> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/capture`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingAuthorizationsAuthorizationExpire(p: {
    authorization: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_authorization> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/expire`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmount(p: {
    authorization: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_authorization> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/finalize_amount`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond(p: {
    authorization: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_authorization> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/fraud_challenges/respond`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingAuthorizationsAuthorizationIncrement(p: {
    authorization: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_authorization> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/increment`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingAuthorizationsAuthorizationReverse(p: {
    authorization: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_authorization> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/authorizations/${p["authorization"]}/reverse`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingCardsCardShippingDeliver(p: {
    card: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_card> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/deliver`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingCardsCardShippingFail(p: {
    card: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_card> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/fail`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingCardsCardShippingReturn(p: {
    card: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_card> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/return`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingCardsCardShippingShip(p: {
    card: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_card> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/ship`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingCardsCardShippingSubmit(p: {
    card: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_card> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/cards/${p["card"]}/shipping/submit`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate(p: {
    personalizationDesign: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_personalization_design> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/personalization_designs/${p["personalizationDesign"]}/activate`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate(p: {
    personalizationDesign: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_personalization_design> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/personalization_designs/${p["personalizationDesign"]}/deactivate`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject(p: {
    personalizationDesign: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_personalization_design> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/personalization_designs/${p["personalizationDesign"]}/reject`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingSettlements(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_settlement> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/test_helpers/issuing/settlements`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingSettlementsSettlementComplete(p: {
    settlement: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_settlement> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/settlements/${p["settlement"]}/complete`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingTransactionsCreateForceCapture(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/transactions/create_force_capture`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingTransactionsCreateUnlinkedRefund(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_issuing_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/transactions/create_unlinked_refund`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersIssuingTransactionsTransactionRefund(p: {
    transaction: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_issuing_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/issuing/transactions/${p["transaction"]}/refund`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersRefundsRefundExpire(p: {
    refund: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_refund> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/test_helpers/refunds/${p["refund"]}/expire`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTerminalReadersReaderPresentPaymentMethod(p: {
    reader: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/terminal/readers/${p["reader"]}/present_payment_method`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTerminalReadersReaderSucceedInputCollection(p: {
    reader: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/terminal/readers/${p["reader"]}/succeed_input_collection`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTerminalReadersReaderTimeoutInputCollection(p: {
    reader: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_terminal_reader> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/terminal/readers/${p["reader"]}/timeout_input_collection`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTestHelpersTestClocks(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_test_helpers_test_clock[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/test_helpers/test_clocks`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTestClocks(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_test_helpers_test_clock> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/test_helpers/test_clocks`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteTestHelpersTestClocksTestClock(p: {
    testClock: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_test_helpers_test_clock> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/test_helpers/test_clocks/${p["testClock"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTestHelpersTestClocksTestClock(p: {
    expand?: string[]
    testClock: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_test_helpers_test_clock> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/test_helpers/test_clocks/${p["testClock"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTestClocksTestClockAdvance(p: {
    testClock: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_test_helpers_test_clock> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/test_clocks/${p["testClock"]}/advance`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryInboundTransfersIdFail(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_inbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/treasury/inbound_transfers/${p["id"]}/fail`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryInboundTransfersIdReturn(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_inbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/treasury/inbound_transfers/${p["id"]}/return`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryInboundTransfersIdSucceed(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_inbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/treasury/inbound_transfers/${p["id"]}/succeed`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryOutboundPaymentsId(p: {
    id: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_payment> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/treasury/outbound_payments/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryOutboundPaymentsIdFail(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_payment> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/treasury/outbound_payments/${p["id"]}/fail`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryOutboundPaymentsIdPost(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_payment> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/treasury/outbound_payments/${p["id"]}/post`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryOutboundPaymentsIdReturn(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_payment> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/treasury/outbound_payments/${p["id"]}/return`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryOutboundTransfersOutboundTransfer(p: {
    outboundTransfer: string
    requestBody: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryOutboundTransfersOutboundTransferFail(p: {
    outboundTransfer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}/fail`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryOutboundTransfersOutboundTransferPost(p: {
    outboundTransfer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}/post`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn(p: {
    outboundTransfer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/test_helpers/treasury/outbound_transfers/${p["outboundTransfer"]}/return`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryReceivedCredits(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_treasury_received_credit> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/test_helpers/treasury/received_credits`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTestHelpersTreasuryReceivedDebits(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_treasury_received_debit> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/test_helpers/treasury/received_debits`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTokens(
    p: {requestBody?: never} = {},
  ): Observable<
    | (HttpResponse<t_token> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/tokens`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTokensToken(p: {
    expand?: string[]
    token: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_token> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/tokens/${p["token"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTopups(
    p: {
      amount?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?:
        | "canceled"
        | "failed"
        | "pending"
        | "succeeded"
        | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_topup[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      amount: p["amount"],
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/topups`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTopups(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_topup> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/topups`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTopupsTopup(p: {
    expand?: string[]
    topup: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_topup> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/topups/${p["topup"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTopupsTopup(p: {
    topup: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_topup> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/topups/${p["topup"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTopupsTopupCancel(p: {
    topup: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_topup> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/topups/${p["topup"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTransfers(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      destination?: string
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      transferGroup?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_transfer[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      destination: p["destination"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      transfer_group: p["transferGroup"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/transfers`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTransfers(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/transfers`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTransfersIdReversals(p: {
    endingBefore?: string
    expand?: string[]
    id: string
    limit?: number
    startingAfter?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_transfer_reversal[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/transfers/${p["id"]}/reversals`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTransfersIdReversals(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_transfer_reversal> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/transfers/${p["id"]}/reversals`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTransfersTransfer(p: {
    expand?: string[]
    transfer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/transfers/${p["transfer"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTransfersTransfer(p: {
    transfer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/transfers/${p["transfer"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTransfersTransferReversalsId(p: {
    expand?: string[]
    id: string
    transfer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_transfer_reversal> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/transfers/${p["transfer"]}/reversals/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTransfersTransferReversalsId(p: {
    id: string
    transfer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_transfer_reversal> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/transfers/${p["transfer"]}/reversals/${p["id"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryCreditReversals(p: {
    endingBefore?: string
    expand?: string[]
    financialAccount: string
    limit?: number
    receivedCredit?: string
    startingAfter?: string
    status?: "canceled" | "posted" | "processing" | UnknownEnumStringValue
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_treasury_credit_reversal[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      received_credit: p["receivedCredit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/credit_reversals`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryCreditReversals(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_treasury_credit_reversal> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/treasury/credit_reversals`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryCreditReversalsCreditReversal(p: {
    creditReversal: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_credit_reversal> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/treasury/credit_reversals/${p["creditReversal"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryDebitReversals(p: {
    endingBefore?: string
    expand?: string[]
    financialAccount: string
    limit?: number
    receivedDebit?: string
    resolution?: "lost" | "won" | UnknownEnumStringValue
    startingAfter?: string
    status?: "canceled" | "completed" | "processing" | UnknownEnumStringValue
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_treasury_debit_reversal[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      received_debit: p["receivedDebit"],
      resolution: p["resolution"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/debit_reversals`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryDebitReversals(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_treasury_debit_reversal> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/treasury/debit_reversals`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryDebitReversalsDebitReversal(p: {
    debitReversal: string
    expand?: string[]
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_debit_reversal> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/treasury/debit_reversals/${p["debitReversal"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryFinancialAccounts(
    p: {
      created?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      status?: "closed" | "open" | UnknownEnumStringValue
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_treasury_financial_account[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/financial_accounts`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryFinancialAccounts(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_treasury_financial_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/treasury/financial_accounts`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryFinancialAccountsFinancialAccount(p: {
    expand?: string[]
    financialAccount: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_financial_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/treasury/financial_accounts/${p["financialAccount"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryFinancialAccountsFinancialAccount(p: {
    financialAccount: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_financial_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/treasury/financial_accounts/${p["financialAccount"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryFinancialAccountsFinancialAccountClose(p: {
    financialAccount: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_financial_account> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/treasury/financial_accounts/${p["financialAccount"]}/close`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryFinancialAccountsFinancialAccountFeatures(p: {
    expand?: string[]
    financialAccount: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_financial_account_features> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/treasury/financial_accounts/${p["financialAccount"]}/features`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryFinancialAccountsFinancialAccountFeatures(p: {
    financialAccount: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_financial_account_features> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/treasury/financial_accounts/${p["financialAccount"]}/features`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryInboundTransfers(p: {
    endingBefore?: string
    expand?: string[]
    financialAccount: string
    limit?: number
    startingAfter?: string
    status?:
      | "canceled"
      | "failed"
      | "processing"
      | "succeeded"
      | UnknownEnumStringValue
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_treasury_inbound_transfer[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/inbound_transfers`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryInboundTransfers(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_treasury_inbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/treasury/inbound_transfers`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryInboundTransfersId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_inbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/inbound_transfers/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryInboundTransfersInboundTransferCancel(p: {
    inboundTransfer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_inbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/treasury/inbound_transfers/${p["inboundTransfer"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryOutboundPayments(p: {
    created?:
      | {
          gt?: number
          gte?: number
          lt?: number
          lte?: number
        }
      | number
    customer?: string
    endingBefore?: string
    expand?: string[]
    financialAccount: string
    limit?: number
    startingAfter?: string
    status?:
      | "canceled"
      | "failed"
      | "posted"
      | "processing"
      | "returned"
      | UnknownEnumStringValue
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_treasury_outbound_payment[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      customer: p["customer"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/outbound_payments`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryOutboundPayments(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_payment> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/treasury/outbound_payments`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryOutboundPaymentsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_payment> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/outbound_payments/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryOutboundPaymentsIdCancel(p: {
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_payment> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/treasury/outbound_payments/${p["id"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryOutboundTransfers(p: {
    endingBefore?: string
    expand?: string[]
    financialAccount: string
    limit?: number
    startingAfter?: string
    status?:
      | "canceled"
      | "failed"
      | "posted"
      | "processing"
      | "returned"
      | UnknownEnumStringValue
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_treasury_outbound_transfer[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/outbound_transfers`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryOutboundTransfers(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/treasury/outbound_transfers`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryOutboundTransfersOutboundTransfer(p: {
    expand?: string[]
    outboundTransfer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/v1/treasury/outbound_transfers/${p["outboundTransfer"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postTreasuryOutboundTransfersOutboundTransferCancel(p: {
    outboundTransfer: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_outbound_transfer> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/v1/treasury/outbound_transfers/${p["outboundTransfer"]}/cancel`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryReceivedCredits(p: {
    endingBefore?: string
    expand?: string[]
    financialAccount: string
    limit?: number
    linkedFlows?: {
      source_flow_type:
        | "credit_reversal"
        | "other"
        | "outbound_payment"
        | "outbound_transfer"
        | "payout"
        | UnknownEnumStringValue
    }
    startingAfter?: string
    status?: "failed" | "succeeded" | UnknownEnumStringValue
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_treasury_received_credit[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      linked_flows: p["linkedFlows"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/received_credits`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryReceivedCreditsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_received_credit> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/received_credits/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryReceivedDebits(p: {
    endingBefore?: string
    expand?: string[]
    financialAccount: string
    limit?: number
    startingAfter?: string
    status?: "failed" | "succeeded" | UnknownEnumStringValue
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_treasury_received_debit[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
      status: p["status"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/received_debits`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryReceivedDebitsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_received_debit> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/received_debits/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryTransactionEntries(p: {
    created?:
      | {
          gt?: number
          gte?: number
          lt?: number
          lte?: number
        }
      | number
    effectiveAt?:
      | {
          gt?: number
          gte?: number
          lt?: number
          lte?: number
        }
      | number
    endingBefore?: string
    expand?: string[]
    financialAccount: string
    limit?: number
    orderBy?: "created" | "effective_at" | UnknownEnumStringValue
    startingAfter?: string
    transaction?: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_treasury_transaction_entry[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      effective_at: p["effectiveAt"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      order_by: p["orderBy"],
      starting_after: p["startingAfter"],
      transaction: p["transaction"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/transaction_entries`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryTransactionEntriesId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_transaction_entry> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/transaction_entries/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryTransactions(p: {
    created?:
      | {
          gt?: number
          gte?: number
          lt?: number
          lte?: number
        }
      | number
    endingBefore?: string
    expand?: string[]
    financialAccount: string
    limit?: number
    orderBy?: "created" | "posted_at" | UnknownEnumStringValue
    startingAfter?: string
    status?: "open" | "posted" | "void" | UnknownEnumStringValue
    statusTransitions?: {
      posted_at?:
        | {
            gt?: number
            gte?: number
            lt?: number
            lte?: number
          }
        | number
    }
    requestBody?: never
  }): Observable<
    | (HttpResponse<{
        data: t_treasury_transaction[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      created: p["created"],
      ending_before: p["endingBefore"],
      expand: p["expand"],
      financial_account: p["financialAccount"],
      limit: p["limit"],
      order_by: p["orderBy"],
      starting_after: p["startingAfter"],
      status: p["status"],
      status_transitions: p["statusTransitions"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/transactions`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTreasuryTransactionsId(p: {
    expand?: string[]
    id: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_treasury_transaction> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/treasury/transactions/${p["id"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getWebhookEndpoints(
    p: {
      endingBefore?: string
      expand?: string[]
      limit?: number
      startingAfter?: string
      requestBody?: never
    } = {},
  ): Observable<
    | (HttpResponse<{
        data: t_webhook_endpoint[]
        has_more: boolean
        object: "list" | UnknownEnumStringValue
        url: string
      }> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({
      ending_before: p["endingBefore"],
      expand: p["expand"],
      limit: p["limit"],
      starting_after: p["startingAfter"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/webhook_endpoints`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postWebhookEndpoints(p: {
    requestBody: never
  }): Observable<
    | (HttpResponse<t_webhook_endpoint> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/webhook_endpoints`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteWebhookEndpointsWebhookEndpoint(p: {
    webhookEndpoint: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_deleted_webhook_endpoint> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/v1/webhook_endpoints/${p["webhookEndpoint"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getWebhookEndpointsWebhookEndpoint(p: {
    expand?: string[]
    webhookEndpoint: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_webhook_endpoint> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/v1/webhook_endpoints/${p["webhookEndpoint"]}`,
      {
        params,
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  postWebhookEndpointsWebhookEndpoint(p: {
    webhookEndpoint: string
    requestBody?: never
  }): Observable<
    | (HttpResponse<t_webhook_endpoint> & {status: 200})
    | (HttpResponse<t_error> & {status: StatusCode})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/v1/webhook_endpoints/${p["webhookEndpoint"]}`,
      {
        headers,
        // todo: request bodies with content-type 'application/x-www-form-urlencoded' not yet supported,
        observe: "response",
        reportProgress: false,
      },
    )
  }
}

export {StripeApiService as ApiClient}
export {StripeApiServiceConfig as ApiClientConfig}
