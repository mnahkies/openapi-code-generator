/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_Booking,
  t_BookingPayment,
  t_Links_Booking,
  t_Links_Pagination,
  t_Links_Self,
  t_Problem,
  t_Station,
  t_Trip,
  t_Wrapper_Collection,
} from "./models"
import { HttpClient, HttpParams, HttpResponse } from "@angular/common/http"
import { Injectable } from "@angular/core"
import { Observable } from "rxjs"

export class TrainTravelApiServiceServers {
  static default(): Server<"TrainTravelApiService"> {
    return TrainTravelApiServiceServers.server().build()
  }

  static server(url?: "https://try.microcks.io/rest/Train+Travel+API/1.0.0"): {
    build: () => Server<"TrainTravelApiService">
  }
  static server(url?: "https://api.example.com"): {
    build: () => Server<"TrainTravelApiService">
  }
  static server(
    url: string = "https://try.microcks.io/rest/Train+Travel+API/1.0.0",
  ): unknown {
    switch (url) {
      case "https://try.microcks.io/rest/Train+Travel+API/1.0.0":
        return {
          build(): Server<"TrainTravelApiService"> {
            return "https://try.microcks.io/rest/Train+Travel+API/1.0.0" as Server<"TrainTravelApiService">
          },
        }

      case "https://api.example.com":
        return {
          build(): Server<"TrainTravelApiService"> {
            return "https://api.example.com" as Server<"TrainTravelApiService">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }
}

export class TrainTravelApiServiceConfig {
  basePath: Server<"TrainTravelApiService"> | string =
    TrainTravelApiServiceServers.default()
  defaultHeaders: Record<string, string> = {}
}

// from https://stackoverflow.com/questions/39494689/is-it-possible-to-restrict-number-to-a-certain-range
type Enumerate<
  N extends number,
  Acc extends number[] = [],
> = Acc["length"] extends N
  ? Acc[number]
  : Enumerate<N, [...Acc, Acc["length"]]>

type IntRange<F extends number, T extends number> = F extends T
  ? F
  : Exclude<Enumerate<T>, Enumerate<F>> extends never
    ? never
    : Exclude<Enumerate<T>, Enumerate<F>> | T

export type StatusCode1xx = IntRange<100, 199>
export type StatusCode2xx = IntRange<200, 299>
export type StatusCode3xx = IntRange<300, 399>
export type StatusCode4xx = IntRange<400, 499>
export type StatusCode5xx = IntRange<500, 599>
export type StatusCode =
  | StatusCode1xx
  | StatusCode2xx
  | StatusCode3xx
  | StatusCode4xx
  | StatusCode5xx

export type QueryParams = {
  [name: string]:
    | string
    | number
    | boolean
    | string[]
    | undefined
    | null
    | QueryParams
    | QueryParams[]
}

export type Server<T> = string & { __server__: T }

@Injectable({
  providedIn: "root",
})
export class TrainTravelApiService {
  constructor(
    private readonly httpClient: HttpClient,
    private readonly config: TrainTravelApiServiceConfig,
  ) {}

  private _headers(
    headers: Record<string, string | undefined>,
  ): Record<string, string> {
    return Object.fromEntries(
      Object.entries({ ...this.config.defaultHeaders, ...headers }).filter(
        (it): it is [string, string] => it[1] !== undefined,
      ),
    )
  }

  private _queryParams(queryParams: QueryParams): HttpParams {
    return Object.entries(queryParams).reduce((result, [name, value]) => {
      if (
        typeof value === "string" ||
        typeof value === "boolean" ||
        typeof value === "number"
      ) {
        return result.set(name, value)
      } else if (value === null || value === undefined) {
        return result
      }
      throw new Error(
        `query parameter '${name}' with value '${value}' is not yet supported`,
      )
    }, new HttpParams())
  }

  getStations(
    p: {
      page?: number
      limit?: number
      coordinates?: string
      search?: string
      country?: string
    } = {},
  ): Observable<
    | (HttpResponse<
        t_Wrapper_Collection & {
          data?: t_Station[]
        } & {
          links?: t_Links_Self & t_Links_Pagination
        }
      > & { status: 200 })
    | (HttpResponse<t_Problem> & { status: 400 })
    | (HttpResponse<t_Problem> & { status: 401 })
    | (HttpResponse<t_Problem> & { status: 403 })
    | (HttpResponse<t_Problem> & { status: 429 })
    | (HttpResponse<t_Problem> & { status: 500 })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({
      page: p["page"],
      limit: p["limit"],
      coordinates: p["coordinates"],
      search: p["search"],
      country: p["country"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/stations`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getTrips(p: {
    page?: number
    limit?: number
    origin: string
    destination: string
    date: string
    bicycles?: boolean
    dogs?: boolean
  }): Observable<
    | (HttpResponse<
        t_Wrapper_Collection & {
          data?: t_Trip[]
        } & {
          links?: t_Links_Self & t_Links_Pagination
        }
      > & { status: 200 })
    | (HttpResponse<t_Problem> & { status: 400 })
    | (HttpResponse<t_Problem> & { status: 401 })
    | (HttpResponse<t_Problem> & { status: 403 })
    | (HttpResponse<t_Problem> & { status: 429 })
    | (HttpResponse<t_Problem> & { status: 500 })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({
      page: p["page"],
      limit: p["limit"],
      origin: p["origin"],
      destination: p["destination"],
      date: p["date"],
      bicycles: p["bicycles"],
      dogs: p["dogs"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/trips`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBookings(
    p: {
      page?: number
      limit?: number
    } = {},
  ): Observable<
    | (HttpResponse<
        t_Wrapper_Collection & {
          data?: t_Booking[]
        } & {
          links?: t_Links_Self & t_Links_Pagination
        }
      > & { status: 200 })
    | (HttpResponse<t_Problem> & { status: 400 })
    | (HttpResponse<t_Problem> & { status: 401 })
    | (HttpResponse<t_Problem> & { status: 403 })
    | (HttpResponse<t_Problem> & { status: 429 })
    | (HttpResponse<t_Problem> & { status: 500 })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ page: p["page"], limit: p["limit"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/bookings`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  createBooking(p: {
    requestBody: t_Booking
  }): Observable<
    | (HttpResponse<
        t_Booking & {
          links?: t_Links_Self
        }
      > & { status: 201 })
    | (HttpResponse<t_Problem> & { status: 400 })
    | (HttpResponse<t_Problem> & { status: 401 })
    | (HttpResponse<t_Problem> & { status: 404 })
    | (HttpResponse<t_Problem> & { status: 409 })
    | (HttpResponse<t_Problem> & { status: 429 })
    | (HttpResponse<t_Problem> & { status: 500 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/bookings`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getBooking(p: {
    bookingId: string
  }): Observable<
    | (HttpResponse<
        t_Booking & {
          links?: t_Links_Self
        }
      > & { status: 200 })
    | (HttpResponse<t_Problem> & { status: 400 })
    | (HttpResponse<t_Problem> & { status: 401 })
    | (HttpResponse<t_Problem> & { status: 403 })
    | (HttpResponse<t_Problem> & { status: 404 })
    | (HttpResponse<t_Problem> & { status: 429 })
    | (HttpResponse<t_Problem> & { status: 500 })
    | HttpResponse<unknown>
  > {
    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/bookings/${p["bookingId"]}`,
      {
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteBooking(p: {
    bookingId: string
  }): Observable<
    | (HttpResponse<void> & { status: 204 })
    | (HttpResponse<t_Problem> & { status: 400 })
    | (HttpResponse<t_Problem> & { status: 401 })
    | (HttpResponse<t_Problem> & { status: 403 })
    | (HttpResponse<t_Problem> & { status: 404 })
    | (HttpResponse<t_Problem> & { status: 429 })
    | (HttpResponse<t_Problem> & { status: 500 })
    | HttpResponse<unknown>
  > {
    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/bookings/${p["bookingId"]}`,
      {
        observe: "response",
        reportProgress: false,
      },
    )
  }

  createBookingPayment(p: {
    bookingId: string
    requestBody: t_BookingPayment
  }): Observable<
    | (HttpResponse<
        t_BookingPayment & {
          links?: t_Links_Booking
        }
      > & { status: 200 })
    | (HttpResponse<t_Problem> & { status: 400 })
    | (HttpResponse<t_Problem> & { status: 401 })
    | (HttpResponse<t_Problem> & { status: 403 })
    | (HttpResponse<t_Problem> & { status: 429 })
    | (HttpResponse<t_Problem> & { status: 500 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/bookings/${p["bookingId"]}/payment`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }
}

export { TrainTravelApiService as ApiClient }
export { TrainTravelApiServiceConfig as ApiClientConfig }
