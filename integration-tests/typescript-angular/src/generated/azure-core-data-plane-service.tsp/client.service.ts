/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_Azure_Core_Foundations_Error,
  t_Azure_Core_Foundations_ErrorResponse,
  t_Azure_Core_Foundations_OperationState,
  t_Azure_Core_uuid,
  t_Manufacturer,
  t_PagedManufacturer,
  t_PagedWidget,
  t_PagedWidgetPart,
  t_Widget,
  t_WidgetAnalytics,
  t_WidgetAnalyticsCreateOrUpdate,
  t_WidgetCreateOrUpdate,
  t_WidgetPart,
  t_WidgetPartReorderRequest,
  t_WidgetRepairRequest,
  t_WidgetRepairState,
} from "./models"
import { HttpClient, HttpParams, HttpResponse } from "@angular/common/http"
import { Injectable } from "@angular/core"
import { Observable } from "rxjs"

export class ApiClientConfig {
  basePath: string = ""
  defaultHeaders: Record<string, string> = {}
}

// from https://stackoverflow.com/questions/39494689/is-it-possible-to-restrict-number-to-a-certain-range
type Enumerate<
  N extends number,
  Acc extends number[] = [],
> = Acc["length"] extends N
  ? Acc[number]
  : Enumerate<N, [...Acc, Acc["length"]]>

type IntRange<F extends number, T extends number> = F extends T
  ? F
  : Exclude<Enumerate<T>, Enumerate<F>> extends never
    ? never
    : Exclude<Enumerate<T>, Enumerate<F>> | T

export type StatusCode1xx = IntRange<100, 199>
export type StatusCode2xx = IntRange<200, 299>
export type StatusCode3xx = IntRange<300, 399>
export type StatusCode4xx = IntRange<400, 499>
export type StatusCode5xx = IntRange<500, 599>
export type StatusCode =
  | StatusCode1xx
  | StatusCode2xx
  | StatusCode3xx
  | StatusCode4xx
  | StatusCode5xx

export type QueryParams = {
  [name: string]:
    | string
    | number
    | boolean
    | string[]
    | undefined
    | null
    | QueryParams
    | QueryParams[]
}

@Injectable({
  providedIn: "root",
})
export class ApiClient {
  constructor(
    private readonly httpClient: HttpClient,
    private readonly config: ApiClientConfig,
  ) {}

  private _headers(
    headers: Record<string, string | undefined>,
  ): Record<string, string> {
    return Object.fromEntries(
      Object.entries({ ...this.config.defaultHeaders, ...headers }).filter(
        (it): it is [string, string] => it[1] !== undefined,
      ),
    )
  }

  private _queryParams(queryParams: QueryParams): HttpParams {
    return Object.entries(queryParams).reduce((result, [name, value]) => {
      if (
        typeof value === "string" ||
        typeof value === "boolean" ||
        typeof value === "number"
      ) {
        return result.set(name, value)
      } else if (value === null || value === undefined) {
        return result
      }
      throw new Error(
        `query parameter '${name}' with value '${value}' is not yet supported`,
      )
    }, new HttpParams())
  }

  serviceStatus(p: {
    apiVersion: string
    xMsClientRequestId?: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<{
        statusString: string
      }> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/service-status`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetsGetWidgetOperationStatus(p: {
    apiVersion: string
    widgetName: string
    operationId: string
  }): Observable<
    | (HttpResponse<{
        error?: t_Azure_Core_Foundations_Error
        id: string
        result?: t_Widget
        status: t_Azure_Core_Foundations_OperationState
      }> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/widgets/${p["widgetName"]}/operations/${p["operationId"]}`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetsCreateOrUpdateWidget(p: {
    apiVersion: string
    widgetName: string
    repeatabilityRequestId?: string
    repeatabilityFirstSent?: string
    ifMatch?: string
    ifNoneMatch?: string
    ifUnmodifiedSince?: string
    ifModifiedSince?: string
    xMsClientRequestId?: t_Azure_Core_uuid
    requestBody: t_WidgetCreateOrUpdate
  }): Observable<
    | (HttpResponse<t_Widget> & { status: 200 })
    | (HttpResponse<t_Widget> & { status: 201 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/merge-patch+json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/widgets/${p["widgetName"]}`,
      {
        params,
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetsGetWidget(p: {
    apiVersion: string
    widgetName: string
    ifMatch?: string
    ifNoneMatch?: string
    ifUnmodifiedSince?: string
    ifModifiedSince?: string
    xMsClientRequestId?: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<t_Widget> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/widgets/${p["widgetName"]}`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetsDeleteWidget(p: {
    apiVersion: string
    widgetName: string
    repeatabilityRequestId?: string
    repeatabilityFirstSent?: string
    ifMatch?: string
    ifNoneMatch?: string
    ifUnmodifiedSince?: string
    ifModifiedSince?: string
    xMsClientRequestId?: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<{
        error?: t_Azure_Core_Foundations_Error
        id: string
        status: t_Azure_Core_Foundations_OperationState
      }> & { status: 202 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/widgets/${p["widgetName"]}`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetsListWidgets(p: {
    apiVersion: string
    top?: number
    skip?: number
    maxpagesize?: number
    select?: string[]
    xMsClientRequestId?: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<t_PagedWidget> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({
      "api-version": p["apiVersion"],
      top: p["top"],
      skip: p["skip"],
      maxpagesize: p["maxpagesize"],
      select: p["select"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/widgets`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetsGetAnalytics(p: {
    apiVersion: string
    widgetName: string
    ifMatch?: string
    ifNoneMatch?: string
    ifUnmodifiedSince?: string
    ifModifiedSince?: string
    xMsClientRequestId?: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<t_WidgetAnalytics> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/widgets/${p["widgetName"]}/analytics/current`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetsUpdateAnalytics(p: {
    apiVersion: string
    widgetName: string
    repeatabilityRequestId?: string
    repeatabilityFirstSent?: string
    ifMatch?: string
    ifNoneMatch?: string
    ifUnmodifiedSince?: string
    ifModifiedSince?: string
    xMsClientRequestId?: t_Azure_Core_uuid
    requestBody: t_WidgetAnalyticsCreateOrUpdate
  }): Observable<
    | (HttpResponse<t_WidgetAnalytics> & { status: 200 })
    | (HttpResponse<t_WidgetAnalytics> & { status: 201 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/merge-patch+json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/widgets/${p["widgetName"]}/analytics/current`,
      {
        params,
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetsGetRepairStatus(p: {
    apiVersion: string
    widgetId: string
    operationId: string
  }): Observable<
    | (HttpResponse<{
        error?: t_Azure_Core_Foundations_Error
        id: string
        result?: t_WidgetRepairRequest
        status: t_Azure_Core_Foundations_OperationState
      }> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/widgets/${p["widgetId"]}/repairs/${p["operationId"]}`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetsScheduleRepairs(p: {
    apiVersion: string
    widgetName: string
    repeatabilityRequestId?: string
    repeatabilityFirstSent?: string
    xMsClientRequestId?: t_Azure_Core_uuid
    requestBody: t_WidgetRepairRequest
  }): Observable<
    | (HttpResponse<{
        error?: t_Azure_Core_Foundations_Error
        id: string
        result?: {
          completedDateTime: string
          createdDateTime: string
          requestState: t_WidgetRepairState
          scheduledDateTime: string
          updatedDateTime: string
        }
        status: t_Azure_Core_Foundations_OperationState
      }> & { status: 202 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/widgets/${p["widgetName"]}:scheduleRepairs`,
      {
        params,
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetPartsGetWidgetPartOperationStatus(p: {
    apiVersion: string
    widgetName: string
    widgetPartName: string
    operationId: string
  }): Observable<
    | (HttpResponse<{
        error?: t_Azure_Core_Foundations_Error
        id: string
        result?: t_WidgetPart
        status: t_Azure_Core_Foundations_OperationState
      }> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/widgets/${p["widgetName"]}/parts/${p["widgetPartName"]}/operations/${p["operationId"]}`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetPartsCreateWidgetPart(p: {
    apiVersion: string
    widgetName: string
    repeatabilityRequestId?: string
    repeatabilityFirstSent?: string
    ifMatch?: string
    ifNoneMatch?: string
    ifUnmodifiedSince?: string
    ifModifiedSince?: string
    xMsClientRequestId?: t_Azure_Core_uuid
    requestBody: t_WidgetPart
  }): Observable<
    | (HttpResponse<void> & { status: 201 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/widgets/${p["widgetName"]}/parts`,
      {
        params,
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetPartsListWidgetParts(p: {
    apiVersion: string
    widgetName: string
    xMsClientRequestId?: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<t_PagedWidgetPart> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/widgets/${p["widgetName"]}/parts`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetPartsGetWidgetPart(p: {
    apiVersion: string
    widgetName: string
    widgetPartName: string
    ifMatch?: string
    ifNoneMatch?: string
    ifUnmodifiedSince?: string
    ifModifiedSince?: string
    xMsClientRequestId?: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<t_WidgetPart> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/widgets/${p["widgetName"]}/parts/${p["widgetPartName"]}`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetPartsDeleteWidgetPart(p: {
    apiVersion: string
    widgetName: string
    widgetPartName: string
    repeatabilityRequestId?: string
    repeatabilityFirstSent?: string
    ifMatch?: string
    ifNoneMatch?: string
    ifUnmodifiedSince?: string
    ifModifiedSince?: string
    xMsClientRequestId?: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<void> & { status: 204 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/widgets/${p["widgetName"]}/parts/${p["widgetPartName"]}`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  widgetPartsReorderParts(p: {
    apiVersion: string
    widgetName: string
    repeatabilityRequestId?: string
    repeatabilityFirstSent?: string
    xMsClientRequestId?: t_Azure_Core_uuid
    requestBody: t_WidgetPartReorderRequest
  }): Observable<
    | (HttpResponse<{
        error?: t_Azure_Core_Foundations_Error
        id: string
        status: t_Azure_Core_Foundations_OperationState
      }> & { status: 202 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/widgets/${p["widgetName"]}/parts:reorderParts`,
      {
        params,
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  manufacturersGetManufacturerOperationStatus(p: {
    apiVersion: string
    manufacturerId: string
    operationId: string
  }): Observable<
    | (HttpResponse<{
        error?: t_Azure_Core_Foundations_Error
        id: string
        result?: t_Manufacturer
        status: t_Azure_Core_Foundations_OperationState
      }> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/manufacturers/${p["manufacturerId"]}/operations/${p["operationId"]}`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  manufacturersCreateManufacturer(p: {
    apiVersion: string
    manufacturerId: string
    repeatabilityRequestId?: string
    repeatabilityFirstSent?: string
    ifMatch?: string
    ifNoneMatch?: string
    ifUnmodifiedSince?: string
    ifModifiedSince?: string
    xMsClientRequestId?: t_Azure_Core_uuid
    requestBody: t_Manufacturer
  }): Observable<
    | (HttpResponse<t_Manufacturer> & { status: 200 })
    | (HttpResponse<t_Manufacturer> & { status: 201 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/json",
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/manufacturers/${p["manufacturerId"]}`,
      {
        params,
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  manufacturersGetManufacturer(p: {
    apiVersion: string
    manufacturerId: string
    ifMatch?: string
    ifNoneMatch?: string
    ifUnmodifiedSince?: string
    ifModifiedSince?: string
    xMsClientRequestId?: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<t_Manufacturer> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/manufacturers/${p["manufacturerId"]}`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  manufacturersDeleteManufacturer(p: {
    apiVersion: string
    manufacturerId: string
    repeatabilityRequestId?: string
    repeatabilityFirstSent?: string
    ifMatch?: string
    ifNoneMatch?: string
    ifUnmodifiedSince?: string
    ifModifiedSince?: string
    xMsClientRequestId?: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<{
        error?: t_Azure_Core_Foundations_Error
        id: string
        status: t_Azure_Core_Foundations_OperationState
      }> & { status: 202 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Repeatability-Request-ID": p["repeatabilityRequestId"],
      "Repeatability-First-Sent": p["repeatabilityFirstSent"],
      "If-Match": p["ifMatch"],
      "If-None-Match": p["ifNoneMatch"],
      "If-Unmodified-Since": p["ifUnmodifiedSince"],
      "If-Modified-Since": p["ifModifiedSince"],
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/manufacturers/${p["manufacturerId"]}`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  manufacturersListManufacturers(p: {
    apiVersion: string
    xMsClientRequestId?: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<t_PagedManufacturer> & { status: 200 })
    | (HttpResponse<t_Azure_Core_Foundations_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "x-ms-client-request-id": p["xMsClientRequestId"],
    })
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/manufacturers`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }
}
