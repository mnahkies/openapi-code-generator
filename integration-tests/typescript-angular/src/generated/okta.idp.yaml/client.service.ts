/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  EmptyObject,
  UnknownEnumStringValue,
  t_AppAuthenticatorEnrollment,
  t_AppAuthenticatorEnrollmentRequest,
  t_Authenticator,
  t_AuthenticatorEnrollment,
  t_Email,
  t_Error,
  t_OktaApplication,
  t_Organization,
  t_PasswordResponse,
  t_Phone,
  t_Profile,
  t_PushNotificationChallenge,
  t_PushNotificationVerification,
  t_Schema,
  t_UpdateAppAuthenticatorEnrollmentRequest,
  t_UpdateAuthenticatorEnrollmentRequest,
} from "./models"
import {HttpClient, HttpParams, HttpResponse} from "@angular/common/http"
import {Injectable} from "@angular/core"
import {Observable} from "rxjs"

export class MyAccountManagementServiceServers {
  static default(): Server<"MyAccountManagementService"> {
    return MyAccountManagementServiceServers.server().build()
  }

  static server(url: "https://{yourOktaDomain}" = "https://{yourOktaDomain}"): {
    build: (yourOktaDomain?: string) => Server<"MyAccountManagementService">
  } {
    switch (url) {
      case "https://{yourOktaDomain}":
        return {
          build(
            yourOktaDomain = "subdomain.okta.com",
          ): Server<"MyAccountManagementService"> {
            return "https://{yourOktaDomain}".replace(
              "{yourOktaDomain}",
              yourOktaDomain,
            ) as Server<"MyAccountManagementService">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }
}

export class MyAccountManagementServiceConfig {
  basePath: Server<"MyAccountManagementService"> | string =
    MyAccountManagementServiceServers.default()
  defaultHeaders: Record<string, string> = {}
}

// from https://stackoverflow.com/questions/39494689/is-it-possible-to-restrict-number-to-a-certain-range
type Enumerate<
  N extends number,
  Acc extends number[] = [],
> = Acc["length"] extends N
  ? Acc[number]
  : Enumerate<N, [...Acc, Acc["length"]]>

type IntRange<F extends number, T extends number> = F extends T
  ? F
  : Exclude<Enumerate<T>, Enumerate<F>> extends never
    ? never
    : Exclude<Enumerate<T>, Enumerate<F>> | T

export type StatusCode1xx = IntRange<100, 199>
export type StatusCode2xx = IntRange<200, 299>
export type StatusCode3xx = IntRange<300, 399>
export type StatusCode4xx = IntRange<400, 499>
export type StatusCode5xx = IntRange<500, 599>
export type StatusCode =
  | StatusCode1xx
  | StatusCode2xx
  | StatusCode3xx
  | StatusCode4xx
  | StatusCode5xx

export type QueryParams = {
  [name: string]:
    | string
    | number
    | boolean
    | string[]
    | undefined
    | null
    | QueryParams
    | QueryParams[]
}

export type Server<T> = string & {__server__: T}

@Injectable({
  providedIn: "root",
})
export class MyAccountManagementService {
  constructor(
    private readonly httpClient: HttpClient,
    private readonly config: MyAccountManagementServiceConfig,
  ) {}

  private _headers(
    headers: Record<string, string | undefined>,
  ): Record<string, string> {
    return Object.fromEntries(
      Object.entries({...this.config.defaultHeaders, ...headers}).filter(
        (it): it is [string, string] => it[1] !== undefined,
      ),
    )
  }

  private _queryParams(queryParams: QueryParams): HttpParams {
    return Object.entries(queryParams).reduce((result, [name, value]) => {
      if (
        typeof value === "string" ||
        typeof value === "boolean" ||
        typeof value === "number"
      ) {
        return result.set(name, value)
      } else if (value === null || value === undefined) {
        return result
      }
      throw new Error(
        `query parameter '${name}' with value '${value}' is not yet supported`,
      )
    }, new HttpParams())
  }

  createAppAuthenticatorEnrollment(p: {
    requestBody: t_AppAuthenticatorEnrollmentRequest
  }): Observable<
    | (HttpResponse<t_AppAuthenticatorEnrollment> & {status: 200})
    | (HttpResponse<t_Error> & {status: 400})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/json, okta-version=1.0.0",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/idp/myaccount/app-authenticators`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  verifyAppAuthenticatorPushNotificationChallenge(p: {
    challengeId: string
    requestBody: t_PushNotificationVerification
  }): Observable<
    | (HttpResponse<void> & {status: 200})
    | (HttpResponse<void> & {status: 204})
    | (HttpResponse<void> & {status: 400})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/json;okta-version=1.0.0",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/idp/myaccount/app-authenticators/challenge/${p["challengeId"]}/verify`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  updateAppAuthenticatorEnrollment(p: {
    enrollmentId: string
    requestBody: t_UpdateAppAuthenticatorEnrollmentRequest
  }): Observable<
    | (HttpResponse<t_AppAuthenticatorEnrollment> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/merge-patch+json;okta-version=1.0.0",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/idp/myaccount/app-authenticators/${p["enrollmentId"]}`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteAppAuthenticatorEnrollment(p: {
    enrollmentId: string
  }): Observable<
    | (HttpResponse<void> & {status: 204})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/idp/myaccount/app-authenticators/${p["enrollmentId"]}`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  listAppAuthenticatorPendingPushNotificationChallenges(p: {
    enrollmentId: string
  }): Observable<
    | (HttpResponse<t_PushNotificationChallenge[]> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/idp/myaccount/app-authenticators/${p["enrollmentId"]}/push/notifications`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  listAuthenticators(
    p: {expand?: string} = {},
  ): Observable<
    | (HttpResponse<t_Authenticator[]> & {status: 200})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 429})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/idp/myaccount/authenticators`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getAuthenticator(p: {
    authenticatorId: string
    expand?: string
  }): Observable<
    | (HttpResponse<t_Authenticator> & {status: 200})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | (HttpResponse<t_Error> & {status: 429})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})
    const params = this._queryParams({expand: p["expand"]})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/idp/myaccount/authenticators/${p["authenticatorId"]}`,
      {
        params,
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  listEnrollments(p: {
    authenticatorId: string
  }): Observable<
    | (HttpResponse<t_AuthenticatorEnrollment[]> & {status: 200})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | (HttpResponse<t_Error> & {status: 429})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/idp/myaccount/authenticators/${p["authenticatorId"]}/enrollments`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getEnrollment(p: {
    authenticatorId: string
    enrollmentId: string
  }): Observable<
    | (HttpResponse<t_AuthenticatorEnrollment> & {status: 200})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | (HttpResponse<t_Error> & {status: 429})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/idp/myaccount/authenticators/${p["authenticatorId"]}/enrollments/${p["enrollmentId"]}`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  updateEnrollment(p: {
    authenticatorId: string
    enrollmentId: string
    requestBody: t_UpdateAuthenticatorEnrollmentRequest
  }): Observable<
    | (HttpResponse<t_AuthenticatorEnrollment> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/merge-patch+json;okta-version=1.0.0",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/idp/myaccount/authenticators/${p["authenticatorId"]}/enrollments/${p["enrollmentId"]}`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  listEmails(): Observable<
    | (HttpResponse<t_Email[]> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/idp/myaccount/emails`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  createEmail(p: {
    requestBody: {
      profile: {
        email: string
      }
      role?: "PRIMARY" | "SECONDARY" | UnknownEnumStringValue
      sendEmail?: boolean
      state?: string
    }
  }): Observable<
    | (HttpResponse<t_Email> & {status: 201})
    | (HttpResponse<t_Error> & {status: 400})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 409})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/json",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/idp/myaccount/emails`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getEmail(p: {
    id: string
  }): Observable<
    | (HttpResponse<t_Email> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/idp/myaccount/emails/${p["id"]}`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteEmail(p: {
    id: string
  }): Observable<
    | (HttpResponse<void> & {status: 204})
    | (HttpResponse<t_Error> & {status: 400})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/idp/myaccount/emails/${p["id"]}`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  sendEmailChallenge(p: {
    id: string
    requestBody: {
      state: string
    }
  }): Observable<
    | (HttpResponse<{
        _links: {
          poll: {
            hints: {
              allow: ("GET" | UnknownEnumStringValue)[]
            }
            href: string
          }
          verify: {
            hints: {
              allow: ("POST" | UnknownEnumStringValue)[]
            }
            href: string
          }
        }
        expiresAt: string
        id: string
        profile: {
          email: string
        }
        status: "VERIFIED" | "UNVERIFIED" | UnknownEnumStringValue
      }> & {status: 201})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/json",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/idp/myaccount/emails/${p["id"]}/challenge`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  pollChallengeForEmailMagicLink(p: {
    id: string
    challengeId: string
  }): Observable<
    | (HttpResponse<{
        _links: {
          poll: {
            hints: {
              allow: (
                | "DELETE"
                | "GET"
                | "POST"
                | "PUT"
                | UnknownEnumStringValue
              )[]
            }
            href: string
          }
          verify: {
            hints: {
              allow: (
                | "DELETE"
                | "GET"
                | "POST"
                | "PUT"
                | UnknownEnumStringValue
              )[]
            }
            href: string
          }
        }
        expiresAt: string
        id: string
        profile: {
          email: string
        }
        status: "VERIFIED" | "UNVERIFIED" | UnknownEnumStringValue
      }> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/idp/myaccount/emails/${p["id"]}/challenge/${p["challengeId"]}`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  verifyEmailOtp(p: {
    id: string
    challengeId: string
    requestBody: {
      verificationCode: string
    }
  }): Observable<
    | (HttpResponse<void> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/json",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/idp/myaccount/emails/${p["id"]}/challenge/${p["challengeId"]}/verify`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  listOktaApplications(): Observable<
    | (HttpResponse<t_OktaApplication[]> & {status: 200})
    | (HttpResponse<t_Error> & {status: 400})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/idp/myaccount/okta-applications`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getOrganization(): Observable<
    | (HttpResponse<t_Organization> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/idp/myaccount/organization`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPassword(): Observable<
    | (HttpResponse<t_PasswordResponse> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/idp/myaccount/password`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  createPassword(p: {
    requestBody: {
      profile: {
        password: string
      }
    }
  }): Observable<
    | (HttpResponse<t_PasswordResponse> & {status: 201})
    | (HttpResponse<t_Error> & {status: 400})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/json",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/idp/myaccount/password`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  replacePassword(p: {
    requestBody: {
      profile: {
        password: string
      }
    }
  }): Observable<
    | (HttpResponse<t_PasswordResponse> & {status: 201})
    | (HttpResponse<t_Error> & {status: 400})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/json",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/idp/myaccount/password`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deletePassword(): Observable<
    | (HttpResponse<void> & {status: 204})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/idp/myaccount/password`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  listPhones(): Observable<
    | (HttpResponse<t_Phone[]> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/idp/myaccount/phones`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  createPhone(p: {
    requestBody: {
      method?: "SMS" | "CALL" | UnknownEnumStringValue
      profile: {
        phoneNumber?: string
      }
      sendCode?: boolean
    }
  }): Observable<
    | (HttpResponse<t_Phone> & {status: 201})
    | (HttpResponse<t_Error> & {status: 400})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 409})
    | (HttpResponse<t_Error> & {status: 500})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/json",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/idp/myaccount/phones`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getPhone(p: {
    id: string
  }): Observable<
    | (HttpResponse<t_Phone> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/idp/myaccount/phones/${p["id"]}`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deletePhone(p: {
    id: string
  }): Observable<
    | (HttpResponse<void> & {status: 204})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/idp/myaccount/phones/${p["id"]}`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  sendPhoneChallenge(p: {
    id: string
    requestBody: {
      method: "SMS" | "CALL" | UnknownEnumStringValue
      retry?: boolean
    }
  }): Observable<
    | (HttpResponse<{
        _links?: {
          verify?: {
            hints: {
              allow: ("GET" | UnknownEnumStringValue)[]
            }
            href: string
          }
        }
      }> & {status: 200})
    | (HttpResponse<t_Error> & {status: 400})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | (HttpResponse<t_Error> & {status: 500})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/json",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/idp/myaccount/phones/${p["id"]}/challenge`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  verifyPhoneChallenge(p: {
    id: string
    requestBody: {
      verificationCode: string
    }
  }): Observable<
    | (HttpResponse<void> & {status: 204})
    | (HttpResponse<t_Error> & {status: 400})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 403})
    | (HttpResponse<t_Error> & {status: 404})
    | (HttpResponse<t_Error> & {status: 409})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/json",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/idp/myaccount/phones/${p["id"]}/verify`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getProfile(): Observable<
    | (HttpResponse<t_Profile> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/idp/myaccount/profile`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  replaceProfile(p: {
    requestBody: {
      profile?: EmptyObject
    }
  }): Observable<
    | (HttpResponse<t_Profile> & {status: 200})
    | (HttpResponse<t_Error> & {status: 400})
    | (HttpResponse<t_Error> & {status: 401})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      Accept: "application/json",
      "Content-Type": "application/json",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/idp/myaccount/profile`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getProfileSchema(): Observable<
    | (HttpResponse<t_Schema> & {status: 200})
    | (HttpResponse<t_Error> & {status: 401})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/idp/myaccount/profile/schema`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteSessions(): Observable<
    | (HttpResponse<void> & {status: 204})
    | (HttpResponse<t_Error> & {status: 401})
    | (HttpResponse<t_Error> & {status: 404})
    | HttpResponse<unknown>
  > {
    const headers = this._headers({Accept: "application/json"})

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/idp/myaccount/sessions`,
      {
        headers,
        observe: "response",
        reportProgress: false,
      },
    )
  }
}

export {MyAccountManagementService as ApiClient}
export {MyAccountManagementServiceConfig as ApiClientConfig}
