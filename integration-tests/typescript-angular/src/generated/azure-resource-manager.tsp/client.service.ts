/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_Azure_Core_uuid,
  t_Azure_ResourceManager_CommonTypes_ErrorResponse,
  t_Employee,
  t_EmployeeListResult,
  t_EmployeeUpdate,
  t_MoveRequest,
  t_MoveResponse,
  t_OperationListResult,
} from "./models"
import { HttpClient, HttpParams, HttpResponse } from "@angular/common/http"
import { Injectable } from "@angular/core"
import { Observable } from "rxjs"

export class ContosoProviderHubClientServiceServers {
  static default(): Server<"ContosoProviderHubClientService"> {
    return ContosoProviderHubClientServiceServers.server().build()
  }

  static server(
    url: "https://management.azure.com" = "https://management.azure.com",
  ): { build: () => Server<"ContosoProviderHubClientService"> } {
    switch (url) {
      case "https://management.azure.com":
        return {
          build(): Server<"ContosoProviderHubClientService"> {
            return "https://management.azure.com" as Server<"ContosoProviderHubClientService">
          },
        }

      default:
        throw new Error(`no matching server for url '${url}'`)
    }
  }

  static custom(url: string): Server<"custom_ContosoProviderHubClientService"> {
    return url as Server<"custom_ContosoProviderHubClientService">
  }
}

export class ContosoProviderHubClientServiceConfig {
  basePath:
    | Server<"ContosoProviderHubClientService">
    | Server<"custom_ContosoProviderHubClientService"> =
    ContosoProviderHubClientServiceServers.default()
  defaultHeaders: Record<string, string> = {}
}

// from https://stackoverflow.com/questions/39494689/is-it-possible-to-restrict-number-to-a-certain-range
type Enumerate<
  N extends number,
  Acc extends number[] = [],
> = Acc["length"] extends N
  ? Acc[number]
  : Enumerate<N, [...Acc, Acc["length"]]>

type IntRange<F extends number, T extends number> = F extends T
  ? F
  : Exclude<Enumerate<T>, Enumerate<F>> extends never
    ? never
    : Exclude<Enumerate<T>, Enumerate<F>> | T

export type StatusCode1xx = IntRange<100, 199>
export type StatusCode2xx = IntRange<200, 299>
export type StatusCode3xx = IntRange<300, 399>
export type StatusCode4xx = IntRange<400, 499>
export type StatusCode5xx = IntRange<500, 599>
export type StatusCode =
  | StatusCode1xx
  | StatusCode2xx
  | StatusCode3xx
  | StatusCode4xx
  | StatusCode5xx

export type QueryParams = {
  [name: string]:
    | string
    | number
    | boolean
    | string[]
    | undefined
    | null
    | QueryParams
    | QueryParams[]
}

export type Server<T> = string & { __server__: T }

@Injectable({
  providedIn: "root",
})
export class ContosoProviderHubClientService {
  constructor(
    private readonly httpClient: HttpClient,
    private readonly config: ContosoProviderHubClientServiceConfig,
  ) {}

  private _headers(
    headers: Record<string, string | undefined>,
  ): Record<string, string> {
    return Object.fromEntries(
      Object.entries({ ...this.config.defaultHeaders, ...headers }).filter(
        (it): it is [string, string] => it[1] !== undefined,
      ),
    )
  }

  private _queryParams(queryParams: QueryParams): HttpParams {
    return Object.entries(queryParams).reduce((result, [name, value]) => {
      if (
        typeof value === "string" ||
        typeof value === "boolean" ||
        typeof value === "number"
      ) {
        return result.set(name, value)
      } else if (value === null || value === undefined) {
        return result
      }
      throw new Error(
        `query parameter '${name}' with value '${value}' is not yet supported`,
      )
    }, new HttpParams())
  }

  operationsList(p: {
    apiVersion: string
  }): Observable<
    | (HttpResponse<t_OperationListResult> & { status: 200 })
    | (HttpResponse<t_Azure_ResourceManager_CommonTypes_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/providers/Microsoft.ContosoProviderHub/operations`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  employeesGet(p: {
    apiVersion: string
    subscriptionId: t_Azure_Core_uuid
    resourceGroupName: string
    employeeName: string
  }): Observable<
    | (HttpResponse<t_Employee> & { status: 200 })
    | (HttpResponse<t_Azure_ResourceManager_CommonTypes_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees/${p["employeeName"]}`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  employeesCreateOrUpdate(p: {
    apiVersion: string
    subscriptionId: t_Azure_Core_uuid
    resourceGroupName: string
    employeeName: string
    requestBody: t_Employee
  }): Observable<
    | (HttpResponse<t_Employee> & { status: 200 })
    | (HttpResponse<t_Employee> & { status: 201 })
    | (HttpResponse<t_Azure_ResourceManager_CommonTypes_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const params = this._queryParams({ "api-version": p["apiVersion"] })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees/${p["employeeName"]}`,
      {
        params,
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  employeesUpdate(p: {
    apiVersion: string
    subscriptionId: t_Azure_Core_uuid
    resourceGroupName: string
    employeeName: string
    requestBody: t_EmployeeUpdate
  }): Observable<
    | (HttpResponse<t_Employee> & { status: 200 })
    | (HttpResponse<t_Azure_ResourceManager_CommonTypes_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const params = this._queryParams({ "api-version": p["apiVersion"] })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees/${p["employeeName"]}`,
      {
        params,
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  employeesDelete(p: {
    apiVersion: string
    subscriptionId: t_Azure_Core_uuid
    resourceGroupName: string
    employeeName: string
  }): Observable<
    | (HttpResponse<void> & { status: 202 })
    | (HttpResponse<void> & { status: 204 })
    | (HttpResponse<t_Azure_ResourceManager_CommonTypes_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees/${p["employeeName"]}`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  employeesCheckExistence(p: {
    apiVersion: string
    subscriptionId: t_Azure_Core_uuid
    resourceGroupName: string
    employeeName: string
  }): Observable<
    | (HttpResponse<void> & { status: 204 })
    | (HttpResponse<void> & { status: 404 })
    | (HttpResponse<t_Azure_ResourceManager_CommonTypes_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "HEAD",
      this.config.basePath +
        `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees/${p["employeeName"]}`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  employeesListByResourceGroup(p: {
    apiVersion: string
    subscriptionId: t_Azure_Core_uuid
    resourceGroupName: string
  }): Observable<
    | (HttpResponse<t_EmployeeListResult> & { status: 200 })
    | (HttpResponse<t_Azure_ResourceManager_CommonTypes_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  employeesListBySubscription(p: {
    apiVersion: string
    subscriptionId: t_Azure_Core_uuid
  }): Observable<
    | (HttpResponse<t_EmployeeListResult> & { status: 200 })
    | (HttpResponse<t_Azure_ResourceManager_CommonTypes_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ "api-version": p["apiVersion"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/subscriptions/${p["subscriptionId"]}/providers/Microsoft.ContosoProviderHub/employees`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  employeesMove(p: {
    apiVersion: string
    subscriptionId: t_Azure_Core_uuid
    resourceGroupName: string
    employeeName: string
    requestBody: t_MoveRequest
  }): Observable<
    | (HttpResponse<t_MoveResponse> & { status: 200 })
    | (HttpResponse<t_Azure_ResourceManager_CommonTypes_ErrorResponse> & {
        status: StatusCode
      })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const params = this._queryParams({ "api-version": p["apiVersion"] })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/subscriptions/${p["subscriptionId"]}/resourceGroups/${p["resourceGroupName"]}/providers/Microsoft.ContosoProviderHub/employees/${p["employeeName"]}/move`,
      {
        params,
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }
}

export { ContosoProviderHubClientService as ApiClient }
export { ContosoProviderHubClientServiceConfig as ApiClientConfig }
