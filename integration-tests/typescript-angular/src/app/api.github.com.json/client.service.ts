/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import { HttpClient, HttpHeaders, HttpParams } from "@angular/common/http"
import { Injectable } from "@angular/core"
import { Observable } from "rxjs"

export class ApiClientConfig {
  basePath: string = ""
  defaultHeaders: Record<string, string> = {}
}

export interface Res<StatusCode, Body> {
  status: StatusCode
  body: Body
}

@Injectable({
  providedIn: "root",
})
export class ApiClient {
  constructor(
    private readonly httpClient: HttpClient,
    private readonly config: ApiClientConfig
  ) {}

  private headers(
    headers: Record<string, string | undefined>
  ): Record<string, string> {
    return Object.fromEntries(
      Object.entries({ ...this.config.defaultHeaders, ...headers }).filter(
        (it): it is [string, string] => it[1] !== undefined
      )
    )
  }

  private queryParams(
    queryParams: Record<string, boolean | number | string | undefined | null>
  ): HttpParams {
    const result = new HttpParams()
    Object.entries(queryParams).forEach(([name, value]) => {
      if (value !== undefined && value !== null) {
        result.set(name, String(value))
      }
    })
    return result
  }

  appsGetAuthenticated(p: { accept: string }): Observable<{
    created_at?: string
    description?: string
    events?: string[]
    external_url?: string
    html_url?: string
    id?: number
    installations_count?: number
    name?: string
    node_id?: string
    owner?: {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }
    permissions?: {
      contents?: string
      issues?: string
      metadata?: string
      single_file?: string
    }
    slug?: string
    updated_at?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>("GET", this.config.basePath + `/app`, {
      params: this.queryParams(queryParameters),
      headers: this.headers(headers),

      observe: "body",
      reportProgress: false,
    })
  }

  appsCreateFromManifest(p: { accept?: string; code: string }): Observable<{
    client_id?: string
    client_secret?: string
    created_at?: string
    description?: string
    external_url?: string
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    pem?: string
    updated_at?: string
    webhook_secret?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/app-manifests/${p["code"]}/conversions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListInstallations(p: {
    accept: string
    perPage?: number
    page?: number
  }): Observable<
    {
      access_tokens_url?: string
      account?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      app_id?: number
      events?: string[]
      html_url?: string
      id?: number
      permissions?: {
        checks?: string
        contents?: string
        metadata?: string
      }
      repositories_url?: string
      repository_selection?: "all" | "selected"
      single_file_name?: string
      target_id?: number
      target_type?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/app/installations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetInstallation(p: {
    accept: string
    installationId: number
  }): Observable<{
    access_tokens_url?: string
    account?: {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }
    app_id?: number
    events?: string[]
    html_url?: string
    id?: number
    permissions?: {
      checks?: string
      contents?: string
      metadata?: string
    }
    repositories_url?: string
    repository_selection?: "all" | "selected"
    single_file_name?: string
    target_id?: number
    target_type?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/app/installations/${p["installationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsDeleteInstallation(p: {
    accept: string
    installationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/app/installations/${p["installationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsCreateInstallationAccessToken(p: {
    accept: string
    installationId: number
    requestBody: {
      permissions?: {
        [key: string]: unknown
      }
      repository_ids?: number[]
    }
  }): Observable<{
    expires_at?: string
    permissions?: {
      contents?: string
      issues?: string
    }
    repositories?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
    repository_selection?: "all" | "selected"
    token?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/app/installations/${p["installationId"]}/access_tokens`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsSuspendInstallation(p: {
    accept?: string
    installationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/app/installations/${p["installationId"]}/suspended`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsUnsuspendInstallation(p: {
    accept?: string
    installationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/app/installations/${p["installationId"]}/suspended`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  oauthAuthorizationsListGrants(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      app?: {
        client_id?: string
        name?: string
        url?: string
      }
      created_at?: string
      id?: number
      scopes?: string[]
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/applications/grants`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  oauthAuthorizationsGetGrant(p: {
    accept?: string
    grantId: number
  }): Observable<{
    app?: {
      client_id?: string
      name?: string
      url?: string
    }
    created_at?: string
    id?: number
    scopes?: string[]
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/applications/grants/${p["grantId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  oauthAuthorizationsDeleteGrant(p: {
    accept?: string
    grantId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/applications/grants/${p["grantId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsDeleteAuthorization(p: {
    accept?: string
    clientId: string
    requestBody: {
      access_token?: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/applications/${p["clientId"]}/grant`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsRevokeGrantForApplication(p: {
    accept?: string
    clientId: string
    accessToken: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/applications/${p["clientId"]}/grants/${p["accessToken"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsCheckToken(p: {
    accept?: string
    clientId: string
    requestBody: {
      access_token?: string
    }
  }): Observable<{
    app?: {
      client_id?: string
      name?: string
      url?: string
    }
    created_at?: string
    fingerprint?: string
    hashed_token?: string
    id?: number
    note?: string
    note_url?: string
    scopes?: string[]
    token?: string
    token_last_eight?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/applications/${p["clientId"]}/token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsResetToken(p: {
    accept?: string
    clientId: string
    requestBody: {
      access_token?: string
    }
  }): Observable<{
    app?: {
      client_id?: string
      name?: string
      url?: string
    }
    created_at?: string
    fingerprint?: string
    hashed_token?: string
    id?: number
    note?: string
    note_url?: string
    scopes?: string[]
    token?: string
    token_last_eight?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/applications/${p["clientId"]}/token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsDeleteToken(p: {
    accept?: string
    clientId: string
    requestBody: {
      access_token?: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/applications/${p["clientId"]}/token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsCheckAuthorization(p: {
    accept?: string
    clientId: string
    accessToken: string
  }): Observable<{
    app?: {
      client_id?: string
      name?: string
      url?: string
    }
    created_at?: string
    fingerprint?: string
    hashed_token?: string
    id?: number
    note?: string
    note_url?: string
    scopes?: string[]
    token?: string
    token_last_eight?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/applications/${p["clientId"]}/tokens/${p["accessToken"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsResetAuthorization(p: {
    accept?: string
    clientId: string
    accessToken: string
  }): Observable<{
    app?: {
      client_id?: string
      name?: string
      url?: string
    }
    created_at?: string
    fingerprint?: string
    hashed_token?: string
    id?: number
    note?: string
    note_url?: string
    scopes?: string[]
    token?: string
    token_last_eight?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/applications/${p["clientId"]}/tokens/${p["accessToken"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsRevokeAuthorizationForApplication(p: {
    accept?: string
    clientId: string
    accessToken: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/applications/${p["clientId"]}/tokens/${p["accessToken"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetBySlug(p: { accept: string; appSlug: string }): Observable<{
    created_at?: string
    description?: string
    events?: string[]
    external_url?: string
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    owner?: {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }
    permissions?: {
      contents?: string
      issues?: string
      metadata?: string
      single_file?: string
    }
    slug?: string
    updated_at?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/apps/${p["appSlug"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  oauthAuthorizationsListAuthorizations(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      app?: {
        client_id?: string
        name?: string
        url?: string
      }
      created_at?: string
      fingerprint?: string
      hashed_token?: string
      id?: number
      note?: string
      note_url?: string
      scopes?: string[]
      token?: string
      token_last_eight?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/authorizations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  oauthAuthorizationsCreateAuthorization(p: {
    accept?: string
    requestBody: {
      client_id?: string
      client_secret?: string
      fingerprint?: string
      note: string
      note_url?: string
      scopes?: string[]
    }
  }): Observable<{
    app?: {
      client_id?: string
      name?: string
      url?: string
    }
    created_at?: string
    fingerprint?: string
    hashed_token?: string
    id?: number
    note?: string
    note_url?: string
    scopes?: string[]
    token?: string
    token_last_eight?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/authorizations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  oauthAuthorizationsGetOrCreateAuthorizationForApp(p: {
    accept?: string
    clientId: string
    requestBody: {
      client_secret: string
      fingerprint?: string
      note?: string
      note_url?: string
      scopes?: string[]
    }
  }): Observable<
    | {
        app?: {
          client_id?: string
          name?: string
          url?: string
        }
        created_at?: string
        fingerprint?: string
        hashed_token?: string
        id?: number
        note?: string
        note_url?: string
        scopes?: string[]
        token?: string
        token_last_eight?: string
        updated_at?: string
        url?: string
      }
    | {
        app?: {
          client_id?: string
          name?: string
          url?: string
        }
        created_at?: string
        fingerprint?: string
        hashed_token?: string
        id?: number
        note?: string
        note_url?: string
        scopes?: string[]
        token?: string
        token_last_eight?: string
        updated_at?: string
        url?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/authorizations/clients/${p["clientId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint(p: {
    accept?: string
    clientId: string
    fingerprint: string
    requestBody: {
      client_secret: string
      note?: string
      note_url?: string
      scopes?: string[]
    }
  }): Observable<
    | {
        app?: {
          client_id?: string
          name?: string
          url?: string
        }
        created_at?: string
        fingerprint?: string
        hashed_token?: string
        id?: number
        note?: string
        note_url?: string
        scopes?: string[]
        token?: string
        token_last_eight?: string
        updated_at?: string
        url?: string
      }
    | {
        app?: {
          client_id?: string
          name?: string
          url?: string
        }
        created_at?: string
        fingerprint?: string
        hashed_token?: string
        id?: number
        note?: string
        note_url?: string
        scopes?: string[]
        token?: string
        token_last_eight?: string
        updated_at?: string
        url?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/authorizations/clients/${p["clientId"]}/${p["fingerprint"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  oauthAuthorizationsGetAuthorization(p: {
    accept?: string
    authorizationId: number
  }): Observable<{
    app?: {
      client_id?: string
      name?: string
      url?: string
    }
    created_at?: string
    fingerprint?: string
    hashed_token?: string
    id?: number
    note?: string
    note_url?: string
    scopes?: string[]
    token?: string
    token_last_eight?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/authorizations/${p["authorizationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  oauthAuthorizationsUpdateAuthorization(p: {
    accept?: string
    authorizationId: number
    requestBody: {
      add_scopes?: string[]
      fingerprint?: string
      note?: string
      note_url?: string
      remove_scopes?: string[]
      scopes?: string[]
    }
  }): Observable<{
    app?: {
      client_id?: string
      name?: string
      url?: string
    }
    created_at?: string
    fingerprint?: string
    hashed_token?: string
    id?: number
    note?: string
    note_url?: string
    scopes?: string[]
    token?: string
    token_last_eight?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/authorizations/${p["authorizationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  oauthAuthorizationsDeleteAuthorization(p: {
    accept?: string
    authorizationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/authorizations/${p["authorizationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codesOfConductGetAllCodesOfConduct(p: { accept: string }): Observable<
    {
      key?: string
      name?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/codes_of_conduct`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codesOfConductGetConductCode(p: { accept: string; key: string }): Observable<{
    body?: string
    key?: string
    name?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/codes_of_conduct/${p["key"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsCreateContentAttachment(p: {
    accept: string
    contentReferenceId: number
    requestBody: {
      body: string
      title: string
    }
  }): Observable<{
    body?: string
    id?: number
    title?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/content_references/${p["contentReferenceId"]}/attachments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  emojisGet(p: { accept?: string }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/emojis`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListPublicEvents(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityGetFeeds(p: { accept?: string }): Observable<{
    _links?: {
      current_user?: {
        href?: string
        type?: string
      }
      current_user_actor?: {
        href?: string
        type?: string
      }
      current_user_organization?: {
        href?: string
        type?: string
      }
      current_user_organizations?: {
        href?: string
        type?: string
      }[]
      current_user_public?: {
        href?: string
        type?: string
      }
      security_advisories?: {
        href?: string
        type?: string
      }
      timeline?: {
        href?: string
        type?: string
      }
      user?: {
        href?: string
        type?: string
      }
    }
    current_user_actor_url?: string
    current_user_organization_url?: string
    current_user_organization_urls?: string[]
    current_user_public_url?: string
    current_user_url?: string
    security_advisories_url?: string
    timeline_url?: string
    user_url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/feeds`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsList(p: {
    accept?: string
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      comments?: number
      comments_url?: string
      commits_url?: string
      created_at?: string
      description?: string
      files?: {
        [key: string]: unknown
      }
      forks_url?: string
      git_pull_url?: string
      git_push_url?: string
      html_url?: string
      id?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      public?: boolean
      truncated?: boolean
      updated_at?: string
      url?: string
      user?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsCreate(p: {
    accept?: string
    requestBody: {
      description?: string
      files: {
        [key: string]: unknown
      }
      public?: boolean
    }
  }): Observable<{
    comments?: number
    comments_url?: string
    commits_url?: string
    created_at?: string
    description?: string
    files?: {
      [key: string]: unknown
    }
    forks?: {
      created_at?: string
      id?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
    forks_url?: string
    git_pull_url?: string
    git_push_url?: string
    history?: {
      change_status?: {
        additions?: number
        deletions?: number
        total?: number
      }
      committed_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      version?: string
    }[]
    html_url?: string
    id?: string
    node_id?: string
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    public?: boolean
    truncated?: boolean
    updated_at?: string
    url?: string
    user?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/gists`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListPublic(p: {
    accept?: string
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      comments?: number
      comments_url?: string
      commits_url?: string
      created_at?: string
      description?: string
      files?: {
        [key: string]: unknown
      }
      forks_url?: string
      git_pull_url?: string
      git_push_url?: string
      html_url?: string
      id?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      public?: boolean
      truncated?: boolean
      updated_at?: string
      url?: string
      user?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/public`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListStarred(p: {
    accept?: string
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      comments?: number
      comments_url?: string
      commits_url?: string
      created_at?: string
      description?: string
      files?: {
        [key: string]: unknown
      }
      forks_url?: string
      git_pull_url?: string
      git_push_url?: string
      html_url?: string
      id?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      public?: boolean
      truncated?: boolean
      updated_at?: string
      url?: string
      user?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/starred`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsGet(p: { accept?: string; gistId: string }): Observable<{
    comments?: number
    comments_url?: string
    commits_url?: string
    created_at?: string
    description?: string
    files?: {
      [key: string]: unknown
    }
    forks?: {
      created_at?: string
      id?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
    forks_url?: string
    git_pull_url?: string
    git_push_url?: string
    history?: {
      change_status?: {
        additions?: number
        deletions?: number
        total?: number
      }
      committed_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      version?: string
    }[]
    html_url?: string
    id?: string
    node_id?: string
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    public?: boolean
    truncated?: boolean
    updated_at?: string
    url?: string
    user?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsUpdate(p: {
    accept?: string
    gistId: string
    requestBody: {
      description?: string
      files?: {
        [key: string]: unknown
      }
    }
  }): Observable<{
    comments?: number
    comments_url?: string
    commits_url?: string
    created_at?: string
    description?: string
    files?: {
      [key: string]: unknown
    }
    forks?: {
      created_at?: string
      id?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
    forks_url?: string
    git_pull_url?: string
    git_push_url?: string
    history?: {
      change_status?: {
        additions?: number
        deletions?: number
        total?: number
      }
      committed_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      version?: string
    }[]
    html_url?: string
    id?: string
    node_id?: string
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    public?: boolean
    truncated?: boolean
    updated_at?: string
    url?: string
    user?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/gists/${p["gistId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsDelete(p: { accept?: string; gistId: string }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/gists/${p["gistId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListComments(p: {
    accept?: string
    gistId: string
    perPage?: number
    page?: number
  }): Observable<
    {
      body?: string
      created_at?: string
      id?: number
      node_id?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsCreateComment(p: {
    accept?: string
    gistId: string
    requestBody: {
      body: string
    }
  }): Observable<{
    body?: string
    created_at?: string
    id?: number
    node_id?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/gists/${p["gistId"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsGetComment(p: {
    accept?: string
    gistId: string
    commentId: number
  }): Observable<{
    body?: string
    created_at?: string
    id?: number
    node_id?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsUpdateComment(p: {
    accept?: string
    gistId: string
    commentId: number
    requestBody: {
      body: string
    }
  }): Observable<{
    body?: string
    created_at?: string
    id?: number
    node_id?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/gists/${p["gistId"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsDeleteComment(p: {
    accept?: string
    gistId: string
    commentId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/gists/${p["gistId"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListCommits(p: {
    accept?: string
    gistId: string
    perPage?: number
    page?: number
  }): Observable<
    {
      change_status?: {
        additions?: number
        deletions?: number
        total?: number
      }
      committed_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      version?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/commits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsFork(p: { accept?: string; gistId: string }): Observable<{
    comments?: number
    comments_url?: string
    commits_url?: string
    created_at?: string
    description?: string
    files?: {
      [key: string]: unknown
    }
    forks_url?: string
    git_pull_url?: string
    git_push_url?: string
    html_url?: string
    id?: string
    node_id?: string
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    public?: boolean
    truncated?: boolean
    updated_at?: string
    url?: string
    user?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/gists/${p["gistId"]}/forks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListForks(p: {
    accept?: string
    gistId: string
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      id?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/forks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsStar(p: { accept?: string; gistId: string }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/gists/${p["gistId"]}/star`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsUnstar(p: { accept?: string; gistId: string }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/gists/${p["gistId"]}/star`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsCheckIsStarred(p: {
    accept?: string
    gistId: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/star`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsGetRevision(p: {
    accept?: string
    gistId: string
    sha: string
  }): Observable<{
    comments?: number
    comments_url?: string
    commits_url?: string
    created_at?: string
    description?: string
    files?: {
      [key: string]: unknown
    }
    forks?: {
      created_at?: string
      id?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
    forks_url?: string
    git_pull_url?: string
    git_push_url?: string
    history?: {
      change_status?: {
        additions?: number
        deletions?: number
        total?: number
      }
      committed_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      version?: string
    }[]
    html_url?: string
    id?: string
    node_id?: string
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    public?: boolean
    truncated?: boolean
    updated_at?: string
    url?: string
    user?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/${p["sha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitignoreGetAllTemplates(p: { accept?: string }): Observable<string[]> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gitignore/templates`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitignoreGetTemplate(p: { accept?: string; name: string }): Observable<{
    name?: string
    source?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gitignore/templates/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListReposAccessibleToInstallation(p: {
    accept: string
    perPage?: number
    page?: number
  }): Observable<{
    repositories?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/installation/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsRevokeInstallationAccessToken(p: { accept?: string }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/installation/token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesList(p: {
    accept?: string
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all"
    state?: "open" | "closed" | "all"
    labels?: string
    sort?: "created" | "updated" | "comments"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      active_lock_reason?: string
      assignee?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      assignees?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
      body?: string
      closed_at?: string
      comments?: number
      comments_url?: string
      created_at?: string
      events_url?: string
      html_url?: string
      id?: number
      labels?: {
        color?: string
        default?: boolean
        description?: string
        id?: number
        name?: string
        node_id?: string
        url?: string
      }[]
      labels_url?: string
      locked?: boolean
      milestone?: {
        closed_at?: string
        closed_issues?: number
        created_at?: string
        creator?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        description?: string
        due_on?: string
        html_url?: string
        id?: number
        labels_url?: string
        node_id?: string
        number?: number
        open_issues?: number
        state?: string
        title?: string
        updated_at?: string
        url?: string
      }
      node_id?: string
      number?: number
      pull_request?: {
        diff_url?: string
        html_url?: string
        patch_url?: string
        url?: string
      }
      repository?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      repository_url?: string
      state?: string
      title?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  licensesGetAllCommonlyUsed(p: { accept?: string }): Observable<
    {
      key?: string
      name?: string
      node_id?: string
      spdx_id?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/licenses`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  licensesGet(p: { accept?: string; license: string }): Observable<{
    body?: string
    conditions?: string[]
    description?: string
    featured?: boolean
    html_url?: string
    implementation?: string
    key?: string
    limitations?: string[]
    name?: string
    node_id?: string
    permissions?: string[]
    spdx_id?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/licenses/${p["license"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  markdownRender(p: {
    accept?: string
    requestBody: {
      context?: string
      mode?: "markdown" | "gfm"
      text: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/markdown`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  markdownRenderRaw(p: {
    accept?: string
    contentType?: "text/plain; charset=utf-8"
    requestBody: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
      "content-type": p["contentType"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/markdown/raw`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetSubscriptionPlanForAccount(p: {
    accept?: string
    accountId: number
  }): Observable<{
    email?: string
    id?: number
    login?: string
    marketplace_pending_change?: {
      effective_date?: string
      id?: number
      plan?: {
        accounts_url?: string
        bullets?: string[]
        description?: string
        has_free_trial?: boolean
        id?: number
        monthly_price_in_cents?: number
        name?: string
        number?: number
        price_model?: string
        state?: string
        unit_name?: string
        url?: string
        yearly_price_in_cents?: number
      }
      unit_count?: string
    }
    marketplace_purchase?: {
      billing_cycle?: string
      free_trial_ends_on?: string
      next_billing_date?: string
      on_free_trial?: boolean
      plan?: {
        accounts_url?: string
        bullets?: string[]
        description?: string
        has_free_trial?: boolean
        id?: number
        monthly_price_in_cents?: number
        name?: string
        number?: number
        price_model?: string
        state?: string
        unit_name?: string
        url?: string
        yearly_price_in_cents?: number
      }
      unit_count?: string
      updated_at?: string
    }
    organization_billing_email?: string
    type?: string
    url?: string
  } | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/marketplace_listing/accounts/${p["accountId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListPlans(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      accounts_url?: string
      bullets?: string[]
      description?: string
      has_free_trial?: boolean
      id?: number
      monthly_price_in_cents?: number
      name?: string
      number?: number
      price_model?: string
      state?: string
      unit_name?: string
      url?: string
      yearly_price_in_cents?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/marketplace_listing/plans`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListAccountsForPlan(p: {
    accept?: string
    planId: number
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    {
      email?: string
      id?: number
      login?: string
      marketplace_pending_change?: {
        effective_date?: string
        id?: number
        plan?: {
          accounts_url?: string
          bullets?: string[]
          description?: string
          has_free_trial?: boolean
          id?: number
          monthly_price_in_cents?: number
          name?: string
          number?: number
          price_model?: string
          state?: string
          unit_name?: string
          url?: string
          yearly_price_in_cents?: number
        }
        unit_count?: string
      }
      marketplace_purchase?: {
        billing_cycle?: string
        free_trial_ends_on?: string
        next_billing_date?: string
        on_free_trial?: boolean
        plan?: {
          accounts_url?: string
          bullets?: string[]
          description?: string
          has_free_trial?: boolean
          id?: number
          monthly_price_in_cents?: number
          name?: string
          number?: number
          price_model?: string
          state?: string
          unit_name?: string
          url?: string
          yearly_price_in_cents?: number
        }
        unit_count?: string
        updated_at?: string
      }
      organization_billing_email?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/marketplace_listing/plans/${p["planId"]}/accounts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetSubscriptionPlanForAccountStubbed(p: {
    accept?: string
    accountId: number
  }): Observable<{
    email?: string
    id?: number
    login?: string
    marketplace_pending_change?: {
      effective_date?: string
      id?: number
      plan?: {
        accounts_url?: string
        bullets?: string[]
        description?: string
        has_free_trial?: boolean
        id?: number
        monthly_price_in_cents?: number
        name?: string
        number?: number
        price_model?: string
        state?: string
        unit_name?: string
        url?: string
        yearly_price_in_cents?: number
      }
      unit_count?: string
    }
    marketplace_purchase?: {
      billing_cycle?: string
      free_trial_ends_on?: string
      next_billing_date?: string
      on_free_trial?: boolean
      plan?: {
        accounts_url?: string
        bullets?: string[]
        description?: string
        has_free_trial?: boolean
        id?: number
        monthly_price_in_cents?: number
        name?: string
        number?: number
        price_model?: string
        state?: string
        unit_name?: string
        url?: string
        yearly_price_in_cents?: number
      }
      unit_count?: string
      updated_at?: string
    }
    organization_billing_email?: string
    type?: string
    url?: string
  } | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/marketplace_listing/stubbed/accounts/${p["accountId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListPlansStubbed(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      accounts_url?: string
      bullets?: string[]
      description?: string
      has_free_trial?: boolean
      id?: number
      monthly_price_in_cents?: number
      name?: string
      number?: number
      price_model?: string
      state?: string
      unit_name?: string
      url?: string
      yearly_price_in_cents?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/marketplace_listing/stubbed/plans`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListAccountsForPlanStubbed(p: {
    accept?: string
    planId: number
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    {
      email?: string
      id?: number
      login?: string
      marketplace_pending_change?: {
        effective_date?: string
        id?: number
        plan?: {
          accounts_url?: string
          bullets?: string[]
          description?: string
          has_free_trial?: boolean
          id?: number
          monthly_price_in_cents?: number
          name?: string
          number?: number
          price_model?: string
          state?: string
          unit_name?: string
          url?: string
          yearly_price_in_cents?: number
        }
        unit_count?: string
      }
      marketplace_purchase?: {
        billing_cycle?: string
        free_trial_ends_on?: string
        next_billing_date?: string
        on_free_trial?: boolean
        plan?: {
          accounts_url?: string
          bullets?: string[]
          description?: string
          has_free_trial?: boolean
          id?: number
          monthly_price_in_cents?: number
          name?: string
          number?: number
          price_model?: string
          state?: string
          unit_name?: string
          url?: string
          yearly_price_in_cents?: number
        }
        unit_count?: string
        updated_at?: string
      }
      organization_billing_email?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/marketplace_listing/stubbed/plans/${p["planId"]}/accounts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  metaGet(p: { accept?: string }): Observable<{
    api?: string[]
    git?: string[]
    hooks?: string[]
    importer?: string[]
    pages?: string[]
    ssh_key_fingerprints?: {
      MD5_DSA?: string
      MD5_RSA?: string
      SHA256_DSA?: string
      SHA256_RSA?: string
    }
    verifiable_password_authentication?: boolean
    web?: string[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>("GET", this.config.basePath + `/meta`, {
      params: this.queryParams(queryParameters),
      headers: this.headers(headers),

      observe: "body",
      reportProgress: false,
    })
  }

  activityListPublicEventsForRepoNetwork(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/networks/${p["owner"]}/${p["repo"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListNotificationsForAuthenticatedUser(p: {
    accept?: string
    all?: boolean
    participating?: boolean
    since?: string
    before?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      id?: string
      last_read_at?: string
      reason?: string
      repository?: {
        archive_url?: string
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        deployments_url?: string
        description?: string
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        html_url?: string
        id?: number
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        name?: string
        node_id?: string
        notifications_url?: string
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        private?: boolean
        pulls_url?: string
        releases_url?: string
        ssh_url?: string
        stargazers_url?: string
        statuses_url?: string
        subscribers_url?: string
        subscription_url?: string
        tags_url?: string
        teams_url?: string
        trees_url?: string
        url?: string
      }
      subject?: {
        latest_comment_url?: string
        title?: string
        type?: string
        url?: string
      }
      unread?: boolean
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      all: p["all"],
      participating: p["participating"],
      since: p["since"],
      before: p["before"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/notifications`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityMarkNotificationsAsRead(p: {
    accept?: string
    requestBody: {
      last_read_at?: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/notifications`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityGetThread(p: { accept?: string; threadId: number }): Observable<{
    id?: string
    last_read_at?: string
    reason?: string
    repository?: {
      archive_url?: string
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      deployments_url?: string
      description?: string
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      html_url?: string
      id?: number
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      name?: string
      node_id?: string
      notifications_url?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      private?: boolean
      pulls_url?: string
      releases_url?: string
      ssh_url?: string
      stargazers_url?: string
      statuses_url?: string
      subscribers_url?: string
      subscription_url?: string
      tags_url?: string
      teams_url?: string
      trees_url?: string
      url?: string
    }
    subject?: {
      latest_comment_url?: string
      title?: string
      type?: string
      url?: string
    }
    unread?: boolean
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/notifications/threads/${p["threadId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityMarkThreadAsRead(p: {
    accept?: string
    threadId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/notifications/threads/${p["threadId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityGetThreadSubscriptionForAuthenticatedUser(p: {
    accept?: string
    threadId: number
  }): Observable<{
    created_at?: string
    ignored?: boolean
    reason?: string
    subscribed?: boolean
    thread_url?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/notifications/threads/${p["threadId"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activitySetThreadSubscription(p: {
    accept?: string
    threadId: number
    requestBody: {
      ignored?: boolean
    }
  }): Observable<{
    created_at?: string
    ignored?: boolean
    reason?: string
    subscribed?: boolean
    thread_url?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/notifications/threads/${p["threadId"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityDeleteThreadSubscription(p: {
    accept?: string
    threadId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/notifications/threads/${p["threadId"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsList(p: { accept?: string; since?: number }): Observable<
    {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { since: p["since"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/organizations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsGet(p: { accept?: string; org: string }): Observable<{
    avatar_url?: string
    billing_email?: string
    blog?: string
    collaborators?: number
    company?: string
    created_at?: string
    default_repository_permission?: string
    description?: string
    disk_usage?: number
    email?: string
    events_url?: string
    followers?: number
    following?: number
    has_organization_projects?: boolean
    has_repository_projects?: boolean
    hooks_url?: string
    html_url?: string
    id?: number
    is_verified?: boolean
    issues_url?: string
    location?: string
    login?: string
    members_allowed_repository_creation_type?: string
    members_can_create_internal_repositories?: boolean
    members_can_create_private_repositories?: boolean
    members_can_create_public_repositories?: boolean
    members_can_create_repositories?: boolean
    members_url?: string
    name?: string
    node_id?: string
    owned_private_repos?: number
    plan?: {
      name?: string
      private_repos?: number
      space?: number
    }
    private_gists?: number
    public_gists?: number
    public_members_url?: string
    public_repos?: number
    repos_url?: string
    total_private_repos?: number
    twitter_username?: string
    two_factor_requirement_enabled?: boolean
    type?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsUpdate(p: {
    accept?: string
    org: string
    requestBody: {
      billing_email?: string
      company?: string
      default_repository_permission?: "read" | "write" | "admin" | "none"
      description?: string
      email?: string
      has_organization_projects?: boolean
      has_repository_projects?: boolean
      location?: string
      members_allowed_repository_creation_type?: "all" | "private" | "none"
      members_can_create_internal_repositories?: boolean
      members_can_create_private_repositories?: boolean
      members_can_create_public_repositories?: boolean
      members_can_create_repositories?: boolean
      name?: string
      twitter_username?: string
    }
  }): Observable<{
    avatar_url?: string
    billing_email?: string
    blog?: string
    collaborators?: number
    company?: string
    created_at?: string
    default_repository_permission?: string
    description?: string
    disk_usage?: number
    email?: string
    events_url?: string
    followers?: number
    following?: number
    has_organization_projects?: boolean
    has_repository_projects?: boolean
    hooks_url?: string
    html_url?: string
    id?: number
    is_verified?: boolean
    issues_url?: string
    location?: string
    login?: string
    members_allowed_repository_creation_type?: string
    members_can_create_internal_repositories?: boolean
    members_can_create_private_repositories?: boolean
    members_can_create_public_repositories?: boolean
    members_can_create_repositories?: boolean
    members_url?: string
    name?: string
    node_id?: string
    owned_private_repos?: number
    plan?: {
      name?: string
      private_repos?: number
      space?: number
    }
    private_gists?: number
    public_gists?: number
    public_members_url?: string
    public_repos?: number
    repos_url?: string
    total_private_repos?: number
    twitter_username?: string
    two_factor_requirement_enabled?: boolean
    type?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/orgs/${p["org"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListSelfHostedRunnersForOrg(p: {
    accept?: string
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    runners?: {
      id: number
      name: string
      os: string
      status: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/runners`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRunnerApplicationsForOrg(p: {
    accept?: string
    org: string
  }): Observable<
    {
      architecture?: string
      download_url?: string
      filename?: string
      os?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/runners/downloads`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateRegistrationTokenForOrg(p: {
    accept?: string
    org: string
  }): Observable<{
    expires_at?: string
    token?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runners/registration-token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateRemoveTokenForOrg(p: {
    accept?: string
    org: string
  }): Observable<{
    expires_at?: string
    token?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/actions/runners/remove-token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetSelfHostedRunnerForOrg(p: {
    accept?: string
    org: string
    runnerId: number
  }): Observable<{
    id?: number
    name?: string
    os?: string
    status?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteSelfHostedRunnerFromOrg(p: {
    accept?: string
    org: string
    runnerId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListOrgSecrets(p: {
    accept?: string
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    secrets?: {
      created_at: string
      name: string
      selected_repositories_url?: string
      updated_at: string
      visibility: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/secrets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetOrgPublicKey(p: { accept?: string; org: string }): Observable<{
    key?: string
    key_id?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/secrets/public-key`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetOrgSecret(p: {
    accept?: string
    org: string
    secretName: string
  }): Observable<{
    created_at?: string
    name?: string
    selected_repositories_url?: string
    updated_at?: string
    visibility?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateOrUpdateOrgSecret(p: {
    accept?: string
    org: string
    secretName: string
    requestBody: {
      encrypted_value?: string
      key_id?: string
      selected_repository_ids?: string[]
      visibility?: "all" | "private" | "selected"
    }
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteOrgSecret(p: {
    accept?: string
    org: string
    secretName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListSelectedReposForOrgSecret(p: {
    accept?: string
    org: string
    secretName: string
  }): Observable<{
    repositories?: {
      archive_url?: string
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      deployments_url?: string
      description?: string
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      html_url?: string
      id?: number
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      name?: string
      node_id?: string
      notifications_url?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      private?: boolean
      pulls_url?: string
      releases_url?: string
      ssh_url?: string
      stargazers_url?: string
      statuses_url?: string
      subscribers_url?: string
      subscription_url?: string
      tags_url?: string
      teams_url?: string
      trees_url?: string
      url?: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetSelectedReposForOrgSecret(p: {
    accept?: string
    org: string
    secretName: string
    requestBody: {
      selected_repository_ids?: number[]
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsAddSelectedRepoToOrgSecret(p: {
    accept?: string
    org: string
    secretName: string
    repositoryId: number
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsRemoveSelectedRepoFromOrgSecret(p: {
    accept?: string
    org: string
    secretName: string
    repositoryId: number
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListBlockedUsers(p: { accept?: string; org: string }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/blocks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsCheckBlockedUser(p: {
    accept?: string
    org: string
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsBlockUser(p: {
    accept?: string
    org: string
    username: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/orgs/${p["org"]}/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsUnblockUser(p: {
    accept?: string
    org: string
    username: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListSamlSsoAuthorizations(p: {
    accept?: string
    org: string
  }): Observable<
    {
      credential_authorized_at?: string
      credential_id?: string
      credential_type?: string
      login?: string
      scopes?: string[]
      token_last_eight?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/credential-authorizations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsRemoveSamlSsoAuthorization(p: {
    accept?: string
    org: string
    credentialId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/credential-authorizations/${p["credentialId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListPublicOrgEvents(p: {
    accept?: string
    org: string
    perPage?: number
    page?: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListWebhooks(p: {
    accept?: string
    org: string
    perPage?: number
    page?: number
  }): Observable<
    {
      active?: boolean
      config?: {
        content_type?: string
        url?: string
      }
      created_at?: string
      events?: string[]
      id?: number
      name?: string
      ping_url?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/hooks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsCreateWebhook(p: {
    accept?: string
    org: string
    requestBody: {
      active?: boolean
      config: {
        content_type?: string
        insecure_ssl?: string
        secret?: string
        url: string
      }
      events?: string[]
      name: string
    }
  }): Observable<{
    active?: boolean
    config?: {
      content_type?: string
      url?: string
    }
    created_at?: string
    events?: string[]
    id?: number
    name?: string
    ping_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/hooks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsGetWebhook(p: {
    accept?: string
    org: string
    hookId: number
  }): Observable<{
    active?: boolean
    config?: {
      content_type?: string
      url?: string
    }
    created_at?: string
    events?: string[]
    id?: number
    name?: string
    ping_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsUpdateWebhook(p: {
    accept?: string
    org: string
    hookId: number
    requestBody: {
      active?: boolean
      config?: {
        content_type?: string
        insecure_ssl?: string
        secret?: string
        url: string
      }
      events?: string[]
    }
  }): Observable<{
    active?: boolean
    config?: {
      content_type?: string
      url?: string
    }
    created_at?: string
    events?: string[]
    id?: number
    name?: string
    ping_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsDeleteWebhook(p: {
    accept?: string
    org: string
    hookId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsPingWebhook(p: {
    accept?: string
    org: string
    hookId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}/pings`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetOrgInstallation(p: { accept: string; org: string }): Observable<{
    access_tokens_url?: string
    account?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    app_id?: number
    created_at?: string
    events?: string[]
    html_url?: string
    id?: number
    permissions?: {
      checks?: string
      contents?: string
      metadata?: string
    }
    repositories_url?: string
    repository_selection?: "all" | "selected"
    single_file_name?: string
    target_id?: number
    target_type?: string
    updated_at?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/installation`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListAppInstallations(p: {
    accept: string
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    installations?: {
      access_tokens_url?: string
      account?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      app_id?: number
      created_at?: string
      events?: string[]
      html_url?: string
      id?: number
      permissions?: {
        deployments?: string
        metadata?: string
        pull_requests?: string
        statuses?: string
      }
      repositories_url?: string
      repository_selection?: "all" | "selected"
      single_file_name?: string
      target_id?: number
      target_type?: string
      updated_at?: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/installations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsGetRestrictionsForOrg(p: {
    accept: string
    org: string
  }): Observable<{
    expires_at?: string
    limit?: string
    origin?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsSetRestrictionsForOrg(p: {
    accept: string
    org: string
    requestBody: {
      limit: "existing_users" | "contributors_only" | "collaborators_only"
    }
  }): Observable<{
    expires_at?: string
    limit?: string
    origin?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/orgs/${p["org"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsRemoveRestrictionsForOrg(p: {
    accept: string
    org: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListPendingInvitations(p: {
    accept?: string
    org: string
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      email?: string
      id?: number
      invitation_team_url?: string
      inviter?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      login?: string
      role?: string
      team_count?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsCreateInvitation(p: {
    accept?: string
    org: string
    requestBody: {
      email?: string
      invitee_id?: number
      role?: "admin" | "direct_member" | "billing_manager"
      team_ids?: number[]
    }
  }): Observable<{
    created_at?: string
    email?: string
    id?: number
    invitation_team_url?: string
    inviter?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    login?: string
    role?: string
    team_count?: number
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListInvitationTeams(p: {
    accept?: string
    org: string
    invitationId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/invitations/${p["invitationId"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListForOrg(p: {
    accept?: string
    org: string
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all"
    state?: "open" | "closed" | "all"
    labels?: string
    sort?: "created" | "updated" | "comments"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      active_lock_reason?: string
      assignee?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      assignees?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
      body?: string
      closed_at?: string
      comments?: number
      comments_url?: string
      created_at?: string
      events_url?: string
      html_url?: string
      id?: number
      labels?: {
        color?: string
        default?: boolean
        description?: string
        id?: number
        name?: string
        node_id?: string
        url?: string
      }[]
      labels_url?: string
      locked?: boolean
      milestone?: {
        closed_at?: string
        closed_issues?: number
        created_at?: string
        creator?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        description?: string
        due_on?: string
        html_url?: string
        id?: number
        labels_url?: string
        node_id?: string
        number?: number
        open_issues?: number
        state?: string
        title?: string
        updated_at?: string
        url?: string
      }
      node_id?: string
      number?: number
      pull_request?: {
        diff_url?: string
        html_url?: string
        patch_url?: string
        url?: string
      }
      repository?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      repository_url?: string
      state?: string
      title?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListMembers(p: {
    accept?: string
    org: string
    filter?: "2fa_disabled" | "all"
    role?: "all" | "admin" | "member"
    perPage?: number
    page?: number
  }): Observable<
    | {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
    | void
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      filter: p["filter"],
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/members`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsCheckMembershipForUser(p: {
    accept?: string
    org: string
    username: string
  }): Observable<void | void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsRemoveMember(p: {
    accept?: string
    org: string
    username: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsGetMembershipForUser(p: {
    accept?: string
    org: string
    username: string
  }): Observable<{
    organization?: {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }
    organization_url?: string
    role?: string
    state?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsSetMembershipForUser(p: {
    accept?: string
    org: string
    username: string
    requestBody: {
      role?: "admin" | "member"
    }
  }): Observable<{
    organization?: {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }
    organization_url?: string
    role?: string
    state?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/orgs/${p["org"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsRemoveMembershipForUser(p: {
    accept?: string
    org: string
    username: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsStartForOrg(p: {
    accept?: string
    org: string
    requestBody: {
      exclude_attachments?: boolean
      lock_repositories?: boolean
      repositories: string[]
    }
  }): Observable<{
    created_at?: string
    exclude_attachments?: boolean
    guid?: string
    id?: number
    lock_repositories?: boolean
    owner?: {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }
    repositories?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
    state?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/migrations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsListForOrg(p: {
    accept: string
    org: string
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      exclude_attachments?: boolean
      guid?: string
      id?: number
      lock_repositories?: boolean
      owner?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      repositories?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }[]
      state?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/migrations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetStatusForOrg(p: {
    accept: string
    org: string
    migrationId: number
  }): Observable<{
    created_at?: string
    exclude_attachments?: boolean
    guid?: string
    id?: number
    lock_repositories?: boolean
    owner?: {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }
    repositories?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
    state?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/migrations/${p["migrationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsDownloadArchiveForOrg(p: {
    accept: string
    org: string
    migrationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/migrations/${p["migrationId"]}/archive`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsDeleteArchiveForOrg(p: {
    accept: string
    org: string
    migrationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/migrations/${p["migrationId"]}/archive`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsUnlockRepoForOrg(p: {
    accept: string
    org: string
    migrationId: number
    repoName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/migrations/${p["migrationId"]}/repos/${p["repoName"]}/lock`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsListReposForOrg(p: {
    accept: string
    org: string
    migrationId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      license?: {
        key?: string
        name?: string
        node_id?: string
        spdx_id?: string
        url?: string
      }
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/migrations/${p["migrationId"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListOutsideCollaborators(p: {
    accept?: string
    org: string
    filter?: "2fa_disabled" | "all"
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/outside_collaborators`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsRemoveOutsideCollaborator(p: {
    accept?: string
    org: string
    username: string
  }): Observable<void | {
    documentation_url?: string
    message?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/outside_collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsConvertMemberToOutsideCollaborator(p: {
    accept?: string
    org: string
    username: string
  }): Observable<void | {
    documentation_url?: string
    message?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/outside_collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListForOrg(p: {
    accept: string
    org: string
    state?: "open" | "closed" | "all"
    perPage?: number
    page?: number
  }): Observable<
    {
      body?: string
      columns_url?: string
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      number?: number
      owner_url?: string
      state?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsCreateForOrg(p: {
    accept: string
    org: string
    requestBody: {
      body?: string
      name: string
    }
  }): Observable<{
    body?: string
    columns_url?: string
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    number?: number
    owner_url?: string
    state?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListPublicMembers(p: {
    accept?: string
    org: string
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/public_members`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsCheckPublicMembershipForUser(p: {
    accept?: string
    org: string
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/public_members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsSetPublicMembershipForAuthenticatedUser(p: {
    accept?: string
    org: string
    username: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/public_members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsRemovePublicMembershipForAuthenticatedUser(p: {
    accept?: string
    org: string
    username: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/public_members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListForOrg(p: {
    accept?: string
    org: string
    type?:
      | "all"
      | "public"
      | "private"
      | "forks"
      | "sources"
      | "member"
      | "internal"
    sort?: "created" | "updated" | "pushed" | "full_name"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    {
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      license?: {
        key?: string
        name?: string
        node_id?: string
        spdx_id?: string
        url?: string
      }
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateInOrg(p: {
    accept?: string
    org: string
    requestBody: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      auto_init?: boolean
      delete_branch_on_merge?: boolean
      description?: string
      gitignore_template?: string
      has_issues?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      is_template?: boolean
      license_template?: string
      name: string
      private?: boolean
      team_id?: number
      visibility?: "public" | "private" | "visibility" | "internal"
    }
  }): Observable<{
    allow_merge_commit?: boolean
    allow_rebase_merge?: boolean
    allow_squash_merge?: boolean
    archive_url?: string
    archived?: boolean
    assignees_url?: string
    blobs_url?: string
    branches_url?: string
    clone_url?: string
    collaborators_url?: string
    comments_url?: string
    commits_url?: string
    compare_url?: string
    contents_url?: string
    contributors_url?: string
    created_at?: string
    default_branch?: string
    delete_branch_on_merge?: boolean
    deployments_url?: string
    description?: string
    disabled?: boolean
    downloads_url?: string
    events_url?: string
    fork?: boolean
    forks_count?: number
    forks_url?: string
    full_name?: string
    git_commits_url?: string
    git_refs_url?: string
    git_tags_url?: string
    git_url?: string
    has_downloads?: boolean
    has_issues?: boolean
    has_pages?: boolean
    has_projects?: boolean
    has_wiki?: boolean
    homepage?: string
    hooks_url?: string
    html_url?: string
    id?: number
    is_template?: boolean
    issue_comment_url?: string
    issue_events_url?: string
    issues_url?: string
    keys_url?: string
    labels_url?: string
    language?: string
    languages_url?: string
    merges_url?: string
    milestones_url?: string
    mirror_url?: string
    name?: string
    network_count?: number
    node_id?: string
    notifications_url?: string
    open_issues_count?: number
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    permissions?: {
      admin?: boolean
      pull?: boolean
      push?: boolean
    }
    private?: boolean
    pulls_url?: string
    pushed_at?: string
    releases_url?: string
    size?: number
    ssh_url?: string
    stargazers_count?: number
    stargazers_url?: string
    statuses_url?: string
    subscribers_count?: number
    subscribers_url?: string
    subscription_url?: string
    svn_url?: string
    tags_url?: string
    teams_url?: string
    temp_clone_token?: string
    template_repository?: string
    topics?: string[]
    trees_url?: string
    updated_at?: string
    url?: string
    visibility?: string
    watchers_count?: number
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListIdPGroupsForOrg(p: {
    accept?: string
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    groups?: {
      group_description: string
      group_id: string
      group_name: string
    }[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/team-sync/groups`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsList(p: {
    accept?: string
    org: string
    perPage?: number
    page?: number
  }): Observable<
    {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreate(p: {
    accept?: string
    org: string
    requestBody: {
      description?: string
      maintainers?: string[]
      name: string
      parent_team_id?: number
      permission?: "pull" | "push" | "admin"
      privacy?: "secret" | "closed"
      repo_names?: string[]
    }
  }): Observable<{
    created_at?: string
    description?: string
    html_url?: string
    id?: number
    members_count?: number
    members_url?: string
    name?: string
    node_id?: string
    organization?: {
      avatar_url?: string
      blog?: string
      company?: string
      created_at?: string
      description?: string
      email?: string
      events_url?: string
      followers?: number
      following?: number
      has_organization_projects?: boolean
      has_repository_projects?: boolean
      hooks_url?: string
      html_url?: string
      id?: number
      is_verified?: boolean
      issues_url?: string
      location?: string
      login?: string
      members_url?: string
      name?: string
      node_id?: string
      public_gists?: number
      public_members_url?: string
      public_repos?: number
      repos_url?: string
      twitter_username?: string
      type?: string
      url?: string
    }
    parent?: string
    permission?: string
    privacy?: string
    repos_count?: number
    repositories_url?: string
    slug?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetByName(p: {
    accept?: string
    org: string
    teamSlug: string
  }): Observable<{
    created_at?: string
    description?: string
    html_url?: string
    id?: number
    members_count?: number
    members_url?: string
    name?: string
    node_id?: string
    organization?: {
      avatar_url?: string
      blog?: string
      company?: string
      created_at?: string
      description?: string
      email?: string
      events_url?: string
      followers?: number
      following?: number
      has_organization_projects?: boolean
      has_repository_projects?: boolean
      hooks_url?: string
      html_url?: string
      id?: number
      is_verified?: boolean
      issues_url?: string
      location?: string
      login?: string
      members_url?: string
      name?: string
      node_id?: string
      public_gists?: number
      public_members_url?: string
      public_repos?: number
      repos_url?: string
      twitter_username?: string
      type?: string
      url?: string
    }
    parent?: string
    permission?: string
    privacy?: string
    repos_count?: number
    repositories_url?: string
    slug?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    requestBody: {
      description?: string
      name: string
      parent_team_id?: number
      permission?: "pull" | "push" | "admin"
      privacy?: "secret" | "closed"
    }
  }): Observable<{
    created_at?: string
    description?: string
    html_url?: string
    id?: number
    members_count?: number
    members_url?: string
    name?: string
    node_id?: string
    organization?: {
      avatar_url?: string
      blog?: string
      company?: string
      created_at?: string
      description?: string
      email?: string
      events_url?: string
      followers?: number
      following?: number
      has_organization_projects?: boolean
      has_repository_projects?: boolean
      hooks_url?: string
      html_url?: string
      id?: number
      is_verified?: boolean
      issues_url?: string
      location?: string
      login?: string
      members_url?: string
      name?: string
      node_id?: string
      public_gists?: number
      public_members_url?: string
      public_repos?: number
      repos_url?: string
      twitter_username?: string
      type?: string
      url?: string
    }
    parent?: string
    permission?: string
    privacy?: string
    repos_count?: number
    repositories_url?: string
    slug?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListDiscussionsInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    {
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      body?: string
      body_html?: string
      body_version?: string
      comments_count?: number
      comments_url?: string
      created_at?: string
      html_url?: string
      last_edited_at?: string
      node_id?: string
      number?: number
      pinned?: boolean
      private?: boolean
      reactions?: {
        "+1"?: number
        "-1"?: number
        confused?: number
        heart?: number
        hooray?: number
        laugh?: number
        total_count?: number
        url?: string
      }
      team_url?: string
      title?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreateDiscussionInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    requestBody: {
      body: string
      private?: boolean
      title: string
    }
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    comments_count?: number
    comments_url?: string
    created_at?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    pinned?: boolean
    private?: boolean
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    team_url?: string
    title?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetDiscussionInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    discussionNumber: number
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    comments_count?: number
    comments_url?: string
    created_at?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    pinned?: boolean
    private?: boolean
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    team_url?: string
    title?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateDiscussionInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    discussionNumber: number
    requestBody: {
      body?: string
      title?: string
    }
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    comments_count?: number
    comments_url?: string
    created_at?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    pinned?: boolean
    private?: boolean
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    team_url?: string
    title?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteDiscussionInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    discussionNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListDiscussionCommentsInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    discussionNumber: number
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    {
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      body?: string
      body_html?: string
      body_version?: string
      created_at?: string
      discussion_url?: string
      html_url?: string
      last_edited_at?: string
      node_id?: string
      number?: number
      reactions?: {
        "+1"?: number
        "-1"?: number
        confused?: number
        heart?: number
        hooray?: number
        laugh?: number
        total_count?: number
        url?: string
      }
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreateDiscussionCommentInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    discussionNumber: number
    requestBody: {
      body: string
    }
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    created_at?: string
    discussion_url?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetDiscussionCommentInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    created_at?: string
    discussion_url?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateDiscussionCommentInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
    requestBody: {
      body: string
    }
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    created_at?: string
    discussion_url?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteDiscussionCommentInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForTeamDiscussionCommentInOrg(p: {
    accept: string
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<
    {
      content?: string
      created_at?: string
      id?: number
      node_id?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForTeamDiscussionCommentInOrg(p: {
    accept: string
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<{
    content?: string
    created_at?: string
    id?: number
    node_id?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForTeamDiscussionComment(p: {
    accept: string
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForTeamDiscussionInOrg(p: {
    accept: string
    org: string
    teamSlug: string
    discussionNumber: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<
    {
      content?: string
      created_at?: string
      id?: number
      node_id?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForTeamDiscussionInOrg(p: {
    accept: string
    org: string
    teamSlug: string
    discussionNumber: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<{
    content?: string
    created_at?: string
    id?: number
    node_id?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForTeamDiscussion(p: {
    accept: string
    org: string
    teamSlug: string
    discussionNumber: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListPendingInvitationsInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      email?: string
      id?: number
      invitation_team_url?: string
      inviter?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      login?: string
      role?: string
      team_count?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListMembersInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    role?: "member" | "maintainer" | "all"
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/members`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetMembershipForUserInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    username: string
  }): Observable<{
    role?: string
    state?: string
    url?: string
  } | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateMembershipForUserInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    username: string
    requestBody: {
      role?: "member" | "maintainer"
    }
  }): Observable<
    | {
        role?: string
        state?: string
        url?: string
      }
    | void
    | {
        errors?: {
          code?: string
          field?: string
          resource?: string
        }[]
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveMembershipForUserInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListProjectsInOrg(p: {
    accept: string
    org: string
    teamSlug: string
    perPage?: number
    page?: number
  }): Observable<
    {
      body?: string
      columns_url?: string
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      number?: number
      organization_permission?: string
      owner_url?: string
      permissions?: {
        admin?: boolean
        read?: boolean
        write?: boolean
      }
      private?: boolean
      state?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCheckPermissionsForProjectInOrg(p: {
    accept: string
    org: string
    teamSlug: string
    projectId: number
  }): Observable<{
    body?: string
    columns_url?: string
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    number?: number
    organization_permission?: string
    owner_url?: string
    permissions?: {
      admin?: boolean
      read?: boolean
      write?: boolean
    }
    private?: boolean
    state?: string
    updated_at?: string
    url?: string
  } | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateProjectPermissionsInOrg(p: {
    accept: string
    org: string
    teamSlug: string
    projectId: number
    requestBody: {
      permission?: "read" | "write" | "admin"
    }
  }): Observable<void | {
    documentation_url?: string
    message?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveProjectInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    projectId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListReposInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    perPage?: number
    page?: number
  }): Observable<
    {
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      license?: {
        key?: string
        name?: string
        node_id?: string
        spdx_id?: string
        url?: string
      }
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCheckPermissionsForRepoInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    owner: string
    repo: string
  }): Observable<{
    organization?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    parent?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
    permissions?: {
      admin?: boolean
      maintain?: boolean
      pull?: boolean
      push?: boolean
      triage?: boolean
    }
    source?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
  } | void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateRepoPermissionsInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    owner: string
    repo: string
    requestBody: {
      permission?: "pull" | "push" | "admin" | "maintain" | "triage"
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveRepoInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListIdPGroupsInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
  }): Observable<{
    groups?: {
      group_description: string
      group_id: string
      group_name: string
    }[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/team-sync/group-mappings`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreateOrUpdateIdPGroupConnectionsInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    requestBody: {
      groups: {
        group_description: string
        group_id: string
        group_name: string
      }[]
    }
  }): Observable<{
    groups?: {
      group_description?: string
      group_id?: string
      group_name?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/team-sync/group-mappings`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListChildInOrg(p: {
    accept?: string
    org: string
    teamSlug: string
    perPage?: number
    page?: number
  }): Observable<
    {
      description?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: {
        description?: string
        html_url?: string
        id?: number
        members_url?: string
        name?: string
        node_id?: string
        permission?: string
        privacy?: string
        repositories_url?: string
        slug?: string
        url?: string
      }
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsGetCard(p: { accept: string; cardId: number }): Observable<{
    archived?: boolean
    column_url?: string
    content_url?: string
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    id?: number
    node_id?: string
    note?: string
    project_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/columns/cards/${p["cardId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsUpdateCard(p: {
    accept: string
    cardId: number
    requestBody: {
      archived?: boolean
      note?: string
    }
  }): Observable<{
    archived?: boolean
    column_url?: string
    content_url?: string
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    id?: number
    node_id?: string
    note?: string
    project_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/projects/columns/cards/${p["cardId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsDeleteCard(p: { accept: string; cardId: number }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/projects/columns/cards/${p["cardId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsMoveCard(p: {
    accept: string
    cardId: number
    requestBody: {
      column_id?: number
      position: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/projects/columns/cards/${p["cardId"]}/moves`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsGetColumn(p: { accept: string; columnId: number }): Observable<{
    cards_url?: string
    created_at?: string
    id?: number
    name?: string
    node_id?: string
    project_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/columns/${p["columnId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsUpdateColumn(p: {
    accept: string
    columnId: number
    requestBody: {
      name: string
    }
  }): Observable<{
    cards_url?: string
    created_at?: string
    id?: number
    name?: string
    node_id?: string
    project_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/projects/columns/${p["columnId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsDeleteColumn(p: {
    accept: string
    columnId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/projects/columns/${p["columnId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListCards(p: {
    accept: string
    columnId: number
    archivedState?: "all" | "archived" | "not_archived"
    perPage?: number
    page?: number
  }): Observable<
    {
      archived?: boolean
      column_url?: string
      content_url?: string
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      id?: number
      node_id?: string
      note?: string
      project_url?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      archived_state: p["archivedState"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/columns/${p["columnId"]}/cards`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsCreateCard(p: {
    accept: string
    columnId: number
    requestBody: {
      content_id?: number
      content_type?: string
      note?: string
    }
  }): Observable<{
    archived?: boolean
    column_url?: string
    content_url?: string
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    id?: number
    node_id?: string
    note?: string
    project_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/projects/columns/${p["columnId"]}/cards`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsMoveColumn(p: {
    accept: string
    columnId: number
    requestBody: {
      position: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/projects/columns/${p["columnId"]}/moves`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsGet(p: { accept: string; projectId: number }): Observable<{
    body?: string
    columns_url?: string
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    number?: number
    owner_url?: string
    state?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsUpdate(p: {
    accept: string
    projectId: number
    requestBody: {
      body?: string
      name?: string
      organization_permission?: string
      private?: boolean
      state?: "open" | "closed"
    }
  }): Observable<{
    body?: string
    columns_url?: string
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    number?: number
    owner_url?: string
    state?: string
    updated_at?: string
    url?: string
  } | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsDelete(p: { accept: string; projectId: number }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListCollaborators(p: {
    accept: string
    projectId: number
    affiliation?: "outside" | "direct" | "all"
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      affiliation: p["affiliation"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/${p["projectId"]}/collaborators`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsAddCollaborator(p: {
    accept: string
    projectId: number
    username: string
    requestBody: {
      permission?: "read" | "write" | "admin"
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/projects/${p["projectId"]}/collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsRemoveCollaborator(p: {
    accept: string
    projectId: number
    username: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/projects/${p["projectId"]}/collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsGetPermissionForUser(p: {
    accept: string
    projectId: number
    username: string
  }): Observable<{
    permission?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/projects/${p["projectId"]}/collaborators/${p["username"]}/permission`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListColumns(p: {
    accept: string
    projectId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      cards_url?: string
      created_at?: string
      id?: number
      name?: string
      node_id?: string
      project_url?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/${p["projectId"]}/columns`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsCreateColumn(p: {
    accept: string
    projectId: number
    requestBody: {
      name: string
    }
  }): Observable<{
    cards_url?: string
    created_at?: string
    id?: number
    name?: string
    node_id?: string
    project_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/projects/${p["projectId"]}/columns`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  rateLimitGet(p: { accept?: string }): Observable<{
    rate?: {
      limit?: number
      remaining?: number
      reset?: number
    }
    resources?: {
      core?: {
        limit?: number
        remaining?: number
        reset?: number
      }
      graphql?: {
        limit?: number
        remaining?: number
        reset?: number
      }
      integration_manifest?: {
        limit?: number
        remaining?: number
        reset?: number
      }
      search?: {
        limit?: number
        remaining?: number
        reset?: number
      }
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/rate_limit`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteLegacy(p: {
    accept: string
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGet(p: { accept?: string; owner: string; repo: string }): Observable<{
    allow_merge_commit?: boolean
    allow_rebase_merge?: boolean
    allow_squash_merge?: boolean
    archive_url?: string
    archived?: boolean
    assignees_url?: string
    blobs_url?: string
    branches_url?: string
    clone_url?: string
    collaborators_url?: string
    comments_url?: string
    commits_url?: string
    compare_url?: string
    contents_url?: string
    contributors_url?: string
    created_at?: string
    default_branch?: string
    delete_branch_on_merge?: boolean
    deployments_url?: string
    description?: string
    disabled?: boolean
    downloads_url?: string
    events_url?: string
    fork?: boolean
    forks_count?: number
    forks_url?: string
    full_name?: string
    git_commits_url?: string
    git_refs_url?: string
    git_tags_url?: string
    git_url?: string
    has_downloads?: boolean
    has_issues?: boolean
    has_pages?: boolean
    has_projects?: boolean
    has_wiki?: boolean
    homepage?: string
    hooks_url?: string
    html_url?: string
    id?: number
    is_template?: boolean
    issue_comment_url?: string
    issue_events_url?: string
    issues_url?: string
    keys_url?: string
    labels_url?: string
    language?: string
    languages_url?: string
    license?: {
      key?: string
      name?: string
      node_id?: string
      spdx_id?: string
      url?: string
    }
    merges_url?: string
    milestones_url?: string
    mirror_url?: string
    name?: string
    network_count?: number
    node_id?: string
    notifications_url?: string
    open_issues_count?: number
    organization?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    parent?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
    permissions?: {
      admin?: boolean
      maintain?: boolean
      pull?: boolean
      push?: boolean
      triage?: boolean
    }
    private?: boolean
    pulls_url?: string
    pushed_at?: string
    releases_url?: string
    size?: number
    source?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
    ssh_url?: string
    stargazers_count?: number
    stargazers_url?: string
    statuses_url?: string
    subscribers_count?: number
    subscribers_url?: string
    subscription_url?: string
    svn_url?: string
    tags_url?: string
    teams_url?: string
    temp_clone_token?: string
    template_repository?: string
    topics?: string[]
    trees_url?: string
    updated_at?: string
    url?: string
    visibility?: string
    watchers_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdate(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archived?: boolean
      default_branch?: string
      delete_branch_on_merge?: boolean
      description?: string
      has_issues?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      is_template?: boolean
      name?: string
      private?: boolean
      visibility?: "public" | "private" | "visibility" | "internal"
    }
  }): Observable<{
    allow_merge_commit?: boolean
    allow_rebase_merge?: boolean
    allow_squash_merge?: boolean
    archive_url?: string
    archived?: boolean
    assignees_url?: string
    blobs_url?: string
    branches_url?: string
    clone_url?: string
    collaborators_url?: string
    comments_url?: string
    commits_url?: string
    compare_url?: string
    contents_url?: string
    contributors_url?: string
    created_at?: string
    default_branch?: string
    delete_branch_on_merge?: boolean
    deployments_url?: string
    description?: string
    disabled?: boolean
    downloads_url?: string
    events_url?: string
    fork?: boolean
    forks_count?: number
    forks_url?: string
    full_name?: string
    git_commits_url?: string
    git_refs_url?: string
    git_tags_url?: string
    git_url?: string
    has_downloads?: boolean
    has_issues?: boolean
    has_pages?: boolean
    has_projects?: boolean
    has_wiki?: boolean
    homepage?: string
    hooks_url?: string
    html_url?: string
    id?: number
    is_template?: boolean
    issue_comment_url?: string
    issue_events_url?: string
    issues_url?: string
    keys_url?: string
    labels_url?: string
    language?: string
    languages_url?: string
    merges_url?: string
    milestones_url?: string
    mirror_url?: string
    name?: string
    network_count?: number
    node_id?: string
    notifications_url?: string
    open_issues_count?: number
    organization?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    parent?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
    permissions?: {
      admin?: boolean
      maintain?: boolean
      pull?: boolean
      push?: boolean
      triage?: boolean
    }
    private?: boolean
    pulls_url?: string
    pushed_at?: string
    releases_url?: string
    size?: number
    source?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
    ssh_url?: string
    stargazers_count?: number
    stargazers_url?: string
    statuses_url?: string
    subscribers_count?: number
    subscribers_url?: string
    subscription_url?: string
    svn_url?: string
    tags_url?: string
    teams_url?: string
    temp_clone_token?: string
    template_repository?: string
    topics?: string[]
    trees_url?: string
    updated_at?: string
    url?: string
    visibility?: string
    watchers_count?: number
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDelete(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<void | {
    documentation_url?: string
    message?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListArtifactsForRepo(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<{
    artifacts?: {
      archive_download_url: string
      created_at: string
      expired: boolean
      expires_at: string
      id: number
      name: string
      node_id: string
      size_in_bytes: number
      url: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetArtifact(p: {
    accept?: string
    owner: string
    repo: string
    artifactId: number
  }): Observable<{
    archive_download_url?: string
    created_at?: string
    expired?: boolean
    expires_at?: string
    id?: number
    name?: string
    node_id?: string
    size_in_bytes?: number
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteArtifact(p: {
    accept?: string
    owner: string
    repo: string
    artifactId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDownloadArtifact(p: {
    accept?: string
    owner: string
    repo: string
    artifactId: number
    archiveFormat: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}/${p["archiveFormat"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetJobForWorkflowRun(p: {
    accept?: string
    owner: string
    repo: string
    jobId: number
  }): Observable<{
    check_run_url?: string
    completed_at?: string
    conclusion?: string
    head_sha?: string
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    run_id?: number
    run_url?: string
    started_at?: string
    status?: string
    steps?: {
      completed_at: string
      conclusion: string
      name: string
      number: number
      started_at: string
      status: string
    }[]
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/jobs/${p["jobId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDownloadJobLogsForWorkflowRun(p: {
    accept?: string
    owner: string
    repo: string
    jobId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/jobs/${p["jobId"]}/logs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListSelfHostedRunnersForRepo(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<{
    runners?: {
      id: number
      name: string
      os: string
      status: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRunnerApplicationsForRepo(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<
    {
      architecture?: string
      download_url?: string
      filename?: string
      os?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/downloads`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateRegistrationTokenForRepo(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    expires_at?: string
    token?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/registration-token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateRemoveTokenForRepo(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    expires_at?: string
    token?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/remove-token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetSelfHostedRunnerForRepo(p: {
    accept?: string
    owner: string
    repo: string
    runnerId: number
  }): Observable<{
    id?: number
    name?: string
    os?: string
    status?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteSelfHostedRunnerFromRepo(p: {
    accept?: string
    owner: string
    repo: string
    runnerId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListWorkflowRunsForRepo(p: {
    accept?: string
    owner: string
    repo: string
    actor?: string
    branch?: string
    event?: string
    status?: "completed" | "status" | "conclusion"
    perPage?: number
    page?: number
  }): Observable<{
    total_count?: number
    workflow_runs?: {
      artifacts_url?: string
      cancel_url?: string
      check_suite_url?: string
      conclusion?: string
      created_at?: string
      event?: string
      head_branch?: string
      head_commit?: {
        author?: {
          email?: string
          name?: string
        }
        committer?: {
          email?: string
          name?: string
        }
        id?: string
        message?: string
        timestamp?: string
        tree_id?: string
      }
      head_repository?: {
        archive_url?: string
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        deployments_url?: string
        description?: string
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        hooks_url?: string
        html_url?: string
        id?: number
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        name?: string
        node_id?: string
        notifications_url?: string
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        private?: boolean
        pulls_url?: string
        releases_url?: string
        stargazers_url?: string
        statuses_url?: string
        subscribers_url?: string
        subscription_url?: string
        tags_url?: string
        teams_url?: string
        trees_url?: string
        url?: string
      }
      head_sha?: string
      html_url?: string
      id?: number
      jobs_url?: string
      logs_url?: string
      node_id?: string
      pull_requests?: {
        [key: string]: unknown
      }[]
      repository?: {
        archive_url?: string
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        deployments_url?: string
        description?: string
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        html_url?: string
        id?: number
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        name?: string
        node_id?: string
        notifications_url?: string
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        private?: boolean
        pulls_url?: string
        releases_url?: string
        ssh_url?: string
        stargazers_url?: string
        statuses_url?: string
        subscribers_url?: string
        subscription_url?: string
        tags_url?: string
        teams_url?: string
        trees_url?: string
        url?: string
      }
      rerun_url?: string
      run_number?: number
      status?: string
      updated_at?: string
      url?: string
      workflow_id?: number
      workflow_url?: string
    }[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      actor: p["actor"],
      branch: p["branch"],
      event: p["event"],
      status: p["status"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/runs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetWorkflowRun(p: {
    accept?: string
    owner: string
    repo: string
    runId: number
  }): Observable<{
    artifacts_url?: string
    cancel_url?: string
    check_suite_url?: string
    conclusion?: string
    created_at?: string
    event?: string
    head_branch?: string
    head_commit?: {
      author?: {
        email?: string
        name?: string
      }
      committer?: {
        email?: string
        name?: string
      }
      id?: string
      message?: string
      timestamp?: string
      tree_id?: string
    }
    head_repository?: {
      archive_url?: string
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      deployments_url?: string
      description?: string
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      hooks_url?: string
      html_url?: string
      id?: number
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      name?: string
      node_id?: string
      notifications_url?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      private?: boolean
      pulls_url?: string
      releases_url?: string
      stargazers_url?: string
      statuses_url?: string
      subscribers_url?: string
      subscription_url?: string
      tags_url?: string
      teams_url?: string
      trees_url?: string
      url?: string
    }
    head_sha?: string
    html_url?: string
    id?: number
    jobs_url?: string
    logs_url?: string
    node_id?: string
    pull_requests?: {
      [key: string]: unknown
    }[]
    repository?: {
      archive_url?: string
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      deployments_url?: string
      description?: string
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      html_url?: string
      id?: number
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      name?: string
      node_id?: string
      notifications_url?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      private?: boolean
      pulls_url?: string
      releases_url?: string
      ssh_url?: string
      stargazers_url?: string
      statuses_url?: string
      subscribers_url?: string
      subscription_url?: string
      tags_url?: string
      teams_url?: string
      trees_url?: string
      url?: string
    }
    rerun_url?: string
    run_number?: number
    status?: string
    updated_at?: string
    url?: string
    workflow_id?: number
    workflow_url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListWorkflowRunArtifacts(p: {
    accept?: string
    owner: string
    repo: string
    runId: number
    perPage?: number
    page?: number
  }): Observable<{
    artifacts?: {
      archive_download_url: string
      created_at: string
      expired: boolean
      expires_at: string
      id: number
      name: string
      node_id: string
      size_in_bytes: number
      url: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/artifacts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCancelWorkflowRun(p: {
    accept?: string
    owner: string
    repo: string
    runId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/cancel`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListJobsForWorkflowRun(p: {
    accept?: string
    owner: string
    repo: string
    runId: number
    filter?: "latest" | "all"
    perPage?: number
    page?: number
  }): Observable<{
    jobs?: {
      check_run_url?: string
      completed_at?: string
      conclusion?: string
      head_sha?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      run_id?: number
      run_url?: string
      started_at?: string
      status?: string
      steps?: {
        completed_at: string
        conclusion: string
        name: string
        number: number
        started_at: string
        status: string
      }[]
      url?: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/jobs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDownloadWorkflowRunLogs(p: {
    accept?: string
    owner: string
    repo: string
    runId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/logs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteWorkflowRunLogs(p: {
    accept?: string
    owner: string
    repo: string
    runId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/logs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsReRunWorkflow(p: {
    accept?: string
    owner: string
    repo: string
    runId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/rerun`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetWorkflowRunUsage(p: {
    accept?: string
    owner: string
    repo: string
    runId: number
  }): Observable<{
    billable?: {
      MACOS?: {
        jobs?: number
        total_ms?: number
      }
      UBUNTU?: {
        jobs?: number
        total_ms?: number
      }
      WINDOWS?: {
        jobs?: number
        total_ms?: number
      }
    }
    run_duration_ms?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/timing`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRepoSecrets(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<{
    secrets?: {
      created_at: string
      name: string
      updated_at: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/secrets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetRepoPublicKey(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    key?: string
    key_id?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/public-key`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetRepoSecret(p: {
    accept?: string
    owner: string
    repo: string
    secretName: string
  }): Observable<{
    created_at?: string
    name?: string
    updated_at?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateOrUpdateRepoSecret(p: {
    accept?: string
    owner: string
    repo: string
    secretName: string
    requestBody: {
      encrypted_value?: string
      key_id?: string
    }
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteRepoSecret(p: {
    accept?: string
    owner: string
    repo: string
    secretName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRepoWorkflows(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<{
    total_count?: number
    workflows?: {
      badge_url: string
      created_at: string
      html_url: string
      id: number
      name: string
      node_id: string
      path: string
      state: string
      updated_at: string
      url: string
    }[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/workflows`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetWorkflow(p: {
    accept?: string
    owner: string
    repo: string
    workflowId: number
  }): Observable<{
    badge_url?: string
    created_at?: string
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    path?: string
    state?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListWorkflowRuns(p: {
    accept?: string
    owner: string
    repo: string
    workflowId: number
    actor?: string
    branch?: string
    event?: string
    status?: "completed" | "status" | "conclusion"
    perPage?: number
    page?: number
  }): Observable<{
    total_count?: number
    workflow_runs?: {
      artifacts_url?: string
      cancel_url?: string
      check_suite_url?: string
      conclusion?: string
      created_at?: string
      event?: string
      head_branch?: string
      head_commit?: {
        author?: {
          email?: string
          name?: string
        }
        committer?: {
          email?: string
          name?: string
        }
        id?: string
        message?: string
        timestamp?: string
        tree_id?: string
      }
      head_repository?: {
        archive_url?: string
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        deployments_url?: string
        description?: string
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        hooks_url?: string
        html_url?: string
        id?: number
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        name?: string
        node_id?: string
        notifications_url?: string
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        private?: boolean
        pulls_url?: string
        releases_url?: string
        stargazers_url?: string
        statuses_url?: string
        subscribers_url?: string
        subscription_url?: string
        tags_url?: string
        teams_url?: string
        trees_url?: string
        url?: string
      }
      head_sha?: string
      html_url?: string
      id?: number
      jobs_url?: string
      logs_url?: string
      node_id?: string
      pull_requests?: {
        [key: string]: unknown
      }[]
      repository?: {
        archive_url?: string
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        deployments_url?: string
        description?: string
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        html_url?: string
        id?: number
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        name?: string
        node_id?: string
        notifications_url?: string
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        private?: boolean
        pulls_url?: string
        releases_url?: string
        ssh_url?: string
        stargazers_url?: string
        statuses_url?: string
        subscribers_url?: string
        subscription_url?: string
        tags_url?: string
        teams_url?: string
        trees_url?: string
        url?: string
      }
      rerun_url?: string
      run_number?: number
      status?: string
      updated_at?: string
      url?: string
      workflow_id?: number
      workflow_url?: string
    }[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      actor: p["actor"],
      branch: p["branch"],
      event: p["event"],
      status: p["status"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/runs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetWorkflowUsage(p: {
    accept?: string
    owner: string
    repo: string
    workflowId: number
  }): Observable<{
    billable?: {
      MACOS?: {
        total_ms?: number
      }
      UBUNTU?: {
        total_ms?: number
      }
      WINDOWS?: {
        total_ms?: number
      }
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/timing`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListAssignees(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/assignees`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesCheckUserCanBeAssigned(p: {
    accept?: string
    owner: string
    repo: string
    assignee: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/assignees/${p["assignee"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposEnableAutomatedSecurityFixes(p: {
    accept: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/automated-security-fixes`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDisableAutomatedSecurityFixes(p: {
    accept: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/automated-security-fixes`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListBranches(p: {
    accept?: string
    owner: string
    repo: string
    protected?: boolean
    perPage?: number
    page?: number
  }): Observable<
    {
      commit?: {
        sha?: string
        url?: string
      }
      name?: string
      protected?: boolean
      protection?: {
        enabled?: boolean
        required_status_checks?: {
          contexts?: string[]
          enforcement_level?: string
        }
      }
      protection_url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      protected: p["protected"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/branches`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetBranch(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<{
    _links?: {
      html?: string
      self?: string
    }
    commit?: {
      author?: {
        avatar_url?: string
        gravatar_id?: string
        id?: number
        login?: string
        url?: string
      }
      commit?: {
        author?: {
          date?: string
          email?: string
          name?: string
        }
        committer?: {
          date?: string
          email?: string
          name?: string
        }
        message?: string
        tree?: {
          sha?: string
          url?: string
        }
        url?: string
        verification?: {
          payload?: string
          reason?: string
          signature?: string
          verified?: boolean
        }
      }
      committer?: {
        avatar_url?: string
        gravatar_id?: string
        id?: number
        login?: string
        url?: string
      }
      node_id?: string
      parents?: {
        sha: string
        url: string
      }[]
      sha?: string
      url?: string
    }
    name?: string
    protected?: boolean
    protection?: {
      enabled?: boolean
      required_status_checks?: {
        contexts?: string[]
        enforcement_level?: string
      }
    }
    protection_url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetBranchProtection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<{
    allow_deletions?: {
      enabled?: boolean
    }
    allow_force_pushes?: {
      enabled?: boolean
    }
    enforce_admins?: {
      enabled?: boolean
      url?: string
    }
    required_linear_history?: {
      enabled?: boolean
    }
    required_pull_request_reviews?: {
      dismiss_stale_reviews?: boolean
      dismissal_restrictions?: {
        teams?: {
          description?: string
          html_url?: string
          id?: number
          members_url?: string
          name?: string
          node_id?: string
          parent?: string
          permission?: string
          privacy?: string
          repositories_url?: string
          slug?: string
          url?: string
        }[]
        teams_url?: string
        url?: string
        users?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }[]
        users_url?: string
      }
      require_code_owner_reviews?: boolean
      required_approving_review_count?: number
      url?: string
    }
    required_status_checks?: {
      contexts?: string[]
      contexts_url?: string
      strict?: boolean
      url?: string
    }
    restrictions?: {
      apps?: {
        created_at?: string
        description?: string
        events?: string[]
        external_url?: string
        html_url?: string
        id?: number
        name?: string
        node_id?: string
        owner?: {
          avatar_url?: string
          description?: string
          events_url?: string
          hooks_url?: string
          id?: number
          issues_url?: string
          login?: string
          members_url?: string
          node_id?: string
          public_members_url?: string
          repos_url?: string
          url?: string
        }
        permissions?: {
          contents?: string
          issues?: string
          metadata?: string
          single_file?: string
        }
        slug?: string
        updated_at?: string
      }[]
      apps_url?: string
      teams?: {
        description?: string
        html_url?: string
        id?: number
        members_url?: string
        name?: string
        node_id?: string
        parent?: string
        permission?: string
        privacy?: string
        repositories_url?: string
        slug?: string
        url?: string
      }[]
      teams_url?: string
      url?: string
      users?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
      users_url?: string
    }
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateBranchProtection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: {
      allow_deletions?: boolean
      allow_force_pushes?: boolean | null
      enforce_admins: boolean | null
      required_linear_history?: boolean
      required_pull_request_reviews: {
        dismiss_stale_reviews?: boolean
        dismissal_restrictions?: {
          teams?: string[]
          users?: string[]
        }
        require_code_owner_reviews?: boolean
        required_approving_review_count?: number
      } | null
      required_status_checks: {
        contexts: string[]
        strict: boolean
      } | null
      restrictions: {
        apps?: string[]
        teams: string[]
        users: string[]
      } | null
    }
  }): Observable<{
    allow_deletions?: {
      enabled?: boolean
    }
    allow_force_pushes?: {
      enabled?: boolean
    }
    enforce_admins?: {
      enabled?: boolean
      url?: string
    }
    required_linear_history?: {
      enabled?: boolean
    }
    required_pull_request_reviews?: {
      dismiss_stale_reviews?: boolean
      dismissal_restrictions?: {
        teams?: {
          description?: string
          html_url?: string
          id?: number
          members_url?: string
          name?: string
          node_id?: string
          parent?: string
          permission?: string
          privacy?: string
          repositories_url?: string
          slug?: string
          url?: string
        }[]
        teams_url?: string
        url?: string
        users?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }[]
        users_url?: string
      }
      require_code_owner_reviews?: boolean
      required_approving_review_count?: number
      url?: string
    }
    required_status_checks?: {
      contexts?: string[]
      contexts_url?: string
      strict?: boolean
      url?: string
    }
    restrictions?: {
      apps?: {
        created_at?: string
        description?: string
        events?: string[]
        external_url?: string
        html_url?: string
        id?: number
        name?: string
        node_id?: string
        owner?: {
          avatar_url?: string
          description?: string
          events_url?: string
          hooks_url?: string
          id?: number
          issues_url?: string
          login?: string
          members_url?: string
          node_id?: string
          public_members_url?: string
          repos_url?: string
          url?: string
        }
        permissions?: {
          contents?: string
          issues?: string
          metadata?: string
          single_file?: string
        }
        slug?: string
        updated_at?: string
      }[]
      apps_url?: string
      teams?: {
        description?: string
        html_url?: string
        id?: number
        members_url?: string
        name?: string
        node_id?: string
        parent?: string
        permission?: string
        privacy?: string
        repositories_url?: string
        slug?: string
        url?: string
      }[]
      teams_url?: string
      url?: string
      users?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
      users_url?: string
    }
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteBranchProtection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAdminBranchProtection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<{
    enabled?: boolean
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposSetAdminBranchProtection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<{
    enabled?: boolean
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteAdminBranchProtection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetPullRequestReviewProtection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<{
    dismiss_stale_reviews?: boolean
    dismissal_restrictions?: {
      teams?: {
        description?: string
        html_url?: string
        id?: number
        members_url?: string
        name?: string
        node_id?: string
        parent?: string
        permission?: string
        privacy?: string
        repositories_url?: string
        slug?: string
        url?: string
      }[]
      teams_url?: string
      url?: string
      users?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
      users_url?: string
    }
    require_code_owner_reviews?: boolean
    required_approving_review_count?: number
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdatePullRequestReviewProtection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: {
      dismiss_stale_reviews?: boolean
      dismissal_restrictions?: {
        teams?: string[]
        users?: string[]
      }
      require_code_owner_reviews?: boolean
      required_approving_review_count?: number
    }
  }): Observable<{
    dismiss_stale_reviews?: boolean
    dismissal_restrictions?: {
      teams?: {
        description?: string
        html_url?: string
        id?: number
        members_url?: string
        name?: string
        node_id?: string
        parent?: string
        permission?: string
        privacy?: string
        repositories_url?: string
        slug?: string
        url?: string
      }[]
      teams_url?: string
      url?: string
      users?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
      users_url?: string
    }
    require_code_owner_reviews?: boolean
    required_approving_review_count?: number
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeletePullRequestReviewProtection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCommitSignatureProtection(p: {
    accept: string
    owner: string
    repo: string
    branch: string
  }): Observable<{
    enabled?: boolean
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateCommitSignatureProtection(p: {
    accept: string
    owner: string
    repo: string
    branch: string
  }): Observable<{
    enabled?: boolean
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteCommitSignatureProtection(p: {
    accept: string
    owner: string
    repo: string
    branch: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetStatusChecksProtection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<{
    contexts?: string[]
    contexts_url?: string
    strict?: boolean
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateStatusCheckPotection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: {
      contexts?: string[]
      strict?: boolean
    }
  }): Observable<{
    contexts?: string[]
    contexts_url?: string
    strict?: boolean
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveStatusCheckProtection(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAllStatusCheckContexts(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<string[]> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposSetStatusCheckContexts(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<string[]> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAddStatusCheckContexts(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<string[]> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveStatusCheckContexts(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<string[]> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAccessRestrictions(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<{
    apps?: {
      created_at?: string
      description?: string
      events?: string[]
      external_url?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      permissions?: {
        contents?: string
        issues?: string
        metadata?: string
        single_file?: string
      }
      slug?: string
      updated_at?: string
    }[]
    apps_url?: string
    teams?: {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
    teams_url?: string
    url?: string
    users?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
    users_url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteAccessRestrictions(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAppsWithAccessToProtectedBranch(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<
    {
      created_at?: string
      description?: string
      events?: string[]
      external_url?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      permissions?: {
        contents?: string
        issues?: string
        metadata?: string
        single_file?: string
      }
      slug?: string
      updated_at?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposSetAppAccessRestrictions(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<
    {
      created_at?: string
      description?: string
      events?: string[]
      external_url?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      permissions?: {
        contents?: string
        issues?: string
        metadata?: string
        single_file?: string
      }
      slug?: string
      updated_at?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAddAppAccessRestrictions(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<
    {
      created_at?: string
      description?: string
      events?: string[]
      external_url?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      permissions?: {
        contents?: string
        issues?: string
        metadata?: string
        single_file?: string
      }
      slug?: string
      updated_at?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveAppAccessRestrictions(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<
    {
      created_at?: string
      description?: string
      events?: string[]
      external_url?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      permissions?: {
        contents?: string
        issues?: string
        metadata?: string
        single_file?: string
      }
      slug?: string
      updated_at?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetTeamsWithAccessToProtectedBranch(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<
    {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposSetTeamAccessRestrictions(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<
    {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAddTeamAccessRestrictions(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<
    {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveTeamAccessRestrictions(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<
    {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetUsersWithAccessToProtectedBranch(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposSetUserAccessRestrictions(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAddUserAccessRestrictions(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveUserAccessRestrictions(p: {
    accept?: string
    owner: string
    repo: string
    branch: string
    requestBody: string[]
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksCreate(p: {
    accept: string
    owner: string
    repo: string
    requestBody: {
      actions?: {
        description: string
        identifier: string
        label: string
      }[]
      completed_at?: string
      conclusion?:
        | "success"
        | "failure"
        | "neutral"
        | "cancelled"
        | "skipped"
        | "timed_out"
        | "action_required"
      details_url?: string
      external_id?: string
      head_sha: string
      name: string
      output?: {
        annotations?: {
          annotation_level: "notice" | "warning" | "failure"
          end_column?: number
          end_line: number
          message: string
          path: string
          raw_details?: string
          start_column?: number
          start_line: number
          title?: string
        }[]
        images?: {
          alt: string
          caption?: string
          image_url: string
        }[]
        summary: string
        text?: string
        title: string
      }
      started_at?: string
      status?: "queued" | "in_progress" | "completed"
    }
  }): Observable<{
    app?: {
      created_at?: string
      description?: string
      events?: string[]
      external_url?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      permissions?: {
        contents?: string
        issues?: string
        metadata?: string
        single_file?: string
      }
      slug?: string
      updated_at?: string
    }
    check_suite?: {
      id?: number
    }
    completed_at?: string
    conclusion?: string
    details_url?: string
    external_id?: string
    head_sha?: string
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    output?: {
      summary?: string
      text?: string
      title?: string
    }
    pull_requests?: {
      base?: {
        ref?: string
        repo?: {
          id?: number
          name?: string
          url?: string
        }
        sha?: string
      }
      head?: {
        ref?: string
        repo?: {
          id?: number
          name?: string
          url?: string
        }
        sha?: string
      }
      id?: number
      number?: number
      url?: string
    }[]
    started_at?: string
    status?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/check-runs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksUpdate(p: {
    accept: string
    owner: string
    repo: string
    checkRunId: number
    requestBody: {
      actions?: {
        description: string
        identifier: string
        label: string
      }[]
      completed_at?: string
      conclusion?:
        | "success"
        | "failure"
        | "neutral"
        | "cancelled"
        | "skipped"
        | "timed_out"
        | "action_required"
      details_url?: string
      external_id?: string
      name?: string
      output?: {
        annotations?: {
          annotation_level: "notice" | "warning" | "failure"
          end_column?: number
          end_line: number
          message: string
          path: string
          raw_details?: string
          start_column?: number
          start_line: number
          title?: string
        }[]
        images?: {
          alt: string
          caption?: string
          image_url: string
        }[]
        summary: string
        text?: string
        title?: string
      }
      started_at?: string
      status?: "queued" | "in_progress" | "completed"
    }
  }): Observable<{
    app?: {
      created_at?: string
      description?: string
      events?: string[]
      external_url?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      permissions?: {
        contents?: string
        issues?: string
        metadata?: string
        single_file?: string
      }
      slug?: string
      updated_at?: string
    }
    check_suite?: {
      id?: number
    }
    completed_at?: string
    conclusion?: string
    details_url?: string
    external_id?: string
    head_sha?: string
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    output?: {
      annotations_count?: number
      annotations_url?: string
      summary?: string
      text?: string
      title?: string
    }
    pull_requests?: {
      base?: {
        ref?: string
        repo?: {
          id?: number
          name?: string
          url?: string
        }
        sha?: string
      }
      head?: {
        ref?: string
        repo?: {
          id?: number
          name?: string
          url?: string
        }
        sha?: string
      }
      id?: number
      number?: number
      url?: string
    }[]
    started_at?: string
    status?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksGet(p: {
    accept: string
    owner: string
    repo: string
    checkRunId: number
  }): Observable<{
    app?: {
      created_at?: string
      description?: string
      events?: string[]
      external_url?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      permissions?: {
        contents?: string
        issues?: string
        metadata?: string
        single_file?: string
      }
      slug?: string
      updated_at?: string
    }
    check_suite?: {
      id?: number
    }
    completed_at?: string
    conclusion?: string
    details_url?: string
    external_id?: string
    head_sha?: string
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    output?: {
      annotations_count?: number
      annotations_url?: string
      summary?: string
      text?: string
      title?: string
    }
    pull_requests?: {
      base?: {
        ref?: string
        repo?: {
          id?: number
          name?: string
          url?: string
        }
        sha?: string
      }
      head?: {
        ref?: string
        repo?: {
          id?: number
          name?: string
          url?: string
        }
        sha?: string
      }
      id?: number
      number?: number
      url?: string
    }[]
    started_at?: string
    status?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksListAnnotations(p: {
    accept: string
    owner: string
    repo: string
    checkRunId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      annotation_level?: string
      end_column?: number
      end_line?: number
      message?: string
      path?: string
      raw_details?: string
      start_column?: number
      start_line?: number
      title?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}/annotations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksCreateSuite(p: {
    accept: string
    owner: string
    repo: string
    requestBody: {
      head_sha: string
    }
  }): Observable<{
    after?: string
    app?: {
      created_at?: string
      description?: string
      events?: string[]
      external_url?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      permissions?: {
        contents?: string
        issues?: string
        metadata?: string
        single_file?: string
      }
      slug?: string
      updated_at?: string
    }
    before?: string
    conclusion?: string
    head_branch?: string
    head_sha?: string
    id?: number
    node_id?: string
    pull_requests?: {
      [key: string]: unknown
    }[]
    repository?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
    status?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/check-suites`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksSetSuitesPreferences(p: {
    accept: string
    owner: string
    repo: string
    requestBody: {
      auto_trigger_checks?: {
        app_id: number
        setting: boolean
      }[]
    }
  }): Observable<{
    preferences?: {
      auto_trigger_checks?: {
        app_id: number
        setting: boolean
      }[]
    }
    repository?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-suites/preferences`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksGetSuite(p: {
    accept: string
    owner: string
    repo: string
    checkSuiteId: number
  }): Observable<{
    after?: string
    app?: {
      created_at?: string
      description?: string
      events?: string[]
      external_url?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      permissions?: {
        contents?: string
        issues?: string
        metadata?: string
        single_file?: string
      }
      slug?: string
      updated_at?: string
    }
    before?: string
    conclusion?: string
    head_branch?: string
    head_sha?: string
    id?: number
    node_id?: string
    pull_requests?: {
      [key: string]: unknown
    }[]
    repository?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
    status?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksListForSuite(p: {
    accept: string
    owner: string
    repo: string
    checkSuiteId: number
    checkName?: string
    status?: "queued" | "in_progress" | "completed"
    filter?: "latest" | "all"
    perPage?: number
    page?: number
  }): Observable<{
    check_runs?: {
      app?: {
        created_at?: string
        description?: string
        events?: string[]
        external_url?: string
        html_url?: string
        id?: number
        name?: string
        node_id?: string
        owner?: {
          avatar_url?: string
          description?: string
          events_url?: string
          hooks_url?: string
          id?: number
          issues_url?: string
          login?: string
          members_url?: string
          node_id?: string
          public_members_url?: string
          repos_url?: string
          url?: string
        }
        permissions?: {
          contents?: string
          issues?: string
          metadata?: string
          single_file?: string
        }
        slug?: string
        updated_at?: string
      }
      check_suite?: {
        id?: number
      }
      completed_at?: string
      conclusion?: string
      details_url?: string
      external_id?: string
      head_sha?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      output?: {
        annotations_count?: number
        annotations_url?: string
        summary?: string
        text?: string
        title?: string
      }
      pull_requests?: {
        base?: {
          ref?: string
          repo?: {
            id?: number
            name?: string
            url?: string
          }
          sha?: string
        }
        head?: {
          ref?: string
          repo?: {
            id?: number
            name?: string
            url?: string
          }
          sha?: string
        }
        id?: number
        number?: number
        url?: string
      }[]
      started_at?: string
      status?: string
      url?: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      check_name: p["checkName"],
      status: p["status"],
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}/check-runs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksRerequestSuite(p: {
    accept: string
    owner: string
    repo: string
    checkSuiteId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}/rerequest`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningListAlertsForRepo(p: {
    accept?: string
    owner: string
    repo: string
    state?: string
    ref?: string
  }): Observable<
    | {
        closed_at?: string
        closed_by?: string
        created_at?: string
        html_url?: string
        open?: boolean
        rule_description?: string
        rule_id?: string
        rule_severity?: string
        tool?: string
        url?: string
      }[]
    | void
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { state: p["state"], ref: p["ref"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningGetAlert(p: {
    accept?: string
    owner: string
    repo: string
    alertId: number
  }): Observable<{
    closed_at?: string
    closed_by?: string
    created_at?: string
    html_url?: string
    open?: boolean
    rule_description?: string
    rule_id?: string
    rule_severity?: string
    tool?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts/${p["alertId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListCollaborators(p: {
    accept?: string
    owner: string
    repo: string
    affiliation?: "outside" | "direct" | "all"
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      affiliation: p["affiliation"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/collaborators`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCheckCollaborator(p: {
    accept?: string
    owner: string
    repo: string
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAddCollaborator(p: {
    accept?: string
    owner: string
    repo: string
    username: string
    requestBody: {
      permission?: "pull" | "push" | "admin" | "maintain" | "triage"
    }
  }): Observable<{
    created_at?: string
    html_url?: string
    id?: number
    invitee?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    inviter?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    permissions?: string
    repository?: {
      archive_url?: string
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      deployments_url?: string
      description?: string
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      html_url?: string
      id?: number
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      name?: string
      node_id?: string
      notifications_url?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      private?: boolean
      pulls_url?: string
      releases_url?: string
      ssh_url?: string
      stargazers_url?: string
      statuses_url?: string
      subscribers_url?: string
      subscription_url?: string
      tags_url?: string
      teams_url?: string
      trees_url?: string
      url?: string
    }
    url?: string
  } | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveCollaborator(p: {
    accept?: string
    owner: string
    repo: string
    username: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCollaboratorPermissionLevel(p: {
    accept?: string
    owner: string
    repo: string
    username: string
  }): Observable<{
    permission?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}/permission`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListCommitCommentsForRepo(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      body?: string
      commit_id?: string
      created_at?: string
      html_url?: string
      id?: number
      line?: number
      node_id?: string
      path?: string
      position?: number
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCommitComment(p: {
    accept?: string
    owner: string
    repo: string
    commentId: number
  }): Observable<{
    body?: string
    commit_id?: string
    created_at?: string
    html_url?: string
    id?: number
    line?: number
    node_id?: string
    path?: string
    position?: number
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateCommitComment(p: {
    accept?: string
    owner: string
    repo: string
    commentId: number
    requestBody: {
      body: string
    }
  }): Observable<{
    body?: string
    commit_id?: string
    created_at?: string
    html_url?: string
    id?: number
    line?: number
    node_id?: string
    path?: string
    position?: number
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteCommitComment(p: {
    accept?: string
    owner: string
    repo: string
    commentId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForCommitComment(p: {
    accept: string
    owner: string
    repo: string
    commentId: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<
    {
      content?: string
      created_at?: string
      id?: number
      node_id?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForCommitComment(p: {
    accept: string
    owner: string
    repo: string
    commentId: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<{
    content?: string
    created_at?: string
    id?: number
    node_id?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForCommitComment(p: {
    accept: string
    owner: string
    repo: string
    commentId: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListCommits(p: {
    accept?: string
    owner: string
    repo: string
    sha?: string
    path?: string
    author?: string
    since?: string
    until?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      comments_url?: string
      commit?: {
        author?: {
          date?: string
          email?: string
          name?: string
        }
        comment_count?: number
        committer?: {
          date?: string
          email?: string
          name?: string
        }
        message?: string
        tree?: {
          sha?: string
          url?: string
        }
        url?: string
        verification?: {
          payload?: string
          reason?: string
          signature?: string
          verified?: boolean
        }
      }
      committer?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      html_url?: string
      node_id?: string
      parents?: {
        sha?: string
        url?: string
      }[]
      sha?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      sha: p["sha"],
      path: p["path"],
      author: p["author"],
      since: p["since"],
      until: p["until"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/commits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListBranchesForHeadCommit(p: {
    accept: string
    owner: string
    repo: string
    commitSha: string
  }): Observable<
    {
      commit?: {
        sha?: string
        url?: string
      }
      name?: string
      protected?: boolean
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/branches-where-head`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListCommentsForCommit(p: {
    accept?: string
    owner: string
    repo: string
    commitSha: string
    perPage?: number
    page?: number
  }): Observable<
    {
      body?: string
      commit_id?: string
      created_at?: string
      html_url?: string
      id?: number
      line?: number
      node_id?: string
      path?: string
      position?: number
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateCommitComment(p: {
    accept?: string
    owner: string
    repo: string
    commitSha: string
    requestBody: {
      body: string
      line?: number
      path?: string
      position?: number
    }
  }): Observable<{
    body?: string
    commit_id?: string
    created_at?: string
    html_url?: string
    id?: number
    line?: number
    node_id?: string
    path?: string
    position?: number
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListPullRequestsAssociatedWithCommit(p: {
    accept: string
    owner: string
    repo: string
    commitSha: string
    perPage?: number
    page?: number
  }): Observable<
    {
      _links?: {
        comments?: {
          href?: string
        }
        commits?: {
          href?: string
        }
        html?: {
          href?: string
        }
        issue?: {
          href?: string
        }
        review_comment?: {
          href?: string
        }
        review_comments?: {
          href?: string
        }
        self?: {
          href?: string
        }
        statuses?: {
          href?: string
        }
      }
      active_lock_reason?: string
      assignee?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      assignees?: {
        avatar_url: string
        events_url: string
        followers_url: string
        following_url: string
        gists_url: string
        gravatar_id: string
        html_url: string
        id: number
        login: string
        node_id: string
        organizations_url: string
        received_events_url: string
        repos_url: string
        site_admin: boolean
        starred_url: string
        subscriptions_url: string
        type: string
        url: string
      }[]
      author_association?: string
      base?: {
        label?: string
        ref?: string
        repo?: {
          allow_merge_commit?: boolean
          allow_rebase_merge?: boolean
          allow_squash_merge?: boolean
          archive_url?: string
          archived?: boolean
          assignees_url?: string
          blobs_url?: string
          branches_url?: string
          clone_url?: string
          collaborators_url?: string
          comments_url?: string
          commits_url?: string
          compare_url?: string
          contents_url?: string
          contributors_url?: string
          created_at?: string
          default_branch?: string
          delete_branch_on_merge?: boolean
          deployments_url?: string
          description?: string
          disabled?: boolean
          downloads_url?: string
          events_url?: string
          fork?: boolean
          forks_count?: number
          forks_url?: string
          full_name?: string
          git_commits_url?: string
          git_refs_url?: string
          git_tags_url?: string
          git_url?: string
          has_downloads?: boolean
          has_issues?: boolean
          has_pages?: boolean
          has_projects?: boolean
          has_wiki?: boolean
          homepage?: string
          hooks_url?: string
          html_url?: string
          id?: number
          is_template?: boolean
          issue_comment_url?: string
          issue_events_url?: string
          issues_url?: string
          keys_url?: string
          labels_url?: string
          language?: string
          languages_url?: string
          merges_url?: string
          milestones_url?: string
          mirror_url?: string
          name?: string
          network_count?: number
          node_id?: string
          notifications_url?: string
          open_issues_count?: number
          owner?: {
            avatar_url?: string
            events_url?: string
            followers_url?: string
            following_url?: string
            gists_url?: string
            gravatar_id?: string
            html_url?: string
            id?: number
            login?: string
            node_id?: string
            organizations_url?: string
            received_events_url?: string
            repos_url?: string
            site_admin?: boolean
            starred_url?: string
            subscriptions_url?: string
            type?: string
            url?: string
          }
          permissions?: {
            admin?: boolean
            pull?: boolean
            push?: boolean
          }
          private?: boolean
          pulls_url?: string
          pushed_at?: string
          releases_url?: string
          size?: number
          ssh_url?: string
          stargazers_count?: number
          stargazers_url?: string
          statuses_url?: string
          subscribers_count?: number
          subscribers_url?: string
          subscription_url?: string
          svn_url?: string
          tags_url?: string
          teams_url?: string
          temp_clone_token?: string
          template_repository?: string
          topics?: string[]
          trees_url?: string
          updated_at?: string
          url?: string
          visibility?: string
          watchers_count?: number
        }
        sha?: string
        user?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
      }
      body?: string
      closed_at?: string
      comments_url?: string
      commits_url?: string
      created_at?: string
      diff_url?: string
      draft?: boolean
      head?: {
        label?: string
        ref?: string
        repo?: {
          allow_merge_commit?: boolean
          allow_rebase_merge?: boolean
          allow_squash_merge?: boolean
          archive_url?: string
          archived?: boolean
          assignees_url?: string
          blobs_url?: string
          branches_url?: string
          clone_url?: string
          collaborators_url?: string
          comments_url?: string
          commits_url?: string
          compare_url?: string
          contents_url?: string
          contributors_url?: string
          created_at?: string
          default_branch?: string
          delete_branch_on_merge?: boolean
          deployments_url?: string
          description?: string
          disabled?: boolean
          downloads_url?: string
          events_url?: string
          fork?: boolean
          forks_count?: number
          forks_url?: string
          full_name?: string
          git_commits_url?: string
          git_refs_url?: string
          git_tags_url?: string
          git_url?: string
          has_downloads?: boolean
          has_issues?: boolean
          has_pages?: boolean
          has_projects?: boolean
          has_wiki?: boolean
          homepage?: string
          hooks_url?: string
          html_url?: string
          id?: number
          is_template?: boolean
          issue_comment_url?: string
          issue_events_url?: string
          issues_url?: string
          keys_url?: string
          labels_url?: string
          language?: string
          languages_url?: string
          merges_url?: string
          milestones_url?: string
          mirror_url?: string
          name?: string
          network_count?: number
          node_id?: string
          notifications_url?: string
          open_issues_count?: number
          owner?: {
            avatar_url?: string
            events_url?: string
            followers_url?: string
            following_url?: string
            gists_url?: string
            gravatar_id?: string
            html_url?: string
            id?: number
            login?: string
            node_id?: string
            organizations_url?: string
            received_events_url?: string
            repos_url?: string
            site_admin?: boolean
            starred_url?: string
            subscriptions_url?: string
            type?: string
            url?: string
          }
          permissions?: {
            admin?: boolean
            pull?: boolean
            push?: boolean
          }
          private?: boolean
          pulls_url?: string
          pushed_at?: string
          releases_url?: string
          size?: number
          ssh_url?: string
          stargazers_count?: number
          stargazers_url?: string
          statuses_url?: string
          subscribers_count?: number
          subscribers_url?: string
          subscription_url?: string
          svn_url?: string
          tags_url?: string
          teams_url?: string
          temp_clone_token?: string
          template_repository?: string
          topics?: string[]
          trees_url?: string
          updated_at?: string
          url?: string
          visibility?: string
          watchers_count?: number
        }
        sha?: string
        user?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
      }
      html_url?: string
      id?: number
      issue_url?: string
      labels?: {
        color?: string
        default?: boolean
        description?: string
        id?: number
        name?: string
        node_id?: string
        url?: string
      }[]
      locked?: boolean
      merge_commit_sha?: string
      merged_at?: string
      milestone?: {
        closed_at?: string
        closed_issues?: number
        created_at?: string
        creator?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        description?: string
        due_on?: string
        html_url?: string
        id?: number
        labels_url?: string
        node_id?: string
        number?: number
        open_issues?: number
        state?: string
        title?: string
        updated_at?: string
        url?: string
      }
      node_id?: string
      number?: number
      patch_url?: string
      requested_reviewers?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
      requested_teams?: {
        description?: string
        html_url?: string
        id?: number
        members_url?: string
        name?: string
        node_id?: string
        parent?: string
        permission?: string
        privacy?: string
        repositories_url?: string
        slug?: string
        url?: string
      }[]
      review_comment_url?: string
      review_comments_url?: string
      state?: string
      statuses_url?: string
      title?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/pulls`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCommit(p: {
    accept?: string
    owner: string
    repo: string
    ref: string
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    comments_url?: string
    commit?: {
      author?: {
        date?: string
        email?: string
        name?: string
      }
      comment_count?: number
      committer?: {
        date?: string
        email?: string
        name?: string
      }
      message?: string
      tree?: {
        sha?: string
        url?: string
      }
      url?: string
      verification?: {
        payload?: string
        reason?: string
        signature?: string
        verified?: boolean
      }
    }
    committer?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    files?: {
      additions?: number
      blob_url?: string
      changes?: number
      deletions?: number
      filename?: string
      patch?: string
      raw_url?: string
      status?: string
    }[]
    html_url?: string
    node_id?: string
    parents?: {
      sha?: string
      url?: string
    }[]
    sha?: string
    stats?: {
      additions?: number
      deletions?: number
      total?: number
    }
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksListForRef(p: {
    accept: string
    owner: string
    repo: string
    ref: string
    checkName?: string
    status?: "queued" | "in_progress" | "completed"
    filter?: "latest" | "all"
    perPage?: number
    page?: number
  }): Observable<{
    check_runs?: {
      app?: {
        created_at?: string
        description?: string
        events?: string[]
        external_url?: string
        html_url?: string
        id?: number
        name?: string
        node_id?: string
        owner?: {
          avatar_url?: string
          description?: string
          events_url?: string
          hooks_url?: string
          id?: number
          issues_url?: string
          login?: string
          members_url?: string
          node_id?: string
          public_members_url?: string
          repos_url?: string
          url?: string
        }
        permissions?: {
          contents?: string
          issues?: string
          metadata?: string
          single_file?: string
        }
        slug?: string
        updated_at?: string
      }
      check_suite?: {
        id?: number
      }
      completed_at?: string
      conclusion?: string
      details_url?: string
      external_id?: string
      head_sha?: string
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      output?: {
        annotations_count?: number
        annotations_url?: string
        summary?: string
        text?: string
        title?: string
      }
      pull_requests?: {
        base?: {
          ref?: string
          repo?: {
            id?: number
            name?: string
            url?: string
          }
          sha?: string
        }
        head?: {
          ref?: string
          repo?: {
            id?: number
            name?: string
            url?: string
          }
          sha?: string
        }
        id?: number
        number?: number
        url?: string
      }[]
      started_at?: string
      status?: string
      url?: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      check_name: p["checkName"],
      status: p["status"],
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/check-runs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksListSuitesForRef(p: {
    accept: string
    owner: string
    repo: string
    ref: string
    appId?: number
    checkName?: string
    perPage?: number
    page?: number
  }): Observable<{
    check_suites?: {
      after?: string
      app?: {
        created_at?: string
        description?: string
        events?: string[]
        external_url?: string
        html_url?: string
        id?: number
        name?: string
        node_id?: string
        owner?: {
          avatar_url?: string
          description?: string
          events_url?: string
          hooks_url?: string
          id?: number
          issues_url?: string
          login?: string
          members_url?: string
          node_id?: string
          public_members_url?: string
          repos_url?: string
          url?: string
        }
        permissions?: {
          contents?: string
          issues?: string
          metadata?: string
          single_file?: string
        }
        slug?: string
        updated_at?: string
      }
      before?: string
      conclusion?: string
      head_branch?: string
      head_sha?: string
      id?: number
      node_id?: string
      pull_requests?: {
        [key: string]: unknown
      }[]
      repository?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      status?: string
      url?: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      app_id: p["appId"],
      check_name: p["checkName"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/check-suites`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCombinedStatusForRef(p: {
    accept?: string
    owner: string
    repo: string
    ref: string
  }): Observable<{
    commit_url?: string
    repository?: {
      archive_url?: string
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      deployments_url?: string
      description?: string
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      html_url?: string
      id?: number
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      name?: string
      node_id?: string
      notifications_url?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      private?: boolean
      pulls_url?: string
      releases_url?: string
      ssh_url?: string
      stargazers_url?: string
      statuses_url?: string
      subscribers_url?: string
      subscription_url?: string
      tags_url?: string
      teams_url?: string
      trees_url?: string
      url?: string
    }
    sha?: string
    state?: string
    statuses?: {
      avatar_url: string
      context: string
      created_at: string
      description: string
      id: number
      node_id: string
      state: string
      target_url: string
      updated_at: string
      url: string
    }[]
    total_count?: number
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/status`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListCommitStatusesForRef(p: {
    accept?: string
    owner: string
    repo: string
    ref: string
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      context?: string
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      id?: number
      node_id?: string
      state?: string
      target_url?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/statuses`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codesOfConductGetForRepo(p: {
    accept: string
    owner: string
    repo: string
  }): Observable<{
    body?: string
    key?: string
    name?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/community/code_of_conduct`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCommunityProfileMetrics(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    description?: string
    documentation?: boolean
    files?: {
      code_of_conduct?: {
        html_url?: string
        key?: string
        name?: string
        url?: string
      }
      contributing?: {
        html_url?: string
        url?: string
      }
      issue_template?: {
        html_url?: string
        url?: string
      }
      license?: {
        html_url?: string
        key?: string
        name?: string
        spdx_id?: string
        url?: string
      }
      pull_request_template?: {
        html_url?: string
        url?: string
      }
      readme?: {
        html_url?: string
        url?: string
      }
    }
    health_percentage?: number
    updated_at?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/community/profile`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCompareCommits(p: {
    accept?: string
    owner: string
    repo: string
    base: string
    head: string
  }): Observable<{
    ahead_by?: number
    base_commit?: {
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      comments_url?: string
      commit?: {
        author?: {
          date?: string
          email?: string
          name?: string
        }
        comment_count?: number
        committer?: {
          date?: string
          email?: string
          name?: string
        }
        message?: string
        tree?: {
          sha?: string
          url?: string
        }
        url?: string
        verification?: {
          payload?: string
          reason?: string
          signature?: string
          verified?: boolean
        }
      }
      committer?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      html_url?: string
      node_id?: string
      parents?: {
        sha?: string
        url?: string
      }[]
      sha?: string
      url?: string
    }
    behind_by?: number
    commits?: {
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      comments_url?: string
      commit?: {
        author?: {
          date?: string
          email?: string
          name?: string
        }
        comment_count?: number
        committer?: {
          date?: string
          email?: string
          name?: string
        }
        message?: string
        tree?: {
          sha?: string
          url?: string
        }
        url?: string
        verification?: {
          payload?: string
          reason?: string
          signature?: string
          verified?: boolean
        }
      }
      committer?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      html_url?: string
      node_id?: string
      parents?: {
        sha?: string
        url?: string
      }[]
      sha?: string
      url?: string
    }[]
    diff_url?: string
    files?: {
      additions?: number
      blob_url?: string
      changes?: number
      contents_url?: string
      deletions?: number
      filename?: string
      patch?: string
      raw_url?: string
      sha?: string
      status?: string
    }[]
    html_url?: string
    merge_base_commit?: {
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      comments_url?: string
      commit?: {
        author?: {
          date?: string
          email?: string
          name?: string
        }
        comment_count?: number
        committer?: {
          date?: string
          email?: string
          name?: string
        }
        message?: string
        tree?: {
          sha?: string
          url?: string
        }
        url?: string
        verification?: {
          payload?: string
          reason?: string
          signature?: string
          verified?: boolean
        }
      }
      committer?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      html_url?: string
      node_id?: string
      parents?: {
        sha?: string
        url?: string
      }[]
      sha?: string
      url?: string
    }
    patch_url?: string
    permalink_url?: string
    status?: string
    total_commits?: number
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/compare/${p["base"]}...${p["head"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetContent(p: {
    accept?: string
    owner: string
    repo: string
    path: string
    ref?: string
  }): Observable<{
    _links?: {
      git?: string
      html?: string
      self?: string
    }
    content?: string
    download_url?: string
    encoding?: string
    git_url?: string
    html_url?: string
    name?: string
    path?: string
    sha?: string
    size?: number
    type?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { ref: p["ref"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateOrUpdateFileContents(p: {
    accept?: string
    owner: string
    repo: string
    path: string
    requestBody: {
      author?: {
        email: string
        name: string
      }
      branch?: string
      committer?: {
        email: string
        name: string
      }
      content: string
      message: string
      sha?: string
    }
  }): Observable<
    | {
        commit?: {
          author?: {
            date?: string
            email?: string
            name?: string
          }
          committer?: {
            date?: string
            email?: string
            name?: string
          }
          html_url?: string
          message?: string
          node_id?: string
          parents?: {
            html_url?: string
            sha?: string
            url?: string
          }[]
          sha?: string
          tree?: {
            sha?: string
            url?: string
          }
          url?: string
          verification?: {
            payload?: string
            reason?: string
            signature?: string
            verified?: boolean
          }
        }
        content?: {
          _links?: {
            git?: string
            html?: string
            self?: string
          }
          download_url?: string
          git_url?: string
          html_url?: string
          name?: string
          path?: string
          sha?: string
          size?: number
          type?: string
          url?: string
        }
      }
    | {
        commit?: {
          author?: {
            date?: string
            email?: string
            name?: string
          }
          committer?: {
            date?: string
            email?: string
            name?: string
          }
          html_url?: string
          message?: string
          node_id?: string
          parents?: {
            html_url?: string
            sha?: string
            url?: string
          }[]
          sha?: string
          tree?: {
            sha?: string
            url?: string
          }
          url?: string
          verification?: {
            payload?: string
            reason?: string
            signature?: string
            verified?: boolean
          }
        }
        content?: {
          _links?: {
            git?: string
            html?: string
            self?: string
          }
          download_url?: string
          git_url?: string
          html_url?: string
          name?: string
          path?: string
          sha?: string
          size?: number
          type?: string
          url?: string
        }
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteFile(p: {
    accept?: string
    owner: string
    repo: string
    path: string
    requestBody: {
      author?: {
        email?: string
        name?: string
      }
      branch?: string
      committer?: {
        email?: string
        name?: string
      }
      message: string
      sha: string
    }
  }): Observable<{
    commit?: {
      author?: {
        date?: string
        email?: string
        name?: string
      }
      committer?: {
        date?: string
        email?: string
        name?: string
      }
      html_url?: string
      message?: string
      node_id?: string
      parents?: {
        html_url?: string
        sha?: string
        url?: string
      }[]
      sha?: string
      tree?: {
        sha?: string
        url?: string
      }
      url?: string
      verification?: {
        payload?: string
        reason?: string
        signature?: string
        verified?: boolean
      }
    }
    content?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListContributors(p: {
    accept?: string
    owner: string
    repo: string
    anon?: string
    perPage?: number
    page?: number
  }): Observable<
    | {
        avatar_url?: string
        contributions?: number
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
    | void
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      anon: p["anon"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/contributors`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListDeployments(p: {
    accept?: string
    owner: string
    repo: string
    sha?: string
    ref?: string
    task?: string
    environment?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      environment?: string
      id?: number
      node_id?: string
      original_environment?: string
      payload?: {
        deploy?: string
      }
      production_environment?: boolean
      ref?: string
      repository_url?: string
      sha?: string
      statuses_url?: string
      task?: string
      transient_environment?: boolean
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      sha: p["sha"],
      ref: p["ref"],
      task: p["task"],
      environment: p["environment"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/deployments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateDeployment(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      auto_merge?: boolean
      description?: string
      environment?: string
      payload?: string
      production_environment?: boolean
      ref: string
      required_contexts?: string[]
      task?: string
      transient_environment?: boolean
    }
  }): Observable<
    | {
        created_at?: string
        creator?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        description?: string
        environment?: string
        id?: number
        node_id?: string
        original_environment?: string
        payload?: {
          deploy?: string
        }
        production_environment?: boolean
        ref?: string
        repository_url?: string
        sha?: string
        statuses_url?: string
        task?: string
        transient_environment?: boolean
        updated_at?: string
        url?: string
      }
    | {
        message?: string
      }
    | {
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/deployments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetDeployment(p: {
    accept?: string
    owner: string
    repo: string
    deploymentId: number
  }): Observable<{
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    description?: string
    environment?: string
    id?: number
    node_id?: string
    original_environment?: string
    payload?: {
      deploy?: string
    }
    production_environment?: boolean
    ref?: string
    repository_url?: string
    sha?: string
    statuses_url?: string
    task?: string
    transient_environment?: boolean
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteDeployment(p: {
    accept?: string
    owner: string
    repo: string
    deploymentId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListDeploymentStatuses(p: {
    accept?: string
    owner: string
    repo: string
    deploymentId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      deployment_url?: string
      description?: string
      environment?: string
      environment_url?: string
      id?: number
      log_url?: string
      node_id?: string
      repository_url?: string
      state?: string
      target_url?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateDeploymentStatus(p: {
    accept?: string
    owner: string
    repo: string
    deploymentId: number
    requestBody: {
      auto_inactive?: boolean
      description?: string
      environment?: "production" | "staging" | "qa"
      environment_url?: string
      log_url?: string
      state:
        | "error"
        | "failure"
        | "inactive"
        | "in_progress"
        | "queued"
        | "pending"
        | "success"
      target_url?: string
    }
  }): Observable<{
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    deployment_url?: string
    description?: string
    environment?: string
    environment_url?: string
    id?: number
    log_url?: string
    node_id?: string
    repository_url?: string
    state?: string
    target_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetDeploymentStatus(p: {
    accept?: string
    owner: string
    repo: string
    deploymentId: number
    statusId: number
  }): Observable<{
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    deployment_url?: string
    description?: string
    environment?: string
    environment_url?: string
    id?: number
    log_url?: string
    node_id?: string
    repository_url?: string
    state?: string
    target_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses/${p["statusId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateDispatchEvent(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      client_payload?: {
        [key: string]: unknown
      }
      event_type?: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/dispatches`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListRepoEvents(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListForks(p: {
    accept?: string
    owner: string
    repo: string
    sort?: "newest" | "oldest" | "stargazers"
    perPage?: number
    page?: number
  }): Observable<
    {
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      license?: {
        key?: string
        name?: string
        node_id?: string
        spdx_id?: string
        url?: string
      }
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      sort: p["sort"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/forks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateFork(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      organization?: string
    }
  }): Observable<{
    allow_merge_commit?: boolean
    allow_rebase_merge?: boolean
    allow_squash_merge?: boolean
    archive_url?: string
    archived?: boolean
    assignees_url?: string
    blobs_url?: string
    branches_url?: string
    clone_url?: string
    collaborators_url?: string
    comments_url?: string
    commits_url?: string
    compare_url?: string
    contents_url?: string
    contributors_url?: string
    created_at?: string
    default_branch?: string
    delete_branch_on_merge?: boolean
    deployments_url?: string
    description?: string
    disabled?: boolean
    downloads_url?: string
    events_url?: string
    fork?: boolean
    forks_count?: number
    forks_url?: string
    full_name?: string
    git_commits_url?: string
    git_refs_url?: string
    git_tags_url?: string
    git_url?: string
    has_downloads?: boolean
    has_issues?: boolean
    has_pages?: boolean
    has_projects?: boolean
    has_wiki?: boolean
    homepage?: string
    hooks_url?: string
    html_url?: string
    id?: number
    is_template?: boolean
    issue_comment_url?: string
    issue_events_url?: string
    issues_url?: string
    keys_url?: string
    labels_url?: string
    language?: string
    languages_url?: string
    merges_url?: string
    milestones_url?: string
    mirror_url?: string
    name?: string
    network_count?: number
    node_id?: string
    notifications_url?: string
    open_issues_count?: number
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    permissions?: {
      admin?: boolean
      pull?: boolean
      push?: boolean
    }
    private?: boolean
    pulls_url?: string
    pushed_at?: string
    releases_url?: string
    size?: number
    ssh_url?: string
    stargazers_count?: number
    stargazers_url?: string
    statuses_url?: string
    subscribers_count?: number
    subscribers_url?: string
    subscription_url?: string
    svn_url?: string
    tags_url?: string
    teams_url?: string
    temp_clone_token?: string
    template_repository?: string
    topics?: string[]
    trees_url?: string
    updated_at?: string
    url?: string
    visibility?: string
    watchers_count?: number
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/forks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitCreateBlob(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      content: string
      encoding?: string
    }
  }): Observable<{
    sha?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/blobs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitGetBlob(p: {
    accept?: string
    owner: string
    repo: string
    fileSha: string
  }): Observable<{
    content?: string
    encoding?: string
    sha?: string
    size?: number
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/blobs/${p["fileSha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitCreateCommit(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      author?: {
        date?: string
        email?: string
        name?: string
      }
      committer?: {
        date?: string
        email?: string
        name?: string
      }
      message: string
      parents: string[]
      signature?: string
      tree: string
    }
  }): Observable<{
    author?: {
      date?: string
      email?: string
      name?: string
    }
    committer?: {
      date?: string
      email?: string
      name?: string
    }
    message?: string
    node_id?: string
    parents?: {
      sha?: string
      url?: string
    }[]
    sha?: string
    tree?: {
      sha?: string
      url?: string
    }
    url?: string
    verification?: {
      payload?: string
      reason?: string
      signature?: string
      verified?: boolean
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/commits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitGetCommit(p: {
    accept?: string
    owner: string
    repo: string
    commitSha: string
  }): Observable<{
    author?: {
      date?: string
      email?: string
      name?: string
    }
    committer?: {
      date?: string
      email?: string
      name?: string
    }
    message?: string
    node_id?: string
    parents?: {
      sha?: string
      url?: string
    }[]
    sha?: string
    tree?: {
      sha?: string
      url?: string
    }
    url?: string
    verification?: {
      payload?: string
      reason?: string
      signature?: string
      verified?: boolean
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/commits/${p["commitSha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitListMatchingRefs(p: {
    accept?: string
    owner: string
    repo: string
    ref: string
    perPage?: number
    page?: number
  }): Observable<
    {
      node_id?: string
      object?: {
        sha?: string
        type?: string
        url?: string
      }
      ref?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/matching-refs/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitGetRef(p: {
    accept?: string
    owner: string
    repo: string
    ref: string
  }): Observable<{
    node_id?: string
    object?: {
      sha?: string
      type?: string
      url?: string
    }
    ref?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/ref/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitCreateRef(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      ref: string
      sha: string
    }
  }): Observable<{
    node_id?: string
    object?: {
      sha?: string
      type?: string
      url?: string
    }
    ref?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/refs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitUpdateRef(p: {
    accept?: string
    owner: string
    repo: string
    ref: string
    requestBody: {
      force?: boolean
      sha: string
    }
  }): Observable<{
    node_id?: string
    object?: {
      sha?: string
      type?: string
      url?: string
    }
    ref?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/refs/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitDeleteRef(p: {
    accept?: string
    owner: string
    repo: string
    ref: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/refs/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitCreateTag(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      message: string
      object: string
      tag: string
      tagger?: {
        date?: string
        email?: string
        name?: string
      }
      type: "commit" | "tree" | "blob"
    }
  }): Observable<{
    message?: string
    node_id?: string
    object?: {
      sha?: string
      type?: string
      url?: string
    }
    sha?: string
    tag?: string
    tagger?: {
      date?: string
      email?: string
      name?: string
    }
    url?: string
    verification?: {
      payload?: string
      reason?: string
      signature?: string
      verified?: boolean
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/tags`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitGetTag(p: {
    accept?: string
    owner: string
    repo: string
    tagSha: string
  }): Observable<{
    message?: string
    node_id?: string
    object?: {
      sha?: string
      type?: string
      url?: string
    }
    sha?: string
    tag?: string
    tagger?: {
      date?: string
      email?: string
      name?: string
    }
    url?: string
    verification?: {
      payload?: string
      reason?: string
      signature?: string
      verified?: boolean
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/tags/${p["tagSha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitCreateTree(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      base_tree?: string
      tree: {
        content?: string
        mode?: "100644" | "100755" | "040000" | "160000" | "120000"
        path?: string
        sha?: string | null
        type?: "blob" | "tree" | "commit"
      }[]
    }
  }): Observable<{
    sha?: string
    tree?: {
      mode?: string
      path?: string
      sha?: string
      size?: number
      type?: string
      url?: string
    }[]
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/trees`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitGetTree(p: {
    accept?: string
    owner: string
    repo: string
    treeSha: string
    recursive?: string
  }): Observable<{
    sha?: string
    tree?: {
      mode: string
      path: string
      sha: string
      size: number
      type: string
      url: string
    }[]
    truncated?: boolean
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { recursive: p["recursive"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/trees/${p["treeSha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListWebhooks(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      active?: boolean
      config?: {
        content_type?: string
        insecure_ssl?: string
        url?: string
      }
      created_at?: string
      events?: string[]
      id?: number
      last_response?: {
        code?: string
        message?: string
        status?: string
      }
      name?: string
      ping_url?: string
      test_url?: string
      type?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/hooks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateWebhook(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      active?: boolean
      config: {
        content_type?: string
        insecure_ssl?: string
        secret?: string
        url: string
      }
      events?: string[]
      name?: string
    }
  }): Observable<{
    active?: boolean
    config?: {
      content_type?: string
      insecure_ssl?: string
      url?: string
    }
    created_at?: string
    events?: string[]
    id?: number
    last_response?: {
      code?: string
      message?: string
      status?: string
    }
    name?: string
    ping_url?: string
    test_url?: string
    type?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/hooks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetWebhook(p: {
    accept?: string
    owner: string
    repo: string
    hookId: number
  }): Observable<{
    active?: boolean
    config?: {
      content_type?: string
      insecure_ssl?: string
      url?: string
    }
    created_at?: string
    events?: string[]
    id?: number
    last_response?: {
      code?: string
      message?: string
      status?: string
    }
    name?: string
    ping_url?: string
    test_url?: string
    type?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateWebhook(p: {
    accept?: string
    owner: string
    repo: string
    hookId: number
    requestBody: {
      active?: boolean
      add_events?: string[]
      config?: {
        content_type?: string
        insecure_ssl?: string
        secret?: string
        url: string
      }
      events?: string[]
      remove_events?: string[]
    }
  }): Observable<{
    active?: boolean
    config?: {
      content_type?: string
      insecure_ssl?: string
      url?: string
    }
    created_at?: string
    events?: string[]
    id?: number
    last_response?: {
      code?: string
      message?: string
      status?: string
    }
    name?: string
    ping_url?: string
    test_url?: string
    type?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteWebhook(p: {
    accept?: string
    owner: string
    repo: string
    hookId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposPingWebhook(p: {
    accept?: string
    owner: string
    repo: string
    hookId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/pings`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposTestPushWebhook(p: {
    accept?: string
    owner: string
    repo: string
    hookId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/tests`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsStartImport(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      tfvc_project?: string
      vcs?: "subversion" | "git" | "mercurial" | "tfvc"
      vcs_password?: string
      vcs_url: string
      vcs_username?: string
    }
  }): Observable<{
    authors_count?: number
    authors_url?: string
    commit_count?: number
    has_large_files?: boolean
    html_url?: string
    large_files_count?: number
    large_files_size?: number
    percent?: number
    repository_url?: string
    status?: string
    status_text?: string
    url?: string
    use_lfs?: string
    vcs?: string
    vcs_url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetImportStatus(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    authors_count?: number
    authors_url?: string
    has_large_files?: boolean
    html_url?: string
    large_files_count?: number
    large_files_size?: number
    repository_url?: string
    status?: string
    status_text?: string
    url?: string
    use_lfs?: string
    vcs?: string
    vcs_url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsUpdateImport(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      vcs_password?: string
      vcs_username?: string
    }
  }): Observable<{
    authors_url?: string
    html_url?: string
    repository_url?: string
    status?: string
    url?: string
    use_lfs?: string
    vcs?: string
    vcs_url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsCancelImport(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetCommitAuthors(p: {
    accept?: string
    owner: string
    repo: string
    since?: string
  }): Observable<
    {
      email?: string
      id?: number
      import_url?: string
      name?: string
      remote_id?: string
      remote_name?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { since: p["since"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import/authors`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsMapCommitAuthor(p: {
    accept?: string
    owner: string
    repo: string
    authorId: number
    requestBody: {
      email?: string
      name?: string
    }
  }): Observable<{
    email?: string
    id?: number
    import_url?: string
    name?: string
    remote_id?: string
    remote_name?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/import/authors/${p["authorId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetLargeFiles(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<
    {
      oid?: string
      path?: string
      ref_name?: string
      size?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/import/large_files`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsSetLfsPreference(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      use_lfs: "opt_in" | "opt_out"
    }
  }): Observable<{
    authors_count?: number
    authors_url?: string
    has_large_files?: boolean
    html_url?: string
    large_files_count?: number
    large_files_size?: number
    repository_url?: string
    status?: string
    status_text?: string
    url?: string
    use_lfs?: string
    vcs?: string
    vcs_url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import/lfs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetRepoInstallation(p: {
    accept: string
    owner: string
    repo: string
  }): Observable<{
    access_tokens_url?: string
    account?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    app_id?: number
    created_at?: string
    events?: string[]
    html_url?: string
    id?: number
    permissions?: {
      checks?: string
      contents?: string
      metadata?: string
    }
    repositories_url?: string
    repository_selection?: "all" | "selected"
    single_file_name?: string
    target_id?: number
    target_type?: string
    updated_at?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/installation`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsGetRestrictionsForRepo(p: {
    accept: string
    owner: string
    repo: string
  }): Observable<{
    expires_at?: string
    limit?: string
    origin?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsSetRestrictionsForRepo(p: {
    accept: string
    owner: string
    repo: string
    requestBody: {
      limit: "existing_users" | "contributors_only" | "collaborators_only"
    }
  }): Observable<{
    expires_at?: string
    limit?: string
    origin?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsRemoveRestrictionsForRepo(p: {
    accept: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListInvitations(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      html_url?: string
      id?: number
      invitee?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      inviter?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: string
      repository?: {
        archive_url?: string
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        deployments_url?: string
        description?: string
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        html_url?: string
        id?: number
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        name?: string
        node_id?: string
        notifications_url?: string
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        private?: boolean
        pulls_url?: string
        releases_url?: string
        ssh_url?: string
        stargazers_url?: string
        statuses_url?: string
        subscribers_url?: string
        subscription_url?: string
        tags_url?: string
        teams_url?: string
        trees_url?: string
        url?: string
      }
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteInvitation(p: {
    accept?: string
    owner: string
    repo: string
    invitationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/invitations/${p["invitationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateInvitation(p: {
    accept?: string
    owner: string
    repo: string
    invitationId: number
    requestBody: {
      permissions?: "read" | "write" | "maintain" | "triage" | "admin"
    }
  }): Observable<{
    created_at?: string
    html_url?: string
    id?: number
    invitee?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    inviter?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    permissions?: string
    repository?: {
      archive_url?: string
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      deployments_url?: string
      description?: string
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      html_url?: string
      id?: number
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      name?: string
      node_id?: string
      notifications_url?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      private?: boolean
      pulls_url?: string
      releases_url?: string
      ssh_url?: string
      stargazers_url?: string
      statuses_url?: string
      subscribers_url?: string
      subscription_url?: string
      tags_url?: string
      teams_url?: string
      trees_url?: string
      url?: string
    }
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/invitations/${p["invitationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListForRepo(p: {
    accept?: string
    owner: string
    repo: string
    milestone?: string
    state?: "open" | "closed" | "all"
    assignee?: string
    creator?: string
    mentioned?: string
    labels?: string
    sort?: "created" | "updated" | "comments"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      active_lock_reason?: string
      assignee?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      assignees?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
      body?: string
      closed_at?: string
      comments?: number
      comments_url?: string
      created_at?: string
      events_url?: string
      html_url?: string
      id?: number
      labels?: {
        color?: string
        default?: boolean
        description?: string
        id?: number
        name?: string
        node_id?: string
        url?: string
      }[]
      labels_url?: string
      locked?: boolean
      milestone?: {
        closed_at?: string
        closed_issues?: number
        created_at?: string
        creator?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        description?: string
        due_on?: string
        html_url?: string
        id?: number
        labels_url?: string
        node_id?: string
        number?: number
        open_issues?: number
        state?: string
        title?: string
        updated_at?: string
        url?: string
      }
      node_id?: string
      number?: number
      pull_request?: {
        diff_url?: string
        html_url?: string
        patch_url?: string
        url?: string
      }
      repository_url?: string
      state?: string
      title?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      milestone: p["milestone"],
      state: p["state"],
      assignee: p["assignee"],
      creator: p["creator"],
      mentioned: p["mentioned"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesCreate(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      assignee?: string
      assignees?: string[]
      body?: string
      labels?: string[]
      milestone?: number
      title: string
    }
  }): Observable<{
    active_lock_reason?: string
    assignee?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    assignees?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
    body?: string
    closed_at?: string
    closed_by?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    comments?: number
    comments_url?: string
    created_at?: string
    events_url?: string
    html_url?: string
    id?: number
    labels?: {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
    labels_url?: string
    locked?: boolean
    milestone?: {
      closed_at?: string
      closed_issues?: number
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      due_on?: string
      html_url?: string
      id?: number
      labels_url?: string
      node_id?: string
      number?: number
      open_issues?: number
      state?: string
      title?: string
      updated_at?: string
      url?: string
    }
    node_id?: string
    number?: number
    pull_request?: {
      diff_url?: string
      html_url?: string
      patch_url?: string
      url?: string
    }
    repository_url?: string
    state?: string
    title?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListCommentsForRepo(p: {
    accept?: string
    owner: string
    repo: string
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      body?: string
      created_at?: string
      html_url?: string
      id?: number
      node_id?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesGetComment(p: {
    accept?: string
    owner: string
    repo: string
    commentId: number
  }): Observable<{
    body?: string
    created_at?: string
    html_url?: string
    id?: number
    node_id?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesUpdateComment(p: {
    accept?: string
    owner: string
    repo: string
    commentId: number
    requestBody: {
      body: string
    }
  }): Observable<{
    body?: string
    created_at?: string
    html_url?: string
    id?: number
    node_id?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesDeleteComment(p: {
    accept?: string
    owner: string
    repo: string
    commentId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForIssueComment(p: {
    accept: string
    owner: string
    repo: string
    commentId: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<
    {
      content?: string
      created_at?: string
      id?: number
      node_id?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForIssueComment(p: {
    accept: string
    owner: string
    repo: string
    commentId: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<{
    content?: string
    created_at?: string
    id?: number
    node_id?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForIssueComment(p: {
    accept: string
    owner: string
    repo: string
    commentId: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListEventsForRepo(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      actor?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      commit_id?: string
      commit_url?: string
      created_at?: string
      event?: string
      id?: number
      issue?: {
        active_lock_reason?: string
        assignee?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        assignees?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }[]
        body?: string
        closed_at?: string
        comments?: number
        comments_url?: string
        created_at?: string
        events_url?: string
        html_url?: string
        id?: number
        labels?: {
          color?: string
          default?: boolean
          description?: string
          id?: number
          name?: string
          node_id?: string
          url?: string
        }[]
        labels_url?: string
        locked?: boolean
        milestone?: {
          closed_at?: string
          closed_issues?: number
          created_at?: string
          creator?: {
            avatar_url?: string
            events_url?: string
            followers_url?: string
            following_url?: string
            gists_url?: string
            gravatar_id?: string
            html_url?: string
            id?: number
            login?: string
            node_id?: string
            organizations_url?: string
            received_events_url?: string
            repos_url?: string
            site_admin?: boolean
            starred_url?: string
            subscriptions_url?: string
            type?: string
            url?: string
          }
          description?: string
          due_on?: string
          html_url?: string
          id?: number
          labels_url?: string
          node_id?: string
          number?: number
          open_issues?: number
          state?: string
          title?: string
          updated_at?: string
          url?: string
        }
        node_id?: string
        number?: number
        pull_request?: {
          diff_url?: string
          html_url?: string
          patch_url?: string
          url?: string
        }
        repository_url?: string
        state?: string
        title?: string
        updated_at?: string
        url?: string
        user?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
      }
      node_id?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/issues/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesGetEvent(p: {
    accept?: string
    owner: string
    repo: string
    eventId: number
  }): Observable<{
    actor?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    commit_id?: string
    commit_url?: string
    created_at?: string
    event?: string
    id?: number
    issue?: {
      active_lock_reason?: string
      assignee?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      assignees?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
      body?: string
      closed_at?: string
      comments?: number
      comments_url?: string
      created_at?: string
      events_url?: string
      html_url?: string
      id?: number
      labels?: {
        color?: string
        default?: boolean
        description?: string
        id?: number
        name?: string
        node_id?: string
        url?: string
      }[]
      labels_url?: string
      locked?: boolean
      milestone?: {
        closed_at?: string
        closed_issues?: number
        created_at?: string
        creator?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        description?: string
        due_on?: string
        html_url?: string
        id?: number
        labels_url?: string
        node_id?: string
        number?: number
        open_issues?: number
        state?: string
        title?: string
        updated_at?: string
        url?: string
      }
      node_id?: string
      number?: number
      pull_request?: {
        diff_url?: string
        html_url?: string
        patch_url?: string
        url?: string
      }
      repository_url?: string
      state?: string
      title?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }
    node_id?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/events/${p["eventId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesGet(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
  }): Observable<{
    active_lock_reason?: string
    assignee?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    assignees?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
    body?: string
    closed_at?: string
    closed_by?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    comments?: number
    comments_url?: string
    created_at?: string
    events_url?: string
    html_url?: string
    id?: number
    labels?: {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
    labels_url?: string
    locked?: boolean
    milestone?: {
      closed_at?: string
      closed_issues?: number
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      due_on?: string
      html_url?: string
      id?: number
      labels_url?: string
      node_id?: string
      number?: number
      open_issues?: number
      state?: string
      title?: string
      updated_at?: string
      url?: string
    }
    node_id?: string
    number?: number
    pull_request?: {
      diff_url?: string
      html_url?: string
      patch_url?: string
      url?: string
    }
    repository_url?: string
    state?: string
    title?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesUpdate(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
    requestBody: {
      assignee?: string
      assignees?: string[]
      body?: string
      labels?: string[]
      milestone?: number | null
      state?: "open" | "closed"
      title?: string
    }
  }): Observable<{
    active_lock_reason?: string
    assignee?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    assignees?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
    body?: string
    closed_at?: string
    closed_by?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    comments?: number
    comments_url?: string
    created_at?: string
    events_url?: string
    html_url?: string
    id?: number
    labels?: {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
    labels_url?: string
    locked?: boolean
    milestone?: {
      closed_at?: string
      closed_issues?: number
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      due_on?: string
      html_url?: string
      id?: number
      labels_url?: string
      node_id?: string
      number?: number
      open_issues?: number
      state?: string
      title?: string
      updated_at?: string
      url?: string
    }
    node_id?: string
    number?: number
    pull_request?: {
      diff_url?: string
      html_url?: string
      patch_url?: string
      url?: string
    }
    repository_url?: string
    state?: string
    title?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesAddAssignees(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
    requestBody: {
      assignees?: string[]
    }
  }): Observable<{
    active_lock_reason?: string
    assignee?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    assignees?: {
      avatar_url: string
      events_url: string
      followers_url: string
      following_url: string
      gists_url: string
      gravatar_id: string
      html_url: string
      id: number
      login: string
      node_id: string
      organizations_url: string
      received_events_url: string
      repos_url: string
      site_admin: boolean
      starred_url: string
      subscriptions_url: string
      type: string
      url: string
    }[]
    body?: string
    closed_at?: string
    comments?: number
    comments_url?: string
    created_at?: string
    events_url?: string
    html_url?: string
    id?: number
    labels?: {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
    labels_url?: string
    locked?: boolean
    milestone?: {
      closed_at?: string
      closed_issues?: number
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      due_on?: string
      html_url?: string
      id?: number
      labels_url?: string
      node_id?: string
      number?: number
      open_issues?: number
      state?: string
      title?: string
      updated_at?: string
      url?: string
    }
    node_id?: string
    number?: number
    pull_request?: {
      diff_url?: string
      html_url?: string
      patch_url?: string
      url?: string
    }
    repository_url?: string
    state?: string
    title?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/assignees`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesRemoveAssignees(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
    requestBody: {
      assignees?: string[]
    }
  }): Observable<{
    active_lock_reason?: string
    assignee?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    assignees?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
    body?: string
    closed_at?: string
    comments?: number
    comments_url?: string
    created_at?: string
    events_url?: string
    html_url?: string
    id?: number
    labels?: {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
    labels_url?: string
    locked?: boolean
    milestone?: {
      closed_at?: string
      closed_issues?: number
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      due_on?: string
      html_url?: string
      id?: number
      labels_url?: string
      node_id?: string
      number?: number
      open_issues?: number
      state?: string
      title?: string
      updated_at?: string
      url?: string
    }
    node_id?: string
    number?: number
    pull_request?: {
      diff_url?: string
      html_url?: string
      patch_url?: string
      url?: string
    }
    repository_url?: string
    state?: string
    title?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/assignees`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListComments(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      body?: string
      created_at?: string
      html_url?: string
      id?: number
      node_id?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesCreateComment(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
    requestBody: {
      body: string
    }
  }): Observable<{
    body?: string
    created_at?: string
    html_url?: string
    id?: number
    node_id?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListEvents(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
    perPage?: number
    page?: number
  }): Observable<
    {
      actor?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      commit_id?: string
      commit_url?: string
      created_at?: string
      event?: string
      id?: number
      node_id?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListLabelsOnIssue(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
    perPage?: number
    page?: number
  }): Observable<
    {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesAddLabels(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
    requestBody: {
      labels: string[]
    }
  }): Observable<
    {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesSetLabels(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
    requestBody: {
      labels?: string[]
    }
  }): Observable<
    {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesRemoveAllLabels(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesRemoveLabel(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
    name: string
  }): Observable<
    {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesLock(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
    requestBody: {
      lock_reason?: "off-topic" | "too heated" | "resolved" | "spam"
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/lock`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesUnlock(p: {
    accept?: string
    owner: string
    repo: string
    issueNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/lock`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForIssue(p: {
    accept: string
    owner: string
    repo: string
    issueNumber: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<
    {
      content?: string
      created_at?: string
      id?: number
      node_id?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForIssue(p: {
    accept: string
    owner: string
    repo: string
    issueNumber: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<{
    content?: string
    created_at?: string
    id?: number
    node_id?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForIssue(p: {
    accept: string
    owner: string
    repo: string
    issueNumber: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListEventsForTimeline(p: {
    accept: string
    owner: string
    repo: string
    issueNumber: number
    perPage?: number
    page?: number
  }): Observable<
    {
      actor?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      commit_id?: string
      commit_url?: string
      created_at?: string
      event?: string
      id?: number
      node_id?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/timeline`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListDeployKeys(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      id?: number
      key?: string
      read_only?: boolean
      title?: string
      url?: string
      verified?: boolean
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateDeployKey(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      key: string
      read_only?: boolean
      title?: string
    }
  }): Observable<{
    created_at?: string
    id?: number
    key?: string
    read_only?: boolean
    title?: string
    url?: string
    verified?: boolean
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetDeployKey(p: {
    accept?: string
    owner: string
    repo: string
    keyId: number
  }): Observable<{
    created_at?: string
    id?: number
    key?: string
    read_only?: boolean
    title?: string
    url?: string
    verified?: boolean
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/keys/${p["keyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteDeployKey(p: {
    accept?: string
    owner: string
    repo: string
    keyId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/keys/${p["keyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListLabelsForRepo(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesCreateLabel(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      color: string
      description?: string
      name: string
    }
  }): Observable<{
    color?: string
    default?: boolean
    description?: string
    id?: number
    name?: string
    node_id?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesGetLabel(p: {
    accept?: string
    owner: string
    repo: string
    name: string
  }): Observable<{
    color?: string
    default?: boolean
    description?: string
    id?: number
    name?: string
    node_id?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesUpdateLabel(p: {
    accept?: string
    owner: string
    repo: string
    name: string
    requestBody: {
      color?: string
      description?: string
      new_name?: string
    }
  }): Observable<{
    color?: string
    default?: boolean
    description?: string
    id?: number
    name?: string
    node_id?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesDeleteLabel(p: {
    accept?: string
    owner: string
    repo: string
    name: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListLanguages(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    C?: number
    Python?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/languages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  licensesGetForRepo(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    _links?: {
      git?: string
      html?: string
      self?: string
    }
    content?: string
    download_url?: string
    encoding?: string
    git_url?: string
    html_url?: string
    license?: {
      key?: string
      name?: string
      node_id?: string
      spdx_id?: string
      url?: string
    }
    name?: string
    path?: string
    sha?: string
    size?: number
    type?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/license`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposMerge(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      base: string
      commit_message?: string
      head: string
    }
  }): Observable<
    | {
        author?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        comments_url?: string
        commit?: {
          author?: {
            date?: string
            email?: string
            name?: string
          }
          comment_count?: number
          committer?: {
            date?: string
            email?: string
            name?: string
          }
          message?: string
          tree?: {
            sha?: string
            url?: string
          }
          url?: string
          verification?: {
            payload?: string
            reason?: string
            signature?: string
            verified?: boolean
          }
        }
        committer?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        html_url?: string
        node_id?: string
        parents?: {
          sha: string
          url: string
        }[]
        sha?: string
        url?: string
      }
    | {
        message?: string
      }
    | {
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/merges`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListMilestones(p: {
    accept?: string
    owner: string
    repo: string
    state?: "open" | "closed" | "all"
    sort?: "due_on" | "completeness"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    {
      closed_at?: string
      closed_issues?: number
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      due_on?: string
      html_url?: string
      id?: number
      labels_url?: string
      node_id?: string
      number?: number
      open_issues?: number
      state?: string
      title?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      state: p["state"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/milestones`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesCreateMilestone(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      description?: string
      due_on?: string
      state?: "open" | "closed"
      title: string
    }
  }): Observable<{
    closed_at?: string
    closed_issues?: number
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    description?: string
    due_on?: string
    html_url?: string
    id?: number
    labels_url?: string
    node_id?: string
    number?: number
    open_issues?: number
    state?: string
    title?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/milestones`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesGetMilestone(p: {
    accept?: string
    owner: string
    repo: string
    milestoneNumber: number
  }): Observable<{
    closed_at?: string
    closed_issues?: number
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    description?: string
    due_on?: string
    html_url?: string
    id?: number
    labels_url?: string
    node_id?: string
    number?: number
    open_issues?: number
    state?: string
    title?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesUpdateMilestone(p: {
    accept?: string
    owner: string
    repo: string
    milestoneNumber: number
    requestBody: {
      description?: string
      due_on?: string
      state?: "open" | "closed"
      title?: string
    }
  }): Observable<{
    closed_at?: string
    closed_issues?: number
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    description?: string
    due_on?: string
    html_url?: string
    id?: number
    labels_url?: string
    node_id?: string
    number?: number
    open_issues?: number
    state?: string
    title?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesDeleteMilestone(p: {
    accept?: string
    owner: string
    repo: string
    milestoneNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListLabelsForMilestone(p: {
    accept?: string
    owner: string
    repo: string
    milestoneNumber: number
    perPage?: number
    page?: number
  }): Observable<
    {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListRepoNotificationsForAuthenticatedUser(p: {
    accept?: string
    owner: string
    repo: string
    all?: boolean
    participating?: boolean
    since?: string
    before?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      id?: string
      last_read_at?: string
      reason?: string
      repository?: {
        archive_url?: string
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        deployments_url?: string
        description?: string
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        html_url?: string
        id?: number
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        name?: string
        node_id?: string
        notifications_url?: string
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        private?: boolean
        pulls_url?: string
        releases_url?: string
        ssh_url?: string
        stargazers_url?: string
        statuses_url?: string
        subscribers_url?: string
        subscription_url?: string
        tags_url?: string
        teams_url?: string
        trees_url?: string
        url?: string
      }
      subject?: {
        latest_comment_url?: string
        title?: string
        type?: string
        url?: string
      }
      unread?: boolean
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      all: p["all"],
      participating: p["participating"],
      since: p["since"],
      before: p["before"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/notifications`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityMarkRepoNotificationsAsRead(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      last_read_at?: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/notifications`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetPages(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    cname?: string
    custom_404?: boolean
    html_url?: string
    source?: {
      branch?: string
      directory?: string
    }
    status?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreatePagesSite(p: {
    accept: string
    owner: string
    repo: string
    requestBody: {
      source?: {
        branch?: "master" | "gh-pages"
        path?: string
      }
    }
  }): Observable<{
    cname?: string
    custom_404?: boolean
    html_url?: string
    source?: {
      branch?: string
      directory?: string
    }
    status?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeletePagesSite(p: {
    accept: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateInformationAboutPagesSite(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      cname?: string
      source?: "gh-pages" | "master" | "master /docs"
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRequestPagesBuild(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    status?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages/builds`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListPagesBuilds(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      commit?: string
      created_at?: string
      duration?: number
      error?: {
        message?: string
      }
      pusher?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      status?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages/builds`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetLatestPagesBuild(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    commit?: string
    created_at?: string
    duration?: number
    error?: {
      message?: string
    }
    pusher?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    status?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pages/builds/latest`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetPagesBuild(p: {
    accept?: string
    owner: string
    repo: string
    buildId: number
  }): Observable<{
    commit?: string
    created_at?: string
    duration?: number
    error?: {
      message?: string
    }
    pusher?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    status?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pages/builds/${p["buildId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListForRepo(p: {
    accept: string
    owner: string
    repo: string
    state?: "open" | "closed" | "all"
    perPage?: number
    page?: number
  }): Observable<
    {
      body?: string
      columns_url?: string
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      number?: number
      owner_url?: string
      state?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsCreateForRepo(p: {
    accept: string
    owner: string
    repo: string
    requestBody: {
      body?: string
      name: string
    }
  }): Observable<{
    body?: string
    columns_url?: string
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    number?: number
    owner_url?: string
    state?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsList(p: {
    accept?: string
    owner: string
    repo: string
    state?: "open" | "closed" | "all"
    head?: string
    base?: string
    sort?: "created" | "updated" | "popularity" | "long-running"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    {
      _links?: {
        comments?: {
          href?: string
        }
        commits?: {
          href?: string
        }
        html?: {
          href?: string
        }
        issue?: {
          href?: string
        }
        review_comment?: {
          href?: string
        }
        review_comments?: {
          href?: string
        }
        self?: {
          href?: string
        }
        statuses?: {
          href?: string
        }
      }
      active_lock_reason?: string
      assignee?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      assignees?: {
        avatar_url: string
        events_url: string
        followers_url: string
        following_url: string
        gists_url: string
        gravatar_id: string
        html_url: string
        id: number
        login: string
        node_id: string
        organizations_url: string
        received_events_url: string
        repos_url: string
        site_admin: boolean
        starred_url: string
        subscriptions_url: string
        type: string
        url: string
      }[]
      author_association?: string
      base?: {
        label?: string
        ref?: string
        repo?: {
          allow_merge_commit?: boolean
          allow_rebase_merge?: boolean
          allow_squash_merge?: boolean
          archive_url?: string
          archived?: boolean
          assignees_url?: string
          blobs_url?: string
          branches_url?: string
          clone_url?: string
          collaborators_url?: string
          comments_url?: string
          commits_url?: string
          compare_url?: string
          contents_url?: string
          contributors_url?: string
          created_at?: string
          default_branch?: string
          delete_branch_on_merge?: boolean
          deployments_url?: string
          description?: string
          disabled?: boolean
          downloads_url?: string
          events_url?: string
          fork?: boolean
          forks_count?: number
          forks_url?: string
          full_name?: string
          git_commits_url?: string
          git_refs_url?: string
          git_tags_url?: string
          git_url?: string
          has_downloads?: boolean
          has_issues?: boolean
          has_pages?: boolean
          has_projects?: boolean
          has_wiki?: boolean
          homepage?: string
          hooks_url?: string
          html_url?: string
          id?: number
          is_template?: boolean
          issue_comment_url?: string
          issue_events_url?: string
          issues_url?: string
          keys_url?: string
          labels_url?: string
          language?: string
          languages_url?: string
          merges_url?: string
          milestones_url?: string
          mirror_url?: string
          name?: string
          network_count?: number
          node_id?: string
          notifications_url?: string
          open_issues_count?: number
          owner?: {
            avatar_url?: string
            events_url?: string
            followers_url?: string
            following_url?: string
            gists_url?: string
            gravatar_id?: string
            html_url?: string
            id?: number
            login?: string
            node_id?: string
            organizations_url?: string
            received_events_url?: string
            repos_url?: string
            site_admin?: boolean
            starred_url?: string
            subscriptions_url?: string
            type?: string
            url?: string
          }
          permissions?: {
            admin?: boolean
            pull?: boolean
            push?: boolean
          }
          private?: boolean
          pulls_url?: string
          pushed_at?: string
          releases_url?: string
          size?: number
          ssh_url?: string
          stargazers_count?: number
          stargazers_url?: string
          statuses_url?: string
          subscribers_count?: number
          subscribers_url?: string
          subscription_url?: string
          svn_url?: string
          tags_url?: string
          teams_url?: string
          temp_clone_token?: string
          template_repository?: string
          topics?: string[]
          trees_url?: string
          updated_at?: string
          url?: string
          visibility?: string
          watchers_count?: number
        }
        sha?: string
        user?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
      }
      body?: string
      closed_at?: string
      comments_url?: string
      commits_url?: string
      created_at?: string
      diff_url?: string
      draft?: boolean
      head?: {
        label?: string
        ref?: string
        repo?: {
          allow_merge_commit?: boolean
          allow_rebase_merge?: boolean
          allow_squash_merge?: boolean
          archive_url?: string
          archived?: boolean
          assignees_url?: string
          blobs_url?: string
          branches_url?: string
          clone_url?: string
          collaborators_url?: string
          comments_url?: string
          commits_url?: string
          compare_url?: string
          contents_url?: string
          contributors_url?: string
          created_at?: string
          default_branch?: string
          delete_branch_on_merge?: boolean
          deployments_url?: string
          description?: string
          disabled?: boolean
          downloads_url?: string
          events_url?: string
          fork?: boolean
          forks_count?: number
          forks_url?: string
          full_name?: string
          git_commits_url?: string
          git_refs_url?: string
          git_tags_url?: string
          git_url?: string
          has_downloads?: boolean
          has_issues?: boolean
          has_pages?: boolean
          has_projects?: boolean
          has_wiki?: boolean
          homepage?: string
          hooks_url?: string
          html_url?: string
          id?: number
          is_template?: boolean
          issue_comment_url?: string
          issue_events_url?: string
          issues_url?: string
          keys_url?: string
          labels_url?: string
          language?: string
          languages_url?: string
          merges_url?: string
          milestones_url?: string
          mirror_url?: string
          name?: string
          network_count?: number
          node_id?: string
          notifications_url?: string
          open_issues_count?: number
          owner?: {
            avatar_url?: string
            events_url?: string
            followers_url?: string
            following_url?: string
            gists_url?: string
            gravatar_id?: string
            html_url?: string
            id?: number
            login?: string
            node_id?: string
            organizations_url?: string
            received_events_url?: string
            repos_url?: string
            site_admin?: boolean
            starred_url?: string
            subscriptions_url?: string
            type?: string
            url?: string
          }
          permissions?: {
            admin?: boolean
            pull?: boolean
            push?: boolean
          }
          private?: boolean
          pulls_url?: string
          pushed_at?: string
          releases_url?: string
          size?: number
          ssh_url?: string
          stargazers_count?: number
          stargazers_url?: string
          statuses_url?: string
          subscribers_count?: number
          subscribers_url?: string
          subscription_url?: string
          svn_url?: string
          tags_url?: string
          teams_url?: string
          temp_clone_token?: string
          template_repository?: string
          topics?: string[]
          trees_url?: string
          updated_at?: string
          url?: string
          visibility?: string
          watchers_count?: number
        }
        sha?: string
        user?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
      }
      html_url?: string
      id?: number
      issue_url?: string
      labels?: {
        color?: string
        default?: boolean
        description?: string
        id?: number
        name?: string
        node_id?: string
        url?: string
      }[]
      locked?: boolean
      merge_commit_sha?: string
      merged_at?: string
      milestone?: {
        closed_at?: string
        closed_issues?: number
        created_at?: string
        creator?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        description?: string
        due_on?: string
        html_url?: string
        id?: number
        labels_url?: string
        node_id?: string
        number?: number
        open_issues?: number
        state?: string
        title?: string
        updated_at?: string
        url?: string
      }
      node_id?: string
      number?: number
      patch_url?: string
      requested_reviewers?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
      requested_teams?: {
        description?: string
        html_url?: string
        id?: number
        members_url?: string
        name?: string
        node_id?: string
        parent?: string
        permission?: string
        privacy?: string
        repositories_url?: string
        slug?: string
        url?: string
      }[]
      review_comment_url?: string
      review_comments_url?: string
      state?: string
      statuses_url?: string
      title?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      state: p["state"],
      head: p["head"],
      base: p["base"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pulls`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsCreate(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      base: string
      body?: string
      draft?: boolean
      head: string
      maintainer_can_modify?: boolean
      title: string
    }
  }): Observable<{
    _links?: {
      comments?: {
        href?: string
      }
      commits?: {
        href?: string
      }
      html?: {
        href?: string
      }
      issue?: {
        href?: string
      }
      review_comment?: {
        href?: string
      }
      review_comments?: {
        href?: string
      }
      self?: {
        href?: string
      }
      statuses?: {
        href?: string
      }
    }
    active_lock_reason?: string
    additions?: number
    assignee?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    assignees?: {
      avatar_url: string
      events_url: string
      followers_url: string
      following_url: string
      gists_url: string
      gravatar_id: string
      html_url: string
      id: number
      login: string
      node_id: string
      organizations_url: string
      received_events_url: string
      repos_url: string
      site_admin: boolean
      starred_url: string
      subscriptions_url: string
      type: string
      url: string
    }[]
    author_association?: string
    base?: {
      label?: string
      ref?: string
      repo?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      sha?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }
    body?: string
    changed_files?: number
    closed_at?: string
    comments?: number
    comments_url?: string
    commits?: number
    commits_url?: string
    created_at?: string
    deletions?: number
    diff_url?: string
    draft?: boolean
    head?: {
      label?: string
      ref?: string
      repo?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      sha?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }
    html_url?: string
    id?: number
    issue_url?: string
    labels?: {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
    locked?: boolean
    maintainer_can_modify?: boolean
    merge_commit_sha?: string
    mergeable?: boolean
    mergeable_state?: string
    merged?: boolean
    merged_at?: string
    merged_by?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    milestone?: {
      closed_at?: string
      closed_issues?: number
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      due_on?: string
      html_url?: string
      id?: number
      labels_url?: string
      node_id?: string
      number?: number
      open_issues?: number
      state?: string
      title?: string
      updated_at?: string
      url?: string
    }
    node_id?: string
    number?: number
    patch_url?: string
    rebaseable?: boolean
    requested_reviewers?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
    requested_teams?: {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
    review_comment_url?: string
    review_comments?: number
    review_comments_url?: string
    state?: string
    statuses_url?: string
    title?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pulls`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListReviewCommentsForRepo(p: {
    accept?: string
    owner: string
    repo: string
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      _links?: {
        html?: {
          href?: string
        }
        pull_request?: {
          href?: string
        }
        self?: {
          href?: string
        }
      }
      author_association?: string
      body?: string
      commit_id?: string
      created_at?: string
      diff_hunk?: string
      html_url?: string
      id?: number
      in_reply_to_id?: number
      line?: number
      node_id?: string
      original_commit_id?: string
      original_line?: number
      original_position?: number
      original_start_line?: number
      path?: string
      position?: number
      pull_request_review_id?: number
      pull_request_url?: string
      side?: string
      start_line?: number
      start_side?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pulls/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsGetReviewComment(p: {
    accept?: string
    owner: string
    repo: string
    commentId: number
  }): Observable<{
    _links?: {
      html?: {
        href?: string
      }
      pull_request?: {
        href?: string
      }
      self?: {
        href?: string
      }
    }
    author_association?: string
    body?: string
    commit_id?: string
    created_at?: string
    diff_hunk?: string
    html_url?: string
    id?: number
    in_reply_to_id?: number
    line?: number
    node_id?: string
    original_commit_id?: string
    original_line?: number
    original_position?: number
    original_start_line?: number
    path?: string
    position?: number
    pull_request_review_id?: number
    pull_request_url?: string
    side?: string
    start_line?: number
    start_side?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsUpdateReviewComment(p: {
    accept?: string
    owner: string
    repo: string
    commentId: number
    requestBody: {
      body: string
    }
  }): Observable<{
    _links?: {
      html?: {
        href?: string
      }
      pull_request?: {
        href?: string
      }
      self?: {
        href?: string
      }
    }
    author_association?: string
    body?: string
    commit_id?: string
    created_at?: string
    diff_hunk?: string
    html_url?: string
    id?: number
    in_reply_to_id?: number
    line?: number
    node_id?: string
    original_commit_id?: string
    original_line?: number
    original_position?: number
    original_start_line?: number
    path?: string
    position?: number
    pull_request_review_id?: number
    pull_request_url?: string
    side?: string
    start_line?: number
    start_side?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsDeleteReviewComment(p: {
    accept?: string
    owner: string
    repo: string
    commentId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForPullRequestReviewComment(p: {
    accept: string
    owner: string
    repo: string
    commentId: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<
    {
      content?: string
      created_at?: string
      id?: number
      node_id?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForPullRequestReviewComment(p: {
    accept: string
    owner: string
    repo: string
    commentId: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<{
    content?: string
    created_at?: string
    id?: number
    node_id?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForPullRequestComment(p: {
    accept: string
    owner: string
    repo: string
    commentId: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsGet(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
  }): Observable<{
    _links?: {
      comments?: {
        href?: string
      }
      commits?: {
        href?: string
      }
      html?: {
        href?: string
      }
      issue?: {
        href?: string
      }
      review_comment?: {
        href?: string
      }
      review_comments?: {
        href?: string
      }
      self?: {
        href?: string
      }
      statuses?: {
        href?: string
      }
    }
    active_lock_reason?: string
    additions?: number
    assignee?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    assignees?: {
      avatar_url: string
      events_url: string
      followers_url: string
      following_url: string
      gists_url: string
      gravatar_id: string
      html_url: string
      id: number
      login: string
      node_id: string
      organizations_url: string
      received_events_url: string
      repos_url: string
      site_admin: boolean
      starred_url: string
      subscriptions_url: string
      type: string
      url: string
    }[]
    author_association?: string
    base?: {
      label?: string
      ref?: string
      repo?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      sha?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }
    body?: string
    changed_files?: number
    closed_at?: string
    comments?: number
    comments_url?: string
    commits?: number
    commits_url?: string
    created_at?: string
    deletions?: number
    diff_url?: string
    draft?: boolean
    head?: {
      label?: string
      ref?: string
      repo?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      sha?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }
    html_url?: string
    id?: number
    issue_url?: string
    labels?: {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
    locked?: boolean
    maintainer_can_modify?: boolean
    merge_commit_sha?: string
    mergeable?: boolean
    mergeable_state?: string
    merged?: boolean
    merged_at?: string
    merged_by?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    milestone?: {
      closed_at?: string
      closed_issues?: number
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      due_on?: string
      html_url?: string
      id?: number
      labels_url?: string
      node_id?: string
      number?: number
      open_issues?: number
      state?: string
      title?: string
      updated_at?: string
      url?: string
    }
    node_id?: string
    number?: number
    patch_url?: string
    rebaseable?: boolean
    requested_reviewers?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
    requested_teams?: {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
    review_comment_url?: string
    review_comments?: number
    review_comments_url?: string
    state?: string
    statuses_url?: string
    title?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsUpdate(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    requestBody: {
      base?: string
      body?: string
      maintainer_can_modify?: boolean
      state?: "open" | "closed"
      title?: string
    }
  }): Observable<{
    _links?: {
      comments?: {
        href?: string
      }
      commits?: {
        href?: string
      }
      html?: {
        href?: string
      }
      issue?: {
        href?: string
      }
      review_comment?: {
        href?: string
      }
      review_comments?: {
        href?: string
      }
      self?: {
        href?: string
      }
      statuses?: {
        href?: string
      }
    }
    active_lock_reason?: string
    additions?: number
    assignee?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    assignees?: {
      avatar_url: string
      events_url: string
      followers_url: string
      following_url: string
      gists_url: string
      gravatar_id: string
      html_url: string
      id: number
      login: string
      node_id: string
      organizations_url: string
      received_events_url: string
      repos_url: string
      site_admin: boolean
      starred_url: string
      subscriptions_url: string
      type: string
      url: string
    }[]
    author_association?: string
    base?: {
      label?: string
      ref?: string
      repo?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      sha?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }
    body?: string
    changed_files?: number
    closed_at?: string
    comments?: number
    comments_url?: string
    commits?: number
    commits_url?: string
    created_at?: string
    deletions?: number
    diff_url?: string
    draft?: boolean
    head?: {
      label?: string
      ref?: string
      repo?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      sha?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }
    html_url?: string
    id?: number
    issue_url?: string
    labels?: {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
    locked?: boolean
    maintainer_can_modify?: boolean
    merge_commit_sha?: string
    mergeable?: boolean
    mergeable_state?: string
    merged?: boolean
    merged_at?: string
    merged_by?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    milestone?: {
      closed_at?: string
      closed_issues?: number
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      due_on?: string
      html_url?: string
      id?: number
      labels_url?: string
      node_id?: string
      number?: number
      open_issues?: number
      state?: string
      title?: string
      updated_at?: string
      url?: string
    }
    node_id?: string
    number?: number
    patch_url?: string
    rebaseable?: boolean
    requested_reviewers?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
    requested_teams?: {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
    review_comment_url?: string
    review_comments?: number
    review_comments_url?: string
    state?: string
    statuses_url?: string
    title?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListReviewComments(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      _links?: {
        html?: {
          href?: string
        }
        pull_request?: {
          href?: string
        }
        self?: {
          href?: string
        }
      }
      author_association?: string
      body?: string
      commit_id?: string
      created_at?: string
      diff_hunk?: string
      html_url?: string
      id?: number
      in_reply_to_id?: number
      line?: number
      node_id?: string
      original_commit_id?: string
      original_line?: number
      original_position?: number
      original_start_line?: number
      path?: string
      position?: number
      pull_request_review_id?: number
      pull_request_url?: string
      side?: string
      start_line?: number
      start_side?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsCreateReviewComment(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    requestBody: {
      body: string
      commit_id: string
      line?: number
      path: string
      position?: number
      side?: "LEFT" | "RIGHT"
      start_line?: number
      start_side?: "LEFT" | "RIGHT" | "side"
    }
  }): Observable<{
    _links?: {
      html?: {
        href?: string
      }
      pull_request?: {
        href?: string
      }
      self?: {
        href?: string
      }
    }
    author_association?: string
    body?: string
    commit_id?: string
    created_at?: string
    diff_hunk?: string
    html_url?: string
    id?: number
    in_reply_to_id?: number
    line?: number
    node_id?: string
    original_commit_id?: string
    original_line?: number
    original_position?: number
    original_start_line?: number
    path?: string
    position?: number
    pull_request_review_id?: number
    pull_request_url?: string
    side?: string
    start_line?: number
    start_side?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsCreateReplyForReviewComment(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    commentId: number
    requestBody: {
      body: string
    }
  }): Observable<{
    _links?: {
      html?: {
        href?: string
      }
      pull_request?: {
        href?: string
      }
      self?: {
        href?: string
      }
    }
    author_association?: string
    body?: string
    commit_id?: string
    created_at?: string
    diff_hunk?: string
    html_url?: string
    id?: number
    in_reply_to_id?: number
    line?: number
    node_id?: string
    original_commit_id?: string
    original_line?: number
    original_position?: number
    original_start_line?: number
    path?: string
    position?: number
    pull_request_review_id?: number
    pull_request_url?: string
    side?: string
    start_line?: number
    start_side?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments/${p["commentId"]}/replies`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListCommits(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    perPage?: number
    page?: number
  }): Observable<
    {
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      comments_url?: string
      commit?: {
        author?: {
          date?: string
          email?: string
          name?: string
        }
        comment_count?: number
        committer?: {
          date?: string
          email?: string
          name?: string
        }
        message?: string
        tree?: {
          sha?: string
          url?: string
        }
        url?: string
        verification?: {
          payload?: string
          reason?: string
          signature?: string
          verified?: boolean
        }
      }
      committer?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      html_url?: string
      node_id?: string
      parents?: {
        sha?: string
        url?: string
      }[]
      sha?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/commits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListFiles(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    perPage?: number
    page?: number
  }): Observable<
    {
      additions?: number
      blob_url?: string
      changes?: number
      contents_url?: string
      deletions?: number
      filename?: string
      patch?: string
      raw_url?: string
      sha?: string
      status?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/files`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsCheckIfMerged(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/merge`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsMerge(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    requestBody: {
      commit_message?: string
      commit_title?: string
      merge_method?: "merge" | "squash" | "rebase"
      sha?: string
    }
  }): Observable<
    | {
        merged?: boolean
        message?: string
        sha?: string
      }
    | {
        documentation_url?: string
        message?: string
      }
    | {
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/merge`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListRequestedReviewers(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    perPage?: number
    page?: number
  }): Observable<{
    teams?: {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
    users?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsRequestReviewers(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    requestBody: {
      reviewers?: string[]
      team_reviewers?: string[]
    }
  }): Observable<{
    _links?: {
      comments?: {
        href?: string
      }
      commits?: {
        href?: string
      }
      html?: {
        href?: string
      }
      issue?: {
        href?: string
      }
      review_comment?: {
        href?: string
      }
      review_comments?: {
        href?: string
      }
      self?: {
        href?: string
      }
      statuses?: {
        href?: string
      }
    }
    active_lock_reason?: string
    assignee?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    assignees?: {
      avatar_url: string
      events_url: string
      followers_url: string
      following_url: string
      gists_url: string
      gravatar_id: string
      html_url: string
      id: number
      login: string
      node_id: string
      organizations_url: string
      received_events_url: string
      repos_url: string
      site_admin: boolean
      starred_url: string
      subscriptions_url: string
      type: string
      url: string
    }[]
    author_association?: string
    base?: {
      label?: string
      ref?: string
      repo?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      sha?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }
    body?: string
    closed_at?: string
    comments_url?: string
    commits_url?: string
    created_at?: string
    diff_url?: string
    draft?: boolean
    head?: {
      label?: string
      ref?: string
      repo?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      sha?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }
    html_url?: string
    id?: number
    issue_url?: string
    labels?: {
      color?: string
      default?: boolean
      description?: string
      id?: number
      name?: string
      node_id?: string
      url?: string
    }[]
    locked?: boolean
    merge_commit_sha?: string
    merged_at?: string
    milestone?: {
      closed_at?: string
      closed_issues?: number
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      description?: string
      due_on?: string
      html_url?: string
      id?: number
      labels_url?: string
      node_id?: string
      number?: number
      open_issues?: number
      state?: string
      title?: string
      updated_at?: string
      url?: string
    }
    node_id?: string
    number?: number
    patch_url?: string
    requested_reviewers?: {
      avatar_url: string
      events_url: string
      followers_url: string
      following_url: string
      gists_url: string
      gravatar_id: string
      html_url: string
      id: number
      login: string
      node_id: string
      organizations_url: string
      received_events_url: string
      repos_url: string
      site_admin: boolean
      starred_url: string
      subscriptions_url: string
      type: string
      url: string
    }[]
    requested_teams?: {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
    review_comment_url?: string
    review_comments_url?: string
    state?: string
    statuses_url?: string
    title?: string
    updated_at?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  } | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsRemoveRequestedReviewers(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    requestBody: {
      reviewers?: string[]
      team_reviewers?: string[]
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListReviews(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    perPage?: number
    page?: number
  }): Observable<
    {
      _links?: {
        html?: {
          href?: string
        }
        pull_request?: {
          href?: string
        }
      }
      body?: string
      commit_id?: string
      html_url?: string
      id?: number
      node_id?: string
      pull_request_url?: string
      state?: string
      submitted_at?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsCreateReview(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    requestBody: {
      body?: string
      comments?: {
        body: string
        path: string
        position: number
      }[]
      commit_id?: string
      event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
    }
  }): Observable<{
    _links?: {
      html?: {
        href?: string
      }
      pull_request?: {
        href?: string
      }
    }
    body?: string
    commit_id?: string
    html_url?: string
    id?: number
    node_id?: string
    pull_request_url?: string
    state?: string
    submitted_at?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsGetReview(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
  }): Observable<{
    _links?: {
      html?: {
        href?: string
      }
      pull_request?: {
        href?: string
      }
    }
    body?: string
    commit_id?: string
    html_url?: string
    id?: number
    node_id?: string
    pull_request_url?: string
    state?: string
    submitted_at?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsDeletePendingReview(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
  }): Observable<{
    _links?: {
      html?: {
        href?: string
      }
      pull_request?: {
        href?: string
      }
    }
    body?: string
    commit_id?: string
    html_url?: string
    id?: number
    node_id?: string
    pull_request_url?: string
    state?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsUpdateReview(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
    requestBody: {
      body: string
    }
  }): Observable<{
    _links?: {
      html?: {
        href?: string
      }
      pull_request?: {
        href?: string
      }
    }
    body?: string
    commit_id?: string
    html_url?: string
    id?: number
    node_id?: string
    pull_request_url?: string
    state?: string
    submitted_at?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListCommentsForReview(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      _links?: {
        html?: {
          href?: string
        }
        pull_request?: {
          href?: string
        }
        self?: {
          href?: string
        }
      }
      author_association?: string
      body?: string
      commit_id?: string
      created_at?: string
      diff_hunk?: string
      html_url?: string
      id?: number
      in_reply_to_id?: number
      node_id?: string
      original_commit_id?: string
      original_position?: number
      path?: string
      position?: number
      pull_request_review_id?: number
      pull_request_url?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsDismissReview(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
    requestBody: {
      message: string
    }
  }): Observable<{
    _links?: {
      html?: {
        href?: string
      }
      pull_request?: {
        href?: string
      }
    }
    body?: string
    commit_id?: string
    html_url?: string
    id?: number
    node_id?: string
    pull_request_url?: string
    state?: string
    submitted_at?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/dismissals`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsSubmitReview(p: {
    accept?: string
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
    requestBody: {
      body?: string
      event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
    }
  }): Observable<{
    _links?: {
      html?: {
        href?: string
      }
      pull_request?: {
        href?: string
      }
    }
    body?: string
    commit_id?: string
    html_url?: string
    id?: number
    node_id?: string
    pull_request_url?: string
    state?: string
    submitted_at?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsUpdateBranch(p: {
    accept: string
    owner: string
    repo: string
    pullNumber: number
    requestBody: {
      expected_head_sha?: string
    }
  }): Observable<{
    message?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/update-branch`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetReadme(p: {
    accept?: string
    owner: string
    repo: string
    ref?: string
  }): Observable<{
    _links?: {
      git?: string
      html?: string
      self?: string
    }
    content?: string
    download_url?: string
    encoding?: string
    git_url?: string
    html_url?: string
    name?: string
    path?: string
    sha?: string
    size?: number
    type?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { ref: p["ref"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/readme`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListReleases(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      assets?: {
        browser_download_url?: string
        content_type?: string
        created_at?: string
        download_count?: number
        id?: number
        label?: string
        name?: string
        node_id?: string
        size?: number
        state?: string
        updated_at?: string
        uploader?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        url?: string
      }[]
      assets_url?: string
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      body?: string
      created_at?: string
      draft?: boolean
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      prerelease?: boolean
      published_at?: string
      tag_name?: string
      tarball_url?: string
      target_commitish?: string
      upload_url?: string
      url?: string
      zipball_url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/releases`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateRelease(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      body?: string
      draft?: boolean
      name?: string
      prerelease?: boolean
      tag_name: string
      target_commitish?: string
    }
  }): Observable<{
    assets?: {
      [key: string]: unknown
    }[]
    assets_url?: string
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    created_at?: string
    draft?: boolean
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    prerelease?: boolean
    published_at?: string
    tag_name?: string
    tarball_url?: string
    target_commitish?: string
    upload_url?: string
    url?: string
    zipball_url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/releases`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetReleaseAsset(p: {
    accept?: string
    owner: string
    repo: string
    assetId: number
  }): Observable<{
    browser_download_url?: string
    content_type?: string
    created_at?: string
    download_count?: number
    id?: number
    label?: string
    name?: string
    node_id?: string
    size?: number
    state?: string
    updated_at?: string
    uploader?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateReleaseAsset(p: {
    accept?: string
    owner: string
    repo: string
    assetId: number
    requestBody: {
      label?: string
      name?: string
    }
  }): Observable<{
    browser_download_url?: string
    content_type?: string
    created_at?: string
    download_count?: number
    id?: number
    label?: string
    name?: string
    node_id?: string
    size?: number
    state?: string
    updated_at?: string
    uploader?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteReleaseAsset(p: {
    accept?: string
    owner: string
    repo: string
    assetId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetLatestRelease(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    assets?: {
      browser_download_url?: string
      content_type?: string
      created_at?: string
      download_count?: number
      id?: number
      label?: string
      name?: string
      node_id?: string
      size?: number
      state?: string
      updated_at?: string
      uploader?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      url?: string
    }[]
    assets_url?: string
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    created_at?: string
    draft?: boolean
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    prerelease?: boolean
    published_at?: string
    tag_name?: string
    tarball_url?: string
    target_commitish?: string
    upload_url?: string
    url?: string
    zipball_url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/latest`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetReleaseByTag(p: {
    accept?: string
    owner: string
    repo: string
    tag: string
  }): Observable<{
    assets?: {
      browser_download_url?: string
      content_type?: string
      created_at?: string
      download_count?: number
      id?: number
      label?: string
      name?: string
      node_id?: string
      size?: number
      state?: string
      updated_at?: string
      uploader?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      url?: string
    }[]
    assets_url?: string
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    created_at?: string
    draft?: boolean
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    prerelease?: boolean
    published_at?: string
    tag_name?: string
    tarball_url?: string
    target_commitish?: string
    upload_url?: string
    url?: string
    zipball_url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/tags/${p["tag"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetRelease(p: {
    accept?: string
    owner: string
    repo: string
    releaseId: number
  }): Observable<{
    assets?: {
      browser_download_url?: string
      content_type?: string
      created_at?: string
      download_count?: number
      id?: number
      label?: string
      name?: string
      node_id?: string
      size?: number
      state?: string
      updated_at?: string
      uploader?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      url?: string
    }[]
    assets_url?: string
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    created_at?: string
    draft?: boolean
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    prerelease?: boolean
    published_at?: string
    tag_name?: string
    tarball_url?: string
    target_commitish?: string
    upload_url?: string
    url?: string
    zipball_url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateRelease(p: {
    accept?: string
    owner: string
    repo: string
    releaseId: number
    requestBody: {
      body?: string
      draft?: boolean
      name?: string
      prerelease?: boolean
      tag_name?: string
      target_commitish?: string
    }
  }): Observable<{
    assets?: {
      browser_download_url?: string
      content_type?: string
      created_at?: string
      download_count?: number
      id?: number
      label?: string
      name?: string
      node_id?: string
      size?: number
      state?: string
      updated_at?: string
      uploader?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      url?: string
    }[]
    assets_url?: string
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    created_at?: string
    draft?: boolean
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    prerelease?: boolean
    published_at?: string
    tag_name?: string
    tarball_url?: string
    target_commitish?: string
    upload_url?: string
    url?: string
    zipball_url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteRelease(p: {
    accept?: string
    owner: string
    repo: string
    releaseId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListReleaseAssets(p: {
    accept?: string
    owner: string
    repo: string
    releaseId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      browser_download_url?: string
      content_type?: string
      created_at?: string
      download_count?: number
      id?: number
      label?: string
      name?: string
      node_id?: string
      size?: number
      state?: string
      updated_at?: string
      uploader?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/assets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUploadReleaseAsset(p: {
    accept?: string
    contentLength: string
    contentType: string
    owner: string
    repo: string
    releaseId: number
    name?: string
    label?: string
    requestBody: string
  }): Observable<{
    browser_download_url?: string
    content_type?: string
    created_at?: string
    download_count?: number
    id?: number
    label?: string
    name?: string
    node_id?: string
    size?: number
    state?: string
    updated_at?: string
    uploader?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "*/*",
      accept: p["accept"],
      "content-length": p["contentLength"],
      "content-type": p["contentType"],
    }

    const queryParameters = { name: p["name"], label: p["label"] }

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/assets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListStargazersForRepo(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      starred_at?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/stargazers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCodeFrequencyStats(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<number[][]> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/stats/code_frequency`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCommitActivityStats(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<
    {
      days?: number[]
      total?: number
      week?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/stats/commit_activity`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetContributorsStats(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<
    {
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      total?: number
      weeks?: {
        a?: number
        c?: number
        d?: number
        w?: string
      }[]
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/stats/contributors`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetParticipationStats(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    all?: number[]
    owner?: number[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/stats/participation`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetPunchCardStats(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<number[][]> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/stats/punch_card`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateCommitStatus(p: {
    accept?: string
    owner: string
    repo: string
    sha: string
    requestBody: {
      context?: string
      description?: string
      state: "error" | "failure" | "pending" | "success"
      target_url?: string
    }
  }): Observable<{
    avatar_url?: string
    context?: string
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    description?: string
    id?: number
    node_id?: string
    state?: string
    target_url?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/statuses/${p["sha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListWatchersForRepo(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscribers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityGetRepoSubscription(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<{
    created_at?: string
    ignored?: boolean
    reason?: string
    repository_url?: string
    subscribed?: boolean
    url?: string
  } | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activitySetRepoSubscription(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      ignored?: boolean
      subscribed?: boolean
    }
  }): Observable<{
    created_at?: string
    ignored?: boolean
    reason?: string
    repository_url?: string
    subscribed?: boolean
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityDeleteRepoSubscription(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListTags(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      commit?: {
        sha?: string
        url?: string
      }
      name?: string
      tarball_url?: string
      zipball_url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/tags`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListTeams(p: {
    accept?: string
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    {
      description?: string
      html_url?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: string
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAllTopics(p: {
    accept: string
    owner: string
    repo: string
  }): Observable<{
    names?: string[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/topics`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposReplaceAllTopics(p: {
    accept: string
    owner: string
    repo: string
    requestBody: {
      names: string[]
    }
  }): Observable<{
    names?: string[]
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/topics`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetClones(p: {
    accept?: string
    owner: string
    repo: string
    per?: "day" | "week"
  }): Observable<{
    clones?: {
      count: number
      timestamp: string
      uniques: number
    }[]
    count?: number
    uniques?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per: p["per"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/traffic/clones`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetTopPaths(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<
    {
      count?: number
      path?: string
      title?: string
      uniques?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/traffic/popular/paths`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetTopReferrers(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<
    {
      count?: number
      referrer?: string
      uniques?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/traffic/popular/referrers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetViews(p: {
    accept?: string
    owner: string
    repo: string
    per?: "day" | "week"
  }): Observable<{
    count?: number
    uniques?: number
    views?: {
      count: number
      timestamp: string
      uniques: number
    }[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per: p["per"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/traffic/views`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposTransfer(p: {
    accept?: string
    owner: string
    repo: string
    requestBody: {
      new_owner?: string
      team_ids?: number[]
    }
  }): Observable<{
    allow_merge_commit?: boolean
    allow_rebase_merge?: boolean
    allow_squash_merge?: boolean
    archive_url?: string
    archived?: boolean
    assignees_url?: string
    blobs_url?: string
    branches_url?: string
    clone_url?: string
    collaborators_url?: string
    comments_url?: string
    commits_url?: string
    compare_url?: string
    contents_url?: string
    contributors_url?: string
    created_at?: string
    default_branch?: string
    delete_branch_on_merge?: boolean
    deployments_url?: string
    description?: string
    disabled?: boolean
    downloads_url?: string
    events_url?: string
    fork?: boolean
    forks_count?: number
    forks_url?: string
    full_name?: string
    git_commits_url?: string
    git_refs_url?: string
    git_tags_url?: string
    git_url?: string
    has_downloads?: boolean
    has_issues?: boolean
    has_pages?: boolean
    has_projects?: boolean
    has_wiki?: boolean
    homepage?: string
    hooks_url?: string
    html_url?: string
    id?: number
    is_template?: boolean
    issue_comment_url?: string
    issue_events_url?: string
    issues_url?: string
    keys_url?: string
    labels_url?: string
    language?: string
    languages_url?: string
    merges_url?: string
    milestones_url?: string
    mirror_url?: string
    name?: string
    network_count?: number
    node_id?: string
    notifications_url?: string
    open_issues_count?: number
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    permissions?: {
      admin?: boolean
      pull?: boolean
      push?: boolean
    }
    private?: boolean
    pulls_url?: string
    pushed_at?: string
    releases_url?: string
    size?: number
    ssh_url?: string
    stargazers_count?: number
    stargazers_url?: string
    statuses_url?: string
    subscribers_count?: number
    subscribers_url?: string
    subscription_url?: string
    svn_url?: string
    tags_url?: string
    teams_url?: string
    temp_clone_token?: string
    template_repository?: string
    topics?: string[]
    trees_url?: string
    updated_at?: string
    url?: string
    visibility?: string
    watchers_count?: number
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/transfer`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCheckVulnerabilityAlerts(p: {
    accept: string
    owner: string
    repo: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposEnableVulnerabilityAlerts(p: {
    accept: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDisableVulnerabilityAlerts(p: {
    accept: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDownloadArchive(p: {
    accept?: string
    owner: string
    repo: string
    archiveFormat: string
    ref: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/${p["archiveFormat"]}/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateUsingTemplate(p: {
    accept: string
    templateOwner: string
    templateRepo: string
    requestBody: {
      description?: string
      name: string
      owner?: string
      private?: boolean
    }
  }): Observable<{
    allow_merge_commit?: boolean
    allow_rebase_merge?: boolean
    allow_squash_merge?: boolean
    archive_url?: string
    archived?: boolean
    assignees_url?: string
    blobs_url?: string
    branches_url?: string
    clone_url?: string
    collaborators_url?: string
    comments_url?: string
    commits_url?: string
    compare_url?: string
    contents_url?: string
    contributors_url?: string
    created_at?: string
    default_branch?: string
    delete_branch_on_merge?: boolean
    deployments_url?: string
    description?: string
    disabled?: boolean
    downloads_url?: string
    events_url?: string
    fork?: boolean
    forks_count?: number
    forks_url?: string
    full_name?: string
    git_commits_url?: string
    git_refs_url?: string
    git_tags_url?: string
    git_url?: string
    has_downloads?: boolean
    has_issues?: boolean
    has_pages?: boolean
    has_projects?: boolean
    has_wiki?: boolean
    homepage?: string
    hooks_url?: string
    html_url?: string
    id?: number
    is_template?: boolean
    issue_comment_url?: string
    issue_events_url?: string
    issues_url?: string
    keys_url?: string
    labels_url?: string
    language?: string
    languages_url?: string
    merges_url?: string
    milestones_url?: string
    mirror_url?: string
    name?: string
    network_count?: number
    node_id?: string
    notifications_url?: string
    open_issues_count?: number
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    permissions?: {
      admin?: boolean
      pull?: boolean
      push?: boolean
    }
    private?: boolean
    pulls_url?: string
    pushed_at?: string
    releases_url?: string
    size?: number
    ssh_url?: string
    stargazers_count?: number
    stargazers_url?: string
    statuses_url?: string
    subscribers_count?: number
    subscribers_url?: string
    subscription_url?: string
    svn_url?: string
    tags_url?: string
    teams_url?: string
    temp_clone_token?: string
    template_repository?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
    topics?: string[]
    trees_url?: string
    updated_at?: string
    url?: string
    visibility?: string
    watchers_count?: number
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["templateOwner"]}/${p["templateRepo"]}/generate`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListPublic(p: { accept?: string; since?: number }): Observable<
    {
      archive_url?: string
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      deployments_url?: string
      description?: string
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      html_url?: string
      id?: number
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      name?: string
      node_id?: string
      notifications_url?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      private?: boolean
      pulls_url?: string
      releases_url?: string
      ssh_url?: string
      stargazers_url?: string
      statuses_url?: string
      subscribers_url?: string
      subscription_url?: string
      tags_url?: string
      teams_url?: string
      trees_url?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { since: p["since"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  scimListProvisionedIdentities(p: {
    accept?: string
    org: string
    startIndex?: number
    count?: number
    filter?: string
  }): Observable<{
    Resources?: {
      active?: boolean
      emails?: {
        primary?: boolean
        type?: string
        value?: string
      }[]
      externalId?: string
      id?: string
      meta?: {
        created?: string
        lastModified?: string
        location?: string
        resourceType?: string
      }
      name?: {
        familyName?: string
        givenName?: string
      }
      schemas?: string[]
      userName?: string
    }[]
    itemsPerPage?: number
    schemas?: string[]
    startIndex?: number
    totalResults?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      startIndex: p["startIndex"],
      count: p["count"],
      filter: p["filter"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/scim/v2/organizations/${p["org"]}/Users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  scimProvisionAndInviteUser(p: { accept?: string; org: string }): Observable<{
    active?: boolean
    emails?: {
      primary?: boolean
      type?: string
      value?: string
    }[]
    externalId?: string
    id?: string
    meta?: {
      created?: string
      lastModified?: string
      location?: string
      resourceType?: string
    }
    name?: {
      familyName?: string
      givenName?: string
    }
    schemas?: string[]
    userName?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/scim/v2/organizations/${p["org"]}/Users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  scimGetProvisioningInformationForUser(p: {
    accept?: string
    org: string
    scimUserId: number
  }): Observable<{
    active?: boolean
    emails?: {
      primary?: boolean
      type?: string
      value?: string
    }[]
    externalId?: string
    id?: string
    meta?: {
      created?: string
      lastModified?: string
      location?: string
      resourceType?: string
    }
    name?: {
      familyName?: string
      givenName?: string
    }
    schemas?: string[]
    userName?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/scim/v2/organizations/${p["org"]}/Users/${p["scimUserId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  scimSetInformationForProvisionedUser(p: {
    accept?: string
    org: string
    scimUserId: number
  }): Observable<{
    active?: boolean
    emails?: {
      primary?: boolean
      type?: string
      value?: string
    }[]
    externalId?: string
    id?: string
    meta?: {
      created?: string
      lastModified?: string
      location?: string
      resourceType?: string
    }
    name?: {
      familyName?: string
      givenName?: string
    }
    schemas?: string[]
    userName?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/scim/v2/organizations/${p["org"]}/Users/${p["scimUserId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  scimUpdateAttributeForUser(p: {
    accept?: string
    org: string
    scimUserId: number
  }): Observable<{
    active?: boolean
    emails?: {
      primary?: boolean
      type: string
      value: string
    }[]
    externalId?: string
    id?: string
    meta?: {
      created?: string
      lastModified?: string
      location?: string
      resourceType?: string
    }
    name?: {
      familyName?: string
      givenName?: string
    }
    schemas?: string[]
    userName?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/scim/v2/organizations/${p["org"]}/Users/${p["scimUserId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  scimDeleteUserFromOrg(p: {
    accept?: string
    org: string
    scimUserId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/scim/v2/organizations/${p["org"]}/Users/${p["scimUserId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchCode(p: {
    accept?: string
    q: string
    sort?: "indexed"
    order?: "desc" | "asc"
    perPage?: number
    page?: number
  }): Observable<{
    incomplete_results?: boolean
    items?: {
      git_url?: string
      html_url?: string
      name?: string
      path?: string
      repository?: {
        archive_url?: string
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        description?: string
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        hooks_url?: string
        html_url?: string
        id?: number
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        name?: string
        node_id?: string
        notifications_url?: string
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        private?: boolean
        pulls_url?: string
        stargazers_url?: string
        statuses_url?: string
        subscribers_url?: string
        subscription_url?: string
        tags_url?: string
        teams_url?: string
        trees_url?: string
        url?: string
      }
      score?: number
      sha?: string
      url?: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/code`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchCommits(p: {
    accept: string
    q: string
    sort?: "author-date" | "committer-date"
    order?: "desc" | "asc"
    perPage?: number
    page?: number
  }): Observable<{
    incomplete_results?: boolean
    items?: {
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      comments_url?: string
      commit?: {
        author?: {
          date?: string
          email?: string
          name?: string
        }
        comment_count?: number
        committer?: {
          date?: string
          email?: string
          name?: string
        }
        message?: string
        tree?: {
          sha?: string
          url?: string
        }
        url?: string
      }
      committer?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      html_url?: string
      parents?: {
        html_url?: string
        sha?: string
        url?: string
      }[]
      repository?: {
        archive_url?: string
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        deployments_url?: string
        description?: string
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        hooks_url?: string
        html_url?: string
        id?: number
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        name?: string
        node_id?: string
        notifications_url?: string
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        private?: boolean
        pulls_url?: string
        releases_url?: string
        stargazers_url?: string
        statuses_url?: string
        subscribers_url?: string
        subscription_url?: string
        tags_url?: string
        teams_url?: string
        trees_url?: string
        url?: string
      }
      score?: number
      sha?: string
      url?: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/commits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchIssuesAndPullRequests(p: {
    accept?: string
    q: string
    sort?:
      | "comments"
      | "reactions"
      | "reactions-+1"
      | "reactions--1"
      | "reactions-smile"
      | "reactions-thinking_face"
      | "reactions-heart"
      | "reactions-tada"
      | "interactions"
      | "created"
      | "updated"
    order?: "desc" | "asc"
    perPage?: number
    page?: number
  }): Observable<{
    incomplete_results?: boolean
    items?: {
      assignee?: string
      body?: string
      closed_at?: string
      comments?: number
      comments_url?: string
      created_at?: string
      events_url?: string
      html_url?: string
      id?: number
      labels?: {
        color?: string
        id?: number
        name?: string
        node_id?: string
        url?: string
      }[]
      labels_url?: string
      milestone?: string
      node_id?: string
      number?: number
      pull_request?: {
        diff_url?: string
        html_url?: string
        patch_url?: string
      }
      repository_url?: string
      score?: number
      state?: string
      title?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchLabels(p: {
    accept?: string
    repositoryId: number
    q: string
    sort?: "created" | "updated"
    order?: "desc" | "asc"
  }): Observable<{
    incomplete_results?: boolean
    items?: {
      color: string
      default: boolean
      description: string
      id: number
      name: string
      node_id: string
      score: number
      url: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      repository_id: p["repositoryId"],
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchRepos(p: {
    accept?: string
    q: string
    sort?: "stars" | "forks" | "help-wanted-issues" | "updated"
    order?: "desc" | "asc"
    perPage?: number
    page?: number
  }): Observable<{
    incomplete_results?: boolean
    items?: {
      created_at?: string
      default_branch?: string
      description?: string
      fork?: boolean
      forks_count?: number
      full_name?: string
      homepage?: string
      html_url?: string
      id?: number
      language?: string
      master_branch?: string
      name?: string
      node_id?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        gravatar_id?: string
        id?: number
        login?: string
        node_id?: string
        received_events_url?: string
        type?: string
        url?: string
      }
      private?: boolean
      pushed_at?: string
      score?: number
      size?: number
      stargazers_count?: number
      updated_at?: string
      url?: string
      watchers_count?: number
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchTopics(p: { accept?: string; q: string }): Observable<{
    incomplete_results?: boolean
    items?: {
      created_at: string
      created_by: string
      curated: boolean
      description: string
      display_name: string
      featured: boolean
      name: string
      released: string
      score: number
      short_description: string
      updated_at: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { q: p["q"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/topics`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchUsers(p: {
    accept?: string
    q: string
    sort?: "followers" | "repositories" | "joined"
    order?: "desc" | "asc"
    perPage?: number
    page?: number
  }): Observable<{
    incomplete_results?: boolean
    items?: {
      avatar_url?: string
      followers_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      score?: number
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetLegacy(p: { accept?: string; teamId: number }): Observable<{
    created_at?: string
    description?: string
    html_url?: string
    id?: number
    members_count?: number
    members_url?: string
    name?: string
    node_id?: string
    organization?: {
      avatar_url?: string
      blog?: string
      company?: string
      created_at?: string
      description?: string
      email?: string
      events_url?: string
      followers?: number
      following?: number
      has_organization_projects?: boolean
      has_repository_projects?: boolean
      hooks_url?: string
      html_url?: string
      id?: number
      is_verified?: boolean
      issues_url?: string
      location?: string
      login?: string
      members_url?: string
      name?: string
      node_id?: string
      public_gists?: number
      public_members_url?: string
      public_repos?: number
      repos_url?: string
      twitter_username?: string
      type?: string
      url?: string
    }
    parent?: string
    permission?: string
    privacy?: string
    repos_count?: number
    repositories_url?: string
    slug?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateLegacy(p: {
    accept?: string
    teamId: number
    requestBody: {
      description?: string
      name: string
      parent_team_id?: number
      permission?: "pull" | "push" | "admin"
      privacy?: "secret" | "closed"
    }
  }): Observable<{
    created_at?: string
    description?: string
    html_url?: string
    id?: number
    members_count?: number
    members_url?: string
    name?: string
    node_id?: string
    organization?: {
      avatar_url?: string
      blog?: string
      company?: string
      created_at?: string
      description?: string
      email?: string
      events_url?: string
      followers?: number
      following?: number
      has_organization_projects?: boolean
      has_repository_projects?: boolean
      hooks_url?: string
      html_url?: string
      id?: number
      is_verified?: boolean
      issues_url?: string
      location?: string
      login?: string
      members_url?: string
      name?: string
      node_id?: string
      public_gists?: number
      public_members_url?: string
      public_repos?: number
      repos_url?: string
      twitter_username?: string
      type?: string
      url?: string
    }
    parent?: string
    permission?: string
    privacy?: string
    repos_count?: number
    repositories_url?: string
    slug?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/teams/${p["teamId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteLegacy(p: { accept?: string; teamId: number }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/teams/${p["teamId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListDiscussionsLegacy(p: {
    accept?: string
    teamId: number
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    {
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      body?: string
      body_html?: string
      body_version?: string
      comments_count?: number
      comments_url?: string
      created_at?: string
      html_url?: string
      last_edited_at?: string
      node_id?: string
      number?: number
      pinned?: boolean
      private?: boolean
      reactions?: {
        "+1"?: number
        "-1"?: number
        confused?: number
        heart?: number
        hooray?: number
        laugh?: number
        total_count?: number
        url?: string
      }
      team_url?: string
      title?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/discussions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreateDiscussionLegacy(p: {
    accept?: string
    teamId: number
    requestBody: {
      body: string
      private?: boolean
      title: string
    }
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    comments_count?: number
    comments_url?: string
    created_at?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    pinned?: boolean
    private?: boolean
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    team_url?: string
    title?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/teams/${p["teamId"]}/discussions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetDiscussionLegacy(p: {
    accept?: string
    teamId: number
    discussionNumber: number
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    comments_count?: number
    comments_url?: string
    created_at?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    pinned?: boolean
    private?: boolean
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    team_url?: string
    title?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateDiscussionLegacy(p: {
    accept?: string
    teamId: number
    discussionNumber: number
    requestBody: {
      body?: string
      title?: string
    }
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    comments_count?: number
    comments_url?: string
    created_at?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    pinned?: boolean
    private?: boolean
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    team_url?: string
    title?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteDiscussionLegacy(p: {
    accept?: string
    teamId: number
    discussionNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListDiscussionCommentsLegacy(p: {
    accept?: string
    teamId: number
    discussionNumber: number
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    {
      author?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      body?: string
      body_html?: string
      body_version?: string
      created_at?: string
      discussion_url?: string
      html_url?: string
      last_edited_at?: string
      node_id?: string
      number?: number
      reactions?: {
        "+1"?: number
        "-1"?: number
        confused?: number
        heart?: number
        hooray?: number
        laugh?: number
        total_count?: number
        url?: string
      }
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreateDiscussionCommentLegacy(p: {
    accept?: string
    teamId: number
    discussionNumber: number
    requestBody: {
      body: string
    }
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    created_at?: string
    discussion_url?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetDiscussionCommentLegacy(p: {
    accept?: string
    teamId: number
    discussionNumber: number
    commentNumber: number
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    created_at?: string
    discussion_url?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateDiscussionCommentLegacy(p: {
    accept?: string
    teamId: number
    discussionNumber: number
    commentNumber: number
    requestBody: {
      body: string
    }
  }): Observable<{
    author?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    body?: string
    body_html?: string
    body_version?: string
    created_at?: string
    discussion_url?: string
    html_url?: string
    last_edited_at?: string
    node_id?: string
    number?: number
    reactions?: {
      "+1"?: number
      "-1"?: number
      confused?: number
      heart?: number
      hooray?: number
      laugh?: number
      total_count?: number
      url?: string
    }
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteDiscussionCommentLegacy(p: {
    accept?: string
    teamId: number
    discussionNumber: number
    commentNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForTeamDiscussionCommentLegacy(p: {
    accept: string
    teamId: number
    discussionNumber: number
    commentNumber: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<
    {
      content?: string
      created_at?: string
      id?: number
      node_id?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForTeamDiscussionCommentLegacy(p: {
    accept: string
    teamId: number
    discussionNumber: number
    commentNumber: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<{
    content?: string
    created_at?: string
    id?: number
    node_id?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForTeamDiscussionLegacy(p: {
    accept: string
    teamId: number
    discussionNumber: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<
    {
      content?: string
      created_at?: string
      id?: number
      node_id?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForTeamDiscussionLegacy(p: {
    accept: string
    teamId: number
    discussionNumber: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<{
    content?: string
    created_at?: string
    id?: number
    node_id?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListPendingInvitationsLegacy(p: {
    accept?: string
    teamId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      email?: string
      id?: number
      invitation_team_url?: string
      inviter?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      login?: string
      role?: string
      team_count?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListMembersLegacy(p: {
    accept?: string
    teamId: number
    role?: "member" | "maintainer" | "all"
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/members`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetMemberLegacy(p: {
    accept?: string
    teamId: number
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddMemberLegacy(p: {
    accept?: string
    teamId: number
    username: string
  }): Observable<void | void | {
    errors?: {
      code?: string
      field?: string
      resource?: string
    }[]
    message?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/teams/${p["teamId"]}/members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveMemberLegacy(p: {
    accept?: string
    teamId: number
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/teams/${p["teamId"]}/members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetMembershipForUserLegacy(p: {
    accept?: string
    teamId: number
    username: string
  }): Observable<{
    role?: string
    state?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateMembershipForUserLegacy(p: {
    accept?: string
    teamId: number
    username: string
    requestBody: {
      role?: "member" | "maintainer"
    }
  }): Observable<
    | {
        role?: string
        state?: string
        url?: string
      }
    | void
    | {
        errors?: {
          code?: string
          field?: string
          resource?: string
        }[]
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/teams/${p["teamId"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveMembershipForUserLegacy(p: {
    accept?: string
    teamId: number
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/teams/${p["teamId"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListProjectsLegacy(p: {
    accept: string
    teamId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      body?: string
      columns_url?: string
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      number?: number
      organization_permission?: string
      owner_url?: string
      permissions?: {
        admin?: boolean
        read?: boolean
        write?: boolean
      }
      private?: boolean
      state?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCheckPermissionsForProjectLegacy(p: {
    accept: string
    teamId: number
    projectId: number
  }): Observable<{
    body?: string
    columns_url?: string
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    number?: number
    organization_permission?: string
    owner_url?: string
    permissions?: {
      admin?: boolean
      read?: boolean
      write?: boolean
    }
    private?: boolean
    state?: string
    updated_at?: string
    url?: string
  } | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateProjectPermissionsLegacy(p: {
    accept: string
    teamId: number
    projectId: number
    requestBody: {
      permission?: "read" | "write" | "admin"
    }
  }): Observable<void | {
    documentation_url?: string
    message?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/teams/${p["teamId"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveProjectLegacy(p: {
    accept?: string
    teamId: number
    projectId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/teams/${p["teamId"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListReposLegacy(p: {
    accept?: string
    teamId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      license?: {
        key?: string
        name?: string
        node_id?: string
        spdx_id?: string
        url?: string
      }
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCheckPermissionsForRepoLegacy(p: {
    accept?: string
    teamId: number
    owner: string
    repo: string
  }): Observable<{
    organization?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    parent?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
    permissions?: {
      admin?: boolean
      maintain?: boolean
      pull?: boolean
      push?: boolean
      triage?: boolean
    }
    source?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }
  } | void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateRepoPermissionsLegacy(p: {
    accept?: string
    teamId: number
    owner: string
    repo: string
    requestBody: {
      permission?: "pull" | "push" | "admin"
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveRepoLegacy(p: {
    accept?: string
    teamId: number
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListIdPGroupsForLegacy(p: {
    accept?: string
    teamId: number
  }): Observable<{
    groups?: {
      group_description: string
      group_id: string
      group_name: string
    }[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/team-sync/group-mappings`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreateOrUpdateIdPGroupConnectionsLegacy(p: {
    accept?: string
    teamId: number
    requestBody: {
      groups: {
        group_description: string
        group_id: string
        group_name: string
      }[]
    }
  }): Observable<{
    groups?: {
      group_description?: string
      group_id?: string
      group_name?: string
    }[]
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/teams/${p["teamId"]}/team-sync/group-mappings`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListChildLegacy(p: {
    accept?: string
    teamId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      description?: string
      id?: number
      members_url?: string
      name?: string
      node_id?: string
      parent?: {
        description?: string
        html_url?: string
        id?: number
        members_url?: string
        name?: string
        node_id?: string
        permission?: string
        privacy?: string
        repositories_url?: string
        slug?: string
        url?: string
      }
      permission?: string
      privacy?: string
      repositories_url?: string
      slug?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersGetAuthenticated(p: { accept?: string }): Observable<{
    avatar_url?: string
    bio?: string
    blog?: string
    collaborators?: number
    company?: string
    created_at?: string
    disk_usage?: number
    email?: string
    events_url?: string
    followers?: number
    followers_url?: string
    following?: number
    following_url?: string
    gists_url?: string
    gravatar_id?: string
    hireable?: boolean
    html_url?: string
    id?: number
    location?: string
    login?: string
    name?: string
    node_id?: string
    organizations_url?: string
    owned_private_repos?: number
    plan?: {
      collaborators?: number
      name?: string
      private_repos?: number
      space?: number
    }
    private_gists?: number
    public_gists?: number
    public_repos?: number
    received_events_url?: string
    repos_url?: string
    site_admin?: boolean
    starred_url?: string
    subscriptions_url?: string
    total_private_repos?: number
    twitter_username?: string
    two_factor_authentication?: boolean
    type?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>("GET", this.config.basePath + `/user`, {
      params: this.queryParams(queryParameters),
      headers: this.headers(headers),

      observe: "body",
      reportProgress: false,
    })
  }

  usersUpdateAuthenticated(p: {
    accept?: string
    requestBody: {
      bio?: string
      blog?: string
      company?: string
      email?: string
      hireable?: boolean
      location?: string
      name?: string
      twitter_username?: string
    }
  }): Observable<{
    avatar_url?: string
    bio?: string
    blog?: string
    collaborators?: number
    company?: string
    created_at?: string
    disk_usage?: number
    email?: string
    events_url?: string
    followers?: number
    followers_url?: string
    following?: number
    following_url?: string
    gists_url?: string
    gravatar_id?: string
    hireable?: boolean
    html_url?: string
    id?: number
    location?: string
    login?: string
    name?: string
    node_id?: string
    organizations_url?: string
    owned_private_repos?: number
    plan?: {
      collaborators?: number
      name?: string
      private_repos?: number
      space?: number
    }
    private_gists?: number
    public_gists?: number
    public_repos?: number
    received_events_url?: string
    repos_url?: string
    site_admin?: boolean
    starred_url?: string
    subscriptions_url?: string
    total_private_repos?: number
    twitter_username?: string
    two_factor_authentication?: boolean
    type?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/user`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListBlockedByAuthenticated(p: { accept?: string }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/blocks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersCheckBlocked(p: {
    accept?: string
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersBlock(p: { accept?: string; username: string }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/user/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersUnblock(p: { accept?: string; username: string }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersSetPrimaryEmailVisibilityForAuthenticated(p: {
    accept?: string
    requestBody: {
      email: string
      visibility: string
    }
  }): Observable<
    {
      email?: string
      primary?: boolean
      verified?: boolean
      visibility?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/user/email/visibility`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListEmailsForAuthenticated(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      email?: string
      primary?: boolean
      verified?: boolean
      visibility?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/emails`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersAddEmailForAuthenticated(p: {
    accept?: string
    requestBody: {
      emails: string[]
    }
  }): Observable<
    {
      email?: string
      primary?: boolean
      verified?: boolean
      visibility?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/emails`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersDeleteEmailForAuthenticated(p: {
    accept?: string
    requestBody: {
      emails: string[]
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/emails`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListFollowersForAuthenticatedUser(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/followers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListFollowedByAuthenticated(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/following`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersCheckPersonIsFollowedByAuthenticated(p: {
    accept?: string
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/following/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersFollow(p: { accept?: string; username: string }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/user/following/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersUnfollow(p: { accept?: string; username: string }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/following/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListGpgKeysForAuthenticated(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      can_certify?: boolean
      can_encrypt_comms?: boolean
      can_encrypt_storage?: boolean
      can_sign?: boolean
      created_at?: string
      emails?: {
        email?: string
        verified?: boolean
      }[]
      expires_at?: string
      id?: number
      key_id?: string
      primary_key_id?: string
      public_key?: string
      subkeys?: {
        can_certify?: boolean
        can_encrypt_comms?: boolean
        can_encrypt_storage?: boolean
        can_sign?: boolean
        created_at?: string
        emails?: {
          [key: string]: unknown
        }[]
        expires_at?: string
        id?: number
        key_id?: string
        primary_key_id?: number
        public_key?: string
        subkeys?: {
          [key: string]: unknown
        }[]
      }[]
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/gpg_keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersCreateGpgKeyForAuthenticated(p: {
    accept?: string
    requestBody: {
      armored_public_key?: string
    }
  }): Observable<{
    can_certify?: boolean
    can_encrypt_comms?: boolean
    can_encrypt_storage?: boolean
    can_sign?: boolean
    created_at?: string
    emails?: {
      email?: string
      verified?: boolean
    }[]
    expires_at?: string
    id?: number
    key_id?: string
    primary_key_id?: string
    public_key?: string
    subkeys?: {
      can_certify?: boolean
      can_encrypt_comms?: boolean
      can_encrypt_storage?: boolean
      can_sign?: boolean
      created_at?: string
      emails?: {
        [key: string]: unknown
      }[]
      expires_at?: string
      id?: number
      key_id?: string
      primary_key_id?: number
      public_key?: string
      subkeys?: {
        [key: string]: unknown
      }[]
    }[]
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/gpg_keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersGetGpgKeyForAuthenticated(p: {
    accept?: string
    gpgKeyId: number
  }): Observable<{
    can_certify?: boolean
    can_encrypt_comms?: boolean
    can_encrypt_storage?: boolean
    can_sign?: boolean
    created_at?: string
    emails?: {
      email?: string
      verified?: boolean
    }[]
    expires_at?: string
    id?: number
    key_id?: string
    primary_key_id?: string
    public_key?: string
    subkeys?: {
      can_certify?: boolean
      can_encrypt_comms?: boolean
      can_encrypt_storage?: boolean
      can_sign?: boolean
      created_at?: string
      emails?: {
        [key: string]: unknown
      }[]
      expires_at?: string
      id?: number
      key_id?: string
      primary_key_id?: number
      public_key?: string
      subkeys?: {
        [key: string]: unknown
      }[]
    }[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/gpg_keys/${p["gpgKeyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersDeleteGpgKeyForAuthenticated(p: {
    accept?: string
    gpgKeyId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/gpg_keys/${p["gpgKeyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListInstallationsForAuthenticatedUser(p: {
    accept: string
    perPage?: number
    page?: number
  }): Observable<{
    installations?: {
      access_tokens_url: string
      account: {
        avatar_url?: string
        description?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        hooks_url?: string
        html_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        organizations_url?: string
        public_members_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      app_id: number
      events: string[]
      html_url: string
      id: number
      permissions: {
        checks?: string
        contents?: string
        metadata?: string
      }
      repositories_url: string
      single_file_name: string
      target_id: number
      target_type: string
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/installations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListInstallationReposForAuthenticatedUser(p: {
    accept: string
    installationId: number
    perPage?: number
    page?: number
  }): Observable<{
    repositories?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/user/installations/${p["installationId"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsAddRepoToInstallation(p: {
    accept: string
    installationId: number
    repositoryId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/user/installations/${p["installationId"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsRemoveRepoFromInstallation(p: {
    accept: string
    installationId: number
    repositoryId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/user/installations/${p["installationId"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListForAuthenticatedUser(p: {
    accept?: string
    filter?: "assigned" | "created" | "mentioned" | "subscribed" | "all"
    state?: "open" | "closed" | "all"
    labels?: string
    sort?: "created" | "updated" | "comments"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      active_lock_reason?: string
      assignee?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      assignees?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }[]
      body?: string
      closed_at?: string
      comments?: number
      comments_url?: string
      created_at?: string
      events_url?: string
      html_url?: string
      id?: number
      labels?: {
        color?: string
        default?: boolean
        description?: string
        id?: number
        name?: string
        node_id?: string
        url?: string
      }[]
      labels_url?: string
      locked?: boolean
      milestone?: {
        closed_at?: string
        closed_issues?: number
        created_at?: string
        creator?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        description?: string
        due_on?: string
        html_url?: string
        id?: number
        labels_url?: string
        node_id?: string
        number?: number
        open_issues?: number
        state?: string
        title?: string
        updated_at?: string
        url?: string
      }
      node_id?: string
      number?: number
      pull_request?: {
        diff_url?: string
        html_url?: string
        patch_url?: string
        url?: string
      }
      repository?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      repository_url?: string
      state?: string
      title?: string
      updated_at?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListPublicSshKeysForAuthenticated(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      key?: string
      key_id?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersCreatePublicSshKeyForAuthenticated(p: {
    accept?: string
    requestBody: {
      key?: string
      title?: string
    }
  }): Observable<{
    key?: string
    key_id?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersGetPublicSshKeyForAuthenticated(p: {
    accept?: string
    keyId: number
  }): Observable<{
    key?: string
    key_id?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/keys/${p["keyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersDeletePublicSshKeyForAuthenticated(p: {
    accept?: string
    keyId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/keys/${p["keyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListSubscriptionsForAuthenticatedUser(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      account?: {
        email?: string
        id?: number
        login?: string
        organization_billing_email?: string
        type?: string
        url?: string
      }
      billing_cycle?: string
      free_trial_ends_on?: string
      next_billing_date?: string
      on_free_trial?: boolean
      plan?: {
        accounts_url?: string
        bullets?: string[]
        description?: string
        has_free_trial?: boolean
        id?: number
        monthly_price_in_cents?: number
        name?: string
        number?: number
        price_model?: string
        state?: string
        unit_name?: string
        url?: string
        yearly_price_in_cents?: number
      }
      unit_count?: string
      updated_at?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/marketplace_purchases`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListSubscriptionsForAuthenticatedUserStubbed(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      account?: {
        email?: string
        id?: number
        login?: string
        organization_billing_email?: string
        type?: string
        url?: string
      }
      billing_cycle?: string
      free_trial_ends_on?: string
      next_billing_date?: string
      on_free_trial?: boolean
      plan?: {
        accounts_url?: string
        bullets?: string[]
        description?: string
        has_free_trial?: boolean
        id?: number
        monthly_price_in_cents?: number
        name?: string
        number?: number
        price_model?: string
        state?: string
        unit_name?: string
        url?: string
        yearly_price_in_cents?: number
      }
      unit_count?: string
      updated_at?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/marketplace_purchases/stubbed`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListMembershipsForAuthenticatedUser(p: {
    accept?: string
    state?: "active" | "pending"
    perPage?: number
    page?: number
  }): Observable<
    {
      organization?: {
        avatar_url?: string
        description?: string
        events_url?: string
        hooks_url?: string
        id?: number
        issues_url?: string
        login?: string
        members_url?: string
        node_id?: string
        public_members_url?: string
        repos_url?: string
        url?: string
      }
      organization_url?: string
      role?: string
      state?: string
      url?: string
      user?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/memberships/orgs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsGetMembershipForAuthenticatedUser(p: {
    accept?: string
    org: string
  }): Observable<{
    organization?: {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }
    organization_url?: string
    role?: string
    state?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/memberships/orgs/${p["org"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsUpdateMembershipForAuthenticatedUser(p: {
    accept?: string
    org: string
    requestBody: {
      state: "active"
    }
  }): Observable<{
    organization?: {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }
    organization_url?: string
    role?: string
    state?: string
    url?: string
    user?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/user/memberships/orgs/${p["org"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsStartForAuthenticatedUser(p: {
    accept?: string
    requestBody: {
      exclude_attachments?: boolean
      lock_repositories?: boolean
      repositories: string[]
    }
  }): Observable<{
    created_at?: string
    exclude_attachments?: boolean
    guid?: string
    id?: number
    lock_repositories?: boolean
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    repositories?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
    state?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/migrations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsListForAuthenticatedUser(p: {
    accept: string
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      exclude_attachments?: boolean
      guid?: string
      id?: number
      lock_repositories?: boolean
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      repositories?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }[]
      state?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/migrations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetStatusForAuthenticatedUser(p: {
    accept: string
    migrationId: number
  }): Observable<{
    created_at?: string
    exclude_attachments?: boolean
    guid?: string
    id?: number
    lock_repositories?: boolean
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    repositories?: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
    state?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/migrations/${p["migrationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetArchiveForAuthenticatedUser(p: {
    accept: string
    migrationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/migrations/${p["migrationId"]}/archive`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsDeleteArchiveForAuthenticatedUser(p: {
    accept: string
    migrationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/migrations/${p["migrationId"]}/archive`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsUnlockRepoForAuthenticatedUser(p: {
    accept: string
    migrationId: number
    repoName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/user/migrations/${p["migrationId"]}/repos/${p["repoName"]}/lock`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListForAuthenticatedUser(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/orgs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsCreateForAuthenticatedUser(p: {
    accept: string
    requestBody: {
      body?: string
      name: string
    }
  }): Observable<{
    body?: string
    columns_url?: string
    created_at?: string
    creator?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    number?: number
    owner_url?: string
    state?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListPublicEmailsForAuthenticated(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      email?: string
      primary?: boolean
      verified?: boolean
      visibility?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/public_emails`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListForAuthenticatedUser(p: {
    accept?: string
    visibility?: "all" | "public" | "private"
    affiliation?: string
    type?: "all" | "owner" | "public" | "private" | "member"
    sort?: "created" | "updated" | "pushed" | "full_name"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      visibility: p["visibility"],
      affiliation: p["affiliation"],
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateForAuthenticatedUser(p: {
    accept?: string
    requestBody: {
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      auto_init?: boolean
      delete_branch_on_merge?: boolean
      description?: string
      gitignore_template?: string
      has_issues?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      is_template?: boolean
      license_template?: string
      name: string
      private?: boolean
      team_id?: number
      visibility?: "public" | "private" | "visibility" | "internal"
    }
  }): Observable<{
    allow_merge_commit?: boolean
    allow_rebase_merge?: boolean
    allow_squash_merge?: boolean
    archive_url?: string
    archived?: boolean
    assignees_url?: string
    blobs_url?: string
    branches_url?: string
    clone_url?: string
    collaborators_url?: string
    comments_url?: string
    commits_url?: string
    compare_url?: string
    contents_url?: string
    contributors_url?: string
    created_at?: string
    default_branch?: string
    delete_branch_on_merge?: boolean
    deployments_url?: string
    description?: string
    disabled?: boolean
    downloads_url?: string
    events_url?: string
    fork?: boolean
    forks_count?: number
    forks_url?: string
    full_name?: string
    git_commits_url?: string
    git_refs_url?: string
    git_tags_url?: string
    git_url?: string
    has_downloads?: boolean
    has_issues?: boolean
    has_pages?: boolean
    has_projects?: boolean
    has_wiki?: boolean
    homepage?: string
    hooks_url?: string
    html_url?: string
    id?: number
    is_template?: boolean
    issue_comment_url?: string
    issue_events_url?: string
    issues_url?: string
    keys_url?: string
    labels_url?: string
    language?: string
    languages_url?: string
    merges_url?: string
    milestones_url?: string
    mirror_url?: string
    name?: string
    network_count?: number
    node_id?: string
    notifications_url?: string
    open_issues_count?: number
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    permissions?: {
      admin?: boolean
      pull?: boolean
      push?: boolean
    }
    private?: boolean
    pulls_url?: string
    pushed_at?: string
    releases_url?: string
    size?: number
    ssh_url?: string
    stargazers_count?: number
    stargazers_url?: string
    statuses_url?: string
    subscribers_count?: number
    subscribers_url?: string
    subscription_url?: string
    svn_url?: string
    tags_url?: string
    teams_url?: string
    temp_clone_token?: string
    template_repository?: string
    topics?: string[]
    trees_url?: string
    updated_at?: string
    url?: string
    visibility?: string
    watchers_count?: number
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
      accept: p["accept"],
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListInvitationsForAuthenticatedUser(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      html_url?: string
      id?: number
      invitee?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      inviter?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: string
      repository?: {
        archive_url?: string
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        deployments_url?: string
        description?: string
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        html_url?: string
        id?: number
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        name?: string
        node_id?: string
        notifications_url?: string
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        private?: boolean
        pulls_url?: string
        releases_url?: string
        ssh_url?: string
        stargazers_url?: string
        statuses_url?: string
        subscribers_url?: string
        subscription_url?: string
        tags_url?: string
        teams_url?: string
        trees_url?: string
        url?: string
      }
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/repository_invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAcceptInvitation(p: {
    accept?: string
    invitationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/user/repository_invitations/${p["invitationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeclineInvitation(p: {
    accept?: string
    invitationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/user/repository_invitations/${p["invitationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListReposStarredByAuthenticatedUser(p: {
    accept?: string
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    {
      repo?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      starred_at?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/starred`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityCheckRepoIsStarredByAuthenticatedUser(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/starred/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityStarRepoForAuthenticatedUser(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/user/starred/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityUnstarRepoForAuthenticatedUser(p: {
    accept?: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/starred/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListWatchedReposForAuthenticatedUser(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      license?: {
        key?: string
        name?: string
        node_id?: string
        spdx_id?: string
        url?: string
      }
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/subscriptions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListForAuthenticatedUser(p: {
    accept?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      created_at?: string
      description?: string
      html_url?: string
      id?: number
      members_count?: number
      members_url?: string
      name?: string
      node_id?: string
      organization?: {
        avatar_url?: string
        blog?: string
        company?: string
        created_at?: string
        description?: string
        email?: string
        events_url?: string
        followers?: number
        following?: number
        has_organization_projects?: boolean
        has_repository_projects?: boolean
        hooks_url?: string
        html_url?: string
        id?: number
        is_verified?: boolean
        issues_url?: string
        location?: string
        login?: string
        members_url?: string
        name?: string
        node_id?: string
        public_gists?: number
        public_members_url?: string
        public_repos?: number
        repos_url?: string
        twitter_username?: string
        type?: string
        url?: string
      }
      parent?: string
      permission?: string
      privacy?: string
      repos_count?: number
      repositories_url?: string
      slug?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsListReposForUser(p: {
    accept: string
    migrationId: number
    perPage?: number
    page?: number
  }): Observable<
    {
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      license?: {
        key?: string
        name?: string
        node_id?: string
        spdx_id?: string
        url?: string
      }
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/${p["migrationId"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersList(p: { accept?: string; since?: string }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { since: p["since"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersGetByUsername(p: { accept?: string; username: string }): Observable<{
    avatar_url?: string
    bio?: string
    blog?: string
    company?: string
    created_at?: string
    email?: string
    events_url?: string
    followers?: number
    followers_url?: string
    following?: number
    following_url?: string
    gists_url?: string
    gravatar_id?: string
    hireable?: boolean
    html_url?: string
    id?: number
    location?: string
    login?: string
    name?: string
    node_id?: string
    organizations_url?: string
    public_gists?: number
    public_repos?: number
    received_events_url?: string
    repos_url?: string
    site_admin?: boolean
    starred_url?: string
    subscriptions_url?: string
    twitter_username?: string
    type?: string
    updated_at?: string
    url?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListEventsForAuthenticatedUser(p: {
    accept?: string
    username: string
    perPage?: number
    page?: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListOrgEventsForAuthenticatedUser(p: {
    accept?: string
    username: string
    org: string
    perPage?: number
    page?: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/events/orgs/${p["org"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListPublicEventsForUser(p: {
    accept?: string
    username: string
    perPage?: number
    page?: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/events/public`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListFollowersForUser(p: {
    accept?: string
    username: string
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/followers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListFollowingForUser(p: {
    accept?: string
    username: string
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/following`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersCheckFollowingForUser(p: {
    accept?: string
    username: string
    targetUser: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/users/${p["username"]}/following/${p["targetUser"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListForUser(p: {
    accept?: string
    username: string
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    {
      comments?: number
      comments_url?: string
      commits_url?: string
      created_at?: string
      description?: string
      files?: {
        [key: string]: unknown
      }
      forks_url?: string
      git_pull_url?: string
      git_push_url?: string
      html_url?: string
      id?: string
      node_id?: string
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      public?: boolean
      truncated?: boolean
      updated_at?: string
      url?: string
      user?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/gists`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListGpgKeysForUser(p: {
    accept?: string
    username: string
    perPage?: number
    page?: number
  }): Observable<
    {
      can_certify?: boolean
      can_encrypt_comms?: boolean
      can_encrypt_storage?: boolean
      can_sign?: boolean
      created_at?: string
      emails?: {
        email?: string
        verified?: boolean
      }[]
      expires_at?: string
      id?: number
      key_id?: string
      primary_key_id?: string
      public_key?: string
      subkeys?: {
        can_certify?: boolean
        can_encrypt_comms?: boolean
        can_encrypt_storage?: boolean
        can_sign?: boolean
        created_at?: string
        emails?: {
          [key: string]: unknown
        }[]
        expires_at?: string
        id?: number
        key_id?: string
        primary_key_id?: number
        public_key?: string
        subkeys?: {
          [key: string]: unknown
        }[]
      }[]
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/gpg_keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersGetContextForUser(p: {
    accept?: string
    username: string
    subjectType?: "organization" | "repository" | "issue" | "pull_request"
    subjectId?: string
  }): Observable<{
    contexts?: {
      message?: string
      octicon?: string
    }[]
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      subject_type: p["subjectType"],
      subject_id: p["subjectId"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/hovercard`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetUserInstallation(p: { accept: string; username: string }): Observable<{
    access_tokens_url?: string
    account?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    app_id?: number
    created_at?: string
    events?: string[]
    html_url?: string
    id?: number
    permissions?: {
      checks?: string
      contents?: string
      metadata?: string
    }
    repositories_url?: string
    repository_selection?: "all" | "selected"
    single_file_name?: string
    target_id?: number
    target_type?: string
    updated_at?: string
  }> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/installation`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListPublicKeysForUser(p: {
    accept?: string
    username: string
    perPage?: number
    page?: number
  }): Observable<
    {
      id?: number
      key?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListForUser(p: {
    accept?: string
    username: string
    perPage?: number
    page?: number
  }): Observable<
    {
      avatar_url?: string
      description?: string
      events_url?: string
      hooks_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      public_members_url?: string
      repos_url?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/orgs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListForUser(p: {
    accept: string
    username: string
    state?: "open" | "closed" | "all"
    perPage?: number
    page?: number
  }): Observable<
    {
      body?: string
      columns_url?: string
      created_at?: string
      creator?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      html_url?: string
      id?: number
      name?: string
      node_id?: string
      number?: number
      owner_url?: string
      state?: string
      updated_at?: string
      url?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListReceivedEventsForUser(p: {
    accept?: string
    username: string
    perPage?: number
    page?: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/received_events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListReceivedPublicEventsForUser(p: {
    accept?: string
    username: string
    perPage?: number
    page?: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/received_events/public`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListForUser(p: {
    accept?: string
    username: string
    type?: "all" | "owner" | "member"
    sort?: "created" | "updated" | "pushed" | "full_name"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListReposStarredByUser(p: {
    accept?: string
    username: string
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    {
      repo?: {
        allow_merge_commit?: boolean
        allow_rebase_merge?: boolean
        allow_squash_merge?: boolean
        archive_url?: string
        archived?: boolean
        assignees_url?: string
        blobs_url?: string
        branches_url?: string
        clone_url?: string
        collaborators_url?: string
        comments_url?: string
        commits_url?: string
        compare_url?: string
        contents_url?: string
        contributors_url?: string
        created_at?: string
        default_branch?: string
        delete_branch_on_merge?: boolean
        deployments_url?: string
        description?: string
        disabled?: boolean
        downloads_url?: string
        events_url?: string
        fork?: boolean
        forks_count?: number
        forks_url?: string
        full_name?: string
        git_commits_url?: string
        git_refs_url?: string
        git_tags_url?: string
        git_url?: string
        has_downloads?: boolean
        has_issues?: boolean
        has_pages?: boolean
        has_projects?: boolean
        has_wiki?: boolean
        homepage?: string
        hooks_url?: string
        html_url?: string
        id?: number
        is_template?: boolean
        issue_comment_url?: string
        issue_events_url?: string
        issues_url?: string
        keys_url?: string
        labels_url?: string
        language?: string
        languages_url?: string
        merges_url?: string
        milestones_url?: string
        mirror_url?: string
        name?: string
        network_count?: number
        node_id?: string
        notifications_url?: string
        open_issues_count?: number
        owner?: {
          avatar_url?: string
          events_url?: string
          followers_url?: string
          following_url?: string
          gists_url?: string
          gravatar_id?: string
          html_url?: string
          id?: number
          login?: string
          node_id?: string
          organizations_url?: string
          received_events_url?: string
          repos_url?: string
          site_admin?: boolean
          starred_url?: string
          subscriptions_url?: string
          type?: string
          url?: string
        }
        permissions?: {
          admin?: boolean
          pull?: boolean
          push?: boolean
        }
        private?: boolean
        pulls_url?: string
        pushed_at?: string
        releases_url?: string
        size?: number
        ssh_url?: string
        stargazers_count?: number
        stargazers_url?: string
        statuses_url?: string
        subscribers_count?: number
        subscribers_url?: string
        subscription_url?: string
        svn_url?: string
        tags_url?: string
        teams_url?: string
        temp_clone_token?: string
        template_repository?: string
        topics?: string[]
        trees_url?: string
        updated_at?: string
        url?: string
        visibility?: string
        watchers_count?: number
      }
      starred_at?: string
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/starred`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListReposWatchedByUser(p: {
    accept?: string
    username: string
    perPage?: number
    page?: number
  }): Observable<
    {
      archive_url?: string
      archived?: boolean
      assignees_url?: string
      blobs_url?: string
      branches_url?: string
      clone_url?: string
      collaborators_url?: string
      comments_url?: string
      commits_url?: string
      compare_url?: string
      contents_url?: string
      contributors_url?: string
      created_at?: string
      default_branch?: string
      delete_branch_on_merge?: boolean
      deployments_url?: string
      description?: string
      disabled?: boolean
      downloads_url?: string
      events_url?: string
      fork?: boolean
      forks_count?: number
      forks_url?: string
      full_name?: string
      git_commits_url?: string
      git_refs_url?: string
      git_tags_url?: string
      git_url?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_pages?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      hooks_url?: string
      html_url?: string
      id?: number
      is_template?: boolean
      issue_comment_url?: string
      issue_events_url?: string
      issues_url?: string
      keys_url?: string
      labels_url?: string
      language?: string
      languages_url?: string
      license?: {
        key?: string
        name?: string
        node_id?: string
        spdx_id?: string
        url?: string
      }
      merges_url?: string
      milestones_url?: string
      mirror_url?: string
      name?: string
      network_count?: number
      node_id?: string
      notifications_url?: string
      open_issues_count?: number
      owner?: {
        avatar_url?: string
        events_url?: string
        followers_url?: string
        following_url?: string
        gists_url?: string
        gravatar_id?: string
        html_url?: string
        id?: number
        login?: string
        node_id?: string
        organizations_url?: string
        received_events_url?: string
        repos_url?: string
        site_admin?: boolean
        starred_url?: string
        subscriptions_url?: string
        type?: string
        url?: string
      }
      permissions?: {
        admin?: boolean
        pull?: boolean
        push?: boolean
      }
      private?: boolean
      pulls_url?: string
      pushed_at?: string
      releases_url?: string
      size?: number
      ssh_url?: string
      stargazers_count?: number
      stargazers_url?: string
      statuses_url?: string
      subscribers_count?: number
      subscribers_url?: string
      subscription_url?: string
      svn_url?: string
      tags_url?: string
      teams_url?: string
      temp_clone_token?: string
      template_repository?: string
      topics?: string[]
      trees_url?: string
      updated_at?: string
      url?: string
      visibility?: string
      watchers_count?: number
    }[]
  > {
    const headers: Record<string, string | undefined> = { accept: p["accept"] }

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/subscriptions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }
}
