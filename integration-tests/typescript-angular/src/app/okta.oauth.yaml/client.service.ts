/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_AcrValue,
  t_AmrValue,
  t_BackchannelAuthorizeRequest,
  t_BackchannelAuthorizeResponse,
  t_Client,
  t_CodeChallengeMethod,
  t_DeviceAuthorizeRequest,
  t_DeviceAuthorizeResponse,
  t_Error,
  t_IntrospectionRequest,
  t_IntrospectionResponse,
  t_OAuthError,
  t_OAuthKeys,
  t_OAuthMetadata,
  t_OidcMetadata,
  t_ParRequest,
  t_ParResponse,
  t_Prompt,
  t_ResponseMode,
  t_ResponseTypesSupported,
  t_RevokeRequest,
  t_TokenRequest,
  t_TokenResponse,
  t_UserInfo,
} from "./models"
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
} from "@angular/common/http"
import { Injectable } from "@angular/core"
import { Observable } from "rxjs"

export class ApiClientConfig {
  basePath: string = ""
  defaultHeaders: Record<string, string> = {}
}

// from https://stackoverflow.com/questions/39494689/is-it-possible-to-restrict-number-to-a-certain-range
type Enumerate<
  N extends number,
  Acc extends number[] = [],
> = Acc["length"] extends N
  ? Acc[number]
  : Enumerate<N, [...Acc, Acc["length"]]>

type IntRange<F extends number, T extends number> = F extends T
  ? F
  : Exclude<Enumerate<T>, Enumerate<F>> extends never
  ? never
  : Exclude<Enumerate<T>, Enumerate<F>> | T

export type StatusCode1xx = IntRange<100, 199>
export type StatusCode2xx = IntRange<200, 299>
export type StatusCode3xx = IntRange<300, 399>
export type StatusCode4xx = IntRange<400, 499>
export type StatusCode5xx = IntRange<500, 599>
export type StatusCode =
  | StatusCode1xx
  | StatusCode2xx
  | StatusCode3xx
  | StatusCode4xx
  | StatusCode5xx

export type QueryParams = {
  [name: string]:
    | string
    | number
    | boolean
    | string[]
    | undefined
    | null
    | QueryParams
    | QueryParams[]
}

@Injectable({
  providedIn: "root",
})
export class ApiClient {
  constructor(
    private readonly httpClient: HttpClient,
    private readonly config: ApiClientConfig,
  ) {}

  private _headers(
    headers: Record<string, string | undefined>,
  ): Record<string, string> {
    return Object.fromEntries(
      Object.entries({ ...this.config.defaultHeaders, ...headers }).filter(
        (it): it is [string, string] => it[1] !== undefined,
      ),
    )
  }

  private _queryParams(queryParams: QueryParams): HttpParams {
    return Object.entries(queryParams).reduce((result, [name, value]) => {
      if (
        typeof value === "string" ||
        typeof value === "boolean" ||
        typeof value === "number"
      ) {
        return result.set(name, value)
      } else if (value === null || value === undefined) {
        return result
      }
      throw new Error(
        `query parameter '${name}' with value '${value}' is not yet supported`,
      )
    }, new HttpParams())
  }

  getWellKnownOpenIdConfiguration(
    p: {
      clientId?: string
    } = {},
  ): Observable<
    | (HttpResponse<t_OidcMetadata> & { status: 200 })
    | (HttpResponse<t_Error> & { status: 400 })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ client_id: p["clientId"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/.well-known/openid-configuration`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  authorize(
    p: {
      acrValues?: t_AcrValue
      clientId?: string
      codeChallenge?: string
      codeChallengeMethod?: t_CodeChallengeMethod
      display?: string
      enrollAmrValues?: t_AmrValue
      idpScope?: string
      idp?: string
      loginHint?: string
      maxAge?: number
      nonce?: string
      prompt?: t_Prompt
      redirectUri?: string
      responseType?: t_ResponseTypesSupported
      responseMode?: t_ResponseMode
      requestUri?: string
      request?: string
      scope?: string
      sessionToken?: string
      state?: string
    } = {},
  ): Observable<
    (HttpResponse<t_Error> & { status: 429 }) | HttpResponse<unknown>
  > {
    const params = this._queryParams({
      acr_values: p["acrValues"],
      client_id: p["clientId"],
      code_challenge: p["codeChallenge"],
      code_challenge_method: p["codeChallengeMethod"],
      display: p["display"],
      enroll_amr_values: p["enrollAmrValues"],
      idp_scope: p["idpScope"],
      idp: p["idp"],
      login_hint: p["loginHint"],
      max_age: p["maxAge"],
      nonce: p["nonce"],
      prompt: p["prompt"],
      redirect_uri: p["redirectUri"],
      response_type: p["responseType"],
      response_mode: p["responseMode"],
      request_uri: p["requestUri"],
      request: p["request"],
      scope: p["scope"],
      sessionToken: p["sessionToken"],
      state: p["state"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/oauth2/v1/authorize`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  bcAuthorize(p: {
    requestBody: t_BackchannelAuthorizeRequest
  }): Observable<
    | (HttpResponse<t_BackchannelAuthorizeResponse> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/oauth2/v1/bc/authorize`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  listClients(
    p: {
      after?: string
      limit?: number
      q?: string
    } = {},
  ): Observable<
    | (HttpResponse<t_Client[]> & { status: 200 })
    | (HttpResponse<t_Error> & { status: 403 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({
      after: p["after"],
      limit: p["limit"],
      q: p["q"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/oauth2/v1/clients`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  createClient(p: {
    requestBody: t_Client
  }): Observable<
    | (HttpResponse<t_Client> & { status: 201 })
    | (HttpResponse<t_Error> & { status: 400 })
    | (HttpResponse<t_Error> & { status: 403 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/oauth2/v1/clients`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getClient(p: {
    clientId: string
  }): Observable<
    | (HttpResponse<t_Client> & { status: 200 })
    | (HttpResponse<t_Error> & { status: 403 })
    | (HttpResponse<t_Error> & { status: 404 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/oauth2/v1/clients/${p["clientId"]}`,
      {
        observe: "response",
        reportProgress: false,
      },
    )
  }

  replaceClient(p: {
    clientId: string
    requestBody: t_Client
  }): Observable<
    | (HttpResponse<t_Client> & { status: 200 })
    | (HttpResponse<t_Error> & { status: 400 })
    | (HttpResponse<t_Error> & { status: 403 })
    | (HttpResponse<t_Error> & { status: 404 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/oauth2/v1/clients/${p["clientId"]}`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deleteClient(p: {
    clientId: string
  }): Observable<
    | (HttpResponse<void> & { status: 204 })
    | (HttpResponse<t_Error> & { status: 403 })
    | (HttpResponse<t_Error> & { status: 404 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/oauth2/v1/clients/${p["clientId"]}`,
      {
        observe: "response",
        reportProgress: false,
      },
    )
  }

  generateNewClientSecret(p: {
    clientId: string
  }): Observable<
    | (HttpResponse<t_Client> & { status: 200 })
    | (HttpResponse<t_Error> & { status: 403 })
    | (HttpResponse<t_Error> & { status: 404 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/oauth2/v1/clients/${p["clientId"]}/lifecycle/newSecret`,
      {
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deviceAuthorize(p: {
    requestBody: t_DeviceAuthorizeRequest
  }): Observable<
    | (HttpResponse<t_DeviceAuthorizeResponse> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/oauth2/v1/device/authorize`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  introspect(p: {
    requestBody: t_IntrospectionRequest
  }): Observable<
    | (HttpResponse<t_IntrospectionResponse> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/oauth2/v1/introspect`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  oauthKeys(
    p: {
      clientId?: string
    } = {},
  ): Observable<
    | (HttpResponse<t_OAuthKeys> & { status: 200 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ client_id: p["clientId"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/oauth2/v1/keys`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  logout(p: {
    idTokenHint: string
    postLogoutRedirectUri?: string
    state?: string
  }): Observable<
    (HttpResponse<t_Error> & { status: 429 }) | HttpResponse<unknown>
  > {
    const params = this._queryParams({
      id_token_hint: p["idTokenHint"],
      post_logout_redirect_uri: p["postLogoutRedirectUri"],
      state: p["state"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/oauth2/v1/logout`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  par(p: {
    requestBody: t_ParRequest
  }): Observable<
    | (HttpResponse<t_ParResponse> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_OAuthError> & { status: 403 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/oauth2/v1/par`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  revoke(p: {
    requestBody: t_RevokeRequest
  }): Observable<
    | (HttpResponse<void> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/oauth2/v1/revoke`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  token(p: {
    requestBody: t_TokenRequest
  }): Observable<
    | (HttpResponse<t_TokenResponse> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/oauth2/v1/token`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  userinfo(): Observable<
    | (HttpResponse<t_UserInfo> & { status: 200 })
    | (HttpResponse<void> & { status: 401 })
    | (HttpResponse<void> & { status: 403 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/oauth2/v1/userinfo`,
      {
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getWellKnownOAuthConfigurationCustomAs(p: {
    authorizationServerId: string
    clientId?: string
  }): Observable<
    | (HttpResponse<t_OAuthMetadata> & { status: 200 })
    | (HttpResponse<t_Error> & { status: 400 })
    | (HttpResponse<t_Error> & { status: 404 })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ client_id: p["clientId"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/oauth2/${p["authorizationServerId"]}/.well-known/oauth-authorization-server`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  getWellKnownOpenIdConfigurationCustomAs(p: {
    authorizationServerId: string
    clientId?: string
  }): Observable<
    | (HttpResponse<t_OidcMetadata> & { status: 200 })
    | (HttpResponse<t_Error> & { status: 400 })
    | (HttpResponse<t_Error> & { status: 404 })
    | HttpResponse<unknown>
  > {
    const params = this._queryParams({ client_id: p["clientId"] })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/oauth2/${p["authorizationServerId"]}/.well-known/openid-configuration`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  authorizeCustomAs(p: {
    authorizationServerId: string
    acrValues?: t_AcrValue
    clientId?: string
    codeChallenge?: string
    codeChallengeMethod?: t_CodeChallengeMethod
    display?: string
    enrollAmrValues?: t_AmrValue
    idpScope?: string
    idp?: string
    loginHint?: string
    maxAge?: number
    nonce?: string
    prompt?: t_Prompt
    redirectUri?: string
    responseType?: t_ResponseTypesSupported
    responseMode?: t_ResponseMode
    requestUri?: string
    request?: string
    scope?: string
    sessionToken?: string
    state?: string
  }): Observable<
    (HttpResponse<t_Error> & { status: 429 }) | HttpResponse<unknown>
  > {
    const params = this._queryParams({
      acr_values: p["acrValues"],
      client_id: p["clientId"],
      code_challenge: p["codeChallenge"],
      code_challenge_method: p["codeChallengeMethod"],
      display: p["display"],
      enroll_amr_values: p["enrollAmrValues"],
      idp_scope: p["idpScope"],
      idp: p["idp"],
      login_hint: p["loginHint"],
      max_age: p["maxAge"],
      nonce: p["nonce"],
      prompt: p["prompt"],
      redirect_uri: p["redirectUri"],
      response_type: p["responseType"],
      response_mode: p["responseMode"],
      request_uri: p["requestUri"],
      request: p["request"],
      scope: p["scope"],
      sessionToken: p["sessionToken"],
      state: p["state"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/oauth2/${p["authorizationServerId"]}/v1/authorize`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  bcAuthorizeCustomAs(p: {
    authorizationServerId: string
    requestBody: t_BackchannelAuthorizeRequest
  }): Observable<
    | (HttpResponse<t_BackchannelAuthorizeResponse> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/oauth2/${p["authorizationServerId"]}/v1/bc/authorize`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  deviceAuthorizeCustomAs(p: {
    authorizationServerId: string
    requestBody: t_DeviceAuthorizeRequest
  }): Observable<
    | (HttpResponse<t_DeviceAuthorizeResponse> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/oauth2/${p["authorizationServerId"]}/v1/device/authorize`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  introspectCustomAs(p: {
    authorizationServerId: string
    requestBody: t_IntrospectionRequest
  }): Observable<
    | (HttpResponse<t_IntrospectionResponse> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/oauth2/${p["authorizationServerId"]}/v1/introspect`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  oauthKeysCustomAs(p: {
    authorizationServerId: string
  }): Observable<
    | (HttpResponse<t_OAuthKeys> & { status: 200 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/oauth2/${p["authorizationServerId"]}/v1/keys`,
      {
        observe: "response",
        reportProgress: false,
      },
    )
  }

  logoutCustomAs(p: {
    authorizationServerId: string
    idTokenHint: string
    postLogoutRedirectUri?: string
    state?: string
  }): Observable<
    (HttpResponse<t_Error> & { status: 429 }) | HttpResponse<unknown>
  > {
    const params = this._queryParams({
      id_token_hint: p["idTokenHint"],
      post_logout_redirect_uri: p["postLogoutRedirectUri"],
      state: p["state"],
    })

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/oauth2/${p["authorizationServerId"]}/v1/logout`,
      {
        params,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  parCustomAs(p: {
    authorizationServerId: string
    requestBody: t_ParRequest
  }): Observable<
    | (HttpResponse<t_ParResponse> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_OAuthError> & { status: 403 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/oauth2/${p["authorizationServerId"]}/v1/par`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  revokeCustomAs(p: {
    authorizationServerId: string
    requestBody: t_RevokeRequest
  }): Observable<
    | (HttpResponse<void> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({ "Content-Type": "application/json" })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/oauth2/${p["authorizationServerId"]}/v1/revoke`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  tokenCustomAs(p: {
    authorizationServerId: string
    requestBody: t_TokenRequest
  }): Observable<
    | (HttpResponse<t_TokenResponse> & { status: 200 })
    | (HttpResponse<t_OAuthError> & { status: 400 })
    | (HttpResponse<t_OAuthError> & { status: 401 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    const headers = this._headers({
      "Content-Type": "application/x-www-form-urlencoded",
    })
    const body = p["requestBody"]

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/oauth2/${p["authorizationServerId"]}/v1/token`,
      {
        headers,
        body,
        observe: "response",
        reportProgress: false,
      },
    )
  }

  userinfoCustomAs(p: {
    authorizationServerId: string
  }): Observable<
    | (HttpResponse<t_UserInfo> & { status: 200 })
    | (HttpResponse<void> & { status: 401 })
    | (HttpResponse<void> & { status: 403 })
    | (HttpResponse<t_Error> & { status: 429 })
    | HttpResponse<unknown>
  > {
    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/oauth2/${p["authorizationServerId"]}/v1/userinfo`,
      {
        observe: "response",
        reportProgress: false,
      },
    )
  }
}
