/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_actions_billing_usage,
  t_actions_cache_list,
  t_actions_cache_usage_by_repository,
  t_actions_cache_usage_org_enterprise,
  t_actions_enabled,
  t_actions_get_default_workflow_permissions,
  t_actions_organization_permissions,
  t_actions_public_key,
  t_actions_repository_permissions,
  t_actions_secret,
  t_actions_set_default_workflow_permissions,
  t_actions_variable,
  t_actions_workflow_access_to_repository,
  t_alert_number,
  t_allowed_actions,
  t_api_overview,
  t_app_permissions,
  t_artifact,
  t_authentication_token,
  t_authorization,
  t_autolink,
  t_base_gist,
  t_basic_error,
  t_blob,
  t_branch_protection,
  t_branch_restriction_policy,
  t_branch_short,
  t_branch_with_protection,
  t_check_annotation,
  t_check_run,
  t_check_suite,
  t_check_suite_preference,
  t_clone_traffic,
  t_code_frequency_stat,
  t_code_of_conduct,
  t_code_scanning_alert,
  t_code_scanning_alert_dismissed_comment,
  t_code_scanning_alert_dismissed_reason,
  t_code_scanning_alert_instance,
  t_code_scanning_alert_items,
  t_code_scanning_alert_set_state,
  t_code_scanning_alert_severity,
  t_code_scanning_alert_state,
  t_code_scanning_analysis,
  t_code_scanning_analysis_commit_sha,
  t_code_scanning_analysis_deletion,
  t_code_scanning_analysis_sarif_file,
  t_code_scanning_analysis_sarif_id,
  t_code_scanning_analysis_tool_guid,
  t_code_scanning_analysis_tool_name,
  t_code_scanning_codeql_database,
  t_code_scanning_organization_alert_items,
  t_code_scanning_ref,
  t_code_scanning_sarifs_receipt,
  t_code_scanning_sarifs_status,
  t_code_search_result_item,
  t_codeowners_errors,
  t_codespace,
  t_codespace_export_details,
  t_codespace_machine,
  t_codespace_with_full_repository,
  t_codespaces_org_secret,
  t_codespaces_public_key,
  t_codespaces_secret,
  t_codespaces_user_public_key,
  t_collaborator,
  t_combined_billing_usage,
  t_combined_commit_status,
  t_commit,
  t_commit_activity,
  t_commit_comment,
  t_commit_comparison,
  t_commit_search_result_item,
  t_community_profile,
  t_content_directory,
  t_content_file,
  t_content_submodule,
  t_content_symlink,
  t_content_traffic,
  t_contributor,
  t_contributor_activity,
  t_dependabot_alert,
  t_dependabot_alert_with_repository,
  t_dependabot_public_key,
  t_dependabot_secret,
  t_dependency_graph_diff,
  t_deploy_key,
  t_deployment,
  t_deployment_branch_policy,
  t_deployment_branch_policy_name_pattern,
  t_deployment_branch_policy_settings,
  t_deployment_reviewer_type,
  t_deployment_status,
  t_diff_entry,
  t_email,
  t_empty_object,
  t_enabled_repositories,
  t_enterprise_security_analysis_settings,
  t_environment,
  t_environment_approvals,
  t_event,
  t_feed,
  t_file_commit,
  t_full_repository,
  t_gist_comment,
  t_gist_commit,
  t_gist_simple,
  t_git_commit,
  t_git_ref,
  t_git_tag,
  t_git_tree,
  t_gitignore_template,
  t_gpg_key,
  t_hook,
  t_hook_delivery,
  t_hook_delivery_item,
  t_hovercard,
  t_import,
  t_installation,
  t_installation_token,
  t_integration,
  t_interaction_limit,
  t_interaction_limit_response,
  t_issue,
  t_issue_comment,
  t_issue_event,
  t_issue_event_for_issue,
  t_issue_search_result_item,
  t_job,
  t_key,
  t_key_simple,
  t_label,
  t_label_search_result_item,
  t_language,
  t_license,
  t_license_content,
  t_license_simple,
  t_marketplace_listing_plan,
  t_marketplace_purchase,
  t_merged_upstream,
  t_migration,
  t_milestone,
  t_minimal_repository,
  t_oidc_custom_sub,
  t_oidc_custom_sub_repo,
  t_org_hook,
  t_org_membership,
  t_organization_actions_secret,
  t_organization_actions_variable,
  t_organization_dependabot_secret,
  t_organization_full,
  t_organization_invitation,
  t_organization_secret_scanning_alert,
  t_organization_simple,
  t_package,
  t_package_version,
  t_packages_billing_usage,
  t_page,
  t_page_build,
  t_page_build_status,
  t_page_deployment,
  t_pages_health_check,
  t_participation_stats,
  t_pending_deployment,
  t_porter_author,
  t_porter_large_file,
  t_private_user,
  t_project,
  t_project_card,
  t_project_collaborator_permission,
  t_project_column,
  t_protected_branch,
  t_protected_branch_admin_enforced,
  t_protected_branch_pull_request_review,
  t_public_user,
  t_pull_request,
  t_pull_request_merge_result,
  t_pull_request_review,
  t_pull_request_review_comment,
  t_pull_request_review_request,
  t_pull_request_simple,
  t_rate_limit_overview,
  t_reaction,
  t_referrer_traffic,
  t_release,
  t_release_asset,
  t_release_notes_content,
  t_repo_codespaces_secret,
  t_repo_required_workflow,
  t_repo_search_result_item,
  t_repository,
  t_repository_collaborator_permission,
  t_repository_invitation,
  t_repository_subscription,
  t_required_workflow,
  t_review_comment,
  t_root,
  t_runner,
  t_runner_application,
  t_runner_groups_enterprise,
  t_runner_groups_org,
  t_runner_label,
  t_scim_error,
  t_secret_scanning_alert,
  t_secret_scanning_alert_resolution,
  t_secret_scanning_alert_resolution_comment,
  t_secret_scanning_alert_state,
  t_secret_scanning_location,
  t_selected_actions,
  t_short_blob,
  t_short_branch,
  t_simple_user,
  t_snapshot,
  t_ssh_signing_key,
  t_starred_repository,
  t_status,
  t_status_check_policy,
  t_tag,
  t_tag_protection,
  t_team,
  t_team_discussion,
  t_team_discussion_comment,
  t_team_full,
  t_team_membership,
  t_team_project,
  t_team_repository,
  t_team_simple,
  t_thread,
  t_thread_subscription,
  t_timeline_issue_events,
  t_topic,
  t_topic_search_result_item,
  t_user_marketplace_purchase,
  t_user_search_result_item,
  t_validation_error,
  t_validation_error_simple,
  t_view_traffic,
  t_wait_timer,
  t_webhook_config,
  t_webhook_config_content_type,
  t_webhook_config_insecure_ssl,
  t_webhook_config_secret,
  t_webhook_config_url,
  t_workflow,
  t_workflow_run,
  t_workflow_run_usage,
  t_workflow_usage,
} from "./models"
import { HttpClient, HttpHeaders, HttpParams } from "@angular/common/http"
import { Injectable } from "@angular/core"
import { Observable } from "rxjs"

export class ApiClientConfig {
  basePath: string = ""
  defaultHeaders: Record<string, string> = {}
}

export interface Res<StatusCode, Body> {
  status: StatusCode
  body: Body
}

@Injectable({
  providedIn: "root",
})
export class ApiClient {
  constructor(
    private readonly httpClient: HttpClient,
    private readonly config: ApiClientConfig
  ) {}

  private headers(
    headers: Record<string, string | undefined>
  ): Record<string, string> {
    return Object.fromEntries(
      Object.entries({ ...this.config.defaultHeaders, ...headers }).filter(
        (it): it is [string, string] => it[1] !== undefined
      )
    )
  }

  private queryParams(
    queryParams: Record<
      string,
      boolean | number | string | string[] | undefined | null
    >
  ): HttpParams {
    const result = new HttpParams()
    Object.entries(queryParams).forEach(([name, value]) => {
      if (value !== undefined && value !== null) {
        result.set(name, String(value))
      }
    })
    return result
  }

  metaRoot(): Observable<t_root> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>("GET", this.config.basePath + `/`, {
      params: this.queryParams(queryParameters),
      headers: this.headers(headers),

      observe: "body",
      reportProgress: false,
    })
  }

  appsGetAuthenticated(): Observable<t_integration> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>("GET", this.config.basePath + `/app`, {
      params: this.queryParams(queryParameters),
      headers: this.headers(headers),

      observe: "body",
      reportProgress: false,
    })
  }

  appsCreateFromManifest(p: { code: string }): Observable<
    | (t_integration & {
        client_id: string
        client_secret: string
        pem: string
        webhook_secret: string | null
        [key: string]: unknown
      })
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/app-manifests/${p["code"]}/conversions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetWebhookConfigForApp(): Observable<t_webhook_config> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/app/hook/config`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsUpdateWebhookConfigForApp(p: {
    requestBody: {
      content_type?: t_webhook_config_content_type
      insecure_ssl?: t_webhook_config_insecure_ssl
      secret?: t_webhook_config_secret
      url?: t_webhook_config_url
    }
  }): Observable<t_webhook_config> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/app/hook/config`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListWebhookDeliveries(p: {
    perPage?: number
    cursor?: string
    redelivery?: boolean
  }): Observable<t_hook_delivery_item[] | t_scim_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      per_page: p["perPage"],
      cursor: p["cursor"],
      redelivery: p["redelivery"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/app/hook/deliveries`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetWebhookDelivery(p: {
    deliveryId: number
  }): Observable<t_hook_delivery | t_scim_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/app/hook/deliveries/${p["deliveryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsRedeliverWebhookDelivery(p: { deliveryId: number }): Observable<
    | {
        [key: string]: unknown
      }
    | t_scim_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/app/hook/deliveries/${p["deliveryId"]}/attempts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListInstallations(p: {
    perPage?: number
    page?: number
    since?: string
    outdated?: string
  }): Observable<t_installation[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      per_page: p["perPage"],
      page: p["page"],
      since: p["since"],
      outdated: p["outdated"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/app/installations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetInstallation(p: {
    installationId: number
  }): Observable<t_installation | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/app/installations/${p["installationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsDeleteInstallation(p: {
    installationId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/app/installations/${p["installationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsCreateInstallationAccessToken(p: {
    installationId: number
    requestBody?: {
      permissions?: t_app_permissions
      repositories?: string[]
      repository_ids?: number[]
    }
  }): Observable<
    | t_installation_token
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/app/installations/${p["installationId"]}/access_tokens`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsSuspendInstallation(p: {
    installationId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/app/installations/${p["installationId"]}/suspended`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsUnsuspendInstallation(p: {
    installationId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/app/installations/${p["installationId"]}/suspended`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsDeleteAuthorization(p: {
    clientId: string
    requestBody: {
      access_token: string
    }
  }): Observable<void | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/applications/${p["clientId"]}/grant`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsCheckToken(p: {
    clientId: string
    requestBody: {
      access_token: string
    }
  }): Observable<t_authorization | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/applications/${p["clientId"]}/token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsResetToken(p: {
    clientId: string
    requestBody: {
      access_token: string
    }
  }): Observable<t_authorization | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/applications/${p["clientId"]}/token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsDeleteToken(p: {
    clientId: string
    requestBody: {
      access_token: string
    }
  }): Observable<void | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/applications/${p["clientId"]}/token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsScopeToken(p: {
    clientId: string
    requestBody: {
      access_token: string
      permissions?: t_app_permissions
      repositories?: string[]
      repository_ids?: number[]
      target?: string
      target_id?: number
    }
  }): Observable<
    | t_authorization
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/applications/${p["clientId"]}/token/scoped`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetBySlug(p: {
    appSlug: string
  }): Observable<t_integration | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/apps/${p["appSlug"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codesOfConductGetAllCodesOfConduct(): Observable<t_code_of_conduct[] | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/codes_of_conduct`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codesOfConductGetConductCode(p: {
    key: string
  }): Observable<t_code_of_conduct | void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/codes_of_conduct/${p["key"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  emojisGet(): Observable<{
    [key: string]: unknown
  } | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/emojis`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(p: {
    enterprise: string
    orgId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/actions/permissions/organizations/${p["orgId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  enterpriseAdminListSelfHostedRunnerGroupsForEnterprise(p: {
    enterprise: string
    perPage?: number
    page?: number
    visibleToOrganization?: string
  }): Observable<{
    runner_groups: t_runner_groups_enterprise[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      per_page: p["perPage"],
      page: p["page"],
      visible_to_organization: p["visibleToOrganization"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/actions/runner-groups`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(p: {
    enterprise: string
    requestBody: {
      allows_public_repositories?: boolean
      name: string
      restricted_to_workflows?: boolean
      runners?: number[]
      selected_organization_ids?: number[]
      selected_workflows?: string[]
      visibility?: "selected" | "all"
    }
  }): Observable<t_runner_groups_enterprise> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/actions/runner-groups`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  enterpriseAdminGetSelfHostedRunnerGroupForEnterprise(p: {
    enterprise: string
    runnerGroupId: number
  }): Observable<t_runner_groups_enterprise> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/actions/runner-groups/${p["runnerGroupId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(p: {
    enterprise: string
    runnerGroupId: number
    orgId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/actions/runner-groups/${p["runnerGroupId"]}/organizations/${p["orgId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(p: {
    enterprise: string
    runnerGroupId: number
    runnerId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/actions/runner-groups/${p["runnerGroupId"]}/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  enterpriseAdminDeleteSelfHostedRunnerFromEnterprise(p: {
    enterprise: string
    runnerId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/actions/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise(p: {
    enterprise: string
    runnerId: number
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/actions/runners/${p["runnerId"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise(p: {
    enterprise: string
    runnerId: number
    requestBody: {
      labels: string[]
    }
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/actions/runners/${p["runnerId"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  secretScanningGetSecurityAnalysisSettingsForEnterprise(p: {
    enterprise: string
  }): Observable<t_enterprise_security_analysis_settings | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/code_security_and_analysis`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  secretScanningPatchSecurityAnalysisSettingsForEnterprise(p: {
    enterprise: string
    requestBody?: {
      advanced_security_enabled_for_new_repositories?: boolean
      secret_scanning_enabled_for_new_repositories?: boolean
      secret_scanning_push_protection_custom_link?: string | null
      secret_scanning_push_protection_enabled_for_new_repositories?: boolean
    }
  }): Observable<void | t_basic_error | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/code_security_and_analysis`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotListAlertsForEnterprise(p: {
    enterprise: string
    state?: string
    severity?: string
    ecosystem?: string
    package?: string
    scope?: "development" | "runtime"
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    before?: string
    after?: string
    first?: number
    last?: number
    perPage?: number
  }): Observable<
    | t_dependabot_alert_with_repository[]
    | void
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      severity: p["severity"],
      ecosystem: p["ecosystem"],
      package: p["package"],
      scope: p["scope"],
      sort: p["sort"],
      direction: p["direction"],
      before: p["before"],
      after: p["after"],
      first: p["first"],
      last: p["last"],
      per_page: p["perPage"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/dependabot/alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  secretScanningListAlertsForEnterprise(p: {
    enterprise: string
    state?: "open" | "resolved"
    secretType?: string
    resolution?: string
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    perPage?: number
    before?: string
    after?: string
  }): Observable<
    | t_organization_secret_scanning_alert[]
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      secret_type: p["secretType"],
      resolution: p["resolution"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/secret-scanning/alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  secretScanningPostSecurityProductEnablementForEnterprise(p: {
    enterprise: string
    securityProduct:
      | "advanced_security"
      | "secret_scanning"
      | "secret_scanning_push_protection"
    enablement: "enable_all" | "disable_all"
  }): Observable<void | t_basic_error | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/enterprises/${p["enterprise"]}/${p["securityProduct"]}/${p["enablement"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListPublicEvents(p: { perPage?: number; page?: number }): Observable<
    | t_event[]
    | void
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityGetFeeds(): Observable<t_feed> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/feeds`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsList(p: {
    since?: string
    perPage?: number
    page?: number
  }): Observable<t_base_gist[] | void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsCreate(p: {
    requestBody: {
      description?: string
      files: {
        [key: string]: unknown
      }
      public?: boolean | "true" | "false"
    }
  }): Observable<
    t_gist_simple | void | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/gists`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListPublic(p: {
    since?: string
    perPage?: number
    page?: number
  }): Observable<t_base_gist[] | void | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/public`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListStarred(p: {
    since?: string
    perPage?: number
    page?: number
  }): Observable<t_base_gist[] | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/starred`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsGet(p: { gistId: string }): Observable<
    | t_gist_simple
    | void
    | {
        block?: {
          created_at?: string
          html_url?: string | null
          reason?: string
        }
        documentation_url?: string
        message?: string
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsUpdate(p: {
    gistId: string
    requestBody: {
      description?: string
      files?: {
        [key: string]: unknown
      }
    }
  }): Observable<t_gist_simple | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/gists/${p["gistId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsDelete(p: {
    gistId: string
  }): Observable<void | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/gists/${p["gistId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListComments(p: {
    gistId: string
    perPage?: number
    page?: number
  }): Observable<t_gist_comment[] | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsCreateComment(p: {
    gistId: string
    requestBody: {
      body: string
    }
  }): Observable<t_gist_comment | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/gists/${p["gistId"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsGetComment(p: { gistId: string; commentId: number }): Observable<
    | t_gist_comment
    | void
    | {
        block?: {
          created_at?: string
          html_url?: string | null
          reason?: string
        }
        documentation_url?: string
        message?: string
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsUpdateComment(p: {
    gistId: string
    commentId: number
    requestBody: {
      body: string
    }
  }): Observable<t_gist_comment | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/gists/${p["gistId"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsDeleteComment(p: {
    gistId: string
    commentId: number
  }): Observable<void | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/gists/${p["gistId"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListCommits(p: {
    gistId: string
    perPage?: number
    page?: number
  }): Observable<t_gist_commit[] | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/commits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListForks(p: {
    gistId: string
    perPage?: number
    page?: number
  }): Observable<t_gist_simple[] | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/forks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsFork(p: {
    gistId: string
  }): Observable<
    t_base_gist | void | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/gists/${p["gistId"]}/forks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsCheckIsStarred(p: { gistId: string }): Observable<
    | void
    | void
    | t_basic_error
    | {
        [key: string]: unknown
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/star`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsStar(p: {
    gistId: string
  }): Observable<void | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/gists/${p["gistId"]}/star`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsUnstar(p: {
    gistId: string
  }): Observable<void | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/gists/${p["gistId"]}/star`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsGetRevision(p: {
    gistId: string
    sha: string
  }): Observable<
    t_gist_simple | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gists/${p["gistId"]}/${p["sha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitignoreGetAllTemplates(): Observable<string[] | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gitignore/templates`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitignoreGetTemplate(p: {
    name: string
  }): Observable<t_gitignore_template | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/gitignore/templates/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListReposAccessibleToInstallation(p: {
    perPage?: number
    page?: number
  }): Observable<
    | {
        repositories: t_repository[]
        repository_selection?: string
        total_count: number
      }
    | void
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/installation/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsRevokeInstallationAccessToken(): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/installation/token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesList(p: {
    filter?:
      | "assigned"
      | "created"
      | "mentioned"
      | "subscribed"
      | "repos"
      | "all"
    state?: "open" | "closed" | "all"
    labels?: string
    sort?: "created" | "updated" | "comments"
    direction?: "asc" | "desc"
    since?: string
    collab?: boolean
    orgs?: boolean
    owned?: boolean
    pulls?: boolean
    perPage?: number
    page?: number
  }): Observable<t_issue[] | void | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      collab: p["collab"],
      orgs: p["orgs"],
      owned: p["owned"],
      pulls: p["pulls"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  licensesGetAllCommonlyUsed(p: {
    featured?: boolean
    perPage?: number
    page?: number
  }): Observable<t_license_simple[] | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      featured: p["featured"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/licenses`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  licensesGet(p: {
    license: string
  }): Observable<t_license | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/licenses/${p["license"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  markdownRender(p: {
    requestBody: {
      context?: string
      mode?: "markdown" | "gfm"
      text: string
    }
  }): Observable<string | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/markdown`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  markdownRenderRaw(p: { requestBody?: string }): Observable<string | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "text/plain",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/markdown/raw`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetSubscriptionPlanForAccount(p: {
    accountId: number
  }): Observable<t_marketplace_purchase | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/marketplace_listing/accounts/${p["accountId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListPlans(p: {
    perPage?: number
    page?: number
  }): Observable<t_marketplace_listing_plan[] | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/marketplace_listing/plans`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListAccountsForPlan(p: {
    planId: number
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    | t_marketplace_purchase[]
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/marketplace_listing/plans/${p["planId"]}/accounts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetSubscriptionPlanForAccountStubbed(p: {
    accountId: number
  }): Observable<t_marketplace_purchase | t_basic_error | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/marketplace_listing/stubbed/accounts/${p["accountId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListPlansStubbed(p: {
    perPage?: number
    page?: number
  }): Observable<t_marketplace_listing_plan[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/marketplace_listing/stubbed/plans`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListAccountsForPlanStubbed(p: {
    planId: number
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<t_marketplace_purchase[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/marketplace_listing/stubbed/plans/${p["planId"]}/accounts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  metaGet(): Observable<t_api_overview | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>("GET", this.config.basePath + `/meta`, {
      params: this.queryParams(queryParameters),
      headers: this.headers(headers),

      observe: "body",
      reportProgress: false,
    })
  }

  activityListPublicEventsForRepoNetwork(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    t_event[] | t_basic_error | void | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/networks/${p["owner"]}/${p["repo"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListNotificationsForAuthenticatedUser(p: {
    all?: boolean
    participating?: boolean
    since?: string
    before?: string
    page?: number
    perPage?: number
  }): Observable<
    t_thread[] | void | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      all: p["all"],
      participating: p["participating"],
      since: p["since"],
      before: p["before"],
      page: p["page"],
      per_page: p["perPage"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/notifications`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityMarkNotificationsAsRead(p: {
    requestBody?: {
      last_read_at?: string
      read?: boolean
    }
  }): Observable<
    | {
        message?: string
      }
    | void
    | void
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/notifications`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityGetThread(p: {
    threadId: number
  }): Observable<t_thread | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/notifications/threads/${p["threadId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityMarkThreadAsRead(p: {
    threadId: number
  }): Observable<void | void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/notifications/threads/${p["threadId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityGetThreadSubscriptionForAuthenticatedUser(p: {
    threadId: number
  }): Observable<t_thread_subscription | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/notifications/threads/${p["threadId"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activitySetThreadSubscription(p: {
    threadId: number
    requestBody?: {
      ignored?: boolean
    }
  }): Observable<t_thread_subscription | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/notifications/threads/${p["threadId"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityDeleteThreadSubscription(p: {
    threadId: number
  }): Observable<void | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/notifications/threads/${p["threadId"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  metaGetOctocat(p: { s?: string }): Observable<string> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { s: p["s"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/octocat`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsList(p: {
    since?: number
    perPage?: number
  }): Observable<t_organization_simple[] | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { since: p["since"], per_page: p["perPage"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/organizations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsGet(p: { org: string }): Observable<t_organization_full | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsUpdate(p: {
    org: string
    requestBody?: {
      advanced_security_enabled_for_new_repositories?: boolean
      billing_email?: string
      blog?: string
      company?: string
      default_repository_permission?: "read" | "write" | "admin" | "none"
      dependabot_alerts_enabled_for_new_repositories?: boolean
      dependabot_security_updates_enabled_for_new_repositories?: boolean
      dependency_graph_enabled_for_new_repositories?: boolean
      description?: string
      email?: string
      has_organization_projects?: boolean
      has_repository_projects?: boolean
      location?: string
      members_allowed_repository_creation_type?: "all" | "private" | "none"
      members_can_create_internal_repositories?: boolean
      members_can_create_pages?: boolean
      members_can_create_private_pages?: boolean
      members_can_create_private_repositories?: boolean
      members_can_create_public_pages?: boolean
      members_can_create_public_repositories?: boolean
      members_can_create_repositories?: boolean
      members_can_fork_private_repositories?: boolean
      name?: string
      secret_scanning_enabled_for_new_repositories?: boolean
      secret_scanning_push_protection_custom_link?: string
      secret_scanning_push_protection_custom_link_enabled?: boolean
      secret_scanning_push_protection_enabled_for_new_repositories?: boolean
      twitter_username?: string
      web_commit_signoff_required?: boolean
    }
  }): Observable<
    | t_organization_full
    | t_basic_error
    | (t_validation_error | t_validation_error_simple)
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/orgs/${p["org"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetActionsCacheUsageForOrg(p: {
    org: string
  }): Observable<t_actions_cache_usage_org_enterprise> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/cache/usage`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetActionsCacheUsageByRepoForOrg(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    repository_cache_usages: t_actions_cache_usage_by_repository[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/cache/usage-by-repository`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  oidcGetOidcCustomSubTemplateForOrg(p: {
    org: string
  }): Observable<t_oidc_custom_sub> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/oidc/customization/sub`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  oidcUpdateOidcCustomSubTemplateForOrg(p: {
    org: string
    requestBody: t_oidc_custom_sub
  }): Observable<t_empty_object | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/orgs/${p["org"]}/actions/oidc/customization/sub`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetGithubActionsPermissionsOrganization(p: {
    org: string
  }): Observable<t_actions_organization_permissions> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/permissions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetGithubActionsPermissionsOrganization(p: {
    org: string
    requestBody: {
      allowed_actions?: t_allowed_actions
      enabled_repositories: t_enabled_repositories
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/orgs/${p["org"]}/actions/permissions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListSelectedRepositoriesEnabledGithubActionsOrganization(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    repositories: t_repository[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/permissions/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(p: {
    org: string
    requestBody: {
      selected_repository_ids: number[]
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/permissions/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsEnableSelectedRepositoryGithubActionsOrganization(p: {
    org: string
    repositoryId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/permissions/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDisableSelectedRepositoryGithubActionsOrganization(p: {
    org: string
    repositoryId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/permissions/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetAllowedActionsOrganization(p: {
    org: string
  }): Observable<t_selected_actions> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/permissions/selected-actions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetAllowedActionsOrganization(p: {
    org: string
    requestBody?: t_selected_actions
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/permissions/selected-actions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(p: {
    org: string
  }): Observable<t_actions_get_default_workflow_permissions> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/permissions/workflow`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(p: {
    org: string
    requestBody?: t_actions_set_default_workflow_permissions
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/orgs/${p["org"]}/actions/permissions/workflow`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRequiredWorkflows(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    required_workflows: t_required_workflow[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/required_workflows`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateRequiredWorkflow(p: {
    org: string
    requestBody: {
      repository_id: string
      scope?: "selected" | "all"
      selected_repository_ids?: number[]
      workflow_file_path: string
    }
  }): Observable<t_required_workflow | t_validation_error_simple> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/actions/required_workflows`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetRequiredWorkflow(p: {
    org: string
    requiredWorkflowId: number
  }): Observable<t_required_workflow> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsUpdateRequiredWorkflow(p: {
    org: string
    requiredWorkflowId: number
    requestBody: {
      repository_id?: string
      scope?: "selected" | "all"
      selected_repository_ids?: number[]
      workflow_file_path?: string
    }
  }): Observable<t_required_workflow | t_validation_error_simple> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteRequiredWorkflow(p: {
    org: string
    requiredWorkflowId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListSelectedRepositoriesRequiredWorkflow(p: {
    org: string
    requiredWorkflowId: number
  }): Observable<{
    repositories: t_repository[]
    total_count: number
  } | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetSelectedReposToRequiredWorkflow(p: {
    org: string
    requiredWorkflowId: number
    requestBody: {
      selected_repository_ids: number[]
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsAddSelectedRepoToRequiredWorkflow(p: {
    org: string
    requiredWorkflowId: number
    repositoryId: number
  }): Observable<void | void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsRemoveSelectedRepoFromRequiredWorkflow(p: {
    org: string
    requiredWorkflowId: number
    repositoryId: number
  }): Observable<void | void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/required_workflows/${p["requiredWorkflowId"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListSelfHostedRunnerGroupsForOrg(p: {
    org: string
    perPage?: number
    page?: number
    visibleToRepository?: string
  }): Observable<{
    runner_groups: t_runner_groups_org[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      per_page: p["perPage"],
      page: p["page"],
      visible_to_repository: p["visibleToRepository"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/runner-groups`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateSelfHostedRunnerGroupForOrg(p: {
    org: string
    requestBody: {
      allows_public_repositories?: boolean
      name: string
      restricted_to_workflows?: boolean
      runners?: number[]
      selected_repository_ids?: number[]
      selected_workflows?: string[]
      visibility?: "selected" | "all" | "private"
    }
  }): Observable<t_runner_groups_org> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/actions/runner-groups`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetSelfHostedRunnerGroupForOrg(p: {
    org: string
    runnerGroupId: number
  }): Observable<t_runner_groups_org> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runner-groups/${p["runnerGroupId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsUpdateSelfHostedRunnerGroupForOrg(p: {
    org: string
    runnerGroupId: number
    requestBody: {
      allows_public_repositories?: boolean
      name: string
      restricted_to_workflows?: boolean
      selected_workflows?: string[]
      visibility?: "selected" | "all" | "private"
    }
  }): Observable<t_runner_groups_org> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runner-groups/${p["runnerGroupId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteSelfHostedRunnerGroupFromOrg(p: {
    org: string
    runnerGroupId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runner-groups/${p["runnerGroupId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRepoAccessToSelfHostedRunnerGroupInOrg(p: {
    org: string
    runnerGroupId: number
    page?: number
    perPage?: number
  }): Observable<{
    repositories: t_minimal_repository[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { page: p["page"], per_page: p["perPage"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runner-groups/${p["runnerGroupId"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(p: {
    org: string
    runnerGroupId: number
    requestBody: {
      selected_repository_ids: number[]
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runner-groups/${p["runnerGroupId"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(p: {
    org: string
    runnerGroupId: number
    repositoryId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runner-groups/${p["runnerGroupId"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListSelfHostedRunnersInGroupForOrg(p: {
    org: string
    runnerGroupId: number
    perPage?: number
    page?: number
  }): Observable<{
    runners: t_runner[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runner-groups/${p["runnerGroupId"]}/runners`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetSelfHostedRunnersInGroupForOrg(p: {
    org: string
    runnerGroupId: number
    requestBody: {
      runners: number[]
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runner-groups/${p["runnerGroupId"]}/runners`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsAddSelfHostedRunnerToGroupForOrg(p: {
    org: string
    runnerGroupId: number
    runnerId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runner-groups/${p["runnerGroupId"]}/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsRemoveSelfHostedRunnerFromGroupForOrg(p: {
    org: string
    runnerGroupId: number
    runnerId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runner-groups/${p["runnerGroupId"]}/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListSelfHostedRunnersForOrg(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    runners: t_runner[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/runners`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRunnerApplicationsForOrg(p: {
    org: string
  }): Observable<t_runner_application[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/runners/downloads`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateRegistrationTokenForOrg(p: {
    org: string
  }): Observable<t_authentication_token> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runners/registration-token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateRemoveTokenForOrg(p: {
    org: string
  }): Observable<t_authentication_token> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/actions/runners/remove-token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetSelfHostedRunnerForOrg(p: {
    org: string
    runnerId: number
  }): Observable<t_runner> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteSelfHostedRunnerFromOrg(p: {
    org: string
    runnerId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListLabelsForSelfHostedRunnerForOrg(p: {
    org: string
    runnerId: number
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsAddCustomLabelsToSelfHostedRunnerForOrg(p: {
    org: string
    runnerId: number
    requestBody: {
      labels: string[]
    }
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetCustomLabelsForSelfHostedRunnerForOrg(p: {
    org: string
    runnerId: number
    requestBody: {
      labels: string[]
    }
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(p: {
    org: string
    runnerId: number
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsRemoveCustomLabelFromSelfHostedRunnerForOrg(p: {
    org: string
    runnerId: number
    name: string
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/runners/${p["runnerId"]}/labels/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListOrgSecrets(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    secrets: t_organization_actions_secret[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/secrets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetOrgPublicKey(p: { org: string }): Observable<t_actions_public_key> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/secrets/public-key`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetOrgSecret(p: {
    org: string
    secretName: string
  }): Observable<t_organization_actions_secret> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateOrUpdateOrgSecret(p: {
    org: string
    secretName: string
    requestBody: {
      encrypted_value?: string
      key_id?: string
      selected_repository_ids?: number[]
      visibility: "all" | "private" | "selected"
    }
  }): Observable<t_empty_object | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteOrgSecret(p: {
    org: string
    secretName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListSelectedReposForOrgSecret(p: {
    org: string
    secretName: string
    page?: number
    perPage?: number
  }): Observable<{
    repositories: t_minimal_repository[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { page: p["page"], per_page: p["perPage"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetSelectedReposForOrgSecret(p: {
    org: string
    secretName: string
    requestBody: {
      selected_repository_ids: number[]
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsAddSelectedRepoToOrgSecret(p: {
    org: string
    secretName: string
    repositoryId: number
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsRemoveSelectedRepoFromOrgSecret(p: {
    org: string
    secretName: string
    repositoryId: number
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListOrgVariables(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    total_count: number
    variables: t_organization_actions_variable[]
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/variables`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateOrgVariable(p: {
    org: string
    requestBody: {
      name: string
      selected_repository_ids?: number[]
      value: string
      visibility: "all" | "private" | "selected"
    }
  }): Observable<t_empty_object> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/actions/variables`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetOrgVariable(p: {
    org: string
    name: string
  }): Observable<t_organization_actions_variable> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/actions/variables/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsUpdateOrgVariable(p: {
    org: string
    name: string
    requestBody: {
      name?: string
      selected_repository_ids?: number[]
      value?: string
      visibility?: "all" | "private" | "selected"
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/orgs/${p["org"]}/actions/variables/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteOrgVariable(p: { org: string; name: string }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/actions/variables/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListSelectedReposForOrgVariable(p: {
    org: string
    name: string
    page?: number
    perPage?: number
  }): Observable<{
    repositories: t_minimal_repository[]
    total_count: number
  } | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { page: p["page"], per_page: p["perPage"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetSelectedReposForOrgVariable(p: {
    org: string
    name: string
    requestBody: {
      selected_repository_ids: number[]
    }
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsAddSelectedRepoToOrgVariable(p: {
    org: string
    name: string
    repositoryId: number
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsRemoveSelectedRepoFromOrgVariable(p: {
    org: string
    name: string
    repositoryId: number
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/actions/variables/${p["name"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListBlockedUsers(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<t_simple_user[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/blocks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsCheckBlockedUser(p: {
    org: string
    username: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsBlockUser(p: {
    org: string
    username: string
  }): Observable<void | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/orgs/${p["org"]}/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsUnblockUser(p: { org: string; username: string }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningListAlertsForOrg(p: {
    org: string
    toolName?: t_code_scanning_analysis_tool_name
    toolGuid?: t_code_scanning_analysis_tool_guid
    before?: string
    after?: string
    page?: number
    perPage?: number
    direction?: "asc" | "desc"
    state?: t_code_scanning_alert_state
    sort?: "created" | "updated"
    severity?: t_code_scanning_alert_severity
  }): Observable<
    | t_code_scanning_organization_alert_items[]
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      tool_name: p["toolName"],
      tool_guid: p["toolGuid"],
      before: p["before"],
      after: p["after"],
      page: p["page"],
      per_page: p["perPage"],
      direction: p["direction"],
      state: p["state"],
      sort: p["sort"],
      severity: p["severity"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/code-scanning/alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesListInOrganization(p: {
    perPage?: number
    page?: number
    org: string
  }): Observable<
    | {
        codespaces: t_codespace[]
        total_count: number
      }
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/codespaces`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesSetCodespacesBilling(p: {
    org: string
    requestBody: {
      selected_usernames?: string[]
      visibility:
        | "disabled"
        | "selected_members"
        | "all_members"
        | "all_members_and_outside_collaborators"
    }
  }): Observable<
    void | void | void | t_basic_error | t_validation_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/orgs/${p["org"]}/codespaces/billing`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesListOrgSecrets(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    secrets: t_codespaces_org_secret[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/codespaces/secrets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesGetOrgPublicKey(p: {
    org: string
  }): Observable<t_codespaces_public_key> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/codespaces/secrets/public-key`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesGetOrgSecret(p: {
    org: string
    secretName: string
  }): Observable<t_codespaces_org_secret> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesCreateOrUpdateOrgSecret(p: {
    org: string
    secretName: string
    requestBody: {
      encrypted_value?: string
      key_id?: string
      selected_repository_ids?: number[]
      visibility: "all" | "private" | "selected"
    }
  }): Observable<t_empty_object | void | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesDeleteOrgSecret(p: {
    org: string
    secretName: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesListSelectedReposForOrgSecret(p: {
    org: string
    secretName: string
    page?: number
    perPage?: number
  }): Observable<
    | {
        repositories: t_minimal_repository[]
        total_count: number
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { page: p["page"], per_page: p["perPage"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesSetSelectedReposForOrgSecret(p: {
    org: string
    secretName: string
    requestBody: {
      selected_repository_ids: number[]
    }
  }): Observable<void | t_basic_error | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesAddSelectedRepoToOrgSecret(p: {
    org: string
    secretName: string
    repositoryId: number
  }): Observable<void | t_basic_error | void | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesRemoveSelectedRepoFromOrgSecret(p: {
    org: string
    secretName: string
    repositoryId: number
  }): Observable<void | t_basic_error | void | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotListAlertsForOrg(p: {
    org: string
    state?: string
    severity?: string
    ecosystem?: string
    package?: string
    scope?: "development" | "runtime"
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    before?: string
    after?: string
    first?: number
    last?: number
    perPage?: number
  }): Observable<
    | t_dependabot_alert_with_repository[]
    | void
    | t_scim_error
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      severity: p["severity"],
      ecosystem: p["ecosystem"],
      package: p["package"],
      scope: p["scope"],
      sort: p["sort"],
      direction: p["direction"],
      before: p["before"],
      after: p["after"],
      first: p["first"],
      last: p["last"],
      per_page: p["perPage"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/dependabot/alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotListOrgSecrets(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    secrets: t_organization_dependabot_secret[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/dependabot/secrets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotGetOrgPublicKey(p: {
    org: string
  }): Observable<t_dependabot_public_key> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/dependabot/secrets/public-key`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotGetOrgSecret(p: {
    org: string
    secretName: string
  }): Observable<t_organization_dependabot_secret> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotCreateOrUpdateOrgSecret(p: {
    org: string
    secretName: string
    requestBody: {
      encrypted_value?: string
      key_id?: string
      selected_repository_ids?: string[]
      visibility: "all" | "private" | "selected"
    }
  }): Observable<t_empty_object | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotDeleteOrgSecret(p: {
    org: string
    secretName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotListSelectedReposForOrgSecret(p: {
    org: string
    secretName: string
    page?: number
    perPage?: number
  }): Observable<{
    repositories: t_minimal_repository[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { page: p["page"], per_page: p["perPage"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotSetSelectedReposForOrgSecret(p: {
    org: string
    secretName: string
    requestBody: {
      selected_repository_ids: number[]
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotAddSelectedRepoToOrgSecret(p: {
    org: string
    secretName: string
    repositoryId: number
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotRemoveSelectedRepoFromOrgSecret(p: {
    org: string
    secretName: string
    repositoryId: number
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/dependabot/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListPublicOrgEvents(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<t_event[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListFailedInvitations(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<t_organization_invitation[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/failed_invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListWebhooks(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<t_org_hook[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/hooks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsCreateWebhook(p: {
    org: string
    requestBody: {
      active?: boolean
      config: {
        content_type?: t_webhook_config_content_type
        insecure_ssl?: t_webhook_config_insecure_ssl
        password?: string
        secret?: t_webhook_config_secret
        url: t_webhook_config_url
        username?: string
      }
      events?: string[]
      name: string
    }
  }): Observable<t_org_hook | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/hooks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsGetWebhook(p: {
    org: string
    hookId: number
  }): Observable<t_org_hook | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsUpdateWebhook(p: {
    org: string
    hookId: number
    requestBody?: {
      active?: boolean
      config?: {
        content_type?: t_webhook_config_content_type
        insecure_ssl?: t_webhook_config_insecure_ssl
        secret?: t_webhook_config_secret
        url: t_webhook_config_url
      }
      events?: string[]
      name?: string
    }
  }): Observable<t_org_hook | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsDeleteWebhook(p: {
    org: string
    hookId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsGetWebhookConfigForOrg(p: {
    org: string
    hookId: number
  }): Observable<t_webhook_config> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}/config`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsUpdateWebhookConfigForOrg(p: {
    org: string
    hookId: number
    requestBody?: {
      content_type?: t_webhook_config_content_type
      insecure_ssl?: t_webhook_config_insecure_ssl
      secret?: t_webhook_config_secret
      url?: t_webhook_config_url
    }
  }): Observable<t_webhook_config> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}/config`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListWebhookDeliveries(p: {
    org: string
    hookId: number
    perPage?: number
    cursor?: string
    redelivery?: boolean
  }): Observable<t_hook_delivery_item[] | t_scim_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      per_page: p["perPage"],
      cursor: p["cursor"],
      redelivery: p["redelivery"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/hooks/${p["hookId"]}/deliveries`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsGetWebhookDelivery(p: {
    org: string
    hookId: number
    deliveryId: number
  }): Observable<t_hook_delivery | t_scim_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsRedeliverWebhookDelivery(p: {
    org: string
    hookId: number
    deliveryId: number
  }): Observable<
    | {
        [key: string]: unknown
      }
    | t_scim_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}/attempts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsPingWebhook(p: {
    org: string
    hookId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/hooks/${p["hookId"]}/pings`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetOrgInstallation(p: { org: string }): Observable<t_installation> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/installation`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListAppInstallations(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<{
    installations: t_installation[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/installations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsGetRestrictionsForOrg(p: { org: string }): Observable<{
    [key: string]: unknown
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsSetRestrictionsForOrg(p: {
    org: string
    requestBody: t_interaction_limit
  }): Observable<t_interaction_limit_response | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/orgs/${p["org"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsRemoveRestrictionsForOrg(p: { org: string }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListPendingInvitations(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<t_organization_invitation[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsCreateInvitation(p: {
    org: string
    requestBody?: {
      email?: string
      invitee_id?: number
      role?: "admin" | "direct_member" | "billing_manager"
      team_ids?: number[]
    }
  }): Observable<
    t_organization_invitation | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsCancelInvitation(p: {
    org: string
    invitationId: number
  }): Observable<void | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/invitations/${p["invitationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListInvitationTeams(p: {
    org: string
    invitationId: number
    perPage?: number
    page?: number
  }): Observable<t_team[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/invitations/${p["invitationId"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListForOrg(p: {
    org: string
    filter?:
      | "assigned"
      | "created"
      | "mentioned"
      | "subscribed"
      | "repos"
      | "all"
    state?: "open" | "closed" | "all"
    labels?: string
    sort?: "created" | "updated" | "comments"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<t_issue[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListMembers(p: {
    org: string
    filter?: "2fa_disabled" | "all"
    role?: "all" | "admin" | "member"
    perPage?: number
    page?: number
  }): Observable<t_simple_user[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      filter: p["filter"],
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/members`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsCheckMembershipForUser(p: {
    org: string
    username: string
  }): Observable<void | void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsRemoveMember(p: {
    org: string
    username: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesGetCodespacesForUserInOrg(p: {
    perPage?: number
    page?: number
    org: string
    username: string
  }): Observable<
    | {
        codespaces: t_codespace[]
        total_count: number
      }
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/members/${p["username"]}/codespaces`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesDeleteFromOrganization(p: {
    org: string
    username: string
    codespaceName: string
  }): Observable<
    | {
        [key: string]: unknown
      }
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/members/${p["username"]}/codespaces/${p["codespaceName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesStopInOrganization(p: {
    org: string
    username: string
    codespaceName: string
  }): Observable<
    | t_codespace
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/members/${p["username"]}/codespaces/${p["codespaceName"]}/stop`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsGetMembershipForUser(p: {
    org: string
    username: string
  }): Observable<t_org_membership | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsSetMembershipForUser(p: {
    org: string
    username: string
    requestBody?: {
      role?: "admin" | "member"
    }
  }): Observable<t_org_membership | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/orgs/${p["org"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsRemoveMembershipForUser(p: {
    org: string
    username: string
  }): Observable<void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsListForOrg(p: {
    org: string
    perPage?: number
    page?: number
    exclude?: "repositories"[]
  }): Observable<t_migration[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      per_page: p["perPage"],
      page: p["page"],
      exclude: p["exclude"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/migrations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsStartForOrg(p: {
    org: string
    requestBody: {
      exclude?: "repositories"[]
      exclude_attachments?: boolean
      exclude_git_data?: boolean
      exclude_metadata?: boolean
      exclude_owner_projects?: boolean
      exclude_releases?: boolean
      lock_repositories?: boolean
      org_metadata_only?: boolean
      repositories: string[]
    }
  }): Observable<t_migration | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/migrations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetStatusForOrg(p: {
    org: string
    migrationId: number
    exclude?: "repositories"[]
  }): Observable<t_migration | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { exclude: p["exclude"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/migrations/${p["migrationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsDownloadArchiveForOrg(p: {
    org: string
    migrationId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/migrations/${p["migrationId"]}/archive`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsDeleteArchiveForOrg(p: {
    org: string
    migrationId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/migrations/${p["migrationId"]}/archive`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsUnlockRepoForOrg(p: {
    org: string
    migrationId: number
    repoName: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/migrations/${p["migrationId"]}/repos/${p["repoName"]}/lock`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsListReposForOrg(p: {
    org: string
    migrationId: number
    perPage?: number
    page?: number
  }): Observable<t_minimal_repository[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/migrations/${p["migrationId"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListOutsideCollaborators(p: {
    org: string
    filter?: "2fa_disabled" | "all"
    perPage?: number
    page?: number
  }): Observable<t_simple_user[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/outside_collaborators`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsConvertMemberToOutsideCollaborator(p: {
    org: string
    username: string
    requestBody?: {
      async?: boolean
    }
  }): Observable<
    | {
        [key: string]: unknown
      }
    | void
    | void
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/outside_collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsRemoveOutsideCollaborator(p: {
    org: string
    username: string
  }): Observable<void | {
    documentation_url?: string
    message?: string
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/outside_collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesListPackagesForOrganization(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    org: string
    visibility?: "public" | "private" | "internal"
  }): Observable<t_package[] | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      package_type: p["packageType"],
      visibility: p["visibility"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/packages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesGetPackageForOrganization(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    org: string
  }): Observable<t_package> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesDeletePackageForOrg(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    org: string
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesRestorePackageForOrg(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    org: string
    token?: string
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { token: p["token"] }

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/restore`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesGetAllPackageVersionsForPackageOwnedByOrg(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    org: string
    page?: number
    perPage?: number
    state?: "active" | "deleted"
  }): Observable<
    t_package_version[] | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      page: p["page"],
      per_page: p["perPage"],
      state: p["state"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesGetPackageVersionForOrganization(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    org: string
    packageVersionId: number
  }): Observable<t_package_version> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesDeletePackageVersionForOrg(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    org: string
    packageVersionId: number
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesRestorePackageVersionForOrg(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    org: string
    packageVersionId: number
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}/restore`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListForOrg(p: {
    org: string
    state?: "open" | "closed" | "all"
    perPage?: number
    page?: number
  }): Observable<t_project[] | t_validation_error_simple> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsCreateForOrg(p: {
    org: string
    requestBody: {
      body?: string
      name: string
    }
  }): Observable<
    | t_project
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListPublicMembers(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<t_simple_user[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/public_members`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsCheckPublicMembershipForUser(p: {
    org: string
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/public_members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsSetPublicMembershipForAuthenticatedUser(p: {
    org: string
    username: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/public_members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsRemovePublicMembershipForAuthenticatedUser(p: {
    org: string
    username: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/public_members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListForOrg(p: {
    org: string
    type?: "all" | "public" | "private" | "forks" | "sources" | "member"
    sort?: "created" | "updated" | "pushed" | "full_name"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<t_minimal_repository[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateInOrg(p: {
    org: string
    requestBody: {
      allow_auto_merge?: boolean
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      auto_init?: boolean
      delete_branch_on_merge?: boolean
      description?: string
      gitignore_template?: string
      has_downloads?: boolean
      has_issues?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      is_template?: boolean
      license_template?: string
      merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
      merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
      name: string
      private?: boolean
      squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
      squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
      team_id?: number
      use_squash_pr_title_as_default?: boolean
      visibility?: "public" | "private"
    }
  }): Observable<t_repository | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  secretScanningListAlertsForOrg(p: {
    org: string
    state?: "open" | "resolved"
    secretType?: string
    resolution?: string
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    page?: number
    perPage?: number
    before?: string
    after?: string
  }): Observable<
    | t_organization_secret_scanning_alert[]
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      secret_type: p["secretType"],
      resolution: p["resolution"],
      sort: p["sort"],
      direction: p["direction"],
      page: p["page"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/secret-scanning/alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListSecurityManagerTeams(p: {
    org: string
  }): Observable<t_team_simple[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/security-managers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsAddSecurityManagerTeam(p: {
    org: string
    teamSlug: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/security-managers/teams/${p["teamSlug"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsRemoveSecurityManagerTeam(p: {
    org: string
    teamSlug: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/security-managers/teams/${p["teamSlug"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  billingGetGithubActionsBillingOrg(p: {
    org: string
  }): Observable<t_actions_billing_usage> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/settings/billing/actions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  billingGetGithubPackagesBillingOrg(p: {
    org: string
  }): Observable<t_packages_billing_usage> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/settings/billing/packages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  billingGetSharedStorageBillingOrg(p: {
    org: string
  }): Observable<t_combined_billing_usage> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/settings/billing/shared-storage`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsList(p: {
    org: string
    perPage?: number
    page?: number
  }): Observable<t_team[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreate(p: {
    org: string
    requestBody: {
      description?: string
      maintainers?: string[]
      name: string
      parent_team_id?: number
      permission?: "pull" | "push"
      privacy?: "secret" | "closed"
      repo_names?: string[]
    }
  }): Observable<t_team_full | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/orgs/${p["org"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetByName(p: {
    org: string
    teamSlug: string
  }): Observable<t_team_full | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateInOrg(p: {
    org: string
    teamSlug: string
    requestBody?: {
      description?: string
      name?: string
      parent_team_id?: number | null
      permission?: "pull" | "push" | "admin"
      privacy?: "secret" | "closed"
    }
  }): Observable<
    | t_team_full
    | t_team_full
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteInOrg(p: { org: string; teamSlug: string }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListDiscussionsInOrg(p: {
    org: string
    teamSlug: string
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
    pinned?: string
  }): Observable<t_team_discussion[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
      pinned: p["pinned"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreateDiscussionInOrg(p: {
    org: string
    teamSlug: string
    requestBody: {
      body: string
      private?: boolean
      title: string
    }
  }): Observable<t_team_discussion> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetDiscussionInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
  }): Observable<t_team_discussion> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateDiscussionInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    requestBody?: {
      body?: string
      title?: string
    }
  }): Observable<t_team_discussion> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteDiscussionInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListDiscussionCommentsInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<t_team_discussion_comment[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreateDiscussionCommentInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    requestBody: {
      body: string
    }
  }): Observable<t_team_discussion_comment> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetDiscussionCommentInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
  }): Observable<t_team_discussion_comment> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateDiscussionCommentInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
    requestBody: {
      body: string
    }
  }): Observable<t_team_discussion_comment> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteDiscussionCommentInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForTeamDiscussionCommentInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<t_reaction[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForTeamDiscussionCommentInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<t_reaction | t_reaction> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForTeamDiscussionComment(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    commentNumber: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForTeamDiscussionInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<t_reaction[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForTeamDiscussionInOrg(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<t_reaction | t_reaction> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForTeamDiscussion(p: {
    org: string
    teamSlug: string
    discussionNumber: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/discussions/${p["discussionNumber"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListPendingInvitationsInOrg(p: {
    org: string
    teamSlug: string
    perPage?: number
    page?: number
  }): Observable<t_organization_invitation[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListMembersInOrg(p: {
    org: string
    teamSlug: string
    role?: "member" | "maintainer" | "all"
    perPage?: number
    page?: number
  }): Observable<t_simple_user[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/members`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetMembershipForUserInOrg(p: {
    org: string
    teamSlug: string
    username: string
  }): Observable<t_team_membership | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateMembershipForUserInOrg(p: {
    org: string
    teamSlug: string
    username: string
    requestBody?: {
      role?: "member" | "maintainer"
    }
  }): Observable<t_team_membership | void | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveMembershipForUserInOrg(p: {
    org: string
    teamSlug: string
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListProjectsInOrg(p: {
    org: string
    teamSlug: string
    perPage?: number
    page?: number
  }): Observable<t_team_project[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCheckPermissionsForProjectInOrg(p: {
    org: string
    teamSlug: string
    projectId: number
  }): Observable<t_team_project | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateProjectPermissionsInOrg(p: {
    org: string
    teamSlug: string
    projectId: number
    requestBody?: {
      permission?: "read" | "write" | "admin"
    }
  }): Observable<void | {
    documentation_url?: string
    message?: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveProjectInOrg(p: {
    org: string
    teamSlug: string
    projectId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListReposInOrg(p: {
    org: string
    teamSlug: string
    perPage?: number
    page?: number
  }): Observable<t_minimal_repository[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCheckPermissionsForRepoInOrg(p: {
    org: string
    teamSlug: string
    owner: string
    repo: string
  }): Observable<t_team_repository | void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateRepoPermissionsInOrg(p: {
    org: string
    teamSlug: string
    owner: string
    repo: string
    requestBody?: {
      permission?: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveRepoInOrg(p: {
    org: string
    teamSlug: string
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/orgs/${p["org"]}/teams/${p["teamSlug"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListChildInOrg(p: {
    org: string
    teamSlug: string
    perPage?: number
    page?: number
  }): Observable<t_team[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/orgs/${p["org"]}/teams/${p["teamSlug"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsEnableOrDisableSecurityProductOnAllOrgRepos(p: {
    org: string
    securityProduct:
      | "dependency_graph"
      | "dependabot_alerts"
      | "dependabot_security_updates"
      | "advanced_security"
      | "secret_scanning"
      | "secret_scanning_push_protection"
    enablement: "enable_all" | "disable_all"
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/orgs/${p["org"]}/${p["securityProduct"]}/${p["enablement"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsGetCard(p: {
    cardId: number
  }): Observable<
    t_project_card | void | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/columns/cards/${p["cardId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsUpdateCard(p: {
    cardId: number
    requestBody?: {
      archived?: boolean
      note?: string | null
    }
  }): Observable<
    | t_project_card
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/projects/columns/cards/${p["cardId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsDeleteCard(p: { cardId: number }): Observable<
    | void
    | void
    | t_basic_error
    | {
        documentation_url?: string
        errors?: string[]
        message?: string
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/projects/columns/cards/${p["cardId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsMoveCard(p: {
    cardId: number
    requestBody: {
      column_id?: number
      position: string
    }
  }): Observable<
    | {
        [key: string]: unknown
      }
    | void
    | t_basic_error
    | {
        documentation_url?: string
        errors?: {
          code?: string
          field?: string
          message?: string
          resource?: string
        }[]
        message?: string
      }
    | t_validation_error
    | {
        code?: string
        documentation_url?: string
        errors?: {
          code?: string
          message?: string
        }[]
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/projects/columns/cards/${p["cardId"]}/moves`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsGetColumn(p: {
    columnId: number
  }): Observable<
    t_project_column | void | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/columns/${p["columnId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsUpdateColumn(p: {
    columnId: number
    requestBody: {
      name: string
    }
  }): Observable<t_project_column | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/projects/columns/${p["columnId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsDeleteColumn(p: {
    columnId: number
  }): Observable<void | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/projects/columns/${p["columnId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListCards(p: {
    columnId: number
    archivedState?: "all" | "archived" | "not_archived"
    perPage?: number
    page?: number
  }): Observable<t_project_card[] | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      archived_state: p["archivedState"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/columns/${p["columnId"]}/cards`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsCreateCard(p: {
    columnId: number
    requestBody:
      | {
          note: string | null
        }
      | {
          content_id: number
          content_type: string
        }
  }): Observable<
    | t_project_card
    | void
    | t_basic_error
    | t_basic_error
    | (t_validation_error | t_validation_error_simple)
    | {
        code?: string
        documentation_url?: string
        errors?: {
          code?: string
          message?: string
        }[]
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/projects/columns/${p["columnId"]}/cards`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsMoveColumn(p: {
    columnId: number
    requestBody: {
      position: string
    }
  }): Observable<
    | {
        [key: string]: unknown
      }
    | void
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/projects/columns/${p["columnId"]}/moves`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsGet(p: {
    projectId: number
  }): Observable<t_project | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsUpdate(p: {
    projectId: number
    requestBody?: {
      body?: string | null
      name?: string
      organization_permission?: "read" | "write" | "admin" | "none"
      private?: boolean
      state?: string
    }
  }): Observable<
    | t_project
    | void
    | t_basic_error
    | {
        documentation_url?: string
        errors?: string[]
        message?: string
      }
    | void
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsDelete(p: { projectId: number }): Observable<
    | void
    | void
    | t_basic_error
    | {
        documentation_url?: string
        errors?: string[]
        message?: string
      }
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListCollaborators(p: {
    projectId: number
    affiliation?: "outside" | "direct" | "all"
    perPage?: number
    page?: number
  }): Observable<
    | t_simple_user[]
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      affiliation: p["affiliation"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/${p["projectId"]}/collaborators`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsAddCollaborator(p: {
    projectId: number
    username: string
    requestBody?: {
      permission?: "read" | "write" | "admin"
    }
  }): Observable<
    | void
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/projects/${p["projectId"]}/collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsRemoveCollaborator(p: {
    projectId: number
    username: string
  }): Observable<
    | void
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/projects/${p["projectId"]}/collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsGetPermissionForUser(p: {
    projectId: number
    username: string
  }): Observable<
    | t_project_collaborator_permission
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/projects/${p["projectId"]}/collaborators/${p["username"]}/permission`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListColumns(p: {
    projectId: number
    perPage?: number
    page?: number
  }): Observable<t_project_column[] | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/projects/${p["projectId"]}/columns`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsCreateColumn(p: {
    projectId: number
    requestBody: {
      name: string
    }
  }): Observable<
    | t_project_column
    | void
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/projects/${p["projectId"]}/columns`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  rateLimitGet(): Observable<t_rate_limit_overview | void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/rate_limit`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRepoRequiredWorkflows(p: {
    org: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    | {
        required_workflows: t_repo_required_workflow[]
        total_count: number
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["org"]}/${p["repo"]}/actions/required_workflows`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetRepoRequiredWorkflow(p: {
    org: string
    repo: string
    requiredWorkflowIdForRepo: number
  }): Observable<t_repo_required_workflow | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["org"]}/${p["repo"]}/actions/required_workflows/${p["requiredWorkflowIdForRepo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetRepoRequiredWorkflowUsage(p: {
    org: string
    repo: string
    requiredWorkflowIdForRepo: number
  }): Observable<t_workflow_usage | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["org"]}/${p["repo"]}/actions/required_workflows/${p["requiredWorkflowIdForRepo"]}/timing`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGet(p: {
    owner: string
    repo: string
  }): Observable<
    t_full_repository | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdate(p: {
    owner: string
    repo: string
    requestBody?: {
      allow_auto_merge?: boolean
      allow_forking?: boolean
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      allow_update_branch?: boolean
      archived?: boolean
      default_branch?: string
      delete_branch_on_merge?: boolean
      description?: string
      has_issues?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      is_template?: boolean
      merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
      merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
      name?: string
      private?: boolean
      security_and_analysis?: {
        advanced_security?: {
          status?: string
        }
        secret_scanning?: {
          status?: string
        }
        secret_scanning_push_protection?: {
          status?: string
        }
      } | null
      squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
      squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
      use_squash_pr_title_as_default?: boolean
      visibility?: "public" | "private"
      web_commit_signoff_required?: boolean
    }
  }): Observable<
    | t_full_repository
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDelete(p: { owner: string; repo: string }): Observable<
    | void
    | t_basic_error
    | {
        documentation_url?: string
        message?: string
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListArtifactsForRepo(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
    name?: string
  }): Observable<{
    artifacts: t_artifact[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      per_page: p["perPage"],
      page: p["page"],
      name: p["name"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetArtifact(p: {
    owner: string
    repo: string
    artifactId: number
  }): Observable<t_artifact> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteArtifact(p: {
    owner: string
    repo: string
    artifactId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDownloadArtifact(p: {
    owner: string
    repo: string
    artifactId: number
    archiveFormat: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/artifacts/${p["artifactId"]}/${p["archiveFormat"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetActionsCacheUsage(p: {
    owner: string
    repo: string
  }): Observable<t_actions_cache_usage_by_repository> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/cache/usage`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetActionsCacheList(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
    ref?: t_code_scanning_ref
    key?: string
    sort?: "created_at" | "last_accessed_at" | "size_in_bytes"
    direction?: "asc" | "desc"
  }): Observable<t_actions_cache_list> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      per_page: p["perPage"],
      page: p["page"],
      ref: p["ref"],
      key: p["key"],
      sort: p["sort"],
      direction: p["direction"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/caches`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteActionsCacheByKey(p: {
    owner: string
    repo: string
    key: string
    ref?: t_code_scanning_ref
  }): Observable<t_actions_cache_list> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { key: p["key"], ref: p["ref"] }

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/caches`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteActionsCacheById(p: {
    owner: string
    repo: string
    cacheId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/caches/${p["cacheId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetJobForWorkflowRun(p: {
    owner: string
    repo: string
    jobId: number
  }): Observable<t_job> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/jobs/${p["jobId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDownloadJobLogsForWorkflowRun(p: {
    owner: string
    repo: string
    jobId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/jobs/${p["jobId"]}/logs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsReRunJobForWorkflowRun(p: {
    owner: string
    repo: string
    jobId: number
    requestBody?: {
      enable_debug_logging?: boolean
    }
  }): Observable<t_empty_object | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/jobs/${p["jobId"]}/rerun`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetCustomOidcSubClaimForRepo(p: {
    owner: string
    repo: string
  }): Observable<t_oidc_custom_sub_repo | t_scim_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/oidc/customization/sub`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetCustomOidcSubClaimForRepo(p: {
    owner: string
    repo: string
    requestBody: t_oidc_custom_sub_repo
  }): Observable<
    t_empty_object | t_scim_error | t_basic_error | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/oidc/customization/sub`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetGithubActionsPermissionsRepository(p: {
    owner: string
    repo: string
  }): Observable<t_actions_repository_permissions> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/permissions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetGithubActionsPermissionsRepository(p: {
    owner: string
    repo: string
    requestBody: {
      allowed_actions?: t_allowed_actions
      enabled: t_actions_enabled
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/permissions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetWorkflowAccessToRepository(p: {
    owner: string
    repo: string
  }): Observable<t_actions_workflow_access_to_repository> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/access`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetWorkflowAccessToRepository(p: {
    owner: string
    repo: string
    requestBody: t_actions_workflow_access_to_repository
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/access`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetAllowedActionsRepository(p: {
    owner: string
    repo: string
  }): Observable<t_selected_actions> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/selected-actions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetAllowedActionsRepository(p: {
    owner: string
    repo: string
    requestBody?: t_selected_actions
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/selected-actions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetGithubActionsDefaultWorkflowPermissionsRepository(p: {
    owner: string
    repo: string
  }): Observable<t_actions_get_default_workflow_permissions> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/workflow`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetGithubActionsDefaultWorkflowPermissionsRepository(p: {
    owner: string
    repo: string
    requestBody: t_actions_set_default_workflow_permissions
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/permissions/workflow`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRequiredWorkflowRuns(p: {
    owner: string
    repo: string
    requiredWorkflowIdForRepo: number
    actor?: string
    branch?: string
    event?: string
    status?:
      | "completed"
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "skipped"
      | "stale"
      | "success"
      | "timed_out"
      | "in_progress"
      | "queued"
      | "requested"
      | "waiting"
    perPage?: number
    page?: number
    created?: string
    excludePullRequests?: boolean
    checkSuiteId?: number
    headSha?: string
  }): Observable<{
    total_count: number
    workflow_runs: t_workflow_run[]
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      actor: p["actor"],
      branch: p["branch"],
      event: p["event"],
      status: p["status"],
      per_page: p["perPage"],
      page: p["page"],
      created: p["created"],
      exclude_pull_requests: p["excludePullRequests"],
      check_suite_id: p["checkSuiteId"],
      head_sha: p["headSha"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/required_workflows/${p["requiredWorkflowIdForRepo"]}/runs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListSelfHostedRunnersForRepo(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<{
    runners: t_runner[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRunnerApplicationsForRepo(p: {
    owner: string
    repo: string
  }): Observable<t_runner_application[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/downloads`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateRegistrationTokenForRepo(p: {
    owner: string
    repo: string
  }): Observable<t_authentication_token> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/registration-token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateRemoveTokenForRepo(p: {
    owner: string
    repo: string
  }): Observable<t_authentication_token> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/remove-token`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetSelfHostedRunnerForRepo(p: {
    owner: string
    repo: string
    runnerId: number
  }): Observable<t_runner> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteSelfHostedRunnerFromRepo(p: {
    owner: string
    repo: string
    runnerId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListLabelsForSelfHostedRunnerForRepo(p: {
    owner: string
    repo: string
    runnerId: number
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsAddCustomLabelsToSelfHostedRunnerForRepo(p: {
    owner: string
    repo: string
    runnerId: number
    requestBody: {
      labels: string[]
    }
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsSetCustomLabelsForSelfHostedRunnerForRepo(p: {
    owner: string
    repo: string
    runnerId: number
    requestBody: {
      labels: string[]
    }
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(p: {
    owner: string
    repo: string
    runnerId: number
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsRemoveCustomLabelFromSelfHostedRunnerForRepo(p: {
    owner: string
    repo: string
    runnerId: number
    name: string
  }): Observable<
    | {
        labels: t_runner_label[]
        total_count: number
      }
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runners/${p["runnerId"]}/labels/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListWorkflowRunsForRepo(p: {
    owner: string
    repo: string
    actor?: string
    branch?: string
    event?: string
    status?:
      | "completed"
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "skipped"
      | "stale"
      | "success"
      | "timed_out"
      | "in_progress"
      | "queued"
      | "requested"
      | "waiting"
    perPage?: number
    page?: number
    created?: string
    excludePullRequests?: boolean
    checkSuiteId?: number
    headSha?: string
  }): Observable<{
    total_count: number
    workflow_runs: t_workflow_run[]
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      actor: p["actor"],
      branch: p["branch"],
      event: p["event"],
      status: p["status"],
      per_page: p["perPage"],
      page: p["page"],
      created: p["created"],
      exclude_pull_requests: p["excludePullRequests"],
      check_suite_id: p["checkSuiteId"],
      head_sha: p["headSha"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/actions/runs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetWorkflowRun(p: {
    owner: string
    repo: string
    runId: number
    excludePullRequests?: boolean
  }): Observable<t_workflow_run> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { exclude_pull_requests: p["excludePullRequests"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteWorkflowRun(p: {
    owner: string
    repo: string
    runId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetReviewsForRun(p: {
    owner: string
    repo: string
    runId: number
  }): Observable<t_environment_approvals[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/approvals`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsApproveWorkflowRun(p: {
    owner: string
    repo: string
    runId: number
  }): Observable<t_empty_object | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/approve`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListWorkflowRunArtifacts(p: {
    owner: string
    repo: string
    runId: number
    perPage?: number
    page?: number
  }): Observable<{
    artifacts: t_artifact[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/artifacts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetWorkflowRunAttempt(p: {
    owner: string
    repo: string
    runId: number
    attemptNumber: number
    excludePullRequests?: boolean
  }): Observable<t_workflow_run> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { exclude_pull_requests: p["excludePullRequests"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/attempts/${p["attemptNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListJobsForWorkflowRunAttempt(p: {
    owner: string
    repo: string
    runId: number
    attemptNumber: number
    perPage?: number
    page?: number
  }): Observable<
    | {
        jobs: t_job[]
        total_count: number
      }
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/attempts/${p["attemptNumber"]}/jobs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDownloadWorkflowRunAttemptLogs(p: {
    owner: string
    repo: string
    runId: number
    attemptNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/attempts/${p["attemptNumber"]}/logs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCancelWorkflowRun(p: {
    owner: string
    repo: string
    runId: number
  }): Observable<t_empty_object | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/cancel`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListJobsForWorkflowRun(p: {
    owner: string
    repo: string
    runId: number
    filter?: "latest" | "all"
    perPage?: number
    page?: number
  }): Observable<{
    jobs: t_job[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/jobs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDownloadWorkflowRunLogs(p: {
    owner: string
    repo: string
    runId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/logs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteWorkflowRunLogs(p: {
    owner: string
    repo: string
    runId: number
  }): Observable<void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/logs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetPendingDeploymentsForRun(p: {
    owner: string
    repo: string
    runId: number
  }): Observable<t_pending_deployment[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/pending_deployments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsReviewPendingDeploymentsForRun(p: {
    owner: string
    repo: string
    runId: number
    requestBody: {
      comment: string
      environment_ids: number[]
      state: "approved" | "rejected"
    }
  }): Observable<t_deployment[]> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/pending_deployments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsReRunWorkflow(p: {
    owner: string
    repo: string
    runId: number
    requestBody?: {
      enable_debug_logging?: boolean
    }
  }): Observable<t_empty_object> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/rerun`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsReRunWorkflowFailedJobs(p: {
    owner: string
    repo: string
    runId: number
    requestBody?: {
      enable_debug_logging?: boolean
    }
  }): Observable<t_empty_object> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/rerun-failed-jobs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetWorkflowRunUsage(p: {
    owner: string
    repo: string
    runId: number
  }): Observable<t_workflow_run_usage> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/runs/${p["runId"]}/timing`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRepoSecrets(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<{
    secrets: t_actions_secret[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/secrets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetRepoPublicKey(p: {
    owner: string
    repo: string
  }): Observable<t_actions_public_key> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/public-key`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetRepoSecret(p: {
    owner: string
    repo: string
    secretName: string
  }): Observable<t_actions_secret> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateOrUpdateRepoSecret(p: {
    owner: string
    repo: string
    secretName: string
    requestBody: {
      encrypted_value?: string
      key_id?: string
    }
  }): Observable<t_empty_object | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteRepoSecret(p: {
    owner: string
    repo: string
    secretName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRepoVariables(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<{
    total_count: number
    variables: t_actions_variable[]
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/variables`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateRepoVariable(p: {
    owner: string
    repo: string
    requestBody: {
      name: string
      value: string
    }
  }): Observable<t_empty_object> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/variables`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetRepoVariable(p: {
    owner: string
    repo: string
    name: string
  }): Observable<t_actions_variable> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/variables/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsUpdateRepoVariable(p: {
    owner: string
    repo: string
    name: string
    requestBody: {
      name?: string
      value?: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/variables/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteRepoVariable(p: {
    owner: string
    repo: string
    name: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/variables/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListRepoWorkflows(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<{
    total_count: number
    workflows: t_workflow[]
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/workflows`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetWorkflow(p: {
    owner: string
    repo: string
    workflowId: number | string
  }): Observable<t_workflow> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDisableWorkflow(p: {
    owner: string
    repo: string
    workflowId: number | string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/disable`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateWorkflowDispatch(p: {
    owner: string
    repo: string
    workflowId: number | string
    requestBody: {
      inputs?: {
        [key: string]: unknown
      }
      ref: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/dispatches`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsEnableWorkflow(p: {
    owner: string
    repo: string
    workflowId: number | string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/enable`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListWorkflowRuns(p: {
    owner: string
    repo: string
    workflowId: number | string
    actor?: string
    branch?: string
    event?: string
    status?:
      | "completed"
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "skipped"
      | "stale"
      | "success"
      | "timed_out"
      | "in_progress"
      | "queued"
      | "requested"
      | "waiting"
    perPage?: number
    page?: number
    created?: string
    excludePullRequests?: boolean
    checkSuiteId?: number
    headSha?: string
  }): Observable<{
    total_count: number
    workflow_runs: t_workflow_run[]
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      actor: p["actor"],
      branch: p["branch"],
      event: p["event"],
      status: p["status"],
      per_page: p["perPage"],
      page: p["page"],
      created: p["created"],
      exclude_pull_requests: p["excludePullRequests"],
      check_suite_id: p["checkSuiteId"],
      head_sha: p["headSha"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/runs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetWorkflowUsage(p: {
    owner: string
    repo: string
    workflowId: number | string
  }): Observable<t_workflow_usage> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/actions/workflows/${p["workflowId"]}/timing`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListAssignees(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_simple_user[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/assignees`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesCheckUserCanBeAssigned(p: {
    owner: string
    repo: string
    assignee: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/assignees/${p["assignee"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListAutolinks(p: {
    owner: string
    repo: string
    page?: number
  }): Observable<t_autolink[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/autolinks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateAutolink(p: {
    owner: string
    repo: string
    requestBody: {
      is_alphanumeric?: boolean
      key_prefix: string
      url_template: string
    }
  }): Observable<t_autolink | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/autolinks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAutolink(p: {
    owner: string
    repo: string
    autolinkId: number
  }): Observable<t_autolink | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/autolinks/${p["autolinkId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteAutolink(p: {
    owner: string
    repo: string
    autolinkId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/autolinks/${p["autolinkId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposEnableAutomatedSecurityFixes(p: {
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/automated-security-fixes`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDisableAutomatedSecurityFixes(p: {
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/automated-security-fixes`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListBranches(p: {
    owner: string
    repo: string
    protected?: boolean
    perPage?: number
    page?: number
  }): Observable<t_short_branch[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      protected: p["protected"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/branches`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetBranch(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_branch_with_protection | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetBranchProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_branch_protection | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateBranchProtection(p: {
    owner: string
    repo: string
    branch: string
    requestBody: {
      allow_deletions?: boolean
      allow_force_pushes?: boolean | null
      allow_fork_syncing?: boolean
      block_creations?: boolean
      enforce_admins: boolean | null
      lock_branch?: boolean
      required_conversation_resolution?: boolean
      required_linear_history?: boolean
      required_pull_request_reviews: {
        bypass_pull_request_allowances?: {
          apps?: string[]
          teams?: string[]
          users?: string[]
        }
        dismiss_stale_reviews?: boolean
        dismissal_restrictions?: {
          apps?: string[]
          teams?: string[]
          users?: string[]
        }
        require_code_owner_reviews?: boolean
        require_last_push_approval?: boolean
        required_approving_review_count?: number
      } | null
      required_status_checks: {
        checks?: {
          app_id?: number
          context: string
        }[]
        contexts: string[]
        strict: boolean
      } | null
      restrictions: {
        apps?: string[]
        teams: string[]
        users: string[]
      } | null
    }
  }): Observable<
    | t_protected_branch
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteBranchProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAdminBranchProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_protected_branch_admin_enforced> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposSetAdminBranchProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_protected_branch_admin_enforced> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteAdminBranchProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/enforce_admins`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetPullRequestReviewProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_protected_branch_pull_request_review> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdatePullRequestReviewProtection(p: {
    owner: string
    repo: string
    branch: string
    requestBody?: {
      bypass_pull_request_allowances?: {
        apps?: string[]
        teams?: string[]
        users?: string[]
      }
      dismiss_stale_reviews?: boolean
      dismissal_restrictions?: {
        apps?: string[]
        teams?: string[]
        users?: string[]
      }
      require_code_owner_reviews?: boolean
      require_last_push_approval?: boolean
      required_approving_review_count?: number
    }
  }): Observable<t_protected_branch_pull_request_review | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeletePullRequestReviewProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_pull_request_reviews`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCommitSignatureProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_protected_branch_admin_enforced | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateCommitSignatureProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_protected_branch_admin_enforced | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteCommitSignatureProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_signatures`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetStatusChecksProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_status_check_policy | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateStatusCheckProtection(p: {
    owner: string
    repo: string
    branch: string
    requestBody?: {
      checks?: {
        app_id?: number
        context: string
      }[]
      contexts?: string[]
      strict?: boolean
    }
  }): Observable<t_status_check_policy | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveStatusCheckProtection(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAllStatusCheckContexts(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<string[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAddStatusCheckContexts(p: {
    owner: string
    repo: string
    branch: string
    requestBody?:
      | {
          contexts: string[]
        }
      | string[]
  }): Observable<
    string[] | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposSetStatusCheckContexts(p: {
    owner: string
    repo: string
    branch: string
    requestBody?:
      | {
          contexts: string[]
        }
      | string[]
  }): Observable<string[] | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveStatusCheckContexts(p: {
    owner: string
    repo: string
    branch: string
    requestBody:
      | {
          contexts: string[]
        }
      | string[]
  }): Observable<string[] | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/required_status_checks/contexts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAccessRestrictions(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_branch_restriction_policy | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteAccessRestrictions(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAppsWithAccessToProtectedBranch(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_integration[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAddAppAccessRestrictions(p: {
    owner: string
    repo: string
    branch: string
    requestBody?:
      | {
          apps: string[]
        }
      | string[]
  }): Observable<t_integration[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposSetAppAccessRestrictions(p: {
    owner: string
    repo: string
    branch: string
    requestBody?:
      | {
          apps: string[]
        }
      | string[]
  }): Observable<t_integration[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveAppAccessRestrictions(p: {
    owner: string
    repo: string
    branch: string
    requestBody:
      | {
          apps: string[]
        }
      | string[]
  }): Observable<t_integration[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/apps`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetTeamsWithAccessToProtectedBranch(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_team[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAddTeamAccessRestrictions(p: {
    owner: string
    repo: string
    branch: string
    requestBody?:
      | {
          teams: string[]
        }
      | string[]
  }): Observable<t_team[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposSetTeamAccessRestrictions(p: {
    owner: string
    repo: string
    branch: string
    requestBody?:
      | {
          teams: string[]
        }
      | string[]
  }): Observable<t_team[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveTeamAccessRestrictions(p: {
    owner: string
    repo: string
    branch: string
    requestBody:
      | {
          teams: string[]
        }
      | string[]
  }): Observable<t_team[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetUsersWithAccessToProtectedBranch(p: {
    owner: string
    repo: string
    branch: string
  }): Observable<t_simple_user[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAddUserAccessRestrictions(p: {
    owner: string
    repo: string
    branch: string
    requestBody?:
      | {
          users: string[]
        }
      | string[]
  }): Observable<t_simple_user[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposSetUserAccessRestrictions(p: {
    owner: string
    repo: string
    branch: string
    requestBody?:
      | {
          users: string[]
        }
      | string[]
  }): Observable<t_simple_user[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveUserAccessRestrictions(p: {
    owner: string
    repo: string
    branch: string
    requestBody:
      | {
          users: string[]
        }
      | string[]
  }): Observable<t_simple_user[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/protection/restrictions/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRenameBranch(p: {
    owner: string
    repo: string
    branch: string
    requestBody: {
      new_name: string
    }
  }): Observable<
    | t_branch_with_protection
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/branches/${p["branch"]}/rename`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksCreate(p: {
    owner: string
    repo: string
    requestBody:
      | {
          status: {
            [key: string]: unknown
          }
          [key: string]: unknown
        }
      | {
          status?: {
            [key: string]: unknown
          }
          [key: string]: unknown
        }
  }): Observable<t_check_run> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/check-runs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksGet(p: {
    owner: string
    repo: string
    checkRunId: number
  }): Observable<t_check_run> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksUpdate(p: {
    owner: string
    repo: string
    checkRunId: number
    requestBody: {
      actions?: {
        description: string
        identifier: string
        label: string
      }[]
      completed_at?: string
      conclusion?:
        | "action_required"
        | "cancelled"
        | "failure"
        | "neutral"
        | "success"
        | "skipped"
        | "stale"
        | "timed_out"
      details_url?: string
      external_id?: string
      name?: string
      output?: {
        annotations?: {
          annotation_level: "notice" | "warning" | "failure"
          end_column?: number
          end_line: number
          message: string
          path: string
          raw_details?: string
          start_column?: number
          start_line: number
          title?: string
        }[]
        images?: {
          alt: string
          caption?: string
          image_url: string
        }[]
        summary: string
        text?: string
        title?: string
      }
      started_at?: string
      status?: "queued" | "in_progress" | "completed"
    }
  }): Observable<t_check_run> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksListAnnotations(p: {
    owner: string
    repo: string
    checkRunId: number
    perPage?: number
    page?: number
  }): Observable<t_check_annotation[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}/annotations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksRerequestRun(p: {
    owner: string
    repo: string
    checkRunId: number
  }): Observable<
    t_empty_object | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-runs/${p["checkRunId"]}/rerequest`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksCreateSuite(p: {
    owner: string
    repo: string
    requestBody: {
      head_sha: string
    }
  }): Observable<t_check_suite | t_check_suite> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/check-suites`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksSetSuitesPreferences(p: {
    owner: string
    repo: string
    requestBody: {
      auto_trigger_checks?: {
        app_id: number
        setting: boolean
      }[]
    }
  }): Observable<t_check_suite_preference> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-suites/preferences`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksGetSuite(p: {
    owner: string
    repo: string
    checkSuiteId: number
  }): Observable<t_check_suite> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksListForSuite(p: {
    owner: string
    repo: string
    checkSuiteId: number
    checkName?: string
    status?: "queued" | "in_progress" | "completed"
    filter?: "latest" | "all"
    perPage?: number
    page?: number
  }): Observable<{
    check_runs: t_check_run[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      check_name: p["checkName"],
      status: p["status"],
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}/check-runs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksRerequestSuite(p: {
    owner: string
    repo: string
    checkSuiteId: number
  }): Observable<t_empty_object> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/check-suites/${p["checkSuiteId"]}/rerequest`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningListAlertsForRepo(p: {
    owner: string
    repo: string
    toolName?: t_code_scanning_analysis_tool_name
    toolGuid?: t_code_scanning_analysis_tool_guid
    page?: number
    perPage?: number
    ref?: t_code_scanning_ref
    direction?: "asc" | "desc"
    sort?: "created" | "updated"
    state?: t_code_scanning_alert_state
    severity?: t_code_scanning_alert_severity
  }): Observable<
    | t_code_scanning_alert_items[]
    | void
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      tool_name: p["toolName"],
      tool_guid: p["toolGuid"],
      page: p["page"],
      per_page: p["perPage"],
      ref: p["ref"],
      direction: p["direction"],
      sort: p["sort"],
      state: p["state"],
      severity: p["severity"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningGetAlert(p: {
    owner: string
    repo: string
    alertNumber: t_alert_number
  }): Observable<
    | t_code_scanning_alert
    | void
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts/${p["alertNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningUpdateAlert(p: {
    owner: string
    repo: string
    alertNumber: t_alert_number
    requestBody: {
      dismissed_comment?: t_code_scanning_alert_dismissed_comment
      dismissed_reason?: t_code_scanning_alert_dismissed_reason
      state: t_code_scanning_alert_set_state
    }
  }): Observable<
    | t_code_scanning_alert
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts/${p["alertNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningListAlertInstances(p: {
    owner: string
    repo: string
    alertNumber: t_alert_number
    page?: number
    perPage?: number
    ref?: t_code_scanning_ref
  }): Observable<
    | t_code_scanning_alert_instance[]
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      page: p["page"],
      per_page: p["perPage"],
      ref: p["ref"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/alerts/${p["alertNumber"]}/instances`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningListRecentAnalyses(p: {
    owner: string
    repo: string
    toolName?: t_code_scanning_analysis_tool_name
    toolGuid?: t_code_scanning_analysis_tool_guid
    page?: number
    perPage?: number
    ref?: t_code_scanning_ref
    sarifId?: t_code_scanning_analysis_sarif_id
    direction?: "asc" | "desc"
    sort?: "created"
  }): Observable<
    | t_code_scanning_analysis[]
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      tool_name: p["toolName"],
      tool_guid: p["toolGuid"],
      page: p["page"],
      per_page: p["perPage"],
      ref: p["ref"],
      sarif_id: p["sarifId"],
      direction: p["direction"],
      sort: p["sort"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/analyses`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningGetAnalysis(p: {
    owner: string
    repo: string
    analysisId: number
  }): Observable<
    | {
        [key: string]: unknown
      }
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/analyses/${p["analysisId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningDeleteAnalysis(p: {
    owner: string
    repo: string
    analysisId: number
    confirmDelete?: string
  }): Observable<
    | t_code_scanning_analysis_deletion
    | t_scim_error
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { confirm_delete: p["confirmDelete"] }

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/analyses/${p["analysisId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningListCodeqlDatabases(p: {
    owner: string
    repo: string
  }): Observable<
    | t_code_scanning_codeql_database[]
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/codeql/databases`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningGetCodeqlDatabase(p: {
    owner: string
    repo: string
    language: string
  }): Observable<
    | t_code_scanning_codeql_database
    | void
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/codeql/databases/${p["language"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningUploadSarif(p: {
    owner: string
    repo: string
    requestBody: {
      checkout_uri?: string
      commit_sha: t_code_scanning_analysis_commit_sha
      ref: t_code_scanning_ref
      sarif: t_code_scanning_analysis_sarif_file
      started_at?: string
      tool_name?: string
      validate?: boolean
    }
  }): Observable<
    | t_code_scanning_sarifs_receipt
    | void
    | t_basic_error
    | t_basic_error
    | void
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/sarifs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codeScanningGetSarif(p: {
    owner: string
    repo: string
    sarifId: string
  }): Observable<
    | t_code_scanning_sarifs_status
    | t_basic_error
    | void
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/code-scanning/sarifs/${p["sarifId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCodeownersErrors(p: {
    owner: string
    repo: string
    ref?: string
  }): Observable<t_codeowners_errors | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { ref: p["ref"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/codeowners/errors`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesListInRepositoryForAuthenticatedUser(p: {
    perPage?: number
    page?: number
    owner: string
    repo: string
  }): Observable<
    | {
        codespaces: t_codespace[]
        total_count: number
      }
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/codespaces`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesCreateWithRepoForAuthenticatedUser(p: {
    owner: string
    repo: string
    requestBody: {
      client_ip?: string
      devcontainer_path?: string
      display_name?: string
      idle_timeout_minutes?: number
      location?: string
      machine?: string
      multi_repo_permissions_opt_out?: boolean
      ref?: string
      retention_period_minutes?: number
      working_directory?: string
    }
  }): Observable<
    | t_codespace
    | t_codespace
    | t_scim_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/codespaces`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesListDevcontainersInRepositoryForAuthenticatedUser(p: {
    perPage?: number
    page?: number
    owner: string
    repo: string
  }): Observable<
    | {
        devcontainers: {
          name?: string
          path: string
        }[]
        total_count: number
      }
    | t_scim_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/codespaces/devcontainers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesRepoMachinesForAuthenticatedUser(p: {
    owner: string
    repo: string
    location?: string
    clientIp?: string
  }): Observable<
    | {
        machines: t_codespace_machine[]
        total_count: number
      }
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      location: p["location"],
      client_ip: p["clientIp"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/codespaces/machines`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesPreFlightWithRepoForAuthenticatedUser(p: {
    owner: string
    repo: string
    ref?: string
    clientIp?: string
  }): Observable<
    | {
        billable_owner?: t_simple_user
        defaults?: {
          devcontainer_path: string | null
          location: string
        }
      }
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { ref: p["ref"], client_ip: p["clientIp"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/codespaces/new`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesListRepoSecrets(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<{
    secrets: t_repo_codespaces_secret[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesGetRepoPublicKey(p: {
    owner: string
    repo: string
  }): Observable<t_codespaces_public_key> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/public-key`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesGetRepoSecret(p: {
    owner: string
    repo: string
    secretName: string
  }): Observable<t_repo_codespaces_secret> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesCreateOrUpdateRepoSecret(p: {
    owner: string
    repo: string
    secretName: string
    requestBody: {
      encrypted_value?: string
      key_id?: string
    }
  }): Observable<t_empty_object | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesDeleteRepoSecret(p: {
    owner: string
    repo: string
    secretName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/codespaces/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListCollaborators(p: {
    owner: string
    repo: string
    affiliation?: "outside" | "direct" | "all"
    permission?: "pull" | "triage" | "push" | "maintain" | "admin"
    perPage?: number
    page?: number
  }): Observable<t_collaborator[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      affiliation: p["affiliation"],
      permission: p["permission"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/collaborators`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCheckCollaborator(p: {
    owner: string
    repo: string
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAddCollaborator(p: {
    owner: string
    repo: string
    username: string
    requestBody?: {
      permission?: string
    }
  }): Observable<
    t_repository_invitation | void | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRemoveCollaborator(p: {
    owner: string
    repo: string
    username: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCollaboratorPermissionLevel(p: {
    owner: string
    repo: string
    username: string
  }): Observable<t_repository_collaborator_permission | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/collaborators/${p["username"]}/permission`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListCommitCommentsForRepo(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_commit_comment[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCommitComment(p: {
    owner: string
    repo: string
    commentId: number
  }): Observable<t_commit_comment | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateCommitComment(p: {
    owner: string
    repo: string
    commentId: number
    requestBody: {
      body: string
    }
  }): Observable<t_commit_comment | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteCommitComment(p: {
    owner: string
    repo: string
    commentId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForCommitComment(p: {
    owner: string
    repo: string
    commentId: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<t_reaction[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForCommitComment(p: {
    owner: string
    repo: string
    commentId: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<t_reaction | t_reaction | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForCommitComment(p: {
    owner: string
    repo: string
    commentId: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/comments/${p["commentId"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListCommits(p: {
    owner: string
    repo: string
    sha?: string
    path?: string
    author?: string
    since?: string
    until?: string
    perPage?: number
    page?: number
  }): Observable<
    t_commit[] | t_scim_error | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      sha: p["sha"],
      path: p["path"],
      author: p["author"],
      since: p["since"],
      until: p["until"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/commits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListBranchesForHeadCommit(p: {
    owner: string
    repo: string
    commitSha: string
  }): Observable<t_branch_short[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/branches-where-head`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListCommentsForCommit(p: {
    owner: string
    repo: string
    commitSha: string
    perPage?: number
    page?: number
  }): Observable<t_commit_comment[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateCommitComment(p: {
    owner: string
    repo: string
    commitSha: string
    requestBody: {
      body: string
      line?: number
      path?: string
      position?: number
    }
  }): Observable<t_commit_comment | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListPullRequestsAssociatedWithCommit(p: {
    owner: string
    repo: string
    commitSha: string
    perPage?: number
    page?: number
  }): Observable<t_pull_request_simple[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["commitSha"]}/pulls`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCommit(p: {
    owner: string
    repo: string
    page?: number
    perPage?: number
    ref: string
  }): Observable<
    | t_commit
    | t_basic_error
    | t_validation_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { page: p["page"], per_page: p["perPage"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksListForRef(p: {
    owner: string
    repo: string
    ref: string
    checkName?: string
    status?: "queued" | "in_progress" | "completed"
    filter?: "latest" | "all"
    perPage?: number
    page?: number
    appId?: number
  }): Observable<{
    check_runs: t_check_run[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      check_name: p["checkName"],
      status: p["status"],
      filter: p["filter"],
      per_page: p["perPage"],
      page: p["page"],
      app_id: p["appId"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/check-runs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  checksListSuitesForRef(p: {
    owner: string
    repo: string
    ref: string
    appId?: number
    checkName?: string
    perPage?: number
    page?: number
  }): Observable<{
    check_suites: t_check_suite[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      app_id: p["appId"],
      check_name: p["checkName"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/check-suites`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCombinedStatusForRef(p: {
    owner: string
    repo: string
    ref: string
    perPage?: number
    page?: number
  }): Observable<t_combined_commit_status | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/status`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListCommitStatusesForRef(p: {
    owner: string
    repo: string
    ref: string
    perPage?: number
    page?: number
  }): Observable<t_status[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/commits/${p["ref"]}/statuses`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCommunityProfileMetrics(p: {
    owner: string
    repo: string
  }): Observable<t_community_profile> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/community/profile`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCompareCommits(p: {
    owner: string
    repo: string
    page?: number
    perPage?: number
    basehead: string
  }): Observable<
    | t_commit_comparison
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { page: p["page"], per_page: p["perPage"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/compare/${p["basehead"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetContent(p: {
    owner: string
    repo: string
    path: string
    ref?: string
  }): Observable<
    | (
        | t_content_directory
        | t_content_file
        | t_content_symlink
        | t_content_submodule
      )
    | void
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { ref: p["ref"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateOrUpdateFileContents(p: {
    owner: string
    repo: string
    path: string
    requestBody: {
      author?: {
        date?: string
        email: string
        name: string
      }
      branch?: string
      committer?: {
        date?: string
        email: string
        name: string
      }
      content: string
      message: string
      sha?: string
    }
  }): Observable<
    | t_file_commit
    | t_file_commit
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteFile(p: {
    owner: string
    repo: string
    path: string
    requestBody: {
      author?: {
        email?: string
        name?: string
      }
      branch?: string
      committer?: {
        email?: string
        name?: string
      }
      message: string
      sha: string
    }
  }): Observable<
    | t_file_commit
    | t_basic_error
    | t_basic_error
    | t_validation_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/contents/${p["path"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListContributors(p: {
    owner: string
    repo: string
    anon?: string
    perPage?: number
    page?: number
  }): Observable<t_contributor[] | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      anon: p["anon"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/contributors`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotListAlertsForRepo(p: {
    owner: string
    repo: string
    state?: string
    severity?: string
    ecosystem?: string
    package?: string
    manifest?: string
    scope?: "development" | "runtime"
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    page?: number
    perPage?: number
    before?: string
    after?: string
    first?: number
    last?: number
  }): Observable<
    | t_dependabot_alert[]
    | void
    | t_scim_error
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      severity: p["severity"],
      ecosystem: p["ecosystem"],
      package: p["package"],
      manifest: p["manifest"],
      scope: p["scope"],
      sort: p["sort"],
      direction: p["direction"],
      page: p["page"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
      first: p["first"],
      last: p["last"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/dependabot/alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotGetAlert(p: {
    owner: string
    repo: string
    alertNumber: t_alert_number
  }): Observable<t_dependabot_alert | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/dependabot/alerts/${p["alertNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotUpdateAlert(p: {
    owner: string
    repo: string
    alertNumber: t_alert_number
    requestBody: {
      dismissed_comment?: string
      dismissed_reason?:
        | "fix_started"
        | "inaccurate"
        | "no_bandwidth"
        | "not_used"
        | "tolerable_risk"
      state: "dismissed" | "open"
    }
  }): Observable<
    | t_dependabot_alert
    | t_scim_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/dependabot/alerts/${p["alertNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotListRepoSecrets(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<{
    secrets: t_dependabot_secret[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotGetRepoPublicKey(p: {
    owner: string
    repo: string
  }): Observable<t_dependabot_public_key> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/public-key`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotGetRepoSecret(p: {
    owner: string
    repo: string
    secretName: string
  }): Observable<t_dependabot_secret> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotCreateOrUpdateRepoSecret(p: {
    owner: string
    repo: string
    secretName: string
    requestBody: {
      encrypted_value?: string
      key_id?: string
    }
  }): Observable<t_empty_object | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependabotDeleteRepoSecret(p: {
    owner: string
    repo: string
    secretName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/dependabot/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependencyGraphDiffRange(p: {
    owner: string
    repo: string
    basehead: string
    name?: string
  }): Observable<t_dependency_graph_diff | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { name: p["name"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/dependency-graph/compare/${p["basehead"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  dependencyGraphCreateRepositorySnapshot(p: {
    owner: string
    repo: string
    requestBody: t_snapshot
  }): Observable<{
    created_at: string
    id: number
    message: string
    result: string
  }> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/dependency-graph/snapshots`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListDeployments(p: {
    owner: string
    repo: string
    sha?: string
    ref?: string
    task?: string
    environment?: string
    perPage?: number
    page?: number
  }): Observable<t_deployment[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      sha: p["sha"],
      ref: p["ref"],
      task: p["task"],
      environment: p["environment"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/deployments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateDeployment(p: {
    owner: string
    repo: string
    requestBody: {
      auto_merge?: boolean
      description?: string | null
      environment?: string
      payload?:
        | {
            [key: string]: unknown
          }
        | string
      production_environment?: boolean
      ref: string
      required_contexts?: string[]
      task?: string
      transient_environment?: boolean
    }
  }): Observable<
    | t_deployment
    | {
        message?: string
      }
    | void
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/deployments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetDeployment(p: {
    owner: string
    repo: string
    deploymentId: number
  }): Observable<t_deployment | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteDeployment(p: {
    owner: string
    repo: string
    deploymentId: number
  }): Observable<void | t_basic_error | t_validation_error_simple> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListDeploymentStatuses(p: {
    owner: string
    repo: string
    deploymentId: number
    perPage?: number
    page?: number
  }): Observable<t_deployment_status[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateDeploymentStatus(p: {
    owner: string
    repo: string
    deploymentId: number
    requestBody: {
      auto_inactive?: boolean
      description?: string
      environment?: "production" | "staging" | "qa"
      environment_url?: string
      log_url?: string
      state:
        | "error"
        | "failure"
        | "inactive"
        | "in_progress"
        | "queued"
        | "pending"
        | "success"
      target_url?: string
    }
  }): Observable<t_deployment_status | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetDeploymentStatus(p: {
    owner: string
    repo: string
    deploymentId: number
    statusId: number
  }): Observable<t_deployment_status | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/deployments/${p["deploymentId"]}/statuses/${p["statusId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateDispatchEvent(p: {
    owner: string
    repo: string
    requestBody: {
      client_payload?: {
        [key: string]: unknown
      }
      event_type: string
    }
  }): Observable<void | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/dispatches`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAllEnvironments(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<{
    environments?: t_environment[]
    total_count?: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/environments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetEnvironment(p: {
    owner: string
    repo: string
    environmentName: string
  }): Observable<t_environment> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateOrUpdateEnvironment(p: {
    owner: string
    repo: string
    environmentName: string
    requestBody?: {
      deployment_branch_policy?: t_deployment_branch_policy_settings
      reviewers?:
        | {
            id?: number
            type?: t_deployment_reviewer_type
          }[]
        | null
      wait_timer?: t_wait_timer
    }
  }): Observable<t_environment | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteAnEnvironment(p: {
    owner: string
    repo: string
    environmentName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListDeploymentBranchPolicies(p: {
    owner: string
    repo: string
    environmentName: string
    perPage?: number
    page?: number
  }): Observable<{
    branch_policies: t_deployment_branch_policy[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateDeploymentBranchPolicy(p: {
    owner: string
    repo: string
    environmentName: string
    requestBody: t_deployment_branch_policy_name_pattern
  }): Observable<t_deployment_branch_policy | void | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetDeploymentBranchPolicy(p: {
    owner: string
    repo: string
    environmentName: string
    branchPolicyId: number
  }): Observable<t_deployment_branch_policy> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies/${p["branchPolicyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateDeploymentBranchPolicy(p: {
    owner: string
    repo: string
    environmentName: string
    branchPolicyId: number
    requestBody: t_deployment_branch_policy_name_pattern
  }): Observable<t_deployment_branch_policy> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies/${p["branchPolicyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteDeploymentBranchPolicy(p: {
    owner: string
    repo: string
    environmentName: string
    branchPolicyId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/environments/${p["environmentName"]}/deployment-branch-policies/${p["branchPolicyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListRepoEvents(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_event[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListForks(p: {
    owner: string
    repo: string
    sort?: "newest" | "oldest" | "stargazers" | "watchers"
    perPage?: number
    page?: number
  }): Observable<t_minimal_repository[] | t_scim_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      sort: p["sort"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/forks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateFork(p: {
    owner: string
    repo: string
    requestBody?: {
      default_branch_only?: boolean
      name?: string
      organization?: string
    }
  }): Observable<
    | t_full_repository
    | t_scim_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/forks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitCreateBlob(p: {
    owner: string
    repo: string
    requestBody: {
      content: string
      encoding?: string
    }
  }): Observable<
    | t_short_blob
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/blobs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitGetBlob(p: {
    owner: string
    repo: string
    fileSha: string
  }): Observable<t_blob | t_basic_error | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/blobs/${p["fileSha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitCreateCommit(p: {
    owner: string
    repo: string
    requestBody: {
      author?: {
        date?: string
        email: string
        name: string
      }
      committer?: {
        date?: string
        email?: string
        name?: string
      }
      message: string
      parents?: string[]
      signature?: string
      tree: string
    }
  }): Observable<t_git_commit | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/commits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitGetCommit(p: {
    owner: string
    repo: string
    commitSha: string
  }): Observable<t_git_commit | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/commits/${p["commitSha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitListMatchingRefs(p: {
    owner: string
    repo: string
    ref: string
  }): Observable<t_git_ref[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/matching-refs/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitGetRef(p: {
    owner: string
    repo: string
    ref: string
  }): Observable<t_git_ref | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/ref/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitCreateRef(p: {
    owner: string
    repo: string
    requestBody: {
      key?: string
      ref: string
      sha: string
    }
  }): Observable<t_git_ref | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/refs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitUpdateRef(p: {
    owner: string
    repo: string
    ref: string
    requestBody: {
      force?: boolean
      sha: string
    }
  }): Observable<t_git_ref | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/refs/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitDeleteRef(p: {
    owner: string
    repo: string
    ref: string
  }): Observable<void | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/refs/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitCreateTag(p: {
    owner: string
    repo: string
    requestBody: {
      message: string
      object: string
      tag: string
      tagger?: {
        date?: string
        email: string
        name: string
      }
      type: "commit" | "tree" | "blob"
    }
  }): Observable<t_git_tag | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/tags`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitGetTag(p: {
    owner: string
    repo: string
    tagSha: string
  }): Observable<t_git_tag | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/tags/${p["tagSha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitCreateTree(p: {
    owner: string
    repo: string
    requestBody: {
      base_tree?: string
      tree: {
        content?: string
        mode?: "100644" | "100755" | "040000" | "160000" | "120000"
        path?: string
        sha?: string | null
        type?: "blob" | "tree" | "commit"
      }[]
    }
  }): Observable<
    t_git_tree | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/git/trees`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  gitGetTree(p: {
    owner: string
    repo: string
    treeSha: string
    recursive?: string
  }): Observable<t_git_tree | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { recursive: p["recursive"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/git/trees/${p["treeSha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListWebhooks(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_hook[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/hooks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateWebhook(p: {
    owner: string
    repo: string
    requestBody?: {
      active?: boolean
      config?: {
        content_type?: t_webhook_config_content_type
        digest?: string
        insecure_ssl?: t_webhook_config_insecure_ssl
        secret?: t_webhook_config_secret
        token?: string
        url?: t_webhook_config_url
      }
      events?: string[]
      name?: string
    }
  }): Observable<t_hook | t_basic_error | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/hooks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetWebhook(p: {
    owner: string
    repo: string
    hookId: number
  }): Observable<t_hook | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateWebhook(p: {
    owner: string
    repo: string
    hookId: number
    requestBody: {
      active?: boolean
      add_events?: string[]
      config?: {
        address?: string
        content_type?: t_webhook_config_content_type
        insecure_ssl?: t_webhook_config_insecure_ssl
        room?: string
        secret?: t_webhook_config_secret
        url: t_webhook_config_url
      }
      events?: string[]
      remove_events?: string[]
    }
  }): Observable<t_hook | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteWebhook(p: {
    owner: string
    repo: string
    hookId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetWebhookConfigForRepo(p: {
    owner: string
    repo: string
    hookId: number
  }): Observable<t_webhook_config> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/config`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateWebhookConfigForRepo(p: {
    owner: string
    repo: string
    hookId: number
    requestBody?: {
      content_type?: t_webhook_config_content_type
      insecure_ssl?: t_webhook_config_insecure_ssl
      secret?: t_webhook_config_secret
      url?: t_webhook_config_url
    }
  }): Observable<t_webhook_config> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/config`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListWebhookDeliveries(p: {
    owner: string
    repo: string
    hookId: number
    perPage?: number
    cursor?: string
    redelivery?: boolean
  }): Observable<t_hook_delivery_item[] | t_scim_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      per_page: p["perPage"],
      cursor: p["cursor"],
      redelivery: p["redelivery"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/deliveries`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetWebhookDelivery(p: {
    owner: string
    repo: string
    hookId: number
    deliveryId: number
  }): Observable<t_hook_delivery | t_scim_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRedeliverWebhookDelivery(p: {
    owner: string
    repo: string
    hookId: number
    deliveryId: number
  }): Observable<
    | {
        [key: string]: unknown
      }
    | t_scim_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/deliveries/${p["deliveryId"]}/attempts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposPingWebhook(p: {
    owner: string
    repo: string
    hookId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/pings`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposTestPushWebhook(p: {
    owner: string
    repo: string
    hookId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/hooks/${p["hookId"]}/tests`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetImportStatus(p: {
    owner: string
    repo: string
  }): Observable<t_import | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsStartImport(p: {
    owner: string
    repo: string
    requestBody: {
      tfvc_project?: string
      vcs?: "subversion" | "git" | "mercurial" | "tfvc"
      vcs_password?: string
      vcs_url: string
      vcs_username?: string
    }
  }): Observable<
    t_import | t_basic_error | t_validation_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsUpdateImport(p: {
    owner: string
    repo: string
    requestBody?: {
      tfvc_project?: string
      vcs?: "subversion" | "tfvc" | "git" | "mercurial"
      vcs_password?: string
      vcs_username?: string
    }
  }): Observable<t_import | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsCancelImport(p: {
    owner: string
    repo: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetCommitAuthors(p: {
    owner: string
    repo: string
    since?: number
  }): Observable<t_porter_author[] | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { since: p["since"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import/authors`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsMapCommitAuthor(p: {
    owner: string
    repo: string
    authorId: number
    requestBody?: {
      email?: string
      name?: string
    }
  }): Observable<
    t_porter_author | t_basic_error | t_validation_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/import/authors/${p["authorId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetLargeFiles(p: {
    owner: string
    repo: string
  }): Observable<t_porter_large_file[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/import/large_files`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsSetLfsPreference(p: {
    owner: string
    repo: string
    requestBody: {
      use_lfs: "opt_in" | "opt_out"
    }
  }): Observable<t_import | t_validation_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/import/lfs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetRepoInstallation(p: {
    owner: string
    repo: string
  }): Observable<t_installation | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/installation`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsGetRestrictionsForRepo(p: {
    owner: string
    repo: string
  }): Observable<{
    [key: string]: unknown
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsSetRestrictionsForRepo(p: {
    owner: string
    repo: string
    requestBody: t_interaction_limit
  }): Observable<t_interaction_limit_response | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsRemoveRestrictionsForRepo(p: {
    owner: string
    repo: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListInvitations(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_repository_invitation[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateInvitation(p: {
    owner: string
    repo: string
    invitationId: number
    requestBody?: {
      permissions?: "read" | "write" | "maintain" | "triage" | "admin"
    }
  }): Observable<t_repository_invitation> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/invitations/${p["invitationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteInvitation(p: {
    owner: string
    repo: string
    invitationId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/invitations/${p["invitationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListForRepo(p: {
    owner: string
    repo: string
    milestone?: string
    state?: "open" | "closed" | "all"
    assignee?: string
    creator?: string
    mentioned?: string
    labels?: string
    sort?: "created" | "updated" | "comments"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<
    t_issue[] | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      milestone: p["milestone"],
      state: p["state"],
      assignee: p["assignee"],
      creator: p["creator"],
      mentioned: p["mentioned"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesCreate(p: {
    owner: string
    repo: string
    requestBody: {
      assignee?: string | null
      assignees?: string[]
      body?: string
      labels?: (
        | string
        | {
            color?: string | null
            description?: string | null
            id?: number
            name?: string
          }
      )[]
      milestone?: (string | number) | null
      title: string | number
    }
  }): Observable<
    | t_issue
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListCommentsForRepo(p: {
    owner: string
    repo: string
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<t_issue_comment[] | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesGetComment(p: {
    owner: string
    repo: string
    commentId: number
  }): Observable<t_issue_comment | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesUpdateComment(p: {
    owner: string
    repo: string
    commentId: number
    requestBody: {
      body: string
    }
  }): Observable<t_issue_comment | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesDeleteComment(p: {
    owner: string
    repo: string
    commentId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForIssueComment(p: {
    owner: string
    repo: string
    commentId: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<t_reaction[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForIssueComment(p: {
    owner: string
    repo: string
    commentId: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<t_reaction | t_reaction | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForIssueComment(p: {
    owner: string
    repo: string
    commentId: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/comments/${p["commentId"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListEventsForRepo(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_issue_event[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/issues/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesGetEvent(p: {
    owner: string
    repo: string
    eventId: number
  }): Observable<
    t_issue_event | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/events/${p["eventId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesGet(p: {
    owner: string
    repo: string
    issueNumber: number
  }): Observable<
    t_issue | t_basic_error | void | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesUpdate(p: {
    owner: string
    repo: string
    issueNumber: number
    requestBody?: {
      assignee?: string | null
      assignees?: string[]
      body?: string | null
      labels?: (
        | string
        | {
            color?: string | null
            description?: string | null
            id?: number
            name?: string
          }
      )[]
      milestone?: (string | number) | null
      state?: "open" | "closed"
      state_reason?: "completed" | "not_planned" | "reopened" | null
      title?: (string | number) | null
    }
  }): Observable<
    | t_issue
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesAddAssignees(p: {
    owner: string
    repo: string
    issueNumber: number
    requestBody?: {
      assignees?: string[]
    }
  }): Observable<t_issue> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/assignees`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesRemoveAssignees(p: {
    owner: string
    repo: string
    issueNumber: number
    requestBody: {
      assignees?: string[]
    }
  }): Observable<t_issue> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/assignees`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesCheckUserCanBeAssignedToIssue(p: {
    owner: string
    repo: string
    issueNumber: number
    assignee: string
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/assignees/${p["assignee"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListComments(p: {
    owner: string
    repo: string
    issueNumber: number
    since?: string
    perPage?: number
    page?: number
  }): Observable<t_issue_comment[] | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesCreateComment(p: {
    owner: string
    repo: string
    issueNumber: number
    requestBody: {
      body: string
    }
  }): Observable<
    | t_issue_comment
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListEvents(p: {
    owner: string
    repo: string
    issueNumber: number
    perPage?: number
    page?: number
  }): Observable<t_issue_event_for_issue[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListLabelsOnIssue(p: {
    owner: string
    repo: string
    issueNumber: number
    perPage?: number
    page?: number
  }): Observable<t_label[] | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesAddLabels(p: {
    owner: string
    repo: string
    issueNumber: number
    requestBody?:
      | {
          labels?: string[]
        }
      | string[]
      | {
          labels?: {
            name: string
          }[]
        }
      | {
          name: string
        }[]
      | string
  }): Observable<
    | t_label[]
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesSetLabels(p: {
    owner: string
    repo: string
    issueNumber: number
    requestBody?:
      | {
          labels?: string[]
        }
      | string[]
      | {
          labels?: {
            name: string
          }[]
        }
      | {
          name: string
        }[]
      | string
  }): Observable<
    | t_label[]
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesRemoveAllLabels(p: {
    owner: string
    repo: string
    issueNumber: number
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesRemoveLabel(p: {
    owner: string
    repo: string
    issueNumber: number
    name: string
  }): Observable<t_label[] | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/labels/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesLock(p: {
    owner: string
    repo: string
    issueNumber: number
    requestBody?: {
      lock_reason?: "off-topic" | "too heated" | "resolved" | "spam"
    }
  }): Observable<
    void | t_basic_error | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/lock`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesUnlock(p: {
    owner: string
    repo: string
    issueNumber: number
  }): Observable<void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/lock`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForIssue(p: {
    owner: string
    repo: string
    issueNumber: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<t_reaction[] | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForIssue(p: {
    owner: string
    repo: string
    issueNumber: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<t_reaction | t_reaction | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForIssue(p: {
    owner: string
    repo: string
    issueNumber: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListEventsForTimeline(p: {
    owner: string
    repo: string
    issueNumber: number
    perPage?: number
    page?: number
  }): Observable<t_timeline_issue_events[] | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/issues/${p["issueNumber"]}/timeline`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListDeployKeys(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_deploy_key[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateDeployKey(p: {
    owner: string
    repo: string
    requestBody: {
      key: string
      read_only?: boolean
      title?: string
    }
  }): Observable<t_deploy_key | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetDeployKey(p: {
    owner: string
    repo: string
    keyId: number
  }): Observable<t_deploy_key | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/keys/${p["keyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteDeployKey(p: {
    owner: string
    repo: string
    keyId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/keys/${p["keyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListLabelsForRepo(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_label[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesCreateLabel(p: {
    owner: string
    repo: string
    requestBody: {
      color?: string
      description?: string
      name: string
    }
  }): Observable<t_label | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesGetLabel(p: {
    owner: string
    repo: string
    name: string
  }): Observable<t_label | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesUpdateLabel(p: {
    owner: string
    repo: string
    name: string
    requestBody?: {
      color?: string
      description?: string
      new_name?: string
    }
  }): Observable<t_label> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesDeleteLabel(p: {
    owner: string
    repo: string
    name: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/labels/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListLanguages(p: {
    owner: string
    repo: string
  }): Observable<t_language> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/languages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposEnableLfsForRepo(p: { owner: string; repo: string }): Observable<{
    [key: string]: unknown
  } | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/lfs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDisableLfsForRepo(p: { owner: string; repo: string }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/lfs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  licensesGetForRepo(p: {
    owner: string
    repo: string
  }): Observable<t_license_content> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/license`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposMergeUpstream(p: {
    owner: string
    repo: string
    requestBody: {
      branch: string
    }
  }): Observable<t_merged_upstream | void | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/merge-upstream`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposMerge(p: {
    owner: string
    repo: string
    requestBody: {
      base: string
      commit_message?: string
      head: string
    }
  }): Observable<
    t_commit | void | t_basic_error | void | void | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/merges`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListMilestones(p: {
    owner: string
    repo: string
    state?: "open" | "closed" | "all"
    sort?: "due_on" | "completeness"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<t_milestone[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/milestones`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesCreateMilestone(p: {
    owner: string
    repo: string
    requestBody: {
      description?: string
      due_on?: string
      state?: "open" | "closed"
      title: string
    }
  }): Observable<t_milestone | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/milestones`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesGetMilestone(p: {
    owner: string
    repo: string
    milestoneNumber: number
  }): Observable<t_milestone | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesUpdateMilestone(p: {
    owner: string
    repo: string
    milestoneNumber: number
    requestBody?: {
      description?: string
      due_on?: string
      state?: "open" | "closed"
      title?: string
    }
  }): Observable<t_milestone> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesDeleteMilestone(p: {
    owner: string
    repo: string
    milestoneNumber: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListLabelsForMilestone(p: {
    owner: string
    repo: string
    milestoneNumber: number
    perPage?: number
    page?: number
  }): Observable<t_label[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/milestones/${p["milestoneNumber"]}/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListRepoNotificationsForAuthenticatedUser(p: {
    owner: string
    repo: string
    all?: boolean
    participating?: boolean
    since?: string
    before?: string
    perPage?: number
    page?: number
  }): Observable<t_thread[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      all: p["all"],
      participating: p["participating"],
      since: p["since"],
      before: p["before"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/notifications`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityMarkRepoNotificationsAsRead(p: {
    owner: string
    repo: string
    requestBody?: {
      last_read_at?: string
    }
  }): Observable<{
    message?: string
    url?: string
  } | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/notifications`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetPages(p: {
    owner: string
    repo: string
  }): Observable<t_page | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreatePagesSite(p: {
    owner: string
    repo: string
    requestBody: {
      build_type?: "legacy" | "workflow"
      source?: {
        branch: string
        path?: "/" | "/docs"
      }
    }
  }): Observable<t_page | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateInformationAboutPagesSite(p: {
    owner: string
    repo: string
    requestBody: {
      build_type?: "legacy" | "workflow"
      cname?: string | null
      https_enforced?: boolean
      source?: {
        [key: string]: unknown
      }
    }
  }): Observable<void | t_scim_error | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeletePagesSite(p: {
    owner: string
    repo: string
  }): Observable<void | t_basic_error | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListPagesBuilds(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_page_build[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages/builds`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposRequestPagesBuild(p: {
    owner: string
    repo: string
  }): Observable<t_page_build_status> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages/builds`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetLatestPagesBuild(p: {
    owner: string
    repo: string
  }): Observable<t_page_build> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pages/builds/latest`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetPagesBuild(p: {
    owner: string
    repo: string
    buildId: number
  }): Observable<t_page_build> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pages/builds/${p["buildId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreatePagesDeployment(p: {
    owner: string
    repo: string
    requestBody: {
      artifact_url: string
      environment?: string
      oidc_token: string
      pages_build_version: string
    }
  }): Observable<
    t_page_deployment | t_scim_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pages/deployment`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetPagesHealthCheck(p: {
    owner: string
    repo: string
  }): Observable<
    t_pages_health_check | t_empty_object | void | t_basic_error | void
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pages/health`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListForRepo(p: {
    owner: string
    repo: string
    state?: "open" | "closed" | "all"
    perPage?: number
    page?: number
  }): Observable<
    | t_project[]
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsCreateForRepo(p: {
    owner: string
    repo: string
    requestBody: {
      body?: string
      name: string
    }
  }): Observable<
    | t_project
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsList(p: {
    owner: string
    repo: string
    state?: "open" | "closed" | "all"
    head?: string
    base?: string
    sort?: "created" | "updated" | "popularity" | "long-running"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<t_pull_request_simple[] | void | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      head: p["head"],
      base: p["base"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pulls`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsCreate(p: {
    owner: string
    repo: string
    requestBody: {
      base: string
      body?: string
      draft?: boolean
      head: string
      issue?: number
      maintainer_can_modify?: boolean
      title?: string
    }
  }): Observable<t_pull_request | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pulls`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListReviewCommentsForRepo(p: {
    owner: string
    repo: string
    sort?: "created" | "updated" | "created_at"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<t_pull_request_review_comment[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/pulls/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsGetReviewComment(p: {
    owner: string
    repo: string
    commentId: number
  }): Observable<t_pull_request_review_comment | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsUpdateReviewComment(p: {
    owner: string
    repo: string
    commentId: number
    requestBody: {
      body: string
    }
  }): Observable<t_pull_request_review_comment> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsDeleteReviewComment(p: {
    owner: string
    repo: string
    commentId: number
  }): Observable<void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForPullRequestReviewComment(p: {
    owner: string
    repo: string
    commentId: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<t_reaction[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForPullRequestReviewComment(p: {
    owner: string
    repo: string
    commentId: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<t_reaction | t_reaction | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForPullRequestComment(p: {
    owner: string
    repo: string
    commentId: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/comments/${p["commentId"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsGet(p: { owner: string; repo: string; pullNumber: number }): Observable<
    | t_pull_request
    | void
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsUpdate(p: {
    owner: string
    repo: string
    pullNumber: number
    requestBody?: {
      base?: string
      body?: string
      maintainer_can_modify?: boolean
      state?: "open" | "closed"
      title?: string
    }
  }): Observable<t_pull_request | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesCreateWithPrForAuthenticatedUser(p: {
    owner: string
    repo: string
    pullNumber: number
    requestBody: {
      client_ip?: string
      devcontainer_path?: string
      display_name?: string
      idle_timeout_minutes?: number
      location?: string
      machine?: string
      multi_repo_permissions_opt_out?: boolean
      retention_period_minutes?: number
      working_directory?: string
    }
  }): Observable<
    | t_codespace
    | t_codespace
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/codespaces`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListReviewComments(p: {
    owner: string
    repo: string
    pullNumber: number
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<t_pull_request_review_comment[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsCreateReviewComment(p: {
    owner: string
    repo: string
    pullNumber: number
    requestBody: {
      body: string
      commit_id: string
      in_reply_to?: number
      line: number
      path: string
      position?: number
      side?: "LEFT" | "RIGHT"
      start_line?: number
      start_side?: "LEFT" | "RIGHT" | "side"
    }
  }): Observable<
    t_pull_request_review_comment | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsCreateReplyForReviewComment(p: {
    owner: string
    repo: string
    pullNumber: number
    commentId: number
    requestBody: {
      body: string
    }
  }): Observable<t_pull_request_review_comment | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/comments/${p["commentId"]}/replies`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListCommits(p: {
    owner: string
    repo: string
    pullNumber: number
    perPage?: number
    page?: number
  }): Observable<t_commit[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/commits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListFiles(p: {
    owner: string
    repo: string
    pullNumber: number
    perPage?: number
    page?: number
  }): Observable<
    | t_diff_entry[]
    | t_validation_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/files`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsCheckIfMerged(p: {
    owner: string
    repo: string
    pullNumber: number
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/merge`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsMerge(p: {
    owner: string
    repo: string
    pullNumber: number
    requestBody?: {
      commit_message?: string
      commit_title?: string
      merge_method?: "merge" | "squash" | "rebase"
      sha?: string
    }
  }): Observable<
    | t_pull_request_merge_result
    | t_basic_error
    | t_basic_error
    | {
        documentation_url?: string
        message?: string
      }
    | {
        documentation_url?: string
        message?: string
      }
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/merge`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListRequestedReviewers(p: {
    owner: string
    repo: string
    pullNumber: number
  }): Observable<t_pull_request_review_request> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsRequestReviewers(p: {
    owner: string
    repo: string
    pullNumber: number
    requestBody?: {
      reviewers?: string[]
      team_reviewers?: string[]
    }
  }): Observable<t_pull_request_simple | t_basic_error | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsRemoveRequestedReviewers(p: {
    owner: string
    repo: string
    pullNumber: number
    requestBody: {
      reviewers: string[]
      team_reviewers?: string[]
    }
  }): Observable<t_pull_request_simple | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/requested_reviewers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListReviews(p: {
    owner: string
    repo: string
    pullNumber: number
    perPage?: number
    page?: number
  }): Observable<t_pull_request_review[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsCreateReview(p: {
    owner: string
    repo: string
    pullNumber: number
    requestBody?: {
      body?: string
      comments?: {
        body: string
        line?: number
        path: string
        position?: number
        side?: string
        start_line?: number
        start_side?: string
      }[]
      commit_id?: string
      event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
    }
  }): Observable<
    t_pull_request_review | t_basic_error | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsGetReview(p: {
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
  }): Observable<t_pull_request_review | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsUpdateReview(p: {
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
    requestBody: {
      body: string
    }
  }): Observable<t_pull_request_review | t_validation_error_simple> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsDeletePendingReview(p: {
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
  }): Observable<
    t_pull_request_review | t_basic_error | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsListCommentsForReview(p: {
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
    perPage?: number
    page?: number
  }): Observable<t_review_comment[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsDismissReview(p: {
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
    requestBody: {
      event?: "DISMISS"
      message: string
    }
  }): Observable<
    t_pull_request_review | t_basic_error | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/dismissals`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsSubmitReview(p: {
    owner: string
    repo: string
    pullNumber: number
    reviewId: number
    requestBody: {
      body?: string
      event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
    }
  }): Observable<
    | t_pull_request_review
    | t_basic_error
    | t_basic_error
    | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/reviews/${p["reviewId"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  pullsUpdateBranch(p: {
    owner: string
    repo: string
    pullNumber: number
    requestBody?: {
      expected_head_sha?: string
    }
  }): Observable<
    | {
        message?: string
        url?: string
      }
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/pulls/${p["pullNumber"]}/update-branch`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetReadme(p: {
    owner: string
    repo: string
    ref?: string
  }): Observable<t_content_file | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { ref: p["ref"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/readme`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetReadmeInDirectory(p: {
    owner: string
    repo: string
    dir: string
    ref?: string
  }): Observable<t_content_file | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { ref: p["ref"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/readme/${p["dir"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListReleases(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_release[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/releases`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateRelease(p: {
    owner: string
    repo: string
    requestBody: {
      body?: string
      discussion_category_name?: string
      draft?: boolean
      generate_release_notes?: boolean
      make_latest?: "true" | "false" | "legacy"
      name?: string
      prerelease?: boolean
      tag_name: string
      target_commitish?: string
    }
  }): Observable<t_release | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/releases`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetReleaseAsset(p: {
    owner: string
    repo: string
    assetId: number
  }): Observable<t_release_asset | void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateReleaseAsset(p: {
    owner: string
    repo: string
    assetId: number
    requestBody?: {
      label?: string
      name?: string
      state?: string
    }
  }): Observable<t_release_asset> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteReleaseAsset(p: {
    owner: string
    repo: string
    assetId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/assets/${p["assetId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGenerateReleaseNotes(p: {
    owner: string
    repo: string
    requestBody: {
      configuration_file_path?: string
      previous_tag_name?: string
      tag_name: string
      target_commitish?: string
    }
  }): Observable<t_release_notes_content | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/generate-notes`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetLatestRelease(p: {
    owner: string
    repo: string
  }): Observable<t_release> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/latest`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetReleaseByTag(p: {
    owner: string
    repo: string
    tag: string
  }): Observable<t_release | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/tags/${p["tag"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetRelease(p: {
    owner: string
    repo: string
    releaseId: number
  }): Observable<t_release | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUpdateRelease(p: {
    owner: string
    repo: string
    releaseId: number
    requestBody?: {
      body?: string
      discussion_category_name?: string
      draft?: boolean
      make_latest?: "true" | "false" | "legacy"
      name?: string
      prerelease?: boolean
      tag_name?: string
      target_commitish?: string
    }
  }): Observable<t_release | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteRelease(p: {
    owner: string
    repo: string
    releaseId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListReleaseAssets(p: {
    owner: string
    repo: string
    releaseId: number
    perPage?: number
    page?: number
  }): Observable<t_release_asset[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/assets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposUploadReleaseAsset(p: {
    owner: string
    repo: string
    releaseId: number
    name: string
    label?: string
    requestBody?: string
  }): Observable<t_release_asset | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "*/*",
    }

    const queryParameters = { name: p["name"], label: p["label"] }

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/assets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForRelease(p: {
    owner: string
    repo: string
    releaseId: number
    content?: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes"
    perPage?: number
    page?: number
  }): Observable<t_reaction[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForRelease(p: {
    owner: string
    repo: string
    releaseId: number
    requestBody: {
      content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes"
    }
  }): Observable<t_reaction | t_reaction | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsDeleteForRelease(p: {
    owner: string
    repo: string
    releaseId: number
    reactionId: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/releases/${p["releaseId"]}/reactions/${p["reactionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  secretScanningListAlertsForRepo(p: {
    owner: string
    repo: string
    state?: "open" | "resolved"
    secretType?: string
    resolution?: string
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    page?: number
    perPage?: number
    before?: string
    after?: string
  }): Observable<
    | t_secret_scanning_alert[]
    | void
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      secret_type: p["secretType"],
      resolution: p["resolution"],
      sort: p["sort"],
      direction: p["direction"],
      page: p["page"],
      per_page: p["perPage"],
      before: p["before"],
      after: p["after"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  secretScanningGetAlert(p: {
    owner: string
    repo: string
    alertNumber: t_alert_number
  }): Observable<
    | t_secret_scanning_alert
    | void
    | void
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts/${p["alertNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  secretScanningUpdateAlert(p: {
    owner: string
    repo: string
    alertNumber: t_alert_number
    requestBody: {
      resolution?: t_secret_scanning_alert_resolution
      resolution_comment?: t_secret_scanning_alert_resolution_comment
      state: t_secret_scanning_alert_state
    }
  }): Observable<
    | t_secret_scanning_alert
    | void
    | void
    | void
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts/${p["alertNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  secretScanningListLocationsForAlert(p: {
    owner: string
    repo: string
    alertNumber: t_alert_number
    page?: number
    perPage?: number
  }): Observable<
    | t_secret_scanning_location[]
    | void
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { page: p["page"], per_page: p["perPage"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/secret-scanning/alerts/${p["alertNumber"]}/locations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListStargazersForRepo(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<
    | {
        [key: string]: unknown
      }
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/stargazers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCodeFrequencyStats(p: { owner: string; repo: string }): Observable<
    | t_code_frequency_stat[]
    | {
        [key: string]: unknown
      }
    | void
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/stats/code_frequency`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetCommitActivityStats(p: { owner: string; repo: string }): Observable<
    | t_commit_activity[]
    | {
        [key: string]: unknown
      }
    | void
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/stats/commit_activity`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetContributorsStats(p: { owner: string; repo: string }): Observable<
    | t_contributor_activity[]
    | {
        [key: string]: unknown
      }
    | void
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/stats/contributors`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetParticipationStats(p: {
    owner: string
    repo: string
  }): Observable<t_participation_stats | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/stats/participation`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetPunchCardStats(p: {
    owner: string
    repo: string
  }): Observable<t_code_frequency_stat[] | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/stats/punch_card`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateCommitStatus(p: {
    owner: string
    repo: string
    sha: string
    requestBody: {
      context?: string
      description?: string | null
      state: "error" | "failure" | "pending" | "success"
      target_url?: string | null
    }
  }): Observable<t_status> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/statuses/${p["sha"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListWatchersForRepo(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_simple_user[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscribers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityGetRepoSubscription(p: {
    owner: string
    repo: string
  }): Observable<t_repository_subscription | t_basic_error | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activitySetRepoSubscription(p: {
    owner: string
    repo: string
    requestBody?: {
      ignored?: boolean
      subscribed?: boolean
    }
  }): Observable<t_repository_subscription> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityDeleteRepoSubscription(p: {
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/subscription`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListTags(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_tag[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/tags`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListTagProtection(p: {
    owner: string
    repo: string
  }): Observable<t_tag_protection[] | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/tags/protection`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateTagProtection(p: {
    owner: string
    repo: string
    requestBody: {
      pattern: string
    }
  }): Observable<t_tag_protection | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/tags/protection`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeleteTagProtection(p: {
    owner: string
    repo: string
    tagProtectionId: number
  }): Observable<void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/tags/protection/${p["tagProtectionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDownloadTarballArchive(p: {
    owner: string
    repo: string
    ref: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/tarball/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListTeams(p: {
    owner: string
    repo: string
    perPage?: number
    page?: number
  }): Observable<t_team[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetAllTopics(p: {
    owner: string
    repo: string
    page?: number
    perPage?: number
  }): Observable<t_topic | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { page: p["page"], per_page: p["perPage"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/topics`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposReplaceAllTopics(p: {
    owner: string
    repo: string
    requestBody: {
      names: string[]
    }
  }): Observable<t_topic | t_basic_error | t_validation_error_simple> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/topics`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetClones(p: {
    owner: string
    repo: string
    per?: "" | "day" | "week"
  }): Observable<t_clone_traffic | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per: p["per"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/traffic/clones`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetTopPaths(p: {
    owner: string
    repo: string
  }): Observable<t_content_traffic[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/traffic/popular/paths`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetTopReferrers(p: {
    owner: string
    repo: string
  }): Observable<t_referrer_traffic[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/traffic/popular/referrers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposGetViews(p: {
    owner: string
    repo: string
    per?: "" | "day" | "week"
  }): Observable<t_view_traffic | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per: p["per"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/traffic/views`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposTransfer(p: {
    owner: string
    repo: string
    requestBody: {
      new_name?: string
      new_owner: string
      team_ids?: number[]
    }
  }): Observable<t_minimal_repository> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/repos/${p["owner"]}/${p["repo"]}/transfer`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCheckVulnerabilityAlerts(p: {
    owner: string
    repo: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposEnableVulnerabilityAlerts(p: {
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDisableVulnerabilityAlerts(p: {
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/vulnerability-alerts`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDownloadZipballArchive(p: {
    owner: string
    repo: string
    ref: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repos/${p["owner"]}/${p["repo"]}/zipball/${p["ref"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateUsingTemplate(p: {
    templateOwner: string
    templateRepo: string
    requestBody: {
      description?: string
      include_all_branches?: boolean
      name: string
      owner?: string
      private?: boolean
    }
  }): Observable<t_repository> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repos/${p["templateOwner"]}/${p["templateRepo"]}/generate`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListPublic(p: {
    since?: number
  }): Observable<t_minimal_repository[] | void | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { since: p["since"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListEnvironmentSecrets(p: {
    repositoryId: number
    environmentName: string
    perPage?: number
    page?: number
  }): Observable<{
    secrets: t_actions_secret[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetEnvironmentPublicKey(p: {
    repositoryId: number
    environmentName: string
  }): Observable<t_actions_public_key> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/public-key`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetEnvironmentSecret(p: {
    repositoryId: number
    environmentName: string
    secretName: string
  }): Observable<t_actions_secret> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateOrUpdateEnvironmentSecret(p: {
    repositoryId: number
    environmentName: string
    secretName: string
    requestBody: {
      encrypted_value: string
      key_id: string
    }
  }): Observable<t_empty_object | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteEnvironmentSecret(p: {
    repositoryId: number
    environmentName: string
    secretName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsListEnvironmentVariables(p: {
    repositoryId: number
    environmentName: string
    perPage?: number
    page?: number
  }): Observable<{
    total_count: number
    variables: t_actions_variable[]
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsCreateEnvironmentVariable(p: {
    repositoryId: number
    environmentName: string
    requestBody: {
      name: string
      value: string
    }
  }): Observable<t_empty_object> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsGetEnvironmentVariable(p: {
    repositoryId: number
    environmentName: string
    name: string
  }): Observable<t_actions_variable> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsUpdateEnvironmentVariable(p: {
    repositoryId: number
    environmentName: string
    name: string
    requestBody: {
      name?: string
      value?: string
    }
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  actionsDeleteEnvironmentVariable(p: {
    repositoryId: number
    environmentName: string
    name: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/repositories/${p["repositoryId"]}/environments/${p["environmentName"]}/variables/${p["name"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchCode(p: {
    q: string
    sort?: "indexed"
    order?: "desc" | "asc"
    perPage?: number
    page?: number
  }): Observable<
    | {
        incomplete_results: boolean
        items: t_code_search_result_item[]
        total_count: number
      }
    | void
    | t_basic_error
    | t_validation_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/code`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchCommits(p: {
    q: string
    sort?: "author-date" | "committer-date"
    order?: "desc" | "asc"
    perPage?: number
    page?: number
  }): Observable<{
    incomplete_results: boolean
    items: t_commit_search_result_item[]
    total_count: number
  } | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/commits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchIssuesAndPullRequests(p: {
    q: string
    sort?:
      | "comments"
      | "reactions"
      | "reactions-+1"
      | "reactions--1"
      | "reactions-smile"
      | "reactions-thinking_face"
      | "reactions-heart"
      | "reactions-tada"
      | "interactions"
      | "created"
      | "updated"
    order?: "desc" | "asc"
    perPage?: number
    page?: number
  }): Observable<
    | {
        incomplete_results: boolean
        items: t_issue_search_result_item[]
        total_count: number
      }
    | void
    | t_basic_error
    | t_validation_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchLabels(p: {
    repositoryId: number
    q: string
    sort?: "created" | "updated"
    order?: "desc" | "asc"
    perPage?: number
    page?: number
  }): Observable<
    | {
        incomplete_results: boolean
        items: t_label_search_result_item[]
        total_count: number
      }
    | void
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      repository_id: p["repositoryId"],
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/labels`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchRepos(p: {
    q: string
    sort?: "stars" | "forks" | "help-wanted-issues" | "updated"
    order?: "desc" | "asc"
    perPage?: number
    page?: number
  }): Observable<
    | {
        incomplete_results: boolean
        items: t_repo_search_result_item[]
        total_count: number
      }
    | void
    | t_validation_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchTopics(p: { q: string; perPage?: number; page?: number }): Observable<{
    incomplete_results: boolean
    items: t_topic_search_result_item[]
    total_count: number
  } | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      q: p["q"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/topics`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  searchUsers(p: {
    q: string
    sort?: "followers" | "repositories" | "joined"
    order?: "desc" | "asc"
    perPage?: number
    page?: number
  }): Observable<
    | {
        incomplete_results: boolean
        items: t_user_search_result_item[]
        total_count: number
      }
    | void
    | t_validation_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      q: p["q"],
      sort: p["sort"],
      order: p["order"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/search/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetLegacy(p: {
    teamId: number
  }): Observable<t_team_full | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateLegacy(p: {
    teamId: number
    requestBody: {
      description?: string
      name: string
      parent_team_id?: number | null
      permission?: "pull" | "push" | "admin"
      privacy?: "secret" | "closed"
    }
  }): Observable<
    | t_team_full
    | t_team_full
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/teams/${p["teamId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteLegacy(p: {
    teamId: number
  }): Observable<void | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/teams/${p["teamId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListDiscussionsLegacy(p: {
    teamId: number
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<t_team_discussion[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/discussions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreateDiscussionLegacy(p: {
    teamId: number
    requestBody: {
      body: string
      private?: boolean
      title: string
    }
  }): Observable<t_team_discussion> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/teams/${p["teamId"]}/discussions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetDiscussionLegacy(p: {
    teamId: number
    discussionNumber: number
  }): Observable<t_team_discussion> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateDiscussionLegacy(p: {
    teamId: number
    discussionNumber: number
    requestBody?: {
      body?: string
      title?: string
    }
  }): Observable<t_team_discussion> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteDiscussionLegacy(p: {
    teamId: number
    discussionNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListDiscussionCommentsLegacy(p: {
    teamId: number
    discussionNumber: number
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<t_team_discussion_comment[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCreateDiscussionCommentLegacy(p: {
    teamId: number
    discussionNumber: number
    requestBody: {
      body: string
    }
  }): Observable<t_team_discussion_comment> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetDiscussionCommentLegacy(p: {
    teamId: number
    discussionNumber: number
    commentNumber: number
  }): Observable<t_team_discussion_comment> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsUpdateDiscussionCommentLegacy(p: {
    teamId: number
    discussionNumber: number
    commentNumber: number
    requestBody: {
      body: string
    }
  }): Observable<t_team_discussion_comment> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsDeleteDiscussionCommentLegacy(p: {
    teamId: number
    discussionNumber: number
    commentNumber: number
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForTeamDiscussionCommentLegacy(p: {
    teamId: number
    discussionNumber: number
    commentNumber: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<t_reaction[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForTeamDiscussionCommentLegacy(p: {
    teamId: number
    discussionNumber: number
    commentNumber: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<t_reaction> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/comments/${p["commentNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsListForTeamDiscussionLegacy(p: {
    teamId: number
    discussionNumber: number
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes"
    perPage?: number
    page?: number
  }): Observable<t_reaction[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      content: p["content"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reactionsCreateForTeamDiscussionLegacy(p: {
    teamId: number
    discussionNumber: number
    requestBody: {
      content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes"
    }
  }): Observable<t_reaction> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/teams/${p["teamId"]}/discussions/${p["discussionNumber"]}/reactions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListPendingInvitationsLegacy(p: {
    teamId: number
    perPage?: number
    page?: number
  }): Observable<t_organization_invitation[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListMembersLegacy(p: {
    teamId: number
    role?: "member" | "maintainer" | "all"
    perPage?: number
    page?: number
  }): Observable<t_simple_user[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      role: p["role"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/members`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetMemberLegacy(p: {
    teamId: number
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddMemberLegacy(p: {
    teamId: number
    username: string
  }): Observable<void | t_basic_error | void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/teams/${p["teamId"]}/members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveMemberLegacy(p: {
    teamId: number
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/teams/${p["teamId"]}/members/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsGetMembershipForUserLegacy(p: {
    teamId: number
    username: string
  }): Observable<t_team_membership | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateMembershipForUserLegacy(p: {
    teamId: number
    username: string
    requestBody?: {
      role?: "member" | "maintainer"
    }
  }): Observable<t_team_membership | void | t_basic_error | void> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/teams/${p["teamId"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveMembershipForUserLegacy(p: {
    teamId: number
    username: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/teams/${p["teamId"]}/memberships/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListProjectsLegacy(p: {
    teamId: number
    perPage?: number
    page?: number
  }): Observable<t_team_project[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCheckPermissionsForProjectLegacy(p: {
    teamId: number
    projectId: number
  }): Observable<t_team_project | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateProjectPermissionsLegacy(p: {
    teamId: number
    projectId: number
    requestBody?: {
      permission?: "read" | "write" | "admin"
    }
  }): Observable<
    | void
    | {
        documentation_url?: string
        message?: string
      }
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/teams/${p["teamId"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveProjectLegacy(p: {
    teamId: number
    projectId: number
  }): Observable<void | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/teams/${p["teamId"]}/projects/${p["projectId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListReposLegacy(p: {
    teamId: number
    perPage?: number
    page?: number
  }): Observable<t_minimal_repository[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsCheckPermissionsForRepoLegacy(p: {
    teamId: number
    owner: string
    repo: string
  }): Observable<t_team_repository | void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsAddOrUpdateRepoPermissionsLegacy(p: {
    teamId: number
    owner: string
    repo: string
    requestBody?: {
      permission?: "pull" | "push" | "admin"
    }
  }): Observable<void | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsRemoveRepoLegacy(p: {
    teamId: number
    owner: string
    repo: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/teams/${p["teamId"]}/repos/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListChildLegacy(p: {
    teamId: number
    perPage?: number
    page?: number
  }): Observable<
    t_team[] | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/teams/${p["teamId"]}/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersGetAuthenticated(): Observable<
    (t_private_user | t_public_user) | void | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>("GET", this.config.basePath + `/user`, {
      params: this.queryParams(queryParameters),
      headers: this.headers(headers),

      observe: "body",
      reportProgress: false,
    })
  }

  usersUpdateAuthenticated(p: {
    requestBody?: {
      bio?: string
      blog?: string
      company?: string
      email?: string
      hireable?: boolean
      location?: string
      name?: string
      twitter_username?: string | null
    }
  }): Observable<
    | t_private_user
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/user`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListBlockedByAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<
    t_simple_user[] | void | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/blocks`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersCheckBlocked(p: {
    username: string
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersBlock(p: {
    username: string
  }): Observable<
    | void
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/user/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersUnblock(p: {
    username: string
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/blocks/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesListForAuthenticatedUser(p: {
    perPage?: number
    page?: number
    repositoryId?: number
  }): Observable<
    | {
        codespaces: t_codespace[]
        total_count: number
      }
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      per_page: p["perPage"],
      page: p["page"],
      repository_id: p["repositoryId"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/codespaces`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesCreateForAuthenticatedUser(p: {
    requestBody:
      | {
          client_ip?: string
          devcontainer_path?: string
          display_name?: string
          idle_timeout_minutes?: number
          location?: string
          machine?: string
          multi_repo_permissions_opt_out?: boolean
          ref?: string
          repository_id: number
          retention_period_minutes?: number
          working_directory?: string
        }
      | {
          devcontainer_path?: string
          idle_timeout_minutes?: number
          location?: string
          machine?: string
          pull_request: {
            pull_request_number: number
            repository_id: number
          }
          working_directory?: string
        }
  }): Observable<
    | t_codespace
    | t_codespace
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | {
        code?: string
        documentation_url?: string
        message?: string
      }
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/codespaces`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesListSecretsForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<{
    secrets: t_codespaces_secret[]
    total_count: number
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/codespaces/secrets`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesGetPublicKeyForAuthenticatedUser(): Observable<t_codespaces_user_public_key> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/codespaces/secrets/public-key`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesGetSecretForAuthenticatedUser(p: {
    secretName: string
  }): Observable<t_codespaces_secret> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/codespaces/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesCreateOrUpdateSecretForAuthenticatedUser(p: {
    secretName: string
    requestBody: {
      encrypted_value?: string
      key_id: string
      selected_repository_ids?: string[]
    }
  }): Observable<t_empty_object | void | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/user/codespaces/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesDeleteSecretForAuthenticatedUser(p: {
    secretName: string
  }): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/codespaces/secrets/${p["secretName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesListRepositoriesForSecretForAuthenticatedUser(p: {
    secretName: string
  }): Observable<
    | {
        repositories: t_minimal_repository[]
        total_count: number
      }
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/user/codespaces/secrets/${p["secretName"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesSetRepositoriesForSecretForAuthenticatedUser(p: {
    secretName: string
    requestBody: {
      selected_repository_ids: number[]
    }
  }): Observable<
    void | t_basic_error | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/user/codespaces/secrets/${p["secretName"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesAddRepositoryForSecretForAuthenticatedUser(p: {
    secretName: string
    repositoryId: number
  }): Observable<
    void | t_basic_error | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/user/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesRemoveRepositoryForSecretForAuthenticatedUser(p: {
    secretName: string
    repositoryId: number
  }): Observable<
    void | t_basic_error | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/user/codespaces/secrets/${p["secretName"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesGetForAuthenticatedUser(p: {
    codespaceName: string
  }): Observable<
    | t_codespace
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/codespaces/${p["codespaceName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesUpdateForAuthenticatedUser(p: {
    codespaceName: string
    requestBody?: {
      display_name?: string
      machine?: string
      recent_folders?: string[]
    }
  }): Observable<t_codespace | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/user/codespaces/${p["codespaceName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesDeleteForAuthenticatedUser(p: {
    codespaceName: string
  }): Observable<
    | {
        [key: string]: unknown
      }
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/codespaces/${p["codespaceName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesExportForAuthenticatedUser(p: {
    codespaceName: string
  }): Observable<
    | t_codespace_export_details
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/codespaces/${p["codespaceName"]}/exports`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesGetExportDetailsForAuthenticatedUser(p: {
    codespaceName: string
    exportId: string
  }): Observable<t_codespace_export_details | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/user/codespaces/${p["codespaceName"]}/exports/${p["exportId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesCodespaceMachinesForAuthenticatedUser(p: {
    codespaceName: string
  }): Observable<
    | {
        machines: t_codespace_machine[]
        total_count: number
      }
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/codespaces/${p["codespaceName"]}/machines`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesPublishForAuthenticatedUser(p: {
    codespaceName: string
    requestBody: {
      name?: string
      private?: boolean
    }
  }): Observable<
    | t_codespace_with_full_repository
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/codespaces/${p["codespaceName"]}/publish`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesStartForAuthenticatedUser(p: {
    codespaceName: string
  }): Observable<
    | t_codespace
    | void
    | t_scim_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/codespaces/${p["codespaceName"]}/start`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  codespacesStopForAuthenticatedUser(p: {
    codespaceName: string
  }): Observable<
    t_codespace | t_basic_error | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/codespaces/${p["codespaceName"]}/stop`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersSetPrimaryEmailVisibilityForAuthenticatedUser(p: {
    requestBody: {
      visibility: "public" | "private"
    }
  }): Observable<
    | t_email[]
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/user/email/visibility`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListEmailsForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<
    t_email[] | void | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/emails`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersAddEmailForAuthenticatedUser(p: {
    requestBody?:
      | {
          emails: string[]
        }
      | string[]
      | string
  }): Observable<
    | t_email[]
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/emails`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersDeleteEmailForAuthenticatedUser(p: {
    requestBody:
      | {
          emails: string[]
        }
      | string[]
      | string
  }): Observable<
    | void
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/emails`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListFollowersForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<t_simple_user[] | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/followers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListFollowedByAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<t_simple_user[] | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/following`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersCheckPersonIsFollowedByAuthenticated(p: {
    username: string
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/following/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersFollow(p: {
    username: string
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/user/following/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersUnfollow(p: {
    username: string
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/following/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListGpgKeysForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<
    t_gpg_key[] | void | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/gpg_keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersCreateGpgKeyForAuthenticatedUser(p: {
    requestBody: {
      armored_public_key: string
      name?: string
    }
  }): Observable<
    | t_gpg_key
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/gpg_keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersGetGpgKeyForAuthenticatedUser(p: {
    gpgKeyId: number
  }): Observable<
    t_gpg_key | void | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/gpg_keys/${p["gpgKeyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersDeleteGpgKeyForAuthenticatedUser(p: {
    gpgKeyId: number
  }): Observable<
    | void
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/gpg_keys/${p["gpgKeyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListInstallationsForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<
    | {
        installations: t_installation[]
        total_count: number
      }
    | void
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/installations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListInstallationReposForAuthenticatedUser(p: {
    installationId: number
    perPage?: number
    page?: number
  }): Observable<
    | {
        repositories: t_repository[]
        repository_selection?: string
        total_count: number
      }
    | void
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/user/installations/${p["installationId"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsAddRepoToInstallationForAuthenticatedUser(p: {
    installationId: number
    repositoryId: number
  }): Observable<void | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath +
        `/user/installations/${p["installationId"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsRemoveRepoFromInstallationForAuthenticatedUser(p: {
    installationId: number
    repositoryId: number
  }): Observable<void | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/user/installations/${p["installationId"]}/repositories/${p["repositoryId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsGetRestrictionsForAuthenticatedUser(): Observable<{
    [key: string]: unknown
  } | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsSetRestrictionsForAuthenticatedUser(p: {
    requestBody: t_interaction_limit
  }): Observable<t_interaction_limit_response | t_validation_error> {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/user/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  interactionsRemoveRestrictionsForAuthenticatedUser(): Observable<void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/interaction-limits`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  issuesListForAuthenticatedUser(p: {
    filter?:
      | "assigned"
      | "created"
      | "mentioned"
      | "subscribed"
      | "repos"
      | "all"
    state?: "open" | "closed" | "all"
    labels?: string
    sort?: "created" | "updated" | "comments"
    direction?: "asc" | "desc"
    since?: string
    perPage?: number
    page?: number
  }): Observable<t_issue[] | void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      filter: p["filter"],
      state: p["state"],
      labels: p["labels"],
      sort: p["sort"],
      direction: p["direction"],
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/issues`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListPublicSshKeysForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<
    t_key[] | void | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersCreatePublicSshKeyForAuthenticatedUser(p: {
    requestBody: {
      key: string
      title?: string
    }
  }): Observable<
    | t_key
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersGetPublicSshKeyForAuthenticatedUser(p: {
    keyId: number
  }): Observable<t_key | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/keys/${p["keyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersDeletePublicSshKeyForAuthenticatedUser(p: {
    keyId: number
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/keys/${p["keyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListSubscriptionsForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<
    t_user_marketplace_purchase[] | void | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/marketplace_purchases`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsListSubscriptionsForAuthenticatedUserStubbed(p: {
    perPage?: number
    page?: number
  }): Observable<t_user_marketplace_purchase[] | void | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/marketplace_purchases/stubbed`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListMembershipsForAuthenticatedUser(p: {
    state?: "active" | "pending"
    perPage?: number
    page?: number
  }): Observable<
    | t_org_membership[]
    | void
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/memberships/orgs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsGetMembershipForAuthenticatedUser(p: {
    org: string
  }): Observable<t_org_membership | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/memberships/orgs/${p["org"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsUpdateMembershipForAuthenticatedUser(p: {
    org: string
    requestBody: {
      state: "active"
    }
  }): Observable<
    t_org_membership | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath + `/user/memberships/orgs/${p["org"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsListForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<t_migration[] | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/migrations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsStartForAuthenticatedUser(p: {
    requestBody: {
      exclude?: "repositories"[]
      exclude_attachments?: boolean
      exclude_git_data?: boolean
      exclude_metadata?: boolean
      exclude_owner_projects?: boolean
      exclude_releases?: boolean
      lock_repositories?: boolean
      org_metadata_only?: boolean
      repositories: string[]
    }
  }): Observable<
    t_migration | void | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/migrations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetStatusForAuthenticatedUser(p: {
    migrationId: number
    exclude?: string[]
  }): Observable<
    t_migration | void | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { exclude: p["exclude"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/migrations/${p["migrationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsGetArchiveForAuthenticatedUser(p: {
    migrationId: number
  }): Observable<void | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/migrations/${p["migrationId"]}/archive`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsDeleteArchiveForAuthenticatedUser(p: {
    migrationId: number
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/migrations/${p["migrationId"]}/archive`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsUnlockRepoForAuthenticatedUser(p: {
    migrationId: number
    repoName: string
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/user/migrations/${p["migrationId"]}/repos/${p["repoName"]}/lock`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  migrationsListReposForAuthenticatedUser(p: {
    migrationId: number
    perPage?: number
    page?: number
  }): Observable<t_minimal_repository[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/user/migrations/${p["migrationId"]}/repositories`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<
    t_organization_simple[] | void | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/orgs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesListPackagesForAuthenticatedUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    visibility?: "public" | "private" | "internal"
  }): Observable<t_package[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      package_type: p["packageType"],
      visibility: p["visibility"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/packages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesGetPackageForAuthenticatedUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
  }): Observable<t_package> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/user/packages/${p["packageType"]}/${p["packageName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesDeletePackageForAuthenticatedUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/user/packages/${p["packageType"]}/${p["packageName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesRestorePackageForAuthenticatedUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    token?: string
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { token: p["token"] }

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/user/packages/${p["packageType"]}/${p["packageName"]}/restore`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    page?: number
    perPage?: number
    state?: "active" | "deleted"
  }): Observable<
    t_package_version[] | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      page: p["page"],
      per_page: p["perPage"],
      state: p["state"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/user/packages/${p["packageType"]}/${p["packageName"]}/versions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesGetPackageVersionForAuthenticatedUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    packageVersionId: number
  }): Observable<t_package_version> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/user/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesDeletePackageVersionForAuthenticatedUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    packageVersionId: number
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/user/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesRestorePackageVersionForAuthenticatedUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    packageVersionId: number
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/user/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}/restore`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsCreateForAuthenticatedUser(p: {
    requestBody: {
      body?: string | null
      name: string
    }
  }): Observable<
    t_project | void | t_basic_error | t_basic_error | t_validation_error_simple
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListPublicEmailsForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<
    t_email[] | void | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/public_emails`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListForAuthenticatedUser(p: {
    visibility?: "all" | "public" | "private"
    affiliation?: string
    type?: "all" | "owner" | "public" | "private" | "member"
    sort?: "created" | "updated" | "pushed" | "full_name"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
    since?: string
    before?: string
  }): Observable<
    t_repository[] | void | t_basic_error | t_basic_error | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      visibility: p["visibility"],
      affiliation: p["affiliation"],
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
      since: p["since"],
      before: p["before"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposCreateForAuthenticatedUser(p: {
    requestBody: {
      allow_auto_merge?: boolean
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      auto_init?: boolean
      delete_branch_on_merge?: boolean
      description?: string
      gitignore_template?: string
      has_discussions?: boolean
      has_downloads?: boolean
      has_issues?: boolean
      has_projects?: boolean
      has_wiki?: boolean
      homepage?: string
      is_template?: boolean
      license_template?: string
      merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
      merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
      name: string
      private?: boolean
      squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
      squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
      team_id?: number
    }
  }): Observable<
    | t_repository
    | void
    | t_scim_error
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListInvitationsForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<
    | t_repository_invitation[]
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/repository_invitations`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposAcceptInvitationForAuthenticatedUser(p: {
    invitationId: number
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PATCH",
      this.config.basePath +
        `/user/repository_invitations/${p["invitationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposDeclineInvitationForAuthenticatedUser(p: {
    invitationId: number
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/user/repository_invitations/${p["invitationId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListSshSigningKeysForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<
    t_ssh_signing_key[] | void | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/ssh_signing_keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersCreateSshSigningKeyForAuthenticatedUser(p: {
    requestBody: {
      key: string
      title?: string
    }
  }): Observable<
    | t_ssh_signing_key
    | void
    | t_basic_error
    | t_basic_error
    | t_basic_error
    | t_validation_error
  > {
    const headers: Record<string, string | undefined> = {
      "Content-Type": "application/json",
    }

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath + `/user/ssh_signing_keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),
        body: p["requestBody"],
        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersGetSshSigningKeyForAuthenticatedUser(p: {
    sshSigningKeyId: number
  }): Observable<
    t_ssh_signing_key | void | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/ssh_signing_keys/${p["sshSigningKeyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersDeleteSshSigningKeyForAuthenticatedUser(p: {
    sshSigningKeyId: number
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/ssh_signing_keys/${p["sshSigningKeyId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListReposStarredByAuthenticatedUser(p: {
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<
    t_starred_repository[] | void | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/starred`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityCheckRepoIsStarredByAuthenticatedUser(p: {
    owner: string
    repo: string
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/starred/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityStarRepoForAuthenticatedUser(p: {
    owner: string
    repo: string
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "PUT",
      this.config.basePath + `/user/starred/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityUnstarRepoForAuthenticatedUser(p: {
    owner: string
    repo: string
  }): Observable<void | void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath + `/user/starred/${p["owner"]}/${p["repo"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListWatchedReposForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<
    t_minimal_repository[] | void | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/subscriptions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  teamsListForAuthenticatedUser(p: {
    perPage?: number
    page?: number
  }): Observable<t_team_full[] | void | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/user/teams`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersList(p: {
    since?: number
    perPage?: number
  }): Observable<t_simple_user[] | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { since: p["since"], per_page: p["perPage"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersGetByUsername(p: {
    username: string
  }): Observable<(t_private_user | t_public_user) | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListEventsForAuthenticatedUser(p: {
    username: string
    perPage?: number
    page?: number
  }): Observable<t_event[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListOrgEventsForAuthenticatedUser(p: {
    username: string
    org: string
    perPage?: number
    page?: number
  }): Observable<t_event[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/events/orgs/${p["org"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListPublicEventsForUser(p: {
    username: string
    perPage?: number
    page?: number
  }): Observable<t_event[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/events/public`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListFollowersForUser(p: {
    username: string
    perPage?: number
    page?: number
  }): Observable<t_simple_user[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/followers`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListFollowingForUser(p: {
    username: string
    perPage?: number
    page?: number
  }): Observable<t_simple_user[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/following`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersCheckFollowingForUser(p: {
    username: string
    targetUser: string
  }): Observable<void | void> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/users/${p["username"]}/following/${p["targetUser"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  gistsListForUser(p: {
    username: string
    since?: string
    perPage?: number
    page?: number
  }): Observable<t_base_gist[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      since: p["since"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/gists`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListGpgKeysForUser(p: {
    username: string
    perPage?: number
    page?: number
  }): Observable<t_gpg_key[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/gpg_keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersGetContextForUser(p: {
    username: string
    subjectType?: "organization" | "repository" | "issue" | "pull_request"
    subjectId?: string
  }): Observable<t_hovercard | t_basic_error | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      subject_type: p["subjectType"],
      subject_id: p["subjectId"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/hovercard`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  appsGetUserInstallation(p: { username: string }): Observable<t_installation> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/installation`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListPublicKeysForUser(p: {
    username: string
    perPage?: number
    page?: number
  }): Observable<t_key_simple[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  orgsListForUser(p: {
    username: string
    perPage?: number
    page?: number
  }): Observable<t_organization_simple[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/orgs`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesListPackagesForUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    visibility?: "public" | "private" | "internal"
    username: string
  }): Observable<t_package[] | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      package_type: p["packageType"],
      visibility: p["visibility"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/packages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesGetPackageForUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    username: string
  }): Observable<t_package> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesDeletePackageForUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    username: string
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesRestorePackageForUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    username: string
    token?: string
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { token: p["token"] }

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/restore`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesGetAllPackageVersionsForPackageOwnedByUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    username: string
  }): Observable<
    t_package_version[] | t_basic_error | t_basic_error | t_basic_error
  > {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesGetPackageVersionForUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    packageVersionId: number
    username: string
  }): Observable<t_package_version> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesDeletePackageVersionForUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    username: string
    packageVersionId: number
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "DELETE",
      this.config.basePath +
        `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  packagesRestorePackageVersionForUser(p: {
    packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
    packageName: string
    username: string
    packageVersionId: number
  }): Observable<void | t_basic_error | t_basic_error | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "POST",
      this.config.basePath +
        `/users/${p["username"]}/packages/${p["packageType"]}/${p["packageName"]}/versions/${p["packageVersionId"]}/restore`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  projectsListForUser(p: {
    username: string
    state?: "open" | "closed" | "all"
    perPage?: number
    page?: number
  }): Observable<t_project[] | t_validation_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      state: p["state"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/projects`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListReceivedEventsForUser(p: {
    username: string
    perPage?: number
    page?: number
  }): Observable<t_event[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/received_events`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListReceivedPublicEventsForUser(p: {
    username: string
    perPage?: number
    page?: number
  }): Observable<t_event[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/received_events/public`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  reposListForUser(p: {
    username: string
    type?: "all" | "owner" | "member"
    sort?: "created" | "updated" | "pushed" | "full_name"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<t_minimal_repository[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      type: p["type"],
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/repos`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  billingGetGithubActionsBillingUser(p: {
    username: string
  }): Observable<t_actions_billing_usage> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/settings/billing/actions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  billingGetGithubPackagesBillingUser(p: {
    username: string
  }): Observable<t_packages_billing_usage> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/users/${p["username"]}/settings/billing/packages`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  billingGetSharedStorageBillingUser(p: {
    username: string
  }): Observable<t_combined_billing_usage> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath +
        `/users/${p["username"]}/settings/billing/shared-storage`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  usersListSshSigningKeysForUser(p: {
    username: string
    perPage?: number
    page?: number
  }): Observable<t_ssh_signing_key[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/ssh_signing_keys`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListReposStarredByUser(p: {
    username: string
    sort?: "created" | "updated"
    direction?: "asc" | "desc"
    perPage?: number
    page?: number
  }): Observable<{
    [key: string]: unknown
  }> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {
      sort: p["sort"],
      direction: p["direction"],
      per_page: p["perPage"],
      page: p["page"],
    }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/starred`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  activityListReposWatchedByUser(p: {
    username: string
    perPage?: number
    page?: number
  }): Observable<t_minimal_repository[]> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = { per_page: p["perPage"], page: p["page"] }

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/users/${p["username"]}/subscriptions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  metaGetAllVersions(): Observable<string[] | t_basic_error> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>(
      "GET",
      this.config.basePath + `/versions`,
      {
        params: this.queryParams(queryParameters),
        headers: this.headers(headers),

        observe: "body",
        reportProgress: false,
      }
    )
  }

  metaGetZen(): Observable<string> {
    const headers: Record<string, string | undefined> = {}

    const queryParameters = {}

    return this.httpClient.request<any>("GET", this.config.basePath + `/zen`, {
      params: this.queryParams(queryParameters),
      headers: this.headers(headers),

      observe: "body",
      reportProgress: false,
    })
  }
}
