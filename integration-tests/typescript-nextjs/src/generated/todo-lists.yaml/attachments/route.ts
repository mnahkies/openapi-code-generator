/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {t_UnknownObject, t_UploadAttachmentBodySchema} from "../models"
import {
  OpenAPIRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-nextjs-runtime/errors"
import {
  OpenAPIRuntimeResponder,
  OpenAPIRuntimeResponse,
  Params,
  StatusCode,
} from "@nahkies/typescript-nextjs-runtime/server"
import {parseRequestInput} from "@nahkies/typescript-nextjs-runtime/zod"
import {NextRequest} from "next/server"
import {z} from "zod"

// /attachments
export type ListAttachmentsResponder = {
  with200(): OpenAPIRuntimeResponse<t_UnknownObject[]>
} & OpenAPIRuntimeResponder

export type ListAttachments = (
  respond: ListAttachmentsResponder,
  request: NextRequest,
) => Promise<OpenAPIRuntimeResponse<unknown>>

export type UploadAttachmentResponder = {
  with202(): OpenAPIRuntimeResponse<void>
} & OpenAPIRuntimeResponder

export type UploadAttachment = (
  params: Params<void, void, t_UploadAttachmentBodySchema, void>,
  respond: UploadAttachmentResponder,
  request: NextRequest,
) => Promise<OpenAPIRuntimeResponse<unknown>>

export const _GET =
  (
    implementation: ListAttachments,
    onError: (err: unknown) => Promise<Response>,
  ) =>
  async (request: NextRequest): Promise<Response> => {
    try {
      const input = {
        params: undefined,
        // TODO: this swallows repeated parameters
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const responder = {
        with200() {
          return new OpenAPIRuntimeResponse<t_UnknownObject[]>(200)
        },
        withStatus(status: StatusCode) {
          return new OpenAPIRuntimeResponse(status)
        },
      }

      const res = await implementation(responder, request)
        .then((it) => {
          if (it instanceof Response) {
            return it
          }
          const {status, body} = it.unpack()

          return body !== undefined
            ? Response.json(body, {status})
            : new Response(undefined, {status})
        })
        .catch((err) => {
          throw OpenAPIRuntimeError.HandlerError(err)
        })

      return res
    } catch (err) {
      return await onError(err)
    }
  }

const uploadAttachmentBodySchema = z.object({file: z.unknown().optional()})

export const _POST =
  (
    implementation: UploadAttachment,
    onError: (err: unknown) => Promise<Response>,
  ) =>
  async (request: NextRequest): Promise<Response> => {
    try {
      const input = {
        params: undefined,
        // TODO: this swallows repeated parameters
        query: undefined,
        body: parseRequestInput(
          uploadAttachmentBodySchema,
          await request.json(),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const responder = {
        with202() {
          return new OpenAPIRuntimeResponse<void>(202)
        },
        withStatus(status: StatusCode) {
          return new OpenAPIRuntimeResponse(status)
        },
      }

      const res = await implementation(input, responder, request)
        .then((it) => {
          if (it instanceof Response) {
            return it
          }
          const {status, body} = it.unpack()

          return body !== undefined
            ? Response.json(body, {status})
            : new Response(undefined, {status})
        })
        .catch((err) => {
          throw OpenAPIRuntimeError.HandlerError(err)
        })

      return res
    } catch (err) {
      return await onError(err)
    }
  }
