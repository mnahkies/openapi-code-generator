/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import { t_UnknownObject, t_UploadAttachmentBodySchema } from "../models"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  StatusCode,
} from "@nahkies/typescript-koa-runtime/server"
import { Params, parseRequestInput } from "@nahkies/typescript-koa-runtime/zod"
import { NextRequest } from "next/server"
import { z } from "zod"

// /attachments
export type ListAttachmentsResponder = {
  with200(): KoaRuntimeResponse<t_UnknownObject[]>
} & KoaRuntimeResponder

export type ListAttachments = (
  respond: ListAttachmentsResponder,
  request: NextRequest,
) => Promise<KoaRuntimeResponse<unknown>>

export type UploadAttachmentResponder = {
  with202(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type UploadAttachment = (
  params: Params<void, void, t_UploadAttachmentBodySchema, void>,
  respond: UploadAttachmentResponder,
  request: NextRequest,
) => Promise<KoaRuntimeResponse<unknown>>

export const _GET =
  (implementation: ListAttachments) =>
  async (request: NextRequest): Promise<Response> => {
    const input = {
      params: undefined,
      // TODO: this swallows repeated parameters
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_UnknownObject[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const { status, body } = await implementation(responder, request)
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, { status })
      : new Response(undefined, { status })
  }

const uploadAttachmentBodySchema = z.object({ file: z.unknown().optional() })

export const _POST =
  (implementation: UploadAttachment) =>
  async (request: NextRequest): Promise<Response> => {
    const input = {
      params: undefined,
      // TODO: this swallows repeated parameters
      query: undefined,
      body: parseRequestInput(
        uploadAttachmentBodySchema,
        await request.json(),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const responder = {
      with202() {
        return new KoaRuntimeResponse<void>(202)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const { status, body } = await implementation(input, responder, request)
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, { status })
      : new Response(undefined, { status })
  }
