/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_CreateTodoListItemBodySchema,
  t_CreateTodoListItemParamSchema,
  t_GetTodoListItemsParamSchema,
} from "../../../models"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  StatusCode,
  StatusCode5xx,
} from "@nahkies/typescript-koa-runtime/server"
import {Params, parseRequestInput} from "@nahkies/typescript-koa-runtime/zod"
import {NextRequest} from "next/server"
import {z} from "zod"

// /list/{listId}/items
export type GetTodoListItemsResponder = {
  with200(): KoaRuntimeResponse<{
    completedAt?: string
    content: string
    createdAt: string
    id: string
  }>
  withStatusCode5xx(status: StatusCode5xx): KoaRuntimeResponse<{
    code: string
    message: string
  }>
} & KoaRuntimeResponder

export type GetTodoListItems = (
  params: Params<t_GetTodoListItemsParamSchema, void, void, void>,
  respond: GetTodoListItemsResponder,
  request: NextRequest,
) => Promise<KoaRuntimeResponse<unknown>>

export type CreateTodoListItemResponder = {
  with204(): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type CreateTodoListItem = (
  params: Params<
    t_CreateTodoListItemParamSchema,
    void,
    t_CreateTodoListItemBodySchema,
    void
  >,
  respond: CreateTodoListItemResponder,
  request: NextRequest,
) => Promise<KoaRuntimeResponse<unknown>>

const getTodoListItemsParamSchema = z.object({listId: z.string()})

export const _GET =
  (implementation: GetTodoListItems) =>
  async (
    request: NextRequest,
    {params}: {params: Promise<unknown>},
  ): Promise<Response> => {
    const input = {
      params: parseRequestInput(
        getTodoListItemsParamSchema,
        await params,
        RequestInputType.RouteParam,
      ),
      // TODO: this swallows repeated parameters
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<{
          completedAt?: string
          content: string
          createdAt: string
          id: string
        }>(200)
      },
      withStatusCode5xx(status: StatusCode5xx) {
        return new KoaRuntimeResponse<{
          code: string
          message: string
        }>(status)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const {status, body} = await implementation(input, responder, request)
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, {status})
      : new Response(undefined, {status})
  }

const createTodoListItemParamSchema = z.object({listId: z.string()})

const createTodoListItemBodySchema = z.object({
  id: z.string(),
  content: z.string(),
  completedAt: z.string().datetime({offset: true}).optional(),
})

export const _POST =
  (implementation: CreateTodoListItem) =>
  async (
    request: NextRequest,
    {params}: {params: Promise<unknown>},
  ): Promise<Response> => {
    const input = {
      params: parseRequestInput(
        createTodoListItemParamSchema,
        await params,
        RequestInputType.RouteParam,
      ),
      // TODO: this swallows repeated parameters
      query: undefined,
      body: parseRequestInput(
        createTodoListItemBodySchema,
        await request.json(),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const responder = {
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const {status, body} = await implementation(input, responder, request)
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, {status})
      : new Response(undefined, {status})
  }
