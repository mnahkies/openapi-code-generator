/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_CreateTodoListItemBodySchema,
  t_CreateTodoListItemParamSchema,
  t_GetTodoListItemsParamSchema,
} from "../../../models"
import {
  OpenAPIRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-nextjs-runtime/errors"
import {
  OpenAPIRuntimeResponder,
  OpenAPIRuntimeResponse,
  Params,
  StatusCode,
  StatusCode5xx,
} from "@nahkies/typescript-nextjs-runtime/server"
import {parseRequestInput} from "@nahkies/typescript-nextjs-runtime/zod"
import {NextRequest} from "next/server"
import {z} from "zod"

// /list/{listId}/items
export type GetTodoListItemsResponder = {
  with200(): OpenAPIRuntimeResponse<{
    completedAt?: string
    content: string
    createdAt: string
    id: string
  }>
  withStatusCode5xx(status: StatusCode5xx): OpenAPIRuntimeResponse<{
    code: string
    message: string
  }>
} & OpenAPIRuntimeResponder

export type GetTodoListItems = (
  params: Params<t_GetTodoListItemsParamSchema, void, void, void>,
  respond: GetTodoListItemsResponder,
  request: NextRequest,
) => Promise<OpenAPIRuntimeResponse<unknown>>

export type CreateTodoListItemResponder = {
  with204(): OpenAPIRuntimeResponse<void>
} & OpenAPIRuntimeResponder

export type CreateTodoListItem = (
  params: Params<
    t_CreateTodoListItemParamSchema,
    void,
    t_CreateTodoListItemBodySchema,
    void
  >,
  respond: CreateTodoListItemResponder,
  request: NextRequest,
) => Promise<OpenAPIRuntimeResponse<unknown>>

const getTodoListItemsParamSchema = z.object({listId: z.string()})

export const _GET =
  (
    implementation: GetTodoListItems,
    onError: (err: unknown) => Promise<Response>,
  ) =>
  async (
    request: NextRequest,
    {params}: {params: Promise<unknown>},
  ): Promise<Response> => {
    try {
      const input = {
        params: parseRequestInput(
          getTodoListItemsParamSchema,
          await params,
          RequestInputType.RouteParam,
        ),
        // TODO: this swallows repeated parameters
        query: undefined,
        body: undefined,
        headers: undefined,
      }

      const responder = {
        with200() {
          return new OpenAPIRuntimeResponse<{
            completedAt?: string
            content: string
            createdAt: string
            id: string
          }>(200)
        },
        withStatusCode5xx(status: StatusCode5xx) {
          return new OpenAPIRuntimeResponse<{
            code: string
            message: string
          }>(status)
        },
        withStatus(status: StatusCode) {
          return new OpenAPIRuntimeResponse(status)
        },
      }

      const {status, body} = await implementation(input, responder, request)
        .then((it) => it.unpack())
        .catch((err) => {
          throw OpenAPIRuntimeError.HandlerError(err)
        })

      return body !== undefined
        ? Response.json(body, {status})
        : new Response(undefined, {status})
    } catch (err) {
      return await onError(err)
    }
  }

const createTodoListItemParamSchema = z.object({listId: z.string()})

const createTodoListItemBodySchema = z.object({
  id: z.string(),
  content: z.string(),
  completedAt: z.string().datetime({offset: true}).optional(),
})

export const _POST =
  (
    implementation: CreateTodoListItem,
    onError: (err: unknown) => Promise<Response>,
  ) =>
  async (
    request: NextRequest,
    {params}: {params: Promise<unknown>},
  ): Promise<Response> => {
    try {
      const input = {
        params: parseRequestInput(
          createTodoListItemParamSchema,
          await params,
          RequestInputType.RouteParam,
        ),
        // TODO: this swallows repeated parameters
        query: undefined,
        body: parseRequestInput(
          createTodoListItemBodySchema,
          await request.json(),
          RequestInputType.RequestBody,
        ),
        headers: undefined,
      }

      const responder = {
        with204() {
          return new OpenAPIRuntimeResponse<void>(204)
        },
        withStatus(status: StatusCode) {
          return new OpenAPIRuntimeResponse(status)
        },
      }

      const {status, body} = await implementation(input, responder, request)
        .then((it) => it.unpack())
        .catch((err) => {
          throw OpenAPIRuntimeError.HandlerError(err)
        })

      return body !== undefined
        ? Response.json(body, {status})
        : new Response(undefined, {status})
    } catch (err) {
      return await onError(err)
    }
  }
