/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_DeleteTodoListByIdParamSchema,
  t_Error,
  t_GetTodoListByIdParamSchema,
  t_TodoList,
  t_UpdateTodoListByIdBodySchema,
  t_UpdateTodoListByIdParamSchema,
} from "../../models"
import { s_CreateUpdateTodoList } from "../../schemas"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  StatusCode,
  StatusCode4xx,
} from "@nahkies/typescript-koa-runtime/server"
import { Params, parseRequestInput } from "@nahkies/typescript-koa-runtime/zod"
import { NextRequest } from "next/server"
import { z } from "zod"

export type GetTodoListByIdResponder = {
  with200(): KoaRuntimeResponse<t_TodoList>
  withStatusCode4xx(status: StatusCode4xx): KoaRuntimeResponse<t_Error>
  withDefault(status: StatusCode): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type GetTodoListById = (
  params: Params<t_GetTodoListByIdParamSchema, void, void, void>,
  respond: GetTodoListByIdResponder,
  ctx: { request: NextRequest },
) => Promise<KoaRuntimeResponse<unknown>>

export type UpdateTodoListByIdResponder = {
  with200(): KoaRuntimeResponse<t_TodoList>
  withStatusCode4xx(status: StatusCode4xx): KoaRuntimeResponse<t_Error>
  withDefault(status: StatusCode): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type UpdateTodoListById = (
  params: Params<
    t_UpdateTodoListByIdParamSchema,
    void,
    t_UpdateTodoListByIdBodySchema,
    void
  >,
  respond: UpdateTodoListByIdResponder,
  ctx: { request: NextRequest },
) => Promise<KoaRuntimeResponse<unknown>>

export type DeleteTodoListByIdResponder = {
  with204(): KoaRuntimeResponse<void>
  withStatusCode4xx(status: StatusCode4xx): KoaRuntimeResponse<t_Error>
  withDefault(status: StatusCode): KoaRuntimeResponse<void>
} & KoaRuntimeResponder

export type DeleteTodoListById = (
  params: Params<t_DeleteTodoListByIdParamSchema, void, void, void>,
  respond: DeleteTodoListByIdResponder,
  ctx: { request: NextRequest },
) => Promise<KoaRuntimeResponse<unknown>>

const getTodoListByIdParamSchema = z.object({ listId: z.string() })

export const _GET =
  (implementation: GetTodoListById) =>
  async (
    request: NextRequest,
    { params }: { params: unknown },
  ): Promise<Response> => {
    const input = {
      params: parseRequestInput(
        getTodoListByIdParamSchema,
        params,
        RequestInputType.RouteParam,
      ),
      // TODO: this swallows repeated parameters
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_TodoList>(200)
      },
      withStatusCode4xx(status: StatusCode4xx) {
        return new KoaRuntimeResponse<t_Error>(status)
      },
      withDefault(status: StatusCode) {
        return new KoaRuntimeResponse<void>(status)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const { status, body } = await implementation(input, responder, { request })
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, { status })
      : new Response(undefined, { status })
  }

const updateTodoListByIdParamSchema = z.object({ listId: z.string() })

const updateTodoListByIdBodySchema = s_CreateUpdateTodoList

export const _PUT =
  (implementation: UpdateTodoListById) =>
  async (
    request: NextRequest,
    { params }: { params: unknown },
  ): Promise<Response> => {
    const input = {
      params: parseRequestInput(
        updateTodoListByIdParamSchema,
        params,
        RequestInputType.RouteParam,
      ),
      // TODO: this swallows repeated parameters
      query: undefined,
      body: parseRequestInput(
        updateTodoListByIdBodySchema,
        await request.json(),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_TodoList>(200)
      },
      withStatusCode4xx(status: StatusCode4xx) {
        return new KoaRuntimeResponse<t_Error>(status)
      },
      withDefault(status: StatusCode) {
        return new KoaRuntimeResponse<void>(status)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const { status, body } = await implementation(input, responder, { request })
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, { status })
      : new Response(undefined, { status })
  }

const deleteTodoListByIdParamSchema = z.object({ listId: z.string() })

export const _DELETE =
  (implementation: DeleteTodoListById) =>
  async (
    request: NextRequest,
    { params }: { params: unknown },
  ): Promise<Response> => {
    const input = {
      params: parseRequestInput(
        deleteTodoListByIdParamSchema,
        params,
        RequestInputType.RouteParam,
      ),
      // TODO: this swallows repeated parameters
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with204() {
        return new KoaRuntimeResponse<void>(204)
      },
      withStatusCode4xx(status: StatusCode4xx) {
        return new KoaRuntimeResponse<t_Error>(status)
      },
      withDefault(status: StatusCode) {
        return new KoaRuntimeResponse<void>(status)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const { status, body } = await implementation(input, responder, { request })
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, { status })
      : new Response(undefined, { status })
  }
