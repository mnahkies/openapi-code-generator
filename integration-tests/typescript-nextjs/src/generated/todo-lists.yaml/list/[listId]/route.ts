/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_DeleteTodoListByIdParamSchema,
  t_Error,
  t_GetTodoListByIdParamSchema,
  t_TodoList,
  t_UpdateTodoListByIdBodySchema,
  t_UpdateTodoListByIdParamSchema,
} from "../../models"
import {s_CreateUpdateTodoList} from "../../schemas"
import {
  OpenAPIRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-nextjs-runtime/errors"
import {
  OpenAPIRuntimeResponder,
  OpenAPIRuntimeResponse,
  Params,
  StatusCode,
  StatusCode4xx,
} from "@nahkies/typescript-nextjs-runtime/server"
import {parseRequestInput} from "@nahkies/typescript-nextjs-runtime/zod"
import {NextRequest} from "next/server"
import {z} from "zod"

// /list/{listId}
export type GetTodoListByIdResponder = {
  with200(): OpenAPIRuntimeResponse<t_TodoList>
  withStatusCode4xx(status: StatusCode4xx): OpenAPIRuntimeResponse<t_Error>
  withDefault(status: StatusCode): OpenAPIRuntimeResponse<void>
} & OpenAPIRuntimeResponder

export type GetTodoListById = (
  params: Params<t_GetTodoListByIdParamSchema, void, void, void>,
  respond: GetTodoListByIdResponder,
  request: NextRequest,
) => Promise<OpenAPIRuntimeResponse<unknown>>

export type UpdateTodoListByIdResponder = {
  with200(): OpenAPIRuntimeResponse<t_TodoList>
  withStatusCode4xx(status: StatusCode4xx): OpenAPIRuntimeResponse<t_Error>
  withDefault(status: StatusCode): OpenAPIRuntimeResponse<void>
} & OpenAPIRuntimeResponder

export type UpdateTodoListById = (
  params: Params<
    t_UpdateTodoListByIdParamSchema,
    void,
    t_UpdateTodoListByIdBodySchema,
    void
  >,
  respond: UpdateTodoListByIdResponder,
  request: NextRequest,
) => Promise<OpenAPIRuntimeResponse<unknown>>

export type DeleteTodoListByIdResponder = {
  with204(): OpenAPIRuntimeResponse<void>
  withStatusCode4xx(status: StatusCode4xx): OpenAPIRuntimeResponse<t_Error>
  withDefault(status: StatusCode): OpenAPIRuntimeResponse<void>
} & OpenAPIRuntimeResponder

export type DeleteTodoListById = (
  params: Params<t_DeleteTodoListByIdParamSchema, void, void, void>,
  respond: DeleteTodoListByIdResponder,
  request: NextRequest,
) => Promise<OpenAPIRuntimeResponse<unknown>>

const getTodoListByIdParamSchema = z.object({listId: z.string()})

export const _GET =
  (implementation: GetTodoListById) =>
  async (
    request: NextRequest,
    {params}: {params: Promise<unknown>},
  ): Promise<Response> => {
    const input = {
      params: parseRequestInput(
        getTodoListByIdParamSchema,
        await params,
        RequestInputType.RouteParam,
      ),
      // TODO: this swallows repeated parameters
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with200() {
        return new OpenAPIRuntimeResponse<t_TodoList>(200)
      },
      withStatusCode4xx(status: StatusCode4xx) {
        return new OpenAPIRuntimeResponse<t_Error>(status)
      },
      withDefault(status: StatusCode) {
        return new OpenAPIRuntimeResponse<void>(status)
      },
      withStatus(status: StatusCode) {
        return new OpenAPIRuntimeResponse(status)
      },
    }

    const {status, body} = await implementation(input, responder, request)
      .then((it) => it.unpack())
      .catch((err) => {
        throw OpenAPIRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, {status})
      : new Response(undefined, {status})
  }

const updateTodoListByIdParamSchema = z.object({listId: z.string()})

const updateTodoListByIdBodySchema = s_CreateUpdateTodoList

export const _PUT =
  (implementation: UpdateTodoListById) =>
  async (
    request: NextRequest,
    {params}: {params: Promise<unknown>},
  ): Promise<Response> => {
    const input = {
      params: parseRequestInput(
        updateTodoListByIdParamSchema,
        await params,
        RequestInputType.RouteParam,
      ),
      // TODO: this swallows repeated parameters
      query: undefined,
      body: parseRequestInput(
        updateTodoListByIdBodySchema,
        await request.json(),
        RequestInputType.RequestBody,
      ),
      headers: undefined,
    }

    const responder = {
      with200() {
        return new OpenAPIRuntimeResponse<t_TodoList>(200)
      },
      withStatusCode4xx(status: StatusCode4xx) {
        return new OpenAPIRuntimeResponse<t_Error>(status)
      },
      withDefault(status: StatusCode) {
        return new OpenAPIRuntimeResponse<void>(status)
      },
      withStatus(status: StatusCode) {
        return new OpenAPIRuntimeResponse(status)
      },
    }

    const {status, body} = await implementation(input, responder, request)
      .then((it) => it.unpack())
      .catch((err) => {
        throw OpenAPIRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, {status})
      : new Response(undefined, {status})
  }

const deleteTodoListByIdParamSchema = z.object({listId: z.string()})

export const _DELETE =
  (implementation: DeleteTodoListById) =>
  async (
    request: NextRequest,
    {params}: {params: Promise<unknown>},
  ): Promise<Response> => {
    const input = {
      params: parseRequestInput(
        deleteTodoListByIdParamSchema,
        await params,
        RequestInputType.RouteParam,
      ),
      // TODO: this swallows repeated parameters
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with204() {
        return new OpenAPIRuntimeResponse<void>(204)
      },
      withStatusCode4xx(status: StatusCode4xx) {
        return new OpenAPIRuntimeResponse<t_Error>(status)
      },
      withDefault(status: StatusCode) {
        return new OpenAPIRuntimeResponse<void>(status)
      },
      withStatus(status: StatusCode) {
        return new OpenAPIRuntimeResponse(status)
      },
    }

    const {status, body} = await implementation(input, responder, request)
      .then((it) => it.unpack())
      .catch((err) => {
        throw OpenAPIRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, {status})
      : new Response(undefined, {status})
  }
