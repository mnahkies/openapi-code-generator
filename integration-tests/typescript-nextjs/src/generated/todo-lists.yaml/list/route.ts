/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import { t_GetTodoListsQuerySchema, t_TodoList } from "../models"
import { s_Statuses } from "../schemas"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  StatusCode,
} from "@nahkies/typescript-koa-runtime/server"
import { Params, parseRequestInput } from "@nahkies/typescript-koa-runtime/zod"
import { NextRequest } from "next/server"
import { z } from "zod"

export type GetTodoListsResponder = {
  with200(): KoaRuntimeResponse<t_TodoList[]>
} & KoaRuntimeResponder

export type GetTodoLists = (
  params: Params<void, t_GetTodoListsQuerySchema, void, void>,
  respond: GetTodoListsResponder,
  ctx: { request: NextRequest },
) => Promise<KoaRuntimeResponse<unknown>>

const getTodoListsQuerySchema = z.object({
  created: z.string().datetime({ offset: true }).optional(),
  statuses: z
    .preprocess(
      (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
      s_Statuses,
    )
    .optional(),
  tags: z
    .preprocess(
      (it: unknown) => (Array.isArray(it) || it === undefined ? it : [it]),
      z.array(z.string()),
    )
    .optional(),
})

export const _GET =
  (implementation: GetTodoLists) =>
  async (
    request: NextRequest,
    { params }: { params: unknown },
  ): Promise<Response> => {
    const input = {
      params: undefined,
      // TODO: this swallows repeated parameters
      query: parseRequestInput(
        getTodoListsQuerySchema,
        Object.fromEntries(request.nextUrl.searchParams.entries()),
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_TodoList[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const { status, body } = await implementation(input, responder, { request })
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, { status })
      : new Response(undefined, { status })
  }
