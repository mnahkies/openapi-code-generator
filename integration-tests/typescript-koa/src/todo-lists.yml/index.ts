/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import {
  DeleteTodoListByIdParamSchema,
  GetTodoListByIdParamSchema,
  UpdateTodoListByIdBodySchema,
  UpdateTodoListByIdParamSchema,
} from "./models"
import joi from "@hapi/joi"
import cors from "@koa/cors"
import KoaRouter from "@koa/router"
import Koa, { Context, Middleware, Next } from "koa"
import koaBody from "koa-body"

//region safe-edit-region-header
//endregion safe-edit-region-header

function paramValidationFactory<Type>(
  schema: joi.Schema
): Middleware<{ params: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.validate(ctx.params, { stripUnknown: true })

    if (result.error) {
      throw new Error("validation error")
    }

    ctx.state.params = result.value

    return next()
  }
}

function queryValidationFactory<Type>(
  schema: joi.Schema
): Middleware<{ query: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.validate(ctx.query, { stripUnknown: true })

    if (result.error) {
      throw new Error("validation error")
    }

    ctx.state.query = result.value

    return next()
  }
}

function bodyValidationFactory<Type>(
  schema: joi.Schema
): Middleware<{ body: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.validate(ctx.request.body, { stripUnknown: true })

    if (result.error) {
      throw new Error("validation error")
    }

    ctx.state.body = result.value

    return next()
  }
}

interface ValidatedCtx<Params, Query, Body> extends Context {
  state: { params: Params; query: Query; body: Body }
}

const PORT = 3000

// ApiClient
const server = new Koa()

server.use(cors())
server.use(koaBody())

const router = new KoaRouter()

const getTodoListByIdParamSchema = joi
  .object()
  .keys({ listId: joi.string().required() })
  .required()

router.get(
  "getTodoListById",
  "/list/:listId",
  paramValidationFactory<GetTodoListByIdParamSchema>(
    getTodoListByIdParamSchema
  ),
  async (
    ctx: ValidatedCtx<GetTodoListByIdParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-getTodoListById

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-getTodoListById
  }
)

const updateTodoListByIdParamSchema = joi
  .object()
  .keys({ listId: joi.string().required() })
  .required()

const updateTodoListByIdBodySchema = joi
  .object()
  .keys({ name: joi.string().required() })
  .required()

router.put(
  "updateTodoListById",
  "/list/:listId",
  paramValidationFactory<UpdateTodoListByIdParamSchema>(
    updateTodoListByIdParamSchema
  ),
  bodyValidationFactory<UpdateTodoListByIdBodySchema>(
    updateTodoListByIdBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      UpdateTodoListByIdParamSchema,
      void,
      UpdateTodoListByIdBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-updateTodoListById

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-updateTodoListById
  }
)

const deleteTodoListByIdParamSchema = joi
  .object()
  .keys({ listId: joi.string().required() })
  .required()

router.delete(
  "deleteTodoListById",
  "/list/:listId",
  paramValidationFactory<DeleteTodoListByIdParamSchema>(
    deleteTodoListByIdParamSchema
  ),
  async (
    ctx: ValidatedCtx<DeleteTodoListByIdParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-deleteTodoListById

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-deleteTodoListById
  }
)

server.use(router.allowedMethods())
server.use(router.routes())

server.listen(PORT, () => {
  console.info("server listening", { port: PORT })
})
