/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import {
  t_DeleteTodoListByIdParamSchema,
  t_Error,
  t_GetTodoListByIdParamSchema,
  t_GetTodoListsQuerySchema,
  t_TodoList,
  t_UpdateTodoListByIdBodySchema,
  t_UpdateTodoListByIdParamSchema,
} from "./models"
import KoaRouter from "@koa/router"
import {
  Response,
  ServerConfig,
  StatusCode,
  StatusCode2xx,
  StatusCode3xx,
  StatusCode4xx,
  StatusCode5xx,
  startServer,
} from "@nahkies/typescript-koa-runtime/server"
import {
  Params,
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import { Context } from "koa"
import { z } from "zod"

//region safe-edit-region-header
//endregion safe-edit-region-header

export type GetTodoLists = (
  params: Params<void, t_GetTodoListsQuerySchema, void>,
  ctx: Context
) => Promise<Response<200, t_TodoList[]>>

export type GetTodoListById = (
  params: Params<t_GetTodoListByIdParamSchema, void, void>,
  ctx: Context
) => Promise<
  | Response<200, t_TodoList>
  | Response<StatusCode4xx, t_Error>
  | Response<StatusCode, void>
>

export type UpdateTodoListById = (
  params: Params<
    t_UpdateTodoListByIdParamSchema,
    void,
    t_UpdateTodoListByIdBodySchema
  >,
  ctx: Context
) => Promise<
  | Response<200, t_TodoList>
  | Response<StatusCode4xx, t_Error>
  | Response<StatusCode, void>
>

export type DeleteTodoListById = (
  params: Params<t_DeleteTodoListByIdParamSchema, void, void>,
  ctx: Context
) => Promise<
  | Response<204, void>
  | Response<StatusCode4xx, t_Error>
  | Response<StatusCode, void>
>

export type Implementation = {
  getTodoLists: GetTodoLists
  getTodoListById: GetTodoListById
  updateTodoListById: UpdateTodoListById
  deleteTodoListById: DeleteTodoListById
}

export function bootstrap(
  implementation: Implementation,
  config: Omit<ServerConfig, "router">
) {
  // ApiClient
  const router = new KoaRouter()

  const getTodoListsQuerySchema = z.object({
    created: z.coerce.string().datetime({ offset: true }).optional(),
    status: z.enum(["incomplete", "complete"]).optional(),
  })

  router.get("getTodoLists", "/list", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getTodoListsQuerySchema, ctx.query),
      body: undefined,
    }

    const { status, body } = await implementation.getTodoLists(input, ctx)

    ctx.body = responseValidationFactory(
      [
        [
          "200",
          z.array(
            z.object({
              id: z.coerce.string(),
              name: z.coerce.string(),
              totalItemCount: z.coerce.number(),
              incompleteItemCount: z.coerce.number(),
              created: z.coerce.string().datetime({ offset: true }),
              updated: z.coerce.string().datetime({ offset: true }),
            })
          ),
        ],
      ],
      undefined
    )(status, body)
    ctx.status = status
    return next()
  })

  const getTodoListByIdParamSchema = z.object({ listId: z.coerce.string() })

  router.get("getTodoListById", "/list/:listId", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getTodoListByIdParamSchema, ctx.params),
      query: undefined,
      body: undefined,
    }

    const { status, body } = await implementation.getTodoListById(input, ctx)

    ctx.body = responseValidationFactory(
      [
        [
          "200",
          z.object({
            id: z.coerce.string(),
            name: z.coerce.string(),
            totalItemCount: z.coerce.number(),
            incompleteItemCount: z.coerce.number(),
            created: z.coerce.string().datetime({ offset: true }),
            updated: z.coerce.string().datetime({ offset: true }),
          }),
        ],
        [
          "4XX",
          z.object({
            message: z.coerce.string().optional(),
            code: z.coerce.number().optional(),
          }),
        ],
      ],
      z.void()
    )(status, body)
    ctx.status = status
    return next()
  })

  const updateTodoListByIdParamSchema = z.object({ listId: z.coerce.string() })

  const updateTodoListByIdBodySchema = z.object({ name: z.coerce.string() })

  router.put("updateTodoListById", "/list/:listId", async (ctx, next) => {
    const input = {
      params: parseRequestInput(updateTodoListByIdParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(updateTodoListByIdBodySchema, ctx.body),
    }

    const { status, body } = await implementation.updateTodoListById(input, ctx)

    ctx.body = responseValidationFactory(
      [
        [
          "200",
          z.object({
            id: z.coerce.string(),
            name: z.coerce.string(),
            totalItemCount: z.coerce.number(),
            incompleteItemCount: z.coerce.number(),
            created: z.coerce.string().datetime({ offset: true }),
            updated: z.coerce.string().datetime({ offset: true }),
          }),
        ],
        [
          "4XX",
          z.object({
            message: z.coerce.string().optional(),
            code: z.coerce.number().optional(),
          }),
        ],
      ],
      z.void()
    )(status, body)
    ctx.status = status
    return next()
  })

  const deleteTodoListByIdParamSchema = z.object({ listId: z.coerce.string() })

  router.delete("deleteTodoListById", "/list/:listId", async (ctx, next) => {
    const input = {
      params: parseRequestInput(deleteTodoListByIdParamSchema, ctx.params),
      query: undefined,
      body: undefined,
    }

    const { status, body } = await implementation.deleteTodoListById(input, ctx)

    ctx.body = responseValidationFactory(
      [
        ["204", z.void()],
        [
          "4XX",
          z.object({
            message: z.coerce.string().optional(),
            code: z.coerce.number().optional(),
          }),
        ],
      ],
      z.void()
    )(status, body)
    ctx.status = status
    return next()
  })

  return startServer({
    middleware: [],
    router,
    port: config.port,
  })
}
