/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import {
  t_DeleteTodoListByIdParamSchema,
  t_GetTodoListByIdParamSchema,
  t_GetTodoListsQuerySchema,
  t_UpdateTodoListByIdBodySchema,
  t_UpdateTodoListByIdParamSchema,
} from "./models"
import KoaRouter from "@koa/router"
import {
  ServerConfig,
  startServer,
} from "@nahkies/typescript-koa-runtime/server"
import { parseRequestInput } from "@nahkies/typescript-koa-runtime/zod"
import { Context, Next } from "koa"
import { z } from "zod"

//region safe-edit-region-header
//endregion safe-edit-region-header

type Params<Params, Query, Body> = { params: Params; query: Query; body: Body }

interface ValidatedCtx<Params, Query, Body> extends Context {
  state: { params: Params; query: Query; body: Body }
}

export type GetTodoLists = (
  params: Params<void, t_GetTodoListsQuerySchema, void>,
  ctx: Context
) => Promise<{ status: number; body: any }>

export type GetTodoListById = (
  params: Params<t_GetTodoListByIdParamSchema, void, void>,
  ctx: Context
) => Promise<{ status: number; body: any }>

export type UpdateTodoListById = (
  params: Params<
    t_UpdateTodoListByIdParamSchema,
    void,
    t_UpdateTodoListByIdBodySchema
  >,
  ctx: Context
) => Promise<{ status: number; body: any }>

export type DeleteTodoListById = (
  params: Params<t_DeleteTodoListByIdParamSchema, void, void>,
  ctx: Context
) => Promise<{ status: number; body: any }>

export type Implementation = {
  getTodoLists: GetTodoLists
  getTodoListById: GetTodoListById
  updateTodoListById: UpdateTodoListById
  deleteTodoListById: DeleteTodoListById
}

export function bootstrap(
  implementation: Implementation,
  config: Omit<ServerConfig, "router">
) {
  // ApiClient
  const router = new KoaRouter()

  const getTodoListsQuerySchema = z.object({
    created: z.coerce.string().datetime({ offset: true }).optional(),
    status: z.enum(["incomplete", "complete"]).optional(),
  })

  router.get(
    "getTodoLists",
    "/list",
    async (
      ctx: ValidatedCtx<void, t_GetTodoListsQuerySchema, void>,
      next: Next
    ) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getTodoListsQuerySchema, ctx.query),
        body: undefined,
      }

      const { status, body } = await implementation.getTodoLists(input, ctx)
      ctx.status = status
      ctx.body = body
      return next()
    }
  )

  const getTodoListByIdParamSchema = z.object({ listId: z.coerce.string() })

  router.get(
    "getTodoListById",
    "/list/:listId",
    async (
      ctx: ValidatedCtx<t_GetTodoListByIdParamSchema, void, void>,
      next: Next
    ) => {
      const input = {
        params: parseRequestInput(getTodoListByIdParamSchema, ctx.params),
        query: undefined,
        body: undefined,
      }

      const { status, body } = await implementation.getTodoListById(input, ctx)
      ctx.status = status
      ctx.body = body
      return next()
    }
  )

  const updateTodoListByIdParamSchema = z.object({ listId: z.coerce.string() })

  const updateTodoListByIdBodySchema = z.object({ name: z.coerce.string() })

  router.put(
    "updateTodoListById",
    "/list/:listId",
    async (
      ctx: ValidatedCtx<
        t_UpdateTodoListByIdParamSchema,
        void,
        t_UpdateTodoListByIdBodySchema
      >,
      next: Next
    ) => {
      const input = {
        params: parseRequestInput(updateTodoListByIdParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(updateTodoListByIdBodySchema, ctx.body),
      }

      const { status, body } = await implementation.updateTodoListById(
        input,
        ctx
      )
      ctx.status = status
      ctx.body = body
      return next()
    }
  )

  const deleteTodoListByIdParamSchema = z.object({ listId: z.coerce.string() })

  router.delete(
    "deleteTodoListById",
    "/list/:listId",
    async (
      ctx: ValidatedCtx<t_DeleteTodoListByIdParamSchema, void, void>,
      next: Next
    ) => {
      const input = {
        params: parseRequestInput(deleteTodoListByIdParamSchema, ctx.params),
        query: undefined,
        body: undefined,
      }

      const { status, body } = await implementation.deleteTodoListById(
        input,
        ctx
      )
      ctx.status = status
      ctx.body = body
      return next()
    }
  )

  return startServer({
    middleware: [],
    router,
    port: config.port,
  })
}
