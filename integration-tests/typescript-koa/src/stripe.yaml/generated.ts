/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  EmptyObject,
  t_DeleteAccountsAccountBankAccountsIdBodySchema,
  t_DeleteAccountsAccountBankAccountsIdParamSchema,
  t_DeleteAccountsAccountBodySchema,
  t_DeleteAccountsAccountExternalAccountsIdBodySchema,
  t_DeleteAccountsAccountExternalAccountsIdParamSchema,
  t_DeleteAccountsAccountParamSchema,
  t_DeleteAccountsAccountPeoplePersonBodySchema,
  t_DeleteAccountsAccountPeoplePersonParamSchema,
  t_DeleteAccountsAccountPersonsPersonBodySchema,
  t_DeleteAccountsAccountPersonsPersonParamSchema,
  t_DeleteApplePayDomainsDomainBodySchema,
  t_DeleteApplePayDomainsDomainParamSchema,
  t_DeleteCouponsCouponBodySchema,
  t_DeleteCouponsCouponParamSchema,
  t_DeleteCustomersCustomerBankAccountsIdBodySchema,
  t_DeleteCustomersCustomerBankAccountsIdParamSchema,
  t_DeleteCustomersCustomerBodySchema,
  t_DeleteCustomersCustomerCardsIdBodySchema,
  t_DeleteCustomersCustomerCardsIdParamSchema,
  t_DeleteCustomersCustomerDiscountBodySchema,
  t_DeleteCustomersCustomerDiscountParamSchema,
  t_DeleteCustomersCustomerParamSchema,
  t_DeleteCustomersCustomerSourcesIdBodySchema,
  t_DeleteCustomersCustomerSourcesIdParamSchema,
  t_DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema,
  t_DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountBodySchema,
  t_DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamSchema,
  t_DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema,
  t_DeleteCustomersCustomerTaxIdsIdBodySchema,
  t_DeleteCustomersCustomerTaxIdsIdParamSchema,
  t_DeleteEphemeralKeysKeyBodySchema,
  t_DeleteEphemeralKeysKeyParamSchema,
  t_DeleteInvoiceitemsInvoiceitemBodySchema,
  t_DeleteInvoiceitemsInvoiceitemParamSchema,
  t_DeleteInvoicesInvoiceBodySchema,
  t_DeleteInvoicesInvoiceParamSchema,
  t_DeletePlansPlanBodySchema,
  t_DeletePlansPlanParamSchema,
  t_DeleteProductsIdBodySchema,
  t_DeleteProductsIdParamSchema,
  t_DeleteRadarValueListItemsItemBodySchema,
  t_DeleteRadarValueListItemsItemParamSchema,
  t_DeleteRadarValueListsValueListBodySchema,
  t_DeleteRadarValueListsValueListParamSchema,
  t_DeleteSubscriptionItemsItemBodySchema,
  t_DeleteSubscriptionItemsItemParamSchema,
  t_DeleteSubscriptionsSubscriptionExposedIdBodySchema,
  t_DeleteSubscriptionsSubscriptionExposedIdDiscountBodySchema,
  t_DeleteSubscriptionsSubscriptionExposedIdDiscountParamSchema,
  t_DeleteSubscriptionsSubscriptionExposedIdParamSchema,
  t_DeleteTerminalConfigurationsConfigurationBodySchema,
  t_DeleteTerminalConfigurationsConfigurationParamSchema,
  t_DeleteTerminalLocationsLocationBodySchema,
  t_DeleteTerminalLocationsLocationParamSchema,
  t_DeleteTerminalReadersReaderBodySchema,
  t_DeleteTerminalReadersReaderParamSchema,
  t_DeleteTestHelpersTestClocksTestClockBodySchema,
  t_DeleteTestHelpersTestClocksTestClockParamSchema,
  t_DeleteWebhookEndpointsWebhookEndpointBodySchema,
  t_DeleteWebhookEndpointsWebhookEndpointParamSchema,
  t_GetAccountBodySchema,
  t_GetAccountQuerySchema,
  t_GetAccountsAccountBankAccountsIdBodySchema,
  t_GetAccountsAccountBankAccountsIdParamSchema,
  t_GetAccountsAccountBankAccountsIdQuerySchema,
  t_GetAccountsAccountBodySchema,
  t_GetAccountsAccountCapabilitiesBodySchema,
  t_GetAccountsAccountCapabilitiesCapabilityBodySchema,
  t_GetAccountsAccountCapabilitiesCapabilityParamSchema,
  t_GetAccountsAccountCapabilitiesCapabilityQuerySchema,
  t_GetAccountsAccountCapabilitiesParamSchema,
  t_GetAccountsAccountCapabilitiesQuerySchema,
  t_GetAccountsAccountExternalAccountsBodySchema,
  t_GetAccountsAccountExternalAccountsIdBodySchema,
  t_GetAccountsAccountExternalAccountsIdParamSchema,
  t_GetAccountsAccountExternalAccountsIdQuerySchema,
  t_GetAccountsAccountExternalAccountsParamSchema,
  t_GetAccountsAccountExternalAccountsQuerySchema,
  t_GetAccountsAccountParamSchema,
  t_GetAccountsAccountPeopleBodySchema,
  t_GetAccountsAccountPeopleParamSchema,
  t_GetAccountsAccountPeoplePersonBodySchema,
  t_GetAccountsAccountPeoplePersonParamSchema,
  t_GetAccountsAccountPeoplePersonQuerySchema,
  t_GetAccountsAccountPeopleQuerySchema,
  t_GetAccountsAccountPersonsBodySchema,
  t_GetAccountsAccountPersonsParamSchema,
  t_GetAccountsAccountPersonsPersonBodySchema,
  t_GetAccountsAccountPersonsPersonParamSchema,
  t_GetAccountsAccountPersonsPersonQuerySchema,
  t_GetAccountsAccountPersonsQuerySchema,
  t_GetAccountsAccountQuerySchema,
  t_GetAccountsBodySchema,
  t_GetAccountsQuerySchema,
  t_GetApplePayDomainsBodySchema,
  t_GetApplePayDomainsDomainBodySchema,
  t_GetApplePayDomainsDomainParamSchema,
  t_GetApplePayDomainsDomainQuerySchema,
  t_GetApplePayDomainsQuerySchema,
  t_GetApplicationFeesBodySchema,
  t_GetApplicationFeesFeeRefundsIdBodySchema,
  t_GetApplicationFeesFeeRefundsIdParamSchema,
  t_GetApplicationFeesFeeRefundsIdQuerySchema,
  t_GetApplicationFeesIdBodySchema,
  t_GetApplicationFeesIdParamSchema,
  t_GetApplicationFeesIdQuerySchema,
  t_GetApplicationFeesIdRefundsBodySchema,
  t_GetApplicationFeesIdRefundsParamSchema,
  t_GetApplicationFeesIdRefundsQuerySchema,
  t_GetApplicationFeesQuerySchema,
  t_GetAppsSecretsBodySchema,
  t_GetAppsSecretsFindBodySchema,
  t_GetAppsSecretsFindQuerySchema,
  t_GetAppsSecretsQuerySchema,
  t_GetBalanceBodySchema,
  t_GetBalanceHistoryBodySchema,
  t_GetBalanceHistoryIdBodySchema,
  t_GetBalanceHistoryIdParamSchema,
  t_GetBalanceHistoryIdQuerySchema,
  t_GetBalanceHistoryQuerySchema,
  t_GetBalanceQuerySchema,
  t_GetBalanceTransactionsBodySchema,
  t_GetBalanceTransactionsIdBodySchema,
  t_GetBalanceTransactionsIdParamSchema,
  t_GetBalanceTransactionsIdQuerySchema,
  t_GetBalanceTransactionsQuerySchema,
  t_GetBillingPortalConfigurationsBodySchema,
  t_GetBillingPortalConfigurationsConfigurationBodySchema,
  t_GetBillingPortalConfigurationsConfigurationParamSchema,
  t_GetBillingPortalConfigurationsConfigurationQuerySchema,
  t_GetBillingPortalConfigurationsQuerySchema,
  t_GetChargesBodySchema,
  t_GetChargesChargeBodySchema,
  t_GetChargesChargeDisputeBodySchema,
  t_GetChargesChargeDisputeParamSchema,
  t_GetChargesChargeDisputeQuerySchema,
  t_GetChargesChargeParamSchema,
  t_GetChargesChargeQuerySchema,
  t_GetChargesChargeRefundsBodySchema,
  t_GetChargesChargeRefundsParamSchema,
  t_GetChargesChargeRefundsQuerySchema,
  t_GetChargesChargeRefundsRefundBodySchema,
  t_GetChargesChargeRefundsRefundParamSchema,
  t_GetChargesChargeRefundsRefundQuerySchema,
  t_GetChargesQuerySchema,
  t_GetChargesSearchBodySchema,
  t_GetChargesSearchQuerySchema,
  t_GetCheckoutSessionsBodySchema,
  t_GetCheckoutSessionsQuerySchema,
  t_GetCheckoutSessionsSessionBodySchema,
  t_GetCheckoutSessionsSessionLineItemsBodySchema,
  t_GetCheckoutSessionsSessionLineItemsParamSchema,
  t_GetCheckoutSessionsSessionLineItemsQuerySchema,
  t_GetCheckoutSessionsSessionParamSchema,
  t_GetCheckoutSessionsSessionQuerySchema,
  t_GetCountrySpecsBodySchema,
  t_GetCountrySpecsCountryBodySchema,
  t_GetCountrySpecsCountryParamSchema,
  t_GetCountrySpecsCountryQuerySchema,
  t_GetCountrySpecsQuerySchema,
  t_GetCouponsBodySchema,
  t_GetCouponsCouponBodySchema,
  t_GetCouponsCouponParamSchema,
  t_GetCouponsCouponQuerySchema,
  t_GetCouponsQuerySchema,
  t_GetCreditNotesBodySchema,
  t_GetCreditNotesCreditNoteLinesBodySchema,
  t_GetCreditNotesCreditNoteLinesParamSchema,
  t_GetCreditNotesCreditNoteLinesQuerySchema,
  t_GetCreditNotesIdBodySchema,
  t_GetCreditNotesIdParamSchema,
  t_GetCreditNotesIdQuerySchema,
  t_GetCreditNotesPreviewBodySchema,
  t_GetCreditNotesPreviewLinesBodySchema,
  t_GetCreditNotesPreviewLinesQuerySchema,
  t_GetCreditNotesPreviewQuerySchema,
  t_GetCreditNotesQuerySchema,
  t_GetCustomersBodySchema,
  t_GetCustomersCustomerBalanceTransactionsBodySchema,
  t_GetCustomersCustomerBalanceTransactionsParamSchema,
  t_GetCustomersCustomerBalanceTransactionsQuerySchema,
  t_GetCustomersCustomerBalanceTransactionsTransactionBodySchema,
  t_GetCustomersCustomerBalanceTransactionsTransactionParamSchema,
  t_GetCustomersCustomerBalanceTransactionsTransactionQuerySchema,
  t_GetCustomersCustomerBankAccountsBodySchema,
  t_GetCustomersCustomerBankAccountsIdBodySchema,
  t_GetCustomersCustomerBankAccountsIdParamSchema,
  t_GetCustomersCustomerBankAccountsIdQuerySchema,
  t_GetCustomersCustomerBankAccountsParamSchema,
  t_GetCustomersCustomerBankAccountsQuerySchema,
  t_GetCustomersCustomerBodySchema,
  t_GetCustomersCustomerCardsBodySchema,
  t_GetCustomersCustomerCardsIdBodySchema,
  t_GetCustomersCustomerCardsIdParamSchema,
  t_GetCustomersCustomerCardsIdQuerySchema,
  t_GetCustomersCustomerCardsParamSchema,
  t_GetCustomersCustomerCardsQuerySchema,
  t_GetCustomersCustomerCashBalanceBodySchema,
  t_GetCustomersCustomerCashBalanceParamSchema,
  t_GetCustomersCustomerCashBalanceQuerySchema,
  t_GetCustomersCustomerCashBalanceTransactionsBodySchema,
  t_GetCustomersCustomerCashBalanceTransactionsParamSchema,
  t_GetCustomersCustomerCashBalanceTransactionsQuerySchema,
  t_GetCustomersCustomerCashBalanceTransactionsTransactionBodySchema,
  t_GetCustomersCustomerCashBalanceTransactionsTransactionParamSchema,
  t_GetCustomersCustomerCashBalanceTransactionsTransactionQuerySchema,
  t_GetCustomersCustomerDiscountBodySchema,
  t_GetCustomersCustomerDiscountParamSchema,
  t_GetCustomersCustomerDiscountQuerySchema,
  t_GetCustomersCustomerParamSchema,
  t_GetCustomersCustomerPaymentMethodsBodySchema,
  t_GetCustomersCustomerPaymentMethodsParamSchema,
  t_GetCustomersCustomerPaymentMethodsPaymentMethodBodySchema,
  t_GetCustomersCustomerPaymentMethodsPaymentMethodParamSchema,
  t_GetCustomersCustomerPaymentMethodsPaymentMethodQuerySchema,
  t_GetCustomersCustomerPaymentMethodsQuerySchema,
  t_GetCustomersCustomerQuerySchema,
  t_GetCustomersCustomerSourcesBodySchema,
  t_GetCustomersCustomerSourcesIdBodySchema,
  t_GetCustomersCustomerSourcesIdParamSchema,
  t_GetCustomersCustomerSourcesIdQuerySchema,
  t_GetCustomersCustomerSourcesParamSchema,
  t_GetCustomersCustomerSourcesQuerySchema,
  t_GetCustomersCustomerSubscriptionsBodySchema,
  t_GetCustomersCustomerSubscriptionsParamSchema,
  t_GetCustomersCustomerSubscriptionsQuerySchema,
  t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema,
  t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountBodySchema,
  t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamSchema,
  t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountQuerySchema,
  t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema,
  t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdQuerySchema,
  t_GetCustomersCustomerTaxIdsBodySchema,
  t_GetCustomersCustomerTaxIdsIdBodySchema,
  t_GetCustomersCustomerTaxIdsIdParamSchema,
  t_GetCustomersCustomerTaxIdsIdQuerySchema,
  t_GetCustomersCustomerTaxIdsParamSchema,
  t_GetCustomersCustomerTaxIdsQuerySchema,
  t_GetCustomersQuerySchema,
  t_GetCustomersSearchBodySchema,
  t_GetCustomersSearchQuerySchema,
  t_GetDisputesBodySchema,
  t_GetDisputesDisputeBodySchema,
  t_GetDisputesDisputeParamSchema,
  t_GetDisputesDisputeQuerySchema,
  t_GetDisputesQuerySchema,
  t_GetEventsBodySchema,
  t_GetEventsIdBodySchema,
  t_GetEventsIdParamSchema,
  t_GetEventsIdQuerySchema,
  t_GetEventsQuerySchema,
  t_GetExchangeRatesBodySchema,
  t_GetExchangeRatesQuerySchema,
  t_GetExchangeRatesRateIdBodySchema,
  t_GetExchangeRatesRateIdParamSchema,
  t_GetExchangeRatesRateIdQuerySchema,
  t_GetFileLinksBodySchema,
  t_GetFileLinksLinkBodySchema,
  t_GetFileLinksLinkParamSchema,
  t_GetFileLinksLinkQuerySchema,
  t_GetFileLinksQuerySchema,
  t_GetFilesBodySchema,
  t_GetFilesFileBodySchema,
  t_GetFilesFileParamSchema,
  t_GetFilesFileQuerySchema,
  t_GetFilesQuerySchema,
  t_GetFinancialConnectionsAccountsAccountBodySchema,
  t_GetFinancialConnectionsAccountsAccountOwnersBodySchema,
  t_GetFinancialConnectionsAccountsAccountOwnersParamSchema,
  t_GetFinancialConnectionsAccountsAccountOwnersQuerySchema,
  t_GetFinancialConnectionsAccountsAccountParamSchema,
  t_GetFinancialConnectionsAccountsAccountQuerySchema,
  t_GetFinancialConnectionsAccountsBodySchema,
  t_GetFinancialConnectionsAccountsQuerySchema,
  t_GetFinancialConnectionsSessionsSessionBodySchema,
  t_GetFinancialConnectionsSessionsSessionParamSchema,
  t_GetFinancialConnectionsSessionsSessionQuerySchema,
  t_GetIdentityVerificationReportsBodySchema,
  t_GetIdentityVerificationReportsQuerySchema,
  t_GetIdentityVerificationReportsReportBodySchema,
  t_GetIdentityVerificationReportsReportParamSchema,
  t_GetIdentityVerificationReportsReportQuerySchema,
  t_GetIdentityVerificationSessionsBodySchema,
  t_GetIdentityVerificationSessionsQuerySchema,
  t_GetIdentityVerificationSessionsSessionBodySchema,
  t_GetIdentityVerificationSessionsSessionParamSchema,
  t_GetIdentityVerificationSessionsSessionQuerySchema,
  t_GetInvoiceitemsBodySchema,
  t_GetInvoiceitemsInvoiceitemBodySchema,
  t_GetInvoiceitemsInvoiceitemParamSchema,
  t_GetInvoiceitemsInvoiceitemQuerySchema,
  t_GetInvoiceitemsQuerySchema,
  t_GetInvoicesBodySchema,
  t_GetInvoicesInvoiceBodySchema,
  t_GetInvoicesInvoiceLinesBodySchema,
  t_GetInvoicesInvoiceLinesParamSchema,
  t_GetInvoicesInvoiceLinesQuerySchema,
  t_GetInvoicesInvoiceParamSchema,
  t_GetInvoicesInvoiceQuerySchema,
  t_GetInvoicesQuerySchema,
  t_GetInvoicesSearchBodySchema,
  t_GetInvoicesSearchQuerySchema,
  t_GetInvoicesUpcomingBodySchema,
  t_GetInvoicesUpcomingLinesBodySchema,
  t_GetInvoicesUpcomingLinesQuerySchema,
  t_GetInvoicesUpcomingQuerySchema,
  t_GetIssuingAuthorizationsAuthorizationBodySchema,
  t_GetIssuingAuthorizationsAuthorizationParamSchema,
  t_GetIssuingAuthorizationsAuthorizationQuerySchema,
  t_GetIssuingAuthorizationsBodySchema,
  t_GetIssuingAuthorizationsQuerySchema,
  t_GetIssuingCardholdersBodySchema,
  t_GetIssuingCardholdersCardholderBodySchema,
  t_GetIssuingCardholdersCardholderParamSchema,
  t_GetIssuingCardholdersCardholderQuerySchema,
  t_GetIssuingCardholdersQuerySchema,
  t_GetIssuingCardsBodySchema,
  t_GetIssuingCardsCardBodySchema,
  t_GetIssuingCardsCardParamSchema,
  t_GetIssuingCardsCardQuerySchema,
  t_GetIssuingCardsQuerySchema,
  t_GetIssuingDisputesBodySchema,
  t_GetIssuingDisputesDisputeBodySchema,
  t_GetIssuingDisputesDisputeParamSchema,
  t_GetIssuingDisputesDisputeQuerySchema,
  t_GetIssuingDisputesQuerySchema,
  t_GetIssuingSettlementsBodySchema,
  t_GetIssuingSettlementsQuerySchema,
  t_GetIssuingSettlementsSettlementBodySchema,
  t_GetIssuingSettlementsSettlementParamSchema,
  t_GetIssuingSettlementsSettlementQuerySchema,
  t_GetIssuingTransactionsBodySchema,
  t_GetIssuingTransactionsQuerySchema,
  t_GetIssuingTransactionsTransactionBodySchema,
  t_GetIssuingTransactionsTransactionParamSchema,
  t_GetIssuingTransactionsTransactionQuerySchema,
  t_GetLinkAccountSessionsSessionBodySchema,
  t_GetLinkAccountSessionsSessionParamSchema,
  t_GetLinkAccountSessionsSessionQuerySchema,
  t_GetLinkedAccountsAccountBodySchema,
  t_GetLinkedAccountsAccountOwnersBodySchema,
  t_GetLinkedAccountsAccountOwnersParamSchema,
  t_GetLinkedAccountsAccountOwnersQuerySchema,
  t_GetLinkedAccountsAccountParamSchema,
  t_GetLinkedAccountsAccountQuerySchema,
  t_GetLinkedAccountsBodySchema,
  t_GetLinkedAccountsQuerySchema,
  t_GetMandatesMandateBodySchema,
  t_GetMandatesMandateParamSchema,
  t_GetMandatesMandateQuerySchema,
  t_GetPaymentIntentsBodySchema,
  t_GetPaymentIntentsIntentBodySchema,
  t_GetPaymentIntentsIntentParamSchema,
  t_GetPaymentIntentsIntentQuerySchema,
  t_GetPaymentIntentsQuerySchema,
  t_GetPaymentIntentsSearchBodySchema,
  t_GetPaymentIntentsSearchQuerySchema,
  t_GetPaymentLinksBodySchema,
  t_GetPaymentLinksPaymentLinkBodySchema,
  t_GetPaymentLinksPaymentLinkLineItemsBodySchema,
  t_GetPaymentLinksPaymentLinkLineItemsParamSchema,
  t_GetPaymentLinksPaymentLinkLineItemsQuerySchema,
  t_GetPaymentLinksPaymentLinkParamSchema,
  t_GetPaymentLinksPaymentLinkQuerySchema,
  t_GetPaymentLinksQuerySchema,
  t_GetPaymentMethodConfigurationsBodySchema,
  t_GetPaymentMethodConfigurationsConfigurationBodySchema,
  t_GetPaymentMethodConfigurationsConfigurationParamSchema,
  t_GetPaymentMethodConfigurationsConfigurationQuerySchema,
  t_GetPaymentMethodConfigurationsQuerySchema,
  t_GetPaymentMethodDomainsBodySchema,
  t_GetPaymentMethodDomainsPaymentMethodDomainBodySchema,
  t_GetPaymentMethodDomainsPaymentMethodDomainParamSchema,
  t_GetPaymentMethodDomainsPaymentMethodDomainQuerySchema,
  t_GetPaymentMethodDomainsQuerySchema,
  t_GetPaymentMethodsBodySchema,
  t_GetPaymentMethodsPaymentMethodBodySchema,
  t_GetPaymentMethodsPaymentMethodParamSchema,
  t_GetPaymentMethodsPaymentMethodQuerySchema,
  t_GetPaymentMethodsQuerySchema,
  t_GetPayoutsBodySchema,
  t_GetPayoutsPayoutBodySchema,
  t_GetPayoutsPayoutParamSchema,
  t_GetPayoutsPayoutQuerySchema,
  t_GetPayoutsQuerySchema,
  t_GetPlansBodySchema,
  t_GetPlansPlanBodySchema,
  t_GetPlansPlanParamSchema,
  t_GetPlansPlanQuerySchema,
  t_GetPlansQuerySchema,
  t_GetPricesBodySchema,
  t_GetPricesPriceBodySchema,
  t_GetPricesPriceParamSchema,
  t_GetPricesPriceQuerySchema,
  t_GetPricesQuerySchema,
  t_GetPricesSearchBodySchema,
  t_GetPricesSearchQuerySchema,
  t_GetProductsBodySchema,
  t_GetProductsIdBodySchema,
  t_GetProductsIdParamSchema,
  t_GetProductsIdQuerySchema,
  t_GetProductsQuerySchema,
  t_GetProductsSearchBodySchema,
  t_GetProductsSearchQuerySchema,
  t_GetPromotionCodesBodySchema,
  t_GetPromotionCodesPromotionCodeBodySchema,
  t_GetPromotionCodesPromotionCodeParamSchema,
  t_GetPromotionCodesPromotionCodeQuerySchema,
  t_GetPromotionCodesQuerySchema,
  t_GetQuotesBodySchema,
  t_GetQuotesQuerySchema,
  t_GetQuotesQuoteBodySchema,
  t_GetQuotesQuoteComputedUpfrontLineItemsBodySchema,
  t_GetQuotesQuoteComputedUpfrontLineItemsParamSchema,
  t_GetQuotesQuoteComputedUpfrontLineItemsQuerySchema,
  t_GetQuotesQuoteLineItemsBodySchema,
  t_GetQuotesQuoteLineItemsParamSchema,
  t_GetQuotesQuoteLineItemsQuerySchema,
  t_GetQuotesQuoteParamSchema,
  t_GetQuotesQuotePdfBodySchema,
  t_GetQuotesQuotePdfParamSchema,
  t_GetQuotesQuotePdfQuerySchema,
  t_GetQuotesQuoteQuerySchema,
  t_GetRadarEarlyFraudWarningsBodySchema,
  t_GetRadarEarlyFraudWarningsEarlyFraudWarningBodySchema,
  t_GetRadarEarlyFraudWarningsEarlyFraudWarningParamSchema,
  t_GetRadarEarlyFraudWarningsEarlyFraudWarningQuerySchema,
  t_GetRadarEarlyFraudWarningsQuerySchema,
  t_GetRadarValueListItemsBodySchema,
  t_GetRadarValueListItemsItemBodySchema,
  t_GetRadarValueListItemsItemParamSchema,
  t_GetRadarValueListItemsItemQuerySchema,
  t_GetRadarValueListItemsQuerySchema,
  t_GetRadarValueListsBodySchema,
  t_GetRadarValueListsQuerySchema,
  t_GetRadarValueListsValueListBodySchema,
  t_GetRadarValueListsValueListParamSchema,
  t_GetRadarValueListsValueListQuerySchema,
  t_GetRefundsBodySchema,
  t_GetRefundsQuerySchema,
  t_GetRefundsRefundBodySchema,
  t_GetRefundsRefundParamSchema,
  t_GetRefundsRefundQuerySchema,
  t_GetReportingReportRunsBodySchema,
  t_GetReportingReportRunsQuerySchema,
  t_GetReportingReportRunsReportRunBodySchema,
  t_GetReportingReportRunsReportRunParamSchema,
  t_GetReportingReportRunsReportRunQuerySchema,
  t_GetReportingReportTypesBodySchema,
  t_GetReportingReportTypesQuerySchema,
  t_GetReportingReportTypesReportTypeBodySchema,
  t_GetReportingReportTypesReportTypeParamSchema,
  t_GetReportingReportTypesReportTypeQuerySchema,
  t_GetReviewsBodySchema,
  t_GetReviewsQuerySchema,
  t_GetReviewsReviewBodySchema,
  t_GetReviewsReviewParamSchema,
  t_GetReviewsReviewQuerySchema,
  t_GetSetupAttemptsBodySchema,
  t_GetSetupAttemptsQuerySchema,
  t_GetSetupIntentsBodySchema,
  t_GetSetupIntentsIntentBodySchema,
  t_GetSetupIntentsIntentParamSchema,
  t_GetSetupIntentsIntentQuerySchema,
  t_GetSetupIntentsQuerySchema,
  t_GetShippingRatesBodySchema,
  t_GetShippingRatesQuerySchema,
  t_GetShippingRatesShippingRateTokenBodySchema,
  t_GetShippingRatesShippingRateTokenParamSchema,
  t_GetShippingRatesShippingRateTokenQuerySchema,
  t_GetSigmaScheduledQueryRunsBodySchema,
  t_GetSigmaScheduledQueryRunsQuerySchema,
  t_GetSigmaScheduledQueryRunsScheduledQueryRunBodySchema,
  t_GetSigmaScheduledQueryRunsScheduledQueryRunParamSchema,
  t_GetSigmaScheduledQueryRunsScheduledQueryRunQuerySchema,
  t_GetSourcesSourceBodySchema,
  t_GetSourcesSourceMandateNotificationsMandateNotificationBodySchema,
  t_GetSourcesSourceMandateNotificationsMandateNotificationParamSchema,
  t_GetSourcesSourceMandateNotificationsMandateNotificationQuerySchema,
  t_GetSourcesSourceParamSchema,
  t_GetSourcesSourceQuerySchema,
  t_GetSourcesSourceSourceTransactionsBodySchema,
  t_GetSourcesSourceSourceTransactionsParamSchema,
  t_GetSourcesSourceSourceTransactionsQuerySchema,
  t_GetSourcesSourceSourceTransactionsSourceTransactionBodySchema,
  t_GetSourcesSourceSourceTransactionsSourceTransactionParamSchema,
  t_GetSourcesSourceSourceTransactionsSourceTransactionQuerySchema,
  t_GetSubscriptionItemsBodySchema,
  t_GetSubscriptionItemsItemBodySchema,
  t_GetSubscriptionItemsItemParamSchema,
  t_GetSubscriptionItemsItemQuerySchema,
  t_GetSubscriptionItemsQuerySchema,
  t_GetSubscriptionItemsSubscriptionItemUsageRecordSummariesBodySchema,
  t_GetSubscriptionItemsSubscriptionItemUsageRecordSummariesParamSchema,
  t_GetSubscriptionItemsSubscriptionItemUsageRecordSummariesQuerySchema,
  t_GetSubscriptionSchedulesBodySchema,
  t_GetSubscriptionSchedulesQuerySchema,
  t_GetSubscriptionSchedulesScheduleBodySchema,
  t_GetSubscriptionSchedulesScheduleParamSchema,
  t_GetSubscriptionSchedulesScheduleQuerySchema,
  t_GetSubscriptionsBodySchema,
  t_GetSubscriptionsQuerySchema,
  t_GetSubscriptionsSearchBodySchema,
  t_GetSubscriptionsSearchQuerySchema,
  t_GetSubscriptionsSubscriptionExposedIdBodySchema,
  t_GetSubscriptionsSubscriptionExposedIdParamSchema,
  t_GetSubscriptionsSubscriptionExposedIdQuerySchema,
  t_GetTaxCalculationsCalculationLineItemsBodySchema,
  t_GetTaxCalculationsCalculationLineItemsParamSchema,
  t_GetTaxCalculationsCalculationLineItemsQuerySchema,
  t_GetTaxCodesBodySchema,
  t_GetTaxCodesIdBodySchema,
  t_GetTaxCodesIdParamSchema,
  t_GetTaxCodesIdQuerySchema,
  t_GetTaxCodesQuerySchema,
  t_GetTaxRatesBodySchema,
  t_GetTaxRatesQuerySchema,
  t_GetTaxRatesTaxRateBodySchema,
  t_GetTaxRatesTaxRateParamSchema,
  t_GetTaxRatesTaxRateQuerySchema,
  t_GetTaxSettingsBodySchema,
  t_GetTaxSettingsQuerySchema,
  t_GetTaxTransactionsTransactionBodySchema,
  t_GetTaxTransactionsTransactionLineItemsBodySchema,
  t_GetTaxTransactionsTransactionLineItemsParamSchema,
  t_GetTaxTransactionsTransactionLineItemsQuerySchema,
  t_GetTaxTransactionsTransactionParamSchema,
  t_GetTaxTransactionsTransactionQuerySchema,
  t_GetTerminalConfigurationsBodySchema,
  t_GetTerminalConfigurationsConfigurationBodySchema,
  t_GetTerminalConfigurationsConfigurationParamSchema,
  t_GetTerminalConfigurationsConfigurationQuerySchema,
  t_GetTerminalConfigurationsQuerySchema,
  t_GetTerminalLocationsBodySchema,
  t_GetTerminalLocationsLocationBodySchema,
  t_GetTerminalLocationsLocationParamSchema,
  t_GetTerminalLocationsLocationQuerySchema,
  t_GetTerminalLocationsQuerySchema,
  t_GetTerminalReadersBodySchema,
  t_GetTerminalReadersQuerySchema,
  t_GetTerminalReadersReaderBodySchema,
  t_GetTerminalReadersReaderParamSchema,
  t_GetTerminalReadersReaderQuerySchema,
  t_GetTestHelpersTestClocksBodySchema,
  t_GetTestHelpersTestClocksQuerySchema,
  t_GetTestHelpersTestClocksTestClockBodySchema,
  t_GetTestHelpersTestClocksTestClockParamSchema,
  t_GetTestHelpersTestClocksTestClockQuerySchema,
  t_GetTokensTokenBodySchema,
  t_GetTokensTokenParamSchema,
  t_GetTokensTokenQuerySchema,
  t_GetTopupsBodySchema,
  t_GetTopupsQuerySchema,
  t_GetTopupsTopupBodySchema,
  t_GetTopupsTopupParamSchema,
  t_GetTopupsTopupQuerySchema,
  t_GetTransfersBodySchema,
  t_GetTransfersIdReversalsBodySchema,
  t_GetTransfersIdReversalsParamSchema,
  t_GetTransfersIdReversalsQuerySchema,
  t_GetTransfersQuerySchema,
  t_GetTransfersTransferBodySchema,
  t_GetTransfersTransferParamSchema,
  t_GetTransfersTransferQuerySchema,
  t_GetTransfersTransferReversalsIdBodySchema,
  t_GetTransfersTransferReversalsIdParamSchema,
  t_GetTransfersTransferReversalsIdQuerySchema,
  t_GetTreasuryCreditReversalsBodySchema,
  t_GetTreasuryCreditReversalsCreditReversalBodySchema,
  t_GetTreasuryCreditReversalsCreditReversalParamSchema,
  t_GetTreasuryCreditReversalsCreditReversalQuerySchema,
  t_GetTreasuryCreditReversalsQuerySchema,
  t_GetTreasuryDebitReversalsBodySchema,
  t_GetTreasuryDebitReversalsDebitReversalBodySchema,
  t_GetTreasuryDebitReversalsDebitReversalParamSchema,
  t_GetTreasuryDebitReversalsDebitReversalQuerySchema,
  t_GetTreasuryDebitReversalsQuerySchema,
  t_GetTreasuryFinancialAccountsBodySchema,
  t_GetTreasuryFinancialAccountsFinancialAccountBodySchema,
  t_GetTreasuryFinancialAccountsFinancialAccountFeaturesBodySchema,
  t_GetTreasuryFinancialAccountsFinancialAccountFeaturesParamSchema,
  t_GetTreasuryFinancialAccountsFinancialAccountFeaturesQuerySchema,
  t_GetTreasuryFinancialAccountsFinancialAccountParamSchema,
  t_GetTreasuryFinancialAccountsFinancialAccountQuerySchema,
  t_GetTreasuryFinancialAccountsQuerySchema,
  t_GetTreasuryInboundTransfersBodySchema,
  t_GetTreasuryInboundTransfersIdBodySchema,
  t_GetTreasuryInboundTransfersIdParamSchema,
  t_GetTreasuryInboundTransfersIdQuerySchema,
  t_GetTreasuryInboundTransfersQuerySchema,
  t_GetTreasuryOutboundPaymentsBodySchema,
  t_GetTreasuryOutboundPaymentsIdBodySchema,
  t_GetTreasuryOutboundPaymentsIdParamSchema,
  t_GetTreasuryOutboundPaymentsIdQuerySchema,
  t_GetTreasuryOutboundPaymentsQuerySchema,
  t_GetTreasuryOutboundTransfersBodySchema,
  t_GetTreasuryOutboundTransfersOutboundTransferBodySchema,
  t_GetTreasuryOutboundTransfersOutboundTransferParamSchema,
  t_GetTreasuryOutboundTransfersOutboundTransferQuerySchema,
  t_GetTreasuryOutboundTransfersQuerySchema,
  t_GetTreasuryReceivedCreditsBodySchema,
  t_GetTreasuryReceivedCreditsIdBodySchema,
  t_GetTreasuryReceivedCreditsIdParamSchema,
  t_GetTreasuryReceivedCreditsIdQuerySchema,
  t_GetTreasuryReceivedCreditsQuerySchema,
  t_GetTreasuryReceivedDebitsBodySchema,
  t_GetTreasuryReceivedDebitsIdBodySchema,
  t_GetTreasuryReceivedDebitsIdParamSchema,
  t_GetTreasuryReceivedDebitsIdQuerySchema,
  t_GetTreasuryReceivedDebitsQuerySchema,
  t_GetTreasuryTransactionEntriesBodySchema,
  t_GetTreasuryTransactionEntriesIdBodySchema,
  t_GetTreasuryTransactionEntriesIdParamSchema,
  t_GetTreasuryTransactionEntriesIdQuerySchema,
  t_GetTreasuryTransactionEntriesQuerySchema,
  t_GetTreasuryTransactionsBodySchema,
  t_GetTreasuryTransactionsIdBodySchema,
  t_GetTreasuryTransactionsIdParamSchema,
  t_GetTreasuryTransactionsIdQuerySchema,
  t_GetTreasuryTransactionsQuerySchema,
  t_GetWebhookEndpointsBodySchema,
  t_GetWebhookEndpointsQuerySchema,
  t_GetWebhookEndpointsWebhookEndpointBodySchema,
  t_GetWebhookEndpointsWebhookEndpointParamSchema,
  t_GetWebhookEndpointsWebhookEndpointQuerySchema,
  t_PostAccountLinksBodySchema,
  t_PostAccountSessionsBodySchema,
  t_PostAccountsAccountBankAccountsBodySchema,
  t_PostAccountsAccountBankAccountsIdBodySchema,
  t_PostAccountsAccountBankAccountsIdParamSchema,
  t_PostAccountsAccountBankAccountsParamSchema,
  t_PostAccountsAccountBodySchema,
  t_PostAccountsAccountCapabilitiesCapabilityBodySchema,
  t_PostAccountsAccountCapabilitiesCapabilityParamSchema,
  t_PostAccountsAccountExternalAccountsBodySchema,
  t_PostAccountsAccountExternalAccountsIdBodySchema,
  t_PostAccountsAccountExternalAccountsIdParamSchema,
  t_PostAccountsAccountExternalAccountsParamSchema,
  t_PostAccountsAccountLoginLinksBodySchema,
  t_PostAccountsAccountLoginLinksParamSchema,
  t_PostAccountsAccountParamSchema,
  t_PostAccountsAccountPeopleBodySchema,
  t_PostAccountsAccountPeopleParamSchema,
  t_PostAccountsAccountPeoplePersonBodySchema,
  t_PostAccountsAccountPeoplePersonParamSchema,
  t_PostAccountsAccountPersonsBodySchema,
  t_PostAccountsAccountPersonsParamSchema,
  t_PostAccountsAccountPersonsPersonBodySchema,
  t_PostAccountsAccountPersonsPersonParamSchema,
  t_PostAccountsAccountRejectBodySchema,
  t_PostAccountsAccountRejectParamSchema,
  t_PostAccountsBodySchema,
  t_PostApplePayDomainsBodySchema,
  t_PostApplicationFeesFeeRefundsIdBodySchema,
  t_PostApplicationFeesFeeRefundsIdParamSchema,
  t_PostApplicationFeesIdRefundBodySchema,
  t_PostApplicationFeesIdRefundParamSchema,
  t_PostApplicationFeesIdRefundsBodySchema,
  t_PostApplicationFeesIdRefundsParamSchema,
  t_PostAppsSecretsBodySchema,
  t_PostAppsSecretsDeleteBodySchema,
  t_PostBillingPortalConfigurationsBodySchema,
  t_PostBillingPortalConfigurationsConfigurationBodySchema,
  t_PostBillingPortalConfigurationsConfigurationParamSchema,
  t_PostBillingPortalSessionsBodySchema,
  t_PostChargesBodySchema,
  t_PostChargesChargeBodySchema,
  t_PostChargesChargeCaptureBodySchema,
  t_PostChargesChargeCaptureParamSchema,
  t_PostChargesChargeDisputeBodySchema,
  t_PostChargesChargeDisputeCloseBodySchema,
  t_PostChargesChargeDisputeCloseParamSchema,
  t_PostChargesChargeDisputeParamSchema,
  t_PostChargesChargeParamSchema,
  t_PostChargesChargeRefundBodySchema,
  t_PostChargesChargeRefundParamSchema,
  t_PostChargesChargeRefundsBodySchema,
  t_PostChargesChargeRefundsParamSchema,
  t_PostChargesChargeRefundsRefundBodySchema,
  t_PostChargesChargeRefundsRefundParamSchema,
  t_PostCheckoutSessionsBodySchema,
  t_PostCheckoutSessionsSessionExpireBodySchema,
  t_PostCheckoutSessionsSessionExpireParamSchema,
  t_PostCouponsBodySchema,
  t_PostCouponsCouponBodySchema,
  t_PostCouponsCouponParamSchema,
  t_PostCreditNotesBodySchema,
  t_PostCreditNotesIdBodySchema,
  t_PostCreditNotesIdParamSchema,
  t_PostCreditNotesIdVoidBodySchema,
  t_PostCreditNotesIdVoidParamSchema,
  t_PostCustomersBodySchema,
  t_PostCustomersCustomerBalanceTransactionsBodySchema,
  t_PostCustomersCustomerBalanceTransactionsParamSchema,
  t_PostCustomersCustomerBalanceTransactionsTransactionBodySchema,
  t_PostCustomersCustomerBalanceTransactionsTransactionParamSchema,
  t_PostCustomersCustomerBankAccountsBodySchema,
  t_PostCustomersCustomerBankAccountsIdBodySchema,
  t_PostCustomersCustomerBankAccountsIdParamSchema,
  t_PostCustomersCustomerBankAccountsIdVerifyBodySchema,
  t_PostCustomersCustomerBankAccountsIdVerifyParamSchema,
  t_PostCustomersCustomerBankAccountsParamSchema,
  t_PostCustomersCustomerBodySchema,
  t_PostCustomersCustomerCardsBodySchema,
  t_PostCustomersCustomerCardsIdBodySchema,
  t_PostCustomersCustomerCardsIdParamSchema,
  t_PostCustomersCustomerCardsParamSchema,
  t_PostCustomersCustomerCashBalanceBodySchema,
  t_PostCustomersCustomerCashBalanceParamSchema,
  t_PostCustomersCustomerFundingInstructionsBodySchema,
  t_PostCustomersCustomerFundingInstructionsParamSchema,
  t_PostCustomersCustomerParamSchema,
  t_PostCustomersCustomerSourcesBodySchema,
  t_PostCustomersCustomerSourcesIdBodySchema,
  t_PostCustomersCustomerSourcesIdParamSchema,
  t_PostCustomersCustomerSourcesIdVerifyBodySchema,
  t_PostCustomersCustomerSourcesIdVerifyParamSchema,
  t_PostCustomersCustomerSourcesParamSchema,
  t_PostCustomersCustomerSubscriptionsBodySchema,
  t_PostCustomersCustomerSubscriptionsParamSchema,
  t_PostCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema,
  t_PostCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema,
  t_PostCustomersCustomerTaxIdsBodySchema,
  t_PostCustomersCustomerTaxIdsParamSchema,
  t_PostDisputesDisputeBodySchema,
  t_PostDisputesDisputeCloseBodySchema,
  t_PostDisputesDisputeCloseParamSchema,
  t_PostDisputesDisputeParamSchema,
  t_PostEphemeralKeysBodySchema,
  t_PostFileLinksBodySchema,
  t_PostFileLinksLinkBodySchema,
  t_PostFileLinksLinkParamSchema,
  t_PostFilesBodySchema,
  t_PostFinancialConnectionsAccountsAccountDisconnectBodySchema,
  t_PostFinancialConnectionsAccountsAccountDisconnectParamSchema,
  t_PostFinancialConnectionsAccountsAccountRefreshBodySchema,
  t_PostFinancialConnectionsAccountsAccountRefreshParamSchema,
  t_PostFinancialConnectionsSessionsBodySchema,
  t_PostIdentityVerificationSessionsBodySchema,
  t_PostIdentityVerificationSessionsSessionBodySchema,
  t_PostIdentityVerificationSessionsSessionCancelBodySchema,
  t_PostIdentityVerificationSessionsSessionCancelParamSchema,
  t_PostIdentityVerificationSessionsSessionParamSchema,
  t_PostIdentityVerificationSessionsSessionRedactBodySchema,
  t_PostIdentityVerificationSessionsSessionRedactParamSchema,
  t_PostInvoiceitemsBodySchema,
  t_PostInvoiceitemsInvoiceitemBodySchema,
  t_PostInvoiceitemsInvoiceitemParamSchema,
  t_PostInvoicesBodySchema,
  t_PostInvoicesInvoiceBodySchema,
  t_PostInvoicesInvoiceFinalizeBodySchema,
  t_PostInvoicesInvoiceFinalizeParamSchema,
  t_PostInvoicesInvoiceMarkUncollectibleBodySchema,
  t_PostInvoicesInvoiceMarkUncollectibleParamSchema,
  t_PostInvoicesInvoiceParamSchema,
  t_PostInvoicesInvoicePayBodySchema,
  t_PostInvoicesInvoicePayParamSchema,
  t_PostInvoicesInvoiceSendBodySchema,
  t_PostInvoicesInvoiceSendParamSchema,
  t_PostInvoicesInvoiceVoidBodySchema,
  t_PostInvoicesInvoiceVoidParamSchema,
  t_PostIssuingAuthorizationsAuthorizationApproveBodySchema,
  t_PostIssuingAuthorizationsAuthorizationApproveParamSchema,
  t_PostIssuingAuthorizationsAuthorizationBodySchema,
  t_PostIssuingAuthorizationsAuthorizationDeclineBodySchema,
  t_PostIssuingAuthorizationsAuthorizationDeclineParamSchema,
  t_PostIssuingAuthorizationsAuthorizationParamSchema,
  t_PostIssuingCardholdersBodySchema,
  t_PostIssuingCardholdersCardholderBodySchema,
  t_PostIssuingCardholdersCardholderParamSchema,
  t_PostIssuingCardsBodySchema,
  t_PostIssuingCardsCardBodySchema,
  t_PostIssuingCardsCardParamSchema,
  t_PostIssuingDisputesBodySchema,
  t_PostIssuingDisputesDisputeBodySchema,
  t_PostIssuingDisputesDisputeParamSchema,
  t_PostIssuingDisputesDisputeSubmitBodySchema,
  t_PostIssuingDisputesDisputeSubmitParamSchema,
  t_PostIssuingSettlementsSettlementBodySchema,
  t_PostIssuingSettlementsSettlementParamSchema,
  t_PostIssuingTransactionsTransactionBodySchema,
  t_PostIssuingTransactionsTransactionParamSchema,
  t_PostLinkAccountSessionsBodySchema,
  t_PostLinkedAccountsAccountDisconnectBodySchema,
  t_PostLinkedAccountsAccountDisconnectParamSchema,
  t_PostLinkedAccountsAccountRefreshBodySchema,
  t_PostLinkedAccountsAccountRefreshParamSchema,
  t_PostPaymentIntentsBodySchema,
  t_PostPaymentIntentsIntentApplyCustomerBalanceBodySchema,
  t_PostPaymentIntentsIntentApplyCustomerBalanceParamSchema,
  t_PostPaymentIntentsIntentBodySchema,
  t_PostPaymentIntentsIntentCancelBodySchema,
  t_PostPaymentIntentsIntentCancelParamSchema,
  t_PostPaymentIntentsIntentCaptureBodySchema,
  t_PostPaymentIntentsIntentCaptureParamSchema,
  t_PostPaymentIntentsIntentConfirmBodySchema,
  t_PostPaymentIntentsIntentConfirmParamSchema,
  t_PostPaymentIntentsIntentIncrementAuthorizationBodySchema,
  t_PostPaymentIntentsIntentIncrementAuthorizationParamSchema,
  t_PostPaymentIntentsIntentParamSchema,
  t_PostPaymentIntentsIntentVerifyMicrodepositsBodySchema,
  t_PostPaymentIntentsIntentVerifyMicrodepositsParamSchema,
  t_PostPaymentLinksBodySchema,
  t_PostPaymentLinksPaymentLinkBodySchema,
  t_PostPaymentLinksPaymentLinkParamSchema,
  t_PostPaymentMethodConfigurationsBodySchema,
  t_PostPaymentMethodConfigurationsConfigurationBodySchema,
  t_PostPaymentMethodConfigurationsConfigurationParamSchema,
  t_PostPaymentMethodDomainsBodySchema,
  t_PostPaymentMethodDomainsPaymentMethodDomainBodySchema,
  t_PostPaymentMethodDomainsPaymentMethodDomainParamSchema,
  t_PostPaymentMethodDomainsPaymentMethodDomainValidateBodySchema,
  t_PostPaymentMethodDomainsPaymentMethodDomainValidateParamSchema,
  t_PostPaymentMethodsBodySchema,
  t_PostPaymentMethodsPaymentMethodAttachBodySchema,
  t_PostPaymentMethodsPaymentMethodAttachParamSchema,
  t_PostPaymentMethodsPaymentMethodBodySchema,
  t_PostPaymentMethodsPaymentMethodDetachBodySchema,
  t_PostPaymentMethodsPaymentMethodDetachParamSchema,
  t_PostPaymentMethodsPaymentMethodParamSchema,
  t_PostPayoutsBodySchema,
  t_PostPayoutsPayoutBodySchema,
  t_PostPayoutsPayoutCancelBodySchema,
  t_PostPayoutsPayoutCancelParamSchema,
  t_PostPayoutsPayoutParamSchema,
  t_PostPayoutsPayoutReverseBodySchema,
  t_PostPayoutsPayoutReverseParamSchema,
  t_PostPlansBodySchema,
  t_PostPlansPlanBodySchema,
  t_PostPlansPlanParamSchema,
  t_PostPricesBodySchema,
  t_PostPricesPriceBodySchema,
  t_PostPricesPriceParamSchema,
  t_PostProductsBodySchema,
  t_PostProductsIdBodySchema,
  t_PostProductsIdParamSchema,
  t_PostPromotionCodesBodySchema,
  t_PostPromotionCodesPromotionCodeBodySchema,
  t_PostPromotionCodesPromotionCodeParamSchema,
  t_PostQuotesBodySchema,
  t_PostQuotesQuoteAcceptBodySchema,
  t_PostQuotesQuoteAcceptParamSchema,
  t_PostQuotesQuoteBodySchema,
  t_PostQuotesQuoteCancelBodySchema,
  t_PostQuotesQuoteCancelParamSchema,
  t_PostQuotesQuoteFinalizeBodySchema,
  t_PostQuotesQuoteFinalizeParamSchema,
  t_PostQuotesQuoteParamSchema,
  t_PostRadarValueListItemsBodySchema,
  t_PostRadarValueListsBodySchema,
  t_PostRadarValueListsValueListBodySchema,
  t_PostRadarValueListsValueListParamSchema,
  t_PostRefundsBodySchema,
  t_PostRefundsRefundBodySchema,
  t_PostRefundsRefundCancelBodySchema,
  t_PostRefundsRefundCancelParamSchema,
  t_PostRefundsRefundParamSchema,
  t_PostReportingReportRunsBodySchema,
  t_PostReviewsReviewApproveBodySchema,
  t_PostReviewsReviewApproveParamSchema,
  t_PostSetupIntentsBodySchema,
  t_PostSetupIntentsIntentBodySchema,
  t_PostSetupIntentsIntentCancelBodySchema,
  t_PostSetupIntentsIntentCancelParamSchema,
  t_PostSetupIntentsIntentConfirmBodySchema,
  t_PostSetupIntentsIntentConfirmParamSchema,
  t_PostSetupIntentsIntentParamSchema,
  t_PostSetupIntentsIntentVerifyMicrodepositsBodySchema,
  t_PostSetupIntentsIntentVerifyMicrodepositsParamSchema,
  t_PostShippingRatesBodySchema,
  t_PostShippingRatesShippingRateTokenBodySchema,
  t_PostShippingRatesShippingRateTokenParamSchema,
  t_PostSourcesBodySchema,
  t_PostSourcesSourceBodySchema,
  t_PostSourcesSourceParamSchema,
  t_PostSourcesSourceVerifyBodySchema,
  t_PostSourcesSourceVerifyParamSchema,
  t_PostSubscriptionItemsBodySchema,
  t_PostSubscriptionItemsItemBodySchema,
  t_PostSubscriptionItemsItemParamSchema,
  t_PostSubscriptionItemsSubscriptionItemUsageRecordsBodySchema,
  t_PostSubscriptionItemsSubscriptionItemUsageRecordsParamSchema,
  t_PostSubscriptionSchedulesBodySchema,
  t_PostSubscriptionSchedulesScheduleBodySchema,
  t_PostSubscriptionSchedulesScheduleCancelBodySchema,
  t_PostSubscriptionSchedulesScheduleCancelParamSchema,
  t_PostSubscriptionSchedulesScheduleParamSchema,
  t_PostSubscriptionSchedulesScheduleReleaseBodySchema,
  t_PostSubscriptionSchedulesScheduleReleaseParamSchema,
  t_PostSubscriptionsBodySchema,
  t_PostSubscriptionsSubscriptionExposedIdBodySchema,
  t_PostSubscriptionsSubscriptionExposedIdParamSchema,
  t_PostSubscriptionsSubscriptionResumeBodySchema,
  t_PostSubscriptionsSubscriptionResumeParamSchema,
  t_PostTaxCalculationsBodySchema,
  t_PostTaxRatesBodySchema,
  t_PostTaxRatesTaxRateBodySchema,
  t_PostTaxRatesTaxRateParamSchema,
  t_PostTaxSettingsBodySchema,
  t_PostTaxTransactionsCreateFromCalculationBodySchema,
  t_PostTaxTransactionsCreateReversalBodySchema,
  t_PostTerminalConfigurationsBodySchema,
  t_PostTerminalConfigurationsConfigurationBodySchema,
  t_PostTerminalConfigurationsConfigurationParamSchema,
  t_PostTerminalConnectionTokensBodySchema,
  t_PostTerminalLocationsBodySchema,
  t_PostTerminalLocationsLocationBodySchema,
  t_PostTerminalLocationsLocationParamSchema,
  t_PostTerminalReadersBodySchema,
  t_PostTerminalReadersReaderBodySchema,
  t_PostTerminalReadersReaderCancelActionBodySchema,
  t_PostTerminalReadersReaderCancelActionParamSchema,
  t_PostTerminalReadersReaderParamSchema,
  t_PostTerminalReadersReaderProcessPaymentIntentBodySchema,
  t_PostTerminalReadersReaderProcessPaymentIntentParamSchema,
  t_PostTerminalReadersReaderProcessSetupIntentBodySchema,
  t_PostTerminalReadersReaderProcessSetupIntentParamSchema,
  t_PostTerminalReadersReaderRefundPaymentBodySchema,
  t_PostTerminalReadersReaderRefundPaymentParamSchema,
  t_PostTerminalReadersReaderSetReaderDisplayBodySchema,
  t_PostTerminalReadersReaderSetReaderDisplayParamSchema,
  t_PostTestHelpersCustomersCustomerFundCashBalanceBodySchema,
  t_PostTestHelpersCustomersCustomerFundCashBalanceParamSchema,
  t_PostTestHelpersIssuingAuthorizationsAuthorizationCaptureBodySchema,
  t_PostTestHelpersIssuingAuthorizationsAuthorizationCaptureParamSchema,
  t_PostTestHelpersIssuingAuthorizationsAuthorizationExpireBodySchema,
  t_PostTestHelpersIssuingAuthorizationsAuthorizationExpireParamSchema,
  t_PostTestHelpersIssuingAuthorizationsAuthorizationIncrementBodySchema,
  t_PostTestHelpersIssuingAuthorizationsAuthorizationIncrementParamSchema,
  t_PostTestHelpersIssuingAuthorizationsAuthorizationReverseBodySchema,
  t_PostTestHelpersIssuingAuthorizationsAuthorizationReverseParamSchema,
  t_PostTestHelpersIssuingAuthorizationsBodySchema,
  t_PostTestHelpersIssuingCardsCardShippingDeliverBodySchema,
  t_PostTestHelpersIssuingCardsCardShippingDeliverParamSchema,
  t_PostTestHelpersIssuingCardsCardShippingFailBodySchema,
  t_PostTestHelpersIssuingCardsCardShippingFailParamSchema,
  t_PostTestHelpersIssuingCardsCardShippingReturnBodySchema,
  t_PostTestHelpersIssuingCardsCardShippingReturnParamSchema,
  t_PostTestHelpersIssuingCardsCardShippingShipBodySchema,
  t_PostTestHelpersIssuingCardsCardShippingShipParamSchema,
  t_PostTestHelpersIssuingTransactionsCreateForceCaptureBodySchema,
  t_PostTestHelpersIssuingTransactionsCreateUnlinkedRefundBodySchema,
  t_PostTestHelpersIssuingTransactionsTransactionRefundBodySchema,
  t_PostTestHelpersIssuingTransactionsTransactionRefundParamSchema,
  t_PostTestHelpersRefundsRefundExpireBodySchema,
  t_PostTestHelpersRefundsRefundExpireParamSchema,
  t_PostTestHelpersTerminalReadersReaderPresentPaymentMethodBodySchema,
  t_PostTestHelpersTerminalReadersReaderPresentPaymentMethodParamSchema,
  t_PostTestHelpersTestClocksBodySchema,
  t_PostTestHelpersTestClocksTestClockAdvanceBodySchema,
  t_PostTestHelpersTestClocksTestClockAdvanceParamSchema,
  t_PostTestHelpersTreasuryInboundTransfersIdFailBodySchema,
  t_PostTestHelpersTreasuryInboundTransfersIdFailParamSchema,
  t_PostTestHelpersTreasuryInboundTransfersIdReturnBodySchema,
  t_PostTestHelpersTreasuryInboundTransfersIdReturnParamSchema,
  t_PostTestHelpersTreasuryInboundTransfersIdSucceedBodySchema,
  t_PostTestHelpersTreasuryInboundTransfersIdSucceedParamSchema,
  t_PostTestHelpersTreasuryOutboundPaymentsIdFailBodySchema,
  t_PostTestHelpersTreasuryOutboundPaymentsIdFailParamSchema,
  t_PostTestHelpersTreasuryOutboundPaymentsIdPostBodySchema,
  t_PostTestHelpersTreasuryOutboundPaymentsIdPostParamSchema,
  t_PostTestHelpersTreasuryOutboundPaymentsIdReturnBodySchema,
  t_PostTestHelpersTreasuryOutboundPaymentsIdReturnParamSchema,
  t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailBodySchema,
  t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailParamSchema,
  t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostBodySchema,
  t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostParamSchema,
  t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnBodySchema,
  t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnParamSchema,
  t_PostTestHelpersTreasuryReceivedCreditsBodySchema,
  t_PostTestHelpersTreasuryReceivedDebitsBodySchema,
  t_PostTokensBodySchema,
  t_PostTopupsBodySchema,
  t_PostTopupsTopupBodySchema,
  t_PostTopupsTopupCancelBodySchema,
  t_PostTopupsTopupCancelParamSchema,
  t_PostTopupsTopupParamSchema,
  t_PostTransfersBodySchema,
  t_PostTransfersIdReversalsBodySchema,
  t_PostTransfersIdReversalsParamSchema,
  t_PostTransfersTransferBodySchema,
  t_PostTransfersTransferParamSchema,
  t_PostTransfersTransferReversalsIdBodySchema,
  t_PostTransfersTransferReversalsIdParamSchema,
  t_PostTreasuryCreditReversalsBodySchema,
  t_PostTreasuryDebitReversalsBodySchema,
  t_PostTreasuryFinancialAccountsBodySchema,
  t_PostTreasuryFinancialAccountsFinancialAccountBodySchema,
  t_PostTreasuryFinancialAccountsFinancialAccountFeaturesBodySchema,
  t_PostTreasuryFinancialAccountsFinancialAccountFeaturesParamSchema,
  t_PostTreasuryFinancialAccountsFinancialAccountParamSchema,
  t_PostTreasuryInboundTransfersBodySchema,
  t_PostTreasuryInboundTransfersInboundTransferCancelBodySchema,
  t_PostTreasuryInboundTransfersInboundTransferCancelParamSchema,
  t_PostTreasuryOutboundPaymentsBodySchema,
  t_PostTreasuryOutboundPaymentsIdCancelBodySchema,
  t_PostTreasuryOutboundPaymentsIdCancelParamSchema,
  t_PostTreasuryOutboundTransfersBodySchema,
  t_PostTreasuryOutboundTransfersOutboundTransferCancelBodySchema,
  t_PostTreasuryOutboundTransfersOutboundTransferCancelParamSchema,
  t_PostWebhookEndpointsBodySchema,
  t_PostWebhookEndpointsWebhookEndpointBodySchema,
  t_PostWebhookEndpointsWebhookEndpointParamSchema,
  t_account,
  t_account_bacs_debit_payments_settings,
  t_account_branding_settings,
  t_account_business_profile,
  t_account_capabilities,
  t_account_capability_future_requirements,
  t_account_capability_requirements,
  t_account_card_issuing_settings,
  t_account_card_payments_settings,
  t_account_dashboard_settings,
  t_account_decline_charge_on,
  t_account_future_requirements,
  t_account_link,
  t_account_monthly_estimated_revenue,
  t_account_payments_settings,
  t_account_payout_settings,
  t_account_requirements,
  t_account_requirements_alternative,
  t_account_requirements_error,
  t_account_sepa_debit_payments_settings,
  t_account_session,
  t_account_settings,
  t_account_terms_of_service,
  t_account_tos_acceptance,
  t_account_treasury_settings,
  t_account_unification_account_controller,
  t_address,
  t_api_errors,
  t_apple_pay_domain,
  t_application,
  t_application_fee,
  t_apps_secret,
  t_automatic_tax,
  t_balance,
  t_balance_amount,
  t_balance_amount_by_source_type,
  t_balance_detail,
  t_balance_transaction,
  t_bank_account,
  t_bank_connections_resource_accountholder,
  t_bank_connections_resource_balance,
  t_bank_connections_resource_balance_api_resource_cash_balance,
  t_bank_connections_resource_balance_api_resource_credit_balance,
  t_bank_connections_resource_balance_refresh,
  t_bank_connections_resource_link_account_session_filters,
  t_bank_connections_resource_ownership_refresh,
  t_billing_details,
  t_billing_portal_configuration,
  t_billing_portal_session,
  t_cancellation_details,
  t_capability,
  t_card,
  t_card_generated_from_payment_method_details,
  t_card_issuing_account_terms_of_service,
  t_card_mandate_payment_method_details,
  t_cash_balance,
  t_charge,
  t_charge_fraud_details,
  t_charge_outcome,
  t_charge_transfer_data,
  t_checkout_acss_debit_mandate_options,
  t_checkout_acss_debit_payment_method_options,
  t_checkout_affirm_payment_method_options,
  t_checkout_afterpay_clearpay_payment_method_options,
  t_checkout_alipay_payment_method_options,
  t_checkout_au_becs_debit_payment_method_options,
  t_checkout_bacs_debit_payment_method_options,
  t_checkout_bancontact_payment_method_options,
  t_checkout_boleto_payment_method_options,
  t_checkout_card_installments_options,
  t_checkout_card_payment_method_options,
  t_checkout_cashapp_payment_method_options,
  t_checkout_customer_balance_bank_transfer_payment_method_options,
  t_checkout_customer_balance_payment_method_options,
  t_checkout_eps_payment_method_options,
  t_checkout_fpx_payment_method_options,
  t_checkout_giropay_payment_method_options,
  t_checkout_grab_pay_payment_method_options,
  t_checkout_ideal_payment_method_options,
  t_checkout_klarna_payment_method_options,
  t_checkout_konbini_payment_method_options,
  t_checkout_link_payment_method_options,
  t_checkout_oxxo_payment_method_options,
  t_checkout_p24_payment_method_options,
  t_checkout_paynow_payment_method_options,
  t_checkout_pix_payment_method_options,
  t_checkout_sepa_debit_payment_method_options,
  t_checkout_session,
  t_checkout_session_payment_method_options,
  t_checkout_sofort_payment_method_options,
  t_checkout_us_bank_account_payment_method_options,
  t_connect_collection_transfer,
  t_connect_embedded_account_session_create_components,
  t_connect_embedded_base_config,
  t_country_spec,
  t_country_spec_verification_field_details,
  t_country_spec_verification_fields,
  t_coupon,
  t_coupon_applies_to,
  t_coupon_currency_option,
  t_credit_note,
  t_credit_note_line_item,
  t_credit_note_tax_amount,
  t_currency_option,
  t_custom_unit_amount,
  t_customer,
  t_customer_acceptance,
  t_customer_balance_customer_balance_settings,
  t_customer_balance_resource_cash_balance_transaction_resource_adjusted_for_overdraft,
  t_customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction,
  t_customer_balance_resource_cash_balance_transaction_resource_funded_transaction,
  t_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer,
  t_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer,
  t_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_gb_bank_transfer,
  t_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_jp_bank_transfer,
  t_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_us_bank_transfer,
  t_customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction,
  t_customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction,
  t_customer_balance_transaction,
  t_customer_cash_balance_transaction,
  t_customer_tax,
  t_customer_tax_location,
  t_deleted_account,
  t_deleted_apple_pay_domain,
  t_deleted_application,
  t_deleted_bank_account,
  t_deleted_card,
  t_deleted_coupon,
  t_deleted_customer,
  t_deleted_discount,
  t_deleted_external_account,
  t_deleted_invoice,
  t_deleted_invoiceitem,
  t_deleted_payment_source,
  t_deleted_person,
  t_deleted_plan,
  t_deleted_price,
  t_deleted_product,
  t_deleted_radar_value_list,
  t_deleted_radar_value_list_item,
  t_deleted_subscription_item,
  t_deleted_tax_id,
  t_deleted_terminal_configuration,
  t_deleted_terminal_location,
  t_deleted_terminal_reader,
  t_deleted_test_helpers_test_clock,
  t_deleted_webhook_endpoint,
  t_discount,
  t_discounts_resource_discount_amount,
  t_dispute,
  t_dispute_evidence,
  t_dispute_evidence_details,
  t_dispute_payment_method_details,
  t_dispute_payment_method_details_card,
  t_email_sent,
  t_ephemeral_key,
  t_error,
  t_event,
  t_exchange_rate,
  t_external_account,
  t_external_account_requirements,
  t_fee,
  t_fee_refund,
  t_file,
  t_file_link,
  t_financial_connections_account,
  t_financial_connections_account_owner,
  t_financial_connections_account_ownership,
  t_financial_connections_session,
  t_financial_reporting_finance_report_run_run_parameters,
  t_funding_instructions,
  t_funding_instructions_bank_transfer,
  t_funding_instructions_bank_transfer_financial_address,
  t_funding_instructions_bank_transfer_iban_record,
  t_funding_instructions_bank_transfer_sort_code_record,
  t_funding_instructions_bank_transfer_spei_record,
  t_funding_instructions_bank_transfer_zengin_record,
  t_gelato_data_document_report_date_of_birth,
  t_gelato_data_document_report_expiration_date,
  t_gelato_data_document_report_issued_date,
  t_gelato_data_id_number_report_date,
  t_gelato_data_verified_outputs_date,
  t_gelato_document_report,
  t_gelato_document_report_error,
  t_gelato_id_number_report,
  t_gelato_id_number_report_error,
  t_gelato_report_document_options,
  t_gelato_report_id_number_options,
  t_gelato_selfie_report,
  t_gelato_selfie_report_error,
  t_gelato_session_document_options,
  t_gelato_session_id_number_options,
  t_gelato_session_last_error,
  t_gelato_verification_report_options,
  t_gelato_verification_session_options,
  t_gelato_verified_outputs,
  t_identity_verification_report,
  t_identity_verification_session,
  t_inbound_transfers,
  t_inbound_transfers_payment_method_details_us_bank_account,
  t_invoice,
  t_invoice_installments_card,
  t_invoice_item_threshold_reason,
  t_invoice_line_item_period,
  t_invoice_mandate_options_card,
  t_invoice_payment_method_options_acss_debit,
  t_invoice_payment_method_options_acss_debit_mandate_options,
  t_invoice_payment_method_options_bancontact,
  t_invoice_payment_method_options_card,
  t_invoice_payment_method_options_customer_balance,
  t_invoice_payment_method_options_customer_balance_bank_transfer,
  t_invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer,
  t_invoice_payment_method_options_konbini,
  t_invoice_payment_method_options_us_bank_account,
  t_invoice_payment_method_options_us_bank_account_linked_account_options,
  t_invoice_setting_custom_field,
  t_invoice_setting_customer_setting,
  t_invoice_setting_quote_setting,
  t_invoice_setting_rendering_options,
  t_invoice_setting_subscription_schedule_phase_setting,
  t_invoice_setting_subscription_schedule_setting,
  t_invoice_tax_amount,
  t_invoice_threshold_reason,
  t_invoice_transfer_data,
  t_invoiceitem,
  t_invoices_from_invoice,
  t_invoices_payment_method_options,
  t_invoices_payment_settings,
  t_invoices_resource_invoice_tax_id,
  t_invoices_resource_line_items_credited_items,
  t_invoices_resource_line_items_proration_details,
  t_invoices_shipping_cost,
  t_invoices_status_transitions,
  t_issuing_authorization,
  t_issuing_authorization_amount_details,
  t_issuing_authorization_merchant_data,
  t_issuing_authorization_network_data,
  t_issuing_authorization_pending_request,
  t_issuing_authorization_request,
  t_issuing_authorization_treasury,
  t_issuing_authorization_verification_data,
  t_issuing_card,
  t_issuing_card_apple_pay,
  t_issuing_card_authorization_controls,
  t_issuing_card_google_pay,
  t_issuing_card_shipping,
  t_issuing_card_shipping_customs,
  t_issuing_card_spending_limit,
  t_issuing_card_wallets,
  t_issuing_cardholder,
  t_issuing_cardholder_address,
  t_issuing_cardholder_authorization_controls,
  t_issuing_cardholder_card_issuing,
  t_issuing_cardholder_company,
  t_issuing_cardholder_id_document,
  t_issuing_cardholder_individual,
  t_issuing_cardholder_individual_dob,
  t_issuing_cardholder_requirements,
  t_issuing_cardholder_spending_limit,
  t_issuing_cardholder_user_terms_acceptance,
  t_issuing_cardholder_verification,
  t_issuing_dispute,
  t_issuing_dispute_canceled_evidence,
  t_issuing_dispute_duplicate_evidence,
  t_issuing_dispute_evidence,
  t_issuing_dispute_fraudulent_evidence,
  t_issuing_dispute_merchandise_not_as_described_evidence,
  t_issuing_dispute_not_received_evidence,
  t_issuing_dispute_other_evidence,
  t_issuing_dispute_service_not_as_described_evidence,
  t_issuing_dispute_treasury,
  t_issuing_settlement,
  t_issuing_transaction,
  t_issuing_transaction_amount_details,
  t_issuing_transaction_flight_data,
  t_issuing_transaction_flight_data_leg,
  t_issuing_transaction_fuel_data,
  t_issuing_transaction_lodging_data,
  t_issuing_transaction_purchase_details,
  t_issuing_transaction_receipt_data,
  t_issuing_transaction_treasury,
  t_item,
  t_legal_entity_company,
  t_legal_entity_company_verification,
  t_legal_entity_company_verification_document,
  t_legal_entity_dob,
  t_legal_entity_japan_address,
  t_legal_entity_person_verification,
  t_legal_entity_person_verification_document,
  t_legal_entity_ubo_declaration,
  t_line_item,
  t_line_items_discount_amount,
  t_line_items_tax_amount,
  t_linked_account_options_us_bank_account,
  t_login_link,
  t_mandate,
  t_mandate_acss_debit,
  t_mandate_au_becs_debit,
  t_mandate_bacs_debit,
  t_mandate_cashapp,
  t_mandate_link,
  t_mandate_multi_use,
  t_mandate_payment_method_details,
  t_mandate_paypal,
  t_mandate_sepa_debit,
  t_mandate_single_use,
  t_mandate_us_bank_account,
  t_networks,
  t_notification_event_data,
  t_notification_event_request,
  t_offline_acceptance,
  t_online_acceptance,
  t_outbound_payments_payment_method_details,
  t_outbound_payments_payment_method_details_financial_account,
  t_outbound_payments_payment_method_details_us_bank_account,
  t_outbound_transfers_payment_method_details,
  t_outbound_transfers_payment_method_details_us_bank_account,
  t_package_dimensions,
  t_payment_flows_amount_details,
  t_payment_flows_amount_details_resource_tip,
  t_payment_flows_automatic_payment_methods_payment_intent,
  t_payment_flows_automatic_payment_methods_setup_intent,
  t_payment_flows_installment_options,
  t_payment_flows_private_payment_methods_alipay,
  t_payment_flows_private_payment_methods_alipay_details,
  t_payment_flows_private_payment_methods_klarna_dob,
  t_payment_intent,
  t_payment_intent_card_processing,
  t_payment_intent_next_action,
  t_payment_intent_next_action_alipay_handle_redirect,
  t_payment_intent_next_action_boleto,
  t_payment_intent_next_action_card_await_notification,
  t_payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code,
  t_payment_intent_next_action_cashapp_qr_code,
  t_payment_intent_next_action_display_bank_transfer_instructions,
  t_payment_intent_next_action_display_oxxo_details,
  t_payment_intent_next_action_konbini,
  t_payment_intent_next_action_konbini_familymart,
  t_payment_intent_next_action_konbini_lawson,
  t_payment_intent_next_action_konbini_ministop,
  t_payment_intent_next_action_konbini_seicomart,
  t_payment_intent_next_action_konbini_stores,
  t_payment_intent_next_action_paynow_display_qr_code,
  t_payment_intent_next_action_pix_display_qr_code,
  t_payment_intent_next_action_promptpay_display_qr_code,
  t_payment_intent_next_action_redirect_to_url,
  t_payment_intent_next_action_verify_with_microdeposits,
  t_payment_intent_next_action_wechat_pay_display_qr_code,
  t_payment_intent_next_action_wechat_pay_redirect_to_android_app,
  t_payment_intent_next_action_wechat_pay_redirect_to_ios_app,
  t_payment_intent_payment_method_options,
  t_payment_intent_payment_method_options_acss_debit,
  t_payment_intent_payment_method_options_au_becs_debit,
  t_payment_intent_payment_method_options_blik,
  t_payment_intent_payment_method_options_card,
  t_payment_intent_payment_method_options_eps,
  t_payment_intent_payment_method_options_link,
  t_payment_intent_payment_method_options_mandate_options_acss_debit,
  t_payment_intent_payment_method_options_mandate_options_sepa_debit,
  t_payment_intent_payment_method_options_sepa_debit,
  t_payment_intent_payment_method_options_us_bank_account,
  t_payment_intent_processing,
  t_payment_intent_processing_customer_notification,
  t_payment_intent_type_specific_payment_method_options_client,
  t_payment_link,
  t_payment_links_resource_after_completion,
  t_payment_links_resource_automatic_tax,
  t_payment_links_resource_completion_behavior_confirmation_page,
  t_payment_links_resource_completion_behavior_redirect,
  t_payment_links_resource_consent_collection,
  t_payment_links_resource_custom_fields,
  t_payment_links_resource_custom_fields_dropdown,
  t_payment_links_resource_custom_fields_dropdown_option,
  t_payment_links_resource_custom_fields_label,
  t_payment_links_resource_custom_fields_numeric,
  t_payment_links_resource_custom_fields_text,
  t_payment_links_resource_custom_text,
  t_payment_links_resource_custom_text_position,
  t_payment_links_resource_invoice_creation,
  t_payment_links_resource_invoice_settings,
  t_payment_links_resource_payment_intent_data,
  t_payment_links_resource_phone_number_collection,
  t_payment_links_resource_shipping_address_collection,
  t_payment_links_resource_shipping_option,
  t_payment_links_resource_subscription_data,
  t_payment_links_resource_tax_id_collection,
  t_payment_links_resource_transfer_data,
  t_payment_method,
  t_payment_method_acss_debit,
  t_payment_method_affirm,
  t_payment_method_afterpay_clearpay,
  t_payment_method_au_becs_debit,
  t_payment_method_bacs_debit,
  t_payment_method_bancontact,
  t_payment_method_blik,
  t_payment_method_boleto,
  t_payment_method_card,
  t_payment_method_card_checks,
  t_payment_method_card_generated_card,
  t_payment_method_card_present,
  t_payment_method_card_present_networks,
  t_payment_method_card_wallet,
  t_payment_method_card_wallet_amex_express_checkout,
  t_payment_method_card_wallet_apple_pay,
  t_payment_method_card_wallet_google_pay,
  t_payment_method_card_wallet_link,
  t_payment_method_card_wallet_masterpass,
  t_payment_method_card_wallet_samsung_pay,
  t_payment_method_card_wallet_visa_checkout,
  t_payment_method_cashapp,
  t_payment_method_config_biz_payment_method_configuration_details,
  t_payment_method_config_resource_display_preference,
  t_payment_method_config_resource_payment_method_properties,
  t_payment_method_configuration,
  t_payment_method_customer_balance,
  t_payment_method_details,
  t_payment_method_details_ach_credit_transfer,
  t_payment_method_details_ach_debit,
  t_payment_method_details_acss_debit,
  t_payment_method_details_affirm,
  t_payment_method_details_afterpay_clearpay,
  t_payment_method_details_au_becs_debit,
  t_payment_method_details_bacs_debit,
  t_payment_method_details_bancontact,
  t_payment_method_details_blik,
  t_payment_method_details_boleto,
  t_payment_method_details_card,
  t_payment_method_details_card_checks,
  t_payment_method_details_card_installments,
  t_payment_method_details_card_installments_plan,
  t_payment_method_details_card_network_token,
  t_payment_method_details_card_present,
  t_payment_method_details_card_present_receipt,
  t_payment_method_details_card_wallet,
  t_payment_method_details_card_wallet_amex_express_checkout,
  t_payment_method_details_card_wallet_apple_pay,
  t_payment_method_details_card_wallet_google_pay,
  t_payment_method_details_card_wallet_link,
  t_payment_method_details_card_wallet_masterpass,
  t_payment_method_details_card_wallet_samsung_pay,
  t_payment_method_details_card_wallet_visa_checkout,
  t_payment_method_details_cashapp,
  t_payment_method_details_customer_balance,
  t_payment_method_details_eps,
  t_payment_method_details_fpx,
  t_payment_method_details_giropay,
  t_payment_method_details_grabpay,
  t_payment_method_details_ideal,
  t_payment_method_details_interac_present,
  t_payment_method_details_interac_present_receipt,
  t_payment_method_details_klarna,
  t_payment_method_details_konbini,
  t_payment_method_details_konbini_store,
  t_payment_method_details_link,
  t_payment_method_details_multibanco,
  t_payment_method_details_oxxo,
  t_payment_method_details_p24,
  t_payment_method_details_paynow,
  t_payment_method_details_paypal,
  t_payment_method_details_pix,
  t_payment_method_details_promptpay,
  t_payment_method_details_sepa_debit,
  t_payment_method_details_sofort,
  t_payment_method_details_stripe_account,
  t_payment_method_details_us_bank_account,
  t_payment_method_details_wechat,
  t_payment_method_details_wechat_pay,
  t_payment_method_details_zip,
  t_payment_method_domain,
  t_payment_method_domain_resource_payment_method_status,
  t_payment_method_domain_resource_payment_method_status_details,
  t_payment_method_eps,
  t_payment_method_fpx,
  t_payment_method_giropay,
  t_payment_method_grabpay,
  t_payment_method_ideal,
  t_payment_method_interac_present,
  t_payment_method_klarna,
  t_payment_method_konbini,
  t_payment_method_link,
  t_payment_method_options_affirm,
  t_payment_method_options_afterpay_clearpay,
  t_payment_method_options_alipay,
  t_payment_method_options_bacs_debit,
  t_payment_method_options_bancontact,
  t_payment_method_options_boleto,
  t_payment_method_options_card_installments,
  t_payment_method_options_card_mandate_options,
  t_payment_method_options_card_present,
  t_payment_method_options_cashapp,
  t_payment_method_options_customer_balance,
  t_payment_method_options_customer_balance_bank_transfer,
  t_payment_method_options_customer_balance_eu_bank_account,
  t_payment_method_options_fpx,
  t_payment_method_options_giropay,
  t_payment_method_options_grabpay,
  t_payment_method_options_ideal,
  t_payment_method_options_interac_present,
  t_payment_method_options_klarna,
  t_payment_method_options_konbini,
  t_payment_method_options_oxxo,
  t_payment_method_options_p24,
  t_payment_method_options_paynow,
  t_payment_method_options_paypal,
  t_payment_method_options_pix,
  t_payment_method_options_promptpay,
  t_payment_method_options_sofort,
  t_payment_method_options_wechat_pay,
  t_payment_method_options_zip,
  t_payment_method_oxxo,
  t_payment_method_p24,
  t_payment_method_paynow,
  t_payment_method_paypal,
  t_payment_method_pix,
  t_payment_method_promptpay,
  t_payment_method_sepa_debit,
  t_payment_method_sofort,
  t_payment_method_us_bank_account,
  t_payment_method_us_bank_account_blocked,
  t_payment_method_us_bank_account_status_details,
  t_payment_method_wechat_pay,
  t_payment_method_zip,
  t_payment_pages_checkout_session_after_expiration,
  t_payment_pages_checkout_session_after_expiration_recovery,
  t_payment_pages_checkout_session_automatic_tax,
  t_payment_pages_checkout_session_consent,
  t_payment_pages_checkout_session_consent_collection,
  t_payment_pages_checkout_session_currency_conversion,
  t_payment_pages_checkout_session_custom_fields,
  t_payment_pages_checkout_session_custom_fields_dropdown,
  t_payment_pages_checkout_session_custom_fields_label,
  t_payment_pages_checkout_session_custom_fields_numeric,
  t_payment_pages_checkout_session_custom_fields_option,
  t_payment_pages_checkout_session_custom_fields_text,
  t_payment_pages_checkout_session_custom_text,
  t_payment_pages_checkout_session_custom_text_position,
  t_payment_pages_checkout_session_customer_details,
  t_payment_pages_checkout_session_invoice_creation,
  t_payment_pages_checkout_session_invoice_settings,
  t_payment_pages_checkout_session_phone_number_collection,
  t_payment_pages_checkout_session_shipping_address_collection,
  t_payment_pages_checkout_session_shipping_cost,
  t_payment_pages_checkout_session_shipping_option,
  t_payment_pages_checkout_session_tax_id,
  t_payment_pages_checkout_session_tax_id_collection,
  t_payment_pages_checkout_session_total_details,
  t_payment_pages_checkout_session_total_details_resource_breakdown,
  t_payment_source,
  t_payout,
  t_paypal_seller_protection,
  t_period,
  t_person,
  t_person_future_requirements,
  t_person_relationship,
  t_person_requirements,
  t_plan,
  t_plan_tier,
  t_platform_tax_fee,
  t_portal_business_profile,
  t_portal_customer_update,
  t_portal_features,
  t_portal_flows_after_completion_hosted_confirmation,
  t_portal_flows_after_completion_redirect,
  t_portal_flows_coupon_offer,
  t_portal_flows_flow,
  t_portal_flows_flow_after_completion,
  t_portal_flows_flow_subscription_cancel,
  t_portal_flows_flow_subscription_update,
  t_portal_flows_flow_subscription_update_confirm,
  t_portal_flows_retention,
  t_portal_flows_subscription_update_confirm_discount,
  t_portal_flows_subscription_update_confirm_item,
  t_portal_invoice_list,
  t_portal_login_page,
  t_portal_payment_method_update,
  t_portal_subscription_cancel,
  t_portal_subscription_cancellation_reason,
  t_portal_subscription_pause,
  t_portal_subscription_update,
  t_portal_subscription_update_product,
  t_price,
  t_price_tier,
  t_product,
  t_product_feature,
  t_promotion_code,
  t_promotion_code_currency_option,
  t_promotion_codes_resource_restrictions,
  t_quote,
  t_quotes_resource_automatic_tax,
  t_quotes_resource_computed,
  t_quotes_resource_from_quote,
  t_quotes_resource_recurring,
  t_quotes_resource_status_transitions,
  t_quotes_resource_subscription_data_subscription_data,
  t_quotes_resource_total_details,
  t_quotes_resource_total_details_resource_breakdown,
  t_quotes_resource_transfer_data,
  t_quotes_resource_upfront,
  t_radar_early_fraud_warning,
  t_radar_radar_options,
  t_radar_review_resource_location,
  t_radar_review_resource_session,
  t_radar_value_list,
  t_radar_value_list_item,
  t_received_payment_method_details_financial_account,
  t_recurring,
  t_refund,
  t_refund_next_action,
  t_refund_next_action_display_details,
  t_reporting_report_run,
  t_reporting_report_type,
  t_reserve_transaction,
  t_review,
  t_rule,
  t_scheduled_query_run,
  t_schedules_phase_automatic_tax,
  t_secret_service_resource_scope,
  t_sepa_debit_generated_from,
  t_setup_attempt,
  t_setup_attempt_payment_method_details,
  t_setup_attempt_payment_method_details_acss_debit,
  t_setup_attempt_payment_method_details_au_becs_debit,
  t_setup_attempt_payment_method_details_bacs_debit,
  t_setup_attempt_payment_method_details_bancontact,
  t_setup_attempt_payment_method_details_boleto,
  t_setup_attempt_payment_method_details_card,
  t_setup_attempt_payment_method_details_card_present,
  t_setup_attempt_payment_method_details_card_wallet,
  t_setup_attempt_payment_method_details_cashapp,
  t_setup_attempt_payment_method_details_ideal,
  t_setup_attempt_payment_method_details_klarna,
  t_setup_attempt_payment_method_details_link,
  t_setup_attempt_payment_method_details_paypal,
  t_setup_attempt_payment_method_details_sepa_debit,
  t_setup_attempt_payment_method_details_sofort,
  t_setup_attempt_payment_method_details_us_bank_account,
  t_setup_intent,
  t_setup_intent_next_action,
  t_setup_intent_next_action_redirect_to_url,
  t_setup_intent_next_action_verify_with_microdeposits,
  t_setup_intent_payment_method_options,
  t_setup_intent_payment_method_options_acss_debit,
  t_setup_intent_payment_method_options_card,
  t_setup_intent_payment_method_options_card_mandate_options,
  t_setup_intent_payment_method_options_link,
  t_setup_intent_payment_method_options_mandate_options_acss_debit,
  t_setup_intent_payment_method_options_mandate_options_sepa_debit,
  t_setup_intent_payment_method_options_paypal,
  t_setup_intent_payment_method_options_sepa_debit,
  t_setup_intent_payment_method_options_us_bank_account,
  t_setup_intent_type_specific_payment_method_options_client,
  t_shipping,
  t_shipping_rate,
  t_shipping_rate_currency_option,
  t_shipping_rate_delivery_estimate,
  t_shipping_rate_delivery_estimate_bound,
  t_shipping_rate_fixed_amount,
  t_sigma_scheduled_query_run_error,
  t_source,
  t_source_code_verification_flow,
  t_source_mandate_notification,
  t_source_mandate_notification_acss_debit_data,
  t_source_mandate_notification_bacs_debit_data,
  t_source_mandate_notification_sepa_debit_data,
  t_source_order,
  t_source_order_item,
  t_source_owner,
  t_source_receiver_flow,
  t_source_redirect_flow,
  t_source_transaction,
  t_source_transaction_ach_credit_transfer_data,
  t_source_transaction_chf_credit_transfer_data,
  t_source_transaction_gbp_credit_transfer_data,
  t_source_transaction_paper_check_data,
  t_source_transaction_sepa_credit_transfer_data,
  t_source_type_ach_credit_transfer,
  t_source_type_ach_debit,
  t_source_type_acss_debit,
  t_source_type_alipay,
  t_source_type_au_becs_debit,
  t_source_type_bancontact,
  t_source_type_card,
  t_source_type_card_present,
  t_source_type_eps,
  t_source_type_giropay,
  t_source_type_ideal,
  t_source_type_klarna,
  t_source_type_multibanco,
  t_source_type_p24,
  t_source_type_sepa_debit,
  t_source_type_sofort,
  t_source_type_three_d_secure,
  t_source_type_wechat,
  t_subscription,
  t_subscription_automatic_tax,
  t_subscription_billing_thresholds,
  t_subscription_details_data,
  t_subscription_item,
  t_subscription_item_billing_thresholds,
  t_subscription_payment_method_options_card,
  t_subscription_pending_invoice_item_interval,
  t_subscription_schedule,
  t_subscription_schedule_add_invoice_item,
  t_subscription_schedule_configuration_item,
  t_subscription_schedule_current_phase,
  t_subscription_schedule_phase_configuration,
  t_subscription_schedules_resource_default_settings,
  t_subscription_schedules_resource_default_settings_automatic_tax,
  t_subscription_transfer_data,
  t_subscriptions_resource_pause_collection,
  t_subscriptions_resource_payment_method_options,
  t_subscriptions_resource_payment_settings,
  t_subscriptions_resource_pending_update,
  t_subscriptions_trials_resource_end_behavior,
  t_subscriptions_trials_resource_trial_settings,
  t_tax_calculation,
  t_tax_calculation_line_item,
  t_tax_code,
  t_tax_deducted_at_source,
  t_tax_id,
  t_tax_id_verification,
  t_tax_product_resource_customer_details,
  t_tax_product_resource_customer_details_resource_tax_id,
  t_tax_product_resource_jurisdiction,
  t_tax_product_resource_line_item_tax_breakdown,
  t_tax_product_resource_line_item_tax_rate_details,
  t_tax_product_resource_postal_address,
  t_tax_product_resource_tax_breakdown,
  t_tax_product_resource_tax_calculation_shipping_cost,
  t_tax_product_resource_tax_rate_details,
  t_tax_product_resource_tax_settings_defaults,
  t_tax_product_resource_tax_settings_head_office,
  t_tax_product_resource_tax_settings_status_details,
  t_tax_product_resource_tax_settings_status_details_resource_active,
  t_tax_product_resource_tax_settings_status_details_resource_pending,
  t_tax_product_resource_tax_transaction_line_item_resource_reversal,
  t_tax_product_resource_tax_transaction_resource_reversal,
  t_tax_product_resource_tax_transaction_shipping_cost,
  t_tax_rate,
  t_tax_settings,
  t_tax_transaction,
  t_tax_transaction_line_item,
  t_terminal_configuration,
  t_terminal_configuration_configuration_resource_currency_specific_config,
  t_terminal_configuration_configuration_resource_device_type_specific_config,
  t_terminal_configuration_configuration_resource_tipping,
  t_terminal_connection_token,
  t_terminal_location,
  t_terminal_reader,
  t_terminal_reader_reader_resource_cart,
  t_terminal_reader_reader_resource_line_item,
  t_terminal_reader_reader_resource_process_config,
  t_terminal_reader_reader_resource_process_payment_intent_action,
  t_terminal_reader_reader_resource_process_setup_config,
  t_terminal_reader_reader_resource_process_setup_intent_action,
  t_terminal_reader_reader_resource_reader_action,
  t_terminal_reader_reader_resource_refund_payment_action,
  t_terminal_reader_reader_resource_set_reader_display_action,
  t_terminal_reader_reader_resource_tipping_config,
  t_test_helpers_test_clock,
  t_three_d_secure_details,
  t_three_d_secure_details_charge,
  t_three_d_secure_usage,
  t_token,
  t_topup,
  t_transfer,
  t_transfer_data,
  t_transfer_reversal,
  t_transfer_schedule,
  t_transform_quantity,
  t_transform_usage,
  t_treasury_credit_reversal,
  t_treasury_debit_reversal,
  t_treasury_financial_account,
  t_treasury_financial_account_features,
  t_treasury_financial_accounts_resource_aba_record,
  t_treasury_financial_accounts_resource_aba_toggle_settings,
  t_treasury_financial_accounts_resource_ach_toggle_settings,
  t_treasury_financial_accounts_resource_balance,
  t_treasury_financial_accounts_resource_closed_status_details,
  t_treasury_financial_accounts_resource_financial_address,
  t_treasury_financial_accounts_resource_financial_addresses_features,
  t_treasury_financial_accounts_resource_inbound_transfers,
  t_treasury_financial_accounts_resource_outbound_payments,
  t_treasury_financial_accounts_resource_outbound_transfers,
  t_treasury_financial_accounts_resource_platform_restrictions,
  t_treasury_financial_accounts_resource_status_details,
  t_treasury_financial_accounts_resource_toggle_settings,
  t_treasury_financial_accounts_resource_toggles_setting_status_details,
  t_treasury_inbound_transfer,
  t_treasury_inbound_transfers_resource_failure_details,
  t_treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows,
  t_treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions,
  t_treasury_outbound_payment,
  t_treasury_outbound_payments_resource_outbound_payment_resource_end_user_details,
  t_treasury_outbound_payments_resource_outbound_payment_resource_status_transitions,
  t_treasury_outbound_payments_resource_returned_status,
  t_treasury_outbound_transfer,
  t_treasury_outbound_transfers_resource_returned_details,
  t_treasury_outbound_transfers_resource_status_transitions,
  t_treasury_received_credit,
  t_treasury_received_credits_resource_linked_flows,
  t_treasury_received_credits_resource_reversal_details,
  t_treasury_received_credits_resource_source_flows_details,
  t_treasury_received_credits_resource_status_transitions,
  t_treasury_received_debit,
  t_treasury_received_debits_resource_debit_reversal_linked_flows,
  t_treasury_received_debits_resource_linked_flows,
  t_treasury_received_debits_resource_reversal_details,
  t_treasury_received_debits_resource_status_transitions,
  t_treasury_shared_resource_billing_details,
  t_treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details,
  t_treasury_shared_resource_initiating_payment_method_details_us_bank_account,
  t_treasury_transaction,
  t_treasury_transaction_entry,
  t_treasury_transactions_resource_abstract_transaction_resource_status_transitions,
  t_treasury_transactions_resource_balance_impact,
  t_treasury_transactions_resource_flow_details,
  t_us_bank_account_networks,
  t_usage_record,
  t_usage_record_summary,
  t_verification_session_redaction,
  t_webhook_endpoint,
} from "./models"
import {
  s_account,
  s_account_link,
  s_account_session,
  s_apple_pay_domain,
  s_application_fee,
  s_apps_secret,
  s_balance,
  s_balance_transaction,
  s_bank_account,
  s_billing_portal_configuration,
  s_billing_portal_session,
  s_capability,
  s_card,
  s_cash_balance,
  s_charge,
  s_checkout_session,
  s_country_spec,
  s_coupon,
  s_credit_note,
  s_credit_note_line_item,
  s_customer,
  s_customer_balance_transaction,
  s_customer_cash_balance_transaction,
  s_deleted_account,
  s_deleted_apple_pay_domain,
  s_deleted_coupon,
  s_deleted_customer,
  s_deleted_discount,
  s_deleted_external_account,
  s_deleted_invoice,
  s_deleted_invoiceitem,
  s_deleted_payment_source,
  s_deleted_person,
  s_deleted_plan,
  s_deleted_product,
  s_deleted_radar_value_list,
  s_deleted_radar_value_list_item,
  s_deleted_subscription_item,
  s_deleted_tax_id,
  s_deleted_terminal_configuration,
  s_deleted_terminal_location,
  s_deleted_terminal_reader,
  s_deleted_test_helpers_test_clock,
  s_deleted_webhook_endpoint,
  s_discount,
  s_dispute,
  s_ephemeral_key,
  s_error,
  s_event,
  s_exchange_rate,
  s_external_account,
  s_fee_refund,
  s_file,
  s_file_link,
  s_financial_connections_account,
  s_financial_connections_account_owner,
  s_financial_connections_session,
  s_funding_instructions,
  s_identity_verification_report,
  s_identity_verification_session,
  s_invoice,
  s_invoiceitem,
  s_issuing_authorization,
  s_issuing_card,
  s_issuing_cardholder,
  s_issuing_dispute,
  s_issuing_settlement,
  s_issuing_transaction,
  s_item,
  s_line_item,
  s_login_link,
  s_mandate,
  s_payment_intent,
  s_payment_link,
  s_payment_method,
  s_payment_method_configuration,
  s_payment_method_domain,
  s_payment_source,
  s_payout,
  s_person,
  s_plan,
  s_price,
  s_product,
  s_promotion_code,
  s_quote,
  s_radar_early_fraud_warning,
  s_radar_value_list,
  s_radar_value_list_item,
  s_refund,
  s_reporting_report_run,
  s_reporting_report_type,
  s_review,
  s_scheduled_query_run,
  s_setup_attempt,
  s_setup_intent,
  s_shipping_rate,
  s_source,
  s_source_mandate_notification,
  s_source_transaction,
  s_subscription,
  s_subscription_item,
  s_subscription_schedule,
  s_tax_calculation,
  s_tax_calculation_line_item,
  s_tax_code,
  s_tax_id,
  s_tax_rate,
  s_tax_settings,
  s_tax_transaction,
  s_tax_transaction_line_item,
  s_terminal_configuration,
  s_terminal_connection_token,
  s_terminal_location,
  s_terminal_reader,
  s_test_helpers_test_clock,
  s_token,
  s_topup,
  s_transfer,
  s_transfer_reversal,
  s_treasury_credit_reversal,
  s_treasury_debit_reversal,
  s_treasury_financial_account,
  s_treasury_financial_account_features,
  s_treasury_inbound_transfer,
  s_treasury_outbound_payment,
  s_treasury_outbound_transfer,
  s_treasury_received_credit,
  s_treasury_received_debit,
  s_treasury_transaction,
  s_treasury_transaction_entry,
  s_usage_record,
  s_usage_record_summary,
  s_webhook_endpoint,
} from "./schemas"
import KoaRouter from "@koa/router"
import {
  Response,
  ServerConfig,
  StatusCode,
  StatusCode2xx,
  StatusCode3xx,
  StatusCode4xx,
  StatusCode5xx,
  startServer,
} from "@nahkies/typescript-koa-runtime/server"
import {
  Params,
  parseRequestInput,
  responseValidationFactory,
} from "@nahkies/typescript-koa-runtime/zod"
import { Context } from "koa"
import koaBody from "koa-body"
import { z } from "zod"

//region safe-edit-region-header

//endregion safe-edit-region-header
export type GetAccount = (
  params: Params<
    void,
    t_GetAccountQuerySchema,
    t_GetAccountBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_account> | Response<StatusCode, t_error>>

export type PostAccountLinks = (
  params: Params<void, void, t_PostAccountLinksBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_account_link> | Response<StatusCode, t_error>>

export type PostAccountSessions = (
  params: Params<void, void, t_PostAccountSessionsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_account_session> | Response<StatusCode, t_error>>

export type GetAccounts = (
  params: Params<
    void,
    t_GetAccountsQuerySchema,
    t_GetAccountsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_account[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostAccounts = (
  params: Params<void, void, t_PostAccountsBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_account> | Response<StatusCode, t_error>>

export type DeleteAccountsAccount = (
  params: Params<
    t_DeleteAccountsAccountParamSchema,
    void,
    t_DeleteAccountsAccountBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_deleted_account> | Response<StatusCode, t_error>>

export type GetAccountsAccount = (
  params: Params<
    t_GetAccountsAccountParamSchema,
    t_GetAccountsAccountQuerySchema,
    t_GetAccountsAccountBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_account> | Response<StatusCode, t_error>>

export type PostAccountsAccount = (
  params: Params<
    t_PostAccountsAccountParamSchema,
    void,
    t_PostAccountsAccountBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_account> | Response<StatusCode, t_error>>

export type PostAccountsAccountBankAccounts = (
  params: Params<
    t_PostAccountsAccountBankAccountsParamSchema,
    void,
    t_PostAccountsAccountBankAccountsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_external_account> | Response<StatusCode, t_error>>

export type DeleteAccountsAccountBankAccountsId = (
  params: Params<
    t_DeleteAccountsAccountBankAccountsIdParamSchema,
    void,
    t_DeleteAccountsAccountBankAccountsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_deleted_external_account> | Response<StatusCode, t_error>
>

export type GetAccountsAccountBankAccountsId = (
  params: Params<
    t_GetAccountsAccountBankAccountsIdParamSchema,
    t_GetAccountsAccountBankAccountsIdQuerySchema,
    t_GetAccountsAccountBankAccountsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_external_account> | Response<StatusCode, t_error>>

export type PostAccountsAccountBankAccountsId = (
  params: Params<
    t_PostAccountsAccountBankAccountsIdParamSchema,
    void,
    t_PostAccountsAccountBankAccountsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_external_account> | Response<StatusCode, t_error>>

export type GetAccountsAccountCapabilities = (
  params: Params<
    t_GetAccountsAccountCapabilitiesParamSchema,
    t_GetAccountsAccountCapabilitiesQuerySchema,
    t_GetAccountsAccountCapabilitiesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_capability[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetAccountsAccountCapabilitiesCapability = (
  params: Params<
    t_GetAccountsAccountCapabilitiesCapabilityParamSchema,
    t_GetAccountsAccountCapabilitiesCapabilityQuerySchema,
    t_GetAccountsAccountCapabilitiesCapabilityBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_capability> | Response<StatusCode, t_error>>

export type PostAccountsAccountCapabilitiesCapability = (
  params: Params<
    t_PostAccountsAccountCapabilitiesCapabilityParamSchema,
    void,
    t_PostAccountsAccountCapabilitiesCapabilityBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_capability> | Response<StatusCode, t_error>>

export type GetAccountsAccountExternalAccounts = (
  params: Params<
    t_GetAccountsAccountExternalAccountsParamSchema,
    t_GetAccountsAccountExternalAccountsQuerySchema,
    t_GetAccountsAccountExternalAccountsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: (t_bank_account | t_card)[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostAccountsAccountExternalAccounts = (
  params: Params<
    t_PostAccountsAccountExternalAccountsParamSchema,
    void,
    t_PostAccountsAccountExternalAccountsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_external_account> | Response<StatusCode, t_error>>

export type DeleteAccountsAccountExternalAccountsId = (
  params: Params<
    t_DeleteAccountsAccountExternalAccountsIdParamSchema,
    void,
    t_DeleteAccountsAccountExternalAccountsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_deleted_external_account> | Response<StatusCode, t_error>
>

export type GetAccountsAccountExternalAccountsId = (
  params: Params<
    t_GetAccountsAccountExternalAccountsIdParamSchema,
    t_GetAccountsAccountExternalAccountsIdQuerySchema,
    t_GetAccountsAccountExternalAccountsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_external_account> | Response<StatusCode, t_error>>

export type PostAccountsAccountExternalAccountsId = (
  params: Params<
    t_PostAccountsAccountExternalAccountsIdParamSchema,
    void,
    t_PostAccountsAccountExternalAccountsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_external_account> | Response<StatusCode, t_error>>

export type PostAccountsAccountLoginLinks = (
  params: Params<
    t_PostAccountsAccountLoginLinksParamSchema,
    void,
    t_PostAccountsAccountLoginLinksBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_login_link> | Response<StatusCode, t_error>>

export type GetAccountsAccountPeople = (
  params: Params<
    t_GetAccountsAccountPeopleParamSchema,
    t_GetAccountsAccountPeopleQuerySchema,
    t_GetAccountsAccountPeopleBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_person[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostAccountsAccountPeople = (
  params: Params<
    t_PostAccountsAccountPeopleParamSchema,
    void,
    t_PostAccountsAccountPeopleBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_person> | Response<StatusCode, t_error>>

export type DeleteAccountsAccountPeoplePerson = (
  params: Params<
    t_DeleteAccountsAccountPeoplePersonParamSchema,
    void,
    t_DeleteAccountsAccountPeoplePersonBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_deleted_person> | Response<StatusCode, t_error>>

export type GetAccountsAccountPeoplePerson = (
  params: Params<
    t_GetAccountsAccountPeoplePersonParamSchema,
    t_GetAccountsAccountPeoplePersonQuerySchema,
    t_GetAccountsAccountPeoplePersonBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_person> | Response<StatusCode, t_error>>

export type PostAccountsAccountPeoplePerson = (
  params: Params<
    t_PostAccountsAccountPeoplePersonParamSchema,
    void,
    t_PostAccountsAccountPeoplePersonBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_person> | Response<StatusCode, t_error>>

export type GetAccountsAccountPersons = (
  params: Params<
    t_GetAccountsAccountPersonsParamSchema,
    t_GetAccountsAccountPersonsQuerySchema,
    t_GetAccountsAccountPersonsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_person[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostAccountsAccountPersons = (
  params: Params<
    t_PostAccountsAccountPersonsParamSchema,
    void,
    t_PostAccountsAccountPersonsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_person> | Response<StatusCode, t_error>>

export type DeleteAccountsAccountPersonsPerson = (
  params: Params<
    t_DeleteAccountsAccountPersonsPersonParamSchema,
    void,
    t_DeleteAccountsAccountPersonsPersonBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_deleted_person> | Response<StatusCode, t_error>>

export type GetAccountsAccountPersonsPerson = (
  params: Params<
    t_GetAccountsAccountPersonsPersonParamSchema,
    t_GetAccountsAccountPersonsPersonQuerySchema,
    t_GetAccountsAccountPersonsPersonBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_person> | Response<StatusCode, t_error>>

export type PostAccountsAccountPersonsPerson = (
  params: Params<
    t_PostAccountsAccountPersonsPersonParamSchema,
    void,
    t_PostAccountsAccountPersonsPersonBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_person> | Response<StatusCode, t_error>>

export type PostAccountsAccountReject = (
  params: Params<
    t_PostAccountsAccountRejectParamSchema,
    void,
    t_PostAccountsAccountRejectBodySchema
  >,
  ctx: Context,
) => Promise<Response<200, t_account> | Response<StatusCode, t_error>>

export type GetApplePayDomains = (
  params: Params<
    void,
    t_GetApplePayDomainsQuerySchema,
    t_GetApplePayDomainsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_apple_pay_domain[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostApplePayDomains = (
  params: Params<void, void, t_PostApplePayDomainsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_apple_pay_domain> | Response<StatusCode, t_error>>

export type DeleteApplePayDomainsDomain = (
  params: Params<
    t_DeleteApplePayDomainsDomainParamSchema,
    void,
    t_DeleteApplePayDomainsDomainBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_deleted_apple_pay_domain> | Response<StatusCode, t_error>
>

export type GetApplePayDomainsDomain = (
  params: Params<
    t_GetApplePayDomainsDomainParamSchema,
    t_GetApplePayDomainsDomainQuerySchema,
    t_GetApplePayDomainsDomainBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_apple_pay_domain> | Response<StatusCode, t_error>>

export type GetApplicationFees = (
  params: Params<
    void,
    t_GetApplicationFeesQuerySchema,
    t_GetApplicationFeesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_application_fee[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetApplicationFeesFeeRefundsId = (
  params: Params<
    t_GetApplicationFeesFeeRefundsIdParamSchema,
    t_GetApplicationFeesFeeRefundsIdQuerySchema,
    t_GetApplicationFeesFeeRefundsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_fee_refund> | Response<StatusCode, t_error>>

export type PostApplicationFeesFeeRefundsId = (
  params: Params<
    t_PostApplicationFeesFeeRefundsIdParamSchema,
    void,
    t_PostApplicationFeesFeeRefundsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_fee_refund> | Response<StatusCode, t_error>>

export type GetApplicationFeesId = (
  params: Params<
    t_GetApplicationFeesIdParamSchema,
    t_GetApplicationFeesIdQuerySchema,
    t_GetApplicationFeesIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_application_fee> | Response<StatusCode, t_error>>

export type PostApplicationFeesIdRefund = (
  params: Params<
    t_PostApplicationFeesIdRefundParamSchema,
    void,
    t_PostApplicationFeesIdRefundBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_application_fee> | Response<StatusCode, t_error>>

export type GetApplicationFeesIdRefunds = (
  params: Params<
    t_GetApplicationFeesIdRefundsParamSchema,
    t_GetApplicationFeesIdRefundsQuerySchema,
    t_GetApplicationFeesIdRefundsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_fee_refund[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostApplicationFeesIdRefunds = (
  params: Params<
    t_PostApplicationFeesIdRefundsParamSchema,
    void,
    t_PostApplicationFeesIdRefundsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_fee_refund> | Response<StatusCode, t_error>>

export type GetAppsSecrets = (
  params: Params<
    void,
    t_GetAppsSecretsQuerySchema,
    t_GetAppsSecretsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_apps_secret[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostAppsSecrets = (
  params: Params<void, void, t_PostAppsSecretsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_apps_secret> | Response<StatusCode, t_error>>

export type PostAppsSecretsDelete = (
  params: Params<void, void, t_PostAppsSecretsDeleteBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_apps_secret> | Response<StatusCode, t_error>>

export type GetAppsSecretsFind = (
  params: Params<
    void,
    t_GetAppsSecretsFindQuerySchema,
    t_GetAppsSecretsFindBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_apps_secret> | Response<StatusCode, t_error>>

export type GetBalance = (
  params: Params<
    void,
    t_GetBalanceQuerySchema,
    t_GetBalanceBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_balance> | Response<StatusCode, t_error>>

export type GetBalanceHistory = (
  params: Params<
    void,
    t_GetBalanceHistoryQuerySchema,
    t_GetBalanceHistoryBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_balance_transaction[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetBalanceHistoryId = (
  params: Params<
    t_GetBalanceHistoryIdParamSchema,
    t_GetBalanceHistoryIdQuerySchema,
    t_GetBalanceHistoryIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_balance_transaction> | Response<StatusCode, t_error>
>

export type GetBalanceTransactions = (
  params: Params<
    void,
    t_GetBalanceTransactionsQuerySchema,
    t_GetBalanceTransactionsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_balance_transaction[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetBalanceTransactionsId = (
  params: Params<
    t_GetBalanceTransactionsIdParamSchema,
    t_GetBalanceTransactionsIdQuerySchema,
    t_GetBalanceTransactionsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_balance_transaction> | Response<StatusCode, t_error>
>

export type GetBillingPortalConfigurations = (
  params: Params<
    void,
    t_GetBillingPortalConfigurationsQuerySchema,
    t_GetBillingPortalConfigurationsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_billing_portal_configuration[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostBillingPortalConfigurations = (
  params: Params<void, void, t_PostBillingPortalConfigurationsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_billing_portal_configuration> | Response<StatusCode, t_error>
>

export type GetBillingPortalConfigurationsConfiguration = (
  params: Params<
    t_GetBillingPortalConfigurationsConfigurationParamSchema,
    t_GetBillingPortalConfigurationsConfigurationQuerySchema,
    t_GetBillingPortalConfigurationsConfigurationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_billing_portal_configuration> | Response<StatusCode, t_error>
>

export type PostBillingPortalConfigurationsConfiguration = (
  params: Params<
    t_PostBillingPortalConfigurationsConfigurationParamSchema,
    void,
    t_PostBillingPortalConfigurationsConfigurationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_billing_portal_configuration> | Response<StatusCode, t_error>
>

export type PostBillingPortalSessions = (
  params: Params<void, void, t_PostBillingPortalSessionsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_billing_portal_session> | Response<StatusCode, t_error>
>

export type GetCharges = (
  params: Params<
    void,
    t_GetChargesQuerySchema,
    t_GetChargesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_charge[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostCharges = (
  params: Params<void, void, t_PostChargesBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_charge> | Response<StatusCode, t_error>>

export type GetChargesSearch = (
  params: Params<
    void,
    t_GetChargesSearchQuerySchema,
    t_GetChargesSearchBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_charge[]
        has_more: boolean
        next_page?: string | null
        object: "search_result"
        total_count?: number
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetChargesCharge = (
  params: Params<
    t_GetChargesChargeParamSchema,
    t_GetChargesChargeQuerySchema,
    t_GetChargesChargeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_charge> | Response<StatusCode, t_error>>

export type PostChargesCharge = (
  params: Params<
    t_PostChargesChargeParamSchema,
    void,
    t_PostChargesChargeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_charge> | Response<StatusCode, t_error>>

export type PostChargesChargeCapture = (
  params: Params<
    t_PostChargesChargeCaptureParamSchema,
    void,
    t_PostChargesChargeCaptureBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_charge> | Response<StatusCode, t_error>>

export type GetChargesChargeDispute = (
  params: Params<
    t_GetChargesChargeDisputeParamSchema,
    t_GetChargesChargeDisputeQuerySchema,
    t_GetChargesChargeDisputeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_dispute> | Response<StatusCode, t_error>>

export type PostChargesChargeDispute = (
  params: Params<
    t_PostChargesChargeDisputeParamSchema,
    void,
    t_PostChargesChargeDisputeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_dispute> | Response<StatusCode, t_error>>

export type PostChargesChargeDisputeClose = (
  params: Params<
    t_PostChargesChargeDisputeCloseParamSchema,
    void,
    t_PostChargesChargeDisputeCloseBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_dispute> | Response<StatusCode, t_error>>

export type PostChargesChargeRefund = (
  params: Params<
    t_PostChargesChargeRefundParamSchema,
    void,
    t_PostChargesChargeRefundBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_charge> | Response<StatusCode, t_error>>

export type GetChargesChargeRefunds = (
  params: Params<
    t_GetChargesChargeRefundsParamSchema,
    t_GetChargesChargeRefundsQuerySchema,
    t_GetChargesChargeRefundsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_refund[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostChargesChargeRefunds = (
  params: Params<
    t_PostChargesChargeRefundsParamSchema,
    void,
    t_PostChargesChargeRefundsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_refund> | Response<StatusCode, t_error>>

export type GetChargesChargeRefundsRefund = (
  params: Params<
    t_GetChargesChargeRefundsRefundParamSchema,
    t_GetChargesChargeRefundsRefundQuerySchema,
    t_GetChargesChargeRefundsRefundBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_refund> | Response<StatusCode, t_error>>

export type PostChargesChargeRefundsRefund = (
  params: Params<
    t_PostChargesChargeRefundsRefundParamSchema,
    void,
    t_PostChargesChargeRefundsRefundBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_refund> | Response<StatusCode, t_error>>

export type GetCheckoutSessions = (
  params: Params<
    void,
    t_GetCheckoutSessionsQuerySchema,
    t_GetCheckoutSessionsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_checkout_session[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostCheckoutSessions = (
  params: Params<void, void, t_PostCheckoutSessionsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_checkout_session> | Response<StatusCode, t_error>>

export type GetCheckoutSessionsSession = (
  params: Params<
    t_GetCheckoutSessionsSessionParamSchema,
    t_GetCheckoutSessionsSessionQuerySchema,
    t_GetCheckoutSessionsSessionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_checkout_session> | Response<StatusCode, t_error>>

export type PostCheckoutSessionsSessionExpire = (
  params: Params<
    t_PostCheckoutSessionsSessionExpireParamSchema,
    void,
    t_PostCheckoutSessionsSessionExpireBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_checkout_session> | Response<StatusCode, t_error>>

export type GetCheckoutSessionsSessionLineItems = (
  params: Params<
    t_GetCheckoutSessionsSessionLineItemsParamSchema,
    t_GetCheckoutSessionsSessionLineItemsQuerySchema,
    t_GetCheckoutSessionsSessionLineItemsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetCountrySpecs = (
  params: Params<
    void,
    t_GetCountrySpecsQuerySchema,
    t_GetCountrySpecsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_country_spec[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetCountrySpecsCountry = (
  params: Params<
    t_GetCountrySpecsCountryParamSchema,
    t_GetCountrySpecsCountryQuerySchema,
    t_GetCountrySpecsCountryBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_country_spec> | Response<StatusCode, t_error>>

export type GetCoupons = (
  params: Params<
    void,
    t_GetCouponsQuerySchema,
    t_GetCouponsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_coupon[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostCoupons = (
  params: Params<void, void, t_PostCouponsBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_coupon> | Response<StatusCode, t_error>>

export type DeleteCouponsCoupon = (
  params: Params<
    t_DeleteCouponsCouponParamSchema,
    void,
    t_DeleteCouponsCouponBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_deleted_coupon> | Response<StatusCode, t_error>>

export type GetCouponsCoupon = (
  params: Params<
    t_GetCouponsCouponParamSchema,
    t_GetCouponsCouponQuerySchema,
    t_GetCouponsCouponBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_coupon> | Response<StatusCode, t_error>>

export type PostCouponsCoupon = (
  params: Params<
    t_PostCouponsCouponParamSchema,
    void,
    t_PostCouponsCouponBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_coupon> | Response<StatusCode, t_error>>

export type GetCreditNotes = (
  params: Params<
    void,
    t_GetCreditNotesQuerySchema,
    t_GetCreditNotesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_credit_note[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostCreditNotes = (
  params: Params<void, void, t_PostCreditNotesBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_credit_note> | Response<StatusCode, t_error>>

export type GetCreditNotesPreview = (
  params: Params<
    void,
    t_GetCreditNotesPreviewQuerySchema,
    t_GetCreditNotesPreviewBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_credit_note> | Response<StatusCode, t_error>>

export type GetCreditNotesPreviewLines = (
  params: Params<
    void,
    t_GetCreditNotesPreviewLinesQuerySchema,
    t_GetCreditNotesPreviewLinesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_credit_note_line_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetCreditNotesCreditNoteLines = (
  params: Params<
    t_GetCreditNotesCreditNoteLinesParamSchema,
    t_GetCreditNotesCreditNoteLinesQuerySchema,
    t_GetCreditNotesCreditNoteLinesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_credit_note_line_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetCreditNotesId = (
  params: Params<
    t_GetCreditNotesIdParamSchema,
    t_GetCreditNotesIdQuerySchema,
    t_GetCreditNotesIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_credit_note> | Response<StatusCode, t_error>>

export type PostCreditNotesId = (
  params: Params<
    t_PostCreditNotesIdParamSchema,
    void,
    t_PostCreditNotesIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_credit_note> | Response<StatusCode, t_error>>

export type PostCreditNotesIdVoid = (
  params: Params<
    t_PostCreditNotesIdVoidParamSchema,
    void,
    t_PostCreditNotesIdVoidBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_credit_note> | Response<StatusCode, t_error>>

export type GetCustomers = (
  params: Params<
    void,
    t_GetCustomersQuerySchema,
    t_GetCustomersBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_customer[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostCustomers = (
  params: Params<void, void, t_PostCustomersBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_customer> | Response<StatusCode, t_error>>

export type GetCustomersSearch = (
  params: Params<
    void,
    t_GetCustomersSearchQuerySchema,
    t_GetCustomersSearchBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_customer[]
        has_more: boolean
        next_page?: string | null
        object: "search_result"
        total_count?: number
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type DeleteCustomersCustomer = (
  params: Params<
    t_DeleteCustomersCustomerParamSchema,
    void,
    t_DeleteCustomersCustomerBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_deleted_customer> | Response<StatusCode, t_error>>

export type GetCustomersCustomer = (
  params: Params<
    t_GetCustomersCustomerParamSchema,
    t_GetCustomersCustomerQuerySchema,
    t_GetCustomersCustomerBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_customer | t_deleted_customer> | Response<StatusCode, t_error>
>

export type PostCustomersCustomer = (
  params: Params<
    t_PostCustomersCustomerParamSchema,
    void,
    t_PostCustomersCustomerBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_customer> | Response<StatusCode, t_error>>

export type GetCustomersCustomerBalanceTransactions = (
  params: Params<
    t_GetCustomersCustomerBalanceTransactionsParamSchema,
    t_GetCustomersCustomerBalanceTransactionsQuerySchema,
    t_GetCustomersCustomerBalanceTransactionsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_customer_balance_transaction[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostCustomersCustomerBalanceTransactions = (
  params: Params<
    t_PostCustomersCustomerBalanceTransactionsParamSchema,
    void,
    t_PostCustomersCustomerBalanceTransactionsBodySchema
  >,
  ctx: Context,
) => Promise<
  Response<200, t_customer_balance_transaction> | Response<StatusCode, t_error>
>

export type GetCustomersCustomerBalanceTransactionsTransaction = (
  params: Params<
    t_GetCustomersCustomerBalanceTransactionsTransactionParamSchema,
    t_GetCustomersCustomerBalanceTransactionsTransactionQuerySchema,
    t_GetCustomersCustomerBalanceTransactionsTransactionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_customer_balance_transaction> | Response<StatusCode, t_error>
>

export type PostCustomersCustomerBalanceTransactionsTransaction = (
  params: Params<
    t_PostCustomersCustomerBalanceTransactionsTransactionParamSchema,
    void,
    t_PostCustomersCustomerBalanceTransactionsTransactionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_customer_balance_transaction> | Response<StatusCode, t_error>
>

export type GetCustomersCustomerBankAccounts = (
  params: Params<
    t_GetCustomersCustomerBankAccountsParamSchema,
    t_GetCustomersCustomerBankAccountsQuerySchema,
    t_GetCustomersCustomerBankAccountsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_bank_account[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostCustomersCustomerBankAccounts = (
  params: Params<
    t_PostCustomersCustomerBankAccountsParamSchema,
    void,
    t_PostCustomersCustomerBankAccountsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_source> | Response<StatusCode, t_error>>

export type DeleteCustomersCustomerBankAccountsId = (
  params: Params<
    t_DeleteCustomersCustomerBankAccountsIdParamSchema,
    void,
    t_DeleteCustomersCustomerBankAccountsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_payment_source | t_deleted_payment_source>
  | Response<StatusCode, t_error>
>

export type GetCustomersCustomerBankAccountsId = (
  params: Params<
    t_GetCustomersCustomerBankAccountsIdParamSchema,
    t_GetCustomersCustomerBankAccountsIdQuerySchema,
    t_GetCustomersCustomerBankAccountsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_bank_account> | Response<StatusCode, t_error>>

export type PostCustomersCustomerBankAccountsId = (
  params: Params<
    t_PostCustomersCustomerBankAccountsIdParamSchema,
    void,
    t_PostCustomersCustomerBankAccountsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_card | t_bank_account | t_source>
  | Response<StatusCode, t_error>
>

export type PostCustomersCustomerBankAccountsIdVerify = (
  params: Params<
    t_PostCustomersCustomerBankAccountsIdVerifyParamSchema,
    void,
    t_PostCustomersCustomerBankAccountsIdVerifyBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_bank_account> | Response<StatusCode, t_error>>

export type GetCustomersCustomerCards = (
  params: Params<
    t_GetCustomersCustomerCardsParamSchema,
    t_GetCustomersCustomerCardsQuerySchema,
    t_GetCustomersCustomerCardsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_card[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostCustomersCustomerCards = (
  params: Params<
    t_PostCustomersCustomerCardsParamSchema,
    void,
    t_PostCustomersCustomerCardsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_source> | Response<StatusCode, t_error>>

export type DeleteCustomersCustomerCardsId = (
  params: Params<
    t_DeleteCustomersCustomerCardsIdParamSchema,
    void,
    t_DeleteCustomersCustomerCardsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_payment_source | t_deleted_payment_source>
  | Response<StatusCode, t_error>
>

export type GetCustomersCustomerCardsId = (
  params: Params<
    t_GetCustomersCustomerCardsIdParamSchema,
    t_GetCustomersCustomerCardsIdQuerySchema,
    t_GetCustomersCustomerCardsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_card> | Response<StatusCode, t_error>>

export type PostCustomersCustomerCardsId = (
  params: Params<
    t_PostCustomersCustomerCardsIdParamSchema,
    void,
    t_PostCustomersCustomerCardsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_card | t_bank_account | t_source>
  | Response<StatusCode, t_error>
>

export type GetCustomersCustomerCashBalance = (
  params: Params<
    t_GetCustomersCustomerCashBalanceParamSchema,
    t_GetCustomersCustomerCashBalanceQuerySchema,
    t_GetCustomersCustomerCashBalanceBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_cash_balance> | Response<StatusCode, t_error>>

export type PostCustomersCustomerCashBalance = (
  params: Params<
    t_PostCustomersCustomerCashBalanceParamSchema,
    void,
    t_PostCustomersCustomerCashBalanceBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_cash_balance> | Response<StatusCode, t_error>>

export type GetCustomersCustomerCashBalanceTransactions = (
  params: Params<
    t_GetCustomersCustomerCashBalanceTransactionsParamSchema,
    t_GetCustomersCustomerCashBalanceTransactionsQuerySchema,
    t_GetCustomersCustomerCashBalanceTransactionsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_customer_cash_balance_transaction[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetCustomersCustomerCashBalanceTransactionsTransaction = (
  params: Params<
    t_GetCustomersCustomerCashBalanceTransactionsTransactionParamSchema,
    t_GetCustomersCustomerCashBalanceTransactionsTransactionQuerySchema,
    | t_GetCustomersCustomerCashBalanceTransactionsTransactionBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_customer_cash_balance_transaction>
  | Response<StatusCode, t_error>
>

export type DeleteCustomersCustomerDiscount = (
  params: Params<
    t_DeleteCustomersCustomerDiscountParamSchema,
    void,
    t_DeleteCustomersCustomerDiscountBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_deleted_discount> | Response<StatusCode, t_error>>

export type GetCustomersCustomerDiscount = (
  params: Params<
    t_GetCustomersCustomerDiscountParamSchema,
    t_GetCustomersCustomerDiscountQuerySchema,
    t_GetCustomersCustomerDiscountBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_discount> | Response<StatusCode, t_error>>

export type PostCustomersCustomerFundingInstructions = (
  params: Params<
    t_PostCustomersCustomerFundingInstructionsParamSchema,
    void,
    t_PostCustomersCustomerFundingInstructionsBodySchema
  >,
  ctx: Context,
) => Promise<
  Response<200, t_funding_instructions> | Response<StatusCode, t_error>
>

export type GetCustomersCustomerPaymentMethods = (
  params: Params<
    t_GetCustomersCustomerPaymentMethodsParamSchema,
    t_GetCustomersCustomerPaymentMethodsQuerySchema,
    t_GetCustomersCustomerPaymentMethodsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_payment_method[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetCustomersCustomerPaymentMethodsPaymentMethod = (
  params: Params<
    t_GetCustomersCustomerPaymentMethodsPaymentMethodParamSchema,
    t_GetCustomersCustomerPaymentMethodsPaymentMethodQuerySchema,
    t_GetCustomersCustomerPaymentMethodsPaymentMethodBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_method> | Response<StatusCode, t_error>>

export type GetCustomersCustomerSources = (
  params: Params<
    t_GetCustomersCustomerSourcesParamSchema,
    t_GetCustomersCustomerSourcesQuerySchema,
    t_GetCustomersCustomerSourcesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: (t_bank_account | t_card | t_source)[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostCustomersCustomerSources = (
  params: Params<
    t_PostCustomersCustomerSourcesParamSchema,
    void,
    t_PostCustomersCustomerSourcesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_source> | Response<StatusCode, t_error>>

export type DeleteCustomersCustomerSourcesId = (
  params: Params<
    t_DeleteCustomersCustomerSourcesIdParamSchema,
    void,
    t_DeleteCustomersCustomerSourcesIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_payment_source | t_deleted_payment_source>
  | Response<StatusCode, t_error>
>

export type GetCustomersCustomerSourcesId = (
  params: Params<
    t_GetCustomersCustomerSourcesIdParamSchema,
    t_GetCustomersCustomerSourcesIdQuerySchema,
    t_GetCustomersCustomerSourcesIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_source> | Response<StatusCode, t_error>>

export type PostCustomersCustomerSourcesId = (
  params: Params<
    t_PostCustomersCustomerSourcesIdParamSchema,
    void,
    t_PostCustomersCustomerSourcesIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_card | t_bank_account | t_source>
  | Response<StatusCode, t_error>
>

export type PostCustomersCustomerSourcesIdVerify = (
  params: Params<
    t_PostCustomersCustomerSourcesIdVerifyParamSchema,
    void,
    t_PostCustomersCustomerSourcesIdVerifyBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_bank_account> | Response<StatusCode, t_error>>

export type GetCustomersCustomerSubscriptions = (
  params: Params<
    t_GetCustomersCustomerSubscriptionsParamSchema,
    t_GetCustomersCustomerSubscriptionsQuerySchema,
    t_GetCustomersCustomerSubscriptionsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_subscription[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostCustomersCustomerSubscriptions = (
  params: Params<
    t_PostCustomersCustomerSubscriptionsParamSchema,
    void,
    t_PostCustomersCustomerSubscriptionsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_subscription> | Response<StatusCode, t_error>>

export type DeleteCustomersCustomerSubscriptionsSubscriptionExposedId = (
  params: Params<
    t_DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema,
    void,
    | t_DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_subscription> | Response<StatusCode, t_error>>

export type GetCustomersCustomerSubscriptionsSubscriptionExposedId = (
  params: Params<
    t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema,
    t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdQuerySchema,
    | t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_subscription> | Response<StatusCode, t_error>>

export type PostCustomersCustomerSubscriptionsSubscriptionExposedId = (
  params: Params<
    t_PostCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema,
    void,
    | t_PostCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_subscription> | Response<StatusCode, t_error>>

export type DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount =
  (
    params: Params<
      t_DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamSchema,
      void,
      | t_DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountBodySchema
      | undefined
    >,
    ctx: Context,
  ) => Promise<
    Response<200, t_deleted_discount> | Response<StatusCode, t_error>
  >

export type GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount = (
  params: Params<
    t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamSchema,
    t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountQuerySchema,
    | t_GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_discount> | Response<StatusCode, t_error>>

export type GetCustomersCustomerTaxIds = (
  params: Params<
    t_GetCustomersCustomerTaxIdsParamSchema,
    t_GetCustomersCustomerTaxIdsQuerySchema,
    t_GetCustomersCustomerTaxIdsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_tax_id[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostCustomersCustomerTaxIds = (
  params: Params<
    t_PostCustomersCustomerTaxIdsParamSchema,
    void,
    t_PostCustomersCustomerTaxIdsBodySchema
  >,
  ctx: Context,
) => Promise<Response<200, t_tax_id> | Response<StatusCode, t_error>>

export type DeleteCustomersCustomerTaxIdsId = (
  params: Params<
    t_DeleteCustomersCustomerTaxIdsIdParamSchema,
    void,
    t_DeleteCustomersCustomerTaxIdsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_deleted_tax_id> | Response<StatusCode, t_error>>

export type GetCustomersCustomerTaxIdsId = (
  params: Params<
    t_GetCustomersCustomerTaxIdsIdParamSchema,
    t_GetCustomersCustomerTaxIdsIdQuerySchema,
    t_GetCustomersCustomerTaxIdsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_tax_id> | Response<StatusCode, t_error>>

export type GetDisputes = (
  params: Params<
    void,
    t_GetDisputesQuerySchema,
    t_GetDisputesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_dispute[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetDisputesDispute = (
  params: Params<
    t_GetDisputesDisputeParamSchema,
    t_GetDisputesDisputeQuerySchema,
    t_GetDisputesDisputeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_dispute> | Response<StatusCode, t_error>>

export type PostDisputesDispute = (
  params: Params<
    t_PostDisputesDisputeParamSchema,
    void,
    t_PostDisputesDisputeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_dispute> | Response<StatusCode, t_error>>

export type PostDisputesDisputeClose = (
  params: Params<
    t_PostDisputesDisputeCloseParamSchema,
    void,
    t_PostDisputesDisputeCloseBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_dispute> | Response<StatusCode, t_error>>

export type PostEphemeralKeys = (
  params: Params<void, void, t_PostEphemeralKeysBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_ephemeral_key> | Response<StatusCode, t_error>>

export type DeleteEphemeralKeysKey = (
  params: Params<
    t_DeleteEphemeralKeysKeyParamSchema,
    void,
    t_DeleteEphemeralKeysKeyBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_ephemeral_key> | Response<StatusCode, t_error>>

export type GetEvents = (
  params: Params<
    void,
    t_GetEventsQuerySchema,
    t_GetEventsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_event[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetEventsId = (
  params: Params<
    t_GetEventsIdParamSchema,
    t_GetEventsIdQuerySchema,
    t_GetEventsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_event> | Response<StatusCode, t_error>>

export type GetExchangeRates = (
  params: Params<
    void,
    t_GetExchangeRatesQuerySchema,
    t_GetExchangeRatesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_exchange_rate[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetExchangeRatesRateId = (
  params: Params<
    t_GetExchangeRatesRateIdParamSchema,
    t_GetExchangeRatesRateIdQuerySchema,
    t_GetExchangeRatesRateIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_exchange_rate> | Response<StatusCode, t_error>>

export type GetFileLinks = (
  params: Params<
    void,
    t_GetFileLinksQuerySchema,
    t_GetFileLinksBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_file_link[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostFileLinks = (
  params: Params<void, void, t_PostFileLinksBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_file_link> | Response<StatusCode, t_error>>

export type GetFileLinksLink = (
  params: Params<
    t_GetFileLinksLinkParamSchema,
    t_GetFileLinksLinkQuerySchema,
    t_GetFileLinksLinkBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_file_link> | Response<StatusCode, t_error>>

export type PostFileLinksLink = (
  params: Params<
    t_PostFileLinksLinkParamSchema,
    void,
    t_PostFileLinksLinkBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_file_link> | Response<StatusCode, t_error>>

export type GetFiles = (
  params: Params<void, t_GetFilesQuerySchema, t_GetFilesBodySchema | undefined>,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_file[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostFiles = (
  params: Params<void, void, t_PostFilesBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_file> | Response<StatusCode, t_error>>

export type GetFilesFile = (
  params: Params<
    t_GetFilesFileParamSchema,
    t_GetFilesFileQuerySchema,
    t_GetFilesFileBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_file> | Response<StatusCode, t_error>>

export type GetFinancialConnectionsAccounts = (
  params: Params<
    void,
    t_GetFinancialConnectionsAccountsQuerySchema,
    t_GetFinancialConnectionsAccountsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_financial_connections_account[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetFinancialConnectionsAccountsAccount = (
  params: Params<
    t_GetFinancialConnectionsAccountsAccountParamSchema,
    t_GetFinancialConnectionsAccountsAccountQuerySchema,
    t_GetFinancialConnectionsAccountsAccountBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_financial_connections_account> | Response<StatusCode, t_error>
>

export type PostFinancialConnectionsAccountsAccountDisconnect = (
  params: Params<
    t_PostFinancialConnectionsAccountsAccountDisconnectParamSchema,
    void,
    t_PostFinancialConnectionsAccountsAccountDisconnectBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_financial_connections_account> | Response<StatusCode, t_error>
>

export type GetFinancialConnectionsAccountsAccountOwners = (
  params: Params<
    t_GetFinancialConnectionsAccountsAccountOwnersParamSchema,
    t_GetFinancialConnectionsAccountsAccountOwnersQuerySchema,
    t_GetFinancialConnectionsAccountsAccountOwnersBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_financial_connections_account_owner[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostFinancialConnectionsAccountsAccountRefresh = (
  params: Params<
    t_PostFinancialConnectionsAccountsAccountRefreshParamSchema,
    void,
    t_PostFinancialConnectionsAccountsAccountRefreshBodySchema
  >,
  ctx: Context,
) => Promise<
  Response<200, t_financial_connections_account> | Response<StatusCode, t_error>
>

export type PostFinancialConnectionsSessions = (
  params: Params<void, void, t_PostFinancialConnectionsSessionsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_financial_connections_session> | Response<StatusCode, t_error>
>

export type GetFinancialConnectionsSessionsSession = (
  params: Params<
    t_GetFinancialConnectionsSessionsSessionParamSchema,
    t_GetFinancialConnectionsSessionsSessionQuerySchema,
    t_GetFinancialConnectionsSessionsSessionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_financial_connections_session> | Response<StatusCode, t_error>
>

export type GetIdentityVerificationReports = (
  params: Params<
    void,
    t_GetIdentityVerificationReportsQuerySchema,
    t_GetIdentityVerificationReportsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_identity_verification_report[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetIdentityVerificationReportsReport = (
  params: Params<
    t_GetIdentityVerificationReportsReportParamSchema,
    t_GetIdentityVerificationReportsReportQuerySchema,
    t_GetIdentityVerificationReportsReportBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_identity_verification_report> | Response<StatusCode, t_error>
>

export type GetIdentityVerificationSessions = (
  params: Params<
    void,
    t_GetIdentityVerificationSessionsQuerySchema,
    t_GetIdentityVerificationSessionsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_identity_verification_session[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostIdentityVerificationSessions = (
  params: Params<void, void, t_PostIdentityVerificationSessionsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_identity_verification_session> | Response<StatusCode, t_error>
>

export type GetIdentityVerificationSessionsSession = (
  params: Params<
    t_GetIdentityVerificationSessionsSessionParamSchema,
    t_GetIdentityVerificationSessionsSessionQuerySchema,
    t_GetIdentityVerificationSessionsSessionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_identity_verification_session> | Response<StatusCode, t_error>
>

export type PostIdentityVerificationSessionsSession = (
  params: Params<
    t_PostIdentityVerificationSessionsSessionParamSchema,
    void,
    t_PostIdentityVerificationSessionsSessionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_identity_verification_session> | Response<StatusCode, t_error>
>

export type PostIdentityVerificationSessionsSessionCancel = (
  params: Params<
    t_PostIdentityVerificationSessionsSessionCancelParamSchema,
    void,
    t_PostIdentityVerificationSessionsSessionCancelBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_identity_verification_session> | Response<StatusCode, t_error>
>

export type PostIdentityVerificationSessionsSessionRedact = (
  params: Params<
    t_PostIdentityVerificationSessionsSessionRedactParamSchema,
    void,
    t_PostIdentityVerificationSessionsSessionRedactBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_identity_verification_session> | Response<StatusCode, t_error>
>

export type GetInvoiceitems = (
  params: Params<
    void,
    t_GetInvoiceitemsQuerySchema,
    t_GetInvoiceitemsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_invoiceitem[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostInvoiceitems = (
  params: Params<void, void, t_PostInvoiceitemsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_invoiceitem> | Response<StatusCode, t_error>>

export type DeleteInvoiceitemsInvoiceitem = (
  params: Params<
    t_DeleteInvoiceitemsInvoiceitemParamSchema,
    void,
    t_DeleteInvoiceitemsInvoiceitemBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_deleted_invoiceitem> | Response<StatusCode, t_error>
>

export type GetInvoiceitemsInvoiceitem = (
  params: Params<
    t_GetInvoiceitemsInvoiceitemParamSchema,
    t_GetInvoiceitemsInvoiceitemQuerySchema,
    t_GetInvoiceitemsInvoiceitemBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_invoiceitem> | Response<StatusCode, t_error>>

export type PostInvoiceitemsInvoiceitem = (
  params: Params<
    t_PostInvoiceitemsInvoiceitemParamSchema,
    void,
    t_PostInvoiceitemsInvoiceitemBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_invoiceitem> | Response<StatusCode, t_error>>

export type GetInvoices = (
  params: Params<
    void,
    t_GetInvoicesQuerySchema,
    t_GetInvoicesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_invoice[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostInvoices = (
  params: Params<void, void, t_PostInvoicesBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_invoice> | Response<StatusCode, t_error>>

export type GetInvoicesSearch = (
  params: Params<
    void,
    t_GetInvoicesSearchQuerySchema,
    t_GetInvoicesSearchBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_invoice[]
        has_more: boolean
        next_page?: string | null
        object: "search_result"
        total_count?: number
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetInvoicesUpcoming = (
  params: Params<
    void,
    t_GetInvoicesUpcomingQuerySchema,
    t_GetInvoicesUpcomingBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_invoice> | Response<StatusCode, t_error>>

export type GetInvoicesUpcomingLines = (
  params: Params<
    void,
    t_GetInvoicesUpcomingLinesQuerySchema,
    t_GetInvoicesUpcomingLinesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_line_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type DeleteInvoicesInvoice = (
  params: Params<
    t_DeleteInvoicesInvoiceParamSchema,
    void,
    t_DeleteInvoicesInvoiceBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_deleted_invoice> | Response<StatusCode, t_error>>

export type GetInvoicesInvoice = (
  params: Params<
    t_GetInvoicesInvoiceParamSchema,
    t_GetInvoicesInvoiceQuerySchema,
    t_GetInvoicesInvoiceBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_invoice> | Response<StatusCode, t_error>>

export type PostInvoicesInvoice = (
  params: Params<
    t_PostInvoicesInvoiceParamSchema,
    void,
    t_PostInvoicesInvoiceBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_invoice> | Response<StatusCode, t_error>>

export type PostInvoicesInvoiceFinalize = (
  params: Params<
    t_PostInvoicesInvoiceFinalizeParamSchema,
    void,
    t_PostInvoicesInvoiceFinalizeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_invoice> | Response<StatusCode, t_error>>

export type GetInvoicesInvoiceLines = (
  params: Params<
    t_GetInvoicesInvoiceLinesParamSchema,
    t_GetInvoicesInvoiceLinesQuerySchema,
    t_GetInvoicesInvoiceLinesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_line_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostInvoicesInvoiceMarkUncollectible = (
  params: Params<
    t_PostInvoicesInvoiceMarkUncollectibleParamSchema,
    void,
    t_PostInvoicesInvoiceMarkUncollectibleBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_invoice> | Response<StatusCode, t_error>>

export type PostInvoicesInvoicePay = (
  params: Params<
    t_PostInvoicesInvoicePayParamSchema,
    void,
    t_PostInvoicesInvoicePayBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_invoice> | Response<StatusCode, t_error>>

export type PostInvoicesInvoiceSend = (
  params: Params<
    t_PostInvoicesInvoiceSendParamSchema,
    void,
    t_PostInvoicesInvoiceSendBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_invoice> | Response<StatusCode, t_error>>

export type PostInvoicesInvoiceVoid = (
  params: Params<
    t_PostInvoicesInvoiceVoidParamSchema,
    void,
    t_PostInvoicesInvoiceVoidBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_invoice> | Response<StatusCode, t_error>>

export type GetIssuingAuthorizations = (
  params: Params<
    void,
    t_GetIssuingAuthorizationsQuerySchema,
    t_GetIssuingAuthorizationsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_issuing_authorization[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetIssuingAuthorizationsAuthorization = (
  params: Params<
    t_GetIssuingAuthorizationsAuthorizationParamSchema,
    t_GetIssuingAuthorizationsAuthorizationQuerySchema,
    t_GetIssuingAuthorizationsAuthorizationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_authorization> | Response<StatusCode, t_error>
>

export type PostIssuingAuthorizationsAuthorization = (
  params: Params<
    t_PostIssuingAuthorizationsAuthorizationParamSchema,
    void,
    t_PostIssuingAuthorizationsAuthorizationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_authorization> | Response<StatusCode, t_error>
>

export type PostIssuingAuthorizationsAuthorizationApprove = (
  params: Params<
    t_PostIssuingAuthorizationsAuthorizationApproveParamSchema,
    void,
    t_PostIssuingAuthorizationsAuthorizationApproveBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_authorization> | Response<StatusCode, t_error>
>

export type PostIssuingAuthorizationsAuthorizationDecline = (
  params: Params<
    t_PostIssuingAuthorizationsAuthorizationDeclineParamSchema,
    void,
    t_PostIssuingAuthorizationsAuthorizationDeclineBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_authorization> | Response<StatusCode, t_error>
>

export type GetIssuingCardholders = (
  params: Params<
    void,
    t_GetIssuingCardholdersQuerySchema,
    t_GetIssuingCardholdersBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_issuing_cardholder[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostIssuingCardholders = (
  params: Params<void, void, t_PostIssuingCardholdersBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_cardholder> | Response<StatusCode, t_error>
>

export type GetIssuingCardholdersCardholder = (
  params: Params<
    t_GetIssuingCardholdersCardholderParamSchema,
    t_GetIssuingCardholdersCardholderQuerySchema,
    t_GetIssuingCardholdersCardholderBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_cardholder> | Response<StatusCode, t_error>
>

export type PostIssuingCardholdersCardholder = (
  params: Params<
    t_PostIssuingCardholdersCardholderParamSchema,
    void,
    t_PostIssuingCardholdersCardholderBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_cardholder> | Response<StatusCode, t_error>
>

export type GetIssuingCards = (
  params: Params<
    void,
    t_GetIssuingCardsQuerySchema,
    t_GetIssuingCardsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_issuing_card[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostIssuingCards = (
  params: Params<void, void, t_PostIssuingCardsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_issuing_card> | Response<StatusCode, t_error>>

export type GetIssuingCardsCard = (
  params: Params<
    t_GetIssuingCardsCardParamSchema,
    t_GetIssuingCardsCardQuerySchema,
    t_GetIssuingCardsCardBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_issuing_card> | Response<StatusCode, t_error>>

export type PostIssuingCardsCard = (
  params: Params<
    t_PostIssuingCardsCardParamSchema,
    void,
    t_PostIssuingCardsCardBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_issuing_card> | Response<StatusCode, t_error>>

export type GetIssuingDisputes = (
  params: Params<
    void,
    t_GetIssuingDisputesQuerySchema,
    t_GetIssuingDisputesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_issuing_dispute[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostIssuingDisputes = (
  params: Params<void, void, t_PostIssuingDisputesBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_issuing_dispute> | Response<StatusCode, t_error>>

export type GetIssuingDisputesDispute = (
  params: Params<
    t_GetIssuingDisputesDisputeParamSchema,
    t_GetIssuingDisputesDisputeQuerySchema,
    t_GetIssuingDisputesDisputeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_issuing_dispute> | Response<StatusCode, t_error>>

export type PostIssuingDisputesDispute = (
  params: Params<
    t_PostIssuingDisputesDisputeParamSchema,
    void,
    t_PostIssuingDisputesDisputeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_issuing_dispute> | Response<StatusCode, t_error>>

export type PostIssuingDisputesDisputeSubmit = (
  params: Params<
    t_PostIssuingDisputesDisputeSubmitParamSchema,
    void,
    t_PostIssuingDisputesDisputeSubmitBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_issuing_dispute> | Response<StatusCode, t_error>>

export type GetIssuingSettlements = (
  params: Params<
    void,
    t_GetIssuingSettlementsQuerySchema,
    t_GetIssuingSettlementsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_issuing_settlement[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetIssuingSettlementsSettlement = (
  params: Params<
    t_GetIssuingSettlementsSettlementParamSchema,
    t_GetIssuingSettlementsSettlementQuerySchema,
    t_GetIssuingSettlementsSettlementBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_settlement> | Response<StatusCode, t_error>
>

export type PostIssuingSettlementsSettlement = (
  params: Params<
    t_PostIssuingSettlementsSettlementParamSchema,
    void,
    t_PostIssuingSettlementsSettlementBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_settlement> | Response<StatusCode, t_error>
>

export type GetIssuingTransactions = (
  params: Params<
    void,
    t_GetIssuingTransactionsQuerySchema,
    t_GetIssuingTransactionsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_issuing_transaction[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetIssuingTransactionsTransaction = (
  params: Params<
    t_GetIssuingTransactionsTransactionParamSchema,
    t_GetIssuingTransactionsTransactionQuerySchema,
    t_GetIssuingTransactionsTransactionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_transaction> | Response<StatusCode, t_error>
>

export type PostIssuingTransactionsTransaction = (
  params: Params<
    t_PostIssuingTransactionsTransactionParamSchema,
    void,
    t_PostIssuingTransactionsTransactionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_transaction> | Response<StatusCode, t_error>
>

export type PostLinkAccountSessions = (
  params: Params<void, void, t_PostLinkAccountSessionsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_financial_connections_session> | Response<StatusCode, t_error>
>

export type GetLinkAccountSessionsSession = (
  params: Params<
    t_GetLinkAccountSessionsSessionParamSchema,
    t_GetLinkAccountSessionsSessionQuerySchema,
    t_GetLinkAccountSessionsSessionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_financial_connections_session> | Response<StatusCode, t_error>
>

export type GetLinkedAccounts = (
  params: Params<
    void,
    t_GetLinkedAccountsQuerySchema,
    t_GetLinkedAccountsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_financial_connections_account[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetLinkedAccountsAccount = (
  params: Params<
    t_GetLinkedAccountsAccountParamSchema,
    t_GetLinkedAccountsAccountQuerySchema,
    t_GetLinkedAccountsAccountBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_financial_connections_account> | Response<StatusCode, t_error>
>

export type PostLinkedAccountsAccountDisconnect = (
  params: Params<
    t_PostLinkedAccountsAccountDisconnectParamSchema,
    void,
    t_PostLinkedAccountsAccountDisconnectBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_financial_connections_account> | Response<StatusCode, t_error>
>

export type GetLinkedAccountsAccountOwners = (
  params: Params<
    t_GetLinkedAccountsAccountOwnersParamSchema,
    t_GetLinkedAccountsAccountOwnersQuerySchema,
    t_GetLinkedAccountsAccountOwnersBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_financial_connections_account_owner[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostLinkedAccountsAccountRefresh = (
  params: Params<
    t_PostLinkedAccountsAccountRefreshParamSchema,
    void,
    t_PostLinkedAccountsAccountRefreshBodySchema
  >,
  ctx: Context,
) => Promise<
  Response<200, t_financial_connections_account> | Response<StatusCode, t_error>
>

export type GetMandatesMandate = (
  params: Params<
    t_GetMandatesMandateParamSchema,
    t_GetMandatesMandateQuerySchema,
    t_GetMandatesMandateBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_mandate> | Response<StatusCode, t_error>>

export type GetPaymentIntents = (
  params: Params<
    void,
    t_GetPaymentIntentsQuerySchema,
    t_GetPaymentIntentsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_payment_intent[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostPaymentIntents = (
  params: Params<void, void, t_PostPaymentIntentsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_payment_intent> | Response<StatusCode, t_error>>

export type GetPaymentIntentsSearch = (
  params: Params<
    void,
    t_GetPaymentIntentsSearchQuerySchema,
    t_GetPaymentIntentsSearchBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_payment_intent[]
        has_more: boolean
        next_page?: string | null
        object: "search_result"
        total_count?: number
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetPaymentIntentsIntent = (
  params: Params<
    t_GetPaymentIntentsIntentParamSchema,
    t_GetPaymentIntentsIntentQuerySchema,
    t_GetPaymentIntentsIntentBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_intent> | Response<StatusCode, t_error>>

export type PostPaymentIntentsIntent = (
  params: Params<
    t_PostPaymentIntentsIntentParamSchema,
    void,
    t_PostPaymentIntentsIntentBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_intent> | Response<StatusCode, t_error>>

export type PostPaymentIntentsIntentApplyCustomerBalance = (
  params: Params<
    t_PostPaymentIntentsIntentApplyCustomerBalanceParamSchema,
    void,
    t_PostPaymentIntentsIntentApplyCustomerBalanceBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_intent> | Response<StatusCode, t_error>>

export type PostPaymentIntentsIntentCancel = (
  params: Params<
    t_PostPaymentIntentsIntentCancelParamSchema,
    void,
    t_PostPaymentIntentsIntentCancelBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_intent> | Response<StatusCode, t_error>>

export type PostPaymentIntentsIntentCapture = (
  params: Params<
    t_PostPaymentIntentsIntentCaptureParamSchema,
    void,
    t_PostPaymentIntentsIntentCaptureBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_intent> | Response<StatusCode, t_error>>

export type PostPaymentIntentsIntentConfirm = (
  params: Params<
    t_PostPaymentIntentsIntentConfirmParamSchema,
    void,
    t_PostPaymentIntentsIntentConfirmBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_intent> | Response<StatusCode, t_error>>

export type PostPaymentIntentsIntentIncrementAuthorization = (
  params: Params<
    t_PostPaymentIntentsIntentIncrementAuthorizationParamSchema,
    void,
    t_PostPaymentIntentsIntentIncrementAuthorizationBodySchema
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_intent> | Response<StatusCode, t_error>>

export type PostPaymentIntentsIntentVerifyMicrodeposits = (
  params: Params<
    t_PostPaymentIntentsIntentVerifyMicrodepositsParamSchema,
    void,
    t_PostPaymentIntentsIntentVerifyMicrodepositsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_intent> | Response<StatusCode, t_error>>

export type GetPaymentLinks = (
  params: Params<
    void,
    t_GetPaymentLinksQuerySchema,
    t_GetPaymentLinksBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_payment_link[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostPaymentLinks = (
  params: Params<void, void, t_PostPaymentLinksBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_payment_link> | Response<StatusCode, t_error>>

export type GetPaymentLinksPaymentLink = (
  params: Params<
    t_GetPaymentLinksPaymentLinkParamSchema,
    t_GetPaymentLinksPaymentLinkQuerySchema,
    t_GetPaymentLinksPaymentLinkBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_link> | Response<StatusCode, t_error>>

export type PostPaymentLinksPaymentLink = (
  params: Params<
    t_PostPaymentLinksPaymentLinkParamSchema,
    void,
    t_PostPaymentLinksPaymentLinkBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_link> | Response<StatusCode, t_error>>

export type GetPaymentLinksPaymentLinkLineItems = (
  params: Params<
    t_GetPaymentLinksPaymentLinkLineItemsParamSchema,
    t_GetPaymentLinksPaymentLinkLineItemsQuerySchema,
    t_GetPaymentLinksPaymentLinkLineItemsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetPaymentMethodConfigurations = (
  params: Params<
    void,
    t_GetPaymentMethodConfigurationsQuerySchema,
    t_GetPaymentMethodConfigurationsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_payment_method_configuration[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostPaymentMethodConfigurations = (
  params: Params<
    void,
    void,
    t_PostPaymentMethodConfigurationsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_payment_method_configuration> | Response<StatusCode, t_error>
>

export type GetPaymentMethodConfigurationsConfiguration = (
  params: Params<
    t_GetPaymentMethodConfigurationsConfigurationParamSchema,
    t_GetPaymentMethodConfigurationsConfigurationQuerySchema,
    t_GetPaymentMethodConfigurationsConfigurationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_payment_method_configuration> | Response<StatusCode, t_error>
>

export type PostPaymentMethodConfigurationsConfiguration = (
  params: Params<
    t_PostPaymentMethodConfigurationsConfigurationParamSchema,
    void,
    t_PostPaymentMethodConfigurationsConfigurationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_payment_method_configuration> | Response<StatusCode, t_error>
>

export type GetPaymentMethodDomains = (
  params: Params<
    void,
    t_GetPaymentMethodDomainsQuerySchema,
    t_GetPaymentMethodDomainsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_payment_method_domain[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostPaymentMethodDomains = (
  params: Params<void, void, t_PostPaymentMethodDomainsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_payment_method_domain> | Response<StatusCode, t_error>
>

export type GetPaymentMethodDomainsPaymentMethodDomain = (
  params: Params<
    t_GetPaymentMethodDomainsPaymentMethodDomainParamSchema,
    t_GetPaymentMethodDomainsPaymentMethodDomainQuerySchema,
    t_GetPaymentMethodDomainsPaymentMethodDomainBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_payment_method_domain> | Response<StatusCode, t_error>
>

export type PostPaymentMethodDomainsPaymentMethodDomain = (
  params: Params<
    t_PostPaymentMethodDomainsPaymentMethodDomainParamSchema,
    void,
    t_PostPaymentMethodDomainsPaymentMethodDomainBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_payment_method_domain> | Response<StatusCode, t_error>
>

export type PostPaymentMethodDomainsPaymentMethodDomainValidate = (
  params: Params<
    t_PostPaymentMethodDomainsPaymentMethodDomainValidateParamSchema,
    void,
    t_PostPaymentMethodDomainsPaymentMethodDomainValidateBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_payment_method_domain> | Response<StatusCode, t_error>
>

export type GetPaymentMethods = (
  params: Params<
    void,
    t_GetPaymentMethodsQuerySchema,
    t_GetPaymentMethodsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_payment_method[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostPaymentMethods = (
  params: Params<void, void, t_PostPaymentMethodsBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_payment_method> | Response<StatusCode, t_error>>

export type GetPaymentMethodsPaymentMethod = (
  params: Params<
    t_GetPaymentMethodsPaymentMethodParamSchema,
    t_GetPaymentMethodsPaymentMethodQuerySchema,
    t_GetPaymentMethodsPaymentMethodBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_method> | Response<StatusCode, t_error>>

export type PostPaymentMethodsPaymentMethod = (
  params: Params<
    t_PostPaymentMethodsPaymentMethodParamSchema,
    void,
    t_PostPaymentMethodsPaymentMethodBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_method> | Response<StatusCode, t_error>>

export type PostPaymentMethodsPaymentMethodAttach = (
  params: Params<
    t_PostPaymentMethodsPaymentMethodAttachParamSchema,
    void,
    t_PostPaymentMethodsPaymentMethodAttachBodySchema
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_method> | Response<StatusCode, t_error>>

export type PostPaymentMethodsPaymentMethodDetach = (
  params: Params<
    t_PostPaymentMethodsPaymentMethodDetachParamSchema,
    void,
    t_PostPaymentMethodsPaymentMethodDetachBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payment_method> | Response<StatusCode, t_error>>

export type GetPayouts = (
  params: Params<
    void,
    t_GetPayoutsQuerySchema,
    t_GetPayoutsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_payout[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostPayouts = (
  params: Params<void, void, t_PostPayoutsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_payout> | Response<StatusCode, t_error>>

export type GetPayoutsPayout = (
  params: Params<
    t_GetPayoutsPayoutParamSchema,
    t_GetPayoutsPayoutQuerySchema,
    t_GetPayoutsPayoutBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payout> | Response<StatusCode, t_error>>

export type PostPayoutsPayout = (
  params: Params<
    t_PostPayoutsPayoutParamSchema,
    void,
    t_PostPayoutsPayoutBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payout> | Response<StatusCode, t_error>>

export type PostPayoutsPayoutCancel = (
  params: Params<
    t_PostPayoutsPayoutCancelParamSchema,
    void,
    t_PostPayoutsPayoutCancelBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payout> | Response<StatusCode, t_error>>

export type PostPayoutsPayoutReverse = (
  params: Params<
    t_PostPayoutsPayoutReverseParamSchema,
    void,
    t_PostPayoutsPayoutReverseBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_payout> | Response<StatusCode, t_error>>

export type GetPlans = (
  params: Params<void, t_GetPlansQuerySchema, t_GetPlansBodySchema | undefined>,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_plan[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostPlans = (
  params: Params<void, void, t_PostPlansBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_plan> | Response<StatusCode, t_error>>

export type DeletePlansPlan = (
  params: Params<
    t_DeletePlansPlanParamSchema,
    void,
    t_DeletePlansPlanBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_deleted_plan> | Response<StatusCode, t_error>>

export type GetPlansPlan = (
  params: Params<
    t_GetPlansPlanParamSchema,
    t_GetPlansPlanQuerySchema,
    t_GetPlansPlanBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_plan> | Response<StatusCode, t_error>>

export type PostPlansPlan = (
  params: Params<
    t_PostPlansPlanParamSchema,
    void,
    t_PostPlansPlanBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_plan> | Response<StatusCode, t_error>>

export type GetPrices = (
  params: Params<
    void,
    t_GetPricesQuerySchema,
    t_GetPricesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_price[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostPrices = (
  params: Params<void, void, t_PostPricesBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_price> | Response<StatusCode, t_error>>

export type GetPricesSearch = (
  params: Params<
    void,
    t_GetPricesSearchQuerySchema,
    t_GetPricesSearchBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_price[]
        has_more: boolean
        next_page?: string | null
        object: "search_result"
        total_count?: number
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetPricesPrice = (
  params: Params<
    t_GetPricesPriceParamSchema,
    t_GetPricesPriceQuerySchema,
    t_GetPricesPriceBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_price> | Response<StatusCode, t_error>>

export type PostPricesPrice = (
  params: Params<
    t_PostPricesPriceParamSchema,
    void,
    t_PostPricesPriceBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_price> | Response<StatusCode, t_error>>

export type GetProducts = (
  params: Params<
    void,
    t_GetProductsQuerySchema,
    t_GetProductsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_product[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostProducts = (
  params: Params<void, void, t_PostProductsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_product> | Response<StatusCode, t_error>>

export type GetProductsSearch = (
  params: Params<
    void,
    t_GetProductsSearchQuerySchema,
    t_GetProductsSearchBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_product[]
        has_more: boolean
        next_page?: string | null
        object: "search_result"
        total_count?: number
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type DeleteProductsId = (
  params: Params<
    t_DeleteProductsIdParamSchema,
    void,
    t_DeleteProductsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_deleted_product> | Response<StatusCode, t_error>>

export type GetProductsId = (
  params: Params<
    t_GetProductsIdParamSchema,
    t_GetProductsIdQuerySchema,
    t_GetProductsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_product> | Response<StatusCode, t_error>>

export type PostProductsId = (
  params: Params<
    t_PostProductsIdParamSchema,
    void,
    t_PostProductsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_product> | Response<StatusCode, t_error>>

export type GetPromotionCodes = (
  params: Params<
    void,
    t_GetPromotionCodesQuerySchema,
    t_GetPromotionCodesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_promotion_code[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostPromotionCodes = (
  params: Params<void, void, t_PostPromotionCodesBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_promotion_code> | Response<StatusCode, t_error>>

export type GetPromotionCodesPromotionCode = (
  params: Params<
    t_GetPromotionCodesPromotionCodeParamSchema,
    t_GetPromotionCodesPromotionCodeQuerySchema,
    t_GetPromotionCodesPromotionCodeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_promotion_code> | Response<StatusCode, t_error>>

export type PostPromotionCodesPromotionCode = (
  params: Params<
    t_PostPromotionCodesPromotionCodeParamSchema,
    void,
    t_PostPromotionCodesPromotionCodeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_promotion_code> | Response<StatusCode, t_error>>

export type GetQuotes = (
  params: Params<
    void,
    t_GetQuotesQuerySchema,
    t_GetQuotesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_quote[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostQuotes = (
  params: Params<void, void, t_PostQuotesBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_quote> | Response<StatusCode, t_error>>

export type GetQuotesQuote = (
  params: Params<
    t_GetQuotesQuoteParamSchema,
    t_GetQuotesQuoteQuerySchema,
    t_GetQuotesQuoteBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_quote> | Response<StatusCode, t_error>>

export type PostQuotesQuote = (
  params: Params<
    t_PostQuotesQuoteParamSchema,
    void,
    t_PostQuotesQuoteBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_quote> | Response<StatusCode, t_error>>

export type PostQuotesQuoteAccept = (
  params: Params<
    t_PostQuotesQuoteAcceptParamSchema,
    void,
    t_PostQuotesQuoteAcceptBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_quote> | Response<StatusCode, t_error>>

export type PostQuotesQuoteCancel = (
  params: Params<
    t_PostQuotesQuoteCancelParamSchema,
    void,
    t_PostQuotesQuoteCancelBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_quote> | Response<StatusCode, t_error>>

export type GetQuotesQuoteComputedUpfrontLineItems = (
  params: Params<
    t_GetQuotesQuoteComputedUpfrontLineItemsParamSchema,
    t_GetQuotesQuoteComputedUpfrontLineItemsQuerySchema,
    t_GetQuotesQuoteComputedUpfrontLineItemsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostQuotesQuoteFinalize = (
  params: Params<
    t_PostQuotesQuoteFinalizeParamSchema,
    void,
    t_PostQuotesQuoteFinalizeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_quote> | Response<StatusCode, t_error>>

export type GetQuotesQuoteLineItems = (
  params: Params<
    t_GetQuotesQuoteLineItemsParamSchema,
    t_GetQuotesQuoteLineItemsQuerySchema,
    t_GetQuotesQuoteLineItemsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetQuotesQuotePdf = (
  params: Params<
    t_GetQuotesQuotePdfParamSchema,
    t_GetQuotesQuotePdfQuerySchema,
    t_GetQuotesQuotePdfBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, string> | Response<StatusCode, t_error>>

export type GetRadarEarlyFraudWarnings = (
  params: Params<
    void,
    t_GetRadarEarlyFraudWarningsQuerySchema,
    t_GetRadarEarlyFraudWarningsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_radar_early_fraud_warning[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetRadarEarlyFraudWarningsEarlyFraudWarning = (
  params: Params<
    t_GetRadarEarlyFraudWarningsEarlyFraudWarningParamSchema,
    t_GetRadarEarlyFraudWarningsEarlyFraudWarningQuerySchema,
    t_GetRadarEarlyFraudWarningsEarlyFraudWarningBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_radar_early_fraud_warning> | Response<StatusCode, t_error>
>

export type GetRadarValueListItems = (
  params: Params<
    void,
    t_GetRadarValueListItemsQuerySchema,
    t_GetRadarValueListItemsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_radar_value_list_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostRadarValueListItems = (
  params: Params<void, void, t_PostRadarValueListItemsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_radar_value_list_item> | Response<StatusCode, t_error>
>

export type DeleteRadarValueListItemsItem = (
  params: Params<
    t_DeleteRadarValueListItemsItemParamSchema,
    void,
    t_DeleteRadarValueListItemsItemBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_deleted_radar_value_list_item> | Response<StatusCode, t_error>
>

export type GetRadarValueListItemsItem = (
  params: Params<
    t_GetRadarValueListItemsItemParamSchema,
    t_GetRadarValueListItemsItemQuerySchema,
    t_GetRadarValueListItemsItemBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_radar_value_list_item> | Response<StatusCode, t_error>
>

export type GetRadarValueLists = (
  params: Params<
    void,
    t_GetRadarValueListsQuerySchema,
    t_GetRadarValueListsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_radar_value_list[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostRadarValueLists = (
  params: Params<void, void, t_PostRadarValueListsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_radar_value_list> | Response<StatusCode, t_error>>

export type DeleteRadarValueListsValueList = (
  params: Params<
    t_DeleteRadarValueListsValueListParamSchema,
    void,
    t_DeleteRadarValueListsValueListBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_deleted_radar_value_list> | Response<StatusCode, t_error>
>

export type GetRadarValueListsValueList = (
  params: Params<
    t_GetRadarValueListsValueListParamSchema,
    t_GetRadarValueListsValueListQuerySchema,
    t_GetRadarValueListsValueListBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_radar_value_list> | Response<StatusCode, t_error>>

export type PostRadarValueListsValueList = (
  params: Params<
    t_PostRadarValueListsValueListParamSchema,
    void,
    t_PostRadarValueListsValueListBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_radar_value_list> | Response<StatusCode, t_error>>

export type GetRefunds = (
  params: Params<
    void,
    t_GetRefundsQuerySchema,
    t_GetRefundsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_refund[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostRefunds = (
  params: Params<void, void, t_PostRefundsBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_refund> | Response<StatusCode, t_error>>

export type GetRefundsRefund = (
  params: Params<
    t_GetRefundsRefundParamSchema,
    t_GetRefundsRefundQuerySchema,
    t_GetRefundsRefundBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_refund> | Response<StatusCode, t_error>>

export type PostRefundsRefund = (
  params: Params<
    t_PostRefundsRefundParamSchema,
    void,
    t_PostRefundsRefundBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_refund> | Response<StatusCode, t_error>>

export type PostRefundsRefundCancel = (
  params: Params<
    t_PostRefundsRefundCancelParamSchema,
    void,
    t_PostRefundsRefundCancelBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_refund> | Response<StatusCode, t_error>>

export type GetReportingReportRuns = (
  params: Params<
    void,
    t_GetReportingReportRunsQuerySchema,
    t_GetReportingReportRunsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_reporting_report_run[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostReportingReportRuns = (
  params: Params<void, void, t_PostReportingReportRunsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_reporting_report_run> | Response<StatusCode, t_error>
>

export type GetReportingReportRunsReportRun = (
  params: Params<
    t_GetReportingReportRunsReportRunParamSchema,
    t_GetReportingReportRunsReportRunQuerySchema,
    t_GetReportingReportRunsReportRunBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_reporting_report_run> | Response<StatusCode, t_error>
>

export type GetReportingReportTypes = (
  params: Params<
    void,
    t_GetReportingReportTypesQuerySchema,
    t_GetReportingReportTypesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_reporting_report_type[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetReportingReportTypesReportType = (
  params: Params<
    t_GetReportingReportTypesReportTypeParamSchema,
    t_GetReportingReportTypesReportTypeQuerySchema,
    t_GetReportingReportTypesReportTypeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_reporting_report_type> | Response<StatusCode, t_error>
>

export type GetReviews = (
  params: Params<
    void,
    t_GetReviewsQuerySchema,
    t_GetReviewsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_review[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetReviewsReview = (
  params: Params<
    t_GetReviewsReviewParamSchema,
    t_GetReviewsReviewQuerySchema,
    t_GetReviewsReviewBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_review> | Response<StatusCode, t_error>>

export type PostReviewsReviewApprove = (
  params: Params<
    t_PostReviewsReviewApproveParamSchema,
    void,
    t_PostReviewsReviewApproveBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_review> | Response<StatusCode, t_error>>

export type GetSetupAttempts = (
  params: Params<
    void,
    t_GetSetupAttemptsQuerySchema,
    t_GetSetupAttemptsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_setup_attempt[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetSetupIntents = (
  params: Params<
    void,
    t_GetSetupIntentsQuerySchema,
    t_GetSetupIntentsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_setup_intent[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostSetupIntents = (
  params: Params<void, void, t_PostSetupIntentsBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_setup_intent> | Response<StatusCode, t_error>>

export type GetSetupIntentsIntent = (
  params: Params<
    t_GetSetupIntentsIntentParamSchema,
    t_GetSetupIntentsIntentQuerySchema,
    t_GetSetupIntentsIntentBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_setup_intent> | Response<StatusCode, t_error>>

export type PostSetupIntentsIntent = (
  params: Params<
    t_PostSetupIntentsIntentParamSchema,
    void,
    t_PostSetupIntentsIntentBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_setup_intent> | Response<StatusCode, t_error>>

export type PostSetupIntentsIntentCancel = (
  params: Params<
    t_PostSetupIntentsIntentCancelParamSchema,
    void,
    t_PostSetupIntentsIntentCancelBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_setup_intent> | Response<StatusCode, t_error>>

export type PostSetupIntentsIntentConfirm = (
  params: Params<
    t_PostSetupIntentsIntentConfirmParamSchema,
    void,
    t_PostSetupIntentsIntentConfirmBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_setup_intent> | Response<StatusCode, t_error>>

export type PostSetupIntentsIntentVerifyMicrodeposits = (
  params: Params<
    t_PostSetupIntentsIntentVerifyMicrodepositsParamSchema,
    void,
    t_PostSetupIntentsIntentVerifyMicrodepositsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_setup_intent> | Response<StatusCode, t_error>>

export type GetShippingRates = (
  params: Params<
    void,
    t_GetShippingRatesQuerySchema,
    t_GetShippingRatesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_shipping_rate[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostShippingRates = (
  params: Params<void, void, t_PostShippingRatesBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_shipping_rate> | Response<StatusCode, t_error>>

export type GetShippingRatesShippingRateToken = (
  params: Params<
    t_GetShippingRatesShippingRateTokenParamSchema,
    t_GetShippingRatesShippingRateTokenQuerySchema,
    t_GetShippingRatesShippingRateTokenBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_shipping_rate> | Response<StatusCode, t_error>>

export type PostShippingRatesShippingRateToken = (
  params: Params<
    t_PostShippingRatesShippingRateTokenParamSchema,
    void,
    t_PostShippingRatesShippingRateTokenBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_shipping_rate> | Response<StatusCode, t_error>>

export type GetSigmaScheduledQueryRuns = (
  params: Params<
    void,
    t_GetSigmaScheduledQueryRunsQuerySchema,
    t_GetSigmaScheduledQueryRunsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_scheduled_query_run[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetSigmaScheduledQueryRunsScheduledQueryRun = (
  params: Params<
    t_GetSigmaScheduledQueryRunsScheduledQueryRunParamSchema,
    t_GetSigmaScheduledQueryRunsScheduledQueryRunQuerySchema,
    t_GetSigmaScheduledQueryRunsScheduledQueryRunBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_scheduled_query_run> | Response<StatusCode, t_error>
>

export type PostSources = (
  params: Params<void, void, t_PostSourcesBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_source> | Response<StatusCode, t_error>>

export type GetSourcesSource = (
  params: Params<
    t_GetSourcesSourceParamSchema,
    t_GetSourcesSourceQuerySchema,
    t_GetSourcesSourceBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_source> | Response<StatusCode, t_error>>

export type PostSourcesSource = (
  params: Params<
    t_PostSourcesSourceParamSchema,
    void,
    t_PostSourcesSourceBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_source> | Response<StatusCode, t_error>>

export type GetSourcesSourceMandateNotificationsMandateNotification = (
  params: Params<
    t_GetSourcesSourceMandateNotificationsMandateNotificationParamSchema,
    t_GetSourcesSourceMandateNotificationsMandateNotificationQuerySchema,
    | t_GetSourcesSourceMandateNotificationsMandateNotificationBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_source_mandate_notification> | Response<StatusCode, t_error>
>

export type GetSourcesSourceSourceTransactions = (
  params: Params<
    t_GetSourcesSourceSourceTransactionsParamSchema,
    t_GetSourcesSourceSourceTransactionsQuerySchema,
    t_GetSourcesSourceSourceTransactionsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_source_transaction[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetSourcesSourceSourceTransactionsSourceTransaction = (
  params: Params<
    t_GetSourcesSourceSourceTransactionsSourceTransactionParamSchema,
    t_GetSourcesSourceSourceTransactionsSourceTransactionQuerySchema,
    t_GetSourcesSourceSourceTransactionsSourceTransactionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_source_transaction> | Response<StatusCode, t_error>
>

export type PostSourcesSourceVerify = (
  params: Params<
    t_PostSourcesSourceVerifyParamSchema,
    void,
    t_PostSourcesSourceVerifyBodySchema
  >,
  ctx: Context,
) => Promise<Response<200, t_source> | Response<StatusCode, t_error>>

export type GetSubscriptionItems = (
  params: Params<
    void,
    t_GetSubscriptionItemsQuerySchema,
    t_GetSubscriptionItemsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_subscription_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostSubscriptionItems = (
  params: Params<void, void, t_PostSubscriptionItemsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_subscription_item> | Response<StatusCode, t_error>>

export type DeleteSubscriptionItemsItem = (
  params: Params<
    t_DeleteSubscriptionItemsItemParamSchema,
    void,
    t_DeleteSubscriptionItemsItemBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_deleted_subscription_item> | Response<StatusCode, t_error>
>

export type GetSubscriptionItemsItem = (
  params: Params<
    t_GetSubscriptionItemsItemParamSchema,
    t_GetSubscriptionItemsItemQuerySchema,
    t_GetSubscriptionItemsItemBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_subscription_item> | Response<StatusCode, t_error>>

export type PostSubscriptionItemsItem = (
  params: Params<
    t_PostSubscriptionItemsItemParamSchema,
    void,
    t_PostSubscriptionItemsItemBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_subscription_item> | Response<StatusCode, t_error>>

export type GetSubscriptionItemsSubscriptionItemUsageRecordSummaries = (
  params: Params<
    t_GetSubscriptionItemsSubscriptionItemUsageRecordSummariesParamSchema,
    t_GetSubscriptionItemsSubscriptionItemUsageRecordSummariesQuerySchema,
    | t_GetSubscriptionItemsSubscriptionItemUsageRecordSummariesBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_usage_record_summary[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostSubscriptionItemsSubscriptionItemUsageRecords = (
  params: Params<
    t_PostSubscriptionItemsSubscriptionItemUsageRecordsParamSchema,
    void,
    t_PostSubscriptionItemsSubscriptionItemUsageRecordsBodySchema
  >,
  ctx: Context,
) => Promise<Response<200, t_usage_record> | Response<StatusCode, t_error>>

export type GetSubscriptionSchedules = (
  params: Params<
    void,
    t_GetSubscriptionSchedulesQuerySchema,
    t_GetSubscriptionSchedulesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_subscription_schedule[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostSubscriptionSchedules = (
  params: Params<void, void, t_PostSubscriptionSchedulesBodySchema | undefined>,
  ctx: Context,
) => Promise<
  Response<200, t_subscription_schedule> | Response<StatusCode, t_error>
>

export type GetSubscriptionSchedulesSchedule = (
  params: Params<
    t_GetSubscriptionSchedulesScheduleParamSchema,
    t_GetSubscriptionSchedulesScheduleQuerySchema,
    t_GetSubscriptionSchedulesScheduleBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_subscription_schedule> | Response<StatusCode, t_error>
>

export type PostSubscriptionSchedulesSchedule = (
  params: Params<
    t_PostSubscriptionSchedulesScheduleParamSchema,
    void,
    t_PostSubscriptionSchedulesScheduleBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_subscription_schedule> | Response<StatusCode, t_error>
>

export type PostSubscriptionSchedulesScheduleCancel = (
  params: Params<
    t_PostSubscriptionSchedulesScheduleCancelParamSchema,
    void,
    t_PostSubscriptionSchedulesScheduleCancelBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_subscription_schedule> | Response<StatusCode, t_error>
>

export type PostSubscriptionSchedulesScheduleRelease = (
  params: Params<
    t_PostSubscriptionSchedulesScheduleReleaseParamSchema,
    void,
    t_PostSubscriptionSchedulesScheduleReleaseBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_subscription_schedule> | Response<StatusCode, t_error>
>

export type GetSubscriptions = (
  params: Params<
    void,
    t_GetSubscriptionsQuerySchema,
    t_GetSubscriptionsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_subscription[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostSubscriptions = (
  params: Params<void, void, t_PostSubscriptionsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_subscription> | Response<StatusCode, t_error>>

export type GetSubscriptionsSearch = (
  params: Params<
    void,
    t_GetSubscriptionsSearchQuerySchema,
    t_GetSubscriptionsSearchBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_subscription[]
        has_more: boolean
        next_page?: string | null
        object: "search_result"
        total_count?: number
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type DeleteSubscriptionsSubscriptionExposedId = (
  params: Params<
    t_DeleteSubscriptionsSubscriptionExposedIdParamSchema,
    void,
    t_DeleteSubscriptionsSubscriptionExposedIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_subscription> | Response<StatusCode, t_error>>

export type GetSubscriptionsSubscriptionExposedId = (
  params: Params<
    t_GetSubscriptionsSubscriptionExposedIdParamSchema,
    t_GetSubscriptionsSubscriptionExposedIdQuerySchema,
    t_GetSubscriptionsSubscriptionExposedIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_subscription> | Response<StatusCode, t_error>>

export type PostSubscriptionsSubscriptionExposedId = (
  params: Params<
    t_PostSubscriptionsSubscriptionExposedIdParamSchema,
    void,
    t_PostSubscriptionsSubscriptionExposedIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_subscription> | Response<StatusCode, t_error>>

export type DeleteSubscriptionsSubscriptionExposedIdDiscount = (
  params: Params<
    t_DeleteSubscriptionsSubscriptionExposedIdDiscountParamSchema,
    void,
    t_DeleteSubscriptionsSubscriptionExposedIdDiscountBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_deleted_discount> | Response<StatusCode, t_error>>

export type PostSubscriptionsSubscriptionResume = (
  params: Params<
    t_PostSubscriptionsSubscriptionResumeParamSchema,
    void,
    t_PostSubscriptionsSubscriptionResumeBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_subscription> | Response<StatusCode, t_error>>

export type PostTaxCalculations = (
  params: Params<void, void, t_PostTaxCalculationsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_tax_calculation> | Response<StatusCode, t_error>>

export type GetTaxCalculationsCalculationLineItems = (
  params: Params<
    t_GetTaxCalculationsCalculationLineItemsParamSchema,
    t_GetTaxCalculationsCalculationLineItemsQuerySchema,
    t_GetTaxCalculationsCalculationLineItemsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_tax_calculation_line_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetTaxSettings = (
  params: Params<
    void,
    t_GetTaxSettingsQuerySchema,
    t_GetTaxSettingsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_tax_settings> | Response<StatusCode, t_error>>

export type PostTaxSettings = (
  params: Params<void, void, t_PostTaxSettingsBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_tax_settings> | Response<StatusCode, t_error>>

export type PostTaxTransactionsCreateFromCalculation = (
  params: Params<
    void,
    void,
    t_PostTaxTransactionsCreateFromCalculationBodySchema
  >,
  ctx: Context,
) => Promise<Response<200, t_tax_transaction> | Response<StatusCode, t_error>>

export type PostTaxTransactionsCreateReversal = (
  params: Params<void, void, t_PostTaxTransactionsCreateReversalBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_tax_transaction> | Response<StatusCode, t_error>>

export type GetTaxTransactionsTransaction = (
  params: Params<
    t_GetTaxTransactionsTransactionParamSchema,
    t_GetTaxTransactionsTransactionQuerySchema,
    t_GetTaxTransactionsTransactionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_tax_transaction> | Response<StatusCode, t_error>>

export type GetTaxTransactionsTransactionLineItems = (
  params: Params<
    t_GetTaxTransactionsTransactionLineItemsParamSchema,
    t_GetTaxTransactionsTransactionLineItemsQuerySchema,
    t_GetTaxTransactionsTransactionLineItemsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_tax_transaction_line_item[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetTaxCodes = (
  params: Params<
    void,
    t_GetTaxCodesQuerySchema,
    t_GetTaxCodesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_tax_code[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetTaxCodesId = (
  params: Params<
    t_GetTaxCodesIdParamSchema,
    t_GetTaxCodesIdQuerySchema,
    t_GetTaxCodesIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_tax_code> | Response<StatusCode, t_error>>

export type GetTaxRates = (
  params: Params<
    void,
    t_GetTaxRatesQuerySchema,
    t_GetTaxRatesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_tax_rate[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTaxRates = (
  params: Params<void, void, t_PostTaxRatesBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_tax_rate> | Response<StatusCode, t_error>>

export type GetTaxRatesTaxRate = (
  params: Params<
    t_GetTaxRatesTaxRateParamSchema,
    t_GetTaxRatesTaxRateQuerySchema,
    t_GetTaxRatesTaxRateBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_tax_rate> | Response<StatusCode, t_error>>

export type PostTaxRatesTaxRate = (
  params: Params<
    t_PostTaxRatesTaxRateParamSchema,
    void,
    t_PostTaxRatesTaxRateBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_tax_rate> | Response<StatusCode, t_error>>

export type GetTerminalConfigurations = (
  params: Params<
    void,
    t_GetTerminalConfigurationsQuerySchema,
    t_GetTerminalConfigurationsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_terminal_configuration[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTerminalConfigurations = (
  params: Params<
    void,
    void,
    t_PostTerminalConfigurationsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_terminal_configuration> | Response<StatusCode, t_error>
>

export type DeleteTerminalConfigurationsConfiguration = (
  params: Params<
    t_DeleteTerminalConfigurationsConfigurationParamSchema,
    void,
    t_DeleteTerminalConfigurationsConfigurationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_deleted_terminal_configuration>
  | Response<StatusCode, t_error>
>

export type GetTerminalConfigurationsConfiguration = (
  params: Params<
    t_GetTerminalConfigurationsConfigurationParamSchema,
    t_GetTerminalConfigurationsConfigurationQuerySchema,
    t_GetTerminalConfigurationsConfigurationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_terminal_configuration | t_deleted_terminal_configuration>
  | Response<StatusCode, t_error>
>

export type PostTerminalConfigurationsConfiguration = (
  params: Params<
    t_PostTerminalConfigurationsConfigurationParamSchema,
    void,
    t_PostTerminalConfigurationsConfigurationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_terminal_configuration | t_deleted_terminal_configuration>
  | Response<StatusCode, t_error>
>

export type PostTerminalConnectionTokens = (
  params: Params<
    void,
    void,
    t_PostTerminalConnectionTokensBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_terminal_connection_token> | Response<StatusCode, t_error>
>

export type GetTerminalLocations = (
  params: Params<
    void,
    t_GetTerminalLocationsQuerySchema,
    t_GetTerminalLocationsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_terminal_location[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTerminalLocations = (
  params: Params<void, void, t_PostTerminalLocationsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_terminal_location> | Response<StatusCode, t_error>>

export type DeleteTerminalLocationsLocation = (
  params: Params<
    t_DeleteTerminalLocationsLocationParamSchema,
    void,
    t_DeleteTerminalLocationsLocationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_deleted_terminal_location> | Response<StatusCode, t_error>
>

export type GetTerminalLocationsLocation = (
  params: Params<
    t_GetTerminalLocationsLocationParamSchema,
    t_GetTerminalLocationsLocationQuerySchema,
    t_GetTerminalLocationsLocationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_terminal_location | t_deleted_terminal_location>
  | Response<StatusCode, t_error>
>

export type PostTerminalLocationsLocation = (
  params: Params<
    t_PostTerminalLocationsLocationParamSchema,
    void,
    t_PostTerminalLocationsLocationBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_terminal_location | t_deleted_terminal_location>
  | Response<StatusCode, t_error>
>

export type GetTerminalReaders = (
  params: Params<
    void,
    t_GetTerminalReadersQuerySchema,
    t_GetTerminalReadersBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_terminal_reader[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTerminalReaders = (
  params: Params<void, void, t_PostTerminalReadersBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_terminal_reader> | Response<StatusCode, t_error>>

export type DeleteTerminalReadersReader = (
  params: Params<
    t_DeleteTerminalReadersReaderParamSchema,
    void,
    t_DeleteTerminalReadersReaderBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_deleted_terminal_reader> | Response<StatusCode, t_error>
>

export type GetTerminalReadersReader = (
  params: Params<
    t_GetTerminalReadersReaderParamSchema,
    t_GetTerminalReadersReaderQuerySchema,
    t_GetTerminalReadersReaderBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_terminal_reader | t_deleted_terminal_reader>
  | Response<StatusCode, t_error>
>

export type PostTerminalReadersReader = (
  params: Params<
    t_PostTerminalReadersReaderParamSchema,
    void,
    t_PostTerminalReadersReaderBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_terminal_reader | t_deleted_terminal_reader>
  | Response<StatusCode, t_error>
>

export type PostTerminalReadersReaderCancelAction = (
  params: Params<
    t_PostTerminalReadersReaderCancelActionParamSchema,
    void,
    t_PostTerminalReadersReaderCancelActionBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_terminal_reader> | Response<StatusCode, t_error>>

export type PostTerminalReadersReaderProcessPaymentIntent = (
  params: Params<
    t_PostTerminalReadersReaderProcessPaymentIntentParamSchema,
    void,
    t_PostTerminalReadersReaderProcessPaymentIntentBodySchema
  >,
  ctx: Context,
) => Promise<Response<200, t_terminal_reader> | Response<StatusCode, t_error>>

export type PostTerminalReadersReaderProcessSetupIntent = (
  params: Params<
    t_PostTerminalReadersReaderProcessSetupIntentParamSchema,
    void,
    t_PostTerminalReadersReaderProcessSetupIntentBodySchema
  >,
  ctx: Context,
) => Promise<Response<200, t_terminal_reader> | Response<StatusCode, t_error>>

export type PostTerminalReadersReaderRefundPayment = (
  params: Params<
    t_PostTerminalReadersReaderRefundPaymentParamSchema,
    void,
    t_PostTerminalReadersReaderRefundPaymentBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_terminal_reader> | Response<StatusCode, t_error>>

export type PostTerminalReadersReaderSetReaderDisplay = (
  params: Params<
    t_PostTerminalReadersReaderSetReaderDisplayParamSchema,
    void,
    t_PostTerminalReadersReaderSetReaderDisplayBodySchema
  >,
  ctx: Context,
) => Promise<Response<200, t_terminal_reader> | Response<StatusCode, t_error>>

export type PostTestHelpersCustomersCustomerFundCashBalance = (
  params: Params<
    t_PostTestHelpersCustomersCustomerFundCashBalanceParamSchema,
    void,
    t_PostTestHelpersCustomersCustomerFundCashBalanceBodySchema
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_customer_cash_balance_transaction>
  | Response<StatusCode, t_error>
>

export type PostTestHelpersIssuingAuthorizations = (
  params: Params<void, void, t_PostTestHelpersIssuingAuthorizationsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_authorization> | Response<StatusCode, t_error>
>

export type PostTestHelpersIssuingAuthorizationsAuthorizationCapture = (
  params: Params<
    t_PostTestHelpersIssuingAuthorizationsAuthorizationCaptureParamSchema,
    void,
    | t_PostTestHelpersIssuingAuthorizationsAuthorizationCaptureBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_authorization> | Response<StatusCode, t_error>
>

export type PostTestHelpersIssuingAuthorizationsAuthorizationExpire = (
  params: Params<
    t_PostTestHelpersIssuingAuthorizationsAuthorizationExpireParamSchema,
    void,
    | t_PostTestHelpersIssuingAuthorizationsAuthorizationExpireBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_authorization> | Response<StatusCode, t_error>
>

export type PostTestHelpersIssuingAuthorizationsAuthorizationIncrement = (
  params: Params<
    t_PostTestHelpersIssuingAuthorizationsAuthorizationIncrementParamSchema,
    void,
    t_PostTestHelpersIssuingAuthorizationsAuthorizationIncrementBodySchema
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_authorization> | Response<StatusCode, t_error>
>

export type PostTestHelpersIssuingAuthorizationsAuthorizationReverse = (
  params: Params<
    t_PostTestHelpersIssuingAuthorizationsAuthorizationReverseParamSchema,
    void,
    | t_PostTestHelpersIssuingAuthorizationsAuthorizationReverseBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_authorization> | Response<StatusCode, t_error>
>

export type PostTestHelpersIssuingCardsCardShippingDeliver = (
  params: Params<
    t_PostTestHelpersIssuingCardsCardShippingDeliverParamSchema,
    void,
    t_PostTestHelpersIssuingCardsCardShippingDeliverBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_issuing_card> | Response<StatusCode, t_error>>

export type PostTestHelpersIssuingCardsCardShippingFail = (
  params: Params<
    t_PostTestHelpersIssuingCardsCardShippingFailParamSchema,
    void,
    t_PostTestHelpersIssuingCardsCardShippingFailBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_issuing_card> | Response<StatusCode, t_error>>

export type PostTestHelpersIssuingCardsCardShippingReturn = (
  params: Params<
    t_PostTestHelpersIssuingCardsCardShippingReturnParamSchema,
    void,
    t_PostTestHelpersIssuingCardsCardShippingReturnBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_issuing_card> | Response<StatusCode, t_error>>

export type PostTestHelpersIssuingCardsCardShippingShip = (
  params: Params<
    t_PostTestHelpersIssuingCardsCardShippingShipParamSchema,
    void,
    t_PostTestHelpersIssuingCardsCardShippingShipBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_issuing_card> | Response<StatusCode, t_error>>

export type PostTestHelpersIssuingTransactionsCreateForceCapture = (
  params: Params<
    void,
    void,
    t_PostTestHelpersIssuingTransactionsCreateForceCaptureBodySchema
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_transaction> | Response<StatusCode, t_error>
>

export type PostTestHelpersIssuingTransactionsCreateUnlinkedRefund = (
  params: Params<
    void,
    void,
    t_PostTestHelpersIssuingTransactionsCreateUnlinkedRefundBodySchema
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_transaction> | Response<StatusCode, t_error>
>

export type PostTestHelpersIssuingTransactionsTransactionRefund = (
  params: Params<
    t_PostTestHelpersIssuingTransactionsTransactionRefundParamSchema,
    void,
    t_PostTestHelpersIssuingTransactionsTransactionRefundBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_issuing_transaction> | Response<StatusCode, t_error>
>

export type PostTestHelpersRefundsRefundExpire = (
  params: Params<
    t_PostTestHelpersRefundsRefundExpireParamSchema,
    void,
    t_PostTestHelpersRefundsRefundExpireBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_refund> | Response<StatusCode, t_error>>

export type PostTestHelpersTerminalReadersReaderPresentPaymentMethod = (
  params: Params<
    t_PostTestHelpersTerminalReadersReaderPresentPaymentMethodParamSchema,
    void,
    | t_PostTestHelpersTerminalReadersReaderPresentPaymentMethodBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_terminal_reader> | Response<StatusCode, t_error>>

export type GetTestHelpersTestClocks = (
  params: Params<
    void,
    t_GetTestHelpersTestClocksQuerySchema,
    t_GetTestHelpersTestClocksBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_test_helpers_test_clock[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTestHelpersTestClocks = (
  params: Params<void, void, t_PostTestHelpersTestClocksBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_test_helpers_test_clock> | Response<StatusCode, t_error>
>

export type DeleteTestHelpersTestClocksTestClock = (
  params: Params<
    t_DeleteTestHelpersTestClocksTestClockParamSchema,
    void,
    t_DeleteTestHelpersTestClocksTestClockBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_deleted_test_helpers_test_clock>
  | Response<StatusCode, t_error>
>

export type GetTestHelpersTestClocksTestClock = (
  params: Params<
    t_GetTestHelpersTestClocksTestClockParamSchema,
    t_GetTestHelpersTestClocksTestClockQuerySchema,
    t_GetTestHelpersTestClocksTestClockBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_test_helpers_test_clock> | Response<StatusCode, t_error>
>

export type PostTestHelpersTestClocksTestClockAdvance = (
  params: Params<
    t_PostTestHelpersTestClocksTestClockAdvanceParamSchema,
    void,
    t_PostTestHelpersTestClocksTestClockAdvanceBodySchema
  >,
  ctx: Context,
) => Promise<
  Response<200, t_test_helpers_test_clock> | Response<StatusCode, t_error>
>

export type PostTestHelpersTreasuryInboundTransfersIdFail = (
  params: Params<
    t_PostTestHelpersTreasuryInboundTransfersIdFailParamSchema,
    void,
    t_PostTestHelpersTreasuryInboundTransfersIdFailBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_inbound_transfer> | Response<StatusCode, t_error>
>

export type PostTestHelpersTreasuryInboundTransfersIdReturn = (
  params: Params<
    t_PostTestHelpersTreasuryInboundTransfersIdReturnParamSchema,
    void,
    t_PostTestHelpersTreasuryInboundTransfersIdReturnBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_inbound_transfer> | Response<StatusCode, t_error>
>

export type PostTestHelpersTreasuryInboundTransfersIdSucceed = (
  params: Params<
    t_PostTestHelpersTreasuryInboundTransfersIdSucceedParamSchema,
    void,
    t_PostTestHelpersTreasuryInboundTransfersIdSucceedBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_inbound_transfer> | Response<StatusCode, t_error>
>

export type PostTestHelpersTreasuryOutboundPaymentsIdFail = (
  params: Params<
    t_PostTestHelpersTreasuryOutboundPaymentsIdFailParamSchema,
    void,
    t_PostTestHelpersTreasuryOutboundPaymentsIdFailBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_payment> | Response<StatusCode, t_error>
>

export type PostTestHelpersTreasuryOutboundPaymentsIdPost = (
  params: Params<
    t_PostTestHelpersTreasuryOutboundPaymentsIdPostParamSchema,
    void,
    t_PostTestHelpersTreasuryOutboundPaymentsIdPostBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_payment> | Response<StatusCode, t_error>
>

export type PostTestHelpersTreasuryOutboundPaymentsIdReturn = (
  params: Params<
    t_PostTestHelpersTreasuryOutboundPaymentsIdReturnParamSchema,
    void,
    t_PostTestHelpersTreasuryOutboundPaymentsIdReturnBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_payment> | Response<StatusCode, t_error>
>

export type PostTestHelpersTreasuryOutboundTransfersOutboundTransferFail = (
  params: Params<
    t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailParamSchema,
    void,
    | t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferFailBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_transfer> | Response<StatusCode, t_error>
>

export type PostTestHelpersTreasuryOutboundTransfersOutboundTransferPost = (
  params: Params<
    t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostParamSchema,
    void,
    | t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferPostBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_transfer> | Response<StatusCode, t_error>
>

export type PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturn = (
  params: Params<
    t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnParamSchema,
    void,
    | t_PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturnBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_transfer> | Response<StatusCode, t_error>
>

export type PostTestHelpersTreasuryReceivedCredits = (
  params: Params<
    void,
    void,
    t_PostTestHelpersTreasuryReceivedCreditsBodySchema
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_received_credit> | Response<StatusCode, t_error>
>

export type PostTestHelpersTreasuryReceivedDebits = (
  params: Params<void, void, t_PostTestHelpersTreasuryReceivedDebitsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_received_debit> | Response<StatusCode, t_error>
>

export type PostTokens = (
  params: Params<void, void, t_PostTokensBodySchema | undefined>,
  ctx: Context,
) => Promise<Response<200, t_token> | Response<StatusCode, t_error>>

export type GetTokensToken = (
  params: Params<
    t_GetTokensTokenParamSchema,
    t_GetTokensTokenQuerySchema,
    t_GetTokensTokenBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_token> | Response<StatusCode, t_error>>

export type GetTopups = (
  params: Params<
    void,
    t_GetTopupsQuerySchema,
    t_GetTopupsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_topup[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTopups = (
  params: Params<void, void, t_PostTopupsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_topup> | Response<StatusCode, t_error>>

export type GetTopupsTopup = (
  params: Params<
    t_GetTopupsTopupParamSchema,
    t_GetTopupsTopupQuerySchema,
    t_GetTopupsTopupBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_topup> | Response<StatusCode, t_error>>

export type PostTopupsTopup = (
  params: Params<
    t_PostTopupsTopupParamSchema,
    void,
    t_PostTopupsTopupBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_topup> | Response<StatusCode, t_error>>

export type PostTopupsTopupCancel = (
  params: Params<
    t_PostTopupsTopupCancelParamSchema,
    void,
    t_PostTopupsTopupCancelBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_topup> | Response<StatusCode, t_error>>

export type GetTransfers = (
  params: Params<
    void,
    t_GetTransfersQuerySchema,
    t_GetTransfersBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_transfer[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTransfers = (
  params: Params<void, void, t_PostTransfersBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_transfer> | Response<StatusCode, t_error>>

export type GetTransfersIdReversals = (
  params: Params<
    t_GetTransfersIdReversalsParamSchema,
    t_GetTransfersIdReversalsQuerySchema,
    t_GetTransfersIdReversalsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_transfer_reversal[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTransfersIdReversals = (
  params: Params<
    t_PostTransfersIdReversalsParamSchema,
    void,
    t_PostTransfersIdReversalsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_transfer_reversal> | Response<StatusCode, t_error>>

export type GetTransfersTransfer = (
  params: Params<
    t_GetTransfersTransferParamSchema,
    t_GetTransfersTransferQuerySchema,
    t_GetTransfersTransferBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_transfer> | Response<StatusCode, t_error>>

export type PostTransfersTransfer = (
  params: Params<
    t_PostTransfersTransferParamSchema,
    void,
    t_PostTransfersTransferBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_transfer> | Response<StatusCode, t_error>>

export type GetTransfersTransferReversalsId = (
  params: Params<
    t_GetTransfersTransferReversalsIdParamSchema,
    t_GetTransfersTransferReversalsIdQuerySchema,
    t_GetTransfersTransferReversalsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_transfer_reversal> | Response<StatusCode, t_error>>

export type PostTransfersTransferReversalsId = (
  params: Params<
    t_PostTransfersTransferReversalsIdParamSchema,
    void,
    t_PostTransfersTransferReversalsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_transfer_reversal> | Response<StatusCode, t_error>>

export type GetTreasuryCreditReversals = (
  params: Params<
    void,
    t_GetTreasuryCreditReversalsQuerySchema,
    t_GetTreasuryCreditReversalsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_treasury_credit_reversal[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTreasuryCreditReversals = (
  params: Params<void, void, t_PostTreasuryCreditReversalsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_credit_reversal> | Response<StatusCode, t_error>
>

export type GetTreasuryCreditReversalsCreditReversal = (
  params: Params<
    t_GetTreasuryCreditReversalsCreditReversalParamSchema,
    t_GetTreasuryCreditReversalsCreditReversalQuerySchema,
    t_GetTreasuryCreditReversalsCreditReversalBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_credit_reversal> | Response<StatusCode, t_error>
>

export type GetTreasuryDebitReversals = (
  params: Params<
    void,
    t_GetTreasuryDebitReversalsQuerySchema,
    t_GetTreasuryDebitReversalsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_treasury_debit_reversal[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTreasuryDebitReversals = (
  params: Params<void, void, t_PostTreasuryDebitReversalsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_debit_reversal> | Response<StatusCode, t_error>
>

export type GetTreasuryDebitReversalsDebitReversal = (
  params: Params<
    t_GetTreasuryDebitReversalsDebitReversalParamSchema,
    t_GetTreasuryDebitReversalsDebitReversalQuerySchema,
    t_GetTreasuryDebitReversalsDebitReversalBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_debit_reversal> | Response<StatusCode, t_error>
>

export type GetTreasuryFinancialAccounts = (
  params: Params<
    void,
    t_GetTreasuryFinancialAccountsQuerySchema,
    t_GetTreasuryFinancialAccountsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_treasury_financial_account[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTreasuryFinancialAccounts = (
  params: Params<void, void, t_PostTreasuryFinancialAccountsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_financial_account> | Response<StatusCode, t_error>
>

export type GetTreasuryFinancialAccountsFinancialAccount = (
  params: Params<
    t_GetTreasuryFinancialAccountsFinancialAccountParamSchema,
    t_GetTreasuryFinancialAccountsFinancialAccountQuerySchema,
    t_GetTreasuryFinancialAccountsFinancialAccountBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_financial_account> | Response<StatusCode, t_error>
>

export type PostTreasuryFinancialAccountsFinancialAccount = (
  params: Params<
    t_PostTreasuryFinancialAccountsFinancialAccountParamSchema,
    void,
    t_PostTreasuryFinancialAccountsFinancialAccountBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_financial_account> | Response<StatusCode, t_error>
>

export type GetTreasuryFinancialAccountsFinancialAccountFeatures = (
  params: Params<
    t_GetTreasuryFinancialAccountsFinancialAccountFeaturesParamSchema,
    t_GetTreasuryFinancialAccountsFinancialAccountFeaturesQuerySchema,
    t_GetTreasuryFinancialAccountsFinancialAccountFeaturesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_treasury_financial_account_features>
  | Response<StatusCode, t_error>
>

export type PostTreasuryFinancialAccountsFinancialAccountFeatures = (
  params: Params<
    t_PostTreasuryFinancialAccountsFinancialAccountFeaturesParamSchema,
    void,
    | t_PostTreasuryFinancialAccountsFinancialAccountFeaturesBodySchema
    | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<200, t_treasury_financial_account_features>
  | Response<StatusCode, t_error>
>

export type GetTreasuryInboundTransfers = (
  params: Params<
    void,
    t_GetTreasuryInboundTransfersQuerySchema,
    t_GetTreasuryInboundTransfersBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_treasury_inbound_transfer[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTreasuryInboundTransfers = (
  params: Params<void, void, t_PostTreasuryInboundTransfersBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_inbound_transfer> | Response<StatusCode, t_error>
>

export type GetTreasuryInboundTransfersId = (
  params: Params<
    t_GetTreasuryInboundTransfersIdParamSchema,
    t_GetTreasuryInboundTransfersIdQuerySchema,
    t_GetTreasuryInboundTransfersIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_inbound_transfer> | Response<StatusCode, t_error>
>

export type PostTreasuryInboundTransfersInboundTransferCancel = (
  params: Params<
    t_PostTreasuryInboundTransfersInboundTransferCancelParamSchema,
    void,
    t_PostTreasuryInboundTransfersInboundTransferCancelBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_inbound_transfer> | Response<StatusCode, t_error>
>

export type GetTreasuryOutboundPayments = (
  params: Params<
    void,
    t_GetTreasuryOutboundPaymentsQuerySchema,
    t_GetTreasuryOutboundPaymentsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_treasury_outbound_payment[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTreasuryOutboundPayments = (
  params: Params<void, void, t_PostTreasuryOutboundPaymentsBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_payment> | Response<StatusCode, t_error>
>

export type GetTreasuryOutboundPaymentsId = (
  params: Params<
    t_GetTreasuryOutboundPaymentsIdParamSchema,
    t_GetTreasuryOutboundPaymentsIdQuerySchema,
    t_GetTreasuryOutboundPaymentsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_payment> | Response<StatusCode, t_error>
>

export type PostTreasuryOutboundPaymentsIdCancel = (
  params: Params<
    t_PostTreasuryOutboundPaymentsIdCancelParamSchema,
    void,
    t_PostTreasuryOutboundPaymentsIdCancelBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_payment> | Response<StatusCode, t_error>
>

export type GetTreasuryOutboundTransfers = (
  params: Params<
    void,
    t_GetTreasuryOutboundTransfersQuerySchema,
    t_GetTreasuryOutboundTransfersBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_treasury_outbound_transfer[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostTreasuryOutboundTransfers = (
  params: Params<void, void, t_PostTreasuryOutboundTransfersBodySchema>,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_transfer> | Response<StatusCode, t_error>
>

export type GetTreasuryOutboundTransfersOutboundTransfer = (
  params: Params<
    t_GetTreasuryOutboundTransfersOutboundTransferParamSchema,
    t_GetTreasuryOutboundTransfersOutboundTransferQuerySchema,
    t_GetTreasuryOutboundTransfersOutboundTransferBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_transfer> | Response<StatusCode, t_error>
>

export type PostTreasuryOutboundTransfersOutboundTransferCancel = (
  params: Params<
    t_PostTreasuryOutboundTransfersOutboundTransferCancelParamSchema,
    void,
    t_PostTreasuryOutboundTransfersOutboundTransferCancelBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_outbound_transfer> | Response<StatusCode, t_error>
>

export type GetTreasuryReceivedCredits = (
  params: Params<
    void,
    t_GetTreasuryReceivedCreditsQuerySchema,
    t_GetTreasuryReceivedCreditsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_treasury_received_credit[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetTreasuryReceivedCreditsId = (
  params: Params<
    t_GetTreasuryReceivedCreditsIdParamSchema,
    t_GetTreasuryReceivedCreditsIdQuerySchema,
    t_GetTreasuryReceivedCreditsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_received_credit> | Response<StatusCode, t_error>
>

export type GetTreasuryReceivedDebits = (
  params: Params<
    void,
    t_GetTreasuryReceivedDebitsQuerySchema,
    t_GetTreasuryReceivedDebitsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_treasury_received_debit[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetTreasuryReceivedDebitsId = (
  params: Params<
    t_GetTreasuryReceivedDebitsIdParamSchema,
    t_GetTreasuryReceivedDebitsIdQuerySchema,
    t_GetTreasuryReceivedDebitsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_received_debit> | Response<StatusCode, t_error>
>

export type GetTreasuryTransactionEntries = (
  params: Params<
    void,
    t_GetTreasuryTransactionEntriesQuerySchema,
    t_GetTreasuryTransactionEntriesBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_treasury_transaction_entry[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetTreasuryTransactionEntriesId = (
  params: Params<
    t_GetTreasuryTransactionEntriesIdParamSchema,
    t_GetTreasuryTransactionEntriesIdQuerySchema,
    t_GetTreasuryTransactionEntriesIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_transaction_entry> | Response<StatusCode, t_error>
>

export type GetTreasuryTransactions = (
  params: Params<
    void,
    t_GetTreasuryTransactionsQuerySchema,
    t_GetTreasuryTransactionsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_treasury_transaction[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type GetTreasuryTransactionsId = (
  params: Params<
    t_GetTreasuryTransactionsIdParamSchema,
    t_GetTreasuryTransactionsIdQuerySchema,
    t_GetTreasuryTransactionsIdBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_treasury_transaction> | Response<StatusCode, t_error>
>

export type GetWebhookEndpoints = (
  params: Params<
    void,
    t_GetWebhookEndpointsQuerySchema,
    t_GetWebhookEndpointsBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  | Response<
      200,
      {
        data: t_webhook_endpoint[]
        has_more: boolean
        object: "list"
        url: string
      }
    >
  | Response<StatusCode, t_error>
>

export type PostWebhookEndpoints = (
  params: Params<void, void, t_PostWebhookEndpointsBodySchema>,
  ctx: Context,
) => Promise<Response<200, t_webhook_endpoint> | Response<StatusCode, t_error>>

export type DeleteWebhookEndpointsWebhookEndpoint = (
  params: Params<
    t_DeleteWebhookEndpointsWebhookEndpointParamSchema,
    void,
    t_DeleteWebhookEndpointsWebhookEndpointBodySchema | undefined
  >,
  ctx: Context,
) => Promise<
  Response<200, t_deleted_webhook_endpoint> | Response<StatusCode, t_error>
>

export type GetWebhookEndpointsWebhookEndpoint = (
  params: Params<
    t_GetWebhookEndpointsWebhookEndpointParamSchema,
    t_GetWebhookEndpointsWebhookEndpointQuerySchema,
    t_GetWebhookEndpointsWebhookEndpointBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_webhook_endpoint> | Response<StatusCode, t_error>>

export type PostWebhookEndpointsWebhookEndpoint = (
  params: Params<
    t_PostWebhookEndpointsWebhookEndpointParamSchema,
    void,
    t_PostWebhookEndpointsWebhookEndpointBodySchema | undefined
  >,
  ctx: Context,
) => Promise<Response<200, t_webhook_endpoint> | Response<StatusCode, t_error>>

export type Implementation = {
  getAccount: GetAccount
  postAccountLinks: PostAccountLinks
  postAccountSessions: PostAccountSessions
  getAccounts: GetAccounts
  postAccounts: PostAccounts
  deleteAccountsAccount: DeleteAccountsAccount
  getAccountsAccount: GetAccountsAccount
  postAccountsAccount: PostAccountsAccount
  postAccountsAccountBankAccounts: PostAccountsAccountBankAccounts
  deleteAccountsAccountBankAccountsId: DeleteAccountsAccountBankAccountsId
  getAccountsAccountBankAccountsId: GetAccountsAccountBankAccountsId
  postAccountsAccountBankAccountsId: PostAccountsAccountBankAccountsId
  getAccountsAccountCapabilities: GetAccountsAccountCapabilities
  getAccountsAccountCapabilitiesCapability: GetAccountsAccountCapabilitiesCapability
  postAccountsAccountCapabilitiesCapability: PostAccountsAccountCapabilitiesCapability
  getAccountsAccountExternalAccounts: GetAccountsAccountExternalAccounts
  postAccountsAccountExternalAccounts: PostAccountsAccountExternalAccounts
  deleteAccountsAccountExternalAccountsId: DeleteAccountsAccountExternalAccountsId
  getAccountsAccountExternalAccountsId: GetAccountsAccountExternalAccountsId
  postAccountsAccountExternalAccountsId: PostAccountsAccountExternalAccountsId
  postAccountsAccountLoginLinks: PostAccountsAccountLoginLinks
  getAccountsAccountPeople: GetAccountsAccountPeople
  postAccountsAccountPeople: PostAccountsAccountPeople
  deleteAccountsAccountPeoplePerson: DeleteAccountsAccountPeoplePerson
  getAccountsAccountPeoplePerson: GetAccountsAccountPeoplePerson
  postAccountsAccountPeoplePerson: PostAccountsAccountPeoplePerson
  getAccountsAccountPersons: GetAccountsAccountPersons
  postAccountsAccountPersons: PostAccountsAccountPersons
  deleteAccountsAccountPersonsPerson: DeleteAccountsAccountPersonsPerson
  getAccountsAccountPersonsPerson: GetAccountsAccountPersonsPerson
  postAccountsAccountPersonsPerson: PostAccountsAccountPersonsPerson
  postAccountsAccountReject: PostAccountsAccountReject
  getApplePayDomains: GetApplePayDomains
  postApplePayDomains: PostApplePayDomains
  deleteApplePayDomainsDomain: DeleteApplePayDomainsDomain
  getApplePayDomainsDomain: GetApplePayDomainsDomain
  getApplicationFees: GetApplicationFees
  getApplicationFeesFeeRefundsId: GetApplicationFeesFeeRefundsId
  postApplicationFeesFeeRefundsId: PostApplicationFeesFeeRefundsId
  getApplicationFeesId: GetApplicationFeesId
  postApplicationFeesIdRefund: PostApplicationFeesIdRefund
  getApplicationFeesIdRefunds: GetApplicationFeesIdRefunds
  postApplicationFeesIdRefunds: PostApplicationFeesIdRefunds
  getAppsSecrets: GetAppsSecrets
  postAppsSecrets: PostAppsSecrets
  postAppsSecretsDelete: PostAppsSecretsDelete
  getAppsSecretsFind: GetAppsSecretsFind
  getBalance: GetBalance
  getBalanceHistory: GetBalanceHistory
  getBalanceHistoryId: GetBalanceHistoryId
  getBalanceTransactions: GetBalanceTransactions
  getBalanceTransactionsId: GetBalanceTransactionsId
  getBillingPortalConfigurations: GetBillingPortalConfigurations
  postBillingPortalConfigurations: PostBillingPortalConfigurations
  getBillingPortalConfigurationsConfiguration: GetBillingPortalConfigurationsConfiguration
  postBillingPortalConfigurationsConfiguration: PostBillingPortalConfigurationsConfiguration
  postBillingPortalSessions: PostBillingPortalSessions
  getCharges: GetCharges
  postCharges: PostCharges
  getChargesSearch: GetChargesSearch
  getChargesCharge: GetChargesCharge
  postChargesCharge: PostChargesCharge
  postChargesChargeCapture: PostChargesChargeCapture
  getChargesChargeDispute: GetChargesChargeDispute
  postChargesChargeDispute: PostChargesChargeDispute
  postChargesChargeDisputeClose: PostChargesChargeDisputeClose
  postChargesChargeRefund: PostChargesChargeRefund
  getChargesChargeRefunds: GetChargesChargeRefunds
  postChargesChargeRefunds: PostChargesChargeRefunds
  getChargesChargeRefundsRefund: GetChargesChargeRefundsRefund
  postChargesChargeRefundsRefund: PostChargesChargeRefundsRefund
  getCheckoutSessions: GetCheckoutSessions
  postCheckoutSessions: PostCheckoutSessions
  getCheckoutSessionsSession: GetCheckoutSessionsSession
  postCheckoutSessionsSessionExpire: PostCheckoutSessionsSessionExpire
  getCheckoutSessionsSessionLineItems: GetCheckoutSessionsSessionLineItems
  getCountrySpecs: GetCountrySpecs
  getCountrySpecsCountry: GetCountrySpecsCountry
  getCoupons: GetCoupons
  postCoupons: PostCoupons
  deleteCouponsCoupon: DeleteCouponsCoupon
  getCouponsCoupon: GetCouponsCoupon
  postCouponsCoupon: PostCouponsCoupon
  getCreditNotes: GetCreditNotes
  postCreditNotes: PostCreditNotes
  getCreditNotesPreview: GetCreditNotesPreview
  getCreditNotesPreviewLines: GetCreditNotesPreviewLines
  getCreditNotesCreditNoteLines: GetCreditNotesCreditNoteLines
  getCreditNotesId: GetCreditNotesId
  postCreditNotesId: PostCreditNotesId
  postCreditNotesIdVoid: PostCreditNotesIdVoid
  getCustomers: GetCustomers
  postCustomers: PostCustomers
  getCustomersSearch: GetCustomersSearch
  deleteCustomersCustomer: DeleteCustomersCustomer
  getCustomersCustomer: GetCustomersCustomer
  postCustomersCustomer: PostCustomersCustomer
  getCustomersCustomerBalanceTransactions: GetCustomersCustomerBalanceTransactions
  postCustomersCustomerBalanceTransactions: PostCustomersCustomerBalanceTransactions
  getCustomersCustomerBalanceTransactionsTransaction: GetCustomersCustomerBalanceTransactionsTransaction
  postCustomersCustomerBalanceTransactionsTransaction: PostCustomersCustomerBalanceTransactionsTransaction
  getCustomersCustomerBankAccounts: GetCustomersCustomerBankAccounts
  postCustomersCustomerBankAccounts: PostCustomersCustomerBankAccounts
  deleteCustomersCustomerBankAccountsId: DeleteCustomersCustomerBankAccountsId
  getCustomersCustomerBankAccountsId: GetCustomersCustomerBankAccountsId
  postCustomersCustomerBankAccountsId: PostCustomersCustomerBankAccountsId
  postCustomersCustomerBankAccountsIdVerify: PostCustomersCustomerBankAccountsIdVerify
  getCustomersCustomerCards: GetCustomersCustomerCards
  postCustomersCustomerCards: PostCustomersCustomerCards
  deleteCustomersCustomerCardsId: DeleteCustomersCustomerCardsId
  getCustomersCustomerCardsId: GetCustomersCustomerCardsId
  postCustomersCustomerCardsId: PostCustomersCustomerCardsId
  getCustomersCustomerCashBalance: GetCustomersCustomerCashBalance
  postCustomersCustomerCashBalance: PostCustomersCustomerCashBalance
  getCustomersCustomerCashBalanceTransactions: GetCustomersCustomerCashBalanceTransactions
  getCustomersCustomerCashBalanceTransactionsTransaction: GetCustomersCustomerCashBalanceTransactionsTransaction
  deleteCustomersCustomerDiscount: DeleteCustomersCustomerDiscount
  getCustomersCustomerDiscount: GetCustomersCustomerDiscount
  postCustomersCustomerFundingInstructions: PostCustomersCustomerFundingInstructions
  getCustomersCustomerPaymentMethods: GetCustomersCustomerPaymentMethods
  getCustomersCustomerPaymentMethodsPaymentMethod: GetCustomersCustomerPaymentMethodsPaymentMethod
  getCustomersCustomerSources: GetCustomersCustomerSources
  postCustomersCustomerSources: PostCustomersCustomerSources
  deleteCustomersCustomerSourcesId: DeleteCustomersCustomerSourcesId
  getCustomersCustomerSourcesId: GetCustomersCustomerSourcesId
  postCustomersCustomerSourcesId: PostCustomersCustomerSourcesId
  postCustomersCustomerSourcesIdVerify: PostCustomersCustomerSourcesIdVerify
  getCustomersCustomerSubscriptions: GetCustomersCustomerSubscriptions
  postCustomersCustomerSubscriptions: PostCustomersCustomerSubscriptions
  deleteCustomersCustomerSubscriptionsSubscriptionExposedId: DeleteCustomersCustomerSubscriptionsSubscriptionExposedId
  getCustomersCustomerSubscriptionsSubscriptionExposedId: GetCustomersCustomerSubscriptionsSubscriptionExposedId
  postCustomersCustomerSubscriptionsSubscriptionExposedId: PostCustomersCustomerSubscriptionsSubscriptionExposedId
  deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
  getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount
  getCustomersCustomerTaxIds: GetCustomersCustomerTaxIds
  postCustomersCustomerTaxIds: PostCustomersCustomerTaxIds
  deleteCustomersCustomerTaxIdsId: DeleteCustomersCustomerTaxIdsId
  getCustomersCustomerTaxIdsId: GetCustomersCustomerTaxIdsId
  getDisputes: GetDisputes
  getDisputesDispute: GetDisputesDispute
  postDisputesDispute: PostDisputesDispute
  postDisputesDisputeClose: PostDisputesDisputeClose
  postEphemeralKeys: PostEphemeralKeys
  deleteEphemeralKeysKey: DeleteEphemeralKeysKey
  getEvents: GetEvents
  getEventsId: GetEventsId
  getExchangeRates: GetExchangeRates
  getExchangeRatesRateId: GetExchangeRatesRateId
  getFileLinks: GetFileLinks
  postFileLinks: PostFileLinks
  getFileLinksLink: GetFileLinksLink
  postFileLinksLink: PostFileLinksLink
  getFiles: GetFiles
  postFiles: PostFiles
  getFilesFile: GetFilesFile
  getFinancialConnectionsAccounts: GetFinancialConnectionsAccounts
  getFinancialConnectionsAccountsAccount: GetFinancialConnectionsAccountsAccount
  postFinancialConnectionsAccountsAccountDisconnect: PostFinancialConnectionsAccountsAccountDisconnect
  getFinancialConnectionsAccountsAccountOwners: GetFinancialConnectionsAccountsAccountOwners
  postFinancialConnectionsAccountsAccountRefresh: PostFinancialConnectionsAccountsAccountRefresh
  postFinancialConnectionsSessions: PostFinancialConnectionsSessions
  getFinancialConnectionsSessionsSession: GetFinancialConnectionsSessionsSession
  getIdentityVerificationReports: GetIdentityVerificationReports
  getIdentityVerificationReportsReport: GetIdentityVerificationReportsReport
  getIdentityVerificationSessions: GetIdentityVerificationSessions
  postIdentityVerificationSessions: PostIdentityVerificationSessions
  getIdentityVerificationSessionsSession: GetIdentityVerificationSessionsSession
  postIdentityVerificationSessionsSession: PostIdentityVerificationSessionsSession
  postIdentityVerificationSessionsSessionCancel: PostIdentityVerificationSessionsSessionCancel
  postIdentityVerificationSessionsSessionRedact: PostIdentityVerificationSessionsSessionRedact
  getInvoiceitems: GetInvoiceitems
  postInvoiceitems: PostInvoiceitems
  deleteInvoiceitemsInvoiceitem: DeleteInvoiceitemsInvoiceitem
  getInvoiceitemsInvoiceitem: GetInvoiceitemsInvoiceitem
  postInvoiceitemsInvoiceitem: PostInvoiceitemsInvoiceitem
  getInvoices: GetInvoices
  postInvoices: PostInvoices
  getInvoicesSearch: GetInvoicesSearch
  getInvoicesUpcoming: GetInvoicesUpcoming
  getInvoicesUpcomingLines: GetInvoicesUpcomingLines
  deleteInvoicesInvoice: DeleteInvoicesInvoice
  getInvoicesInvoice: GetInvoicesInvoice
  postInvoicesInvoice: PostInvoicesInvoice
  postInvoicesInvoiceFinalize: PostInvoicesInvoiceFinalize
  getInvoicesInvoiceLines: GetInvoicesInvoiceLines
  postInvoicesInvoiceMarkUncollectible: PostInvoicesInvoiceMarkUncollectible
  postInvoicesInvoicePay: PostInvoicesInvoicePay
  postInvoicesInvoiceSend: PostInvoicesInvoiceSend
  postInvoicesInvoiceVoid: PostInvoicesInvoiceVoid
  getIssuingAuthorizations: GetIssuingAuthorizations
  getIssuingAuthorizationsAuthorization: GetIssuingAuthorizationsAuthorization
  postIssuingAuthorizationsAuthorization: PostIssuingAuthorizationsAuthorization
  postIssuingAuthorizationsAuthorizationApprove: PostIssuingAuthorizationsAuthorizationApprove
  postIssuingAuthorizationsAuthorizationDecline: PostIssuingAuthorizationsAuthorizationDecline
  getIssuingCardholders: GetIssuingCardholders
  postIssuingCardholders: PostIssuingCardholders
  getIssuingCardholdersCardholder: GetIssuingCardholdersCardholder
  postIssuingCardholdersCardholder: PostIssuingCardholdersCardholder
  getIssuingCards: GetIssuingCards
  postIssuingCards: PostIssuingCards
  getIssuingCardsCard: GetIssuingCardsCard
  postIssuingCardsCard: PostIssuingCardsCard
  getIssuingDisputes: GetIssuingDisputes
  postIssuingDisputes: PostIssuingDisputes
  getIssuingDisputesDispute: GetIssuingDisputesDispute
  postIssuingDisputesDispute: PostIssuingDisputesDispute
  postIssuingDisputesDisputeSubmit: PostIssuingDisputesDisputeSubmit
  getIssuingSettlements: GetIssuingSettlements
  getIssuingSettlementsSettlement: GetIssuingSettlementsSettlement
  postIssuingSettlementsSettlement: PostIssuingSettlementsSettlement
  getIssuingTransactions: GetIssuingTransactions
  getIssuingTransactionsTransaction: GetIssuingTransactionsTransaction
  postIssuingTransactionsTransaction: PostIssuingTransactionsTransaction
  postLinkAccountSessions: PostLinkAccountSessions
  getLinkAccountSessionsSession: GetLinkAccountSessionsSession
  getLinkedAccounts: GetLinkedAccounts
  getLinkedAccountsAccount: GetLinkedAccountsAccount
  postLinkedAccountsAccountDisconnect: PostLinkedAccountsAccountDisconnect
  getLinkedAccountsAccountOwners: GetLinkedAccountsAccountOwners
  postLinkedAccountsAccountRefresh: PostLinkedAccountsAccountRefresh
  getMandatesMandate: GetMandatesMandate
  getPaymentIntents: GetPaymentIntents
  postPaymentIntents: PostPaymentIntents
  getPaymentIntentsSearch: GetPaymentIntentsSearch
  getPaymentIntentsIntent: GetPaymentIntentsIntent
  postPaymentIntentsIntent: PostPaymentIntentsIntent
  postPaymentIntentsIntentApplyCustomerBalance: PostPaymentIntentsIntentApplyCustomerBalance
  postPaymentIntentsIntentCancel: PostPaymentIntentsIntentCancel
  postPaymentIntentsIntentCapture: PostPaymentIntentsIntentCapture
  postPaymentIntentsIntentConfirm: PostPaymentIntentsIntentConfirm
  postPaymentIntentsIntentIncrementAuthorization: PostPaymentIntentsIntentIncrementAuthorization
  postPaymentIntentsIntentVerifyMicrodeposits: PostPaymentIntentsIntentVerifyMicrodeposits
  getPaymentLinks: GetPaymentLinks
  postPaymentLinks: PostPaymentLinks
  getPaymentLinksPaymentLink: GetPaymentLinksPaymentLink
  postPaymentLinksPaymentLink: PostPaymentLinksPaymentLink
  getPaymentLinksPaymentLinkLineItems: GetPaymentLinksPaymentLinkLineItems
  getPaymentMethodConfigurations: GetPaymentMethodConfigurations
  postPaymentMethodConfigurations: PostPaymentMethodConfigurations
  getPaymentMethodConfigurationsConfiguration: GetPaymentMethodConfigurationsConfiguration
  postPaymentMethodConfigurationsConfiguration: PostPaymentMethodConfigurationsConfiguration
  getPaymentMethodDomains: GetPaymentMethodDomains
  postPaymentMethodDomains: PostPaymentMethodDomains
  getPaymentMethodDomainsPaymentMethodDomain: GetPaymentMethodDomainsPaymentMethodDomain
  postPaymentMethodDomainsPaymentMethodDomain: PostPaymentMethodDomainsPaymentMethodDomain
  postPaymentMethodDomainsPaymentMethodDomainValidate: PostPaymentMethodDomainsPaymentMethodDomainValidate
  getPaymentMethods: GetPaymentMethods
  postPaymentMethods: PostPaymentMethods
  getPaymentMethodsPaymentMethod: GetPaymentMethodsPaymentMethod
  postPaymentMethodsPaymentMethod: PostPaymentMethodsPaymentMethod
  postPaymentMethodsPaymentMethodAttach: PostPaymentMethodsPaymentMethodAttach
  postPaymentMethodsPaymentMethodDetach: PostPaymentMethodsPaymentMethodDetach
  getPayouts: GetPayouts
  postPayouts: PostPayouts
  getPayoutsPayout: GetPayoutsPayout
  postPayoutsPayout: PostPayoutsPayout
  postPayoutsPayoutCancel: PostPayoutsPayoutCancel
  postPayoutsPayoutReverse: PostPayoutsPayoutReverse
  getPlans: GetPlans
  postPlans: PostPlans
  deletePlansPlan: DeletePlansPlan
  getPlansPlan: GetPlansPlan
  postPlansPlan: PostPlansPlan
  getPrices: GetPrices
  postPrices: PostPrices
  getPricesSearch: GetPricesSearch
  getPricesPrice: GetPricesPrice
  postPricesPrice: PostPricesPrice
  getProducts: GetProducts
  postProducts: PostProducts
  getProductsSearch: GetProductsSearch
  deleteProductsId: DeleteProductsId
  getProductsId: GetProductsId
  postProductsId: PostProductsId
  getPromotionCodes: GetPromotionCodes
  postPromotionCodes: PostPromotionCodes
  getPromotionCodesPromotionCode: GetPromotionCodesPromotionCode
  postPromotionCodesPromotionCode: PostPromotionCodesPromotionCode
  getQuotes: GetQuotes
  postQuotes: PostQuotes
  getQuotesQuote: GetQuotesQuote
  postQuotesQuote: PostQuotesQuote
  postQuotesQuoteAccept: PostQuotesQuoteAccept
  postQuotesQuoteCancel: PostQuotesQuoteCancel
  getQuotesQuoteComputedUpfrontLineItems: GetQuotesQuoteComputedUpfrontLineItems
  postQuotesQuoteFinalize: PostQuotesQuoteFinalize
  getQuotesQuoteLineItems: GetQuotesQuoteLineItems
  getQuotesQuotePdf: GetQuotesQuotePdf
  getRadarEarlyFraudWarnings: GetRadarEarlyFraudWarnings
  getRadarEarlyFraudWarningsEarlyFraudWarning: GetRadarEarlyFraudWarningsEarlyFraudWarning
  getRadarValueListItems: GetRadarValueListItems
  postRadarValueListItems: PostRadarValueListItems
  deleteRadarValueListItemsItem: DeleteRadarValueListItemsItem
  getRadarValueListItemsItem: GetRadarValueListItemsItem
  getRadarValueLists: GetRadarValueLists
  postRadarValueLists: PostRadarValueLists
  deleteRadarValueListsValueList: DeleteRadarValueListsValueList
  getRadarValueListsValueList: GetRadarValueListsValueList
  postRadarValueListsValueList: PostRadarValueListsValueList
  getRefunds: GetRefunds
  postRefunds: PostRefunds
  getRefundsRefund: GetRefundsRefund
  postRefundsRefund: PostRefundsRefund
  postRefundsRefundCancel: PostRefundsRefundCancel
  getReportingReportRuns: GetReportingReportRuns
  postReportingReportRuns: PostReportingReportRuns
  getReportingReportRunsReportRun: GetReportingReportRunsReportRun
  getReportingReportTypes: GetReportingReportTypes
  getReportingReportTypesReportType: GetReportingReportTypesReportType
  getReviews: GetReviews
  getReviewsReview: GetReviewsReview
  postReviewsReviewApprove: PostReviewsReviewApprove
  getSetupAttempts: GetSetupAttempts
  getSetupIntents: GetSetupIntents
  postSetupIntents: PostSetupIntents
  getSetupIntentsIntent: GetSetupIntentsIntent
  postSetupIntentsIntent: PostSetupIntentsIntent
  postSetupIntentsIntentCancel: PostSetupIntentsIntentCancel
  postSetupIntentsIntentConfirm: PostSetupIntentsIntentConfirm
  postSetupIntentsIntentVerifyMicrodeposits: PostSetupIntentsIntentVerifyMicrodeposits
  getShippingRates: GetShippingRates
  postShippingRates: PostShippingRates
  getShippingRatesShippingRateToken: GetShippingRatesShippingRateToken
  postShippingRatesShippingRateToken: PostShippingRatesShippingRateToken
  getSigmaScheduledQueryRuns: GetSigmaScheduledQueryRuns
  getSigmaScheduledQueryRunsScheduledQueryRun: GetSigmaScheduledQueryRunsScheduledQueryRun
  postSources: PostSources
  getSourcesSource: GetSourcesSource
  postSourcesSource: PostSourcesSource
  getSourcesSourceMandateNotificationsMandateNotification: GetSourcesSourceMandateNotificationsMandateNotification
  getSourcesSourceSourceTransactions: GetSourcesSourceSourceTransactions
  getSourcesSourceSourceTransactionsSourceTransaction: GetSourcesSourceSourceTransactionsSourceTransaction
  postSourcesSourceVerify: PostSourcesSourceVerify
  getSubscriptionItems: GetSubscriptionItems
  postSubscriptionItems: PostSubscriptionItems
  deleteSubscriptionItemsItem: DeleteSubscriptionItemsItem
  getSubscriptionItemsItem: GetSubscriptionItemsItem
  postSubscriptionItemsItem: PostSubscriptionItemsItem
  getSubscriptionItemsSubscriptionItemUsageRecordSummaries: GetSubscriptionItemsSubscriptionItemUsageRecordSummaries
  postSubscriptionItemsSubscriptionItemUsageRecords: PostSubscriptionItemsSubscriptionItemUsageRecords
  getSubscriptionSchedules: GetSubscriptionSchedules
  postSubscriptionSchedules: PostSubscriptionSchedules
  getSubscriptionSchedulesSchedule: GetSubscriptionSchedulesSchedule
  postSubscriptionSchedulesSchedule: PostSubscriptionSchedulesSchedule
  postSubscriptionSchedulesScheduleCancel: PostSubscriptionSchedulesScheduleCancel
  postSubscriptionSchedulesScheduleRelease: PostSubscriptionSchedulesScheduleRelease
  getSubscriptions: GetSubscriptions
  postSubscriptions: PostSubscriptions
  getSubscriptionsSearch: GetSubscriptionsSearch
  deleteSubscriptionsSubscriptionExposedId: DeleteSubscriptionsSubscriptionExposedId
  getSubscriptionsSubscriptionExposedId: GetSubscriptionsSubscriptionExposedId
  postSubscriptionsSubscriptionExposedId: PostSubscriptionsSubscriptionExposedId
  deleteSubscriptionsSubscriptionExposedIdDiscount: DeleteSubscriptionsSubscriptionExposedIdDiscount
  postSubscriptionsSubscriptionResume: PostSubscriptionsSubscriptionResume
  postTaxCalculations: PostTaxCalculations
  getTaxCalculationsCalculationLineItems: GetTaxCalculationsCalculationLineItems
  getTaxSettings: GetTaxSettings
  postTaxSettings: PostTaxSettings
  postTaxTransactionsCreateFromCalculation: PostTaxTransactionsCreateFromCalculation
  postTaxTransactionsCreateReversal: PostTaxTransactionsCreateReversal
  getTaxTransactionsTransaction: GetTaxTransactionsTransaction
  getTaxTransactionsTransactionLineItems: GetTaxTransactionsTransactionLineItems
  getTaxCodes: GetTaxCodes
  getTaxCodesId: GetTaxCodesId
  getTaxRates: GetTaxRates
  postTaxRates: PostTaxRates
  getTaxRatesTaxRate: GetTaxRatesTaxRate
  postTaxRatesTaxRate: PostTaxRatesTaxRate
  getTerminalConfigurations: GetTerminalConfigurations
  postTerminalConfigurations: PostTerminalConfigurations
  deleteTerminalConfigurationsConfiguration: DeleteTerminalConfigurationsConfiguration
  getTerminalConfigurationsConfiguration: GetTerminalConfigurationsConfiguration
  postTerminalConfigurationsConfiguration: PostTerminalConfigurationsConfiguration
  postTerminalConnectionTokens: PostTerminalConnectionTokens
  getTerminalLocations: GetTerminalLocations
  postTerminalLocations: PostTerminalLocations
  deleteTerminalLocationsLocation: DeleteTerminalLocationsLocation
  getTerminalLocationsLocation: GetTerminalLocationsLocation
  postTerminalLocationsLocation: PostTerminalLocationsLocation
  getTerminalReaders: GetTerminalReaders
  postTerminalReaders: PostTerminalReaders
  deleteTerminalReadersReader: DeleteTerminalReadersReader
  getTerminalReadersReader: GetTerminalReadersReader
  postTerminalReadersReader: PostTerminalReadersReader
  postTerminalReadersReaderCancelAction: PostTerminalReadersReaderCancelAction
  postTerminalReadersReaderProcessPaymentIntent: PostTerminalReadersReaderProcessPaymentIntent
  postTerminalReadersReaderProcessSetupIntent: PostTerminalReadersReaderProcessSetupIntent
  postTerminalReadersReaderRefundPayment: PostTerminalReadersReaderRefundPayment
  postTerminalReadersReaderSetReaderDisplay: PostTerminalReadersReaderSetReaderDisplay
  postTestHelpersCustomersCustomerFundCashBalance: PostTestHelpersCustomersCustomerFundCashBalance
  postTestHelpersIssuingAuthorizations: PostTestHelpersIssuingAuthorizations
  postTestHelpersIssuingAuthorizationsAuthorizationCapture: PostTestHelpersIssuingAuthorizationsAuthorizationCapture
  postTestHelpersIssuingAuthorizationsAuthorizationExpire: PostTestHelpersIssuingAuthorizationsAuthorizationExpire
  postTestHelpersIssuingAuthorizationsAuthorizationIncrement: PostTestHelpersIssuingAuthorizationsAuthorizationIncrement
  postTestHelpersIssuingAuthorizationsAuthorizationReverse: PostTestHelpersIssuingAuthorizationsAuthorizationReverse
  postTestHelpersIssuingCardsCardShippingDeliver: PostTestHelpersIssuingCardsCardShippingDeliver
  postTestHelpersIssuingCardsCardShippingFail: PostTestHelpersIssuingCardsCardShippingFail
  postTestHelpersIssuingCardsCardShippingReturn: PostTestHelpersIssuingCardsCardShippingReturn
  postTestHelpersIssuingCardsCardShippingShip: PostTestHelpersIssuingCardsCardShippingShip
  postTestHelpersIssuingTransactionsCreateForceCapture: PostTestHelpersIssuingTransactionsCreateForceCapture
  postTestHelpersIssuingTransactionsCreateUnlinkedRefund: PostTestHelpersIssuingTransactionsCreateUnlinkedRefund
  postTestHelpersIssuingTransactionsTransactionRefund: PostTestHelpersIssuingTransactionsTransactionRefund
  postTestHelpersRefundsRefundExpire: PostTestHelpersRefundsRefundExpire
  postTestHelpersTerminalReadersReaderPresentPaymentMethod: PostTestHelpersTerminalReadersReaderPresentPaymentMethod
  getTestHelpersTestClocks: GetTestHelpersTestClocks
  postTestHelpersTestClocks: PostTestHelpersTestClocks
  deleteTestHelpersTestClocksTestClock: DeleteTestHelpersTestClocksTestClock
  getTestHelpersTestClocksTestClock: GetTestHelpersTestClocksTestClock
  postTestHelpersTestClocksTestClockAdvance: PostTestHelpersTestClocksTestClockAdvance
  postTestHelpersTreasuryInboundTransfersIdFail: PostTestHelpersTreasuryInboundTransfersIdFail
  postTestHelpersTreasuryInboundTransfersIdReturn: PostTestHelpersTreasuryInboundTransfersIdReturn
  postTestHelpersTreasuryInboundTransfersIdSucceed: PostTestHelpersTreasuryInboundTransfersIdSucceed
  postTestHelpersTreasuryOutboundPaymentsIdFail: PostTestHelpersTreasuryOutboundPaymentsIdFail
  postTestHelpersTreasuryOutboundPaymentsIdPost: PostTestHelpersTreasuryOutboundPaymentsIdPost
  postTestHelpersTreasuryOutboundPaymentsIdReturn: PostTestHelpersTreasuryOutboundPaymentsIdReturn
  postTestHelpersTreasuryOutboundTransfersOutboundTransferFail: PostTestHelpersTreasuryOutboundTransfersOutboundTransferFail
  postTestHelpersTreasuryOutboundTransfersOutboundTransferPost: PostTestHelpersTreasuryOutboundTransfersOutboundTransferPost
  postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn: PostTestHelpersTreasuryOutboundTransfersOutboundTransferReturn
  postTestHelpersTreasuryReceivedCredits: PostTestHelpersTreasuryReceivedCredits
  postTestHelpersTreasuryReceivedDebits: PostTestHelpersTreasuryReceivedDebits
  postTokens: PostTokens
  getTokensToken: GetTokensToken
  getTopups: GetTopups
  postTopups: PostTopups
  getTopupsTopup: GetTopupsTopup
  postTopupsTopup: PostTopupsTopup
  postTopupsTopupCancel: PostTopupsTopupCancel
  getTransfers: GetTransfers
  postTransfers: PostTransfers
  getTransfersIdReversals: GetTransfersIdReversals
  postTransfersIdReversals: PostTransfersIdReversals
  getTransfersTransfer: GetTransfersTransfer
  postTransfersTransfer: PostTransfersTransfer
  getTransfersTransferReversalsId: GetTransfersTransferReversalsId
  postTransfersTransferReversalsId: PostTransfersTransferReversalsId
  getTreasuryCreditReversals: GetTreasuryCreditReversals
  postTreasuryCreditReversals: PostTreasuryCreditReversals
  getTreasuryCreditReversalsCreditReversal: GetTreasuryCreditReversalsCreditReversal
  getTreasuryDebitReversals: GetTreasuryDebitReversals
  postTreasuryDebitReversals: PostTreasuryDebitReversals
  getTreasuryDebitReversalsDebitReversal: GetTreasuryDebitReversalsDebitReversal
  getTreasuryFinancialAccounts: GetTreasuryFinancialAccounts
  postTreasuryFinancialAccounts: PostTreasuryFinancialAccounts
  getTreasuryFinancialAccountsFinancialAccount: GetTreasuryFinancialAccountsFinancialAccount
  postTreasuryFinancialAccountsFinancialAccount: PostTreasuryFinancialAccountsFinancialAccount
  getTreasuryFinancialAccountsFinancialAccountFeatures: GetTreasuryFinancialAccountsFinancialAccountFeatures
  postTreasuryFinancialAccountsFinancialAccountFeatures: PostTreasuryFinancialAccountsFinancialAccountFeatures
  getTreasuryInboundTransfers: GetTreasuryInboundTransfers
  postTreasuryInboundTransfers: PostTreasuryInboundTransfers
  getTreasuryInboundTransfersId: GetTreasuryInboundTransfersId
  postTreasuryInboundTransfersInboundTransferCancel: PostTreasuryInboundTransfersInboundTransferCancel
  getTreasuryOutboundPayments: GetTreasuryOutboundPayments
  postTreasuryOutboundPayments: PostTreasuryOutboundPayments
  getTreasuryOutboundPaymentsId: GetTreasuryOutboundPaymentsId
  postTreasuryOutboundPaymentsIdCancel: PostTreasuryOutboundPaymentsIdCancel
  getTreasuryOutboundTransfers: GetTreasuryOutboundTransfers
  postTreasuryOutboundTransfers: PostTreasuryOutboundTransfers
  getTreasuryOutboundTransfersOutboundTransfer: GetTreasuryOutboundTransfersOutboundTransfer
  postTreasuryOutboundTransfersOutboundTransferCancel: PostTreasuryOutboundTransfersOutboundTransferCancel
  getTreasuryReceivedCredits: GetTreasuryReceivedCredits
  getTreasuryReceivedCreditsId: GetTreasuryReceivedCreditsId
  getTreasuryReceivedDebits: GetTreasuryReceivedDebits
  getTreasuryReceivedDebitsId: GetTreasuryReceivedDebitsId
  getTreasuryTransactionEntries: GetTreasuryTransactionEntries
  getTreasuryTransactionEntriesId: GetTreasuryTransactionEntriesId
  getTreasuryTransactions: GetTreasuryTransactions
  getTreasuryTransactionsId: GetTreasuryTransactionsId
  getWebhookEndpoints: GetWebhookEndpoints
  postWebhookEndpoints: PostWebhookEndpoints
  deleteWebhookEndpointsWebhookEndpoint: DeleteWebhookEndpointsWebhookEndpoint
  getWebhookEndpointsWebhookEndpoint: GetWebhookEndpointsWebhookEndpoint
  postWebhookEndpointsWebhookEndpoint: PostWebhookEndpointsWebhookEndpoint
}

export function bootstrap(
  implementation: Implementation,
  config: Omit<ServerConfig, "router">,
) {
  // ApiClient
  const router = new KoaRouter()

  const getAccountQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getAccountBodySchema = z.object({}).optional()

  const getAccountResponseValidator = responseValidationFactory(
    [["200", s_account]],
    s_error,
  )

  router.get("getAccount", "/v1/account", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getAccountQuerySchema, ctx.query),
      body: parseRequestInput(getAccountBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getAccount(input, ctx)

    ctx.body = getAccountResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postAccountLinksBodySchema = z.object({
    account: z.coerce.string(),
    collect: z.enum(["currently_due", "eventually_due"]).optional(),
    expand: z.array(z.coerce.string()).optional(),
    refresh_url: z.coerce.string().optional(),
    return_url: z.coerce.string().optional(),
    type: z.enum(["account_onboarding", "account_update"]),
  })

  const postAccountLinksResponseValidator = responseValidationFactory(
    [["200", s_account_link]],
    s_error,
  )

  router.post("postAccountLinks", "/v1/account_links", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postAccountLinksBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postAccountLinks(input, ctx)

    ctx.body = postAccountLinksResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postAccountSessionsBodySchema = z.object({
    account: z.coerce.string(),
    components: z.object({
      account_onboarding: z.object({ enabled: z.coerce.boolean() }).optional(),
    }),
    expand: z.array(z.coerce.string()).optional(),
  })

  const postAccountSessionsResponseValidator = responseValidationFactory(
    [["200", s_account_session]],
    s_error,
  )

  router.post(
    "postAccountSessions",
    "/v1/account_sessions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postAccountSessionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postAccountSessions(
        input,
        ctx,
      )

      ctx.body = postAccountSessionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getAccountsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getAccountsBodySchema = z.object({}).optional()

  const getAccountsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_account)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getAccounts", "/v1/accounts", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getAccountsQuerySchema, ctx.query),
      body: parseRequestInput(getAccountsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getAccounts(input, ctx)

    ctx.body = getAccountsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postAccountsBodySchema = z
    .object({
      account_token: z.coerce.string().optional(),
      bank_account: z.union([
        z.object({
          account_holder_name: z.coerce.string().optional(),
          account_holder_type: z.enum(["company", "individual"]).optional(),
          account_number: z.coerce.string(),
          account_type: z
            .enum(["checking", "futsu", "savings", "toza"])
            .optional(),
          country: z.coerce.string(),
          currency: z.coerce.string().optional(),
          documents: z
            .object({
              bank_account_ownership_verification: z
                .object({ files: z.array(z.coerce.string()).optional() })
                .optional(),
            })
            .optional(),
          object: z.enum(["bank_account"]).optional(),
          routing_number: z.coerce.string().optional(),
        }),
        z.coerce.string(),
      ]),
      business_profile: z
        .object({
          mcc: z.coerce.string().optional(),
          monthly_estimated_revenue: z
            .object({ amount: z.coerce.number(), currency: z.coerce.string() })
            .optional(),
          name: z.coerce.string().optional(),
          product_description: z.coerce.string().optional(),
          support_address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          support_email: z.coerce.string().optional(),
          support_phone: z.coerce.string().optional(),
          support_url: z.union([z.coerce.string(), z.enum([""])]),
          url: z.coerce.string().optional(),
        })
        .optional(),
      business_type: z
        .enum(["company", "government_entity", "individual", "non_profit"])
        .optional(),
      capabilities: z
        .object({
          acss_debit_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          affirm_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          afterpay_clearpay_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          au_becs_debit_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          bacs_debit_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          bancontact_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          bank_transfer_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          blik_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          boleto_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          card_issuing: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          card_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          cartes_bancaires_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          cashapp_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          eps_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          fpx_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          giropay_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          grabpay_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          ideal_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          india_international_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          jcb_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          klarna_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          konbini_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          legacy_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          link_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          oxxo_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          p24_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          paynow_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          promptpay_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          sepa_debit_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          sofort_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          tax_reporting_us_1099_k: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          tax_reporting_us_1099_misc: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          transfers: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          treasury: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          us_bank_account_ach_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          zip_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
        })
        .optional(),
      company: z
        .object({
          address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          address_kana: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
              town: z.coerce.string().optional(),
            })
            .optional(),
          address_kanji: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
              town: z.coerce.string().optional(),
            })
            .optional(),
          directors_provided: z.coerce.boolean().optional(),
          executives_provided: z.coerce.boolean().optional(),
          export_license_id: z.coerce.string().optional(),
          export_purpose_code: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          name_kana: z.coerce.string().optional(),
          name_kanji: z.coerce.string().optional(),
          owners_provided: z.coerce.boolean().optional(),
          ownership_declaration: z
            .object({
              date: z.coerce.number().optional(),
              ip: z.coerce.string().optional(),
              user_agent: z.coerce.string().optional(),
            })
            .optional(),
          phone: z.coerce.string().optional(),
          registration_number: z.coerce.string().optional(),
          structure: z
            .enum([
              "",
              "free_zone_establishment",
              "free_zone_llc",
              "government_instrumentality",
              "governmental_unit",
              "incorporated_non_profit",
              "incorporated_partnership",
              "limited_liability_partnership",
              "llc",
              "multi_member_llc",
              "private_company",
              "private_corporation",
              "private_partnership",
              "public_company",
              "public_corporation",
              "public_partnership",
              "single_member_llc",
              "sole_establishment",
              "sole_proprietorship",
              "tax_exempt_government_instrumentality",
              "unincorporated_association",
              "unincorporated_non_profit",
              "unincorporated_partnership",
            ])
            .optional(),
          tax_id: z.coerce.string().optional(),
          tax_id_registrar: z.coerce.string().optional(),
          vat_id: z.coerce.string().optional(),
          verification: z
            .object({
              document: z
                .object({
                  back: z.coerce.string().optional(),
                  front: z.coerce.string().optional(),
                })
                .optional(),
            })
            .optional(),
        })
        .optional(),
      country: z.coerce.string().optional(),
      default_currency: z.coerce.string().optional(),
      documents: z
        .object({
          bank_account_ownership_verification: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          company_license: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          company_memorandum_of_association: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          company_ministerial_decree: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          company_registration_verification: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          company_tax_id_verification: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          proof_of_registration: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
        })
        .optional(),
      email: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      external_account: z.coerce.string().optional(),
      individual: z
        .object({
          address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          address_kana: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
              town: z.coerce.string().optional(),
            })
            .optional(),
          address_kanji: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
              town: z.coerce.string().optional(),
            })
            .optional(),
          dob: z.union([
            z.object({
              day: z.coerce.number(),
              month: z.coerce.number(),
              year: z.coerce.number(),
            }),
            z.enum([""]),
          ]),
          email: z.coerce.string().optional(),
          first_name: z.coerce.string().optional(),
          first_name_kana: z.coerce.string().optional(),
          first_name_kanji: z.coerce.string().optional(),
          full_name_aliases: z.union([
            z.array(z.coerce.string()),
            z.enum([""]),
          ]),
          gender: z.coerce.string().optional(),
          id_number: z.coerce.string().optional(),
          id_number_secondary: z.coerce.string().optional(),
          last_name: z.coerce.string().optional(),
          last_name_kana: z.coerce.string().optional(),
          last_name_kanji: z.coerce.string().optional(),
          maiden_name: z.coerce.string().optional(),
          metadata: z.union([z.object({}), z.enum([""])]),
          phone: z.coerce.string().optional(),
          political_exposure: z.enum(["existing", "none"]).optional(),
          registered_address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          ssn_last_4: z.coerce.string().optional(),
          verification: z
            .object({
              additional_document: z
                .object({
                  back: z.coerce.string().optional(),
                  front: z.coerce.string().optional(),
                })
                .optional(),
              document: z
                .object({
                  back: z.coerce.string().optional(),
                  front: z.coerce.string().optional(),
                })
                .optional(),
            })
            .optional(),
        })
        .optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      settings: z
        .object({
          branding: z
            .object({
              icon: z.coerce.string().optional(),
              logo: z.coerce.string().optional(),
              primary_color: z.coerce.string().optional(),
              secondary_color: z.coerce.string().optional(),
            })
            .optional(),
          card_issuing: z
            .object({
              tos_acceptance: z
                .object({
                  date: z.coerce.number().optional(),
                  ip: z.coerce.string().optional(),
                  user_agent: z.union([z.coerce.string(), z.enum([""])]),
                })
                .optional(),
            })
            .optional(),
          card_payments: z
            .object({
              decline_on: z
                .object({
                  avs_failure: z.coerce.boolean().optional(),
                  cvc_failure: z.coerce.boolean().optional(),
                })
                .optional(),
              statement_descriptor_prefix: z.coerce.string().optional(),
              statement_descriptor_prefix_kana: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              statement_descriptor_prefix_kanji: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
            })
            .optional(),
          payments: z
            .object({
              statement_descriptor: z.coerce.string().optional(),
              statement_descriptor_kana: z.coerce.string().optional(),
              statement_descriptor_kanji: z.coerce.string().optional(),
            })
            .optional(),
          payouts: z
            .object({
              debit_negative_balances: z.coerce.boolean().optional(),
              schedule: z
                .object({
                  delay_days: z.union([z.enum(["minimum"]), z.coerce.number()]),
                  interval: z
                    .enum(["daily", "manual", "monthly", "weekly"])
                    .optional(),
                  monthly_anchor: z.coerce.number().optional(),
                  weekly_anchor: z
                    .enum([
                      "friday",
                      "monday",
                      "saturday",
                      "sunday",
                      "thursday",
                      "tuesday",
                      "wednesday",
                    ])
                    .optional(),
                })
                .optional(),
              statement_descriptor: z.coerce.string().optional(),
            })
            .optional(),
          treasury: z
            .object({
              tos_acceptance: z
                .object({
                  date: z.coerce.number().optional(),
                  ip: z.coerce.string().optional(),
                  user_agent: z.union([z.coerce.string(), z.enum([""])]),
                })
                .optional(),
            })
            .optional(),
        })
        .optional(),
      tos_acceptance: z
        .object({
          date: z.coerce.number().optional(),
          ip: z.coerce.string().optional(),
          service_agreement: z.coerce.string().optional(),
          user_agent: z.coerce.string().optional(),
        })
        .optional(),
      type: z.enum(["custom", "express", "standard"]).optional(),
    })
    .optional()

  const postAccountsResponseValidator = responseValidationFactory(
    [["200", s_account]],
    s_error,
  )

  router.post("postAccounts", "/v1/accounts", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postAccountsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postAccounts(input, ctx)

    ctx.body = postAccountsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const deleteAccountsAccountParamSchema = z.object({
    account: z.coerce.string(),
  })

  const deleteAccountsAccountBodySchema = z.object({}).optional()

  const deleteAccountsAccountResponseValidator = responseValidationFactory(
    [["200", s_deleted_account]],
    s_error,
  )

  router.delete(
    "deleteAccountsAccount",
    "/v1/accounts/:account",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(deleteAccountsAccountParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          deleteAccountsAccountBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.deleteAccountsAccount(
        input,
        ctx,
      )

      ctx.body = deleteAccountsAccountResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getAccountsAccountParamSchema = z.object({ account: z.coerce.string() })

  const getAccountsAccountQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getAccountsAccountBodySchema = z.object({}).optional()

  const getAccountsAccountResponseValidator = responseValidationFactory(
    [["200", s_account]],
    s_error,
  )

  router.get(
    "getAccountsAccount",
    "/v1/accounts/:account",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getAccountsAccountParamSchema, ctx.params),
        query: parseRequestInput(getAccountsAccountQuerySchema, ctx.query),
        body: parseRequestInput(getAccountsAccountBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getAccountsAccount(
        input,
        ctx,
      )

      ctx.body = getAccountsAccountResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountParamSchema = z.object({
    account: z.coerce.string(),
  })

  const postAccountsAccountBodySchema = z
    .object({
      account_token: z.coerce.string().optional(),
      business_profile: z
        .object({
          mcc: z.coerce.string().optional(),
          monthly_estimated_revenue: z
            .object({ amount: z.coerce.number(), currency: z.coerce.string() })
            .optional(),
          name: z.coerce.string().optional(),
          product_description: z.coerce.string().optional(),
          support_address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          support_email: z.coerce.string().optional(),
          support_phone: z.coerce.string().optional(),
          support_url: z.union([z.coerce.string(), z.enum([""])]),
          url: z.coerce.string().optional(),
        })
        .optional(),
      business_type: z
        .enum(["company", "government_entity", "individual", "non_profit"])
        .optional(),
      capabilities: z
        .object({
          acss_debit_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          affirm_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          afterpay_clearpay_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          au_becs_debit_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          bacs_debit_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          bancontact_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          bank_transfer_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          blik_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          boleto_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          card_issuing: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          card_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          cartes_bancaires_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          cashapp_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          eps_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          fpx_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          giropay_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          grabpay_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          ideal_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          india_international_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          jcb_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          klarna_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          konbini_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          legacy_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          link_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          oxxo_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          p24_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          paynow_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          promptpay_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          sepa_debit_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          sofort_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          tax_reporting_us_1099_k: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          tax_reporting_us_1099_misc: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          transfers: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          treasury: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          us_bank_account_ach_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
          zip_payments: z
            .object({ requested: z.coerce.boolean().optional() })
            .optional(),
        })
        .optional(),
      company: z
        .object({
          address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          address_kana: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
              town: z.coerce.string().optional(),
            })
            .optional(),
          address_kanji: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
              town: z.coerce.string().optional(),
            })
            .optional(),
          directors_provided: z.coerce.boolean().optional(),
          executives_provided: z.coerce.boolean().optional(),
          export_license_id: z.coerce.string().optional(),
          export_purpose_code: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          name_kana: z.coerce.string().optional(),
          name_kanji: z.coerce.string().optional(),
          owners_provided: z.coerce.boolean().optional(),
          ownership_declaration: z
            .object({
              date: z.coerce.number().optional(),
              ip: z.coerce.string().optional(),
              user_agent: z.coerce.string().optional(),
            })
            .optional(),
          phone: z.coerce.string().optional(),
          registration_number: z.coerce.string().optional(),
          structure: z
            .enum([
              "",
              "free_zone_establishment",
              "free_zone_llc",
              "government_instrumentality",
              "governmental_unit",
              "incorporated_non_profit",
              "incorporated_partnership",
              "limited_liability_partnership",
              "llc",
              "multi_member_llc",
              "private_company",
              "private_corporation",
              "private_partnership",
              "public_company",
              "public_corporation",
              "public_partnership",
              "single_member_llc",
              "sole_establishment",
              "sole_proprietorship",
              "tax_exempt_government_instrumentality",
              "unincorporated_association",
              "unincorporated_non_profit",
              "unincorporated_partnership",
            ])
            .optional(),
          tax_id: z.coerce.string().optional(),
          tax_id_registrar: z.coerce.string().optional(),
          vat_id: z.coerce.string().optional(),
          verification: z
            .object({
              document: z
                .object({
                  back: z.coerce.string().optional(),
                  front: z.coerce.string().optional(),
                })
                .optional(),
            })
            .optional(),
        })
        .optional(),
      default_currency: z.coerce.string().optional(),
      documents: z
        .object({
          bank_account_ownership_verification: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          company_license: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          company_memorandum_of_association: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          company_ministerial_decree: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          company_registration_verification: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          company_tax_id_verification: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
          proof_of_registration: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
        })
        .optional(),
      email: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      external_account: z.coerce.string().optional(),
      individual: z
        .object({
          address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          address_kana: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
              town: z.coerce.string().optional(),
            })
            .optional(),
          address_kanji: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
              town: z.coerce.string().optional(),
            })
            .optional(),
          dob: z.union([
            z.object({
              day: z.coerce.number(),
              month: z.coerce.number(),
              year: z.coerce.number(),
            }),
            z.enum([""]),
          ]),
          email: z.coerce.string().optional(),
          first_name: z.coerce.string().optional(),
          first_name_kana: z.coerce.string().optional(),
          first_name_kanji: z.coerce.string().optional(),
          full_name_aliases: z.union([
            z.array(z.coerce.string()),
            z.enum([""]),
          ]),
          gender: z.coerce.string().optional(),
          id_number: z.coerce.string().optional(),
          id_number_secondary: z.coerce.string().optional(),
          last_name: z.coerce.string().optional(),
          last_name_kana: z.coerce.string().optional(),
          last_name_kanji: z.coerce.string().optional(),
          maiden_name: z.coerce.string().optional(),
          metadata: z.union([z.object({}), z.enum([""])]),
          phone: z.coerce.string().optional(),
          political_exposure: z.enum(["existing", "none"]).optional(),
          registered_address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          ssn_last_4: z.coerce.string().optional(),
          verification: z
            .object({
              additional_document: z
                .object({
                  back: z.coerce.string().optional(),
                  front: z.coerce.string().optional(),
                })
                .optional(),
              document: z
                .object({
                  back: z.coerce.string().optional(),
                  front: z.coerce.string().optional(),
                })
                .optional(),
            })
            .optional(),
        })
        .optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      settings: z
        .object({
          branding: z
            .object({
              icon: z.coerce.string().optional(),
              logo: z.coerce.string().optional(),
              primary_color: z.coerce.string().optional(),
              secondary_color: z.coerce.string().optional(),
            })
            .optional(),
          card_issuing: z
            .object({
              tos_acceptance: z
                .object({
                  date: z.coerce.number().optional(),
                  ip: z.coerce.string().optional(),
                  user_agent: z.union([z.coerce.string(), z.enum([""])]),
                })
                .optional(),
            })
            .optional(),
          card_payments: z
            .object({
              decline_on: z
                .object({
                  avs_failure: z.coerce.boolean().optional(),
                  cvc_failure: z.coerce.boolean().optional(),
                })
                .optional(),
              statement_descriptor_prefix: z.coerce.string().optional(),
              statement_descriptor_prefix_kana: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              statement_descriptor_prefix_kanji: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
            })
            .optional(),
          payments: z
            .object({
              statement_descriptor: z.coerce.string().optional(),
              statement_descriptor_kana: z.coerce.string().optional(),
              statement_descriptor_kanji: z.coerce.string().optional(),
            })
            .optional(),
          payouts: z
            .object({
              debit_negative_balances: z.coerce.boolean().optional(),
              schedule: z
                .object({
                  delay_days: z.union([z.enum(["minimum"]), z.coerce.number()]),
                  interval: z
                    .enum(["daily", "manual", "monthly", "weekly"])
                    .optional(),
                  monthly_anchor: z.coerce.number().optional(),
                  weekly_anchor: z
                    .enum([
                      "friday",
                      "monday",
                      "saturday",
                      "sunday",
                      "thursday",
                      "tuesday",
                      "wednesday",
                    ])
                    .optional(),
                })
                .optional(),
              statement_descriptor: z.coerce.string().optional(),
            })
            .optional(),
          treasury: z
            .object({
              tos_acceptance: z
                .object({
                  date: z.coerce.number().optional(),
                  ip: z.coerce.string().optional(),
                  user_agent: z.union([z.coerce.string(), z.enum([""])]),
                })
                .optional(),
            })
            .optional(),
        })
        .optional(),
      tos_acceptance: z
        .object({
          date: z.coerce.number().optional(),
          ip: z.coerce.string().optional(),
          service_agreement: z.coerce.string().optional(),
          user_agent: z.coerce.string().optional(),
        })
        .optional(),
    })
    .optional()

  const postAccountsAccountResponseValidator = responseValidationFactory(
    [["200", s_account]],
    s_error,
  )

  router.post(
    "postAccountsAccount",
    "/v1/accounts/:account",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postAccountsAccountParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postAccountsAccount(
        input,
        ctx,
      )

      ctx.body = postAccountsAccountResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountBankAccountsParamSchema = z.object({
    account: z.coerce.string(),
  })

  const postAccountsAccountBankAccountsBodySchema = z
    .object({
      bank_account: z.union([
        z.object({
          account_holder_name: z.coerce.string().optional(),
          account_holder_type: z.enum(["company", "individual"]).optional(),
          account_number: z.coerce.string(),
          account_type: z
            .enum(["checking", "futsu", "savings", "toza"])
            .optional(),
          country: z.coerce.string(),
          currency: z.coerce.string().optional(),
          documents: z
            .object({
              bank_account_ownership_verification: z
                .object({ files: z.array(z.coerce.string()).optional() })
                .optional(),
            })
            .optional(),
          object: z.enum(["bank_account"]).optional(),
          routing_number: z.coerce.string().optional(),
        }),
        z.coerce.string(),
      ]),
      default_for_currency: z.coerce.boolean().optional(),
      expand: z.array(z.coerce.string()).optional(),
      external_account: z.coerce.string().optional(),
      metadata: z.object({}).optional(),
    })
    .optional()

  const postAccountsAccountBankAccountsResponseValidator =
    responseValidationFactory([["200", s_external_account]], s_error)

  router.post(
    "postAccountsAccountBankAccounts",
    "/v1/accounts/:account/bank_accounts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postAccountsAccountBankAccountsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountBankAccountsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postAccountsAccountBankAccounts(input, ctx)

      ctx.body = postAccountsAccountBankAccountsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteAccountsAccountBankAccountsIdParamSchema = z.object({
    account: z.coerce.string(),
    id: z.coerce.string(),
  })

  const deleteAccountsAccountBankAccountsIdBodySchema = z.object({}).optional()

  const deleteAccountsAccountBankAccountsIdResponseValidator =
    responseValidationFactory([["200", s_deleted_external_account]], s_error)

  router.delete(
    "deleteAccountsAccountBankAccountsId",
    "/v1/accounts/:account/bank_accounts/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteAccountsAccountBankAccountsIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteAccountsAccountBankAccountsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteAccountsAccountBankAccountsId(input, ctx)

      ctx.body = deleteAccountsAccountBankAccountsIdResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getAccountsAccountBankAccountsIdParamSchema = z.object({
    account: z.coerce.string(),
    id: z.coerce.string(),
  })

  const getAccountsAccountBankAccountsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getAccountsAccountBankAccountsIdBodySchema = z.object({}).optional()

  const getAccountsAccountBankAccountsIdResponseValidator =
    responseValidationFactory([["200", s_external_account]], s_error)

  router.get(
    "getAccountsAccountBankAccountsId",
    "/v1/accounts/:account/bank_accounts/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getAccountsAccountBankAccountsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getAccountsAccountBankAccountsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getAccountsAccountBankAccountsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getAccountsAccountBankAccountsId(input, ctx)

      ctx.body = getAccountsAccountBankAccountsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountBankAccountsIdParamSchema = z.object({
    account: z.coerce.string(),
    id: z.coerce.string(),
  })

  const postAccountsAccountBankAccountsIdBodySchema = z
    .object({
      account_holder_name: z.coerce.string().optional(),
      account_holder_type: z.enum(["", "company", "individual"]).optional(),
      account_type: z.enum(["checking", "futsu", "savings", "toza"]).optional(),
      address_city: z.coerce.string().optional(),
      address_country: z.coerce.string().optional(),
      address_line1: z.coerce.string().optional(),
      address_line2: z.coerce.string().optional(),
      address_state: z.coerce.string().optional(),
      address_zip: z.coerce.string().optional(),
      default_for_currency: z.coerce.boolean().optional(),
      documents: z
        .object({
          bank_account_ownership_verification: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
        })
        .optional(),
      exp_month: z.coerce.string().optional(),
      exp_year: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      name: z.coerce.string().optional(),
    })
    .optional()

  const postAccountsAccountBankAccountsIdResponseValidator =
    responseValidationFactory([["200", s_external_account]], s_error)

  router.post(
    "postAccountsAccountBankAccountsId",
    "/v1/accounts/:account/bank_accounts/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postAccountsAccountBankAccountsIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountBankAccountsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postAccountsAccountBankAccountsId(input, ctx)

      ctx.body = postAccountsAccountBankAccountsIdResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getAccountsAccountCapabilitiesParamSchema = z.object({
    account: z.coerce.string(),
  })

  const getAccountsAccountCapabilitiesQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getAccountsAccountCapabilitiesBodySchema = z.object({}).optional()

  const getAccountsAccountCapabilitiesResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_capability)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getAccountsAccountCapabilities",
    "/v1/accounts/:account/capabilities",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getAccountsAccountCapabilitiesParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getAccountsAccountCapabilitiesQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getAccountsAccountCapabilitiesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getAccountsAccountCapabilities(input, ctx)

      ctx.body = getAccountsAccountCapabilitiesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getAccountsAccountCapabilitiesCapabilityParamSchema = z.object({
    account: z.coerce.string(),
    capability: z.coerce.string(),
  })

  const getAccountsAccountCapabilitiesCapabilityQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getAccountsAccountCapabilitiesCapabilityBodySchema = z
    .object({})
    .optional()

  const getAccountsAccountCapabilitiesCapabilityResponseValidator =
    responseValidationFactory([["200", s_capability]], s_error)

  router.get(
    "getAccountsAccountCapabilitiesCapability",
    "/v1/accounts/:account/capabilities/:capability",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getAccountsAccountCapabilitiesCapabilityParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getAccountsAccountCapabilitiesCapabilityQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getAccountsAccountCapabilitiesCapabilityBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getAccountsAccountCapabilitiesCapability(
          input,
          ctx,
        )

      ctx.body = getAccountsAccountCapabilitiesCapabilityResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountCapabilitiesCapabilityParamSchema = z.object({
    account: z.coerce.string(),
    capability: z.coerce.string(),
  })

  const postAccountsAccountCapabilitiesCapabilityBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      requested: z.coerce.boolean().optional(),
    })
    .optional()

  const postAccountsAccountCapabilitiesCapabilityResponseValidator =
    responseValidationFactory([["200", s_capability]], s_error)

  router.post(
    "postAccountsAccountCapabilitiesCapability",
    "/v1/accounts/:account/capabilities/:capability",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postAccountsAccountCapabilitiesCapabilityParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountCapabilitiesCapabilityBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postAccountsAccountCapabilitiesCapability(
          input,
          ctx,
        )

      ctx.body = postAccountsAccountCapabilitiesCapabilityResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getAccountsAccountExternalAccountsParamSchema = z.object({
    account: z.coerce.string(),
  })

  const getAccountsAccountExternalAccountsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getAccountsAccountExternalAccountsBodySchema = z.object({}).optional()

  const getAccountsAccountExternalAccountsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(
              z.union([z.lazy(() => s_bank_account), z.lazy(() => s_card)]),
            ),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getAccountsAccountExternalAccounts",
    "/v1/accounts/:account/external_accounts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getAccountsAccountExternalAccountsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getAccountsAccountExternalAccountsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getAccountsAccountExternalAccountsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getAccountsAccountExternalAccounts(input, ctx)

      ctx.body = getAccountsAccountExternalAccountsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountExternalAccountsParamSchema = z.object({
    account: z.coerce.string(),
  })

  const postAccountsAccountExternalAccountsBodySchema = z
    .object({
      bank_account: z.union([
        z.object({
          account_holder_name: z.coerce.string().optional(),
          account_holder_type: z.enum(["company", "individual"]).optional(),
          account_number: z.coerce.string(),
          account_type: z
            .enum(["checking", "futsu", "savings", "toza"])
            .optional(),
          country: z.coerce.string(),
          currency: z.coerce.string().optional(),
          documents: z
            .object({
              bank_account_ownership_verification: z
                .object({ files: z.array(z.coerce.string()).optional() })
                .optional(),
            })
            .optional(),
          object: z.enum(["bank_account"]).optional(),
          routing_number: z.coerce.string().optional(),
        }),
        z.coerce.string(),
      ]),
      default_for_currency: z.coerce.boolean().optional(),
      expand: z.array(z.coerce.string()).optional(),
      external_account: z.coerce.string().optional(),
      metadata: z.object({}).optional(),
    })
    .optional()

  const postAccountsAccountExternalAccountsResponseValidator =
    responseValidationFactory([["200", s_external_account]], s_error)

  router.post(
    "postAccountsAccountExternalAccounts",
    "/v1/accounts/:account/external_accounts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postAccountsAccountExternalAccountsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountExternalAccountsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postAccountsAccountExternalAccounts(input, ctx)

      ctx.body = postAccountsAccountExternalAccountsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const deleteAccountsAccountExternalAccountsIdParamSchema = z.object({
    account: z.coerce.string(),
    id: z.coerce.string(),
  })

  const deleteAccountsAccountExternalAccountsIdBodySchema = z
    .object({})
    .optional()

  const deleteAccountsAccountExternalAccountsIdResponseValidator =
    responseValidationFactory([["200", s_deleted_external_account]], s_error)

  router.delete(
    "deleteAccountsAccountExternalAccountsId",
    "/v1/accounts/:account/external_accounts/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteAccountsAccountExternalAccountsIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteAccountsAccountExternalAccountsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteAccountsAccountExternalAccountsId(input, ctx)

      ctx.body = deleteAccountsAccountExternalAccountsIdResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getAccountsAccountExternalAccountsIdParamSchema = z.object({
    account: z.coerce.string(),
    id: z.coerce.string(),
  })

  const getAccountsAccountExternalAccountsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getAccountsAccountExternalAccountsIdBodySchema = z.object({}).optional()

  const getAccountsAccountExternalAccountsIdResponseValidator =
    responseValidationFactory([["200", s_external_account]], s_error)

  router.get(
    "getAccountsAccountExternalAccountsId",
    "/v1/accounts/:account/external_accounts/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getAccountsAccountExternalAccountsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getAccountsAccountExternalAccountsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getAccountsAccountExternalAccountsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getAccountsAccountExternalAccountsId(input, ctx)

      ctx.body = getAccountsAccountExternalAccountsIdResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountExternalAccountsIdParamSchema = z.object({
    account: z.coerce.string(),
    id: z.coerce.string(),
  })

  const postAccountsAccountExternalAccountsIdBodySchema = z
    .object({
      account_holder_name: z.coerce.string().optional(),
      account_holder_type: z.enum(["", "company", "individual"]).optional(),
      account_type: z.enum(["checking", "futsu", "savings", "toza"]).optional(),
      address_city: z.coerce.string().optional(),
      address_country: z.coerce.string().optional(),
      address_line1: z.coerce.string().optional(),
      address_line2: z.coerce.string().optional(),
      address_state: z.coerce.string().optional(),
      address_zip: z.coerce.string().optional(),
      default_for_currency: z.coerce.boolean().optional(),
      documents: z
        .object({
          bank_account_ownership_verification: z
            .object({ files: z.array(z.coerce.string()).optional() })
            .optional(),
        })
        .optional(),
      exp_month: z.coerce.string().optional(),
      exp_year: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      name: z.coerce.string().optional(),
    })
    .optional()

  const postAccountsAccountExternalAccountsIdResponseValidator =
    responseValidationFactory([["200", s_external_account]], s_error)

  router.post(
    "postAccountsAccountExternalAccountsId",
    "/v1/accounts/:account/external_accounts/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postAccountsAccountExternalAccountsIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountExternalAccountsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postAccountsAccountExternalAccountsId(input, ctx)

      ctx.body = postAccountsAccountExternalAccountsIdResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountLoginLinksParamSchema = z.object({
    account: z.coerce.string(),
  })

  const postAccountsAccountLoginLinksBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postAccountsAccountLoginLinksResponseValidator =
    responseValidationFactory([["200", s_login_link]], s_error)

  router.post(
    "postAccountsAccountLoginLinks",
    "/v1/accounts/:account/login_links",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postAccountsAccountLoginLinksParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountLoginLinksBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postAccountsAccountLoginLinks(input, ctx)

      ctx.body = postAccountsAccountLoginLinksResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getAccountsAccountPeopleParamSchema = z.object({
    account: z.coerce.string(),
  })

  const getAccountsAccountPeopleQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    relationship: z
      .object({
        director: z.coerce.boolean().optional(),
        executive: z.coerce.boolean().optional(),
        owner: z.coerce.boolean().optional(),
        representative: z.coerce.boolean().optional(),
      })
      .optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getAccountsAccountPeopleBodySchema = z.object({}).optional()

  const getAccountsAccountPeopleResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_person)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getAccountsAccountPeople",
    "/v1/accounts/:account/people",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getAccountsAccountPeopleParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getAccountsAccountPeopleQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getAccountsAccountPeopleBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getAccountsAccountPeople(
        input,
        ctx,
      )

      ctx.body = getAccountsAccountPeopleResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountPeopleParamSchema = z.object({
    account: z.coerce.string(),
  })

  const postAccountsAccountPeopleBodySchema = z
    .object({
      address: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        })
        .optional(),
      address_kana: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
          town: z.coerce.string().optional(),
        })
        .optional(),
      address_kanji: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
          town: z.coerce.string().optional(),
        })
        .optional(),
      dob: z.union([
        z.object({
          day: z.coerce.number(),
          month: z.coerce.number(),
          year: z.coerce.number(),
        }),
        z.enum([""]),
      ]),
      documents: z
        .object({
          company_authorization: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
          passport: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
          visa: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
        })
        .optional(),
      email: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      first_name: z.coerce.string().optional(),
      first_name_kana: z.coerce.string().optional(),
      first_name_kanji: z.coerce.string().optional(),
      full_name_aliases: z.union([z.array(z.coerce.string()), z.enum([""])]),
      gender: z.coerce.string().optional(),
      id_number: z.coerce.string().optional(),
      id_number_secondary: z.coerce.string().optional(),
      last_name: z.coerce.string().optional(),
      last_name_kana: z.coerce.string().optional(),
      last_name_kanji: z.coerce.string().optional(),
      maiden_name: z.coerce.string().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      nationality: z.coerce.string().optional(),
      person_token: z.coerce.string().optional(),
      phone: z.coerce.string().optional(),
      political_exposure: z.coerce.string().optional(),
      registered_address: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        })
        .optional(),
      relationship: z
        .object({
          director: z.coerce.boolean().optional(),
          executive: z.coerce.boolean().optional(),
          owner: z.coerce.boolean().optional(),
          percent_ownership: z.union([z.coerce.number(), z.enum([""])]),
          representative: z.coerce.boolean().optional(),
          title: z.coerce.string().optional(),
        })
        .optional(),
      ssn_last_4: z.coerce.string().optional(),
      verification: z
        .object({
          additional_document: z
            .object({
              back: z.coerce.string().optional(),
              front: z.coerce.string().optional(),
            })
            .optional(),
          document: z
            .object({
              back: z.coerce.string().optional(),
              front: z.coerce.string().optional(),
            })
            .optional(),
        })
        .optional(),
    })
    .optional()

  const postAccountsAccountPeopleResponseValidator = responseValidationFactory(
    [["200", s_person]],
    s_error,
  )

  router.post(
    "postAccountsAccountPeople",
    "/v1/accounts/:account/people",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postAccountsAccountPeopleParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountPeopleBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postAccountsAccountPeople(
        input,
        ctx,
      )

      ctx.body = postAccountsAccountPeopleResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteAccountsAccountPeoplePersonParamSchema = z.object({
    account: z.coerce.string(),
    person: z.coerce.string(),
  })

  const deleteAccountsAccountPeoplePersonBodySchema = z.object({}).optional()

  const deleteAccountsAccountPeoplePersonResponseValidator =
    responseValidationFactory([["200", s_deleted_person]], s_error)

  router.delete(
    "deleteAccountsAccountPeoplePerson",
    "/v1/accounts/:account/people/:person",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteAccountsAccountPeoplePersonParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteAccountsAccountPeoplePersonBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteAccountsAccountPeoplePerson(input, ctx)

      ctx.body = deleteAccountsAccountPeoplePersonResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getAccountsAccountPeoplePersonParamSchema = z.object({
    account: z.coerce.string(),
    person: z.coerce.string(),
  })

  const getAccountsAccountPeoplePersonQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getAccountsAccountPeoplePersonBodySchema = z.object({}).optional()

  const getAccountsAccountPeoplePersonResponseValidator =
    responseValidationFactory([["200", s_person]], s_error)

  router.get(
    "getAccountsAccountPeoplePerson",
    "/v1/accounts/:account/people/:person",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getAccountsAccountPeoplePersonParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getAccountsAccountPeoplePersonQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getAccountsAccountPeoplePersonBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getAccountsAccountPeoplePerson(input, ctx)

      ctx.body = getAccountsAccountPeoplePersonResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountPeoplePersonParamSchema = z.object({
    account: z.coerce.string(),
    person: z.coerce.string(),
  })

  const postAccountsAccountPeoplePersonBodySchema = z
    .object({
      address: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        })
        .optional(),
      address_kana: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
          town: z.coerce.string().optional(),
        })
        .optional(),
      address_kanji: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
          town: z.coerce.string().optional(),
        })
        .optional(),
      dob: z.union([
        z.object({
          day: z.coerce.number(),
          month: z.coerce.number(),
          year: z.coerce.number(),
        }),
        z.enum([""]),
      ]),
      documents: z
        .object({
          company_authorization: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
          passport: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
          visa: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
        })
        .optional(),
      email: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      first_name: z.coerce.string().optional(),
      first_name_kana: z.coerce.string().optional(),
      first_name_kanji: z.coerce.string().optional(),
      full_name_aliases: z.union([z.array(z.coerce.string()), z.enum([""])]),
      gender: z.coerce.string().optional(),
      id_number: z.coerce.string().optional(),
      id_number_secondary: z.coerce.string().optional(),
      last_name: z.coerce.string().optional(),
      last_name_kana: z.coerce.string().optional(),
      last_name_kanji: z.coerce.string().optional(),
      maiden_name: z.coerce.string().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      nationality: z.coerce.string().optional(),
      person_token: z.coerce.string().optional(),
      phone: z.coerce.string().optional(),
      political_exposure: z.coerce.string().optional(),
      registered_address: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        })
        .optional(),
      relationship: z
        .object({
          director: z.coerce.boolean().optional(),
          executive: z.coerce.boolean().optional(),
          owner: z.coerce.boolean().optional(),
          percent_ownership: z.union([z.coerce.number(), z.enum([""])]),
          representative: z.coerce.boolean().optional(),
          title: z.coerce.string().optional(),
        })
        .optional(),
      ssn_last_4: z.coerce.string().optional(),
      verification: z
        .object({
          additional_document: z
            .object({
              back: z.coerce.string().optional(),
              front: z.coerce.string().optional(),
            })
            .optional(),
          document: z
            .object({
              back: z.coerce.string().optional(),
              front: z.coerce.string().optional(),
            })
            .optional(),
        })
        .optional(),
    })
    .optional()

  const postAccountsAccountPeoplePersonResponseValidator =
    responseValidationFactory([["200", s_person]], s_error)

  router.post(
    "postAccountsAccountPeoplePerson",
    "/v1/accounts/:account/people/:person",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postAccountsAccountPeoplePersonParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountPeoplePersonBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postAccountsAccountPeoplePerson(input, ctx)

      ctx.body = postAccountsAccountPeoplePersonResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getAccountsAccountPersonsParamSchema = z.object({
    account: z.coerce.string(),
  })

  const getAccountsAccountPersonsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    relationship: z
      .object({
        director: z.coerce.boolean().optional(),
        executive: z.coerce.boolean().optional(),
        owner: z.coerce.boolean().optional(),
        representative: z.coerce.boolean().optional(),
      })
      .optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getAccountsAccountPersonsBodySchema = z.object({}).optional()

  const getAccountsAccountPersonsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_person)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getAccountsAccountPersons",
    "/v1/accounts/:account/persons",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getAccountsAccountPersonsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getAccountsAccountPersonsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getAccountsAccountPersonsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getAccountsAccountPersons(
        input,
        ctx,
      )

      ctx.body = getAccountsAccountPersonsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountPersonsParamSchema = z.object({
    account: z.coerce.string(),
  })

  const postAccountsAccountPersonsBodySchema = z
    .object({
      address: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        })
        .optional(),
      address_kana: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
          town: z.coerce.string().optional(),
        })
        .optional(),
      address_kanji: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
          town: z.coerce.string().optional(),
        })
        .optional(),
      dob: z.union([
        z.object({
          day: z.coerce.number(),
          month: z.coerce.number(),
          year: z.coerce.number(),
        }),
        z.enum([""]),
      ]),
      documents: z
        .object({
          company_authorization: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
          passport: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
          visa: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
        })
        .optional(),
      email: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      first_name: z.coerce.string().optional(),
      first_name_kana: z.coerce.string().optional(),
      first_name_kanji: z.coerce.string().optional(),
      full_name_aliases: z.union([z.array(z.coerce.string()), z.enum([""])]),
      gender: z.coerce.string().optional(),
      id_number: z.coerce.string().optional(),
      id_number_secondary: z.coerce.string().optional(),
      last_name: z.coerce.string().optional(),
      last_name_kana: z.coerce.string().optional(),
      last_name_kanji: z.coerce.string().optional(),
      maiden_name: z.coerce.string().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      nationality: z.coerce.string().optional(),
      person_token: z.coerce.string().optional(),
      phone: z.coerce.string().optional(),
      political_exposure: z.coerce.string().optional(),
      registered_address: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        })
        .optional(),
      relationship: z
        .object({
          director: z.coerce.boolean().optional(),
          executive: z.coerce.boolean().optional(),
          owner: z.coerce.boolean().optional(),
          percent_ownership: z.union([z.coerce.number(), z.enum([""])]),
          representative: z.coerce.boolean().optional(),
          title: z.coerce.string().optional(),
        })
        .optional(),
      ssn_last_4: z.coerce.string().optional(),
      verification: z
        .object({
          additional_document: z
            .object({
              back: z.coerce.string().optional(),
              front: z.coerce.string().optional(),
            })
            .optional(),
          document: z
            .object({
              back: z.coerce.string().optional(),
              front: z.coerce.string().optional(),
            })
            .optional(),
        })
        .optional(),
    })
    .optional()

  const postAccountsAccountPersonsResponseValidator = responseValidationFactory(
    [["200", s_person]],
    s_error,
  )

  router.post(
    "postAccountsAccountPersons",
    "/v1/accounts/:account/persons",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postAccountsAccountPersonsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountPersonsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postAccountsAccountPersons(
        input,
        ctx,
      )

      ctx.body = postAccountsAccountPersonsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteAccountsAccountPersonsPersonParamSchema = z.object({
    account: z.coerce.string(),
    person: z.coerce.string(),
  })

  const deleteAccountsAccountPersonsPersonBodySchema = z.object({}).optional()

  const deleteAccountsAccountPersonsPersonResponseValidator =
    responseValidationFactory([["200", s_deleted_person]], s_error)

  router.delete(
    "deleteAccountsAccountPersonsPerson",
    "/v1/accounts/:account/persons/:person",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteAccountsAccountPersonsPersonParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteAccountsAccountPersonsPersonBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteAccountsAccountPersonsPerson(input, ctx)

      ctx.body = deleteAccountsAccountPersonsPersonResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getAccountsAccountPersonsPersonParamSchema = z.object({
    account: z.coerce.string(),
    person: z.coerce.string(),
  })

  const getAccountsAccountPersonsPersonQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getAccountsAccountPersonsPersonBodySchema = z.object({}).optional()

  const getAccountsAccountPersonsPersonResponseValidator =
    responseValidationFactory([["200", s_person]], s_error)

  router.get(
    "getAccountsAccountPersonsPerson",
    "/v1/accounts/:account/persons/:person",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getAccountsAccountPersonsPersonParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getAccountsAccountPersonsPersonQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getAccountsAccountPersonsPersonBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getAccountsAccountPersonsPerson(input, ctx)

      ctx.body = getAccountsAccountPersonsPersonResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountPersonsPersonParamSchema = z.object({
    account: z.coerce.string(),
    person: z.coerce.string(),
  })

  const postAccountsAccountPersonsPersonBodySchema = z
    .object({
      address: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        })
        .optional(),
      address_kana: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
          town: z.coerce.string().optional(),
        })
        .optional(),
      address_kanji: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
          town: z.coerce.string().optional(),
        })
        .optional(),
      dob: z.union([
        z.object({
          day: z.coerce.number(),
          month: z.coerce.number(),
          year: z.coerce.number(),
        }),
        z.enum([""]),
      ]),
      documents: z
        .object({
          company_authorization: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
          passport: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
          visa: z
            .object({
              files: z
                .array(z.union([z.coerce.string(), z.enum([""])]))
                .optional(),
            })
            .optional(),
        })
        .optional(),
      email: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      first_name: z.coerce.string().optional(),
      first_name_kana: z.coerce.string().optional(),
      first_name_kanji: z.coerce.string().optional(),
      full_name_aliases: z.union([z.array(z.coerce.string()), z.enum([""])]),
      gender: z.coerce.string().optional(),
      id_number: z.coerce.string().optional(),
      id_number_secondary: z.coerce.string().optional(),
      last_name: z.coerce.string().optional(),
      last_name_kana: z.coerce.string().optional(),
      last_name_kanji: z.coerce.string().optional(),
      maiden_name: z.coerce.string().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      nationality: z.coerce.string().optional(),
      person_token: z.coerce.string().optional(),
      phone: z.coerce.string().optional(),
      political_exposure: z.coerce.string().optional(),
      registered_address: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        })
        .optional(),
      relationship: z
        .object({
          director: z.coerce.boolean().optional(),
          executive: z.coerce.boolean().optional(),
          owner: z.coerce.boolean().optional(),
          percent_ownership: z.union([z.coerce.number(), z.enum([""])]),
          representative: z.coerce.boolean().optional(),
          title: z.coerce.string().optional(),
        })
        .optional(),
      ssn_last_4: z.coerce.string().optional(),
      verification: z
        .object({
          additional_document: z
            .object({
              back: z.coerce.string().optional(),
              front: z.coerce.string().optional(),
            })
            .optional(),
          document: z
            .object({
              back: z.coerce.string().optional(),
              front: z.coerce.string().optional(),
            })
            .optional(),
        })
        .optional(),
    })
    .optional()

  const postAccountsAccountPersonsPersonResponseValidator =
    responseValidationFactory([["200", s_person]], s_error)

  router.post(
    "postAccountsAccountPersonsPerson",
    "/v1/accounts/:account/persons/:person",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postAccountsAccountPersonsPersonParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountPersonsPersonBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postAccountsAccountPersonsPerson(input, ctx)

      ctx.body = postAccountsAccountPersonsPersonResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postAccountsAccountRejectParamSchema = z.object({
    account: z.coerce.string(),
  })

  const postAccountsAccountRejectBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    reason: z.coerce.string(),
  })

  const postAccountsAccountRejectResponseValidator = responseValidationFactory(
    [["200", s_account]],
    s_error,
  )

  router.post(
    "postAccountsAccountReject",
    "/v1/accounts/:account/reject",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postAccountsAccountRejectParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postAccountsAccountRejectBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postAccountsAccountReject(
        input,
        ctx,
      )

      ctx.body = postAccountsAccountRejectResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getApplePayDomainsQuerySchema = z.object({
    domain_name: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getApplePayDomainsBodySchema = z.object({}).optional()

  const getApplePayDomainsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_apple_pay_domain),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getApplePayDomains",
    "/v1/apple_pay/domains",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getApplePayDomainsQuerySchema, ctx.query),
        body: parseRequestInput(getApplePayDomainsBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getApplePayDomains(
        input,
        ctx,
      )

      ctx.body = getApplePayDomainsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postApplePayDomainsBodySchema = z.object({
    domain_name: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
  })

  const postApplePayDomainsResponseValidator = responseValidationFactory(
    [["200", s_apple_pay_domain]],
    s_error,
  )

  router.post(
    "postApplePayDomains",
    "/v1/apple_pay/domains",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postApplePayDomainsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postApplePayDomains(
        input,
        ctx,
      )

      ctx.body = postApplePayDomainsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteApplePayDomainsDomainParamSchema = z.object({
    domain: z.coerce.string(),
  })

  const deleteApplePayDomainsDomainBodySchema = z.object({}).optional()

  const deleteApplePayDomainsDomainResponseValidator =
    responseValidationFactory([["200", s_deleted_apple_pay_domain]], s_error)

  router.delete(
    "deleteApplePayDomainsDomain",
    "/v1/apple_pay/domains/:domain",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteApplePayDomainsDomainParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteApplePayDomainsDomainBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.deleteApplePayDomainsDomain(
        input,
        ctx,
      )

      ctx.body = deleteApplePayDomainsDomainResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getApplePayDomainsDomainParamSchema = z.object({
    domain: z.coerce.string(),
  })

  const getApplePayDomainsDomainQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getApplePayDomainsDomainBodySchema = z.object({}).optional()

  const getApplePayDomainsDomainResponseValidator = responseValidationFactory(
    [["200", s_apple_pay_domain]],
    s_error,
  )

  router.get(
    "getApplePayDomainsDomain",
    "/v1/apple_pay/domains/:domain",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getApplePayDomainsDomainParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getApplePayDomainsDomainQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getApplePayDomainsDomainBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getApplePayDomainsDomain(
        input,
        ctx,
      )

      ctx.body = getApplePayDomainsDomainResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getApplicationFeesQuerySchema = z.object({
    charge: z.coerce.string().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getApplicationFeesBodySchema = z.object({}).optional()

  const getApplicationFeesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_application_fee)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getApplicationFees",
    "/v1/application_fees",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getApplicationFeesQuerySchema, ctx.query),
        body: parseRequestInput(getApplicationFeesBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getApplicationFees(
        input,
        ctx,
      )

      ctx.body = getApplicationFeesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getApplicationFeesFeeRefundsIdParamSchema = z.object({
    fee: z.coerce.string(),
    id: z.coerce.string(),
  })

  const getApplicationFeesFeeRefundsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getApplicationFeesFeeRefundsIdBodySchema = z.object({}).optional()

  const getApplicationFeesFeeRefundsIdResponseValidator =
    responseValidationFactory([["200", s_fee_refund]], s_error)

  router.get(
    "getApplicationFeesFeeRefundsId",
    "/v1/application_fees/:fee/refunds/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getApplicationFeesFeeRefundsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getApplicationFeesFeeRefundsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getApplicationFeesFeeRefundsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getApplicationFeesFeeRefundsId(input, ctx)

      ctx.body = getApplicationFeesFeeRefundsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postApplicationFeesFeeRefundsIdParamSchema = z.object({
    fee: z.coerce.string(),
    id: z.coerce.string(),
  })

  const postApplicationFeesFeeRefundsIdBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postApplicationFeesFeeRefundsIdResponseValidator =
    responseValidationFactory([["200", s_fee_refund]], s_error)

  router.post(
    "postApplicationFeesFeeRefundsId",
    "/v1/application_fees/:fee/refunds/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postApplicationFeesFeeRefundsIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postApplicationFeesFeeRefundsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postApplicationFeesFeeRefundsId(input, ctx)

      ctx.body = postApplicationFeesFeeRefundsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getApplicationFeesIdParamSchema = z.object({ id: z.coerce.string() })

  const getApplicationFeesIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getApplicationFeesIdBodySchema = z.object({}).optional()

  const getApplicationFeesIdResponseValidator = responseValidationFactory(
    [["200", s_application_fee]],
    s_error,
  )

  router.get(
    "getApplicationFeesId",
    "/v1/application_fees/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getApplicationFeesIdParamSchema, ctx.params),
        query: parseRequestInput(getApplicationFeesIdQuerySchema, ctx.query),
        body: parseRequestInput(
          getApplicationFeesIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getApplicationFeesId(
        input,
        ctx,
      )

      ctx.body = getApplicationFeesIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postApplicationFeesIdRefundParamSchema = z.object({
    id: z.coerce.string(),
  })

  const postApplicationFeesIdRefundBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      directive: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
    })
    .optional()

  const postApplicationFeesIdRefundResponseValidator =
    responseValidationFactory([["200", s_application_fee]], s_error)

  router.post(
    "postApplicationFeesIdRefund",
    "/v1/application_fees/:id/refund",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postApplicationFeesIdRefundParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postApplicationFeesIdRefundBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postApplicationFeesIdRefund(
        input,
        ctx,
      )

      ctx.body = postApplicationFeesIdRefundResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getApplicationFeesIdRefundsParamSchema = z.object({
    id: z.coerce.string(),
  })

  const getApplicationFeesIdRefundsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getApplicationFeesIdRefundsBodySchema = z.object({}).optional()

  const getApplicationFeesIdRefundsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_fee_refund)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getApplicationFeesIdRefunds",
    "/v1/application_fees/:id/refunds",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getApplicationFeesIdRefundsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getApplicationFeesIdRefundsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getApplicationFeesIdRefundsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getApplicationFeesIdRefunds(
        input,
        ctx,
      )

      ctx.body = getApplicationFeesIdRefundsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postApplicationFeesIdRefundsParamSchema = z.object({
    id: z.coerce.string(),
  })

  const postApplicationFeesIdRefundsBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.object({}).optional(),
    })
    .optional()

  const postApplicationFeesIdRefundsResponseValidator =
    responseValidationFactory([["200", s_fee_refund]], s_error)

  router.post(
    "postApplicationFeesIdRefunds",
    "/v1/application_fees/:id/refunds",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postApplicationFeesIdRefundsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postApplicationFeesIdRefundsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postApplicationFeesIdRefunds(input, ctx)

      ctx.body = postApplicationFeesIdRefundsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getAppsSecretsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    scope: z.object({
      type: z.enum(["account", "user"]),
      user: z.coerce.string().optional(),
    }),
    starting_after: z.coerce.string().optional(),
  })

  const getAppsSecretsBodySchema = z.object({}).optional()

  const getAppsSecretsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_apps_secret),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getAppsSecrets", "/v1/apps/secrets", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getAppsSecretsQuerySchema, ctx.query),
      body: parseRequestInput(getAppsSecretsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getAppsSecrets(input, ctx)

    ctx.body = getAppsSecretsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postAppsSecretsBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    expires_at: z.coerce.number().optional(),
    name: z.coerce.string(),
    payload: z.coerce.string(),
    scope: z.object({
      type: z.enum(["account", "user"]),
      user: z.coerce.string().optional(),
    }),
  })

  const postAppsSecretsResponseValidator = responseValidationFactory(
    [["200", s_apps_secret]],
    s_error,
  )

  router.post("postAppsSecrets", "/v1/apps/secrets", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postAppsSecretsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postAppsSecrets(input, ctx)

    ctx.body = postAppsSecretsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postAppsSecretsDeleteBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    name: z.coerce.string(),
    scope: z.object({
      type: z.enum(["account", "user"]),
      user: z.coerce.string().optional(),
    }),
  })

  const postAppsSecretsDeleteResponseValidator = responseValidationFactory(
    [["200", s_apps_secret]],
    s_error,
  )

  router.post(
    "postAppsSecretsDelete",
    "/v1/apps/secrets/delete",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postAppsSecretsDeleteBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postAppsSecretsDelete(
        input,
        ctx,
      )

      ctx.body = postAppsSecretsDeleteResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getAppsSecretsFindQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    name: z.coerce.string(),
    scope: z.object({
      type: z.enum(["account", "user"]),
      user: z.coerce.string().optional(),
    }),
  })

  const getAppsSecretsFindBodySchema = z.object({}).optional()

  const getAppsSecretsFindResponseValidator = responseValidationFactory(
    [["200", s_apps_secret]],
    s_error,
  )

  router.get(
    "getAppsSecretsFind",
    "/v1/apps/secrets/find",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getAppsSecretsFindQuerySchema, ctx.query),
        body: parseRequestInput(getAppsSecretsFindBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getAppsSecretsFind(
        input,
        ctx,
      )

      ctx.body = getAppsSecretsFindResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getBalanceQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getBalanceBodySchema = z.object({}).optional()

  const getBalanceResponseValidator = responseValidationFactory(
    [["200", s_balance]],
    s_error,
  )

  router.get("getBalance", "/v1/balance", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getBalanceQuerySchema, ctx.query),
      body: parseRequestInput(getBalanceBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getBalance(input, ctx)

    ctx.body = getBalanceResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getBalanceHistoryQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    currency: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    payout: z.coerce.string().optional(),
    source: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
    type: z.coerce.string().optional(),
  })

  const getBalanceHistoryBodySchema = z.object({}).optional()

  const getBalanceHistoryResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_balance_transaction)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getBalanceHistory", "/v1/balance/history", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getBalanceHistoryQuerySchema, ctx.query),
      body: parseRequestInput(getBalanceHistoryBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getBalanceHistory(input, ctx)

    ctx.body = getBalanceHistoryResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getBalanceHistoryIdParamSchema = z.object({ id: z.coerce.string() })

  const getBalanceHistoryIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getBalanceHistoryIdBodySchema = z.object({}).optional()

  const getBalanceHistoryIdResponseValidator = responseValidationFactory(
    [["200", s_balance_transaction]],
    s_error,
  )

  router.get(
    "getBalanceHistoryId",
    "/v1/balance/history/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getBalanceHistoryIdParamSchema, ctx.params),
        query: parseRequestInput(getBalanceHistoryIdQuerySchema, ctx.query),
        body: parseRequestInput(
          getBalanceHistoryIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getBalanceHistoryId(
        input,
        ctx,
      )

      ctx.body = getBalanceHistoryIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getBalanceTransactionsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    currency: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    payout: z.coerce.string().optional(),
    source: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
    type: z.coerce.string().optional(),
  })

  const getBalanceTransactionsBodySchema = z.object({}).optional()

  const getBalanceTransactionsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_balance_transaction)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getBalanceTransactions",
    "/v1/balance_transactions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getBalanceTransactionsQuerySchema, ctx.query),
        body: parseRequestInput(
          getBalanceTransactionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getBalanceTransactions(
        input,
        ctx,
      )

      ctx.body = getBalanceTransactionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getBalanceTransactionsIdParamSchema = z.object({
    id: z.coerce.string(),
  })

  const getBalanceTransactionsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getBalanceTransactionsIdBodySchema = z.object({}).optional()

  const getBalanceTransactionsIdResponseValidator = responseValidationFactory(
    [["200", s_balance_transaction]],
    s_error,
  )

  router.get(
    "getBalanceTransactionsId",
    "/v1/balance_transactions/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getBalanceTransactionsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getBalanceTransactionsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getBalanceTransactionsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getBalanceTransactionsId(
        input,
        ctx,
      )

      ctx.body = getBalanceTransactionsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getBillingPortalConfigurationsQuerySchema = z.object({
    active: z.coerce.boolean().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    is_default: z.coerce.boolean().optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getBillingPortalConfigurationsBodySchema = z.object({}).optional()

  const getBillingPortalConfigurationsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(s_billing_portal_configuration),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getBillingPortalConfigurations",
    "/v1/billing_portal/configurations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getBillingPortalConfigurationsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getBillingPortalConfigurationsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getBillingPortalConfigurations(input, ctx)

      ctx.body = getBillingPortalConfigurationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postBillingPortalConfigurationsBodySchema = z.object({
    business_profile: z.object({
      headline: z.union([z.coerce.string(), z.enum([""])]),
      privacy_policy_url: z.coerce.string().optional(),
      terms_of_service_url: z.coerce.string().optional(),
    }),
    default_return_url: z.union([z.coerce.string(), z.enum([""])]),
    expand: z.array(z.coerce.string()).optional(),
    features: z.object({
      customer_update: z
        .object({
          allowed_updates: z.union([
            z.array(
              z.enum([
                "address",
                "email",
                "name",
                "phone",
                "shipping",
                "tax_id",
              ]),
            ),
            z.enum([""]),
          ]),
          enabled: z.coerce.boolean(),
        })
        .optional(),
      invoice_history: z.object({ enabled: z.coerce.boolean() }).optional(),
      payment_method_update: z
        .object({ enabled: z.coerce.boolean() })
        .optional(),
      subscription_cancel: z
        .object({
          cancellation_reason: z
            .object({
              enabled: z.coerce.boolean(),
              options: z.union([
                z.array(
                  z.enum([
                    "customer_service",
                    "low_quality",
                    "missing_features",
                    "other",
                    "switched_service",
                    "too_complex",
                    "too_expensive",
                    "unused",
                  ]),
                ),
                z.enum([""]),
              ]),
            })
            .optional(),
          enabled: z.coerce.boolean(),
          mode: z.enum(["at_period_end", "immediately"]).optional(),
          proration_behavior: z
            .enum(["always_invoice", "create_prorations", "none"])
            .optional(),
        })
        .optional(),
      subscription_pause: z
        .object({ enabled: z.coerce.boolean().optional() })
        .optional(),
      subscription_update: z
        .object({
          default_allowed_updates: z.union([
            z.array(z.enum(["price", "promotion_code", "quantity"])),
            z.enum([""]),
          ]),
          enabled: z.coerce.boolean(),
          products: z.union([
            z.array(
              z.object({
                prices: z.array(z.coerce.string()),
                product: z.coerce.string(),
              }),
            ),
            z.enum([""]),
          ]),
          proration_behavior: z
            .enum(["always_invoice", "create_prorations", "none"])
            .optional(),
        })
        .optional(),
    }),
    login_page: z.object({ enabled: z.coerce.boolean() }).optional(),
    metadata: z.object({}).optional(),
  })

  const postBillingPortalConfigurationsResponseValidator =
    responseValidationFactory(
      [["200", s_billing_portal_configuration]],
      s_error,
    )

  router.post(
    "postBillingPortalConfigurations",
    "/v1/billing_portal/configurations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postBillingPortalConfigurationsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postBillingPortalConfigurations(input, ctx)

      ctx.body = postBillingPortalConfigurationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getBillingPortalConfigurationsConfigurationParamSchema = z.object({
    configuration: z.coerce.string(),
  })

  const getBillingPortalConfigurationsConfigurationQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getBillingPortalConfigurationsConfigurationBodySchema = z
    .object({})
    .optional()

  const getBillingPortalConfigurationsConfigurationResponseValidator =
    responseValidationFactory(
      [["200", s_billing_portal_configuration]],
      s_error,
    )

  router.get(
    "getBillingPortalConfigurationsConfiguration",
    "/v1/billing_portal/configurations/:configuration",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getBillingPortalConfigurationsConfigurationParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getBillingPortalConfigurationsConfigurationQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getBillingPortalConfigurationsConfigurationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getBillingPortalConfigurationsConfiguration(
          input,
          ctx,
        )

      ctx.body = getBillingPortalConfigurationsConfigurationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postBillingPortalConfigurationsConfigurationParamSchema = z.object({
    configuration: z.coerce.string(),
  })

  const postBillingPortalConfigurationsConfigurationBodySchema = z
    .object({
      active: z.coerce.boolean().optional(),
      business_profile: z
        .object({
          headline: z.union([z.coerce.string(), z.enum([""])]),
          privacy_policy_url: z.union([z.coerce.string(), z.enum([""])]),
          terms_of_service_url: z.union([z.coerce.string(), z.enum([""])]),
        })
        .optional(),
      default_return_url: z.union([z.coerce.string(), z.enum([""])]),
      expand: z.array(z.coerce.string()).optional(),
      features: z
        .object({
          customer_update: z
            .object({
              allowed_updates: z.union([
                z.array(
                  z.enum([
                    "address",
                    "email",
                    "name",
                    "phone",
                    "shipping",
                    "tax_id",
                  ]),
                ),
                z.enum([""]),
              ]),
              enabled: z.coerce.boolean().optional(),
            })
            .optional(),
          invoice_history: z.object({ enabled: z.coerce.boolean() }).optional(),
          payment_method_update: z
            .object({ enabled: z.coerce.boolean() })
            .optional(),
          subscription_cancel: z
            .object({
              cancellation_reason: z
                .object({
                  enabled: z.coerce.boolean(),
                  options: z.union([
                    z.array(
                      z.enum([
                        "customer_service",
                        "low_quality",
                        "missing_features",
                        "other",
                        "switched_service",
                        "too_complex",
                        "too_expensive",
                        "unused",
                      ]),
                    ),
                    z.enum([""]),
                  ]),
                })
                .optional(),
              enabled: z.coerce.boolean().optional(),
              mode: z.enum(["at_period_end", "immediately"]).optional(),
              proration_behavior: z
                .enum(["always_invoice", "create_prorations", "none"])
                .optional(),
            })
            .optional(),
          subscription_pause: z
            .object({ enabled: z.coerce.boolean().optional() })
            .optional(),
          subscription_update: z
            .object({
              default_allowed_updates: z.union([
                z.array(z.enum(["price", "promotion_code", "quantity"])),
                z.enum([""]),
              ]),
              enabled: z.coerce.boolean().optional(),
              products: z.union([
                z.array(
                  z.object({
                    prices: z.array(z.coerce.string()),
                    product: z.coerce.string(),
                  }),
                ),
                z.enum([""]),
              ]),
              proration_behavior: z
                .enum(["always_invoice", "create_prorations", "none"])
                .optional(),
            })
            .optional(),
        })
        .optional(),
      login_page: z.object({ enabled: z.coerce.boolean() }).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postBillingPortalConfigurationsConfigurationResponseValidator =
    responseValidationFactory(
      [["200", s_billing_portal_configuration]],
      s_error,
    )

  router.post(
    "postBillingPortalConfigurationsConfiguration",
    "/v1/billing_portal/configurations/:configuration",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postBillingPortalConfigurationsConfigurationParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postBillingPortalConfigurationsConfigurationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postBillingPortalConfigurationsConfiguration(
          input,
          ctx,
        )

      ctx.body = postBillingPortalConfigurationsConfigurationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postBillingPortalSessionsBodySchema = z.object({
    configuration: z.coerce.string().optional(),
    customer: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
    flow_data: z
      .object({
        after_completion: z
          .object({
            hosted_confirmation: z
              .object({ custom_message: z.coerce.string().optional() })
              .optional(),
            redirect: z.object({ return_url: z.coerce.string() }).optional(),
            type: z.enum([
              "hosted_confirmation",
              "portal_homepage",
              "redirect",
            ]),
          })
          .optional(),
        subscription_cancel: z
          .object({
            retention: z
              .object({
                coupon_offer: z.object({ coupon: z.coerce.string() }),
                type: z.enum(["coupon_offer"]),
              })
              .optional(),
            subscription: z.coerce.string(),
          })
          .optional(),
        subscription_update: z
          .object({ subscription: z.coerce.string() })
          .optional(),
        subscription_update_confirm: z
          .object({
            discounts: z
              .array(
                z.object({
                  coupon: z.coerce.string().optional(),
                  promotion_code: z.coerce.string().optional(),
                }),
              )
              .optional(),
            items: z.array(
              z.object({
                id: z.coerce.string(),
                price: z.coerce.string().optional(),
                quantity: z.coerce.number().optional(),
              }),
            ),
            subscription: z.coerce.string(),
          })
          .optional(),
        type: z.enum([
          "payment_method_update",
          "subscription_cancel",
          "subscription_update",
          "subscription_update_confirm",
        ]),
      })
      .optional(),
    locale: z
      .enum([
        "auto",
        "bg",
        "cs",
        "da",
        "de",
        "el",
        "en",
        "en-AU",
        "en-CA",
        "en-GB",
        "en-IE",
        "en-IN",
        "en-NZ",
        "en-SG",
        "es",
        "es-419",
        "et",
        "fi",
        "fil",
        "fr",
        "fr-CA",
        "hr",
        "hu",
        "id",
        "it",
        "ja",
        "ko",
        "lt",
        "lv",
        "ms",
        "mt",
        "nb",
        "nl",
        "pl",
        "pt",
        "pt-BR",
        "ro",
        "ru",
        "sk",
        "sl",
        "sv",
        "th",
        "tr",
        "vi",
        "zh",
        "zh-HK",
        "zh-TW",
      ])
      .optional(),
    on_behalf_of: z.coerce.string().optional(),
    return_url: z.coerce.string().optional(),
  })

  const postBillingPortalSessionsResponseValidator = responseValidationFactory(
    [["200", s_billing_portal_session]],
    s_error,
  )

  router.post(
    "postBillingPortalSessions",
    "/v1/billing_portal/sessions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postBillingPortalSessionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postBillingPortalSessions(
        input,
        ctx,
      )

      ctx.body = postBillingPortalSessionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getChargesQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    customer: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    payment_intent: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
    transfer_group: z.coerce.string().optional(),
  })

  const getChargesBodySchema = z.object({}).optional()

  const getChargesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_charge)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getCharges", "/v1/charges", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getChargesQuerySchema, ctx.query),
      body: parseRequestInput(getChargesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getCharges(input, ctx)

    ctx.body = getChargesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postChargesBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      application_fee: z.coerce.number().optional(),
      application_fee_amount: z.coerce.number().optional(),
      capture: z.coerce.boolean().optional(),
      card: z.union([
        z.object({
          address_city: z.coerce.string().optional(),
          address_country: z.coerce.string().optional(),
          address_line1: z.coerce.string().optional(),
          address_line2: z.coerce.string().optional(),
          address_state: z.coerce.string().optional(),
          address_zip: z.coerce.string().optional(),
          cvc: z.coerce.string().optional(),
          exp_month: z.coerce.number(),
          exp_year: z.coerce.number(),
          metadata: z.object({}).optional(),
          name: z.coerce.string().optional(),
          number: z.coerce.string(),
          object: z.enum(["card"]).optional(),
        }),
        z.coerce.string(),
      ]),
      currency: z.coerce.string().optional(),
      customer: z.coerce.string().optional(),
      description: z.coerce.string().optional(),
      destination: z.union([
        z.object({
          account: z.coerce.string(),
          amount: z.coerce.number().optional(),
        }),
        z.coerce.string(),
      ]),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      on_behalf_of: z.coerce.string().optional(),
      radar_options: z
        .object({ session: z.coerce.string().optional() })
        .optional(),
      receipt_email: z.coerce.string().optional(),
      shipping: z
        .object({
          address: z.object({
            city: z.coerce.string().optional(),
            country: z.coerce.string().optional(),
            line1: z.coerce.string().optional(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string().optional(),
            state: z.coerce.string().optional(),
          }),
          carrier: z.coerce.string().optional(),
          name: z.coerce.string(),
          phone: z.coerce.string().optional(),
          tracking_number: z.coerce.string().optional(),
        })
        .optional(),
      source: z.coerce.string().optional(),
      statement_descriptor: z.coerce.string().optional(),
      statement_descriptor_suffix: z.coerce.string().optional(),
      transfer_data: z
        .object({
          amount: z.coerce.number().optional(),
          destination: z.coerce.string(),
        })
        .optional(),
      transfer_group: z.coerce.string().optional(),
    })
    .optional()

  const postChargesResponseValidator = responseValidationFactory(
    [["200", s_charge]],
    s_error,
  )

  router.post("postCharges", "/v1/charges", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postChargesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postCharges(input, ctx)

    ctx.body = postChargesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getChargesSearchQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    page: z.coerce.string().optional(),
    query: z.coerce.string(),
  })

  const getChargesSearchBodySchema = z.object({}).optional()

  const getChargesSearchResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_charge)),
          has_more: z.coerce.boolean(),
          next_page: z.coerce.string().optional().nullable(),
          object: z.enum(["search_result"]),
          total_count: z.coerce.number().optional(),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getChargesSearch", "/v1/charges/search", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getChargesSearchQuerySchema, ctx.query),
      body: parseRequestInput(getChargesSearchBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getChargesSearch(input, ctx)

    ctx.body = getChargesSearchResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getChargesChargeParamSchema = z.object({ charge: z.coerce.string() })

  const getChargesChargeQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getChargesChargeBodySchema = z.object({}).optional()

  const getChargesChargeResponseValidator = responseValidationFactory(
    [["200", s_charge]],
    s_error,
  )

  router.get("getChargesCharge", "/v1/charges/:charge", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getChargesChargeParamSchema, ctx.params),
      query: parseRequestInput(getChargesChargeQuerySchema, ctx.query),
      body: parseRequestInput(getChargesChargeBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getChargesCharge(input, ctx)

    ctx.body = getChargesChargeResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postChargesChargeParamSchema = z.object({ charge: z.coerce.string() })

  const postChargesChargeBodySchema = z
    .object({
      customer: z.coerce.string().optional(),
      description: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      fraud_details: z
        .object({ user_report: z.enum(["", "fraudulent", "safe"]) })
        .optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      receipt_email: z.coerce.string().optional(),
      shipping: z
        .object({
          address: z.object({
            city: z.coerce.string().optional(),
            country: z.coerce.string().optional(),
            line1: z.coerce.string().optional(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string().optional(),
            state: z.coerce.string().optional(),
          }),
          carrier: z.coerce.string().optional(),
          name: z.coerce.string(),
          phone: z.coerce.string().optional(),
          tracking_number: z.coerce.string().optional(),
        })
        .optional(),
      transfer_group: z.coerce.string().optional(),
    })
    .optional()

  const postChargesChargeResponseValidator = responseValidationFactory(
    [["200", s_charge]],
    s_error,
  )

  router.post("postChargesCharge", "/v1/charges/:charge", async (ctx, next) => {
    const input = {
      params: parseRequestInput(postChargesChargeParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(postChargesChargeBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postChargesCharge(input, ctx)

    ctx.body = postChargesChargeResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postChargesChargeCaptureParamSchema = z.object({
    charge: z.coerce.string(),
  })

  const postChargesChargeCaptureBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      application_fee: z.coerce.number().optional(),
      application_fee_amount: z.coerce.number().optional(),
      expand: z.array(z.coerce.string()).optional(),
      receipt_email: z.coerce.string().optional(),
      statement_descriptor: z.coerce.string().optional(),
      statement_descriptor_suffix: z.coerce.string().optional(),
      transfer_data: z
        .object({ amount: z.coerce.number().optional() })
        .optional(),
      transfer_group: z.coerce.string().optional(),
    })
    .optional()

  const postChargesChargeCaptureResponseValidator = responseValidationFactory(
    [["200", s_charge]],
    s_error,
  )

  router.post(
    "postChargesChargeCapture",
    "/v1/charges/:charge/capture",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postChargesChargeCaptureParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postChargesChargeCaptureBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postChargesChargeCapture(
        input,
        ctx,
      )

      ctx.body = postChargesChargeCaptureResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getChargesChargeDisputeParamSchema = z.object({
    charge: z.coerce.string(),
  })

  const getChargesChargeDisputeQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getChargesChargeDisputeBodySchema = z.object({}).optional()

  const getChargesChargeDisputeResponseValidator = responseValidationFactory(
    [["200", s_dispute]],
    s_error,
  )

  router.get(
    "getChargesChargeDispute",
    "/v1/charges/:charge/dispute",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getChargesChargeDisputeParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(getChargesChargeDisputeQuerySchema, ctx.query),
        body: parseRequestInput(
          getChargesChargeDisputeBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getChargesChargeDispute(
        input,
        ctx,
      )

      ctx.body = getChargesChargeDisputeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postChargesChargeDisputeParamSchema = z.object({
    charge: z.coerce.string(),
  })

  const postChargesChargeDisputeBodySchema = z
    .object({
      evidence: z
        .object({
          access_activity_log: z.coerce.string().optional(),
          billing_address: z.coerce.string().optional(),
          cancellation_policy: z.coerce.string().optional(),
          cancellation_policy_disclosure: z.coerce.string().optional(),
          cancellation_rebuttal: z.coerce.string().optional(),
          customer_communication: z.coerce.string().optional(),
          customer_email_address: z.coerce.string().optional(),
          customer_name: z.coerce.string().optional(),
          customer_purchase_ip: z.coerce.string().optional(),
          customer_signature: z.coerce.string().optional(),
          duplicate_charge_documentation: z.coerce.string().optional(),
          duplicate_charge_explanation: z.coerce.string().optional(),
          duplicate_charge_id: z.coerce.string().optional(),
          product_description: z.coerce.string().optional(),
          receipt: z.coerce.string().optional(),
          refund_policy: z.coerce.string().optional(),
          refund_policy_disclosure: z.coerce.string().optional(),
          refund_refusal_explanation: z.coerce.string().optional(),
          service_date: z.coerce.string().optional(),
          service_documentation: z.coerce.string().optional(),
          shipping_address: z.coerce.string().optional(),
          shipping_carrier: z.coerce.string().optional(),
          shipping_date: z.coerce.string().optional(),
          shipping_documentation: z.coerce.string().optional(),
          shipping_tracking_number: z.coerce.string().optional(),
          uncategorized_file: z.coerce.string().optional(),
          uncategorized_text: z.coerce.string().optional(),
        })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      submit: z.coerce.boolean().optional(),
    })
    .optional()

  const postChargesChargeDisputeResponseValidator = responseValidationFactory(
    [["200", s_dispute]],
    s_error,
  )

  router.post(
    "postChargesChargeDispute",
    "/v1/charges/:charge/dispute",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postChargesChargeDisputeParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postChargesChargeDisputeBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postChargesChargeDispute(
        input,
        ctx,
      )

      ctx.body = postChargesChargeDisputeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postChargesChargeDisputeCloseParamSchema = z.object({
    charge: z.coerce.string(),
  })

  const postChargesChargeDisputeCloseBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postChargesChargeDisputeCloseResponseValidator =
    responseValidationFactory([["200", s_dispute]], s_error)

  router.post(
    "postChargesChargeDisputeClose",
    "/v1/charges/:charge/dispute/close",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postChargesChargeDisputeCloseParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postChargesChargeDisputeCloseBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postChargesChargeDisputeClose(input, ctx)

      ctx.body = postChargesChargeDisputeCloseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postChargesChargeRefundParamSchema = z.object({
    charge: z.coerce.string(),
  })

  const postChargesChargeRefundBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      expand: z.array(z.coerce.string()).optional(),
      instructions_email: z.coerce.string().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      payment_intent: z.coerce.string().optional(),
      reason: z
        .enum(["duplicate", "fraudulent", "requested_by_customer"])
        .optional(),
      refund_application_fee: z.coerce.boolean().optional(),
      reverse_transfer: z.coerce.boolean().optional(),
    })
    .optional()

  const postChargesChargeRefundResponseValidator = responseValidationFactory(
    [["200", s_charge]],
    s_error,
  )

  router.post(
    "postChargesChargeRefund",
    "/v1/charges/:charge/refund",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postChargesChargeRefundParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postChargesChargeRefundBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postChargesChargeRefund(
        input,
        ctx,
      )

      ctx.body = postChargesChargeRefundResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getChargesChargeRefundsParamSchema = z.object({
    charge: z.coerce.string(),
  })

  const getChargesChargeRefundsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getChargesChargeRefundsBodySchema = z.object({}).optional()

  const getChargesChargeRefundsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_refund)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getChargesChargeRefunds",
    "/v1/charges/:charge/refunds",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getChargesChargeRefundsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(getChargesChargeRefundsQuerySchema, ctx.query),
        body: parseRequestInput(
          getChargesChargeRefundsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getChargesChargeRefunds(
        input,
        ctx,
      )

      ctx.body = getChargesChargeRefundsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postChargesChargeRefundsParamSchema = z.object({
    charge: z.coerce.string(),
  })

  const postChargesChargeRefundsBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      currency: z.coerce.string().optional(),
      customer: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      instructions_email: z.coerce.string().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      origin: z.enum(["customer_balance"]).optional(),
      payment_intent: z.coerce.string().optional(),
      reason: z
        .enum(["duplicate", "fraudulent", "requested_by_customer"])
        .optional(),
      refund_application_fee: z.coerce.boolean().optional(),
      reverse_transfer: z.coerce.boolean().optional(),
    })
    .optional()

  const postChargesChargeRefundsResponseValidator = responseValidationFactory(
    [["200", s_refund]],
    s_error,
  )

  router.post(
    "postChargesChargeRefunds",
    "/v1/charges/:charge/refunds",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postChargesChargeRefundsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postChargesChargeRefundsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postChargesChargeRefunds(
        input,
        ctx,
      )

      ctx.body = postChargesChargeRefundsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getChargesChargeRefundsRefundParamSchema = z.object({
    charge: z.coerce.string(),
    refund: z.coerce.string(),
  })

  const getChargesChargeRefundsRefundQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getChargesChargeRefundsRefundBodySchema = z.object({}).optional()

  const getChargesChargeRefundsRefundResponseValidator =
    responseValidationFactory([["200", s_refund]], s_error)

  router.get(
    "getChargesChargeRefundsRefund",
    "/v1/charges/:charge/refunds/:refund",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getChargesChargeRefundsRefundParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getChargesChargeRefundsRefundQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getChargesChargeRefundsRefundBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getChargesChargeRefundsRefund(input, ctx)

      ctx.body = getChargesChargeRefundsRefundResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postChargesChargeRefundsRefundParamSchema = z.object({
    charge: z.coerce.string(),
    refund: z.coerce.string(),
  })

  const postChargesChargeRefundsRefundBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postChargesChargeRefundsRefundResponseValidator =
    responseValidationFactory([["200", s_refund]], s_error)

  router.post(
    "postChargesChargeRefundsRefund",
    "/v1/charges/:charge/refunds/:refund",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postChargesChargeRefundsRefundParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postChargesChargeRefundsRefundBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postChargesChargeRefundsRefund(input, ctx)

      ctx.body = postChargesChargeRefundsRefundResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCheckoutSessionsQuerySchema = z.object({
    customer: z.coerce.string().optional(),
    customer_details: z.object({ email: z.coerce.string() }).optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    payment_intent: z.coerce.string().optional(),
    payment_link: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
    subscription: z.coerce.string().optional(),
  })

  const getCheckoutSessionsBodySchema = z.object({}).optional()

  const getCheckoutSessionsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_checkout_session)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getCheckoutSessions",
    "/v1/checkout/sessions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getCheckoutSessionsQuerySchema, ctx.query),
        body: parseRequestInput(
          getCheckoutSessionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getCheckoutSessions(
        input,
        ctx,
      )

      ctx.body = getCheckoutSessionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCheckoutSessionsBodySchema = z.object({
    after_expiration: z
      .object({
        recovery: z
          .object({
            allow_promotion_codes: z.coerce.boolean().optional(),
            enabled: z.coerce.boolean(),
          })
          .optional(),
      })
      .optional(),
    allow_promotion_codes: z.coerce.boolean().optional(),
    automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
    billing_address_collection: z.enum(["auto", "required"]).optional(),
    cancel_url: z.coerce.string().optional(),
    client_reference_id: z.coerce.string().optional(),
    consent_collection: z
      .object({
        promotions: z.enum(["auto", "none"]).optional(),
        terms_of_service: z.enum(["none", "required"]).optional(),
      })
      .optional(),
    currency: z.coerce.string().optional(),
    custom_fields: z
      .array(
        z.object({
          dropdown: z
            .object({
              options: z.array(
                z.object({
                  label: z.coerce.string(),
                  value: z.coerce.string(),
                }),
              ),
            })
            .optional(),
          key: z.coerce.string(),
          label: z.object({
            custom: z.coerce.string(),
            type: z.enum(["custom"]),
          }),
          numeric: z
            .object({
              maximum_length: z.coerce.number().optional(),
              minimum_length: z.coerce.number().optional(),
            })
            .optional(),
          optional: z.coerce.boolean().optional(),
          text: z
            .object({
              maximum_length: z.coerce.number().optional(),
              minimum_length: z.coerce.number().optional(),
            })
            .optional(),
          type: z.enum(["dropdown", "numeric", "text"]),
        }),
      )
      .optional(),
    custom_text: z
      .object({
        shipping_address: z.union([
          z.object({ message: z.coerce.string() }),
          z.enum([""]),
        ]),
        submit: z.union([
          z.object({ message: z.coerce.string() }),
          z.enum([""]),
        ]),
      })
      .optional(),
    customer: z.coerce.string().optional(),
    customer_creation: z.enum(["always", "if_required"]).optional(),
    customer_email: z.coerce.string().optional(),
    customer_update: z
      .object({
        address: z.enum(["auto", "never"]).optional(),
        name: z.enum(["auto", "never"]).optional(),
        shipping: z.enum(["auto", "never"]).optional(),
      })
      .optional(),
    discounts: z
      .array(
        z.object({
          coupon: z.coerce.string().optional(),
          promotion_code: z.coerce.string().optional(),
        }),
      )
      .optional(),
    expand: z.array(z.coerce.string()).optional(),
    expires_at: z.coerce.number().optional(),
    invoice_creation: z
      .object({
        enabled: z.coerce.boolean(),
        invoice_data: z
          .object({
            account_tax_ids: z.union([
              z.array(z.coerce.string()),
              z.enum([""]),
            ]),
            custom_fields: z.union([
              z.array(
                z.object({ name: z.coerce.string(), value: z.coerce.string() }),
              ),
              z.enum([""]),
            ]),
            description: z.coerce.string().optional(),
            footer: z.coerce.string().optional(),
            metadata: z.object({}).optional(),
            rendering_options: z.union([
              z.object({
                amount_tax_display: z
                  .enum(["", "exclude_tax", "include_inclusive_tax"])
                  .optional(),
              }),
              z.enum([""]),
            ]),
          })
          .optional(),
      })
      .optional(),
    line_items: z
      .array(
        z.object({
          adjustable_quantity: z
            .object({
              enabled: z.coerce.boolean(),
              maximum: z.coerce.number().optional(),
              minimum: z.coerce.number().optional(),
            })
            .optional(),
          dynamic_tax_rates: z.array(z.coerce.string()).optional(),
          price: z.coerce.string().optional(),
          price_data: z
            .object({
              currency: z.coerce.string(),
              product: z.coerce.string().optional(),
              product_data: z
                .object({
                  description: z.coerce.string().optional(),
                  images: z.array(z.coerce.string()).optional(),
                  metadata: z.object({}).optional(),
                  name: z.coerce.string(),
                  tax_code: z.coerce.string().optional(),
                })
                .optional(),
              recurring: z
                .object({
                  interval: z.enum(["day", "month", "week", "year"]),
                  interval_count: z.coerce.number().optional(),
                })
                .optional(),
              tax_behavior: z
                .enum(["exclusive", "inclusive", "unspecified"])
                .optional(),
              unit_amount: z.coerce.number().optional(),
              unit_amount_decimal: z.coerce.string().optional(),
            })
            .optional(),
          quantity: z.coerce.number().optional(),
          tax_rates: z.array(z.coerce.string()).optional(),
        }),
      )
      .optional(),
    locale: z
      .enum([
        "auto",
        "bg",
        "cs",
        "da",
        "de",
        "el",
        "en",
        "en-GB",
        "es",
        "es-419",
        "et",
        "fi",
        "fil",
        "fr",
        "fr-CA",
        "hr",
        "hu",
        "id",
        "it",
        "ja",
        "ko",
        "lt",
        "lv",
        "ms",
        "mt",
        "nb",
        "nl",
        "pl",
        "pt",
        "pt-BR",
        "ro",
        "ru",
        "sk",
        "sl",
        "sv",
        "th",
        "tr",
        "vi",
        "zh",
        "zh-HK",
        "zh-TW",
      ])
      .optional(),
    metadata: z.object({}).optional(),
    mode: z.enum(["payment", "setup", "subscription"]).optional(),
    payment_intent_data: z
      .object({
        application_fee_amount: z.coerce.number().optional(),
        capture_method: z
          .enum(["automatic", "automatic_async", "manual"])
          .optional(),
        description: z.coerce.string().optional(),
        metadata: z.object({}).optional(),
        on_behalf_of: z.coerce.string().optional(),
        receipt_email: z.coerce.string().optional(),
        setup_future_usage: z.enum(["off_session", "on_session"]).optional(),
        shipping: z
          .object({
            address: z.object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            }),
            carrier: z.coerce.string().optional(),
            name: z.coerce.string(),
            phone: z.coerce.string().optional(),
            tracking_number: z.coerce.string().optional(),
          })
          .optional(),
        statement_descriptor: z.coerce.string().optional(),
        statement_descriptor_suffix: z.coerce.string().optional(),
        transfer_data: z
          .object({
            amount: z.coerce.number().optional(),
            destination: z.coerce.string(),
          })
          .optional(),
        transfer_group: z.coerce.string().optional(),
      })
      .optional(),
    payment_method_collection: z.enum(["always", "if_required"]).optional(),
    payment_method_configuration: z.coerce.string().optional(),
    payment_method_options: z
      .object({
        acss_debit: z
          .object({
            currency: z.enum(["cad", "usd"]).optional(),
            mandate_options: z
              .object({
                custom_mandate_url: z.union([z.coerce.string(), z.enum([""])]),
                default_for: z
                  .array(z.enum(["invoice", "subscription"]))
                  .optional(),
                interval_description: z.coerce.string().optional(),
                payment_schedule: z
                  .enum(["combined", "interval", "sporadic"])
                  .optional(),
                transaction_type: z.enum(["business", "personal"]).optional(),
              })
              .optional(),
            setup_future_usage: z
              .enum(["none", "off_session", "on_session"])
              .optional(),
            verification_method: z
              .enum(["automatic", "instant", "microdeposits"])
              .optional(),
          })
          .optional(),
        affirm: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        afterpay_clearpay: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        alipay: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        au_becs_debit: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        bacs_debit: z
          .object({
            setup_future_usage: z
              .enum(["none", "off_session", "on_session"])
              .optional(),
          })
          .optional(),
        bancontact: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        boleto: z
          .object({
            expires_after_days: z.coerce.number().optional(),
            setup_future_usage: z
              .enum(["none", "off_session", "on_session"])
              .optional(),
          })
          .optional(),
        card: z
          .object({
            installments: z
              .object({ enabled: z.coerce.boolean().optional() })
              .optional(),
            setup_future_usage: z
              .enum(["off_session", "on_session"])
              .optional(),
            statement_descriptor_suffix_kana: z.coerce.string().optional(),
            statement_descriptor_suffix_kanji: z.coerce.string().optional(),
          })
          .optional(),
        cashapp: z
          .object({
            setup_future_usage: z
              .enum(["none", "off_session", "on_session"])
              .optional(),
          })
          .optional(),
        customer_balance: z
          .object({
            bank_transfer: z
              .object({
                eu_bank_transfer: z
                  .object({ country: z.coerce.string() })
                  .optional(),
                requested_address_types: z
                  .array(
                    z.enum([
                      "aba",
                      "iban",
                      "sepa",
                      "sort_code",
                      "spei",
                      "swift",
                      "zengin",
                    ]),
                  )
                  .optional(),
                type: z.enum([
                  "eu_bank_transfer",
                  "gb_bank_transfer",
                  "jp_bank_transfer",
                  "mx_bank_transfer",
                  "us_bank_transfer",
                ]),
              })
              .optional(),
            funding_type: z.enum(["bank_transfer"]).optional(),
            setup_future_usage: z.enum(["none"]).optional(),
          })
          .optional(),
        eps: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        fpx: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        giropay: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        grabpay: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        ideal: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        klarna: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        konbini: z
          .object({
            expires_after_days: z.coerce.number().optional(),
            setup_future_usage: z.enum(["none"]).optional(),
          })
          .optional(),
        link: z
          .object({
            setup_future_usage: z.enum(["none", "off_session"]).optional(),
          })
          .optional(),
        oxxo: z
          .object({
            expires_after_days: z.coerce.number().optional(),
            setup_future_usage: z.enum(["none"]).optional(),
          })
          .optional(),
        p24: z
          .object({
            setup_future_usage: z.enum(["none"]).optional(),
            tos_shown_and_accepted: z.coerce.boolean().optional(),
          })
          .optional(),
        paynow: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        paypal: z
          .object({
            capture_method: z.enum(["", "manual"]).optional(),
            preferred_locale: z
              .enum([
                "cs-CZ",
                "da-DK",
                "de-AT",
                "de-DE",
                "de-LU",
                "el-GR",
                "en-GB",
                "en-US",
                "es-ES",
                "fi-FI",
                "fr-BE",
                "fr-FR",
                "fr-LU",
                "hu-HU",
                "it-IT",
                "nl-BE",
                "nl-NL",
                "pl-PL",
                "pt-PT",
                "sk-SK",
                "sv-SE",
              ])
              .optional(),
            reference: z.coerce.string().optional(),
            risk_correlation_id: z.coerce.string().optional(),
            setup_future_usage: z.enum(["", "none", "off_session"]).optional(),
          })
          .optional(),
        pix: z
          .object({ expires_after_seconds: z.coerce.number().optional() })
          .optional(),
        sepa_debit: z
          .object({
            setup_future_usage: z
              .enum(["none", "off_session", "on_session"])
              .optional(),
          })
          .optional(),
        sofort: z
          .object({ setup_future_usage: z.enum(["none"]).optional() })
          .optional(),
        us_bank_account: z
          .object({
            financial_connections: z
              .object({
                permissions: z
                  .array(
                    z.enum([
                      "balances",
                      "ownership",
                      "payment_method",
                      "transactions",
                    ]),
                  )
                  .optional(),
                prefetch: z.array(z.enum(["balances"])).optional(),
              })
              .optional(),
            setup_future_usage: z
              .enum(["none", "off_session", "on_session"])
              .optional(),
            verification_method: z.enum(["automatic", "instant"]).optional(),
          })
          .optional(),
        wechat_pay: z
          .object({
            app_id: z.coerce.string().optional(),
            client: z.enum(["android", "ios", "web"]),
            setup_future_usage: z.enum(["none"]).optional(),
          })
          .optional(),
      })
      .optional(),
    payment_method_types: z
      .array(
        z.enum([
          "acss_debit",
          "affirm",
          "afterpay_clearpay",
          "alipay",
          "au_becs_debit",
          "bacs_debit",
          "bancontact",
          "blik",
          "boleto",
          "card",
          "cashapp",
          "customer_balance",
          "eps",
          "fpx",
          "giropay",
          "grabpay",
          "ideal",
          "klarna",
          "konbini",
          "link",
          "oxxo",
          "p24",
          "paynow",
          "paypal",
          "pix",
          "promptpay",
          "sepa_debit",
          "sofort",
          "us_bank_account",
          "wechat_pay",
          "zip",
        ]),
      )
      .optional(),
    phone_number_collection: z
      .object({ enabled: z.coerce.boolean() })
      .optional(),
    setup_intent_data: z
      .object({
        description: z.coerce.string().optional(),
        metadata: z.object({}).optional(),
        on_behalf_of: z.coerce.string().optional(),
      })
      .optional(),
    shipping_address_collection: z
      .object({
        allowed_countries: z.array(
          z.enum([
            "AC",
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AO",
            "AQ",
            "AR",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CR",
            "CV",
            "CW",
            "CY",
            "CZ",
            "DE",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "FI",
            "FJ",
            "FK",
            "FO",
            "FR",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HN",
            "HR",
            "HT",
            "HU",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SE",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SV",
            "SX",
            "SZ",
            "TA",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VN",
            "VU",
            "WF",
            "WS",
            "XK",
            "YE",
            "YT",
            "ZA",
            "ZM",
            "ZW",
            "ZZ",
          ]),
        ),
      })
      .optional(),
    shipping_options: z
      .array(
        z.object({
          shipping_rate: z.coerce.string().optional(),
          shipping_rate_data: z
            .object({
              delivery_estimate: z
                .object({
                  maximum: z
                    .object({
                      unit: z.enum([
                        "business_day",
                        "day",
                        "hour",
                        "month",
                        "week",
                      ]),
                      value: z.coerce.number(),
                    })
                    .optional(),
                  minimum: z
                    .object({
                      unit: z.enum([
                        "business_day",
                        "day",
                        "hour",
                        "month",
                        "week",
                      ]),
                      value: z.coerce.number(),
                    })
                    .optional(),
                })
                .optional(),
              display_name: z.coerce.string(),
              fixed_amount: z
                .object({
                  amount: z.coerce.number(),
                  currency: z.coerce.string(),
                  currency_options: z.object({}).optional(),
                })
                .optional(),
              metadata: z.object({}).optional(),
              tax_behavior: z
                .enum(["exclusive", "inclusive", "unspecified"])
                .optional(),
              tax_code: z.coerce.string().optional(),
              type: z.enum(["fixed_amount"]).optional(),
            })
            .optional(),
        }),
      )
      .optional(),
    submit_type: z.enum(["auto", "book", "donate", "pay"]).optional(),
    subscription_data: z
      .object({
        application_fee_percent: z.coerce.number().optional(),
        billing_cycle_anchor: z.coerce.number().optional(),
        default_tax_rates: z.array(z.coerce.string()).optional(),
        description: z.coerce.string().optional(),
        metadata: z.object({}).optional(),
        on_behalf_of: z.coerce.string().optional(),
        proration_behavior: z.enum(["create_prorations", "none"]).optional(),
        transfer_data: z
          .object({
            amount_percent: z.coerce.number().optional(),
            destination: z.coerce.string(),
          })
          .optional(),
        trial_end: z.coerce.number().optional(),
        trial_period_days: z.coerce.number().optional(),
        trial_settings: z
          .object({
            end_behavior: z.object({
              missing_payment_method: z.enum([
                "cancel",
                "create_invoice",
                "pause",
              ]),
            }),
          })
          .optional(),
      })
      .optional(),
    success_url: z.coerce.string(),
    tax_id_collection: z.object({ enabled: z.coerce.boolean() }).optional(),
  })

  const postCheckoutSessionsResponseValidator = responseValidationFactory(
    [["200", s_checkout_session]],
    s_error,
  )

  router.post(
    "postCheckoutSessions",
    "/v1/checkout/sessions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postCheckoutSessionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postCheckoutSessions(
        input,
        ctx,
      )

      ctx.body = postCheckoutSessionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCheckoutSessionsSessionParamSchema = z.object({
    session: z.coerce.string(),
  })

  const getCheckoutSessionsSessionQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCheckoutSessionsSessionBodySchema = z.object({}).optional()

  const getCheckoutSessionsSessionResponseValidator = responseValidationFactory(
    [["200", s_checkout_session]],
    s_error,
  )

  router.get(
    "getCheckoutSessionsSession",
    "/v1/checkout/sessions/:session",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCheckoutSessionsSessionParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCheckoutSessionsSessionQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCheckoutSessionsSessionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getCheckoutSessionsSession(
        input,
        ctx,
      )

      ctx.body = getCheckoutSessionsSessionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCheckoutSessionsSessionExpireParamSchema = z.object({
    session: z.coerce.string(),
  })

  const postCheckoutSessionsSessionExpireBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postCheckoutSessionsSessionExpireResponseValidator =
    responseValidationFactory([["200", s_checkout_session]], s_error)

  router.post(
    "postCheckoutSessionsSessionExpire",
    "/v1/checkout/sessions/:session/expire",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCheckoutSessionsSessionExpireParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCheckoutSessionsSessionExpireBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCheckoutSessionsSessionExpire(input, ctx)

      ctx.body = postCheckoutSessionsSessionExpireResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getCheckoutSessionsSessionLineItemsParamSchema = z.object({
    session: z.coerce.string(),
  })

  const getCheckoutSessionsSessionLineItemsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCheckoutSessionsSessionLineItemsBodySchema = z.object({}).optional()

  const getCheckoutSessionsSessionLineItemsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_item)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getCheckoutSessionsSessionLineItems",
    "/v1/checkout/sessions/:session/line_items",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCheckoutSessionsSessionLineItemsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCheckoutSessionsSessionLineItemsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCheckoutSessionsSessionLineItemsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCheckoutSessionsSessionLineItems(input, ctx)

      ctx.body = getCheckoutSessionsSessionLineItemsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getCountrySpecsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCountrySpecsBodySchema = z.object({}).optional()

  const getCountrySpecsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_country_spec),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getCountrySpecs", "/v1/country_specs", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getCountrySpecsQuerySchema, ctx.query),
      body: parseRequestInput(getCountrySpecsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getCountrySpecs(input, ctx)

    ctx.body = getCountrySpecsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getCountrySpecsCountryParamSchema = z.object({
    country: z.coerce.string(),
  })

  const getCountrySpecsCountryQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCountrySpecsCountryBodySchema = z.object({}).optional()

  const getCountrySpecsCountryResponseValidator = responseValidationFactory(
    [["200", s_country_spec]],
    s_error,
  )

  router.get(
    "getCountrySpecsCountry",
    "/v1/country_specs/:country",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCountrySpecsCountryParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(getCountrySpecsCountryQuerySchema, ctx.query),
        body: parseRequestInput(
          getCountrySpecsCountryBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getCountrySpecsCountry(
        input,
        ctx,
      )

      ctx.body = getCountrySpecsCountryResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCouponsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCouponsBodySchema = z.object({}).optional()

  const getCouponsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_coupon),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getCoupons", "/v1/coupons", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getCouponsQuerySchema, ctx.query),
      body: parseRequestInput(getCouponsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getCoupons(input, ctx)

    ctx.body = getCouponsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postCouponsBodySchema = z
    .object({
      amount_off: z.coerce.number().optional(),
      applies_to: z
        .object({ products: z.array(z.coerce.string()).optional() })
        .optional(),
      currency: z.coerce.string().optional(),
      currency_options: z.object({}).optional(),
      duration: z.enum(["forever", "once", "repeating"]).optional(),
      duration_in_months: z.coerce.number().optional(),
      expand: z.array(z.coerce.string()).optional(),
      id: z.coerce.string().optional(),
      max_redemptions: z.coerce.number().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      name: z.coerce.string().optional(),
      percent_off: z.coerce.number().optional(),
      redeem_by: z.coerce.number().optional(),
    })
    .optional()

  const postCouponsResponseValidator = responseValidationFactory(
    [["200", s_coupon]],
    s_error,
  )

  router.post("postCoupons", "/v1/coupons", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postCouponsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postCoupons(input, ctx)

    ctx.body = postCouponsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const deleteCouponsCouponParamSchema = z.object({ coupon: z.coerce.string() })

  const deleteCouponsCouponBodySchema = z.object({}).optional()

  const deleteCouponsCouponResponseValidator = responseValidationFactory(
    [["200", s_deleted_coupon]],
    s_error,
  )

  router.delete(
    "deleteCouponsCoupon",
    "/v1/coupons/:coupon",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(deleteCouponsCouponParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          deleteCouponsCouponBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.deleteCouponsCoupon(
        input,
        ctx,
      )

      ctx.body = deleteCouponsCouponResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCouponsCouponParamSchema = z.object({ coupon: z.coerce.string() })

  const getCouponsCouponQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCouponsCouponBodySchema = z.object({}).optional()

  const getCouponsCouponResponseValidator = responseValidationFactory(
    [["200", s_coupon]],
    s_error,
  )

  router.get("getCouponsCoupon", "/v1/coupons/:coupon", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getCouponsCouponParamSchema, ctx.params),
      query: parseRequestInput(getCouponsCouponQuerySchema, ctx.query),
      body: parseRequestInput(getCouponsCouponBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getCouponsCoupon(input, ctx)

    ctx.body = getCouponsCouponResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postCouponsCouponParamSchema = z.object({ coupon: z.coerce.string() })

  const postCouponsCouponBodySchema = z
    .object({
      currency_options: z.object({}).optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      name: z.coerce.string().optional(),
    })
    .optional()

  const postCouponsCouponResponseValidator = responseValidationFactory(
    [["200", s_coupon]],
    s_error,
  )

  router.post("postCouponsCoupon", "/v1/coupons/:coupon", async (ctx, next) => {
    const input = {
      params: parseRequestInput(postCouponsCouponParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(postCouponsCouponBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postCouponsCoupon(input, ctx)

    ctx.body = postCouponsCouponResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getCreditNotesQuerySchema = z.object({
    customer: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    invoice: z.coerce.string().optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCreditNotesBodySchema = z.object({}).optional()

  const getCreditNotesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_credit_note)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getCreditNotes", "/v1/credit_notes", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getCreditNotesQuerySchema, ctx.query),
      body: parseRequestInput(getCreditNotesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getCreditNotes(input, ctx)

    ctx.body = getCreditNotesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postCreditNotesBodySchema = z.object({
    amount: z.coerce.number().optional(),
    credit_amount: z.coerce.number().optional(),
    effective_at: z.coerce.number().optional(),
    expand: z.array(z.coerce.string()).optional(),
    invoice: z.coerce.string(),
    lines: z
      .array(
        z.object({
          amount: z.coerce.number().optional(),
          description: z.coerce.string().optional(),
          invoice_line_item: z.coerce.string().optional(),
          quantity: z.coerce.number().optional(),
          tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          type: z.enum(["custom_line_item", "invoice_line_item"]),
          unit_amount: z.coerce.number().optional(),
          unit_amount_decimal: z.coerce.string().optional(),
        }),
      )
      .optional(),
    memo: z.coerce.string().optional(),
    metadata: z.object({}).optional(),
    out_of_band_amount: z.coerce.number().optional(),
    reason: z
      .enum([
        "duplicate",
        "fraudulent",
        "order_change",
        "product_unsatisfactory",
      ])
      .optional(),
    refund: z.coerce.string().optional(),
    refund_amount: z.coerce.number().optional(),
    shipping_cost: z
      .object({ shipping_rate: z.coerce.string().optional() })
      .optional(),
  })

  const postCreditNotesResponseValidator = responseValidationFactory(
    [["200", s_credit_note]],
    s_error,
  )

  router.post("postCreditNotes", "/v1/credit_notes", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postCreditNotesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postCreditNotes(input, ctx)

    ctx.body = postCreditNotesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getCreditNotesPreviewQuerySchema = z.object({
    amount: z.coerce.number().optional(),
    credit_amount: z.coerce.number().optional(),
    effective_at: z.coerce.number().optional(),
    expand: z.array(z.coerce.string()).optional(),
    invoice: z.coerce.string(),
    lines: z
      .array(
        z.object({
          amount: z.coerce.number().optional(),
          description: z.coerce.string().optional(),
          invoice_line_item: z.coerce.string().optional(),
          quantity: z.coerce.number().optional(),
          tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          type: z.enum(["custom_line_item", "invoice_line_item"]),
          unit_amount: z.coerce.number().optional(),
          unit_amount_decimal: z.coerce.string().optional(),
        }),
      )
      .optional(),
    memo: z.coerce.string().optional(),
    metadata: z.object({}).optional(),
    out_of_band_amount: z.coerce.number().optional(),
    reason: z
      .enum([
        "duplicate",
        "fraudulent",
        "order_change",
        "product_unsatisfactory",
      ])
      .optional(),
    refund: z.coerce.string().optional(),
    refund_amount: z.coerce.number().optional(),
    shipping_cost: z
      .object({ shipping_rate: z.coerce.string().optional() })
      .optional(),
  })

  const getCreditNotesPreviewBodySchema = z.object({}).optional()

  const getCreditNotesPreviewResponseValidator = responseValidationFactory(
    [["200", s_credit_note]],
    s_error,
  )

  router.get(
    "getCreditNotesPreview",
    "/v1/credit_notes/preview",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getCreditNotesPreviewQuerySchema, ctx.query),
        body: parseRequestInput(
          getCreditNotesPreviewBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getCreditNotesPreview(
        input,
        ctx,
      )

      ctx.body = getCreditNotesPreviewResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCreditNotesPreviewLinesQuerySchema = z.object({
    amount: z.coerce.number().optional(),
    credit_amount: z.coerce.number().optional(),
    effective_at: z.coerce.number().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    invoice: z.coerce.string(),
    limit: z.coerce.number().optional(),
    lines: z
      .array(
        z.object({
          amount: z.coerce.number().optional(),
          description: z.coerce.string().optional(),
          invoice_line_item: z.coerce.string().optional(),
          quantity: z.coerce.number().optional(),
          tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          type: z.enum(["custom_line_item", "invoice_line_item"]),
          unit_amount: z.coerce.number().optional(),
          unit_amount_decimal: z.coerce.string().optional(),
        }),
      )
      .optional(),
    memo: z.coerce.string().optional(),
    metadata: z.object({}).optional(),
    out_of_band_amount: z.coerce.number().optional(),
    reason: z
      .enum([
        "duplicate",
        "fraudulent",
        "order_change",
        "product_unsatisfactory",
      ])
      .optional(),
    refund: z.coerce.string().optional(),
    refund_amount: z.coerce.number().optional(),
    shipping_cost: z
      .object({ shipping_rate: z.coerce.string().optional() })
      .optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCreditNotesPreviewLinesBodySchema = z.object({}).optional()

  const getCreditNotesPreviewLinesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_credit_note_line_item)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getCreditNotesPreviewLines",
    "/v1/credit_notes/preview/lines",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getCreditNotesPreviewLinesQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCreditNotesPreviewLinesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getCreditNotesPreviewLines(
        input,
        ctx,
      )

      ctx.body = getCreditNotesPreviewLinesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCreditNotesCreditNoteLinesParamSchema = z.object({
    credit_note: z.coerce.string(),
  })

  const getCreditNotesCreditNoteLinesQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCreditNotesCreditNoteLinesBodySchema = z.object({}).optional()

  const getCreditNotesCreditNoteLinesResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_credit_note_line_item)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getCreditNotesCreditNoteLines",
    "/v1/credit_notes/:creditNote/lines",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCreditNotesCreditNoteLinesParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCreditNotesCreditNoteLinesQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCreditNotesCreditNoteLinesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCreditNotesCreditNoteLines(input, ctx)

      ctx.body = getCreditNotesCreditNoteLinesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCreditNotesIdParamSchema = z.object({ id: z.coerce.string() })

  const getCreditNotesIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCreditNotesIdBodySchema = z.object({}).optional()

  const getCreditNotesIdResponseValidator = responseValidationFactory(
    [["200", s_credit_note]],
    s_error,
  )

  router.get("getCreditNotesId", "/v1/credit_notes/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getCreditNotesIdParamSchema, ctx.params),
      query: parseRequestInput(getCreditNotesIdQuerySchema, ctx.query),
      body: parseRequestInput(getCreditNotesIdBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getCreditNotesId(input, ctx)

    ctx.body = getCreditNotesIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postCreditNotesIdParamSchema = z.object({ id: z.coerce.string() })

  const postCreditNotesIdBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      memo: z.coerce.string().optional(),
      metadata: z.object({}).optional(),
    })
    .optional()

  const postCreditNotesIdResponseValidator = responseValidationFactory(
    [["200", s_credit_note]],
    s_error,
  )

  router.post(
    "postCreditNotesId",
    "/v1/credit_notes/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postCreditNotesIdParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(postCreditNotesIdBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.postCreditNotesId(
        input,
        ctx,
      )

      ctx.body = postCreditNotesIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCreditNotesIdVoidParamSchema = z.object({ id: z.coerce.string() })

  const postCreditNotesIdVoidBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postCreditNotesIdVoidResponseValidator = responseValidationFactory(
    [["200", s_credit_note]],
    s_error,
  )

  router.post(
    "postCreditNotesIdVoid",
    "/v1/credit_notes/:id/void",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postCreditNotesIdVoidParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          postCreditNotesIdVoidBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postCreditNotesIdVoid(
        input,
        ctx,
      )

      ctx.body = postCreditNotesIdVoidResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCustomersQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    email: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    test_clock: z.coerce.string().optional(),
  })

  const getCustomersBodySchema = z.object({}).optional()

  const getCustomersResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_customer)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getCustomers", "/v1/customers", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getCustomersQuerySchema, ctx.query),
      body: parseRequestInput(getCustomersBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getCustomers(input, ctx)

    ctx.body = getCustomersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postCustomersBodySchema = z
    .object({
      address: z.union([
        z.object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        }),
        z.enum([""]),
      ]),
      balance: z.coerce.number().optional(),
      cash_balance: z
        .object({
          settings: z
            .object({
              reconciliation_mode: z
                .enum(["automatic", "manual", "merchant_default"])
                .optional(),
            })
            .optional(),
        })
        .optional(),
      coupon: z.coerce.string().optional(),
      description: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      invoice_prefix: z.coerce.string().optional(),
      invoice_settings: z
        .object({
          custom_fields: z.union([
            z.array(
              z.object({ name: z.coerce.string(), value: z.coerce.string() }),
            ),
            z.enum([""]),
          ]),
          default_payment_method: z.coerce.string().optional(),
          footer: z.coerce.string().optional(),
          rendering_options: z.union([
            z.object({
              amount_tax_display: z
                .enum(["", "exclude_tax", "include_inclusive_tax"])
                .optional(),
            }),
            z.enum([""]),
          ]),
        })
        .optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      name: z.coerce.string().optional(),
      next_invoice_sequence: z.coerce.number().optional(),
      payment_method: z.coerce.string().optional(),
      phone: z.coerce.string().optional(),
      preferred_locales: z.array(z.coerce.string()).optional(),
      promotion_code: z.coerce.string().optional(),
      shipping: z.union([
        z.object({
          address: z.object({
            city: z.coerce.string().optional(),
            country: z.coerce.string().optional(),
            line1: z.coerce.string().optional(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string().optional(),
            state: z.coerce.string().optional(),
          }),
          name: z.coerce.string(),
          phone: z.coerce.string().optional(),
        }),
        z.enum([""]),
      ]),
      source: z.coerce.string().optional(),
      tax: z
        .object({ ip_address: z.union([z.coerce.string(), z.enum([""])]) })
        .optional(),
      tax_exempt: z.enum(["", "exempt", "none", "reverse"]).optional(),
      tax_id_data: z
        .array(
          z.object({
            type: z.enum([
              "ad_nrt",
              "ae_trn",
              "ar_cuit",
              "au_abn",
              "au_arn",
              "bg_uic",
              "bo_tin",
              "br_cnpj",
              "br_cpf",
              "ca_bn",
              "ca_gst_hst",
              "ca_pst_bc",
              "ca_pst_mb",
              "ca_pst_sk",
              "ca_qst",
              "ch_vat",
              "cl_tin",
              "cn_tin",
              "co_nit",
              "cr_tin",
              "do_rcn",
              "ec_ruc",
              "eg_tin",
              "es_cif",
              "eu_oss_vat",
              "eu_vat",
              "gb_vat",
              "ge_vat",
              "hk_br",
              "hu_tin",
              "id_npwp",
              "il_vat",
              "in_gst",
              "is_vat",
              "jp_cn",
              "jp_rn",
              "jp_trn",
              "ke_pin",
              "kr_brn",
              "li_uid",
              "mx_rfc",
              "my_frp",
              "my_itn",
              "my_sst",
              "no_vat",
              "nz_gst",
              "pe_ruc",
              "ph_tin",
              "ro_tin",
              "rs_pib",
              "ru_inn",
              "ru_kpp",
              "sa_vat",
              "sg_gst",
              "sg_uen",
              "si_tin",
              "sv_nit",
              "th_vat",
              "tr_tin",
              "tw_vat",
              "ua_vat",
              "us_ein",
              "uy_ruc",
              "ve_rif",
              "vn_tin",
              "za_vat",
            ]),
            value: z.coerce.string(),
          }),
        )
        .optional(),
      test_clock: z.coerce.string().optional(),
    })
    .optional()

  const postCustomersResponseValidator = responseValidationFactory(
    [["200", s_customer]],
    s_error,
  )

  router.post("postCustomers", "/v1/customers", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postCustomersBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postCustomers(input, ctx)

    ctx.body = postCustomersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getCustomersSearchQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    page: z.coerce.string().optional(),
    query: z.coerce.string(),
  })

  const getCustomersSearchBodySchema = z.object({}).optional()

  const getCustomersSearchResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_customer)),
          has_more: z.coerce.boolean(),
          next_page: z.coerce.string().optional().nullable(),
          object: z.enum(["search_result"]),
          total_count: z.coerce.number().optional(),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getCustomersSearch",
    "/v1/customers/search",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getCustomersSearchQuerySchema, ctx.query),
        body: parseRequestInput(getCustomersSearchBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getCustomersSearch(
        input,
        ctx,
      )

      ctx.body = getCustomersSearchResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteCustomersCustomerParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const deleteCustomersCustomerBodySchema = z.object({}).optional()

  const deleteCustomersCustomerResponseValidator = responseValidationFactory(
    [["200", s_deleted_customer]],
    s_error,
  )

  router.delete(
    "deleteCustomersCustomer",
    "/v1/customers/:customer",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteCustomersCustomerParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteCustomersCustomerBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.deleteCustomersCustomer(
        input,
        ctx,
      )

      ctx.body = deleteCustomersCustomerResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const getCustomersCustomerQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCustomersCustomerBodySchema = z.object({}).optional()

  const getCustomersCustomerResponseValidator = responseValidationFactory(
    [["200", z.union([z.lazy(() => s_customer), s_deleted_customer])]],
    s_error,
  )

  router.get(
    "getCustomersCustomer",
    "/v1/customers/:customer",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getCustomersCustomerParamSchema, ctx.params),
        query: parseRequestInput(getCustomersCustomerQuerySchema, ctx.query),
        body: parseRequestInput(
          getCustomersCustomerBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getCustomersCustomer(
        input,
        ctx,
      )

      ctx.body = getCustomersCustomerResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const postCustomersCustomerBodySchema = z
    .object({
      address: z.union([
        z.object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        }),
        z.enum([""]),
      ]),
      balance: z.coerce.number().optional(),
      bank_account: z.union([
        z.object({
          account_holder_name: z.coerce.string().optional(),
          account_holder_type: z.enum(["company", "individual"]).optional(),
          account_number: z.coerce.string(),
          country: z.coerce.string(),
          currency: z.coerce.string().optional(),
          object: z.enum(["bank_account"]).optional(),
          routing_number: z.coerce.string().optional(),
        }),
        z.coerce.string(),
      ]),
      card: z.union([
        z.object({
          address_city: z.coerce.string().optional(),
          address_country: z.coerce.string().optional(),
          address_line1: z.coerce.string().optional(),
          address_line2: z.coerce.string().optional(),
          address_state: z.coerce.string().optional(),
          address_zip: z.coerce.string().optional(),
          cvc: z.coerce.string().optional(),
          exp_month: z.coerce.number(),
          exp_year: z.coerce.number(),
          metadata: z.object({}).optional(),
          name: z.coerce.string().optional(),
          number: z.coerce.string(),
          object: z.enum(["card"]).optional(),
        }),
        z.coerce.string(),
      ]),
      cash_balance: z
        .object({
          settings: z
            .object({
              reconciliation_mode: z
                .enum(["automatic", "manual", "merchant_default"])
                .optional(),
            })
            .optional(),
        })
        .optional(),
      coupon: z.coerce.string().optional(),
      default_alipay_account: z.coerce.string().optional(),
      default_bank_account: z.coerce.string().optional(),
      default_card: z.coerce.string().optional(),
      default_source: z.coerce.string().optional(),
      description: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      invoice_prefix: z.coerce.string().optional(),
      invoice_settings: z
        .object({
          custom_fields: z.union([
            z.array(
              z.object({ name: z.coerce.string(), value: z.coerce.string() }),
            ),
            z.enum([""]),
          ]),
          default_payment_method: z.coerce.string().optional(),
          footer: z.coerce.string().optional(),
          rendering_options: z.union([
            z.object({
              amount_tax_display: z
                .enum(["", "exclude_tax", "include_inclusive_tax"])
                .optional(),
            }),
            z.enum([""]),
          ]),
        })
        .optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      name: z.coerce.string().optional(),
      next_invoice_sequence: z.coerce.number().optional(),
      phone: z.coerce.string().optional(),
      preferred_locales: z.array(z.coerce.string()).optional(),
      promotion_code: z.coerce.string().optional(),
      shipping: z.union([
        z.object({
          address: z.object({
            city: z.coerce.string().optional(),
            country: z.coerce.string().optional(),
            line1: z.coerce.string().optional(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string().optional(),
            state: z.coerce.string().optional(),
          }),
          name: z.coerce.string(),
          phone: z.coerce.string().optional(),
        }),
        z.enum([""]),
      ]),
      source: z.coerce.string().optional(),
      tax: z
        .object({ ip_address: z.union([z.coerce.string(), z.enum([""])]) })
        .optional(),
      tax_exempt: z.enum(["", "exempt", "none", "reverse"]).optional(),
    })
    .optional()

  const postCustomersCustomerResponseValidator = responseValidationFactory(
    [["200", s_customer]],
    s_error,
  )

  router.post(
    "postCustomersCustomer",
    "/v1/customers/:customer",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postCustomersCustomerParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postCustomersCustomer(
        input,
        ctx,
      )

      ctx.body = postCustomersCustomerResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerBalanceTransactionsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const getCustomersCustomerBalanceTransactionsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCustomersCustomerBalanceTransactionsBodySchema = z
    .object({})
    .optional()

  const getCustomersCustomerBalanceTransactionsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_customer_balance_transaction)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getCustomersCustomerBalanceTransactions",
    "/v1/customers/:customer/balance_transactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerBalanceTransactionsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerBalanceTransactionsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerBalanceTransactionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerBalanceTransactions(input, ctx)

      ctx.body = getCustomersCustomerBalanceTransactionsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerBalanceTransactionsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const postCustomersCustomerBalanceTransactionsBodySchema = z.object({
    amount: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.union([z.object({}), z.enum([""])]),
  })

  const postCustomersCustomerBalanceTransactionsResponseValidator =
    responseValidationFactory(
      [["200", s_customer_balance_transaction]],
      s_error,
    )

  router.post(
    "postCustomersCustomerBalanceTransactions",
    "/v1/customers/:customer/balance_transactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerBalanceTransactionsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerBalanceTransactionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerBalanceTransactions(
          input,
          ctx,
        )

      ctx.body = postCustomersCustomerBalanceTransactionsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerBalanceTransactionsTransactionParamSchema =
    z.object({ customer: z.coerce.string(), transaction: z.coerce.string() })

  const getCustomersCustomerBalanceTransactionsTransactionQuerySchema =
    z.object({ expand: z.array(z.coerce.string()).optional() })

  const getCustomersCustomerBalanceTransactionsTransactionBodySchema = z
    .object({})
    .optional()

  const getCustomersCustomerBalanceTransactionsTransactionResponseValidator =
    responseValidationFactory(
      [["200", s_customer_balance_transaction]],
      s_error,
    )

  router.get(
    "getCustomersCustomerBalanceTransactionsTransaction",
    "/v1/customers/:customer/balance_transactions/:transaction",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerBalanceTransactionsTransactionParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerBalanceTransactionsTransactionQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerBalanceTransactionsTransactionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerBalanceTransactionsTransaction(
          input,
          ctx,
        )

      ctx.body =
        getCustomersCustomerBalanceTransactionsTransactionResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerBalanceTransactionsTransactionParamSchema =
    z.object({ customer: z.coerce.string(), transaction: z.coerce.string() })

  const postCustomersCustomerBalanceTransactionsTransactionBodySchema = z
    .object({
      description: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postCustomersCustomerBalanceTransactionsTransactionResponseValidator =
    responseValidationFactory(
      [["200", s_customer_balance_transaction]],
      s_error,
    )

  router.post(
    "postCustomersCustomerBalanceTransactionsTransaction",
    "/v1/customers/:customer/balance_transactions/:transaction",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerBalanceTransactionsTransactionParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerBalanceTransactionsTransactionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerBalanceTransactionsTransaction(
          input,
          ctx,
        )

      ctx.body =
        postCustomersCustomerBalanceTransactionsTransactionResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerBankAccountsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const getCustomersCustomerBankAccountsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCustomersCustomerBankAccountsBodySchema = z.object({}).optional()

  const getCustomersCustomerBankAccountsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_bank_account)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getCustomersCustomerBankAccounts",
    "/v1/customers/:customer/bank_accounts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerBankAccountsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerBankAccountsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerBankAccountsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerBankAccounts(input, ctx)

      ctx.body = getCustomersCustomerBankAccountsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerBankAccountsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const postCustomersCustomerBankAccountsBodySchema = z
    .object({
      alipay_account: z.coerce.string().optional(),
      bank_account: z.union([
        z.object({
          account_holder_name: z.coerce.string().optional(),
          account_holder_type: z.enum(["company", "individual"]).optional(),
          account_number: z.coerce.string(),
          country: z.coerce.string(),
          currency: z.coerce.string().optional(),
          object: z.enum(["bank_account"]).optional(),
          routing_number: z.coerce.string().optional(),
        }),
        z.coerce.string(),
      ]),
      card: z.union([
        z.object({
          address_city: z.coerce.string().optional(),
          address_country: z.coerce.string().optional(),
          address_line1: z.coerce.string().optional(),
          address_line2: z.coerce.string().optional(),
          address_state: z.coerce.string().optional(),
          address_zip: z.coerce.string().optional(),
          cvc: z.coerce.string().optional(),
          exp_month: z.coerce.number(),
          exp_year: z.coerce.number(),
          metadata: z.object({}).optional(),
          name: z.coerce.string().optional(),
          number: z.coerce.string(),
          object: z.enum(["card"]).optional(),
        }),
        z.coerce.string(),
      ]),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.object({}).optional(),
      source: z.coerce.string().optional(),
    })
    .optional()

  const postCustomersCustomerBankAccountsResponseValidator =
    responseValidationFactory([["200", s_payment_source]], s_error)

  router.post(
    "postCustomersCustomerBankAccounts",
    "/v1/customers/:customer/bank_accounts",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerBankAccountsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerBankAccountsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerBankAccounts(input, ctx)

      ctx.body = postCustomersCustomerBankAccountsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const deleteCustomersCustomerBankAccountsIdParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const deleteCustomersCustomerBankAccountsIdBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const deleteCustomersCustomerBankAccountsIdResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.union([z.lazy(() => s_payment_source), s_deleted_payment_source]),
        ],
      ],
      s_error,
    )

  router.delete(
    "deleteCustomersCustomerBankAccountsId",
    "/v1/customers/:customer/bank_accounts/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteCustomersCustomerBankAccountsIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteCustomersCustomerBankAccountsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteCustomersCustomerBankAccountsId(input, ctx)

      ctx.body = deleteCustomersCustomerBankAccountsIdResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerBankAccountsIdParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const getCustomersCustomerBankAccountsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCustomersCustomerBankAccountsIdBodySchema = z.object({}).optional()

  const getCustomersCustomerBankAccountsIdResponseValidator =
    responseValidationFactory([["200", s_bank_account]], s_error)

  router.get(
    "getCustomersCustomerBankAccountsId",
    "/v1/customers/:customer/bank_accounts/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerBankAccountsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerBankAccountsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerBankAccountsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerBankAccountsId(input, ctx)

      ctx.body = getCustomersCustomerBankAccountsIdResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerBankAccountsIdParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const postCustomersCustomerBankAccountsIdBodySchema = z
    .object({
      account_holder_name: z.coerce.string().optional(),
      account_holder_type: z.enum(["company", "individual"]).optional(),
      address_city: z.coerce.string().optional(),
      address_country: z.coerce.string().optional(),
      address_line1: z.coerce.string().optional(),
      address_line2: z.coerce.string().optional(),
      address_state: z.coerce.string().optional(),
      address_zip: z.coerce.string().optional(),
      exp_month: z.coerce.string().optional(),
      exp_year: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      name: z.coerce.string().optional(),
      owner: z
        .object({
          address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          email: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          phone: z.coerce.string().optional(),
        })
        .optional(),
    })
    .optional()

  const postCustomersCustomerBankAccountsIdResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.union([
            z.lazy(() => s_card),
            z.lazy(() => s_bank_account),
            s_source,
          ]),
        ],
      ],
      s_error,
    )

  router.post(
    "postCustomersCustomerBankAccountsId",
    "/v1/customers/:customer/bank_accounts/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerBankAccountsIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerBankAccountsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerBankAccountsId(input, ctx)

      ctx.body = postCustomersCustomerBankAccountsIdResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerBankAccountsIdVerifyParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const postCustomersCustomerBankAccountsIdVerifyBodySchema = z
    .object({
      amounts: z.array(z.coerce.number()).optional(),
      expand: z.array(z.coerce.string()).optional(),
    })
    .optional()

  const postCustomersCustomerBankAccountsIdVerifyResponseValidator =
    responseValidationFactory([["200", s_bank_account]], s_error)

  router.post(
    "postCustomersCustomerBankAccountsIdVerify",
    "/v1/customers/:customer/bank_accounts/:id/verify",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerBankAccountsIdVerifyParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerBankAccountsIdVerifyBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerBankAccountsIdVerify(
          input,
          ctx,
        )

      ctx.body = postCustomersCustomerBankAccountsIdVerifyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerCardsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const getCustomersCustomerCardsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCustomersCustomerCardsBodySchema = z.object({}).optional()

  const getCustomersCustomerCardsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_card)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getCustomersCustomerCards",
    "/v1/customers/:customer/cards",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerCardsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerCardsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerCardsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getCustomersCustomerCards(
        input,
        ctx,
      )

      ctx.body = getCustomersCustomerCardsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerCardsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const postCustomersCustomerCardsBodySchema = z
    .object({
      alipay_account: z.coerce.string().optional(),
      bank_account: z.union([
        z.object({
          account_holder_name: z.coerce.string().optional(),
          account_holder_type: z.enum(["company", "individual"]).optional(),
          account_number: z.coerce.string(),
          country: z.coerce.string(),
          currency: z.coerce.string().optional(),
          object: z.enum(["bank_account"]).optional(),
          routing_number: z.coerce.string().optional(),
        }),
        z.coerce.string(),
      ]),
      card: z.union([
        z.object({
          address_city: z.coerce.string().optional(),
          address_country: z.coerce.string().optional(),
          address_line1: z.coerce.string().optional(),
          address_line2: z.coerce.string().optional(),
          address_state: z.coerce.string().optional(),
          address_zip: z.coerce.string().optional(),
          cvc: z.coerce.string().optional(),
          exp_month: z.coerce.number(),
          exp_year: z.coerce.number(),
          metadata: z.object({}).optional(),
          name: z.coerce.string().optional(),
          number: z.coerce.string(),
          object: z.enum(["card"]).optional(),
        }),
        z.coerce.string(),
      ]),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.object({}).optional(),
      source: z.coerce.string().optional(),
    })
    .optional()

  const postCustomersCustomerCardsResponseValidator = responseValidationFactory(
    [["200", s_payment_source]],
    s_error,
  )

  router.post(
    "postCustomersCustomerCards",
    "/v1/customers/:customer/cards",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerCardsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerCardsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postCustomersCustomerCards(
        input,
        ctx,
      )

      ctx.body = postCustomersCustomerCardsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteCustomersCustomerCardsIdParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const deleteCustomersCustomerCardsIdBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const deleteCustomersCustomerCardsIdResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.union([z.lazy(() => s_payment_source), s_deleted_payment_source]),
        ],
      ],
      s_error,
    )

  router.delete(
    "deleteCustomersCustomerCardsId",
    "/v1/customers/:customer/cards/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteCustomersCustomerCardsIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteCustomersCustomerCardsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteCustomersCustomerCardsId(input, ctx)

      ctx.body = deleteCustomersCustomerCardsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerCardsIdParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const getCustomersCustomerCardsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCustomersCustomerCardsIdBodySchema = z.object({}).optional()

  const getCustomersCustomerCardsIdResponseValidator =
    responseValidationFactory([["200", s_card]], s_error)

  router.get(
    "getCustomersCustomerCardsId",
    "/v1/customers/:customer/cards/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerCardsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerCardsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerCardsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getCustomersCustomerCardsId(
        input,
        ctx,
      )

      ctx.body = getCustomersCustomerCardsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerCardsIdParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const postCustomersCustomerCardsIdBodySchema = z
    .object({
      account_holder_name: z.coerce.string().optional(),
      account_holder_type: z.enum(["company", "individual"]).optional(),
      address_city: z.coerce.string().optional(),
      address_country: z.coerce.string().optional(),
      address_line1: z.coerce.string().optional(),
      address_line2: z.coerce.string().optional(),
      address_state: z.coerce.string().optional(),
      address_zip: z.coerce.string().optional(),
      exp_month: z.coerce.string().optional(),
      exp_year: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      name: z.coerce.string().optional(),
      owner: z
        .object({
          address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          email: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          phone: z.coerce.string().optional(),
        })
        .optional(),
    })
    .optional()

  const postCustomersCustomerCardsIdResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.union([
            z.lazy(() => s_card),
            z.lazy(() => s_bank_account),
            s_source,
          ]),
        ],
      ],
      s_error,
    )

  router.post(
    "postCustomersCustomerCardsId",
    "/v1/customers/:customer/cards/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerCardsIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerCardsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerCardsId(input, ctx)

      ctx.body = postCustomersCustomerCardsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerCashBalanceParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const getCustomersCustomerCashBalanceQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCustomersCustomerCashBalanceBodySchema = z.object({}).optional()

  const getCustomersCustomerCashBalanceResponseValidator =
    responseValidationFactory([["200", s_cash_balance]], s_error)

  router.get(
    "getCustomersCustomerCashBalance",
    "/v1/customers/:customer/cash_balance",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerCashBalanceParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerCashBalanceQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerCashBalanceBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerCashBalance(input, ctx)

      ctx.body = getCustomersCustomerCashBalanceResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerCashBalanceParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const postCustomersCustomerCashBalanceBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      settings: z
        .object({
          reconciliation_mode: z
            .enum(["automatic", "manual", "merchant_default"])
            .optional(),
        })
        .optional(),
    })
    .optional()

  const postCustomersCustomerCashBalanceResponseValidator =
    responseValidationFactory([["200", s_cash_balance]], s_error)

  router.post(
    "postCustomersCustomerCashBalance",
    "/v1/customers/:customer/cash_balance",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerCashBalanceParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerCashBalanceBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerCashBalance(input, ctx)

      ctx.body = postCustomersCustomerCashBalanceResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerCashBalanceTransactionsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const getCustomersCustomerCashBalanceTransactionsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCustomersCustomerCashBalanceTransactionsBodySchema = z
    .object({})
    .optional()

  const getCustomersCustomerCashBalanceTransactionsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_customer_cash_balance_transaction)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getCustomersCustomerCashBalanceTransactions",
    "/v1/customers/:customer/cash_balance_transactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerCashBalanceTransactionsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerCashBalanceTransactionsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerCashBalanceTransactionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerCashBalanceTransactions(
          input,
          ctx,
        )

      ctx.body = getCustomersCustomerCashBalanceTransactionsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerCashBalanceTransactionsTransactionParamSchema =
    z.object({ customer: z.coerce.string(), transaction: z.coerce.string() })

  const getCustomersCustomerCashBalanceTransactionsTransactionQuerySchema =
    z.object({ expand: z.array(z.coerce.string()).optional() })

  const getCustomersCustomerCashBalanceTransactionsTransactionBodySchema = z
    .object({})
    .optional()

  const getCustomersCustomerCashBalanceTransactionsTransactionResponseValidator =
    responseValidationFactory(
      [["200", s_customer_cash_balance_transaction]],
      s_error,
    )

  router.get(
    "getCustomersCustomerCashBalanceTransactionsTransaction",
    "/v1/customers/:customer/cash_balance_transactions/:transaction",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerCashBalanceTransactionsTransactionParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerCashBalanceTransactionsTransactionQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerCashBalanceTransactionsTransactionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerCashBalanceTransactionsTransaction(
          input,
          ctx,
        )

      ctx.body =
        getCustomersCustomerCashBalanceTransactionsTransactionResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const deleteCustomersCustomerDiscountParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const deleteCustomersCustomerDiscountBodySchema = z.object({}).optional()

  const deleteCustomersCustomerDiscountResponseValidator =
    responseValidationFactory([["200", s_deleted_discount]], s_error)

  router.delete(
    "deleteCustomersCustomerDiscount",
    "/v1/customers/:customer/discount",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteCustomersCustomerDiscountParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteCustomersCustomerDiscountBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteCustomersCustomerDiscount(input, ctx)

      ctx.body = deleteCustomersCustomerDiscountResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerDiscountParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const getCustomersCustomerDiscountQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCustomersCustomerDiscountBodySchema = z.object({}).optional()

  const getCustomersCustomerDiscountResponseValidator =
    responseValidationFactory([["200", s_discount]], s_error)

  router.get(
    "getCustomersCustomerDiscount",
    "/v1/customers/:customer/discount",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerDiscountParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerDiscountQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerDiscountBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerDiscount(input, ctx)

      ctx.body = getCustomersCustomerDiscountResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerFundingInstructionsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const postCustomersCustomerFundingInstructionsBodySchema = z.object({
    bank_transfer: z.object({
      eu_bank_transfer: z.object({ country: z.coerce.string() }).optional(),
      requested_address_types: z
        .array(z.enum(["iban", "sort_code", "spei", "zengin"]))
        .optional(),
      type: z.enum([
        "eu_bank_transfer",
        "gb_bank_transfer",
        "jp_bank_transfer",
        "mx_bank_transfer",
        "us_bank_transfer",
      ]),
    }),
    currency: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
    funding_type: z.enum(["bank_transfer"]),
  })

  const postCustomersCustomerFundingInstructionsResponseValidator =
    responseValidationFactory([["200", s_funding_instructions]], s_error)

  router.post(
    "postCustomersCustomerFundingInstructions",
    "/v1/customers/:customer/funding_instructions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerFundingInstructionsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerFundingInstructionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerFundingInstructions(
          input,
          ctx,
        )

      ctx.body = postCustomersCustomerFundingInstructionsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerPaymentMethodsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const getCustomersCustomerPaymentMethodsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    type: z
      .enum([
        "acss_debit",
        "affirm",
        "afterpay_clearpay",
        "alipay",
        "au_becs_debit",
        "bacs_debit",
        "bancontact",
        "blik",
        "boleto",
        "card",
        "cashapp",
        "customer_balance",
        "eps",
        "fpx",
        "giropay",
        "grabpay",
        "ideal",
        "klarna",
        "konbini",
        "link",
        "oxxo",
        "p24",
        "paynow",
        "paypal",
        "pix",
        "promptpay",
        "sepa_debit",
        "sofort",
        "us_bank_account",
        "wechat_pay",
        "zip",
      ])
      .optional(),
  })

  const getCustomersCustomerPaymentMethodsBodySchema = z.object({}).optional()

  const getCustomersCustomerPaymentMethodsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_payment_method)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getCustomersCustomerPaymentMethods",
    "/v1/customers/:customer/payment_methods",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerPaymentMethodsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerPaymentMethodsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerPaymentMethodsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerPaymentMethods(input, ctx)

      ctx.body = getCustomersCustomerPaymentMethodsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerPaymentMethodsPaymentMethodParamSchema = z.object({
    customer: z.coerce.string(),
    payment_method: z.coerce.string(),
  })

  const getCustomersCustomerPaymentMethodsPaymentMethodQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCustomersCustomerPaymentMethodsPaymentMethodBodySchema = z
    .object({})
    .optional()

  const getCustomersCustomerPaymentMethodsPaymentMethodResponseValidator =
    responseValidationFactory([["200", s_payment_method]], s_error)

  router.get(
    "getCustomersCustomerPaymentMethodsPaymentMethod",
    "/v1/customers/:customer/payment_methods/:paymentMethod",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerPaymentMethodsPaymentMethodParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerPaymentMethodsPaymentMethodQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerPaymentMethodsPaymentMethodBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerPaymentMethodsPaymentMethod(
          input,
          ctx,
        )

      ctx.body =
        getCustomersCustomerPaymentMethodsPaymentMethodResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerSourcesParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const getCustomersCustomerSourcesQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    object: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCustomersCustomerSourcesBodySchema = z.object({}).optional()

  const getCustomersCustomerSourcesResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(
              z.union([
                z.lazy(() => s_bank_account),
                z.lazy(() => s_card),
                s_source,
              ]),
            ),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getCustomersCustomerSources",
    "/v1/customers/:customer/sources",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerSourcesParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerSourcesQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerSourcesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getCustomersCustomerSources(
        input,
        ctx,
      )

      ctx.body = getCustomersCustomerSourcesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerSourcesParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const postCustomersCustomerSourcesBodySchema = z
    .object({
      alipay_account: z.coerce.string().optional(),
      bank_account: z.union([
        z.object({
          account_holder_name: z.coerce.string().optional(),
          account_holder_type: z.enum(["company", "individual"]).optional(),
          account_number: z.coerce.string(),
          country: z.coerce.string(),
          currency: z.coerce.string().optional(),
          object: z.enum(["bank_account"]).optional(),
          routing_number: z.coerce.string().optional(),
        }),
        z.coerce.string(),
      ]),
      card: z.union([
        z.object({
          address_city: z.coerce.string().optional(),
          address_country: z.coerce.string().optional(),
          address_line1: z.coerce.string().optional(),
          address_line2: z.coerce.string().optional(),
          address_state: z.coerce.string().optional(),
          address_zip: z.coerce.string().optional(),
          cvc: z.coerce.string().optional(),
          exp_month: z.coerce.number(),
          exp_year: z.coerce.number(),
          metadata: z.object({}).optional(),
          name: z.coerce.string().optional(),
          number: z.coerce.string(),
          object: z.enum(["card"]).optional(),
        }),
        z.coerce.string(),
      ]),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.object({}).optional(),
      source: z.coerce.string().optional(),
    })
    .optional()

  const postCustomersCustomerSourcesResponseValidator =
    responseValidationFactory([["200", s_payment_source]], s_error)

  router.post(
    "postCustomersCustomerSources",
    "/v1/customers/:customer/sources",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerSourcesParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerSourcesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerSources(input, ctx)

      ctx.body = postCustomersCustomerSourcesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteCustomersCustomerSourcesIdParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const deleteCustomersCustomerSourcesIdBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const deleteCustomersCustomerSourcesIdResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.union([z.lazy(() => s_payment_source), s_deleted_payment_source]),
        ],
      ],
      s_error,
    )

  router.delete(
    "deleteCustomersCustomerSourcesId",
    "/v1/customers/:customer/sources/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteCustomersCustomerSourcesIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteCustomersCustomerSourcesIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteCustomersCustomerSourcesId(input, ctx)

      ctx.body = deleteCustomersCustomerSourcesIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerSourcesIdParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const getCustomersCustomerSourcesIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCustomersCustomerSourcesIdBodySchema = z.object({}).optional()

  const getCustomersCustomerSourcesIdResponseValidator =
    responseValidationFactory([["200", s_payment_source]], s_error)

  router.get(
    "getCustomersCustomerSourcesId",
    "/v1/customers/:customer/sources/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerSourcesIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerSourcesIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerSourcesIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerSourcesId(input, ctx)

      ctx.body = getCustomersCustomerSourcesIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerSourcesIdParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const postCustomersCustomerSourcesIdBodySchema = z
    .object({
      account_holder_name: z.coerce.string().optional(),
      account_holder_type: z.enum(["company", "individual"]).optional(),
      address_city: z.coerce.string().optional(),
      address_country: z.coerce.string().optional(),
      address_line1: z.coerce.string().optional(),
      address_line2: z.coerce.string().optional(),
      address_state: z.coerce.string().optional(),
      address_zip: z.coerce.string().optional(),
      exp_month: z.coerce.string().optional(),
      exp_year: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      name: z.coerce.string().optional(),
      owner: z
        .object({
          address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          email: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          phone: z.coerce.string().optional(),
        })
        .optional(),
    })
    .optional()

  const postCustomersCustomerSourcesIdResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.union([
            z.lazy(() => s_card),
            z.lazy(() => s_bank_account),
            s_source,
          ]),
        ],
      ],
      s_error,
    )

  router.post(
    "postCustomersCustomerSourcesId",
    "/v1/customers/:customer/sources/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerSourcesIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerSourcesIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerSourcesId(input, ctx)

      ctx.body = postCustomersCustomerSourcesIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerSourcesIdVerifyParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const postCustomersCustomerSourcesIdVerifyBodySchema = z
    .object({
      amounts: z.array(z.coerce.number()).optional(),
      expand: z.array(z.coerce.string()).optional(),
    })
    .optional()

  const postCustomersCustomerSourcesIdVerifyResponseValidator =
    responseValidationFactory([["200", s_bank_account]], s_error)

  router.post(
    "postCustomersCustomerSourcesIdVerify",
    "/v1/customers/:customer/sources/:id/verify",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerSourcesIdVerifyParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerSourcesIdVerifyBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerSourcesIdVerify(input, ctx)

      ctx.body = postCustomersCustomerSourcesIdVerifyResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerSubscriptionsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const getCustomersCustomerSubscriptionsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCustomersCustomerSubscriptionsBodySchema = z.object({}).optional()

  const getCustomersCustomerSubscriptionsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_subscription)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getCustomersCustomerSubscriptions",
    "/v1/customers/:customer/subscriptions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerSubscriptionsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerSubscriptionsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerSubscriptionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerSubscriptions(input, ctx)

      ctx.body = getCustomersCustomerSubscriptionsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerSubscriptionsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const postCustomersCustomerSubscriptionsBodySchema = z
    .object({
      add_invoice_items: z
        .array(
          z.object({
            price: z.coerce.string().optional(),
            price_data: z
              .object({
                currency: z.coerce.string(),
                product: z.coerce.string(),
                tax_behavior: z
                  .enum(["exclusive", "inclusive", "unspecified"])
                  .optional(),
                unit_amount: z.coerce.number().optional(),
                unit_amount_decimal: z.coerce.string().optional(),
              })
              .optional(),
            quantity: z.coerce.number().optional(),
            tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          }),
        )
        .optional(),
      application_fee_percent: z.coerce.number().optional(),
      automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
      backdate_start_date: z.coerce.number().optional(),
      billing_cycle_anchor: z.coerce.number().optional(),
      billing_thresholds: z.union([
        z.object({
          amount_gte: z.coerce.number().optional(),
          reset_billing_cycle_anchor: z.coerce.boolean().optional(),
        }),
        z.enum([""]),
      ]),
      cancel_at: z.coerce.number().optional(),
      cancel_at_period_end: z.coerce.boolean().optional(),
      collection_method: z
        .enum(["charge_automatically", "send_invoice"])
        .optional(),
      coupon: z.coerce.string().optional(),
      currency: z.coerce.string().optional(),
      days_until_due: z.coerce.number().optional(),
      default_payment_method: z.coerce.string().optional(),
      default_source: z.coerce.string().optional(),
      default_tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
      expand: z.array(z.coerce.string()).optional(),
      items: z
        .array(
          z.object({
            billing_thresholds: z.union([
              z.object({ usage_gte: z.coerce.number() }),
              z.enum([""]),
            ]),
            metadata: z.object({}).optional(),
            price: z.coerce.string().optional(),
            price_data: z
              .object({
                currency: z.coerce.string(),
                product: z.coerce.string(),
                recurring: z.object({
                  interval: z.enum(["day", "month", "week", "year"]),
                  interval_count: z.coerce.number().optional(),
                }),
                tax_behavior: z
                  .enum(["exclusive", "inclusive", "unspecified"])
                  .optional(),
                unit_amount: z.coerce.number().optional(),
                unit_amount_decimal: z.coerce.string().optional(),
              })
              .optional(),
            quantity: z.coerce.number().optional(),
            tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          }),
        )
        .optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      off_session: z.coerce.boolean().optional(),
      payment_behavior: z
        .enum([
          "allow_incomplete",
          "default_incomplete",
          "error_if_incomplete",
          "pending_if_incomplete",
        ])
        .optional(),
      payment_settings: z
        .object({
          payment_method_options: z
            .object({
              acss_debit: z.union([
                z.object({
                  mandate_options: z
                    .object({
                      transaction_type: z
                        .enum(["business", "personal"])
                        .optional(),
                    })
                    .optional(),
                  verification_method: z
                    .enum(["automatic", "instant", "microdeposits"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              bancontact: z.union([
                z.object({
                  preferred_language: z
                    .enum(["de", "en", "fr", "nl"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              card: z.union([
                z.object({
                  mandate_options: z
                    .object({
                      amount: z.coerce.number().optional(),
                      amount_type: z.enum(["fixed", "maximum"]).optional(),
                      description: z.coerce.string().optional(),
                    })
                    .optional(),
                  network: z
                    .enum([
                      "amex",
                      "cartes_bancaires",
                      "diners",
                      "discover",
                      "eftpos_au",
                      "interac",
                      "jcb",
                      "mastercard",
                      "unionpay",
                      "unknown",
                      "visa",
                    ])
                    .optional(),
                  request_three_d_secure: z
                    .enum(["any", "automatic"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              customer_balance: z.union([
                z.object({
                  bank_transfer: z
                    .object({
                      eu_bank_transfer: z
                        .object({ country: z.coerce.string() })
                        .optional(),
                      type: z.coerce.string().optional(),
                    })
                    .optional(),
                  funding_type: z.coerce.string().optional(),
                }),
                z.enum([""]),
              ]),
              konbini: z.union([z.object({}), z.enum([""])]),
              us_bank_account: z.union([
                z.object({
                  financial_connections: z
                    .object({
                      permissions: z
                        .array(
                          z.enum([
                            "balances",
                            "ownership",
                            "payment_method",
                            "transactions",
                          ]),
                        )
                        .optional(),
                      prefetch: z.array(z.enum(["balances"])).optional(),
                    })
                    .optional(),
                  verification_method: z
                    .enum(["automatic", "instant", "microdeposits"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
            })
            .optional(),
          payment_method_types: z.union([
            z.array(
              z.enum([
                "ach_credit_transfer",
                "ach_debit",
                "acss_debit",
                "au_becs_debit",
                "bacs_debit",
                "bancontact",
                "boleto",
                "card",
                "cashapp",
                "customer_balance",
                "fpx",
                "giropay",
                "grabpay",
                "ideal",
                "konbini",
                "link",
                "paynow",
                "paypal",
                "promptpay",
                "sepa_debit",
                "sofort",
                "us_bank_account",
                "wechat_pay",
              ]),
            ),
            z.enum([""]),
          ]),
          save_default_payment_method: z
            .enum(["off", "on_subscription"])
            .optional(),
        })
        .optional(),
      pending_invoice_item_interval: z.union([
        z.object({
          interval: z.enum(["day", "month", "week", "year"]),
          interval_count: z.coerce.number().optional(),
        }),
        z.enum([""]),
      ]),
      promotion_code: z.coerce.string().optional(),
      proration_behavior: z
        .enum(["always_invoice", "create_prorations", "none"])
        .optional(),
      transfer_data: z
        .object({
          amount_percent: z.coerce.number().optional(),
          destination: z.coerce.string(),
        })
        .optional(),
      trial_end: z.union([z.enum(["now"]), z.coerce.number()]),
      trial_from_plan: z.coerce.boolean().optional(),
      trial_period_days: z.coerce.number().optional(),
      trial_settings: z
        .object({
          end_behavior: z.object({
            missing_payment_method: z.enum([
              "cancel",
              "create_invoice",
              "pause",
            ]),
          }),
        })
        .optional(),
    })
    .optional()

  const postCustomersCustomerSubscriptionsResponseValidator =
    responseValidationFactory([["200", s_subscription]], s_error)

  router.post(
    "postCustomersCustomerSubscriptions",
    "/v1/customers/:customer/subscriptions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerSubscriptionsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerSubscriptionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerSubscriptions(input, ctx)

      ctx.body = postCustomersCustomerSubscriptionsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema =
    z.object({
      customer: z.coerce.string(),
      subscription_exposed_id: z.coerce.string(),
    })

  const deleteCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      invoice_now: z.coerce.boolean().optional(),
      prorate: z.coerce.boolean().optional(),
    })
    .optional()

  const deleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponseValidator =
    responseValidationFactory([["200", s_subscription]], s_error)

  router.delete(
    "deleteCustomersCustomerSubscriptionsSubscriptionExposedId",
    "/v1/customers/:customer/subscriptions/:subscriptionExposedId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteCustomersCustomerSubscriptionsSubscriptionExposedId(
          input,
          ctx,
        )

      ctx.body =
        deleteCustomersCustomerSubscriptionsSubscriptionExposedIdResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema =
    z.object({
      customer: z.coerce.string(),
      subscription_exposed_id: z.coerce.string(),
    })

  const getCustomersCustomerSubscriptionsSubscriptionExposedIdQuerySchema =
    z.object({ expand: z.array(z.coerce.string()).optional() })

  const getCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema = z
    .object({})
    .optional()

  const getCustomersCustomerSubscriptionsSubscriptionExposedIdResponseValidator =
    responseValidationFactory([["200", s_subscription]], s_error)

  router.get(
    "getCustomersCustomerSubscriptionsSubscriptionExposedId",
    "/v1/customers/:customer/subscriptions/:subscriptionExposedId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerSubscriptionsSubscriptionExposedIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerSubscriptionsSubscriptionExposedId(
          input,
          ctx,
        )

      ctx.body =
        getCustomersCustomerSubscriptionsSubscriptionExposedIdResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema =
    z.object({
      customer: z.coerce.string(),
      subscription_exposed_id: z.coerce.string(),
    })

  const postCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema = z
    .object({
      add_invoice_items: z
        .array(
          z.object({
            price: z.coerce.string().optional(),
            price_data: z
              .object({
                currency: z.coerce.string(),
                product: z.coerce.string(),
                tax_behavior: z
                  .enum(["exclusive", "inclusive", "unspecified"])
                  .optional(),
                unit_amount: z.coerce.number().optional(),
                unit_amount_decimal: z.coerce.string().optional(),
              })
              .optional(),
            quantity: z.coerce.number().optional(),
            tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          }),
        )
        .optional(),
      application_fee_percent: z.coerce.number().optional(),
      automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
      billing_cycle_anchor: z.enum(["now", "unchanged"]).optional(),
      billing_thresholds: z.union([
        z.object({
          amount_gte: z.coerce.number().optional(),
          reset_billing_cycle_anchor: z.coerce.boolean().optional(),
        }),
        z.enum([""]),
      ]),
      cancel_at: z.union([z.coerce.number(), z.enum([""])]),
      cancel_at_period_end: z.coerce.boolean().optional(),
      cancellation_details: z
        .object({
          comment: z.union([z.coerce.string(), z.enum([""])]),
          feedback: z
            .enum([
              "",
              "customer_service",
              "low_quality",
              "missing_features",
              "other",
              "switched_service",
              "too_complex",
              "too_expensive",
              "unused",
            ])
            .optional(),
        })
        .optional(),
      collection_method: z
        .enum(["charge_automatically", "send_invoice"])
        .optional(),
      coupon: z.coerce.string().optional(),
      days_until_due: z.coerce.number().optional(),
      default_payment_method: z.coerce.string().optional(),
      default_source: z.union([z.coerce.string(), z.enum([""])]),
      default_tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
      expand: z.array(z.coerce.string()).optional(),
      items: z
        .array(
          z.object({
            billing_thresholds: z.union([
              z.object({ usage_gte: z.coerce.number() }),
              z.enum([""]),
            ]),
            clear_usage: z.coerce.boolean().optional(),
            deleted: z.coerce.boolean().optional(),
            id: z.coerce.string().optional(),
            metadata: z.union([z.object({}), z.enum([""])]),
            price: z.coerce.string().optional(),
            price_data: z
              .object({
                currency: z.coerce.string(),
                product: z.coerce.string(),
                recurring: z.object({
                  interval: z.enum(["day", "month", "week", "year"]),
                  interval_count: z.coerce.number().optional(),
                }),
                tax_behavior: z
                  .enum(["exclusive", "inclusive", "unspecified"])
                  .optional(),
                unit_amount: z.coerce.number().optional(),
                unit_amount_decimal: z.coerce.string().optional(),
              })
              .optional(),
            quantity: z.coerce.number().optional(),
            tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          }),
        )
        .optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      off_session: z.coerce.boolean().optional(),
      pause_collection: z.union([
        z.object({
          behavior: z.enum(["keep_as_draft", "mark_uncollectible", "void"]),
          resumes_at: z.coerce.number().optional(),
        }),
        z.enum([""]),
      ]),
      payment_behavior: z
        .enum([
          "allow_incomplete",
          "default_incomplete",
          "error_if_incomplete",
          "pending_if_incomplete",
        ])
        .optional(),
      payment_settings: z
        .object({
          payment_method_options: z
            .object({
              acss_debit: z.union([
                z.object({
                  mandate_options: z
                    .object({
                      transaction_type: z
                        .enum(["business", "personal"])
                        .optional(),
                    })
                    .optional(),
                  verification_method: z
                    .enum(["automatic", "instant", "microdeposits"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              bancontact: z.union([
                z.object({
                  preferred_language: z
                    .enum(["de", "en", "fr", "nl"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              card: z.union([
                z.object({
                  mandate_options: z
                    .object({
                      amount: z.coerce.number().optional(),
                      amount_type: z.enum(["fixed", "maximum"]).optional(),
                      description: z.coerce.string().optional(),
                    })
                    .optional(),
                  network: z
                    .enum([
                      "amex",
                      "cartes_bancaires",
                      "diners",
                      "discover",
                      "eftpos_au",
                      "interac",
                      "jcb",
                      "mastercard",
                      "unionpay",
                      "unknown",
                      "visa",
                    ])
                    .optional(),
                  request_three_d_secure: z
                    .enum(["any", "automatic"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              customer_balance: z.union([
                z.object({
                  bank_transfer: z
                    .object({
                      eu_bank_transfer: z
                        .object({ country: z.coerce.string() })
                        .optional(),
                      type: z.coerce.string().optional(),
                    })
                    .optional(),
                  funding_type: z.coerce.string().optional(),
                }),
                z.enum([""]),
              ]),
              konbini: z.union([z.object({}), z.enum([""])]),
              us_bank_account: z.union([
                z.object({
                  financial_connections: z
                    .object({
                      permissions: z
                        .array(
                          z.enum([
                            "balances",
                            "ownership",
                            "payment_method",
                            "transactions",
                          ]),
                        )
                        .optional(),
                      prefetch: z.array(z.enum(["balances"])).optional(),
                    })
                    .optional(),
                  verification_method: z
                    .enum(["automatic", "instant", "microdeposits"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
            })
            .optional(),
          payment_method_types: z.union([
            z.array(
              z.enum([
                "ach_credit_transfer",
                "ach_debit",
                "acss_debit",
                "au_becs_debit",
                "bacs_debit",
                "bancontact",
                "boleto",
                "card",
                "cashapp",
                "customer_balance",
                "fpx",
                "giropay",
                "grabpay",
                "ideal",
                "konbini",
                "link",
                "paynow",
                "paypal",
                "promptpay",
                "sepa_debit",
                "sofort",
                "us_bank_account",
                "wechat_pay",
              ]),
            ),
            z.enum([""]),
          ]),
          save_default_payment_method: z
            .enum(["off", "on_subscription"])
            .optional(),
        })
        .optional(),
      pending_invoice_item_interval: z.union([
        z.object({
          interval: z.enum(["day", "month", "week", "year"]),
          interval_count: z.coerce.number().optional(),
        }),
        z.enum([""]),
      ]),
      promotion_code: z.coerce.string().optional(),
      proration_behavior: z
        .enum(["always_invoice", "create_prorations", "none"])
        .optional(),
      proration_date: z.coerce.number().optional(),
      transfer_data: z.union([
        z.object({
          amount_percent: z.coerce.number().optional(),
          destination: z.coerce.string(),
        }),
        z.enum([""]),
      ]),
      trial_end: z.union([z.enum(["now"]), z.coerce.number()]),
      trial_from_plan: z.coerce.boolean().optional(),
      trial_settings: z
        .object({
          end_behavior: z.object({
            missing_payment_method: z.enum([
              "cancel",
              "create_invoice",
              "pause",
            ]),
          }),
        })
        .optional(),
    })
    .optional()

  const postCustomersCustomerSubscriptionsSubscriptionExposedIdResponseValidator =
    responseValidationFactory([["200", s_subscription]], s_error)

  router.post(
    "postCustomersCustomerSubscriptionsSubscriptionExposedId",
    "/v1/customers/:customer/subscriptions/:subscriptionExposedId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerSubscriptionsSubscriptionExposedIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerSubscriptionsSubscriptionExposedIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postCustomersCustomerSubscriptionsSubscriptionExposedId(
          input,
          ctx,
        )

      ctx.body =
        postCustomersCustomerSubscriptionsSubscriptionExposedIdResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamSchema =
    z.object({
      customer: z.coerce.string(),
      subscription_exposed_id: z.coerce.string(),
    })

  const deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountBodySchema =
    z.object({}).optional()

  const deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponseValidator =
    responseValidationFactory([["200", s_deleted_discount]], s_error)

  router.delete(
    "deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount",
    "/v1/customers/:customer/subscriptions/:subscriptionExposedId/discount",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(
          input,
          ctx,
        )

      ctx.body =
        deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamSchema =
    z.object({
      customer: z.coerce.string(),
      subscription_exposed_id: z.coerce.string(),
    })

  const getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountQuerySchema =
    z.object({ expand: z.array(z.coerce.string()).optional() })

  const getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountBodySchema =
    z.object({}).optional()

  const getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponseValidator =
    responseValidationFactory([["200", s_discount]], s_error)

  router.get(
    "getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount",
    "/v1/customers/:customer/subscriptions/:subscriptionExposedId/discount",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount(
          input,
          ctx,
        )

      ctx.body =
        getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscountResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerTaxIdsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const getCustomersCustomerTaxIdsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getCustomersCustomerTaxIdsBodySchema = z.object({}).optional()

  const getCustomersCustomerTaxIdsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_tax_id)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getCustomersCustomerTaxIds",
    "/v1/customers/:customer/tax_ids",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerTaxIdsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerTaxIdsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerTaxIdsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getCustomersCustomerTaxIds(
        input,
        ctx,
      )

      ctx.body = getCustomersCustomerTaxIdsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postCustomersCustomerTaxIdsParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const postCustomersCustomerTaxIdsBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    type: z.enum([
      "ad_nrt",
      "ae_trn",
      "ar_cuit",
      "au_abn",
      "au_arn",
      "bg_uic",
      "bo_tin",
      "br_cnpj",
      "br_cpf",
      "ca_bn",
      "ca_gst_hst",
      "ca_pst_bc",
      "ca_pst_mb",
      "ca_pst_sk",
      "ca_qst",
      "ch_vat",
      "cl_tin",
      "cn_tin",
      "co_nit",
      "cr_tin",
      "do_rcn",
      "ec_ruc",
      "eg_tin",
      "es_cif",
      "eu_oss_vat",
      "eu_vat",
      "gb_vat",
      "ge_vat",
      "hk_br",
      "hu_tin",
      "id_npwp",
      "il_vat",
      "in_gst",
      "is_vat",
      "jp_cn",
      "jp_rn",
      "jp_trn",
      "ke_pin",
      "kr_brn",
      "li_uid",
      "mx_rfc",
      "my_frp",
      "my_itn",
      "my_sst",
      "no_vat",
      "nz_gst",
      "pe_ruc",
      "ph_tin",
      "ro_tin",
      "rs_pib",
      "ru_inn",
      "ru_kpp",
      "sa_vat",
      "sg_gst",
      "sg_uen",
      "si_tin",
      "sv_nit",
      "th_vat",
      "tr_tin",
      "tw_vat",
      "ua_vat",
      "us_ein",
      "uy_ruc",
      "ve_rif",
      "vn_tin",
      "za_vat",
    ]),
    value: z.coerce.string(),
  })

  const postCustomersCustomerTaxIdsResponseValidator =
    responseValidationFactory([["200", s_tax_id]], s_error)

  router.post(
    "postCustomersCustomerTaxIds",
    "/v1/customers/:customer/tax_ids",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postCustomersCustomerTaxIdsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postCustomersCustomerTaxIdsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postCustomersCustomerTaxIds(
        input,
        ctx,
      )

      ctx.body = postCustomersCustomerTaxIdsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteCustomersCustomerTaxIdsIdParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const deleteCustomersCustomerTaxIdsIdBodySchema = z.object({}).optional()

  const deleteCustomersCustomerTaxIdsIdResponseValidator =
    responseValidationFactory([["200", s_deleted_tax_id]], s_error)

  router.delete(
    "deleteCustomersCustomerTaxIdsId",
    "/v1/customers/:customer/tax_ids/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteCustomersCustomerTaxIdsIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteCustomersCustomerTaxIdsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteCustomersCustomerTaxIdsId(input, ctx)

      ctx.body = deleteCustomersCustomerTaxIdsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getCustomersCustomerTaxIdsIdParamSchema = z.object({
    customer: z.coerce.string(),
    id: z.coerce.string(),
  })

  const getCustomersCustomerTaxIdsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getCustomersCustomerTaxIdsIdBodySchema = z.object({}).optional()

  const getCustomersCustomerTaxIdsIdResponseValidator =
    responseValidationFactory([["200", s_tax_id]], s_error)

  router.get(
    "getCustomersCustomerTaxIdsId",
    "/v1/customers/:customer/tax_ids/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getCustomersCustomerTaxIdsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getCustomersCustomerTaxIdsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getCustomersCustomerTaxIdsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getCustomersCustomerTaxIdsId(input, ctx)

      ctx.body = getCustomersCustomerTaxIdsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getDisputesQuerySchema = z.object({
    charge: z.coerce.string().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    payment_intent: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getDisputesBodySchema = z.object({}).optional()

  const getDisputesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_dispute)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getDisputes", "/v1/disputes", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getDisputesQuerySchema, ctx.query),
      body: parseRequestInput(getDisputesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getDisputes(input, ctx)

    ctx.body = getDisputesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getDisputesDisputeParamSchema = z.object({ dispute: z.coerce.string() })

  const getDisputesDisputeQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getDisputesDisputeBodySchema = z.object({}).optional()

  const getDisputesDisputeResponseValidator = responseValidationFactory(
    [["200", s_dispute]],
    s_error,
  )

  router.get(
    "getDisputesDispute",
    "/v1/disputes/:dispute",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getDisputesDisputeParamSchema, ctx.params),
        query: parseRequestInput(getDisputesDisputeQuerySchema, ctx.query),
        body: parseRequestInput(getDisputesDisputeBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getDisputesDispute(
        input,
        ctx,
      )

      ctx.body = getDisputesDisputeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postDisputesDisputeParamSchema = z.object({
    dispute: z.coerce.string(),
  })

  const postDisputesDisputeBodySchema = z
    .object({
      evidence: z
        .object({
          access_activity_log: z.coerce.string().optional(),
          billing_address: z.coerce.string().optional(),
          cancellation_policy: z.coerce.string().optional(),
          cancellation_policy_disclosure: z.coerce.string().optional(),
          cancellation_rebuttal: z.coerce.string().optional(),
          customer_communication: z.coerce.string().optional(),
          customer_email_address: z.coerce.string().optional(),
          customer_name: z.coerce.string().optional(),
          customer_purchase_ip: z.coerce.string().optional(),
          customer_signature: z.coerce.string().optional(),
          duplicate_charge_documentation: z.coerce.string().optional(),
          duplicate_charge_explanation: z.coerce.string().optional(),
          duplicate_charge_id: z.coerce.string().optional(),
          product_description: z.coerce.string().optional(),
          receipt: z.coerce.string().optional(),
          refund_policy: z.coerce.string().optional(),
          refund_policy_disclosure: z.coerce.string().optional(),
          refund_refusal_explanation: z.coerce.string().optional(),
          service_date: z.coerce.string().optional(),
          service_documentation: z.coerce.string().optional(),
          shipping_address: z.coerce.string().optional(),
          shipping_carrier: z.coerce.string().optional(),
          shipping_date: z.coerce.string().optional(),
          shipping_documentation: z.coerce.string().optional(),
          shipping_tracking_number: z.coerce.string().optional(),
          uncategorized_file: z.coerce.string().optional(),
          uncategorized_text: z.coerce.string().optional(),
        })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      submit: z.coerce.boolean().optional(),
    })
    .optional()

  const postDisputesDisputeResponseValidator = responseValidationFactory(
    [["200", s_dispute]],
    s_error,
  )

  router.post(
    "postDisputesDispute",
    "/v1/disputes/:dispute",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postDisputesDisputeParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          postDisputesDisputeBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postDisputesDispute(
        input,
        ctx,
      )

      ctx.body = postDisputesDisputeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postDisputesDisputeCloseParamSchema = z.object({
    dispute: z.coerce.string(),
  })

  const postDisputesDisputeCloseBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postDisputesDisputeCloseResponseValidator = responseValidationFactory(
    [["200", s_dispute]],
    s_error,
  )

  router.post(
    "postDisputesDisputeClose",
    "/v1/disputes/:dispute/close",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postDisputesDisputeCloseParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postDisputesDisputeCloseBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postDisputesDisputeClose(
        input,
        ctx,
      )

      ctx.body = postDisputesDisputeCloseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postEphemeralKeysBodySchema = z
    .object({
      customer: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      issuing_card: z.coerce.string().optional(),
      nonce: z.coerce.string().optional(),
      verification_session: z.coerce.string().optional(),
    })
    .optional()

  const postEphemeralKeysResponseValidator = responseValidationFactory(
    [["200", s_ephemeral_key]],
    s_error,
  )

  router.post("postEphemeralKeys", "/v1/ephemeral_keys", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postEphemeralKeysBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postEphemeralKeys(input, ctx)

    ctx.body = postEphemeralKeysResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const deleteEphemeralKeysKeyParamSchema = z.object({ key: z.coerce.string() })

  const deleteEphemeralKeysKeyBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const deleteEphemeralKeysKeyResponseValidator = responseValidationFactory(
    [["200", s_ephemeral_key]],
    s_error,
  )

  router.delete(
    "deleteEphemeralKeysKey",
    "/v1/ephemeral_keys/:key",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteEphemeralKeysKeyParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteEphemeralKeysKeyBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.deleteEphemeralKeysKey(
        input,
        ctx,
      )

      ctx.body = deleteEphemeralKeysKeyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getEventsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    delivery_success: z.coerce.boolean().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    type: z.coerce.string().optional(),
    types: z.array(z.coerce.string()).optional(),
  })

  const getEventsBodySchema = z.object({}).optional()

  const getEventsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_event),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getEvents", "/v1/events", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getEventsQuerySchema, ctx.query),
      body: parseRequestInput(getEventsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getEvents(input, ctx)

    ctx.body = getEventsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getEventsIdParamSchema = z.object({ id: z.coerce.string() })

  const getEventsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getEventsIdBodySchema = z.object({}).optional()

  const getEventsIdResponseValidator = responseValidationFactory(
    [["200", s_event]],
    s_error,
  )

  router.get("getEventsId", "/v1/events/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getEventsIdParamSchema, ctx.params),
      query: parseRequestInput(getEventsIdQuerySchema, ctx.query),
      body: parseRequestInput(getEventsIdBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getEventsId(input, ctx)

    ctx.body = getEventsIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getExchangeRatesQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getExchangeRatesBodySchema = z.object({}).optional()

  const getExchangeRatesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_exchange_rate),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getExchangeRates", "/v1/exchange_rates", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getExchangeRatesQuerySchema, ctx.query),
      body: parseRequestInput(getExchangeRatesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getExchangeRates(input, ctx)

    ctx.body = getExchangeRatesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getExchangeRatesRateIdParamSchema = z.object({
    rate_id: z.coerce.string(),
  })

  const getExchangeRatesRateIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getExchangeRatesRateIdBodySchema = z.object({}).optional()

  const getExchangeRatesRateIdResponseValidator = responseValidationFactory(
    [["200", s_exchange_rate]],
    s_error,
  )

  router.get(
    "getExchangeRatesRateId",
    "/v1/exchange_rates/:rateId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getExchangeRatesRateIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(getExchangeRatesRateIdQuerySchema, ctx.query),
        body: parseRequestInput(
          getExchangeRatesRateIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getExchangeRatesRateId(
        input,
        ctx,
      )

      ctx.body = getExchangeRatesRateIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getFileLinksQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    expired: z.coerce.boolean().optional(),
    file: z.coerce.string().optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getFileLinksBodySchema = z.object({}).optional()

  const getFileLinksResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_file_link)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getFileLinks", "/v1/file_links", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getFileLinksQuerySchema, ctx.query),
      body: parseRequestInput(getFileLinksBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getFileLinks(input, ctx)

    ctx.body = getFileLinksResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postFileLinksBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    expires_at: z.coerce.number().optional(),
    file: z.coerce.string(),
    metadata: z.union([z.object({}), z.enum([""])]),
  })

  const postFileLinksResponseValidator = responseValidationFactory(
    [["200", s_file_link]],
    s_error,
  )

  router.post("postFileLinks", "/v1/file_links", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postFileLinksBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postFileLinks(input, ctx)

    ctx.body = postFileLinksResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getFileLinksLinkParamSchema = z.object({ link: z.coerce.string() })

  const getFileLinksLinkQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getFileLinksLinkBodySchema = z.object({}).optional()

  const getFileLinksLinkResponseValidator = responseValidationFactory(
    [["200", s_file_link]],
    s_error,
  )

  router.get("getFileLinksLink", "/v1/file_links/:link", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getFileLinksLinkParamSchema, ctx.params),
      query: parseRequestInput(getFileLinksLinkQuerySchema, ctx.query),
      body: parseRequestInput(getFileLinksLinkBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getFileLinksLink(input, ctx)

    ctx.body = getFileLinksLinkResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postFileLinksLinkParamSchema = z.object({ link: z.coerce.string() })

  const postFileLinksLinkBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      expires_at: z.union([z.enum(["now"]), z.coerce.number(), z.enum([""])]),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postFileLinksLinkResponseValidator = responseValidationFactory(
    [["200", s_file_link]],
    s_error,
  )

  router.post(
    "postFileLinksLink",
    "/v1/file_links/:link",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postFileLinksLinkParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(postFileLinksLinkBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.postFileLinksLink(
        input,
        ctx,
      )

      ctx.body = postFileLinksLinkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getFilesQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    purpose: z
      .enum([
        "account_requirement",
        "additional_verification",
        "business_icon",
        "business_logo",
        "customer_signature",
        "dispute_evidence",
        "document_provider_identity_document",
        "finance_report_run",
        "identity_document",
        "identity_document_downloadable",
        "pci_document",
        "selfie",
        "sigma_scheduled_query",
        "tax_document_user_upload",
        "terminal_reader_splashscreen",
      ])
      .optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getFilesBodySchema = z.object({}).optional()

  const getFilesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_file)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getFiles", "/v1/files", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getFilesQuerySchema, ctx.query),
      body: parseRequestInput(getFilesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getFiles(input, ctx)

    ctx.body = getFilesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postFilesBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    file: z.coerce.string(),
    file_link_data: z
      .object({
        create: z.coerce.boolean(),
        expires_at: z.coerce.number().optional(),
        metadata: z.union([z.object({}), z.enum([""])]),
      })
      .optional(),
    purpose: z.enum([
      "account_requirement",
      "additional_verification",
      "business_icon",
      "business_logo",
      "customer_signature",
      "dispute_evidence",
      "identity_document",
      "pci_document",
      "tax_document_user_upload",
      "terminal_reader_splashscreen",
    ]),
  })

  const postFilesResponseValidator = responseValidationFactory(
    [["200", s_file]],
    s_error,
  )

  router.post("postFiles", "/v1/files", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postFilesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postFiles(input, ctx)

    ctx.body = postFilesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getFilesFileParamSchema = z.object({ file: z.coerce.string() })

  const getFilesFileQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getFilesFileBodySchema = z.object({}).optional()

  const getFilesFileResponseValidator = responseValidationFactory(
    [["200", s_file]],
    s_error,
  )

  router.get("getFilesFile", "/v1/files/:file", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getFilesFileParamSchema, ctx.params),
      query: parseRequestInput(getFilesFileQuerySchema, ctx.query),
      body: parseRequestInput(getFilesFileBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getFilesFile(input, ctx)

    ctx.body = getFilesFileResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getFinancialConnectionsAccountsQuerySchema = z.object({
    account_holder: z
      .object({
        account: z.coerce.string().optional(),
        customer: z.coerce.string().optional(),
      })
      .optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    session: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getFinancialConnectionsAccountsBodySchema = z.object({}).optional()

  const getFinancialConnectionsAccountsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_financial_connections_account)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getFinancialConnectionsAccounts",
    "/v1/financial_connections/accounts",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getFinancialConnectionsAccountsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getFinancialConnectionsAccountsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getFinancialConnectionsAccounts(input, ctx)

      ctx.body = getFinancialConnectionsAccountsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getFinancialConnectionsAccountsAccountParamSchema = z.object({
    account: z.coerce.string(),
  })

  const getFinancialConnectionsAccountsAccountQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getFinancialConnectionsAccountsAccountBodySchema = z
    .object({})
    .optional()

  const getFinancialConnectionsAccountsAccountResponseValidator =
    responseValidationFactory(
      [["200", s_financial_connections_account]],
      s_error,
    )

  router.get(
    "getFinancialConnectionsAccountsAccount",
    "/v1/financial_connections/accounts/:account",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getFinancialConnectionsAccountsAccountParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getFinancialConnectionsAccountsAccountQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getFinancialConnectionsAccountsAccountBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getFinancialConnectionsAccountsAccount(input, ctx)

      ctx.body = getFinancialConnectionsAccountsAccountResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postFinancialConnectionsAccountsAccountDisconnectParamSchema = z.object(
    { account: z.coerce.string() },
  )

  const postFinancialConnectionsAccountsAccountDisconnectBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postFinancialConnectionsAccountsAccountDisconnectResponseValidator =
    responseValidationFactory(
      [["200", s_financial_connections_account]],
      s_error,
    )

  router.post(
    "postFinancialConnectionsAccountsAccountDisconnect",
    "/v1/financial_connections/accounts/:account/disconnect",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postFinancialConnectionsAccountsAccountDisconnectParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postFinancialConnectionsAccountsAccountDisconnectBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postFinancialConnectionsAccountsAccountDisconnect(
          input,
          ctx,
        )

      ctx.body =
        postFinancialConnectionsAccountsAccountDisconnectResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getFinancialConnectionsAccountsAccountOwnersParamSchema = z.object({
    account: z.coerce.string(),
  })

  const getFinancialConnectionsAccountsAccountOwnersQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    ownership: z.coerce.string(),
    starting_after: z.coerce.string().optional(),
  })

  const getFinancialConnectionsAccountsAccountOwnersBodySchema = z
    .object({})
    .optional()

  const getFinancialConnectionsAccountsAccountOwnersResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(s_financial_connections_account_owner),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getFinancialConnectionsAccountsAccountOwners",
    "/v1/financial_connections/accounts/:account/owners",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getFinancialConnectionsAccountsAccountOwnersParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getFinancialConnectionsAccountsAccountOwnersQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getFinancialConnectionsAccountsAccountOwnersBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getFinancialConnectionsAccountsAccountOwners(
          input,
          ctx,
        )

      ctx.body = getFinancialConnectionsAccountsAccountOwnersResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postFinancialConnectionsAccountsAccountRefreshParamSchema = z.object({
    account: z.coerce.string(),
  })

  const postFinancialConnectionsAccountsAccountRefreshBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    features: z.array(z.enum(["balance", "ownership"])),
  })

  const postFinancialConnectionsAccountsAccountRefreshResponseValidator =
    responseValidationFactory(
      [["200", s_financial_connections_account]],
      s_error,
    )

  router.post(
    "postFinancialConnectionsAccountsAccountRefresh",
    "/v1/financial_connections/accounts/:account/refresh",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postFinancialConnectionsAccountsAccountRefreshParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postFinancialConnectionsAccountsAccountRefreshBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postFinancialConnectionsAccountsAccountRefresh(
          input,
          ctx,
        )

      ctx.body =
        postFinancialConnectionsAccountsAccountRefreshResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postFinancialConnectionsSessionsBodySchema = z.object({
    account_holder: z.object({
      account: z.coerce.string().optional(),
      customer: z.coerce.string().optional(),
      type: z.enum(["account", "customer"]),
    }),
    expand: z.array(z.coerce.string()).optional(),
    filters: z.object({ countries: z.array(z.coerce.string()) }).optional(),
    permissions: z.array(
      z.enum(["balances", "ownership", "payment_method", "transactions"]),
    ),
    prefetch: z.array(z.enum(["balances", "ownership"])).optional(),
    return_url: z.coerce.string().optional(),
  })

  const postFinancialConnectionsSessionsResponseValidator =
    responseValidationFactory(
      [["200", s_financial_connections_session]],
      s_error,
    )

  router.post(
    "postFinancialConnectionsSessions",
    "/v1/financial_connections/sessions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postFinancialConnectionsSessionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postFinancialConnectionsSessions(input, ctx)

      ctx.body = postFinancialConnectionsSessionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getFinancialConnectionsSessionsSessionParamSchema = z.object({
    session: z.coerce.string(),
  })

  const getFinancialConnectionsSessionsSessionQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getFinancialConnectionsSessionsSessionBodySchema = z
    .object({})
    .optional()

  const getFinancialConnectionsSessionsSessionResponseValidator =
    responseValidationFactory(
      [["200", s_financial_connections_session]],
      s_error,
    )

  router.get(
    "getFinancialConnectionsSessionsSession",
    "/v1/financial_connections/sessions/:session",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getFinancialConnectionsSessionsSessionParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getFinancialConnectionsSessionsSessionQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getFinancialConnectionsSessionsSessionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getFinancialConnectionsSessionsSession(input, ctx)

      ctx.body = getFinancialConnectionsSessionsSessionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getIdentityVerificationReportsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    type: z.enum(["document", "id_number"]).optional(),
    verification_session: z.coerce.string().optional(),
  })

  const getIdentityVerificationReportsBodySchema = z.object({}).optional()

  const getIdentityVerificationReportsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(s_identity_verification_report),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getIdentityVerificationReports",
    "/v1/identity/verification_reports",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getIdentityVerificationReportsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getIdentityVerificationReportsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getIdentityVerificationReports(input, ctx)

      ctx.body = getIdentityVerificationReportsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIdentityVerificationReportsReportParamSchema = z.object({
    report: z.coerce.string(),
  })

  const getIdentityVerificationReportsReportQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getIdentityVerificationReportsReportBodySchema = z.object({}).optional()

  const getIdentityVerificationReportsReportResponseValidator =
    responseValidationFactory(
      [["200", s_identity_verification_report]],
      s_error,
    )

  router.get(
    "getIdentityVerificationReportsReport",
    "/v1/identity/verification_reports/:report",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getIdentityVerificationReportsReportParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getIdentityVerificationReportsReportQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getIdentityVerificationReportsReportBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getIdentityVerificationReportsReport(input, ctx)

      ctx.body = getIdentityVerificationReportsReportResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getIdentityVerificationSessionsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z
      .enum(["canceled", "processing", "requires_input", "verified"])
      .optional(),
  })

  const getIdentityVerificationSessionsBodySchema = z.object({}).optional()

  const getIdentityVerificationSessionsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(s_identity_verification_session),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getIdentityVerificationSessions",
    "/v1/identity/verification_sessions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getIdentityVerificationSessionsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getIdentityVerificationSessionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getIdentityVerificationSessions(input, ctx)

      ctx.body = getIdentityVerificationSessionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postIdentityVerificationSessionsBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.object({}).optional(),
    options: z
      .object({
        document: z.union([
          z.object({
            allowed_types: z
              .array(z.enum(["driving_license", "id_card", "passport"]))
              .optional(),
            require_id_number: z.coerce.boolean().optional(),
            require_live_capture: z.coerce.boolean().optional(),
            require_matching_selfie: z.coerce.boolean().optional(),
          }),
          z.enum([""]),
        ]),
      })
      .optional(),
    return_url: z.coerce.string().optional(),
    type: z.enum(["document", "id_number"]),
  })

  const postIdentityVerificationSessionsResponseValidator =
    responseValidationFactory(
      [["200", s_identity_verification_session]],
      s_error,
    )

  router.post(
    "postIdentityVerificationSessions",
    "/v1/identity/verification_sessions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postIdentityVerificationSessionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postIdentityVerificationSessions(input, ctx)

      ctx.body = postIdentityVerificationSessionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIdentityVerificationSessionsSessionParamSchema = z.object({
    session: z.coerce.string(),
  })

  const getIdentityVerificationSessionsSessionQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getIdentityVerificationSessionsSessionBodySchema = z
    .object({})
    .optional()

  const getIdentityVerificationSessionsSessionResponseValidator =
    responseValidationFactory(
      [["200", s_identity_verification_session]],
      s_error,
    )

  router.get(
    "getIdentityVerificationSessionsSession",
    "/v1/identity/verification_sessions/:session",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getIdentityVerificationSessionsSessionParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getIdentityVerificationSessionsSessionQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getIdentityVerificationSessionsSessionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getIdentityVerificationSessionsSession(input, ctx)

      ctx.body = getIdentityVerificationSessionsSessionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postIdentityVerificationSessionsSessionParamSchema = z.object({
    session: z.coerce.string(),
  })

  const postIdentityVerificationSessionsSessionBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.object({}).optional(),
      options: z
        .object({
          document: z.union([
            z.object({
              allowed_types: z
                .array(z.enum(["driving_license", "id_card", "passport"]))
                .optional(),
              require_id_number: z.coerce.boolean().optional(),
              require_live_capture: z.coerce.boolean().optional(),
              require_matching_selfie: z.coerce.boolean().optional(),
            }),
            z.enum([""]),
          ]),
        })
        .optional(),
      type: z.enum(["document", "id_number"]).optional(),
    })
    .optional()

  const postIdentityVerificationSessionsSessionResponseValidator =
    responseValidationFactory(
      [["200", s_identity_verification_session]],
      s_error,
    )

  router.post(
    "postIdentityVerificationSessionsSession",
    "/v1/identity/verification_sessions/:session",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postIdentityVerificationSessionsSessionParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postIdentityVerificationSessionsSessionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postIdentityVerificationSessionsSession(input, ctx)

      ctx.body = postIdentityVerificationSessionsSessionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postIdentityVerificationSessionsSessionCancelParamSchema = z.object({
    session: z.coerce.string(),
  })

  const postIdentityVerificationSessionsSessionCancelBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postIdentityVerificationSessionsSessionCancelResponseValidator =
    responseValidationFactory(
      [["200", s_identity_verification_session]],
      s_error,
    )

  router.post(
    "postIdentityVerificationSessionsSessionCancel",
    "/v1/identity/verification_sessions/:session/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postIdentityVerificationSessionsSessionCancelParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postIdentityVerificationSessionsSessionCancelBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postIdentityVerificationSessionsSessionCancel(
          input,
          ctx,
        )

      ctx.body = postIdentityVerificationSessionsSessionCancelResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postIdentityVerificationSessionsSessionRedactParamSchema = z.object({
    session: z.coerce.string(),
  })

  const postIdentityVerificationSessionsSessionRedactBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postIdentityVerificationSessionsSessionRedactResponseValidator =
    responseValidationFactory(
      [["200", s_identity_verification_session]],
      s_error,
    )

  router.post(
    "postIdentityVerificationSessionsSessionRedact",
    "/v1/identity/verification_sessions/:session/redact",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postIdentityVerificationSessionsSessionRedactParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postIdentityVerificationSessionsSessionRedactBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postIdentityVerificationSessionsSessionRedact(
          input,
          ctx,
        )

      ctx.body = postIdentityVerificationSessionsSessionRedactResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getInvoiceitemsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    customer: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    invoice: z.coerce.string().optional(),
    limit: z.coerce.number().optional(),
    pending: z.coerce.boolean().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getInvoiceitemsBodySchema = z.object({}).optional()

  const getInvoiceitemsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_invoiceitem)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getInvoiceitems", "/v1/invoiceitems", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getInvoiceitemsQuerySchema, ctx.query),
      body: parseRequestInput(getInvoiceitemsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getInvoiceitems(input, ctx)

    ctx.body = getInvoiceitemsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postInvoiceitemsBodySchema = z.object({
    amount: z.coerce.number().optional(),
    currency: z.coerce.string().optional(),
    customer: z.coerce.string(),
    description: z.coerce.string().optional(),
    discountable: z.coerce.boolean().optional(),
    discounts: z.union([
      z.array(
        z.object({
          coupon: z.coerce.string().optional(),
          discount: z.coerce.string().optional(),
        }),
      ),
      z.enum([""]),
    ]),
    expand: z.array(z.coerce.string()).optional(),
    invoice: z.coerce.string().optional(),
    metadata: z.union([z.object({}), z.enum([""])]),
    period: z
      .object({ end: z.coerce.number(), start: z.coerce.number() })
      .optional(),
    price: z.coerce.string().optional(),
    price_data: z
      .object({
        currency: z.coerce.string(),
        product: z.coerce.string(),
        tax_behavior: z
          .enum(["exclusive", "inclusive", "unspecified"])
          .optional(),
        unit_amount: z.coerce.number().optional(),
        unit_amount_decimal: z.coerce.string().optional(),
      })
      .optional(),
    quantity: z.coerce.number().optional(),
    subscription: z.coerce.string().optional(),
    tax_behavior: z.enum(["exclusive", "inclusive", "unspecified"]).optional(),
    tax_code: z.union([z.coerce.string(), z.enum([""])]),
    tax_rates: z.array(z.coerce.string()).optional(),
    unit_amount: z.coerce.number().optional(),
    unit_amount_decimal: z.coerce.string().optional(),
  })

  const postInvoiceitemsResponseValidator = responseValidationFactory(
    [["200", s_invoiceitem]],
    s_error,
  )

  router.post("postInvoiceitems", "/v1/invoiceitems", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postInvoiceitemsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postInvoiceitems(input, ctx)

    ctx.body = postInvoiceitemsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const deleteInvoiceitemsInvoiceitemParamSchema = z.object({
    invoiceitem: z.coerce.string(),
  })

  const deleteInvoiceitemsInvoiceitemBodySchema = z.object({}).optional()

  const deleteInvoiceitemsInvoiceitemResponseValidator =
    responseValidationFactory([["200", s_deleted_invoiceitem]], s_error)

  router.delete(
    "deleteInvoiceitemsInvoiceitem",
    "/v1/invoiceitems/:invoiceitem",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteInvoiceitemsInvoiceitemParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteInvoiceitemsInvoiceitemBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteInvoiceitemsInvoiceitem(input, ctx)

      ctx.body = deleteInvoiceitemsInvoiceitemResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getInvoiceitemsInvoiceitemParamSchema = z.object({
    invoiceitem: z.coerce.string(),
  })

  const getInvoiceitemsInvoiceitemQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getInvoiceitemsInvoiceitemBodySchema = z.object({}).optional()

  const getInvoiceitemsInvoiceitemResponseValidator = responseValidationFactory(
    [["200", s_invoiceitem]],
    s_error,
  )

  router.get(
    "getInvoiceitemsInvoiceitem",
    "/v1/invoiceitems/:invoiceitem",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getInvoiceitemsInvoiceitemParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getInvoiceitemsInvoiceitemQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getInvoiceitemsInvoiceitemBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getInvoiceitemsInvoiceitem(
        input,
        ctx,
      )

      ctx.body = getInvoiceitemsInvoiceitemResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postInvoiceitemsInvoiceitemParamSchema = z.object({
    invoiceitem: z.coerce.string(),
  })

  const postInvoiceitemsInvoiceitemBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      description: z.coerce.string().optional(),
      discountable: z.coerce.boolean().optional(),
      discounts: z.union([
        z.array(
          z.object({
            coupon: z.coerce.string().optional(),
            discount: z.coerce.string().optional(),
          }),
        ),
        z.enum([""]),
      ]),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      period: z
        .object({ end: z.coerce.number(), start: z.coerce.number() })
        .optional(),
      price: z.coerce.string().optional(),
      price_data: z
        .object({
          currency: z.coerce.string(),
          product: z.coerce.string(),
          tax_behavior: z
            .enum(["exclusive", "inclusive", "unspecified"])
            .optional(),
          unit_amount: z.coerce.number().optional(),
          unit_amount_decimal: z.coerce.string().optional(),
        })
        .optional(),
      quantity: z.coerce.number().optional(),
      tax_behavior: z
        .enum(["exclusive", "inclusive", "unspecified"])
        .optional(),
      tax_code: z.union([z.coerce.string(), z.enum([""])]),
      tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
      unit_amount: z.coerce.number().optional(),
      unit_amount_decimal: z.coerce.string().optional(),
    })
    .optional()

  const postInvoiceitemsInvoiceitemResponseValidator =
    responseValidationFactory([["200", s_invoiceitem]], s_error)

  router.post(
    "postInvoiceitemsInvoiceitem",
    "/v1/invoiceitems/:invoiceitem",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postInvoiceitemsInvoiceitemParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postInvoiceitemsInvoiceitemBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postInvoiceitemsInvoiceitem(
        input,
        ctx,
      )

      ctx.body = postInvoiceitemsInvoiceitemResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getInvoicesQuerySchema = z.object({
    collection_method: z
      .enum(["charge_automatically", "send_invoice"])
      .optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    customer: z.coerce.string().optional(),
    due_date: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z
      .enum(["draft", "open", "paid", "uncollectible", "void"])
      .optional(),
    subscription: z.coerce.string().optional(),
  })

  const getInvoicesBodySchema = z.object({}).optional()

  const getInvoicesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_invoice)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getInvoices", "/v1/invoices", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getInvoicesQuerySchema, ctx.query),
      body: parseRequestInput(getInvoicesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getInvoices(input, ctx)

    ctx.body = getInvoicesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postInvoicesBodySchema = z
    .object({
      account_tax_ids: z.union([z.array(z.coerce.string()), z.enum([""])]),
      application_fee_amount: z.coerce.number().optional(),
      auto_advance: z.coerce.boolean().optional(),
      automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
      collection_method: z
        .enum(["charge_automatically", "send_invoice"])
        .optional(),
      currency: z.coerce.string().optional(),
      custom_fields: z.union([
        z.array(
          z.object({ name: z.coerce.string(), value: z.coerce.string() }),
        ),
        z.enum([""]),
      ]),
      customer: z.coerce.string().optional(),
      days_until_due: z.coerce.number().optional(),
      default_payment_method: z.coerce.string().optional(),
      default_source: z.coerce.string().optional(),
      default_tax_rates: z.array(z.coerce.string()).optional(),
      description: z.coerce.string().optional(),
      discounts: z.union([
        z.array(
          z.object({
            coupon: z.coerce.string().optional(),
            discount: z.coerce.string().optional(),
          }),
        ),
        z.enum([""]),
      ]),
      due_date: z.coerce.number().optional(),
      effective_at: z.coerce.number().optional(),
      expand: z.array(z.coerce.string()).optional(),
      footer: z.coerce.string().optional(),
      from_invoice: z
        .object({ action: z.enum(["revision"]), invoice: z.coerce.string() })
        .optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      on_behalf_of: z.coerce.string().optional(),
      payment_settings: z
        .object({
          default_mandate: z.union([z.coerce.string(), z.enum([""])]),
          payment_method_options: z
            .object({
              acss_debit: z.union([
                z.object({
                  mandate_options: z
                    .object({
                      transaction_type: z
                        .enum(["business", "personal"])
                        .optional(),
                    })
                    .optional(),
                  verification_method: z
                    .enum(["automatic", "instant", "microdeposits"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              bancontact: z.union([
                z.object({
                  preferred_language: z
                    .enum(["de", "en", "fr", "nl"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              card: z.union([
                z.object({
                  installments: z
                    .object({
                      enabled: z.coerce.boolean().optional(),
                      plan: z.union([
                        z.object({
                          count: z.coerce.number(),
                          interval: z.enum(["month"]),
                          type: z.enum(["fixed_count"]),
                        }),
                        z.enum([""]),
                      ]),
                    })
                    .optional(),
                  request_three_d_secure: z
                    .enum(["any", "automatic"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              customer_balance: z.union([
                z.object({
                  bank_transfer: z
                    .object({
                      eu_bank_transfer: z
                        .object({ country: z.coerce.string() })
                        .optional(),
                      type: z.coerce.string().optional(),
                    })
                    .optional(),
                  funding_type: z.coerce.string().optional(),
                }),
                z.enum([""]),
              ]),
              konbini: z.union([z.object({}), z.enum([""])]),
              us_bank_account: z.union([
                z.object({
                  financial_connections: z
                    .object({
                      permissions: z
                        .array(
                          z.enum([
                            "balances",
                            "ownership",
                            "payment_method",
                            "transactions",
                          ]),
                        )
                        .optional(),
                      prefetch: z.array(z.enum(["balances"])).optional(),
                    })
                    .optional(),
                  verification_method: z
                    .enum(["automatic", "instant", "microdeposits"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
            })
            .optional(),
          payment_method_types: z.union([
            z.array(
              z.enum([
                "ach_credit_transfer",
                "ach_debit",
                "acss_debit",
                "au_becs_debit",
                "bacs_debit",
                "bancontact",
                "boleto",
                "card",
                "cashapp",
                "customer_balance",
                "fpx",
                "giropay",
                "grabpay",
                "ideal",
                "konbini",
                "link",
                "paynow",
                "paypal",
                "promptpay",
                "sepa_debit",
                "sofort",
                "us_bank_account",
                "wechat_pay",
              ]),
            ),
            z.enum([""]),
          ]),
        })
        .optional(),
      pending_invoice_items_behavior: z
        .enum(["exclude", "include", "include_and_require"])
        .optional(),
      rendering_options: z.union([
        z.object({
          amount_tax_display: z
            .enum(["", "exclude_tax", "include_inclusive_tax"])
            .optional(),
        }),
        z.enum([""]),
      ]),
      shipping_cost: z
        .object({
          shipping_rate: z.coerce.string().optional(),
          shipping_rate_data: z
            .object({
              delivery_estimate: z
                .object({
                  maximum: z
                    .object({
                      unit: z.enum([
                        "business_day",
                        "day",
                        "hour",
                        "month",
                        "week",
                      ]),
                      value: z.coerce.number(),
                    })
                    .optional(),
                  minimum: z
                    .object({
                      unit: z.enum([
                        "business_day",
                        "day",
                        "hour",
                        "month",
                        "week",
                      ]),
                      value: z.coerce.number(),
                    })
                    .optional(),
                })
                .optional(),
              display_name: z.coerce.string(),
              fixed_amount: z
                .object({
                  amount: z.coerce.number(),
                  currency: z.coerce.string(),
                  currency_options: z.object({}).optional(),
                })
                .optional(),
              metadata: z.object({}).optional(),
              tax_behavior: z
                .enum(["exclusive", "inclusive", "unspecified"])
                .optional(),
              tax_code: z.coerce.string().optional(),
              type: z.enum(["fixed_amount"]).optional(),
            })
            .optional(),
        })
        .optional(),
      shipping_details: z
        .object({
          address: z.object({
            city: z.coerce.string().optional(),
            country: z.coerce.string().optional(),
            line1: z.coerce.string().optional(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string().optional(),
            state: z.coerce.string().optional(),
          }),
          name: z.coerce.string(),
          phone: z.union([z.coerce.string(), z.enum([""])]),
        })
        .optional(),
      statement_descriptor: z.coerce.string().optional(),
      subscription: z.coerce.string().optional(),
      transfer_data: z
        .object({
          amount: z.coerce.number().optional(),
          destination: z.coerce.string(),
        })
        .optional(),
    })
    .optional()

  const postInvoicesResponseValidator = responseValidationFactory(
    [["200", s_invoice]],
    s_error,
  )

  router.post("postInvoices", "/v1/invoices", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postInvoicesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postInvoices(input, ctx)

    ctx.body = postInvoicesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getInvoicesSearchQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    page: z.coerce.string().optional(),
    query: z.coerce.string(),
  })

  const getInvoicesSearchBodySchema = z.object({}).optional()

  const getInvoicesSearchResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_invoice)),
          has_more: z.coerce.boolean(),
          next_page: z.coerce.string().optional().nullable(),
          object: z.enum(["search_result"]),
          total_count: z.coerce.number().optional(),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getInvoicesSearch", "/v1/invoices/search", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getInvoicesSearchQuerySchema, ctx.query),
      body: parseRequestInput(getInvoicesSearchBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getInvoicesSearch(input, ctx)

    ctx.body = getInvoicesSearchResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getInvoicesUpcomingQuerySchema = z.object({
    automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
    coupon: z.coerce.string().optional(),
    currency: z.coerce.string().optional(),
    customer: z.coerce.string().optional(),
    customer_details: z
      .object({
        address: z.union([
          z.object({
            city: z.coerce.string().optional(),
            country: z.coerce.string().optional(),
            line1: z.coerce.string().optional(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string().optional(),
            state: z.coerce.string().optional(),
          }),
          z.enum([""]),
        ]),
        shipping: z.union([
          z.object({
            address: z.object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            }),
            name: z.coerce.string(),
            phone: z.coerce.string().optional(),
          }),
          z.enum([""]),
        ]),
        tax: z
          .object({ ip_address: z.union([z.coerce.string(), z.enum([""])]) })
          .optional(),
        tax_exempt: z.enum(["", "exempt", "none", "reverse"]).optional(),
        tax_ids: z
          .array(
            z.object({
              type: z.enum([
                "ad_nrt",
                "ae_trn",
                "ar_cuit",
                "au_abn",
                "au_arn",
                "bg_uic",
                "bo_tin",
                "br_cnpj",
                "br_cpf",
                "ca_bn",
                "ca_gst_hst",
                "ca_pst_bc",
                "ca_pst_mb",
                "ca_pst_sk",
                "ca_qst",
                "ch_vat",
                "cl_tin",
                "cn_tin",
                "co_nit",
                "cr_tin",
                "do_rcn",
                "ec_ruc",
                "eg_tin",
                "es_cif",
                "eu_oss_vat",
                "eu_vat",
                "gb_vat",
                "ge_vat",
                "hk_br",
                "hu_tin",
                "id_npwp",
                "il_vat",
                "in_gst",
                "is_vat",
                "jp_cn",
                "jp_rn",
                "jp_trn",
                "ke_pin",
                "kr_brn",
                "li_uid",
                "mx_rfc",
                "my_frp",
                "my_itn",
                "my_sst",
                "no_vat",
                "nz_gst",
                "pe_ruc",
                "ph_tin",
                "ro_tin",
                "rs_pib",
                "ru_inn",
                "ru_kpp",
                "sa_vat",
                "sg_gst",
                "sg_uen",
                "si_tin",
                "sv_nit",
                "th_vat",
                "tr_tin",
                "tw_vat",
                "ua_vat",
                "us_ein",
                "uy_ruc",
                "ve_rif",
                "vn_tin",
                "za_vat",
              ]),
              value: z.coerce.string(),
            }),
          )
          .optional(),
      })
      .optional(),
    discounts: z.union([
      z.array(
        z.object({
          coupon: z.coerce.string().optional(),
          discount: z.coerce.string().optional(),
        }),
      ),
      z.enum([""]),
    ]),
    expand: z.array(z.coerce.string()).optional(),
    invoice_items: z
      .array(
        z.object({
          amount: z.coerce.number().optional(),
          currency: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          discountable: z.coerce.boolean().optional(),
          discounts: z.union([
            z.array(
              z.object({
                coupon: z.coerce.string().optional(),
                discount: z.coerce.string().optional(),
              }),
            ),
            z.enum([""]),
          ]),
          invoiceitem: z.coerce.string().optional(),
          metadata: z.union([z.object({}), z.enum([""])]),
          period: z
            .object({ end: z.coerce.number(), start: z.coerce.number() })
            .optional(),
          price: z.coerce.string().optional(),
          price_data: z
            .object({
              currency: z.coerce.string(),
              product: z.coerce.string(),
              tax_behavior: z
                .enum(["exclusive", "inclusive", "unspecified"])
                .optional(),
              unit_amount: z.coerce.number().optional(),
              unit_amount_decimal: z.coerce.string().optional(),
            })
            .optional(),
          quantity: z.coerce.number().optional(),
          tax_behavior: z
            .enum(["exclusive", "inclusive", "unspecified"])
            .optional(),
          tax_code: z.union([z.coerce.string(), z.enum([""])]),
          tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          unit_amount: z.coerce.number().optional(),
          unit_amount_decimal: z.coerce.string().optional(),
        }),
      )
      .optional(),
    schedule: z.coerce.string().optional(),
    subscription: z.coerce.string().optional(),
    subscription_billing_cycle_anchor: z.union([
      z.enum(["now", "unchanged"]),
      z.coerce.number(),
    ]),
    subscription_cancel_at: z.union([z.coerce.number(), z.enum([""])]),
    subscription_cancel_at_period_end: z.coerce.boolean().optional(),
    subscription_cancel_now: z.coerce.boolean().optional(),
    subscription_default_tax_rates: z.union([
      z.array(z.coerce.string()),
      z.enum([""]),
    ]),
    subscription_items: z
      .array(
        z.object({
          billing_thresholds: z.union([
            z.object({ usage_gte: z.coerce.number() }),
            z.enum([""]),
          ]),
          clear_usage: z.coerce.boolean().optional(),
          deleted: z.coerce.boolean().optional(),
          id: z.coerce.string().optional(),
          metadata: z.union([z.object({}), z.enum([""])]),
          price: z.coerce.string().optional(),
          price_data: z
            .object({
              currency: z.coerce.string(),
              product: z.coerce.string(),
              recurring: z.object({
                interval: z.enum(["day", "month", "week", "year"]),
                interval_count: z.coerce.number().optional(),
              }),
              tax_behavior: z
                .enum(["exclusive", "inclusive", "unspecified"])
                .optional(),
              unit_amount: z.coerce.number().optional(),
              unit_amount_decimal: z.coerce.string().optional(),
            })
            .optional(),
          quantity: z.coerce.number().optional(),
          tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
        }),
      )
      .optional(),
    subscription_proration_behavior: z
      .enum(["always_invoice", "create_prorations", "none"])
      .optional(),
    subscription_proration_date: z.coerce.number().optional(),
    subscription_resume_at: z.enum(["now"]).optional(),
    subscription_start_date: z.coerce.number().optional(),
    subscription_trial_end: z.union([z.enum(["now"]), z.coerce.number()]),
    subscription_trial_from_plan: z.coerce.boolean().optional(),
  })

  const getInvoicesUpcomingBodySchema = z.object({}).optional()

  const getInvoicesUpcomingResponseValidator = responseValidationFactory(
    [["200", s_invoice]],
    s_error,
  )

  router.get(
    "getInvoicesUpcoming",
    "/v1/invoices/upcoming",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getInvoicesUpcomingQuerySchema, ctx.query),
        body: parseRequestInput(
          getInvoicesUpcomingBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getInvoicesUpcoming(
        input,
        ctx,
      )

      ctx.body = getInvoicesUpcomingResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getInvoicesUpcomingLinesQuerySchema = z.object({
    automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
    coupon: z.coerce.string().optional(),
    currency: z.coerce.string().optional(),
    customer: z.coerce.string().optional(),
    customer_details: z
      .object({
        address: z.union([
          z.object({
            city: z.coerce.string().optional(),
            country: z.coerce.string().optional(),
            line1: z.coerce.string().optional(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string().optional(),
            state: z.coerce.string().optional(),
          }),
          z.enum([""]),
        ]),
        shipping: z.union([
          z.object({
            address: z.object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            }),
            name: z.coerce.string(),
            phone: z.coerce.string().optional(),
          }),
          z.enum([""]),
        ]),
        tax: z
          .object({ ip_address: z.union([z.coerce.string(), z.enum([""])]) })
          .optional(),
        tax_exempt: z.enum(["", "exempt", "none", "reverse"]).optional(),
        tax_ids: z
          .array(
            z.object({
              type: z.enum([
                "ad_nrt",
                "ae_trn",
                "ar_cuit",
                "au_abn",
                "au_arn",
                "bg_uic",
                "bo_tin",
                "br_cnpj",
                "br_cpf",
                "ca_bn",
                "ca_gst_hst",
                "ca_pst_bc",
                "ca_pst_mb",
                "ca_pst_sk",
                "ca_qst",
                "ch_vat",
                "cl_tin",
                "cn_tin",
                "co_nit",
                "cr_tin",
                "do_rcn",
                "ec_ruc",
                "eg_tin",
                "es_cif",
                "eu_oss_vat",
                "eu_vat",
                "gb_vat",
                "ge_vat",
                "hk_br",
                "hu_tin",
                "id_npwp",
                "il_vat",
                "in_gst",
                "is_vat",
                "jp_cn",
                "jp_rn",
                "jp_trn",
                "ke_pin",
                "kr_brn",
                "li_uid",
                "mx_rfc",
                "my_frp",
                "my_itn",
                "my_sst",
                "no_vat",
                "nz_gst",
                "pe_ruc",
                "ph_tin",
                "ro_tin",
                "rs_pib",
                "ru_inn",
                "ru_kpp",
                "sa_vat",
                "sg_gst",
                "sg_uen",
                "si_tin",
                "sv_nit",
                "th_vat",
                "tr_tin",
                "tw_vat",
                "ua_vat",
                "us_ein",
                "uy_ruc",
                "ve_rif",
                "vn_tin",
                "za_vat",
              ]),
              value: z.coerce.string(),
            }),
          )
          .optional(),
      })
      .optional(),
    discounts: z.union([
      z.array(
        z.object({
          coupon: z.coerce.string().optional(),
          discount: z.coerce.string().optional(),
        }),
      ),
      z.enum([""]),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    invoice_items: z
      .array(
        z.object({
          amount: z.coerce.number().optional(),
          currency: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          discountable: z.coerce.boolean().optional(),
          discounts: z.union([
            z.array(
              z.object({
                coupon: z.coerce.string().optional(),
                discount: z.coerce.string().optional(),
              }),
            ),
            z.enum([""]),
          ]),
          invoiceitem: z.coerce.string().optional(),
          metadata: z.union([z.object({}), z.enum([""])]),
          period: z
            .object({ end: z.coerce.number(), start: z.coerce.number() })
            .optional(),
          price: z.coerce.string().optional(),
          price_data: z
            .object({
              currency: z.coerce.string(),
              product: z.coerce.string(),
              tax_behavior: z
                .enum(["exclusive", "inclusive", "unspecified"])
                .optional(),
              unit_amount: z.coerce.number().optional(),
              unit_amount_decimal: z.coerce.string().optional(),
            })
            .optional(),
          quantity: z.coerce.number().optional(),
          tax_behavior: z
            .enum(["exclusive", "inclusive", "unspecified"])
            .optional(),
          tax_code: z.union([z.coerce.string(), z.enum([""])]),
          tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          unit_amount: z.coerce.number().optional(),
          unit_amount_decimal: z.coerce.string().optional(),
        }),
      )
      .optional(),
    limit: z.coerce.number().optional(),
    schedule: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
    subscription: z.coerce.string().optional(),
    subscription_billing_cycle_anchor: z.union([
      z.enum(["now", "unchanged"]),
      z.coerce.number(),
    ]),
    subscription_cancel_at: z.union([z.coerce.number(), z.enum([""])]),
    subscription_cancel_at_period_end: z.coerce.boolean().optional(),
    subscription_cancel_now: z.coerce.boolean().optional(),
    subscription_default_tax_rates: z.union([
      z.array(z.coerce.string()),
      z.enum([""]),
    ]),
    subscription_items: z
      .array(
        z.object({
          billing_thresholds: z.union([
            z.object({ usage_gte: z.coerce.number() }),
            z.enum([""]),
          ]),
          clear_usage: z.coerce.boolean().optional(),
          deleted: z.coerce.boolean().optional(),
          id: z.coerce.string().optional(),
          metadata: z.union([z.object({}), z.enum([""])]),
          price: z.coerce.string().optional(),
          price_data: z
            .object({
              currency: z.coerce.string(),
              product: z.coerce.string(),
              recurring: z.object({
                interval: z.enum(["day", "month", "week", "year"]),
                interval_count: z.coerce.number().optional(),
              }),
              tax_behavior: z
                .enum(["exclusive", "inclusive", "unspecified"])
                .optional(),
              unit_amount: z.coerce.number().optional(),
              unit_amount_decimal: z.coerce.string().optional(),
            })
            .optional(),
          quantity: z.coerce.number().optional(),
          tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
        }),
      )
      .optional(),
    subscription_proration_behavior: z
      .enum(["always_invoice", "create_prorations", "none"])
      .optional(),
    subscription_proration_date: z.coerce.number().optional(),
    subscription_resume_at: z.enum(["now"]).optional(),
    subscription_start_date: z.coerce.number().optional(),
    subscription_trial_end: z.union([z.enum(["now"]), z.coerce.number()]),
    subscription_trial_from_plan: z.coerce.boolean().optional(),
  })

  const getInvoicesUpcomingLinesBodySchema = z.object({}).optional()

  const getInvoicesUpcomingLinesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_line_item)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getInvoicesUpcomingLines",
    "/v1/invoices/upcoming/lines",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getInvoicesUpcomingLinesQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getInvoicesUpcomingLinesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getInvoicesUpcomingLines(
        input,
        ctx,
      )

      ctx.body = getInvoicesUpcomingLinesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteInvoicesInvoiceParamSchema = z.object({
    invoice: z.coerce.string(),
  })

  const deleteInvoicesInvoiceBodySchema = z.object({}).optional()

  const deleteInvoicesInvoiceResponseValidator = responseValidationFactory(
    [["200", s_deleted_invoice]],
    s_error,
  )

  router.delete(
    "deleteInvoicesInvoice",
    "/v1/invoices/:invoice",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(deleteInvoicesInvoiceParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          deleteInvoicesInvoiceBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.deleteInvoicesInvoice(
        input,
        ctx,
      )

      ctx.body = deleteInvoicesInvoiceResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getInvoicesInvoiceParamSchema = z.object({ invoice: z.coerce.string() })

  const getInvoicesInvoiceQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getInvoicesInvoiceBodySchema = z.object({}).optional()

  const getInvoicesInvoiceResponseValidator = responseValidationFactory(
    [["200", s_invoice]],
    s_error,
  )

  router.get(
    "getInvoicesInvoice",
    "/v1/invoices/:invoice",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getInvoicesInvoiceParamSchema, ctx.params),
        query: parseRequestInput(getInvoicesInvoiceQuerySchema, ctx.query),
        body: parseRequestInput(getInvoicesInvoiceBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getInvoicesInvoice(
        input,
        ctx,
      )

      ctx.body = getInvoicesInvoiceResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postInvoicesInvoiceParamSchema = z.object({
    invoice: z.coerce.string(),
  })

  const postInvoicesInvoiceBodySchema = z
    .object({
      account_tax_ids: z.union([z.array(z.coerce.string()), z.enum([""])]),
      application_fee_amount: z.coerce.number().optional(),
      auto_advance: z.coerce.boolean().optional(),
      automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
      collection_method: z
        .enum(["charge_automatically", "send_invoice"])
        .optional(),
      custom_fields: z.union([
        z.array(
          z.object({ name: z.coerce.string(), value: z.coerce.string() }),
        ),
        z.enum([""]),
      ]),
      days_until_due: z.coerce.number().optional(),
      default_payment_method: z.coerce.string().optional(),
      default_source: z.union([z.coerce.string(), z.enum([""])]),
      default_tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
      description: z.coerce.string().optional(),
      discounts: z.union([
        z.array(
          z.object({
            coupon: z.coerce.string().optional(),
            discount: z.coerce.string().optional(),
          }),
        ),
        z.enum([""]),
      ]),
      due_date: z.coerce.number().optional(),
      effective_at: z.union([z.coerce.number(), z.enum([""])]),
      expand: z.array(z.coerce.string()).optional(),
      footer: z.coerce.string().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      on_behalf_of: z.union([z.coerce.string(), z.enum([""])]),
      payment_settings: z
        .object({
          default_mandate: z.union([z.coerce.string(), z.enum([""])]),
          payment_method_options: z
            .object({
              acss_debit: z.union([
                z.object({
                  mandate_options: z
                    .object({
                      transaction_type: z
                        .enum(["business", "personal"])
                        .optional(),
                    })
                    .optional(),
                  verification_method: z
                    .enum(["automatic", "instant", "microdeposits"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              bancontact: z.union([
                z.object({
                  preferred_language: z
                    .enum(["de", "en", "fr", "nl"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              card: z.union([
                z.object({
                  installments: z
                    .object({
                      enabled: z.coerce.boolean().optional(),
                      plan: z.union([
                        z.object({
                          count: z.coerce.number(),
                          interval: z.enum(["month"]),
                          type: z.enum(["fixed_count"]),
                        }),
                        z.enum([""]),
                      ]),
                    })
                    .optional(),
                  request_three_d_secure: z
                    .enum(["any", "automatic"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              customer_balance: z.union([
                z.object({
                  bank_transfer: z
                    .object({
                      eu_bank_transfer: z
                        .object({ country: z.coerce.string() })
                        .optional(),
                      type: z.coerce.string().optional(),
                    })
                    .optional(),
                  funding_type: z.coerce.string().optional(),
                }),
                z.enum([""]),
              ]),
              konbini: z.union([z.object({}), z.enum([""])]),
              us_bank_account: z.union([
                z.object({
                  financial_connections: z
                    .object({
                      permissions: z
                        .array(
                          z.enum([
                            "balances",
                            "ownership",
                            "payment_method",
                            "transactions",
                          ]),
                        )
                        .optional(),
                      prefetch: z.array(z.enum(["balances"])).optional(),
                    })
                    .optional(),
                  verification_method: z
                    .enum(["automatic", "instant", "microdeposits"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
            })
            .optional(),
          payment_method_types: z.union([
            z.array(
              z.enum([
                "ach_credit_transfer",
                "ach_debit",
                "acss_debit",
                "au_becs_debit",
                "bacs_debit",
                "bancontact",
                "boleto",
                "card",
                "cashapp",
                "customer_balance",
                "fpx",
                "giropay",
                "grabpay",
                "ideal",
                "konbini",
                "link",
                "paynow",
                "paypal",
                "promptpay",
                "sepa_debit",
                "sofort",
                "us_bank_account",
                "wechat_pay",
              ]),
            ),
            z.enum([""]),
          ]),
        })
        .optional(),
      rendering_options: z.union([
        z.object({
          amount_tax_display: z
            .enum(["", "exclude_tax", "include_inclusive_tax"])
            .optional(),
        }),
        z.enum([""]),
      ]),
      shipping_cost: z.union([
        z.object({
          shipping_rate: z.coerce.string().optional(),
          shipping_rate_data: z
            .object({
              delivery_estimate: z
                .object({
                  maximum: z
                    .object({
                      unit: z.enum([
                        "business_day",
                        "day",
                        "hour",
                        "month",
                        "week",
                      ]),
                      value: z.coerce.number(),
                    })
                    .optional(),
                  minimum: z
                    .object({
                      unit: z.enum([
                        "business_day",
                        "day",
                        "hour",
                        "month",
                        "week",
                      ]),
                      value: z.coerce.number(),
                    })
                    .optional(),
                })
                .optional(),
              display_name: z.coerce.string(),
              fixed_amount: z
                .object({
                  amount: z.coerce.number(),
                  currency: z.coerce.string(),
                  currency_options: z.object({}).optional(),
                })
                .optional(),
              metadata: z.object({}).optional(),
              tax_behavior: z
                .enum(["exclusive", "inclusive", "unspecified"])
                .optional(),
              tax_code: z.coerce.string().optional(),
              type: z.enum(["fixed_amount"]).optional(),
            })
            .optional(),
        }),
        z.enum([""]),
      ]),
      shipping_details: z.union([
        z.object({
          address: z.object({
            city: z.coerce.string().optional(),
            country: z.coerce.string().optional(),
            line1: z.coerce.string().optional(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string().optional(),
            state: z.coerce.string().optional(),
          }),
          name: z.coerce.string(),
          phone: z.union([z.coerce.string(), z.enum([""])]),
        }),
        z.enum([""]),
      ]),
      statement_descriptor: z.coerce.string().optional(),
      transfer_data: z.union([
        z.object({
          amount: z.coerce.number().optional(),
          destination: z.coerce.string(),
        }),
        z.enum([""]),
      ]),
    })
    .optional()

  const postInvoicesInvoiceResponseValidator = responseValidationFactory(
    [["200", s_invoice]],
    s_error,
  )

  router.post(
    "postInvoicesInvoice",
    "/v1/invoices/:invoice",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postInvoicesInvoiceParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          postInvoicesInvoiceBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postInvoicesInvoice(
        input,
        ctx,
      )

      ctx.body = postInvoicesInvoiceResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postInvoicesInvoiceFinalizeParamSchema = z.object({
    invoice: z.coerce.string(),
  })

  const postInvoicesInvoiceFinalizeBodySchema = z
    .object({
      auto_advance: z.coerce.boolean().optional(),
      expand: z.array(z.coerce.string()).optional(),
    })
    .optional()

  const postInvoicesInvoiceFinalizeResponseValidator =
    responseValidationFactory([["200", s_invoice]], s_error)

  router.post(
    "postInvoicesInvoiceFinalize",
    "/v1/invoices/:invoice/finalize",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postInvoicesInvoiceFinalizeParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postInvoicesInvoiceFinalizeBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postInvoicesInvoiceFinalize(
        input,
        ctx,
      )

      ctx.body = postInvoicesInvoiceFinalizeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getInvoicesInvoiceLinesParamSchema = z.object({
    invoice: z.coerce.string(),
  })

  const getInvoicesInvoiceLinesQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getInvoicesInvoiceLinesBodySchema = z.object({}).optional()

  const getInvoicesInvoiceLinesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_line_item)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getInvoicesInvoiceLines",
    "/v1/invoices/:invoice/lines",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getInvoicesInvoiceLinesParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(getInvoicesInvoiceLinesQuerySchema, ctx.query),
        body: parseRequestInput(
          getInvoicesInvoiceLinesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getInvoicesInvoiceLines(
        input,
        ctx,
      )

      ctx.body = getInvoicesInvoiceLinesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postInvoicesInvoiceMarkUncollectibleParamSchema = z.object({
    invoice: z.coerce.string(),
  })

  const postInvoicesInvoiceMarkUncollectibleBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postInvoicesInvoiceMarkUncollectibleResponseValidator =
    responseValidationFactory([["200", s_invoice]], s_error)

  router.post(
    "postInvoicesInvoiceMarkUncollectible",
    "/v1/invoices/:invoice/mark_uncollectible",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postInvoicesInvoiceMarkUncollectibleParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postInvoicesInvoiceMarkUncollectibleBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postInvoicesInvoiceMarkUncollectible(input, ctx)

      ctx.body = postInvoicesInvoiceMarkUncollectibleResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postInvoicesInvoicePayParamSchema = z.object({
    invoice: z.coerce.string(),
  })

  const postInvoicesInvoicePayBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      forgive: z.coerce.boolean().optional(),
      mandate: z.union([z.coerce.string(), z.enum([""])]),
      off_session: z.coerce.boolean().optional(),
      paid_out_of_band: z.coerce.boolean().optional(),
      payment_method: z.coerce.string().optional(),
      source: z.coerce.string().optional(),
    })
    .optional()

  const postInvoicesInvoicePayResponseValidator = responseValidationFactory(
    [["200", s_invoice]],
    s_error,
  )

  router.post(
    "postInvoicesInvoicePay",
    "/v1/invoices/:invoice/pay",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postInvoicesInvoicePayParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postInvoicesInvoicePayBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postInvoicesInvoicePay(
        input,
        ctx,
      )

      ctx.body = postInvoicesInvoicePayResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postInvoicesInvoiceSendParamSchema = z.object({
    invoice: z.coerce.string(),
  })

  const postInvoicesInvoiceSendBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postInvoicesInvoiceSendResponseValidator = responseValidationFactory(
    [["200", s_invoice]],
    s_error,
  )

  router.post(
    "postInvoicesInvoiceSend",
    "/v1/invoices/:invoice/send",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postInvoicesInvoiceSendParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postInvoicesInvoiceSendBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postInvoicesInvoiceSend(
        input,
        ctx,
      )

      ctx.body = postInvoicesInvoiceSendResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postInvoicesInvoiceVoidParamSchema = z.object({
    invoice: z.coerce.string(),
  })

  const postInvoicesInvoiceVoidBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postInvoicesInvoiceVoidResponseValidator = responseValidationFactory(
    [["200", s_invoice]],
    s_error,
  )

  router.post(
    "postInvoicesInvoiceVoid",
    "/v1/invoices/:invoice/void",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postInvoicesInvoiceVoidParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postInvoicesInvoiceVoidBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postInvoicesInvoiceVoid(
        input,
        ctx,
      )

      ctx.body = postInvoicesInvoiceVoidResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIssuingAuthorizationsQuerySchema = z.object({
    card: z.coerce.string().optional(),
    cardholder: z.coerce.string().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z.enum(["closed", "pending", "reversed"]).optional(),
  })

  const getIssuingAuthorizationsBodySchema = z.object({}).optional()

  const getIssuingAuthorizationsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_issuing_authorization)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getIssuingAuthorizations",
    "/v1/issuing/authorizations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getIssuingAuthorizationsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getIssuingAuthorizationsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getIssuingAuthorizations(
        input,
        ctx,
      )

      ctx.body = getIssuingAuthorizationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIssuingAuthorizationsAuthorizationParamSchema = z.object({
    authorization: z.coerce.string(),
  })

  const getIssuingAuthorizationsAuthorizationQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getIssuingAuthorizationsAuthorizationBodySchema = z
    .object({})
    .optional()

  const getIssuingAuthorizationsAuthorizationResponseValidator =
    responseValidationFactory([["200", s_issuing_authorization]], s_error)

  router.get(
    "getIssuingAuthorizationsAuthorization",
    "/v1/issuing/authorizations/:authorization",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getIssuingAuthorizationsAuthorizationParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getIssuingAuthorizationsAuthorizationQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getIssuingAuthorizationsAuthorizationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getIssuingAuthorizationsAuthorization(input, ctx)

      ctx.body = getIssuingAuthorizationsAuthorizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postIssuingAuthorizationsAuthorizationParamSchema = z.object({
    authorization: z.coerce.string(),
  })

  const postIssuingAuthorizationsAuthorizationBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postIssuingAuthorizationsAuthorizationResponseValidator =
    responseValidationFactory([["200", s_issuing_authorization]], s_error)

  router.post(
    "postIssuingAuthorizationsAuthorization",
    "/v1/issuing/authorizations/:authorization",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postIssuingAuthorizationsAuthorizationParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postIssuingAuthorizationsAuthorizationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postIssuingAuthorizationsAuthorization(input, ctx)

      ctx.body = postIssuingAuthorizationsAuthorizationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postIssuingAuthorizationsAuthorizationApproveParamSchema = z.object({
    authorization: z.coerce.string(),
  })

  const postIssuingAuthorizationsAuthorizationApproveBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postIssuingAuthorizationsAuthorizationApproveResponseValidator =
    responseValidationFactory([["200", s_issuing_authorization]], s_error)

  router.post(
    "postIssuingAuthorizationsAuthorizationApprove",
    "/v1/issuing/authorizations/:authorization/approve",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postIssuingAuthorizationsAuthorizationApproveParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postIssuingAuthorizationsAuthorizationApproveBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postIssuingAuthorizationsAuthorizationApprove(
          input,
          ctx,
        )

      ctx.body = postIssuingAuthorizationsAuthorizationApproveResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postIssuingAuthorizationsAuthorizationDeclineParamSchema = z.object({
    authorization: z.coerce.string(),
  })

  const postIssuingAuthorizationsAuthorizationDeclineBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postIssuingAuthorizationsAuthorizationDeclineResponseValidator =
    responseValidationFactory([["200", s_issuing_authorization]], s_error)

  router.post(
    "postIssuingAuthorizationsAuthorizationDecline",
    "/v1/issuing/authorizations/:authorization/decline",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postIssuingAuthorizationsAuthorizationDeclineParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postIssuingAuthorizationsAuthorizationDeclineBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postIssuingAuthorizationsAuthorizationDecline(
          input,
          ctx,
        )

      ctx.body = postIssuingAuthorizationsAuthorizationDeclineResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getIssuingCardholdersQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    email: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    phone_number: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
    status: z.enum(["active", "blocked", "inactive"]).optional(),
    type: z.enum(["company", "individual"]).optional(),
  })

  const getIssuingCardholdersBodySchema = z.object({}).optional()

  const getIssuingCardholdersResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_issuing_cardholder)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getIssuingCardholders",
    "/v1/issuing/cardholders",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getIssuingCardholdersQuerySchema, ctx.query),
        body: parseRequestInput(
          getIssuingCardholdersBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getIssuingCardholders(
        input,
        ctx,
      )

      ctx.body = getIssuingCardholdersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postIssuingCardholdersBodySchema = z.object({
    billing: z.object({
      address: z.object({
        city: z.coerce.string(),
        country: z.coerce.string(),
        line1: z.coerce.string(),
        line2: z.coerce.string().optional(),
        postal_code: z.coerce.string(),
        state: z.coerce.string().optional(),
      }),
    }),
    company: z.object({ tax_id: z.coerce.string().optional() }).optional(),
    email: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    individual: z
      .object({
        card_issuing: z
          .object({
            user_terms_acceptance: z
              .object({
                date: z.coerce.number().optional(),
                ip: z.coerce.string().optional(),
                user_agent: z.union([z.coerce.string(), z.enum([""])]),
              })
              .optional(),
          })
          .optional(),
        dob: z
          .object({
            day: z.coerce.number(),
            month: z.coerce.number(),
            year: z.coerce.number(),
          })
          .optional(),
        first_name: z.coerce.string().optional(),
        last_name: z.coerce.string().optional(),
        verification: z
          .object({
            document: z
              .object({
                back: z.coerce.string().optional(),
                front: z.coerce.string().optional(),
              })
              .optional(),
          })
          .optional(),
      })
      .optional(),
    metadata: z.object({}).optional(),
    name: z.coerce.string(),
    phone_number: z.coerce.string().optional(),
    preferred_locales: z
      .array(z.enum(["de", "en", "es", "fr", "it"]))
      .optional(),
    spending_controls: z
      .object({
        allowed_categories: z
          .array(
            z.enum([
              "ac_refrigeration_repair",
              "accounting_bookkeeping_services",
              "advertising_services",
              "agricultural_cooperative",
              "airlines_air_carriers",
              "airports_flying_fields",
              "ambulance_services",
              "amusement_parks_carnivals",
              "antique_reproductions",
              "antique_shops",
              "aquariums",
              "architectural_surveying_services",
              "art_dealers_and_galleries",
              "artists_supply_and_craft_shops",
              "auto_and_home_supply_stores",
              "auto_body_repair_shops",
              "auto_paint_shops",
              "auto_service_shops",
              "automated_cash_disburse",
              "automated_fuel_dispensers",
              "automobile_associations",
              "automotive_parts_and_accessories_stores",
              "automotive_tire_stores",
              "bail_and_bond_payments",
              "bakeries",
              "bands_orchestras",
              "barber_and_beauty_shops",
              "betting_casino_gambling",
              "bicycle_shops",
              "billiard_pool_establishments",
              "boat_dealers",
              "boat_rentals_and_leases",
              "book_stores",
              "books_periodicals_and_newspapers",
              "bowling_alleys",
              "bus_lines",
              "business_secretarial_schools",
              "buying_shopping_services",
              "cable_satellite_and_other_pay_television_and_radio",
              "camera_and_photographic_supply_stores",
              "candy_nut_and_confectionery_stores",
              "car_and_truck_dealers_new_used",
              "car_and_truck_dealers_used_only",
              "car_rental_agencies",
              "car_washes",
              "carpentry_services",
              "carpet_upholstery_cleaning",
              "caterers",
              "charitable_and_social_service_organizations_fundraising",
              "chemicals_and_allied_products",
              "child_care_services",
              "childrens_and_infants_wear_stores",
              "chiropodists_podiatrists",
              "chiropractors",
              "cigar_stores_and_stands",
              "civic_social_fraternal_associations",
              "cleaning_and_maintenance",
              "clothing_rental",
              "colleges_universities",
              "commercial_equipment",
              "commercial_footwear",
              "commercial_photography_art_and_graphics",
              "commuter_transport_and_ferries",
              "computer_network_services",
              "computer_programming",
              "computer_repair",
              "computer_software_stores",
              "computers_peripherals_and_software",
              "concrete_work_services",
              "construction_materials",
              "consulting_public_relations",
              "correspondence_schools",
              "cosmetic_stores",
              "counseling_services",
              "country_clubs",
              "courier_services",
              "court_costs",
              "credit_reporting_agencies",
              "cruise_lines",
              "dairy_products_stores",
              "dance_hall_studios_schools",
              "dating_escort_services",
              "dentists_orthodontists",
              "department_stores",
              "detective_agencies",
              "digital_goods_applications",
              "digital_goods_games",
              "digital_goods_large_volume",
              "digital_goods_media",
              "direct_marketing_catalog_merchant",
              "direct_marketing_combination_catalog_and_retail_merchant",
              "direct_marketing_inbound_telemarketing",
              "direct_marketing_insurance_services",
              "direct_marketing_other",
              "direct_marketing_outbound_telemarketing",
              "direct_marketing_subscription",
              "direct_marketing_travel",
              "discount_stores",
              "doctors",
              "door_to_door_sales",
              "drapery_window_covering_and_upholstery_stores",
              "drinking_places",
              "drug_stores_and_pharmacies",
              "drugs_drug_proprietaries_and_druggist_sundries",
              "dry_cleaners",
              "durable_goods",
              "duty_free_stores",
              "eating_places_restaurants",
              "educational_services",
              "electric_razor_stores",
              "electric_vehicle_charging",
              "electrical_parts_and_equipment",
              "electrical_services",
              "electronics_repair_shops",
              "electronics_stores",
              "elementary_secondary_schools",
              "emergency_services_gcas_visa_use_only",
              "employment_temp_agencies",
              "equipment_rental",
              "exterminating_services",
              "family_clothing_stores",
              "fast_food_restaurants",
              "financial_institutions",
              "fines_government_administrative_entities",
              "fireplace_fireplace_screens_and_accessories_stores",
              "floor_covering_stores",
              "florists",
              "florists_supplies_nursery_stock_and_flowers",
              "freezer_and_locker_meat_provisioners",
              "fuel_dealers_non_automotive",
              "funeral_services_crematories",
              "furniture_home_furnishings_and_equipment_stores_except_appliances",
              "furniture_repair_refinishing",
              "furriers_and_fur_shops",
              "general_services",
              "gift_card_novelty_and_souvenir_shops",
              "glass_paint_and_wallpaper_stores",
              "glassware_crystal_stores",
              "golf_courses_public",
              "government_licensed_horse_dog_racing_us_region_only",
              "government_licensed_online_casions_online_gambling_us_region_only",
              "government_owned_lotteries_non_us_region",
              "government_owned_lotteries_us_region_only",
              "government_services",
              "grocery_stores_supermarkets",
              "hardware_equipment_and_supplies",
              "hardware_stores",
              "health_and_beauty_spas",
              "hearing_aids_sales_and_supplies",
              "heating_plumbing_a_c",
              "hobby_toy_and_game_shops",
              "home_supply_warehouse_stores",
              "hospitals",
              "hotels_motels_and_resorts",
              "household_appliance_stores",
              "industrial_supplies",
              "information_retrieval_services",
              "insurance_default",
              "insurance_underwriting_premiums",
              "intra_company_purchases",
              "jewelry_stores_watches_clocks_and_silverware_stores",
              "landscaping_services",
              "laundries",
              "laundry_cleaning_services",
              "legal_services_attorneys",
              "luggage_and_leather_goods_stores",
              "lumber_building_materials_stores",
              "manual_cash_disburse",
              "marinas_service_and_supplies",
              "marketplaces",
              "masonry_stonework_and_plaster",
              "massage_parlors",
              "medical_and_dental_labs",
              "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
              "medical_services",
              "membership_organizations",
              "mens_and_boys_clothing_and_accessories_stores",
              "mens_womens_clothing_stores",
              "metal_service_centers",
              "miscellaneous",
              "miscellaneous_apparel_and_accessory_shops",
              "miscellaneous_auto_dealers",
              "miscellaneous_business_services",
              "miscellaneous_food_stores",
              "miscellaneous_general_merchandise",
              "miscellaneous_general_services",
              "miscellaneous_home_furnishing_specialty_stores",
              "miscellaneous_publishing_and_printing",
              "miscellaneous_recreation_services",
              "miscellaneous_repair_shops",
              "miscellaneous_specialty_retail",
              "mobile_home_dealers",
              "motion_picture_theaters",
              "motor_freight_carriers_and_trucking",
              "motor_homes_dealers",
              "motor_vehicle_supplies_and_new_parts",
              "motorcycle_shops_and_dealers",
              "motorcycle_shops_dealers",
              "music_stores_musical_instruments_pianos_and_sheet_music",
              "news_dealers_and_newsstands",
              "non_fi_money_orders",
              "non_fi_stored_value_card_purchase_load",
              "nondurable_goods",
              "nurseries_lawn_and_garden_supply_stores",
              "nursing_personal_care",
              "office_and_commercial_furniture",
              "opticians_eyeglasses",
              "optometrists_ophthalmologist",
              "orthopedic_goods_prosthetic_devices",
              "osteopaths",
              "package_stores_beer_wine_and_liquor",
              "paints_varnishes_and_supplies",
              "parking_lots_garages",
              "passenger_railways",
              "pawn_shops",
              "pet_shops_pet_food_and_supplies",
              "petroleum_and_petroleum_products",
              "photo_developing",
              "photographic_photocopy_microfilm_equipment_and_supplies",
              "photographic_studios",
              "picture_video_production",
              "piece_goods_notions_and_other_dry_goods",
              "plumbing_heating_equipment_and_supplies",
              "political_organizations",
              "postal_services_government_only",
              "precious_stones_and_metals_watches_and_jewelry",
              "professional_services",
              "public_warehousing_and_storage",
              "quick_copy_repro_and_blueprint",
              "railroads",
              "real_estate_agents_and_managers_rentals",
              "record_stores",
              "recreational_vehicle_rentals",
              "religious_goods_stores",
              "religious_organizations",
              "roofing_siding_sheet_metal",
              "secretarial_support_services",
              "security_brokers_dealers",
              "service_stations",
              "sewing_needlework_fabric_and_piece_goods_stores",
              "shoe_repair_hat_cleaning",
              "shoe_stores",
              "small_appliance_repair",
              "snowmobile_dealers",
              "special_trade_services",
              "specialty_cleaning",
              "sporting_goods_stores",
              "sporting_recreation_camps",
              "sports_and_riding_apparel_stores",
              "sports_clubs_fields",
              "stamp_and_coin_stores",
              "stationary_office_supplies_printing_and_writing_paper",
              "stationery_stores_office_and_school_supply_stores",
              "swimming_pools_sales",
              "t_ui_travel_germany",
              "tailors_alterations",
              "tax_payments_government_agencies",
              "tax_preparation_services",
              "taxicabs_limousines",
              "telecommunication_equipment_and_telephone_sales",
              "telecommunication_services",
              "telegraph_services",
              "tent_and_awning_shops",
              "testing_laboratories",
              "theatrical_ticket_agencies",
              "timeshares",
              "tire_retreading_and_repair",
              "tolls_bridge_fees",
              "tourist_attractions_and_exhibits",
              "towing_services",
              "trailer_parks_campgrounds",
              "transportation_services",
              "travel_agencies_tour_operators",
              "truck_stop_iteration",
              "truck_utility_trailer_rentals",
              "typesetting_plate_making_and_related_services",
              "typewriter_stores",
              "u_s_federal_government_agencies_or_departments",
              "uniforms_commercial_clothing",
              "used_merchandise_and_secondhand_stores",
              "utilities",
              "variety_stores",
              "veterinary_services",
              "video_amusement_game_supplies",
              "video_game_arcades",
              "video_tape_rental_stores",
              "vocational_trade_schools",
              "watch_jewelry_repair",
              "welding_repair",
              "wholesale_clubs",
              "wig_and_toupee_stores",
              "wires_money_orders",
              "womens_accessory_and_specialty_shops",
              "womens_ready_to_wear_stores",
              "wrecking_and_salvage_yards",
            ]),
          )
          .optional(),
        blocked_categories: z
          .array(
            z.enum([
              "ac_refrigeration_repair",
              "accounting_bookkeeping_services",
              "advertising_services",
              "agricultural_cooperative",
              "airlines_air_carriers",
              "airports_flying_fields",
              "ambulance_services",
              "amusement_parks_carnivals",
              "antique_reproductions",
              "antique_shops",
              "aquariums",
              "architectural_surveying_services",
              "art_dealers_and_galleries",
              "artists_supply_and_craft_shops",
              "auto_and_home_supply_stores",
              "auto_body_repair_shops",
              "auto_paint_shops",
              "auto_service_shops",
              "automated_cash_disburse",
              "automated_fuel_dispensers",
              "automobile_associations",
              "automotive_parts_and_accessories_stores",
              "automotive_tire_stores",
              "bail_and_bond_payments",
              "bakeries",
              "bands_orchestras",
              "barber_and_beauty_shops",
              "betting_casino_gambling",
              "bicycle_shops",
              "billiard_pool_establishments",
              "boat_dealers",
              "boat_rentals_and_leases",
              "book_stores",
              "books_periodicals_and_newspapers",
              "bowling_alleys",
              "bus_lines",
              "business_secretarial_schools",
              "buying_shopping_services",
              "cable_satellite_and_other_pay_television_and_radio",
              "camera_and_photographic_supply_stores",
              "candy_nut_and_confectionery_stores",
              "car_and_truck_dealers_new_used",
              "car_and_truck_dealers_used_only",
              "car_rental_agencies",
              "car_washes",
              "carpentry_services",
              "carpet_upholstery_cleaning",
              "caterers",
              "charitable_and_social_service_organizations_fundraising",
              "chemicals_and_allied_products",
              "child_care_services",
              "childrens_and_infants_wear_stores",
              "chiropodists_podiatrists",
              "chiropractors",
              "cigar_stores_and_stands",
              "civic_social_fraternal_associations",
              "cleaning_and_maintenance",
              "clothing_rental",
              "colleges_universities",
              "commercial_equipment",
              "commercial_footwear",
              "commercial_photography_art_and_graphics",
              "commuter_transport_and_ferries",
              "computer_network_services",
              "computer_programming",
              "computer_repair",
              "computer_software_stores",
              "computers_peripherals_and_software",
              "concrete_work_services",
              "construction_materials",
              "consulting_public_relations",
              "correspondence_schools",
              "cosmetic_stores",
              "counseling_services",
              "country_clubs",
              "courier_services",
              "court_costs",
              "credit_reporting_agencies",
              "cruise_lines",
              "dairy_products_stores",
              "dance_hall_studios_schools",
              "dating_escort_services",
              "dentists_orthodontists",
              "department_stores",
              "detective_agencies",
              "digital_goods_applications",
              "digital_goods_games",
              "digital_goods_large_volume",
              "digital_goods_media",
              "direct_marketing_catalog_merchant",
              "direct_marketing_combination_catalog_and_retail_merchant",
              "direct_marketing_inbound_telemarketing",
              "direct_marketing_insurance_services",
              "direct_marketing_other",
              "direct_marketing_outbound_telemarketing",
              "direct_marketing_subscription",
              "direct_marketing_travel",
              "discount_stores",
              "doctors",
              "door_to_door_sales",
              "drapery_window_covering_and_upholstery_stores",
              "drinking_places",
              "drug_stores_and_pharmacies",
              "drugs_drug_proprietaries_and_druggist_sundries",
              "dry_cleaners",
              "durable_goods",
              "duty_free_stores",
              "eating_places_restaurants",
              "educational_services",
              "electric_razor_stores",
              "electric_vehicle_charging",
              "electrical_parts_and_equipment",
              "electrical_services",
              "electronics_repair_shops",
              "electronics_stores",
              "elementary_secondary_schools",
              "emergency_services_gcas_visa_use_only",
              "employment_temp_agencies",
              "equipment_rental",
              "exterminating_services",
              "family_clothing_stores",
              "fast_food_restaurants",
              "financial_institutions",
              "fines_government_administrative_entities",
              "fireplace_fireplace_screens_and_accessories_stores",
              "floor_covering_stores",
              "florists",
              "florists_supplies_nursery_stock_and_flowers",
              "freezer_and_locker_meat_provisioners",
              "fuel_dealers_non_automotive",
              "funeral_services_crematories",
              "furniture_home_furnishings_and_equipment_stores_except_appliances",
              "furniture_repair_refinishing",
              "furriers_and_fur_shops",
              "general_services",
              "gift_card_novelty_and_souvenir_shops",
              "glass_paint_and_wallpaper_stores",
              "glassware_crystal_stores",
              "golf_courses_public",
              "government_licensed_horse_dog_racing_us_region_only",
              "government_licensed_online_casions_online_gambling_us_region_only",
              "government_owned_lotteries_non_us_region",
              "government_owned_lotteries_us_region_only",
              "government_services",
              "grocery_stores_supermarkets",
              "hardware_equipment_and_supplies",
              "hardware_stores",
              "health_and_beauty_spas",
              "hearing_aids_sales_and_supplies",
              "heating_plumbing_a_c",
              "hobby_toy_and_game_shops",
              "home_supply_warehouse_stores",
              "hospitals",
              "hotels_motels_and_resorts",
              "household_appliance_stores",
              "industrial_supplies",
              "information_retrieval_services",
              "insurance_default",
              "insurance_underwriting_premiums",
              "intra_company_purchases",
              "jewelry_stores_watches_clocks_and_silverware_stores",
              "landscaping_services",
              "laundries",
              "laundry_cleaning_services",
              "legal_services_attorneys",
              "luggage_and_leather_goods_stores",
              "lumber_building_materials_stores",
              "manual_cash_disburse",
              "marinas_service_and_supplies",
              "marketplaces",
              "masonry_stonework_and_plaster",
              "massage_parlors",
              "medical_and_dental_labs",
              "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
              "medical_services",
              "membership_organizations",
              "mens_and_boys_clothing_and_accessories_stores",
              "mens_womens_clothing_stores",
              "metal_service_centers",
              "miscellaneous",
              "miscellaneous_apparel_and_accessory_shops",
              "miscellaneous_auto_dealers",
              "miscellaneous_business_services",
              "miscellaneous_food_stores",
              "miscellaneous_general_merchandise",
              "miscellaneous_general_services",
              "miscellaneous_home_furnishing_specialty_stores",
              "miscellaneous_publishing_and_printing",
              "miscellaneous_recreation_services",
              "miscellaneous_repair_shops",
              "miscellaneous_specialty_retail",
              "mobile_home_dealers",
              "motion_picture_theaters",
              "motor_freight_carriers_and_trucking",
              "motor_homes_dealers",
              "motor_vehicle_supplies_and_new_parts",
              "motorcycle_shops_and_dealers",
              "motorcycle_shops_dealers",
              "music_stores_musical_instruments_pianos_and_sheet_music",
              "news_dealers_and_newsstands",
              "non_fi_money_orders",
              "non_fi_stored_value_card_purchase_load",
              "nondurable_goods",
              "nurseries_lawn_and_garden_supply_stores",
              "nursing_personal_care",
              "office_and_commercial_furniture",
              "opticians_eyeglasses",
              "optometrists_ophthalmologist",
              "orthopedic_goods_prosthetic_devices",
              "osteopaths",
              "package_stores_beer_wine_and_liquor",
              "paints_varnishes_and_supplies",
              "parking_lots_garages",
              "passenger_railways",
              "pawn_shops",
              "pet_shops_pet_food_and_supplies",
              "petroleum_and_petroleum_products",
              "photo_developing",
              "photographic_photocopy_microfilm_equipment_and_supplies",
              "photographic_studios",
              "picture_video_production",
              "piece_goods_notions_and_other_dry_goods",
              "plumbing_heating_equipment_and_supplies",
              "political_organizations",
              "postal_services_government_only",
              "precious_stones_and_metals_watches_and_jewelry",
              "professional_services",
              "public_warehousing_and_storage",
              "quick_copy_repro_and_blueprint",
              "railroads",
              "real_estate_agents_and_managers_rentals",
              "record_stores",
              "recreational_vehicle_rentals",
              "religious_goods_stores",
              "religious_organizations",
              "roofing_siding_sheet_metal",
              "secretarial_support_services",
              "security_brokers_dealers",
              "service_stations",
              "sewing_needlework_fabric_and_piece_goods_stores",
              "shoe_repair_hat_cleaning",
              "shoe_stores",
              "small_appliance_repair",
              "snowmobile_dealers",
              "special_trade_services",
              "specialty_cleaning",
              "sporting_goods_stores",
              "sporting_recreation_camps",
              "sports_and_riding_apparel_stores",
              "sports_clubs_fields",
              "stamp_and_coin_stores",
              "stationary_office_supplies_printing_and_writing_paper",
              "stationery_stores_office_and_school_supply_stores",
              "swimming_pools_sales",
              "t_ui_travel_germany",
              "tailors_alterations",
              "tax_payments_government_agencies",
              "tax_preparation_services",
              "taxicabs_limousines",
              "telecommunication_equipment_and_telephone_sales",
              "telecommunication_services",
              "telegraph_services",
              "tent_and_awning_shops",
              "testing_laboratories",
              "theatrical_ticket_agencies",
              "timeshares",
              "tire_retreading_and_repair",
              "tolls_bridge_fees",
              "tourist_attractions_and_exhibits",
              "towing_services",
              "trailer_parks_campgrounds",
              "transportation_services",
              "travel_agencies_tour_operators",
              "truck_stop_iteration",
              "truck_utility_trailer_rentals",
              "typesetting_plate_making_and_related_services",
              "typewriter_stores",
              "u_s_federal_government_agencies_or_departments",
              "uniforms_commercial_clothing",
              "used_merchandise_and_secondhand_stores",
              "utilities",
              "variety_stores",
              "veterinary_services",
              "video_amusement_game_supplies",
              "video_game_arcades",
              "video_tape_rental_stores",
              "vocational_trade_schools",
              "watch_jewelry_repair",
              "welding_repair",
              "wholesale_clubs",
              "wig_and_toupee_stores",
              "wires_money_orders",
              "womens_accessory_and_specialty_shops",
              "womens_ready_to_wear_stores",
              "wrecking_and_salvage_yards",
            ]),
          )
          .optional(),
        spending_limits: z
          .array(
            z.object({
              amount: z.coerce.number(),
              categories: z
                .array(
                  z.enum([
                    "ac_refrigeration_repair",
                    "accounting_bookkeeping_services",
                    "advertising_services",
                    "agricultural_cooperative",
                    "airlines_air_carriers",
                    "airports_flying_fields",
                    "ambulance_services",
                    "amusement_parks_carnivals",
                    "antique_reproductions",
                    "antique_shops",
                    "aquariums",
                    "architectural_surveying_services",
                    "art_dealers_and_galleries",
                    "artists_supply_and_craft_shops",
                    "auto_and_home_supply_stores",
                    "auto_body_repair_shops",
                    "auto_paint_shops",
                    "auto_service_shops",
                    "automated_cash_disburse",
                    "automated_fuel_dispensers",
                    "automobile_associations",
                    "automotive_parts_and_accessories_stores",
                    "automotive_tire_stores",
                    "bail_and_bond_payments",
                    "bakeries",
                    "bands_orchestras",
                    "barber_and_beauty_shops",
                    "betting_casino_gambling",
                    "bicycle_shops",
                    "billiard_pool_establishments",
                    "boat_dealers",
                    "boat_rentals_and_leases",
                    "book_stores",
                    "books_periodicals_and_newspapers",
                    "bowling_alleys",
                    "bus_lines",
                    "business_secretarial_schools",
                    "buying_shopping_services",
                    "cable_satellite_and_other_pay_television_and_radio",
                    "camera_and_photographic_supply_stores",
                    "candy_nut_and_confectionery_stores",
                    "car_and_truck_dealers_new_used",
                    "car_and_truck_dealers_used_only",
                    "car_rental_agencies",
                    "car_washes",
                    "carpentry_services",
                    "carpet_upholstery_cleaning",
                    "caterers",
                    "charitable_and_social_service_organizations_fundraising",
                    "chemicals_and_allied_products",
                    "child_care_services",
                    "childrens_and_infants_wear_stores",
                    "chiropodists_podiatrists",
                    "chiropractors",
                    "cigar_stores_and_stands",
                    "civic_social_fraternal_associations",
                    "cleaning_and_maintenance",
                    "clothing_rental",
                    "colleges_universities",
                    "commercial_equipment",
                    "commercial_footwear",
                    "commercial_photography_art_and_graphics",
                    "commuter_transport_and_ferries",
                    "computer_network_services",
                    "computer_programming",
                    "computer_repair",
                    "computer_software_stores",
                    "computers_peripherals_and_software",
                    "concrete_work_services",
                    "construction_materials",
                    "consulting_public_relations",
                    "correspondence_schools",
                    "cosmetic_stores",
                    "counseling_services",
                    "country_clubs",
                    "courier_services",
                    "court_costs",
                    "credit_reporting_agencies",
                    "cruise_lines",
                    "dairy_products_stores",
                    "dance_hall_studios_schools",
                    "dating_escort_services",
                    "dentists_orthodontists",
                    "department_stores",
                    "detective_agencies",
                    "digital_goods_applications",
                    "digital_goods_games",
                    "digital_goods_large_volume",
                    "digital_goods_media",
                    "direct_marketing_catalog_merchant",
                    "direct_marketing_combination_catalog_and_retail_merchant",
                    "direct_marketing_inbound_telemarketing",
                    "direct_marketing_insurance_services",
                    "direct_marketing_other",
                    "direct_marketing_outbound_telemarketing",
                    "direct_marketing_subscription",
                    "direct_marketing_travel",
                    "discount_stores",
                    "doctors",
                    "door_to_door_sales",
                    "drapery_window_covering_and_upholstery_stores",
                    "drinking_places",
                    "drug_stores_and_pharmacies",
                    "drugs_drug_proprietaries_and_druggist_sundries",
                    "dry_cleaners",
                    "durable_goods",
                    "duty_free_stores",
                    "eating_places_restaurants",
                    "educational_services",
                    "electric_razor_stores",
                    "electric_vehicle_charging",
                    "electrical_parts_and_equipment",
                    "electrical_services",
                    "electronics_repair_shops",
                    "electronics_stores",
                    "elementary_secondary_schools",
                    "emergency_services_gcas_visa_use_only",
                    "employment_temp_agencies",
                    "equipment_rental",
                    "exterminating_services",
                    "family_clothing_stores",
                    "fast_food_restaurants",
                    "financial_institutions",
                    "fines_government_administrative_entities",
                    "fireplace_fireplace_screens_and_accessories_stores",
                    "floor_covering_stores",
                    "florists",
                    "florists_supplies_nursery_stock_and_flowers",
                    "freezer_and_locker_meat_provisioners",
                    "fuel_dealers_non_automotive",
                    "funeral_services_crematories",
                    "furniture_home_furnishings_and_equipment_stores_except_appliances",
                    "furniture_repair_refinishing",
                    "furriers_and_fur_shops",
                    "general_services",
                    "gift_card_novelty_and_souvenir_shops",
                    "glass_paint_and_wallpaper_stores",
                    "glassware_crystal_stores",
                    "golf_courses_public",
                    "government_licensed_horse_dog_racing_us_region_only",
                    "government_licensed_online_casions_online_gambling_us_region_only",
                    "government_owned_lotteries_non_us_region",
                    "government_owned_lotteries_us_region_only",
                    "government_services",
                    "grocery_stores_supermarkets",
                    "hardware_equipment_and_supplies",
                    "hardware_stores",
                    "health_and_beauty_spas",
                    "hearing_aids_sales_and_supplies",
                    "heating_plumbing_a_c",
                    "hobby_toy_and_game_shops",
                    "home_supply_warehouse_stores",
                    "hospitals",
                    "hotels_motels_and_resorts",
                    "household_appliance_stores",
                    "industrial_supplies",
                    "information_retrieval_services",
                    "insurance_default",
                    "insurance_underwriting_premiums",
                    "intra_company_purchases",
                    "jewelry_stores_watches_clocks_and_silverware_stores",
                    "landscaping_services",
                    "laundries",
                    "laundry_cleaning_services",
                    "legal_services_attorneys",
                    "luggage_and_leather_goods_stores",
                    "lumber_building_materials_stores",
                    "manual_cash_disburse",
                    "marinas_service_and_supplies",
                    "marketplaces",
                    "masonry_stonework_and_plaster",
                    "massage_parlors",
                    "medical_and_dental_labs",
                    "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                    "medical_services",
                    "membership_organizations",
                    "mens_and_boys_clothing_and_accessories_stores",
                    "mens_womens_clothing_stores",
                    "metal_service_centers",
                    "miscellaneous",
                    "miscellaneous_apparel_and_accessory_shops",
                    "miscellaneous_auto_dealers",
                    "miscellaneous_business_services",
                    "miscellaneous_food_stores",
                    "miscellaneous_general_merchandise",
                    "miscellaneous_general_services",
                    "miscellaneous_home_furnishing_specialty_stores",
                    "miscellaneous_publishing_and_printing",
                    "miscellaneous_recreation_services",
                    "miscellaneous_repair_shops",
                    "miscellaneous_specialty_retail",
                    "mobile_home_dealers",
                    "motion_picture_theaters",
                    "motor_freight_carriers_and_trucking",
                    "motor_homes_dealers",
                    "motor_vehicle_supplies_and_new_parts",
                    "motorcycle_shops_and_dealers",
                    "motorcycle_shops_dealers",
                    "music_stores_musical_instruments_pianos_and_sheet_music",
                    "news_dealers_and_newsstands",
                    "non_fi_money_orders",
                    "non_fi_stored_value_card_purchase_load",
                    "nondurable_goods",
                    "nurseries_lawn_and_garden_supply_stores",
                    "nursing_personal_care",
                    "office_and_commercial_furniture",
                    "opticians_eyeglasses",
                    "optometrists_ophthalmologist",
                    "orthopedic_goods_prosthetic_devices",
                    "osteopaths",
                    "package_stores_beer_wine_and_liquor",
                    "paints_varnishes_and_supplies",
                    "parking_lots_garages",
                    "passenger_railways",
                    "pawn_shops",
                    "pet_shops_pet_food_and_supplies",
                    "petroleum_and_petroleum_products",
                    "photo_developing",
                    "photographic_photocopy_microfilm_equipment_and_supplies",
                    "photographic_studios",
                    "picture_video_production",
                    "piece_goods_notions_and_other_dry_goods",
                    "plumbing_heating_equipment_and_supplies",
                    "political_organizations",
                    "postal_services_government_only",
                    "precious_stones_and_metals_watches_and_jewelry",
                    "professional_services",
                    "public_warehousing_and_storage",
                    "quick_copy_repro_and_blueprint",
                    "railroads",
                    "real_estate_agents_and_managers_rentals",
                    "record_stores",
                    "recreational_vehicle_rentals",
                    "religious_goods_stores",
                    "religious_organizations",
                    "roofing_siding_sheet_metal",
                    "secretarial_support_services",
                    "security_brokers_dealers",
                    "service_stations",
                    "sewing_needlework_fabric_and_piece_goods_stores",
                    "shoe_repair_hat_cleaning",
                    "shoe_stores",
                    "small_appliance_repair",
                    "snowmobile_dealers",
                    "special_trade_services",
                    "specialty_cleaning",
                    "sporting_goods_stores",
                    "sporting_recreation_camps",
                    "sports_and_riding_apparel_stores",
                    "sports_clubs_fields",
                    "stamp_and_coin_stores",
                    "stationary_office_supplies_printing_and_writing_paper",
                    "stationery_stores_office_and_school_supply_stores",
                    "swimming_pools_sales",
                    "t_ui_travel_germany",
                    "tailors_alterations",
                    "tax_payments_government_agencies",
                    "tax_preparation_services",
                    "taxicabs_limousines",
                    "telecommunication_equipment_and_telephone_sales",
                    "telecommunication_services",
                    "telegraph_services",
                    "tent_and_awning_shops",
                    "testing_laboratories",
                    "theatrical_ticket_agencies",
                    "timeshares",
                    "tire_retreading_and_repair",
                    "tolls_bridge_fees",
                    "tourist_attractions_and_exhibits",
                    "towing_services",
                    "trailer_parks_campgrounds",
                    "transportation_services",
                    "travel_agencies_tour_operators",
                    "truck_stop_iteration",
                    "truck_utility_trailer_rentals",
                    "typesetting_plate_making_and_related_services",
                    "typewriter_stores",
                    "u_s_federal_government_agencies_or_departments",
                    "uniforms_commercial_clothing",
                    "used_merchandise_and_secondhand_stores",
                    "utilities",
                    "variety_stores",
                    "veterinary_services",
                    "video_amusement_game_supplies",
                    "video_game_arcades",
                    "video_tape_rental_stores",
                    "vocational_trade_schools",
                    "watch_jewelry_repair",
                    "welding_repair",
                    "wholesale_clubs",
                    "wig_and_toupee_stores",
                    "wires_money_orders",
                    "womens_accessory_and_specialty_shops",
                    "womens_ready_to_wear_stores",
                    "wrecking_and_salvage_yards",
                  ]),
                )
                .optional(),
              interval: z.enum([
                "all_time",
                "daily",
                "monthly",
                "per_authorization",
                "weekly",
                "yearly",
              ]),
            }),
          )
          .optional(),
        spending_limits_currency: z.coerce.string().optional(),
      })
      .optional(),
    status: z.enum(["active", "inactive"]).optional(),
    type: z.enum(["company", "individual"]).optional(),
  })

  const postIssuingCardholdersResponseValidator = responseValidationFactory(
    [["200", s_issuing_cardholder]],
    s_error,
  )

  router.post(
    "postIssuingCardholders",
    "/v1/issuing/cardholders",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postIssuingCardholdersBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postIssuingCardholders(
        input,
        ctx,
      )

      ctx.body = postIssuingCardholdersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIssuingCardholdersCardholderParamSchema = z.object({
    cardholder: z.coerce.string(),
  })

  const getIssuingCardholdersCardholderQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getIssuingCardholdersCardholderBodySchema = z.object({}).optional()

  const getIssuingCardholdersCardholderResponseValidator =
    responseValidationFactory([["200", s_issuing_cardholder]], s_error)

  router.get(
    "getIssuingCardholdersCardholder",
    "/v1/issuing/cardholders/:cardholder",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getIssuingCardholdersCardholderParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getIssuingCardholdersCardholderQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getIssuingCardholdersCardholderBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getIssuingCardholdersCardholder(input, ctx)

      ctx.body = getIssuingCardholdersCardholderResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postIssuingCardholdersCardholderParamSchema = z.object({
    cardholder: z.coerce.string(),
  })

  const postIssuingCardholdersCardholderBodySchema = z
    .object({
      billing: z
        .object({
          address: z.object({
            city: z.coerce.string(),
            country: z.coerce.string(),
            line1: z.coerce.string(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string(),
            state: z.coerce.string().optional(),
          }),
        })
        .optional(),
      company: z.object({ tax_id: z.coerce.string().optional() }).optional(),
      email: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      individual: z
        .object({
          card_issuing: z
            .object({
              user_terms_acceptance: z
                .object({
                  date: z.coerce.number().optional(),
                  ip: z.coerce.string().optional(),
                  user_agent: z.union([z.coerce.string(), z.enum([""])]),
                })
                .optional(),
            })
            .optional(),
          dob: z
            .object({
              day: z.coerce.number(),
              month: z.coerce.number(),
              year: z.coerce.number(),
            })
            .optional(),
          first_name: z.coerce.string().optional(),
          last_name: z.coerce.string().optional(),
          verification: z
            .object({
              document: z
                .object({
                  back: z.coerce.string().optional(),
                  front: z.coerce.string().optional(),
                })
                .optional(),
            })
            .optional(),
        })
        .optional(),
      metadata: z.object({}).optional(),
      phone_number: z.coerce.string().optional(),
      preferred_locales: z
        .array(z.enum(["de", "en", "es", "fr", "it"]))
        .optional(),
      spending_controls: z
        .object({
          allowed_categories: z
            .array(
              z.enum([
                "ac_refrigeration_repair",
                "accounting_bookkeeping_services",
                "advertising_services",
                "agricultural_cooperative",
                "airlines_air_carriers",
                "airports_flying_fields",
                "ambulance_services",
                "amusement_parks_carnivals",
                "antique_reproductions",
                "antique_shops",
                "aquariums",
                "architectural_surveying_services",
                "art_dealers_and_galleries",
                "artists_supply_and_craft_shops",
                "auto_and_home_supply_stores",
                "auto_body_repair_shops",
                "auto_paint_shops",
                "auto_service_shops",
                "automated_cash_disburse",
                "automated_fuel_dispensers",
                "automobile_associations",
                "automotive_parts_and_accessories_stores",
                "automotive_tire_stores",
                "bail_and_bond_payments",
                "bakeries",
                "bands_orchestras",
                "barber_and_beauty_shops",
                "betting_casino_gambling",
                "bicycle_shops",
                "billiard_pool_establishments",
                "boat_dealers",
                "boat_rentals_and_leases",
                "book_stores",
                "books_periodicals_and_newspapers",
                "bowling_alleys",
                "bus_lines",
                "business_secretarial_schools",
                "buying_shopping_services",
                "cable_satellite_and_other_pay_television_and_radio",
                "camera_and_photographic_supply_stores",
                "candy_nut_and_confectionery_stores",
                "car_and_truck_dealers_new_used",
                "car_and_truck_dealers_used_only",
                "car_rental_agencies",
                "car_washes",
                "carpentry_services",
                "carpet_upholstery_cleaning",
                "caterers",
                "charitable_and_social_service_organizations_fundraising",
                "chemicals_and_allied_products",
                "child_care_services",
                "childrens_and_infants_wear_stores",
                "chiropodists_podiatrists",
                "chiropractors",
                "cigar_stores_and_stands",
                "civic_social_fraternal_associations",
                "cleaning_and_maintenance",
                "clothing_rental",
                "colleges_universities",
                "commercial_equipment",
                "commercial_footwear",
                "commercial_photography_art_and_graphics",
                "commuter_transport_and_ferries",
                "computer_network_services",
                "computer_programming",
                "computer_repair",
                "computer_software_stores",
                "computers_peripherals_and_software",
                "concrete_work_services",
                "construction_materials",
                "consulting_public_relations",
                "correspondence_schools",
                "cosmetic_stores",
                "counseling_services",
                "country_clubs",
                "courier_services",
                "court_costs",
                "credit_reporting_agencies",
                "cruise_lines",
                "dairy_products_stores",
                "dance_hall_studios_schools",
                "dating_escort_services",
                "dentists_orthodontists",
                "department_stores",
                "detective_agencies",
                "digital_goods_applications",
                "digital_goods_games",
                "digital_goods_large_volume",
                "digital_goods_media",
                "direct_marketing_catalog_merchant",
                "direct_marketing_combination_catalog_and_retail_merchant",
                "direct_marketing_inbound_telemarketing",
                "direct_marketing_insurance_services",
                "direct_marketing_other",
                "direct_marketing_outbound_telemarketing",
                "direct_marketing_subscription",
                "direct_marketing_travel",
                "discount_stores",
                "doctors",
                "door_to_door_sales",
                "drapery_window_covering_and_upholstery_stores",
                "drinking_places",
                "drug_stores_and_pharmacies",
                "drugs_drug_proprietaries_and_druggist_sundries",
                "dry_cleaners",
                "durable_goods",
                "duty_free_stores",
                "eating_places_restaurants",
                "educational_services",
                "electric_razor_stores",
                "electric_vehicle_charging",
                "electrical_parts_and_equipment",
                "electrical_services",
                "electronics_repair_shops",
                "electronics_stores",
                "elementary_secondary_schools",
                "emergency_services_gcas_visa_use_only",
                "employment_temp_agencies",
                "equipment_rental",
                "exterminating_services",
                "family_clothing_stores",
                "fast_food_restaurants",
                "financial_institutions",
                "fines_government_administrative_entities",
                "fireplace_fireplace_screens_and_accessories_stores",
                "floor_covering_stores",
                "florists",
                "florists_supplies_nursery_stock_and_flowers",
                "freezer_and_locker_meat_provisioners",
                "fuel_dealers_non_automotive",
                "funeral_services_crematories",
                "furniture_home_furnishings_and_equipment_stores_except_appliances",
                "furniture_repair_refinishing",
                "furriers_and_fur_shops",
                "general_services",
                "gift_card_novelty_and_souvenir_shops",
                "glass_paint_and_wallpaper_stores",
                "glassware_crystal_stores",
                "golf_courses_public",
                "government_licensed_horse_dog_racing_us_region_only",
                "government_licensed_online_casions_online_gambling_us_region_only",
                "government_owned_lotteries_non_us_region",
                "government_owned_lotteries_us_region_only",
                "government_services",
                "grocery_stores_supermarkets",
                "hardware_equipment_and_supplies",
                "hardware_stores",
                "health_and_beauty_spas",
                "hearing_aids_sales_and_supplies",
                "heating_plumbing_a_c",
                "hobby_toy_and_game_shops",
                "home_supply_warehouse_stores",
                "hospitals",
                "hotels_motels_and_resorts",
                "household_appliance_stores",
                "industrial_supplies",
                "information_retrieval_services",
                "insurance_default",
                "insurance_underwriting_premiums",
                "intra_company_purchases",
                "jewelry_stores_watches_clocks_and_silverware_stores",
                "landscaping_services",
                "laundries",
                "laundry_cleaning_services",
                "legal_services_attorneys",
                "luggage_and_leather_goods_stores",
                "lumber_building_materials_stores",
                "manual_cash_disburse",
                "marinas_service_and_supplies",
                "marketplaces",
                "masonry_stonework_and_plaster",
                "massage_parlors",
                "medical_and_dental_labs",
                "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                "medical_services",
                "membership_organizations",
                "mens_and_boys_clothing_and_accessories_stores",
                "mens_womens_clothing_stores",
                "metal_service_centers",
                "miscellaneous",
                "miscellaneous_apparel_and_accessory_shops",
                "miscellaneous_auto_dealers",
                "miscellaneous_business_services",
                "miscellaneous_food_stores",
                "miscellaneous_general_merchandise",
                "miscellaneous_general_services",
                "miscellaneous_home_furnishing_specialty_stores",
                "miscellaneous_publishing_and_printing",
                "miscellaneous_recreation_services",
                "miscellaneous_repair_shops",
                "miscellaneous_specialty_retail",
                "mobile_home_dealers",
                "motion_picture_theaters",
                "motor_freight_carriers_and_trucking",
                "motor_homes_dealers",
                "motor_vehicle_supplies_and_new_parts",
                "motorcycle_shops_and_dealers",
                "motorcycle_shops_dealers",
                "music_stores_musical_instruments_pianos_and_sheet_music",
                "news_dealers_and_newsstands",
                "non_fi_money_orders",
                "non_fi_stored_value_card_purchase_load",
                "nondurable_goods",
                "nurseries_lawn_and_garden_supply_stores",
                "nursing_personal_care",
                "office_and_commercial_furniture",
                "opticians_eyeglasses",
                "optometrists_ophthalmologist",
                "orthopedic_goods_prosthetic_devices",
                "osteopaths",
                "package_stores_beer_wine_and_liquor",
                "paints_varnishes_and_supplies",
                "parking_lots_garages",
                "passenger_railways",
                "pawn_shops",
                "pet_shops_pet_food_and_supplies",
                "petroleum_and_petroleum_products",
                "photo_developing",
                "photographic_photocopy_microfilm_equipment_and_supplies",
                "photographic_studios",
                "picture_video_production",
                "piece_goods_notions_and_other_dry_goods",
                "plumbing_heating_equipment_and_supplies",
                "political_organizations",
                "postal_services_government_only",
                "precious_stones_and_metals_watches_and_jewelry",
                "professional_services",
                "public_warehousing_and_storage",
                "quick_copy_repro_and_blueprint",
                "railroads",
                "real_estate_agents_and_managers_rentals",
                "record_stores",
                "recreational_vehicle_rentals",
                "religious_goods_stores",
                "religious_organizations",
                "roofing_siding_sheet_metal",
                "secretarial_support_services",
                "security_brokers_dealers",
                "service_stations",
                "sewing_needlework_fabric_and_piece_goods_stores",
                "shoe_repair_hat_cleaning",
                "shoe_stores",
                "small_appliance_repair",
                "snowmobile_dealers",
                "special_trade_services",
                "specialty_cleaning",
                "sporting_goods_stores",
                "sporting_recreation_camps",
                "sports_and_riding_apparel_stores",
                "sports_clubs_fields",
                "stamp_and_coin_stores",
                "stationary_office_supplies_printing_and_writing_paper",
                "stationery_stores_office_and_school_supply_stores",
                "swimming_pools_sales",
                "t_ui_travel_germany",
                "tailors_alterations",
                "tax_payments_government_agencies",
                "tax_preparation_services",
                "taxicabs_limousines",
                "telecommunication_equipment_and_telephone_sales",
                "telecommunication_services",
                "telegraph_services",
                "tent_and_awning_shops",
                "testing_laboratories",
                "theatrical_ticket_agencies",
                "timeshares",
                "tire_retreading_and_repair",
                "tolls_bridge_fees",
                "tourist_attractions_and_exhibits",
                "towing_services",
                "trailer_parks_campgrounds",
                "transportation_services",
                "travel_agencies_tour_operators",
                "truck_stop_iteration",
                "truck_utility_trailer_rentals",
                "typesetting_plate_making_and_related_services",
                "typewriter_stores",
                "u_s_federal_government_agencies_or_departments",
                "uniforms_commercial_clothing",
                "used_merchandise_and_secondhand_stores",
                "utilities",
                "variety_stores",
                "veterinary_services",
                "video_amusement_game_supplies",
                "video_game_arcades",
                "video_tape_rental_stores",
                "vocational_trade_schools",
                "watch_jewelry_repair",
                "welding_repair",
                "wholesale_clubs",
                "wig_and_toupee_stores",
                "wires_money_orders",
                "womens_accessory_and_specialty_shops",
                "womens_ready_to_wear_stores",
                "wrecking_and_salvage_yards",
              ]),
            )
            .optional(),
          blocked_categories: z
            .array(
              z.enum([
                "ac_refrigeration_repair",
                "accounting_bookkeeping_services",
                "advertising_services",
                "agricultural_cooperative",
                "airlines_air_carriers",
                "airports_flying_fields",
                "ambulance_services",
                "amusement_parks_carnivals",
                "antique_reproductions",
                "antique_shops",
                "aquariums",
                "architectural_surveying_services",
                "art_dealers_and_galleries",
                "artists_supply_and_craft_shops",
                "auto_and_home_supply_stores",
                "auto_body_repair_shops",
                "auto_paint_shops",
                "auto_service_shops",
                "automated_cash_disburse",
                "automated_fuel_dispensers",
                "automobile_associations",
                "automotive_parts_and_accessories_stores",
                "automotive_tire_stores",
                "bail_and_bond_payments",
                "bakeries",
                "bands_orchestras",
                "barber_and_beauty_shops",
                "betting_casino_gambling",
                "bicycle_shops",
                "billiard_pool_establishments",
                "boat_dealers",
                "boat_rentals_and_leases",
                "book_stores",
                "books_periodicals_and_newspapers",
                "bowling_alleys",
                "bus_lines",
                "business_secretarial_schools",
                "buying_shopping_services",
                "cable_satellite_and_other_pay_television_and_radio",
                "camera_and_photographic_supply_stores",
                "candy_nut_and_confectionery_stores",
                "car_and_truck_dealers_new_used",
                "car_and_truck_dealers_used_only",
                "car_rental_agencies",
                "car_washes",
                "carpentry_services",
                "carpet_upholstery_cleaning",
                "caterers",
                "charitable_and_social_service_organizations_fundraising",
                "chemicals_and_allied_products",
                "child_care_services",
                "childrens_and_infants_wear_stores",
                "chiropodists_podiatrists",
                "chiropractors",
                "cigar_stores_and_stands",
                "civic_social_fraternal_associations",
                "cleaning_and_maintenance",
                "clothing_rental",
                "colleges_universities",
                "commercial_equipment",
                "commercial_footwear",
                "commercial_photography_art_and_graphics",
                "commuter_transport_and_ferries",
                "computer_network_services",
                "computer_programming",
                "computer_repair",
                "computer_software_stores",
                "computers_peripherals_and_software",
                "concrete_work_services",
                "construction_materials",
                "consulting_public_relations",
                "correspondence_schools",
                "cosmetic_stores",
                "counseling_services",
                "country_clubs",
                "courier_services",
                "court_costs",
                "credit_reporting_agencies",
                "cruise_lines",
                "dairy_products_stores",
                "dance_hall_studios_schools",
                "dating_escort_services",
                "dentists_orthodontists",
                "department_stores",
                "detective_agencies",
                "digital_goods_applications",
                "digital_goods_games",
                "digital_goods_large_volume",
                "digital_goods_media",
                "direct_marketing_catalog_merchant",
                "direct_marketing_combination_catalog_and_retail_merchant",
                "direct_marketing_inbound_telemarketing",
                "direct_marketing_insurance_services",
                "direct_marketing_other",
                "direct_marketing_outbound_telemarketing",
                "direct_marketing_subscription",
                "direct_marketing_travel",
                "discount_stores",
                "doctors",
                "door_to_door_sales",
                "drapery_window_covering_and_upholstery_stores",
                "drinking_places",
                "drug_stores_and_pharmacies",
                "drugs_drug_proprietaries_and_druggist_sundries",
                "dry_cleaners",
                "durable_goods",
                "duty_free_stores",
                "eating_places_restaurants",
                "educational_services",
                "electric_razor_stores",
                "electric_vehicle_charging",
                "electrical_parts_and_equipment",
                "electrical_services",
                "electronics_repair_shops",
                "electronics_stores",
                "elementary_secondary_schools",
                "emergency_services_gcas_visa_use_only",
                "employment_temp_agencies",
                "equipment_rental",
                "exterminating_services",
                "family_clothing_stores",
                "fast_food_restaurants",
                "financial_institutions",
                "fines_government_administrative_entities",
                "fireplace_fireplace_screens_and_accessories_stores",
                "floor_covering_stores",
                "florists",
                "florists_supplies_nursery_stock_and_flowers",
                "freezer_and_locker_meat_provisioners",
                "fuel_dealers_non_automotive",
                "funeral_services_crematories",
                "furniture_home_furnishings_and_equipment_stores_except_appliances",
                "furniture_repair_refinishing",
                "furriers_and_fur_shops",
                "general_services",
                "gift_card_novelty_and_souvenir_shops",
                "glass_paint_and_wallpaper_stores",
                "glassware_crystal_stores",
                "golf_courses_public",
                "government_licensed_horse_dog_racing_us_region_only",
                "government_licensed_online_casions_online_gambling_us_region_only",
                "government_owned_lotteries_non_us_region",
                "government_owned_lotteries_us_region_only",
                "government_services",
                "grocery_stores_supermarkets",
                "hardware_equipment_and_supplies",
                "hardware_stores",
                "health_and_beauty_spas",
                "hearing_aids_sales_and_supplies",
                "heating_plumbing_a_c",
                "hobby_toy_and_game_shops",
                "home_supply_warehouse_stores",
                "hospitals",
                "hotels_motels_and_resorts",
                "household_appliance_stores",
                "industrial_supplies",
                "information_retrieval_services",
                "insurance_default",
                "insurance_underwriting_premiums",
                "intra_company_purchases",
                "jewelry_stores_watches_clocks_and_silverware_stores",
                "landscaping_services",
                "laundries",
                "laundry_cleaning_services",
                "legal_services_attorneys",
                "luggage_and_leather_goods_stores",
                "lumber_building_materials_stores",
                "manual_cash_disburse",
                "marinas_service_and_supplies",
                "marketplaces",
                "masonry_stonework_and_plaster",
                "massage_parlors",
                "medical_and_dental_labs",
                "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                "medical_services",
                "membership_organizations",
                "mens_and_boys_clothing_and_accessories_stores",
                "mens_womens_clothing_stores",
                "metal_service_centers",
                "miscellaneous",
                "miscellaneous_apparel_and_accessory_shops",
                "miscellaneous_auto_dealers",
                "miscellaneous_business_services",
                "miscellaneous_food_stores",
                "miscellaneous_general_merchandise",
                "miscellaneous_general_services",
                "miscellaneous_home_furnishing_specialty_stores",
                "miscellaneous_publishing_and_printing",
                "miscellaneous_recreation_services",
                "miscellaneous_repair_shops",
                "miscellaneous_specialty_retail",
                "mobile_home_dealers",
                "motion_picture_theaters",
                "motor_freight_carriers_and_trucking",
                "motor_homes_dealers",
                "motor_vehicle_supplies_and_new_parts",
                "motorcycle_shops_and_dealers",
                "motorcycle_shops_dealers",
                "music_stores_musical_instruments_pianos_and_sheet_music",
                "news_dealers_and_newsstands",
                "non_fi_money_orders",
                "non_fi_stored_value_card_purchase_load",
                "nondurable_goods",
                "nurseries_lawn_and_garden_supply_stores",
                "nursing_personal_care",
                "office_and_commercial_furniture",
                "opticians_eyeglasses",
                "optometrists_ophthalmologist",
                "orthopedic_goods_prosthetic_devices",
                "osteopaths",
                "package_stores_beer_wine_and_liquor",
                "paints_varnishes_and_supplies",
                "parking_lots_garages",
                "passenger_railways",
                "pawn_shops",
                "pet_shops_pet_food_and_supplies",
                "petroleum_and_petroleum_products",
                "photo_developing",
                "photographic_photocopy_microfilm_equipment_and_supplies",
                "photographic_studios",
                "picture_video_production",
                "piece_goods_notions_and_other_dry_goods",
                "plumbing_heating_equipment_and_supplies",
                "political_organizations",
                "postal_services_government_only",
                "precious_stones_and_metals_watches_and_jewelry",
                "professional_services",
                "public_warehousing_and_storage",
                "quick_copy_repro_and_blueprint",
                "railroads",
                "real_estate_agents_and_managers_rentals",
                "record_stores",
                "recreational_vehicle_rentals",
                "religious_goods_stores",
                "religious_organizations",
                "roofing_siding_sheet_metal",
                "secretarial_support_services",
                "security_brokers_dealers",
                "service_stations",
                "sewing_needlework_fabric_and_piece_goods_stores",
                "shoe_repair_hat_cleaning",
                "shoe_stores",
                "small_appliance_repair",
                "snowmobile_dealers",
                "special_trade_services",
                "specialty_cleaning",
                "sporting_goods_stores",
                "sporting_recreation_camps",
                "sports_and_riding_apparel_stores",
                "sports_clubs_fields",
                "stamp_and_coin_stores",
                "stationary_office_supplies_printing_and_writing_paper",
                "stationery_stores_office_and_school_supply_stores",
                "swimming_pools_sales",
                "t_ui_travel_germany",
                "tailors_alterations",
                "tax_payments_government_agencies",
                "tax_preparation_services",
                "taxicabs_limousines",
                "telecommunication_equipment_and_telephone_sales",
                "telecommunication_services",
                "telegraph_services",
                "tent_and_awning_shops",
                "testing_laboratories",
                "theatrical_ticket_agencies",
                "timeshares",
                "tire_retreading_and_repair",
                "tolls_bridge_fees",
                "tourist_attractions_and_exhibits",
                "towing_services",
                "trailer_parks_campgrounds",
                "transportation_services",
                "travel_agencies_tour_operators",
                "truck_stop_iteration",
                "truck_utility_trailer_rentals",
                "typesetting_plate_making_and_related_services",
                "typewriter_stores",
                "u_s_federal_government_agencies_or_departments",
                "uniforms_commercial_clothing",
                "used_merchandise_and_secondhand_stores",
                "utilities",
                "variety_stores",
                "veterinary_services",
                "video_amusement_game_supplies",
                "video_game_arcades",
                "video_tape_rental_stores",
                "vocational_trade_schools",
                "watch_jewelry_repair",
                "welding_repair",
                "wholesale_clubs",
                "wig_and_toupee_stores",
                "wires_money_orders",
                "womens_accessory_and_specialty_shops",
                "womens_ready_to_wear_stores",
                "wrecking_and_salvage_yards",
              ]),
            )
            .optional(),
          spending_limits: z
            .array(
              z.object({
                amount: z.coerce.number(),
                categories: z
                  .array(
                    z.enum([
                      "ac_refrigeration_repair",
                      "accounting_bookkeeping_services",
                      "advertising_services",
                      "agricultural_cooperative",
                      "airlines_air_carriers",
                      "airports_flying_fields",
                      "ambulance_services",
                      "amusement_parks_carnivals",
                      "antique_reproductions",
                      "antique_shops",
                      "aquariums",
                      "architectural_surveying_services",
                      "art_dealers_and_galleries",
                      "artists_supply_and_craft_shops",
                      "auto_and_home_supply_stores",
                      "auto_body_repair_shops",
                      "auto_paint_shops",
                      "auto_service_shops",
                      "automated_cash_disburse",
                      "automated_fuel_dispensers",
                      "automobile_associations",
                      "automotive_parts_and_accessories_stores",
                      "automotive_tire_stores",
                      "bail_and_bond_payments",
                      "bakeries",
                      "bands_orchestras",
                      "barber_and_beauty_shops",
                      "betting_casino_gambling",
                      "bicycle_shops",
                      "billiard_pool_establishments",
                      "boat_dealers",
                      "boat_rentals_and_leases",
                      "book_stores",
                      "books_periodicals_and_newspapers",
                      "bowling_alleys",
                      "bus_lines",
                      "business_secretarial_schools",
                      "buying_shopping_services",
                      "cable_satellite_and_other_pay_television_and_radio",
                      "camera_and_photographic_supply_stores",
                      "candy_nut_and_confectionery_stores",
                      "car_and_truck_dealers_new_used",
                      "car_and_truck_dealers_used_only",
                      "car_rental_agencies",
                      "car_washes",
                      "carpentry_services",
                      "carpet_upholstery_cleaning",
                      "caterers",
                      "charitable_and_social_service_organizations_fundraising",
                      "chemicals_and_allied_products",
                      "child_care_services",
                      "childrens_and_infants_wear_stores",
                      "chiropodists_podiatrists",
                      "chiropractors",
                      "cigar_stores_and_stands",
                      "civic_social_fraternal_associations",
                      "cleaning_and_maintenance",
                      "clothing_rental",
                      "colleges_universities",
                      "commercial_equipment",
                      "commercial_footwear",
                      "commercial_photography_art_and_graphics",
                      "commuter_transport_and_ferries",
                      "computer_network_services",
                      "computer_programming",
                      "computer_repair",
                      "computer_software_stores",
                      "computers_peripherals_and_software",
                      "concrete_work_services",
                      "construction_materials",
                      "consulting_public_relations",
                      "correspondence_schools",
                      "cosmetic_stores",
                      "counseling_services",
                      "country_clubs",
                      "courier_services",
                      "court_costs",
                      "credit_reporting_agencies",
                      "cruise_lines",
                      "dairy_products_stores",
                      "dance_hall_studios_schools",
                      "dating_escort_services",
                      "dentists_orthodontists",
                      "department_stores",
                      "detective_agencies",
                      "digital_goods_applications",
                      "digital_goods_games",
                      "digital_goods_large_volume",
                      "digital_goods_media",
                      "direct_marketing_catalog_merchant",
                      "direct_marketing_combination_catalog_and_retail_merchant",
                      "direct_marketing_inbound_telemarketing",
                      "direct_marketing_insurance_services",
                      "direct_marketing_other",
                      "direct_marketing_outbound_telemarketing",
                      "direct_marketing_subscription",
                      "direct_marketing_travel",
                      "discount_stores",
                      "doctors",
                      "door_to_door_sales",
                      "drapery_window_covering_and_upholstery_stores",
                      "drinking_places",
                      "drug_stores_and_pharmacies",
                      "drugs_drug_proprietaries_and_druggist_sundries",
                      "dry_cleaners",
                      "durable_goods",
                      "duty_free_stores",
                      "eating_places_restaurants",
                      "educational_services",
                      "electric_razor_stores",
                      "electric_vehicle_charging",
                      "electrical_parts_and_equipment",
                      "electrical_services",
                      "electronics_repair_shops",
                      "electronics_stores",
                      "elementary_secondary_schools",
                      "emergency_services_gcas_visa_use_only",
                      "employment_temp_agencies",
                      "equipment_rental",
                      "exterminating_services",
                      "family_clothing_stores",
                      "fast_food_restaurants",
                      "financial_institutions",
                      "fines_government_administrative_entities",
                      "fireplace_fireplace_screens_and_accessories_stores",
                      "floor_covering_stores",
                      "florists",
                      "florists_supplies_nursery_stock_and_flowers",
                      "freezer_and_locker_meat_provisioners",
                      "fuel_dealers_non_automotive",
                      "funeral_services_crematories",
                      "furniture_home_furnishings_and_equipment_stores_except_appliances",
                      "furniture_repair_refinishing",
                      "furriers_and_fur_shops",
                      "general_services",
                      "gift_card_novelty_and_souvenir_shops",
                      "glass_paint_and_wallpaper_stores",
                      "glassware_crystal_stores",
                      "golf_courses_public",
                      "government_licensed_horse_dog_racing_us_region_only",
                      "government_licensed_online_casions_online_gambling_us_region_only",
                      "government_owned_lotteries_non_us_region",
                      "government_owned_lotteries_us_region_only",
                      "government_services",
                      "grocery_stores_supermarkets",
                      "hardware_equipment_and_supplies",
                      "hardware_stores",
                      "health_and_beauty_spas",
                      "hearing_aids_sales_and_supplies",
                      "heating_plumbing_a_c",
                      "hobby_toy_and_game_shops",
                      "home_supply_warehouse_stores",
                      "hospitals",
                      "hotels_motels_and_resorts",
                      "household_appliance_stores",
                      "industrial_supplies",
                      "information_retrieval_services",
                      "insurance_default",
                      "insurance_underwriting_premiums",
                      "intra_company_purchases",
                      "jewelry_stores_watches_clocks_and_silverware_stores",
                      "landscaping_services",
                      "laundries",
                      "laundry_cleaning_services",
                      "legal_services_attorneys",
                      "luggage_and_leather_goods_stores",
                      "lumber_building_materials_stores",
                      "manual_cash_disburse",
                      "marinas_service_and_supplies",
                      "marketplaces",
                      "masonry_stonework_and_plaster",
                      "massage_parlors",
                      "medical_and_dental_labs",
                      "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                      "medical_services",
                      "membership_organizations",
                      "mens_and_boys_clothing_and_accessories_stores",
                      "mens_womens_clothing_stores",
                      "metal_service_centers",
                      "miscellaneous",
                      "miscellaneous_apparel_and_accessory_shops",
                      "miscellaneous_auto_dealers",
                      "miscellaneous_business_services",
                      "miscellaneous_food_stores",
                      "miscellaneous_general_merchandise",
                      "miscellaneous_general_services",
                      "miscellaneous_home_furnishing_specialty_stores",
                      "miscellaneous_publishing_and_printing",
                      "miscellaneous_recreation_services",
                      "miscellaneous_repair_shops",
                      "miscellaneous_specialty_retail",
                      "mobile_home_dealers",
                      "motion_picture_theaters",
                      "motor_freight_carriers_and_trucking",
                      "motor_homes_dealers",
                      "motor_vehicle_supplies_and_new_parts",
                      "motorcycle_shops_and_dealers",
                      "motorcycle_shops_dealers",
                      "music_stores_musical_instruments_pianos_and_sheet_music",
                      "news_dealers_and_newsstands",
                      "non_fi_money_orders",
                      "non_fi_stored_value_card_purchase_load",
                      "nondurable_goods",
                      "nurseries_lawn_and_garden_supply_stores",
                      "nursing_personal_care",
                      "office_and_commercial_furniture",
                      "opticians_eyeglasses",
                      "optometrists_ophthalmologist",
                      "orthopedic_goods_prosthetic_devices",
                      "osteopaths",
                      "package_stores_beer_wine_and_liquor",
                      "paints_varnishes_and_supplies",
                      "parking_lots_garages",
                      "passenger_railways",
                      "pawn_shops",
                      "pet_shops_pet_food_and_supplies",
                      "petroleum_and_petroleum_products",
                      "photo_developing",
                      "photographic_photocopy_microfilm_equipment_and_supplies",
                      "photographic_studios",
                      "picture_video_production",
                      "piece_goods_notions_and_other_dry_goods",
                      "plumbing_heating_equipment_and_supplies",
                      "political_organizations",
                      "postal_services_government_only",
                      "precious_stones_and_metals_watches_and_jewelry",
                      "professional_services",
                      "public_warehousing_and_storage",
                      "quick_copy_repro_and_blueprint",
                      "railroads",
                      "real_estate_agents_and_managers_rentals",
                      "record_stores",
                      "recreational_vehicle_rentals",
                      "religious_goods_stores",
                      "religious_organizations",
                      "roofing_siding_sheet_metal",
                      "secretarial_support_services",
                      "security_brokers_dealers",
                      "service_stations",
                      "sewing_needlework_fabric_and_piece_goods_stores",
                      "shoe_repair_hat_cleaning",
                      "shoe_stores",
                      "small_appliance_repair",
                      "snowmobile_dealers",
                      "special_trade_services",
                      "specialty_cleaning",
                      "sporting_goods_stores",
                      "sporting_recreation_camps",
                      "sports_and_riding_apparel_stores",
                      "sports_clubs_fields",
                      "stamp_and_coin_stores",
                      "stationary_office_supplies_printing_and_writing_paper",
                      "stationery_stores_office_and_school_supply_stores",
                      "swimming_pools_sales",
                      "t_ui_travel_germany",
                      "tailors_alterations",
                      "tax_payments_government_agencies",
                      "tax_preparation_services",
                      "taxicabs_limousines",
                      "telecommunication_equipment_and_telephone_sales",
                      "telecommunication_services",
                      "telegraph_services",
                      "tent_and_awning_shops",
                      "testing_laboratories",
                      "theatrical_ticket_agencies",
                      "timeshares",
                      "tire_retreading_and_repair",
                      "tolls_bridge_fees",
                      "tourist_attractions_and_exhibits",
                      "towing_services",
                      "trailer_parks_campgrounds",
                      "transportation_services",
                      "travel_agencies_tour_operators",
                      "truck_stop_iteration",
                      "truck_utility_trailer_rentals",
                      "typesetting_plate_making_and_related_services",
                      "typewriter_stores",
                      "u_s_federal_government_agencies_or_departments",
                      "uniforms_commercial_clothing",
                      "used_merchandise_and_secondhand_stores",
                      "utilities",
                      "variety_stores",
                      "veterinary_services",
                      "video_amusement_game_supplies",
                      "video_game_arcades",
                      "video_tape_rental_stores",
                      "vocational_trade_schools",
                      "watch_jewelry_repair",
                      "welding_repair",
                      "wholesale_clubs",
                      "wig_and_toupee_stores",
                      "wires_money_orders",
                      "womens_accessory_and_specialty_shops",
                      "womens_ready_to_wear_stores",
                      "wrecking_and_salvage_yards",
                    ]),
                  )
                  .optional(),
                interval: z.enum([
                  "all_time",
                  "daily",
                  "monthly",
                  "per_authorization",
                  "weekly",
                  "yearly",
                ]),
              }),
            )
            .optional(),
          spending_limits_currency: z.coerce.string().optional(),
        })
        .optional(),
      status: z.enum(["active", "inactive"]).optional(),
    })
    .optional()

  const postIssuingCardholdersCardholderResponseValidator =
    responseValidationFactory([["200", s_issuing_cardholder]], s_error)

  router.post(
    "postIssuingCardholdersCardholder",
    "/v1/issuing/cardholders/:cardholder",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postIssuingCardholdersCardholderParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postIssuingCardholdersCardholderBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postIssuingCardholdersCardholder(input, ctx)

      ctx.body = postIssuingCardholdersCardholderResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIssuingCardsQuerySchema = z.object({
    cardholder: z.coerce.string().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    exp_month: z.coerce.number().optional(),
    exp_year: z.coerce.number().optional(),
    expand: z.array(z.coerce.string()).optional(),
    last4: z.coerce.string().optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z.enum(["active", "canceled", "inactive"]).optional(),
    type: z.enum(["physical", "virtual"]).optional(),
  })

  const getIssuingCardsBodySchema = z.object({}).optional()

  const getIssuingCardsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_issuing_card)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getIssuingCards", "/v1/issuing/cards", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getIssuingCardsQuerySchema, ctx.query),
      body: parseRequestInput(getIssuingCardsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getIssuingCards(input, ctx)

    ctx.body = getIssuingCardsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postIssuingCardsBodySchema = z.object({
    cardholder: z.coerce.string().optional(),
    currency: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string().optional(),
    metadata: z.object({}).optional(),
    replacement_for: z.coerce.string().optional(),
    replacement_reason: z
      .enum(["damaged", "expired", "lost", "stolen"])
      .optional(),
    shipping: z
      .object({
        address: z.object({
          city: z.coerce.string(),
          country: z.coerce.string(),
          line1: z.coerce.string(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string(),
          state: z.coerce.string().optional(),
        }),
        customs: z
          .object({ eori_number: z.coerce.string().optional() })
          .optional(),
        name: z.coerce.string(),
        phone_number: z.coerce.string().optional(),
        require_signature: z.coerce.boolean().optional(),
        service: z.enum(["express", "priority", "standard"]).optional(),
        type: z.enum(["bulk", "individual"]).optional(),
      })
      .optional(),
    spending_controls: z
      .object({
        allowed_categories: z
          .array(
            z.enum([
              "ac_refrigeration_repair",
              "accounting_bookkeeping_services",
              "advertising_services",
              "agricultural_cooperative",
              "airlines_air_carriers",
              "airports_flying_fields",
              "ambulance_services",
              "amusement_parks_carnivals",
              "antique_reproductions",
              "antique_shops",
              "aquariums",
              "architectural_surveying_services",
              "art_dealers_and_galleries",
              "artists_supply_and_craft_shops",
              "auto_and_home_supply_stores",
              "auto_body_repair_shops",
              "auto_paint_shops",
              "auto_service_shops",
              "automated_cash_disburse",
              "automated_fuel_dispensers",
              "automobile_associations",
              "automotive_parts_and_accessories_stores",
              "automotive_tire_stores",
              "bail_and_bond_payments",
              "bakeries",
              "bands_orchestras",
              "barber_and_beauty_shops",
              "betting_casino_gambling",
              "bicycle_shops",
              "billiard_pool_establishments",
              "boat_dealers",
              "boat_rentals_and_leases",
              "book_stores",
              "books_periodicals_and_newspapers",
              "bowling_alleys",
              "bus_lines",
              "business_secretarial_schools",
              "buying_shopping_services",
              "cable_satellite_and_other_pay_television_and_radio",
              "camera_and_photographic_supply_stores",
              "candy_nut_and_confectionery_stores",
              "car_and_truck_dealers_new_used",
              "car_and_truck_dealers_used_only",
              "car_rental_agencies",
              "car_washes",
              "carpentry_services",
              "carpet_upholstery_cleaning",
              "caterers",
              "charitable_and_social_service_organizations_fundraising",
              "chemicals_and_allied_products",
              "child_care_services",
              "childrens_and_infants_wear_stores",
              "chiropodists_podiatrists",
              "chiropractors",
              "cigar_stores_and_stands",
              "civic_social_fraternal_associations",
              "cleaning_and_maintenance",
              "clothing_rental",
              "colleges_universities",
              "commercial_equipment",
              "commercial_footwear",
              "commercial_photography_art_and_graphics",
              "commuter_transport_and_ferries",
              "computer_network_services",
              "computer_programming",
              "computer_repair",
              "computer_software_stores",
              "computers_peripherals_and_software",
              "concrete_work_services",
              "construction_materials",
              "consulting_public_relations",
              "correspondence_schools",
              "cosmetic_stores",
              "counseling_services",
              "country_clubs",
              "courier_services",
              "court_costs",
              "credit_reporting_agencies",
              "cruise_lines",
              "dairy_products_stores",
              "dance_hall_studios_schools",
              "dating_escort_services",
              "dentists_orthodontists",
              "department_stores",
              "detective_agencies",
              "digital_goods_applications",
              "digital_goods_games",
              "digital_goods_large_volume",
              "digital_goods_media",
              "direct_marketing_catalog_merchant",
              "direct_marketing_combination_catalog_and_retail_merchant",
              "direct_marketing_inbound_telemarketing",
              "direct_marketing_insurance_services",
              "direct_marketing_other",
              "direct_marketing_outbound_telemarketing",
              "direct_marketing_subscription",
              "direct_marketing_travel",
              "discount_stores",
              "doctors",
              "door_to_door_sales",
              "drapery_window_covering_and_upholstery_stores",
              "drinking_places",
              "drug_stores_and_pharmacies",
              "drugs_drug_proprietaries_and_druggist_sundries",
              "dry_cleaners",
              "durable_goods",
              "duty_free_stores",
              "eating_places_restaurants",
              "educational_services",
              "electric_razor_stores",
              "electric_vehicle_charging",
              "electrical_parts_and_equipment",
              "electrical_services",
              "electronics_repair_shops",
              "electronics_stores",
              "elementary_secondary_schools",
              "emergency_services_gcas_visa_use_only",
              "employment_temp_agencies",
              "equipment_rental",
              "exterminating_services",
              "family_clothing_stores",
              "fast_food_restaurants",
              "financial_institutions",
              "fines_government_administrative_entities",
              "fireplace_fireplace_screens_and_accessories_stores",
              "floor_covering_stores",
              "florists",
              "florists_supplies_nursery_stock_and_flowers",
              "freezer_and_locker_meat_provisioners",
              "fuel_dealers_non_automotive",
              "funeral_services_crematories",
              "furniture_home_furnishings_and_equipment_stores_except_appliances",
              "furniture_repair_refinishing",
              "furriers_and_fur_shops",
              "general_services",
              "gift_card_novelty_and_souvenir_shops",
              "glass_paint_and_wallpaper_stores",
              "glassware_crystal_stores",
              "golf_courses_public",
              "government_licensed_horse_dog_racing_us_region_only",
              "government_licensed_online_casions_online_gambling_us_region_only",
              "government_owned_lotteries_non_us_region",
              "government_owned_lotteries_us_region_only",
              "government_services",
              "grocery_stores_supermarkets",
              "hardware_equipment_and_supplies",
              "hardware_stores",
              "health_and_beauty_spas",
              "hearing_aids_sales_and_supplies",
              "heating_plumbing_a_c",
              "hobby_toy_and_game_shops",
              "home_supply_warehouse_stores",
              "hospitals",
              "hotels_motels_and_resorts",
              "household_appliance_stores",
              "industrial_supplies",
              "information_retrieval_services",
              "insurance_default",
              "insurance_underwriting_premiums",
              "intra_company_purchases",
              "jewelry_stores_watches_clocks_and_silverware_stores",
              "landscaping_services",
              "laundries",
              "laundry_cleaning_services",
              "legal_services_attorneys",
              "luggage_and_leather_goods_stores",
              "lumber_building_materials_stores",
              "manual_cash_disburse",
              "marinas_service_and_supplies",
              "marketplaces",
              "masonry_stonework_and_plaster",
              "massage_parlors",
              "medical_and_dental_labs",
              "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
              "medical_services",
              "membership_organizations",
              "mens_and_boys_clothing_and_accessories_stores",
              "mens_womens_clothing_stores",
              "metal_service_centers",
              "miscellaneous",
              "miscellaneous_apparel_and_accessory_shops",
              "miscellaneous_auto_dealers",
              "miscellaneous_business_services",
              "miscellaneous_food_stores",
              "miscellaneous_general_merchandise",
              "miscellaneous_general_services",
              "miscellaneous_home_furnishing_specialty_stores",
              "miscellaneous_publishing_and_printing",
              "miscellaneous_recreation_services",
              "miscellaneous_repair_shops",
              "miscellaneous_specialty_retail",
              "mobile_home_dealers",
              "motion_picture_theaters",
              "motor_freight_carriers_and_trucking",
              "motor_homes_dealers",
              "motor_vehicle_supplies_and_new_parts",
              "motorcycle_shops_and_dealers",
              "motorcycle_shops_dealers",
              "music_stores_musical_instruments_pianos_and_sheet_music",
              "news_dealers_and_newsstands",
              "non_fi_money_orders",
              "non_fi_stored_value_card_purchase_load",
              "nondurable_goods",
              "nurseries_lawn_and_garden_supply_stores",
              "nursing_personal_care",
              "office_and_commercial_furniture",
              "opticians_eyeglasses",
              "optometrists_ophthalmologist",
              "orthopedic_goods_prosthetic_devices",
              "osteopaths",
              "package_stores_beer_wine_and_liquor",
              "paints_varnishes_and_supplies",
              "parking_lots_garages",
              "passenger_railways",
              "pawn_shops",
              "pet_shops_pet_food_and_supplies",
              "petroleum_and_petroleum_products",
              "photo_developing",
              "photographic_photocopy_microfilm_equipment_and_supplies",
              "photographic_studios",
              "picture_video_production",
              "piece_goods_notions_and_other_dry_goods",
              "plumbing_heating_equipment_and_supplies",
              "political_organizations",
              "postal_services_government_only",
              "precious_stones_and_metals_watches_and_jewelry",
              "professional_services",
              "public_warehousing_and_storage",
              "quick_copy_repro_and_blueprint",
              "railroads",
              "real_estate_agents_and_managers_rentals",
              "record_stores",
              "recreational_vehicle_rentals",
              "religious_goods_stores",
              "religious_organizations",
              "roofing_siding_sheet_metal",
              "secretarial_support_services",
              "security_brokers_dealers",
              "service_stations",
              "sewing_needlework_fabric_and_piece_goods_stores",
              "shoe_repair_hat_cleaning",
              "shoe_stores",
              "small_appliance_repair",
              "snowmobile_dealers",
              "special_trade_services",
              "specialty_cleaning",
              "sporting_goods_stores",
              "sporting_recreation_camps",
              "sports_and_riding_apparel_stores",
              "sports_clubs_fields",
              "stamp_and_coin_stores",
              "stationary_office_supplies_printing_and_writing_paper",
              "stationery_stores_office_and_school_supply_stores",
              "swimming_pools_sales",
              "t_ui_travel_germany",
              "tailors_alterations",
              "tax_payments_government_agencies",
              "tax_preparation_services",
              "taxicabs_limousines",
              "telecommunication_equipment_and_telephone_sales",
              "telecommunication_services",
              "telegraph_services",
              "tent_and_awning_shops",
              "testing_laboratories",
              "theatrical_ticket_agencies",
              "timeshares",
              "tire_retreading_and_repair",
              "tolls_bridge_fees",
              "tourist_attractions_and_exhibits",
              "towing_services",
              "trailer_parks_campgrounds",
              "transportation_services",
              "travel_agencies_tour_operators",
              "truck_stop_iteration",
              "truck_utility_trailer_rentals",
              "typesetting_plate_making_and_related_services",
              "typewriter_stores",
              "u_s_federal_government_agencies_or_departments",
              "uniforms_commercial_clothing",
              "used_merchandise_and_secondhand_stores",
              "utilities",
              "variety_stores",
              "veterinary_services",
              "video_amusement_game_supplies",
              "video_game_arcades",
              "video_tape_rental_stores",
              "vocational_trade_schools",
              "watch_jewelry_repair",
              "welding_repair",
              "wholesale_clubs",
              "wig_and_toupee_stores",
              "wires_money_orders",
              "womens_accessory_and_specialty_shops",
              "womens_ready_to_wear_stores",
              "wrecking_and_salvage_yards",
            ]),
          )
          .optional(),
        blocked_categories: z
          .array(
            z.enum([
              "ac_refrigeration_repair",
              "accounting_bookkeeping_services",
              "advertising_services",
              "agricultural_cooperative",
              "airlines_air_carriers",
              "airports_flying_fields",
              "ambulance_services",
              "amusement_parks_carnivals",
              "antique_reproductions",
              "antique_shops",
              "aquariums",
              "architectural_surveying_services",
              "art_dealers_and_galleries",
              "artists_supply_and_craft_shops",
              "auto_and_home_supply_stores",
              "auto_body_repair_shops",
              "auto_paint_shops",
              "auto_service_shops",
              "automated_cash_disburse",
              "automated_fuel_dispensers",
              "automobile_associations",
              "automotive_parts_and_accessories_stores",
              "automotive_tire_stores",
              "bail_and_bond_payments",
              "bakeries",
              "bands_orchestras",
              "barber_and_beauty_shops",
              "betting_casino_gambling",
              "bicycle_shops",
              "billiard_pool_establishments",
              "boat_dealers",
              "boat_rentals_and_leases",
              "book_stores",
              "books_periodicals_and_newspapers",
              "bowling_alleys",
              "bus_lines",
              "business_secretarial_schools",
              "buying_shopping_services",
              "cable_satellite_and_other_pay_television_and_radio",
              "camera_and_photographic_supply_stores",
              "candy_nut_and_confectionery_stores",
              "car_and_truck_dealers_new_used",
              "car_and_truck_dealers_used_only",
              "car_rental_agencies",
              "car_washes",
              "carpentry_services",
              "carpet_upholstery_cleaning",
              "caterers",
              "charitable_and_social_service_organizations_fundraising",
              "chemicals_and_allied_products",
              "child_care_services",
              "childrens_and_infants_wear_stores",
              "chiropodists_podiatrists",
              "chiropractors",
              "cigar_stores_and_stands",
              "civic_social_fraternal_associations",
              "cleaning_and_maintenance",
              "clothing_rental",
              "colleges_universities",
              "commercial_equipment",
              "commercial_footwear",
              "commercial_photography_art_and_graphics",
              "commuter_transport_and_ferries",
              "computer_network_services",
              "computer_programming",
              "computer_repair",
              "computer_software_stores",
              "computers_peripherals_and_software",
              "concrete_work_services",
              "construction_materials",
              "consulting_public_relations",
              "correspondence_schools",
              "cosmetic_stores",
              "counseling_services",
              "country_clubs",
              "courier_services",
              "court_costs",
              "credit_reporting_agencies",
              "cruise_lines",
              "dairy_products_stores",
              "dance_hall_studios_schools",
              "dating_escort_services",
              "dentists_orthodontists",
              "department_stores",
              "detective_agencies",
              "digital_goods_applications",
              "digital_goods_games",
              "digital_goods_large_volume",
              "digital_goods_media",
              "direct_marketing_catalog_merchant",
              "direct_marketing_combination_catalog_and_retail_merchant",
              "direct_marketing_inbound_telemarketing",
              "direct_marketing_insurance_services",
              "direct_marketing_other",
              "direct_marketing_outbound_telemarketing",
              "direct_marketing_subscription",
              "direct_marketing_travel",
              "discount_stores",
              "doctors",
              "door_to_door_sales",
              "drapery_window_covering_and_upholstery_stores",
              "drinking_places",
              "drug_stores_and_pharmacies",
              "drugs_drug_proprietaries_and_druggist_sundries",
              "dry_cleaners",
              "durable_goods",
              "duty_free_stores",
              "eating_places_restaurants",
              "educational_services",
              "electric_razor_stores",
              "electric_vehicle_charging",
              "electrical_parts_and_equipment",
              "electrical_services",
              "electronics_repair_shops",
              "electronics_stores",
              "elementary_secondary_schools",
              "emergency_services_gcas_visa_use_only",
              "employment_temp_agencies",
              "equipment_rental",
              "exterminating_services",
              "family_clothing_stores",
              "fast_food_restaurants",
              "financial_institutions",
              "fines_government_administrative_entities",
              "fireplace_fireplace_screens_and_accessories_stores",
              "floor_covering_stores",
              "florists",
              "florists_supplies_nursery_stock_and_flowers",
              "freezer_and_locker_meat_provisioners",
              "fuel_dealers_non_automotive",
              "funeral_services_crematories",
              "furniture_home_furnishings_and_equipment_stores_except_appliances",
              "furniture_repair_refinishing",
              "furriers_and_fur_shops",
              "general_services",
              "gift_card_novelty_and_souvenir_shops",
              "glass_paint_and_wallpaper_stores",
              "glassware_crystal_stores",
              "golf_courses_public",
              "government_licensed_horse_dog_racing_us_region_only",
              "government_licensed_online_casions_online_gambling_us_region_only",
              "government_owned_lotteries_non_us_region",
              "government_owned_lotteries_us_region_only",
              "government_services",
              "grocery_stores_supermarkets",
              "hardware_equipment_and_supplies",
              "hardware_stores",
              "health_and_beauty_spas",
              "hearing_aids_sales_and_supplies",
              "heating_plumbing_a_c",
              "hobby_toy_and_game_shops",
              "home_supply_warehouse_stores",
              "hospitals",
              "hotels_motels_and_resorts",
              "household_appliance_stores",
              "industrial_supplies",
              "information_retrieval_services",
              "insurance_default",
              "insurance_underwriting_premiums",
              "intra_company_purchases",
              "jewelry_stores_watches_clocks_and_silverware_stores",
              "landscaping_services",
              "laundries",
              "laundry_cleaning_services",
              "legal_services_attorneys",
              "luggage_and_leather_goods_stores",
              "lumber_building_materials_stores",
              "manual_cash_disburse",
              "marinas_service_and_supplies",
              "marketplaces",
              "masonry_stonework_and_plaster",
              "massage_parlors",
              "medical_and_dental_labs",
              "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
              "medical_services",
              "membership_organizations",
              "mens_and_boys_clothing_and_accessories_stores",
              "mens_womens_clothing_stores",
              "metal_service_centers",
              "miscellaneous",
              "miscellaneous_apparel_and_accessory_shops",
              "miscellaneous_auto_dealers",
              "miscellaneous_business_services",
              "miscellaneous_food_stores",
              "miscellaneous_general_merchandise",
              "miscellaneous_general_services",
              "miscellaneous_home_furnishing_specialty_stores",
              "miscellaneous_publishing_and_printing",
              "miscellaneous_recreation_services",
              "miscellaneous_repair_shops",
              "miscellaneous_specialty_retail",
              "mobile_home_dealers",
              "motion_picture_theaters",
              "motor_freight_carriers_and_trucking",
              "motor_homes_dealers",
              "motor_vehicle_supplies_and_new_parts",
              "motorcycle_shops_and_dealers",
              "motorcycle_shops_dealers",
              "music_stores_musical_instruments_pianos_and_sheet_music",
              "news_dealers_and_newsstands",
              "non_fi_money_orders",
              "non_fi_stored_value_card_purchase_load",
              "nondurable_goods",
              "nurseries_lawn_and_garden_supply_stores",
              "nursing_personal_care",
              "office_and_commercial_furniture",
              "opticians_eyeglasses",
              "optometrists_ophthalmologist",
              "orthopedic_goods_prosthetic_devices",
              "osteopaths",
              "package_stores_beer_wine_and_liquor",
              "paints_varnishes_and_supplies",
              "parking_lots_garages",
              "passenger_railways",
              "pawn_shops",
              "pet_shops_pet_food_and_supplies",
              "petroleum_and_petroleum_products",
              "photo_developing",
              "photographic_photocopy_microfilm_equipment_and_supplies",
              "photographic_studios",
              "picture_video_production",
              "piece_goods_notions_and_other_dry_goods",
              "plumbing_heating_equipment_and_supplies",
              "political_organizations",
              "postal_services_government_only",
              "precious_stones_and_metals_watches_and_jewelry",
              "professional_services",
              "public_warehousing_and_storage",
              "quick_copy_repro_and_blueprint",
              "railroads",
              "real_estate_agents_and_managers_rentals",
              "record_stores",
              "recreational_vehicle_rentals",
              "religious_goods_stores",
              "religious_organizations",
              "roofing_siding_sheet_metal",
              "secretarial_support_services",
              "security_brokers_dealers",
              "service_stations",
              "sewing_needlework_fabric_and_piece_goods_stores",
              "shoe_repair_hat_cleaning",
              "shoe_stores",
              "small_appliance_repair",
              "snowmobile_dealers",
              "special_trade_services",
              "specialty_cleaning",
              "sporting_goods_stores",
              "sporting_recreation_camps",
              "sports_and_riding_apparel_stores",
              "sports_clubs_fields",
              "stamp_and_coin_stores",
              "stationary_office_supplies_printing_and_writing_paper",
              "stationery_stores_office_and_school_supply_stores",
              "swimming_pools_sales",
              "t_ui_travel_germany",
              "tailors_alterations",
              "tax_payments_government_agencies",
              "tax_preparation_services",
              "taxicabs_limousines",
              "telecommunication_equipment_and_telephone_sales",
              "telecommunication_services",
              "telegraph_services",
              "tent_and_awning_shops",
              "testing_laboratories",
              "theatrical_ticket_agencies",
              "timeshares",
              "tire_retreading_and_repair",
              "tolls_bridge_fees",
              "tourist_attractions_and_exhibits",
              "towing_services",
              "trailer_parks_campgrounds",
              "transportation_services",
              "travel_agencies_tour_operators",
              "truck_stop_iteration",
              "truck_utility_trailer_rentals",
              "typesetting_plate_making_and_related_services",
              "typewriter_stores",
              "u_s_federal_government_agencies_or_departments",
              "uniforms_commercial_clothing",
              "used_merchandise_and_secondhand_stores",
              "utilities",
              "variety_stores",
              "veterinary_services",
              "video_amusement_game_supplies",
              "video_game_arcades",
              "video_tape_rental_stores",
              "vocational_trade_schools",
              "watch_jewelry_repair",
              "welding_repair",
              "wholesale_clubs",
              "wig_and_toupee_stores",
              "wires_money_orders",
              "womens_accessory_and_specialty_shops",
              "womens_ready_to_wear_stores",
              "wrecking_and_salvage_yards",
            ]),
          )
          .optional(),
        spending_limits: z
          .array(
            z.object({
              amount: z.coerce.number(),
              categories: z
                .array(
                  z.enum([
                    "ac_refrigeration_repair",
                    "accounting_bookkeeping_services",
                    "advertising_services",
                    "agricultural_cooperative",
                    "airlines_air_carriers",
                    "airports_flying_fields",
                    "ambulance_services",
                    "amusement_parks_carnivals",
                    "antique_reproductions",
                    "antique_shops",
                    "aquariums",
                    "architectural_surveying_services",
                    "art_dealers_and_galleries",
                    "artists_supply_and_craft_shops",
                    "auto_and_home_supply_stores",
                    "auto_body_repair_shops",
                    "auto_paint_shops",
                    "auto_service_shops",
                    "automated_cash_disburse",
                    "automated_fuel_dispensers",
                    "automobile_associations",
                    "automotive_parts_and_accessories_stores",
                    "automotive_tire_stores",
                    "bail_and_bond_payments",
                    "bakeries",
                    "bands_orchestras",
                    "barber_and_beauty_shops",
                    "betting_casino_gambling",
                    "bicycle_shops",
                    "billiard_pool_establishments",
                    "boat_dealers",
                    "boat_rentals_and_leases",
                    "book_stores",
                    "books_periodicals_and_newspapers",
                    "bowling_alleys",
                    "bus_lines",
                    "business_secretarial_schools",
                    "buying_shopping_services",
                    "cable_satellite_and_other_pay_television_and_radio",
                    "camera_and_photographic_supply_stores",
                    "candy_nut_and_confectionery_stores",
                    "car_and_truck_dealers_new_used",
                    "car_and_truck_dealers_used_only",
                    "car_rental_agencies",
                    "car_washes",
                    "carpentry_services",
                    "carpet_upholstery_cleaning",
                    "caterers",
                    "charitable_and_social_service_organizations_fundraising",
                    "chemicals_and_allied_products",
                    "child_care_services",
                    "childrens_and_infants_wear_stores",
                    "chiropodists_podiatrists",
                    "chiropractors",
                    "cigar_stores_and_stands",
                    "civic_social_fraternal_associations",
                    "cleaning_and_maintenance",
                    "clothing_rental",
                    "colleges_universities",
                    "commercial_equipment",
                    "commercial_footwear",
                    "commercial_photography_art_and_graphics",
                    "commuter_transport_and_ferries",
                    "computer_network_services",
                    "computer_programming",
                    "computer_repair",
                    "computer_software_stores",
                    "computers_peripherals_and_software",
                    "concrete_work_services",
                    "construction_materials",
                    "consulting_public_relations",
                    "correspondence_schools",
                    "cosmetic_stores",
                    "counseling_services",
                    "country_clubs",
                    "courier_services",
                    "court_costs",
                    "credit_reporting_agencies",
                    "cruise_lines",
                    "dairy_products_stores",
                    "dance_hall_studios_schools",
                    "dating_escort_services",
                    "dentists_orthodontists",
                    "department_stores",
                    "detective_agencies",
                    "digital_goods_applications",
                    "digital_goods_games",
                    "digital_goods_large_volume",
                    "digital_goods_media",
                    "direct_marketing_catalog_merchant",
                    "direct_marketing_combination_catalog_and_retail_merchant",
                    "direct_marketing_inbound_telemarketing",
                    "direct_marketing_insurance_services",
                    "direct_marketing_other",
                    "direct_marketing_outbound_telemarketing",
                    "direct_marketing_subscription",
                    "direct_marketing_travel",
                    "discount_stores",
                    "doctors",
                    "door_to_door_sales",
                    "drapery_window_covering_and_upholstery_stores",
                    "drinking_places",
                    "drug_stores_and_pharmacies",
                    "drugs_drug_proprietaries_and_druggist_sundries",
                    "dry_cleaners",
                    "durable_goods",
                    "duty_free_stores",
                    "eating_places_restaurants",
                    "educational_services",
                    "electric_razor_stores",
                    "electric_vehicle_charging",
                    "electrical_parts_and_equipment",
                    "electrical_services",
                    "electronics_repair_shops",
                    "electronics_stores",
                    "elementary_secondary_schools",
                    "emergency_services_gcas_visa_use_only",
                    "employment_temp_agencies",
                    "equipment_rental",
                    "exterminating_services",
                    "family_clothing_stores",
                    "fast_food_restaurants",
                    "financial_institutions",
                    "fines_government_administrative_entities",
                    "fireplace_fireplace_screens_and_accessories_stores",
                    "floor_covering_stores",
                    "florists",
                    "florists_supplies_nursery_stock_and_flowers",
                    "freezer_and_locker_meat_provisioners",
                    "fuel_dealers_non_automotive",
                    "funeral_services_crematories",
                    "furniture_home_furnishings_and_equipment_stores_except_appliances",
                    "furniture_repair_refinishing",
                    "furriers_and_fur_shops",
                    "general_services",
                    "gift_card_novelty_and_souvenir_shops",
                    "glass_paint_and_wallpaper_stores",
                    "glassware_crystal_stores",
                    "golf_courses_public",
                    "government_licensed_horse_dog_racing_us_region_only",
                    "government_licensed_online_casions_online_gambling_us_region_only",
                    "government_owned_lotteries_non_us_region",
                    "government_owned_lotteries_us_region_only",
                    "government_services",
                    "grocery_stores_supermarkets",
                    "hardware_equipment_and_supplies",
                    "hardware_stores",
                    "health_and_beauty_spas",
                    "hearing_aids_sales_and_supplies",
                    "heating_plumbing_a_c",
                    "hobby_toy_and_game_shops",
                    "home_supply_warehouse_stores",
                    "hospitals",
                    "hotels_motels_and_resorts",
                    "household_appliance_stores",
                    "industrial_supplies",
                    "information_retrieval_services",
                    "insurance_default",
                    "insurance_underwriting_premiums",
                    "intra_company_purchases",
                    "jewelry_stores_watches_clocks_and_silverware_stores",
                    "landscaping_services",
                    "laundries",
                    "laundry_cleaning_services",
                    "legal_services_attorneys",
                    "luggage_and_leather_goods_stores",
                    "lumber_building_materials_stores",
                    "manual_cash_disburse",
                    "marinas_service_and_supplies",
                    "marketplaces",
                    "masonry_stonework_and_plaster",
                    "massage_parlors",
                    "medical_and_dental_labs",
                    "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                    "medical_services",
                    "membership_organizations",
                    "mens_and_boys_clothing_and_accessories_stores",
                    "mens_womens_clothing_stores",
                    "metal_service_centers",
                    "miscellaneous",
                    "miscellaneous_apparel_and_accessory_shops",
                    "miscellaneous_auto_dealers",
                    "miscellaneous_business_services",
                    "miscellaneous_food_stores",
                    "miscellaneous_general_merchandise",
                    "miscellaneous_general_services",
                    "miscellaneous_home_furnishing_specialty_stores",
                    "miscellaneous_publishing_and_printing",
                    "miscellaneous_recreation_services",
                    "miscellaneous_repair_shops",
                    "miscellaneous_specialty_retail",
                    "mobile_home_dealers",
                    "motion_picture_theaters",
                    "motor_freight_carriers_and_trucking",
                    "motor_homes_dealers",
                    "motor_vehicle_supplies_and_new_parts",
                    "motorcycle_shops_and_dealers",
                    "motorcycle_shops_dealers",
                    "music_stores_musical_instruments_pianos_and_sheet_music",
                    "news_dealers_and_newsstands",
                    "non_fi_money_orders",
                    "non_fi_stored_value_card_purchase_load",
                    "nondurable_goods",
                    "nurseries_lawn_and_garden_supply_stores",
                    "nursing_personal_care",
                    "office_and_commercial_furniture",
                    "opticians_eyeglasses",
                    "optometrists_ophthalmologist",
                    "orthopedic_goods_prosthetic_devices",
                    "osteopaths",
                    "package_stores_beer_wine_and_liquor",
                    "paints_varnishes_and_supplies",
                    "parking_lots_garages",
                    "passenger_railways",
                    "pawn_shops",
                    "pet_shops_pet_food_and_supplies",
                    "petroleum_and_petroleum_products",
                    "photo_developing",
                    "photographic_photocopy_microfilm_equipment_and_supplies",
                    "photographic_studios",
                    "picture_video_production",
                    "piece_goods_notions_and_other_dry_goods",
                    "plumbing_heating_equipment_and_supplies",
                    "political_organizations",
                    "postal_services_government_only",
                    "precious_stones_and_metals_watches_and_jewelry",
                    "professional_services",
                    "public_warehousing_and_storage",
                    "quick_copy_repro_and_blueprint",
                    "railroads",
                    "real_estate_agents_and_managers_rentals",
                    "record_stores",
                    "recreational_vehicle_rentals",
                    "religious_goods_stores",
                    "religious_organizations",
                    "roofing_siding_sheet_metal",
                    "secretarial_support_services",
                    "security_brokers_dealers",
                    "service_stations",
                    "sewing_needlework_fabric_and_piece_goods_stores",
                    "shoe_repair_hat_cleaning",
                    "shoe_stores",
                    "small_appliance_repair",
                    "snowmobile_dealers",
                    "special_trade_services",
                    "specialty_cleaning",
                    "sporting_goods_stores",
                    "sporting_recreation_camps",
                    "sports_and_riding_apparel_stores",
                    "sports_clubs_fields",
                    "stamp_and_coin_stores",
                    "stationary_office_supplies_printing_and_writing_paper",
                    "stationery_stores_office_and_school_supply_stores",
                    "swimming_pools_sales",
                    "t_ui_travel_germany",
                    "tailors_alterations",
                    "tax_payments_government_agencies",
                    "tax_preparation_services",
                    "taxicabs_limousines",
                    "telecommunication_equipment_and_telephone_sales",
                    "telecommunication_services",
                    "telegraph_services",
                    "tent_and_awning_shops",
                    "testing_laboratories",
                    "theatrical_ticket_agencies",
                    "timeshares",
                    "tire_retreading_and_repair",
                    "tolls_bridge_fees",
                    "tourist_attractions_and_exhibits",
                    "towing_services",
                    "trailer_parks_campgrounds",
                    "transportation_services",
                    "travel_agencies_tour_operators",
                    "truck_stop_iteration",
                    "truck_utility_trailer_rentals",
                    "typesetting_plate_making_and_related_services",
                    "typewriter_stores",
                    "u_s_federal_government_agencies_or_departments",
                    "uniforms_commercial_clothing",
                    "used_merchandise_and_secondhand_stores",
                    "utilities",
                    "variety_stores",
                    "veterinary_services",
                    "video_amusement_game_supplies",
                    "video_game_arcades",
                    "video_tape_rental_stores",
                    "vocational_trade_schools",
                    "watch_jewelry_repair",
                    "welding_repair",
                    "wholesale_clubs",
                    "wig_and_toupee_stores",
                    "wires_money_orders",
                    "womens_accessory_and_specialty_shops",
                    "womens_ready_to_wear_stores",
                    "wrecking_and_salvage_yards",
                  ]),
                )
                .optional(),
              interval: z.enum([
                "all_time",
                "daily",
                "monthly",
                "per_authorization",
                "weekly",
                "yearly",
              ]),
            }),
          )
          .optional(),
      })
      .optional(),
    status: z.enum(["active", "inactive"]).optional(),
    type: z.enum(["physical", "virtual"]),
  })

  const postIssuingCardsResponseValidator = responseValidationFactory(
    [["200", s_issuing_card]],
    s_error,
  )

  router.post("postIssuingCards", "/v1/issuing/cards", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postIssuingCardsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postIssuingCards(input, ctx)

    ctx.body = postIssuingCardsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getIssuingCardsCardParamSchema = z.object({ card: z.coerce.string() })

  const getIssuingCardsCardQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getIssuingCardsCardBodySchema = z.object({}).optional()

  const getIssuingCardsCardResponseValidator = responseValidationFactory(
    [["200", s_issuing_card]],
    s_error,
  )

  router.get(
    "getIssuingCardsCard",
    "/v1/issuing/cards/:card",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getIssuingCardsCardParamSchema, ctx.params),
        query: parseRequestInput(getIssuingCardsCardQuerySchema, ctx.query),
        body: parseRequestInput(
          getIssuingCardsCardBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getIssuingCardsCard(
        input,
        ctx,
      )

      ctx.body = getIssuingCardsCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postIssuingCardsCardParamSchema = z.object({ card: z.coerce.string() })

  const postIssuingCardsCardBodySchema = z
    .object({
      cancellation_reason: z.enum(["lost", "stolen"]).optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      pin: z
        .object({ encrypted_number: z.coerce.string().optional() })
        .optional(),
      spending_controls: z
        .object({
          allowed_categories: z
            .array(
              z.enum([
                "ac_refrigeration_repair",
                "accounting_bookkeeping_services",
                "advertising_services",
                "agricultural_cooperative",
                "airlines_air_carriers",
                "airports_flying_fields",
                "ambulance_services",
                "amusement_parks_carnivals",
                "antique_reproductions",
                "antique_shops",
                "aquariums",
                "architectural_surveying_services",
                "art_dealers_and_galleries",
                "artists_supply_and_craft_shops",
                "auto_and_home_supply_stores",
                "auto_body_repair_shops",
                "auto_paint_shops",
                "auto_service_shops",
                "automated_cash_disburse",
                "automated_fuel_dispensers",
                "automobile_associations",
                "automotive_parts_and_accessories_stores",
                "automotive_tire_stores",
                "bail_and_bond_payments",
                "bakeries",
                "bands_orchestras",
                "barber_and_beauty_shops",
                "betting_casino_gambling",
                "bicycle_shops",
                "billiard_pool_establishments",
                "boat_dealers",
                "boat_rentals_and_leases",
                "book_stores",
                "books_periodicals_and_newspapers",
                "bowling_alleys",
                "bus_lines",
                "business_secretarial_schools",
                "buying_shopping_services",
                "cable_satellite_and_other_pay_television_and_radio",
                "camera_and_photographic_supply_stores",
                "candy_nut_and_confectionery_stores",
                "car_and_truck_dealers_new_used",
                "car_and_truck_dealers_used_only",
                "car_rental_agencies",
                "car_washes",
                "carpentry_services",
                "carpet_upholstery_cleaning",
                "caterers",
                "charitable_and_social_service_organizations_fundraising",
                "chemicals_and_allied_products",
                "child_care_services",
                "childrens_and_infants_wear_stores",
                "chiropodists_podiatrists",
                "chiropractors",
                "cigar_stores_and_stands",
                "civic_social_fraternal_associations",
                "cleaning_and_maintenance",
                "clothing_rental",
                "colleges_universities",
                "commercial_equipment",
                "commercial_footwear",
                "commercial_photography_art_and_graphics",
                "commuter_transport_and_ferries",
                "computer_network_services",
                "computer_programming",
                "computer_repair",
                "computer_software_stores",
                "computers_peripherals_and_software",
                "concrete_work_services",
                "construction_materials",
                "consulting_public_relations",
                "correspondence_schools",
                "cosmetic_stores",
                "counseling_services",
                "country_clubs",
                "courier_services",
                "court_costs",
                "credit_reporting_agencies",
                "cruise_lines",
                "dairy_products_stores",
                "dance_hall_studios_schools",
                "dating_escort_services",
                "dentists_orthodontists",
                "department_stores",
                "detective_agencies",
                "digital_goods_applications",
                "digital_goods_games",
                "digital_goods_large_volume",
                "digital_goods_media",
                "direct_marketing_catalog_merchant",
                "direct_marketing_combination_catalog_and_retail_merchant",
                "direct_marketing_inbound_telemarketing",
                "direct_marketing_insurance_services",
                "direct_marketing_other",
                "direct_marketing_outbound_telemarketing",
                "direct_marketing_subscription",
                "direct_marketing_travel",
                "discount_stores",
                "doctors",
                "door_to_door_sales",
                "drapery_window_covering_and_upholstery_stores",
                "drinking_places",
                "drug_stores_and_pharmacies",
                "drugs_drug_proprietaries_and_druggist_sundries",
                "dry_cleaners",
                "durable_goods",
                "duty_free_stores",
                "eating_places_restaurants",
                "educational_services",
                "electric_razor_stores",
                "electric_vehicle_charging",
                "electrical_parts_and_equipment",
                "electrical_services",
                "electronics_repair_shops",
                "electronics_stores",
                "elementary_secondary_schools",
                "emergency_services_gcas_visa_use_only",
                "employment_temp_agencies",
                "equipment_rental",
                "exterminating_services",
                "family_clothing_stores",
                "fast_food_restaurants",
                "financial_institutions",
                "fines_government_administrative_entities",
                "fireplace_fireplace_screens_and_accessories_stores",
                "floor_covering_stores",
                "florists",
                "florists_supplies_nursery_stock_and_flowers",
                "freezer_and_locker_meat_provisioners",
                "fuel_dealers_non_automotive",
                "funeral_services_crematories",
                "furniture_home_furnishings_and_equipment_stores_except_appliances",
                "furniture_repair_refinishing",
                "furriers_and_fur_shops",
                "general_services",
                "gift_card_novelty_and_souvenir_shops",
                "glass_paint_and_wallpaper_stores",
                "glassware_crystal_stores",
                "golf_courses_public",
                "government_licensed_horse_dog_racing_us_region_only",
                "government_licensed_online_casions_online_gambling_us_region_only",
                "government_owned_lotteries_non_us_region",
                "government_owned_lotteries_us_region_only",
                "government_services",
                "grocery_stores_supermarkets",
                "hardware_equipment_and_supplies",
                "hardware_stores",
                "health_and_beauty_spas",
                "hearing_aids_sales_and_supplies",
                "heating_plumbing_a_c",
                "hobby_toy_and_game_shops",
                "home_supply_warehouse_stores",
                "hospitals",
                "hotels_motels_and_resorts",
                "household_appliance_stores",
                "industrial_supplies",
                "information_retrieval_services",
                "insurance_default",
                "insurance_underwriting_premiums",
                "intra_company_purchases",
                "jewelry_stores_watches_clocks_and_silverware_stores",
                "landscaping_services",
                "laundries",
                "laundry_cleaning_services",
                "legal_services_attorneys",
                "luggage_and_leather_goods_stores",
                "lumber_building_materials_stores",
                "manual_cash_disburse",
                "marinas_service_and_supplies",
                "marketplaces",
                "masonry_stonework_and_plaster",
                "massage_parlors",
                "medical_and_dental_labs",
                "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                "medical_services",
                "membership_organizations",
                "mens_and_boys_clothing_and_accessories_stores",
                "mens_womens_clothing_stores",
                "metal_service_centers",
                "miscellaneous",
                "miscellaneous_apparel_and_accessory_shops",
                "miscellaneous_auto_dealers",
                "miscellaneous_business_services",
                "miscellaneous_food_stores",
                "miscellaneous_general_merchandise",
                "miscellaneous_general_services",
                "miscellaneous_home_furnishing_specialty_stores",
                "miscellaneous_publishing_and_printing",
                "miscellaneous_recreation_services",
                "miscellaneous_repair_shops",
                "miscellaneous_specialty_retail",
                "mobile_home_dealers",
                "motion_picture_theaters",
                "motor_freight_carriers_and_trucking",
                "motor_homes_dealers",
                "motor_vehicle_supplies_and_new_parts",
                "motorcycle_shops_and_dealers",
                "motorcycle_shops_dealers",
                "music_stores_musical_instruments_pianos_and_sheet_music",
                "news_dealers_and_newsstands",
                "non_fi_money_orders",
                "non_fi_stored_value_card_purchase_load",
                "nondurable_goods",
                "nurseries_lawn_and_garden_supply_stores",
                "nursing_personal_care",
                "office_and_commercial_furniture",
                "opticians_eyeglasses",
                "optometrists_ophthalmologist",
                "orthopedic_goods_prosthetic_devices",
                "osteopaths",
                "package_stores_beer_wine_and_liquor",
                "paints_varnishes_and_supplies",
                "parking_lots_garages",
                "passenger_railways",
                "pawn_shops",
                "pet_shops_pet_food_and_supplies",
                "petroleum_and_petroleum_products",
                "photo_developing",
                "photographic_photocopy_microfilm_equipment_and_supplies",
                "photographic_studios",
                "picture_video_production",
                "piece_goods_notions_and_other_dry_goods",
                "plumbing_heating_equipment_and_supplies",
                "political_organizations",
                "postal_services_government_only",
                "precious_stones_and_metals_watches_and_jewelry",
                "professional_services",
                "public_warehousing_and_storage",
                "quick_copy_repro_and_blueprint",
                "railroads",
                "real_estate_agents_and_managers_rentals",
                "record_stores",
                "recreational_vehicle_rentals",
                "religious_goods_stores",
                "religious_organizations",
                "roofing_siding_sheet_metal",
                "secretarial_support_services",
                "security_brokers_dealers",
                "service_stations",
                "sewing_needlework_fabric_and_piece_goods_stores",
                "shoe_repair_hat_cleaning",
                "shoe_stores",
                "small_appliance_repair",
                "snowmobile_dealers",
                "special_trade_services",
                "specialty_cleaning",
                "sporting_goods_stores",
                "sporting_recreation_camps",
                "sports_and_riding_apparel_stores",
                "sports_clubs_fields",
                "stamp_and_coin_stores",
                "stationary_office_supplies_printing_and_writing_paper",
                "stationery_stores_office_and_school_supply_stores",
                "swimming_pools_sales",
                "t_ui_travel_germany",
                "tailors_alterations",
                "tax_payments_government_agencies",
                "tax_preparation_services",
                "taxicabs_limousines",
                "telecommunication_equipment_and_telephone_sales",
                "telecommunication_services",
                "telegraph_services",
                "tent_and_awning_shops",
                "testing_laboratories",
                "theatrical_ticket_agencies",
                "timeshares",
                "tire_retreading_and_repair",
                "tolls_bridge_fees",
                "tourist_attractions_and_exhibits",
                "towing_services",
                "trailer_parks_campgrounds",
                "transportation_services",
                "travel_agencies_tour_operators",
                "truck_stop_iteration",
                "truck_utility_trailer_rentals",
                "typesetting_plate_making_and_related_services",
                "typewriter_stores",
                "u_s_federal_government_agencies_or_departments",
                "uniforms_commercial_clothing",
                "used_merchandise_and_secondhand_stores",
                "utilities",
                "variety_stores",
                "veterinary_services",
                "video_amusement_game_supplies",
                "video_game_arcades",
                "video_tape_rental_stores",
                "vocational_trade_schools",
                "watch_jewelry_repair",
                "welding_repair",
                "wholesale_clubs",
                "wig_and_toupee_stores",
                "wires_money_orders",
                "womens_accessory_and_specialty_shops",
                "womens_ready_to_wear_stores",
                "wrecking_and_salvage_yards",
              ]),
            )
            .optional(),
          blocked_categories: z
            .array(
              z.enum([
                "ac_refrigeration_repair",
                "accounting_bookkeeping_services",
                "advertising_services",
                "agricultural_cooperative",
                "airlines_air_carriers",
                "airports_flying_fields",
                "ambulance_services",
                "amusement_parks_carnivals",
                "antique_reproductions",
                "antique_shops",
                "aquariums",
                "architectural_surveying_services",
                "art_dealers_and_galleries",
                "artists_supply_and_craft_shops",
                "auto_and_home_supply_stores",
                "auto_body_repair_shops",
                "auto_paint_shops",
                "auto_service_shops",
                "automated_cash_disburse",
                "automated_fuel_dispensers",
                "automobile_associations",
                "automotive_parts_and_accessories_stores",
                "automotive_tire_stores",
                "bail_and_bond_payments",
                "bakeries",
                "bands_orchestras",
                "barber_and_beauty_shops",
                "betting_casino_gambling",
                "bicycle_shops",
                "billiard_pool_establishments",
                "boat_dealers",
                "boat_rentals_and_leases",
                "book_stores",
                "books_periodicals_and_newspapers",
                "bowling_alleys",
                "bus_lines",
                "business_secretarial_schools",
                "buying_shopping_services",
                "cable_satellite_and_other_pay_television_and_radio",
                "camera_and_photographic_supply_stores",
                "candy_nut_and_confectionery_stores",
                "car_and_truck_dealers_new_used",
                "car_and_truck_dealers_used_only",
                "car_rental_agencies",
                "car_washes",
                "carpentry_services",
                "carpet_upholstery_cleaning",
                "caterers",
                "charitable_and_social_service_organizations_fundraising",
                "chemicals_and_allied_products",
                "child_care_services",
                "childrens_and_infants_wear_stores",
                "chiropodists_podiatrists",
                "chiropractors",
                "cigar_stores_and_stands",
                "civic_social_fraternal_associations",
                "cleaning_and_maintenance",
                "clothing_rental",
                "colleges_universities",
                "commercial_equipment",
                "commercial_footwear",
                "commercial_photography_art_and_graphics",
                "commuter_transport_and_ferries",
                "computer_network_services",
                "computer_programming",
                "computer_repair",
                "computer_software_stores",
                "computers_peripherals_and_software",
                "concrete_work_services",
                "construction_materials",
                "consulting_public_relations",
                "correspondence_schools",
                "cosmetic_stores",
                "counseling_services",
                "country_clubs",
                "courier_services",
                "court_costs",
                "credit_reporting_agencies",
                "cruise_lines",
                "dairy_products_stores",
                "dance_hall_studios_schools",
                "dating_escort_services",
                "dentists_orthodontists",
                "department_stores",
                "detective_agencies",
                "digital_goods_applications",
                "digital_goods_games",
                "digital_goods_large_volume",
                "digital_goods_media",
                "direct_marketing_catalog_merchant",
                "direct_marketing_combination_catalog_and_retail_merchant",
                "direct_marketing_inbound_telemarketing",
                "direct_marketing_insurance_services",
                "direct_marketing_other",
                "direct_marketing_outbound_telemarketing",
                "direct_marketing_subscription",
                "direct_marketing_travel",
                "discount_stores",
                "doctors",
                "door_to_door_sales",
                "drapery_window_covering_and_upholstery_stores",
                "drinking_places",
                "drug_stores_and_pharmacies",
                "drugs_drug_proprietaries_and_druggist_sundries",
                "dry_cleaners",
                "durable_goods",
                "duty_free_stores",
                "eating_places_restaurants",
                "educational_services",
                "electric_razor_stores",
                "electric_vehicle_charging",
                "electrical_parts_and_equipment",
                "electrical_services",
                "electronics_repair_shops",
                "electronics_stores",
                "elementary_secondary_schools",
                "emergency_services_gcas_visa_use_only",
                "employment_temp_agencies",
                "equipment_rental",
                "exterminating_services",
                "family_clothing_stores",
                "fast_food_restaurants",
                "financial_institutions",
                "fines_government_administrative_entities",
                "fireplace_fireplace_screens_and_accessories_stores",
                "floor_covering_stores",
                "florists",
                "florists_supplies_nursery_stock_and_flowers",
                "freezer_and_locker_meat_provisioners",
                "fuel_dealers_non_automotive",
                "funeral_services_crematories",
                "furniture_home_furnishings_and_equipment_stores_except_appliances",
                "furniture_repair_refinishing",
                "furriers_and_fur_shops",
                "general_services",
                "gift_card_novelty_and_souvenir_shops",
                "glass_paint_and_wallpaper_stores",
                "glassware_crystal_stores",
                "golf_courses_public",
                "government_licensed_horse_dog_racing_us_region_only",
                "government_licensed_online_casions_online_gambling_us_region_only",
                "government_owned_lotteries_non_us_region",
                "government_owned_lotteries_us_region_only",
                "government_services",
                "grocery_stores_supermarkets",
                "hardware_equipment_and_supplies",
                "hardware_stores",
                "health_and_beauty_spas",
                "hearing_aids_sales_and_supplies",
                "heating_plumbing_a_c",
                "hobby_toy_and_game_shops",
                "home_supply_warehouse_stores",
                "hospitals",
                "hotels_motels_and_resorts",
                "household_appliance_stores",
                "industrial_supplies",
                "information_retrieval_services",
                "insurance_default",
                "insurance_underwriting_premiums",
                "intra_company_purchases",
                "jewelry_stores_watches_clocks_and_silverware_stores",
                "landscaping_services",
                "laundries",
                "laundry_cleaning_services",
                "legal_services_attorneys",
                "luggage_and_leather_goods_stores",
                "lumber_building_materials_stores",
                "manual_cash_disburse",
                "marinas_service_and_supplies",
                "marketplaces",
                "masonry_stonework_and_plaster",
                "massage_parlors",
                "medical_and_dental_labs",
                "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                "medical_services",
                "membership_organizations",
                "mens_and_boys_clothing_and_accessories_stores",
                "mens_womens_clothing_stores",
                "metal_service_centers",
                "miscellaneous",
                "miscellaneous_apparel_and_accessory_shops",
                "miscellaneous_auto_dealers",
                "miscellaneous_business_services",
                "miscellaneous_food_stores",
                "miscellaneous_general_merchandise",
                "miscellaneous_general_services",
                "miscellaneous_home_furnishing_specialty_stores",
                "miscellaneous_publishing_and_printing",
                "miscellaneous_recreation_services",
                "miscellaneous_repair_shops",
                "miscellaneous_specialty_retail",
                "mobile_home_dealers",
                "motion_picture_theaters",
                "motor_freight_carriers_and_trucking",
                "motor_homes_dealers",
                "motor_vehicle_supplies_and_new_parts",
                "motorcycle_shops_and_dealers",
                "motorcycle_shops_dealers",
                "music_stores_musical_instruments_pianos_and_sheet_music",
                "news_dealers_and_newsstands",
                "non_fi_money_orders",
                "non_fi_stored_value_card_purchase_load",
                "nondurable_goods",
                "nurseries_lawn_and_garden_supply_stores",
                "nursing_personal_care",
                "office_and_commercial_furniture",
                "opticians_eyeglasses",
                "optometrists_ophthalmologist",
                "orthopedic_goods_prosthetic_devices",
                "osteopaths",
                "package_stores_beer_wine_and_liquor",
                "paints_varnishes_and_supplies",
                "parking_lots_garages",
                "passenger_railways",
                "pawn_shops",
                "pet_shops_pet_food_and_supplies",
                "petroleum_and_petroleum_products",
                "photo_developing",
                "photographic_photocopy_microfilm_equipment_and_supplies",
                "photographic_studios",
                "picture_video_production",
                "piece_goods_notions_and_other_dry_goods",
                "plumbing_heating_equipment_and_supplies",
                "political_organizations",
                "postal_services_government_only",
                "precious_stones_and_metals_watches_and_jewelry",
                "professional_services",
                "public_warehousing_and_storage",
                "quick_copy_repro_and_blueprint",
                "railroads",
                "real_estate_agents_and_managers_rentals",
                "record_stores",
                "recreational_vehicle_rentals",
                "religious_goods_stores",
                "religious_organizations",
                "roofing_siding_sheet_metal",
                "secretarial_support_services",
                "security_brokers_dealers",
                "service_stations",
                "sewing_needlework_fabric_and_piece_goods_stores",
                "shoe_repair_hat_cleaning",
                "shoe_stores",
                "small_appliance_repair",
                "snowmobile_dealers",
                "special_trade_services",
                "specialty_cleaning",
                "sporting_goods_stores",
                "sporting_recreation_camps",
                "sports_and_riding_apparel_stores",
                "sports_clubs_fields",
                "stamp_and_coin_stores",
                "stationary_office_supplies_printing_and_writing_paper",
                "stationery_stores_office_and_school_supply_stores",
                "swimming_pools_sales",
                "t_ui_travel_germany",
                "tailors_alterations",
                "tax_payments_government_agencies",
                "tax_preparation_services",
                "taxicabs_limousines",
                "telecommunication_equipment_and_telephone_sales",
                "telecommunication_services",
                "telegraph_services",
                "tent_and_awning_shops",
                "testing_laboratories",
                "theatrical_ticket_agencies",
                "timeshares",
                "tire_retreading_and_repair",
                "tolls_bridge_fees",
                "tourist_attractions_and_exhibits",
                "towing_services",
                "trailer_parks_campgrounds",
                "transportation_services",
                "travel_agencies_tour_operators",
                "truck_stop_iteration",
                "truck_utility_trailer_rentals",
                "typesetting_plate_making_and_related_services",
                "typewriter_stores",
                "u_s_federal_government_agencies_or_departments",
                "uniforms_commercial_clothing",
                "used_merchandise_and_secondhand_stores",
                "utilities",
                "variety_stores",
                "veterinary_services",
                "video_amusement_game_supplies",
                "video_game_arcades",
                "video_tape_rental_stores",
                "vocational_trade_schools",
                "watch_jewelry_repair",
                "welding_repair",
                "wholesale_clubs",
                "wig_and_toupee_stores",
                "wires_money_orders",
                "womens_accessory_and_specialty_shops",
                "womens_ready_to_wear_stores",
                "wrecking_and_salvage_yards",
              ]),
            )
            .optional(),
          spending_limits: z
            .array(
              z.object({
                amount: z.coerce.number(),
                categories: z
                  .array(
                    z.enum([
                      "ac_refrigeration_repair",
                      "accounting_bookkeeping_services",
                      "advertising_services",
                      "agricultural_cooperative",
                      "airlines_air_carriers",
                      "airports_flying_fields",
                      "ambulance_services",
                      "amusement_parks_carnivals",
                      "antique_reproductions",
                      "antique_shops",
                      "aquariums",
                      "architectural_surveying_services",
                      "art_dealers_and_galleries",
                      "artists_supply_and_craft_shops",
                      "auto_and_home_supply_stores",
                      "auto_body_repair_shops",
                      "auto_paint_shops",
                      "auto_service_shops",
                      "automated_cash_disburse",
                      "automated_fuel_dispensers",
                      "automobile_associations",
                      "automotive_parts_and_accessories_stores",
                      "automotive_tire_stores",
                      "bail_and_bond_payments",
                      "bakeries",
                      "bands_orchestras",
                      "barber_and_beauty_shops",
                      "betting_casino_gambling",
                      "bicycle_shops",
                      "billiard_pool_establishments",
                      "boat_dealers",
                      "boat_rentals_and_leases",
                      "book_stores",
                      "books_periodicals_and_newspapers",
                      "bowling_alleys",
                      "bus_lines",
                      "business_secretarial_schools",
                      "buying_shopping_services",
                      "cable_satellite_and_other_pay_television_and_radio",
                      "camera_and_photographic_supply_stores",
                      "candy_nut_and_confectionery_stores",
                      "car_and_truck_dealers_new_used",
                      "car_and_truck_dealers_used_only",
                      "car_rental_agencies",
                      "car_washes",
                      "carpentry_services",
                      "carpet_upholstery_cleaning",
                      "caterers",
                      "charitable_and_social_service_organizations_fundraising",
                      "chemicals_and_allied_products",
                      "child_care_services",
                      "childrens_and_infants_wear_stores",
                      "chiropodists_podiatrists",
                      "chiropractors",
                      "cigar_stores_and_stands",
                      "civic_social_fraternal_associations",
                      "cleaning_and_maintenance",
                      "clothing_rental",
                      "colleges_universities",
                      "commercial_equipment",
                      "commercial_footwear",
                      "commercial_photography_art_and_graphics",
                      "commuter_transport_and_ferries",
                      "computer_network_services",
                      "computer_programming",
                      "computer_repair",
                      "computer_software_stores",
                      "computers_peripherals_and_software",
                      "concrete_work_services",
                      "construction_materials",
                      "consulting_public_relations",
                      "correspondence_schools",
                      "cosmetic_stores",
                      "counseling_services",
                      "country_clubs",
                      "courier_services",
                      "court_costs",
                      "credit_reporting_agencies",
                      "cruise_lines",
                      "dairy_products_stores",
                      "dance_hall_studios_schools",
                      "dating_escort_services",
                      "dentists_orthodontists",
                      "department_stores",
                      "detective_agencies",
                      "digital_goods_applications",
                      "digital_goods_games",
                      "digital_goods_large_volume",
                      "digital_goods_media",
                      "direct_marketing_catalog_merchant",
                      "direct_marketing_combination_catalog_and_retail_merchant",
                      "direct_marketing_inbound_telemarketing",
                      "direct_marketing_insurance_services",
                      "direct_marketing_other",
                      "direct_marketing_outbound_telemarketing",
                      "direct_marketing_subscription",
                      "direct_marketing_travel",
                      "discount_stores",
                      "doctors",
                      "door_to_door_sales",
                      "drapery_window_covering_and_upholstery_stores",
                      "drinking_places",
                      "drug_stores_and_pharmacies",
                      "drugs_drug_proprietaries_and_druggist_sundries",
                      "dry_cleaners",
                      "durable_goods",
                      "duty_free_stores",
                      "eating_places_restaurants",
                      "educational_services",
                      "electric_razor_stores",
                      "electric_vehicle_charging",
                      "electrical_parts_and_equipment",
                      "electrical_services",
                      "electronics_repair_shops",
                      "electronics_stores",
                      "elementary_secondary_schools",
                      "emergency_services_gcas_visa_use_only",
                      "employment_temp_agencies",
                      "equipment_rental",
                      "exterminating_services",
                      "family_clothing_stores",
                      "fast_food_restaurants",
                      "financial_institutions",
                      "fines_government_administrative_entities",
                      "fireplace_fireplace_screens_and_accessories_stores",
                      "floor_covering_stores",
                      "florists",
                      "florists_supplies_nursery_stock_and_flowers",
                      "freezer_and_locker_meat_provisioners",
                      "fuel_dealers_non_automotive",
                      "funeral_services_crematories",
                      "furniture_home_furnishings_and_equipment_stores_except_appliances",
                      "furniture_repair_refinishing",
                      "furriers_and_fur_shops",
                      "general_services",
                      "gift_card_novelty_and_souvenir_shops",
                      "glass_paint_and_wallpaper_stores",
                      "glassware_crystal_stores",
                      "golf_courses_public",
                      "government_licensed_horse_dog_racing_us_region_only",
                      "government_licensed_online_casions_online_gambling_us_region_only",
                      "government_owned_lotteries_non_us_region",
                      "government_owned_lotteries_us_region_only",
                      "government_services",
                      "grocery_stores_supermarkets",
                      "hardware_equipment_and_supplies",
                      "hardware_stores",
                      "health_and_beauty_spas",
                      "hearing_aids_sales_and_supplies",
                      "heating_plumbing_a_c",
                      "hobby_toy_and_game_shops",
                      "home_supply_warehouse_stores",
                      "hospitals",
                      "hotels_motels_and_resorts",
                      "household_appliance_stores",
                      "industrial_supplies",
                      "information_retrieval_services",
                      "insurance_default",
                      "insurance_underwriting_premiums",
                      "intra_company_purchases",
                      "jewelry_stores_watches_clocks_and_silverware_stores",
                      "landscaping_services",
                      "laundries",
                      "laundry_cleaning_services",
                      "legal_services_attorneys",
                      "luggage_and_leather_goods_stores",
                      "lumber_building_materials_stores",
                      "manual_cash_disburse",
                      "marinas_service_and_supplies",
                      "marketplaces",
                      "masonry_stonework_and_plaster",
                      "massage_parlors",
                      "medical_and_dental_labs",
                      "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
                      "medical_services",
                      "membership_organizations",
                      "mens_and_boys_clothing_and_accessories_stores",
                      "mens_womens_clothing_stores",
                      "metal_service_centers",
                      "miscellaneous",
                      "miscellaneous_apparel_and_accessory_shops",
                      "miscellaneous_auto_dealers",
                      "miscellaneous_business_services",
                      "miscellaneous_food_stores",
                      "miscellaneous_general_merchandise",
                      "miscellaneous_general_services",
                      "miscellaneous_home_furnishing_specialty_stores",
                      "miscellaneous_publishing_and_printing",
                      "miscellaneous_recreation_services",
                      "miscellaneous_repair_shops",
                      "miscellaneous_specialty_retail",
                      "mobile_home_dealers",
                      "motion_picture_theaters",
                      "motor_freight_carriers_and_trucking",
                      "motor_homes_dealers",
                      "motor_vehicle_supplies_and_new_parts",
                      "motorcycle_shops_and_dealers",
                      "motorcycle_shops_dealers",
                      "music_stores_musical_instruments_pianos_and_sheet_music",
                      "news_dealers_and_newsstands",
                      "non_fi_money_orders",
                      "non_fi_stored_value_card_purchase_load",
                      "nondurable_goods",
                      "nurseries_lawn_and_garden_supply_stores",
                      "nursing_personal_care",
                      "office_and_commercial_furniture",
                      "opticians_eyeglasses",
                      "optometrists_ophthalmologist",
                      "orthopedic_goods_prosthetic_devices",
                      "osteopaths",
                      "package_stores_beer_wine_and_liquor",
                      "paints_varnishes_and_supplies",
                      "parking_lots_garages",
                      "passenger_railways",
                      "pawn_shops",
                      "pet_shops_pet_food_and_supplies",
                      "petroleum_and_petroleum_products",
                      "photo_developing",
                      "photographic_photocopy_microfilm_equipment_and_supplies",
                      "photographic_studios",
                      "picture_video_production",
                      "piece_goods_notions_and_other_dry_goods",
                      "plumbing_heating_equipment_and_supplies",
                      "political_organizations",
                      "postal_services_government_only",
                      "precious_stones_and_metals_watches_and_jewelry",
                      "professional_services",
                      "public_warehousing_and_storage",
                      "quick_copy_repro_and_blueprint",
                      "railroads",
                      "real_estate_agents_and_managers_rentals",
                      "record_stores",
                      "recreational_vehicle_rentals",
                      "religious_goods_stores",
                      "religious_organizations",
                      "roofing_siding_sheet_metal",
                      "secretarial_support_services",
                      "security_brokers_dealers",
                      "service_stations",
                      "sewing_needlework_fabric_and_piece_goods_stores",
                      "shoe_repair_hat_cleaning",
                      "shoe_stores",
                      "small_appliance_repair",
                      "snowmobile_dealers",
                      "special_trade_services",
                      "specialty_cleaning",
                      "sporting_goods_stores",
                      "sporting_recreation_camps",
                      "sports_and_riding_apparel_stores",
                      "sports_clubs_fields",
                      "stamp_and_coin_stores",
                      "stationary_office_supplies_printing_and_writing_paper",
                      "stationery_stores_office_and_school_supply_stores",
                      "swimming_pools_sales",
                      "t_ui_travel_germany",
                      "tailors_alterations",
                      "tax_payments_government_agencies",
                      "tax_preparation_services",
                      "taxicabs_limousines",
                      "telecommunication_equipment_and_telephone_sales",
                      "telecommunication_services",
                      "telegraph_services",
                      "tent_and_awning_shops",
                      "testing_laboratories",
                      "theatrical_ticket_agencies",
                      "timeshares",
                      "tire_retreading_and_repair",
                      "tolls_bridge_fees",
                      "tourist_attractions_and_exhibits",
                      "towing_services",
                      "trailer_parks_campgrounds",
                      "transportation_services",
                      "travel_agencies_tour_operators",
                      "truck_stop_iteration",
                      "truck_utility_trailer_rentals",
                      "typesetting_plate_making_and_related_services",
                      "typewriter_stores",
                      "u_s_federal_government_agencies_or_departments",
                      "uniforms_commercial_clothing",
                      "used_merchandise_and_secondhand_stores",
                      "utilities",
                      "variety_stores",
                      "veterinary_services",
                      "video_amusement_game_supplies",
                      "video_game_arcades",
                      "video_tape_rental_stores",
                      "vocational_trade_schools",
                      "watch_jewelry_repair",
                      "welding_repair",
                      "wholesale_clubs",
                      "wig_and_toupee_stores",
                      "wires_money_orders",
                      "womens_accessory_and_specialty_shops",
                      "womens_ready_to_wear_stores",
                      "wrecking_and_salvage_yards",
                    ]),
                  )
                  .optional(),
                interval: z.enum([
                  "all_time",
                  "daily",
                  "monthly",
                  "per_authorization",
                  "weekly",
                  "yearly",
                ]),
              }),
            )
            .optional(),
        })
        .optional(),
      status: z.enum(["active", "canceled", "inactive"]).optional(),
    })
    .optional()

  const postIssuingCardsCardResponseValidator = responseValidationFactory(
    [["200", s_issuing_card]],
    s_error,
  )

  router.post(
    "postIssuingCardsCard",
    "/v1/issuing/cards/:card",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postIssuingCardsCardParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          postIssuingCardsCardBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postIssuingCardsCard(
        input,
        ctx,
      )

      ctx.body = postIssuingCardsCardResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIssuingDisputesQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z
      .enum(["expired", "lost", "submitted", "unsubmitted", "won"])
      .optional(),
    transaction: z.coerce.string().optional(),
  })

  const getIssuingDisputesBodySchema = z.object({}).optional()

  const getIssuingDisputesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_issuing_dispute)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getIssuingDisputes",
    "/v1/issuing/disputes",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getIssuingDisputesQuerySchema, ctx.query),
        body: parseRequestInput(getIssuingDisputesBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getIssuingDisputes(
        input,
        ctx,
      )

      ctx.body = getIssuingDisputesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postIssuingDisputesBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      evidence: z
        .object({
          canceled: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              canceled_at: z.union([z.coerce.number(), z.enum([""])]),
              cancellation_policy_provided: z.union([
                z.coerce.boolean(),
                z.enum([""]),
              ]),
              cancellation_reason: z.union([z.coerce.string(), z.enum([""])]),
              expected_at: z.union([z.coerce.number(), z.enum([""])]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              product_description: z.union([z.coerce.string(), z.enum([""])]),
              product_type: z.enum(["", "merchandise", "service"]).optional(),
              return_status: z
                .enum(["", "merchant_rejected", "successful"])
                .optional(),
              returned_at: z.union([z.coerce.number(), z.enum([""])]),
            }),
            z.enum([""]),
          ]),
          duplicate: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              card_statement: z.union([z.coerce.string(), z.enum([""])]),
              cash_receipt: z.union([z.coerce.string(), z.enum([""])]),
              check_image: z.union([z.coerce.string(), z.enum([""])]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              original_transaction: z.coerce.string().optional(),
            }),
            z.enum([""]),
          ]),
          fraudulent: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
            }),
            z.enum([""]),
          ]),
          merchandise_not_as_described: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              received_at: z.union([z.coerce.number(), z.enum([""])]),
              return_description: z.union([z.coerce.string(), z.enum([""])]),
              return_status: z
                .enum(["", "merchant_rejected", "successful"])
                .optional(),
              returned_at: z.union([z.coerce.number(), z.enum([""])]),
            }),
            z.enum([""]),
          ]),
          not_received: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              expected_at: z.union([z.coerce.number(), z.enum([""])]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              product_description: z.union([z.coerce.string(), z.enum([""])]),
              product_type: z.enum(["", "merchandise", "service"]).optional(),
            }),
            z.enum([""]),
          ]),
          other: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              product_description: z.union([z.coerce.string(), z.enum([""])]),
              product_type: z.enum(["", "merchandise", "service"]).optional(),
            }),
            z.enum([""]),
          ]),
          reason: z
            .enum([
              "canceled",
              "duplicate",
              "fraudulent",
              "merchandise_not_as_described",
              "not_received",
              "other",
              "service_not_as_described",
            ])
            .optional(),
          service_not_as_described: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              canceled_at: z.union([z.coerce.number(), z.enum([""])]),
              cancellation_reason: z.union([z.coerce.string(), z.enum([""])]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              received_at: z.union([z.coerce.number(), z.enum([""])]),
            }),
            z.enum([""]),
          ]),
        })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.object({}).optional(),
      transaction: z.coerce.string().optional(),
      treasury: z.object({ received_debit: z.coerce.string() }).optional(),
    })
    .optional()

  const postIssuingDisputesResponseValidator = responseValidationFactory(
    [["200", s_issuing_dispute]],
    s_error,
  )

  router.post(
    "postIssuingDisputes",
    "/v1/issuing/disputes",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postIssuingDisputesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postIssuingDisputes(
        input,
        ctx,
      )

      ctx.body = postIssuingDisputesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIssuingDisputesDisputeParamSchema = z.object({
    dispute: z.coerce.string(),
  })

  const getIssuingDisputesDisputeQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getIssuingDisputesDisputeBodySchema = z.object({}).optional()

  const getIssuingDisputesDisputeResponseValidator = responseValidationFactory(
    [["200", s_issuing_dispute]],
    s_error,
  )

  router.get(
    "getIssuingDisputesDispute",
    "/v1/issuing/disputes/:dispute",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getIssuingDisputesDisputeParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getIssuingDisputesDisputeQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getIssuingDisputesDisputeBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getIssuingDisputesDispute(
        input,
        ctx,
      )

      ctx.body = getIssuingDisputesDisputeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postIssuingDisputesDisputeParamSchema = z.object({
    dispute: z.coerce.string(),
  })

  const postIssuingDisputesDisputeBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      evidence: z
        .object({
          canceled: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              canceled_at: z.union([z.coerce.number(), z.enum([""])]),
              cancellation_policy_provided: z.union([
                z.coerce.boolean(),
                z.enum([""]),
              ]),
              cancellation_reason: z.union([z.coerce.string(), z.enum([""])]),
              expected_at: z.union([z.coerce.number(), z.enum([""])]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              product_description: z.union([z.coerce.string(), z.enum([""])]),
              product_type: z.enum(["", "merchandise", "service"]).optional(),
              return_status: z
                .enum(["", "merchant_rejected", "successful"])
                .optional(),
              returned_at: z.union([z.coerce.number(), z.enum([""])]),
            }),
            z.enum([""]),
          ]),
          duplicate: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              card_statement: z.union([z.coerce.string(), z.enum([""])]),
              cash_receipt: z.union([z.coerce.string(), z.enum([""])]),
              check_image: z.union([z.coerce.string(), z.enum([""])]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              original_transaction: z.coerce.string().optional(),
            }),
            z.enum([""]),
          ]),
          fraudulent: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
            }),
            z.enum([""]),
          ]),
          merchandise_not_as_described: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              received_at: z.union([z.coerce.number(), z.enum([""])]),
              return_description: z.union([z.coerce.string(), z.enum([""])]),
              return_status: z
                .enum(["", "merchant_rejected", "successful"])
                .optional(),
              returned_at: z.union([z.coerce.number(), z.enum([""])]),
            }),
            z.enum([""]),
          ]),
          not_received: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              expected_at: z.union([z.coerce.number(), z.enum([""])]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              product_description: z.union([z.coerce.string(), z.enum([""])]),
              product_type: z.enum(["", "merchandise", "service"]).optional(),
            }),
            z.enum([""]),
          ]),
          other: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              product_description: z.union([z.coerce.string(), z.enum([""])]),
              product_type: z.enum(["", "merchandise", "service"]).optional(),
            }),
            z.enum([""]),
          ]),
          reason: z
            .enum([
              "canceled",
              "duplicate",
              "fraudulent",
              "merchandise_not_as_described",
              "not_received",
              "other",
              "service_not_as_described",
            ])
            .optional(),
          service_not_as_described: z.union([
            z.object({
              additional_documentation: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              canceled_at: z.union([z.coerce.number(), z.enum([""])]),
              cancellation_reason: z.union([z.coerce.string(), z.enum([""])]),
              explanation: z.union([z.coerce.string(), z.enum([""])]),
              received_at: z.union([z.coerce.number(), z.enum([""])]),
            }),
            z.enum([""]),
          ]),
        })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postIssuingDisputesDisputeResponseValidator = responseValidationFactory(
    [["200", s_issuing_dispute]],
    s_error,
  )

  router.post(
    "postIssuingDisputesDispute",
    "/v1/issuing/disputes/:dispute",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postIssuingDisputesDisputeParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postIssuingDisputesDisputeBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postIssuingDisputesDispute(
        input,
        ctx,
      )

      ctx.body = postIssuingDisputesDisputeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postIssuingDisputesDisputeSubmitParamSchema = z.object({
    dispute: z.coerce.string(),
  })

  const postIssuingDisputesDisputeSubmitBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postIssuingDisputesDisputeSubmitResponseValidator =
    responseValidationFactory([["200", s_issuing_dispute]], s_error)

  router.post(
    "postIssuingDisputesDisputeSubmit",
    "/v1/issuing/disputes/:dispute/submit",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postIssuingDisputesDisputeSubmitParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postIssuingDisputesDisputeSubmitBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postIssuingDisputesDisputeSubmit(input, ctx)

      ctx.body = postIssuingDisputesDisputeSubmitResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIssuingSettlementsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getIssuingSettlementsBodySchema = z.object({}).optional()

  const getIssuingSettlementsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_issuing_settlement),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getIssuingSettlements",
    "/v1/issuing/settlements",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getIssuingSettlementsQuerySchema, ctx.query),
        body: parseRequestInput(
          getIssuingSettlementsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getIssuingSettlements(
        input,
        ctx,
      )

      ctx.body = getIssuingSettlementsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIssuingSettlementsSettlementParamSchema = z.object({
    settlement: z.coerce.string(),
  })

  const getIssuingSettlementsSettlementQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getIssuingSettlementsSettlementBodySchema = z.object({}).optional()

  const getIssuingSettlementsSettlementResponseValidator =
    responseValidationFactory([["200", s_issuing_settlement]], s_error)

  router.get(
    "getIssuingSettlementsSettlement",
    "/v1/issuing/settlements/:settlement",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getIssuingSettlementsSettlementParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getIssuingSettlementsSettlementQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getIssuingSettlementsSettlementBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getIssuingSettlementsSettlement(input, ctx)

      ctx.body = getIssuingSettlementsSettlementResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postIssuingSettlementsSettlementParamSchema = z.object({
    settlement: z.coerce.string(),
  })

  const postIssuingSettlementsSettlementBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.object({}).optional(),
    })
    .optional()

  const postIssuingSettlementsSettlementResponseValidator =
    responseValidationFactory([["200", s_issuing_settlement]], s_error)

  router.post(
    "postIssuingSettlementsSettlement",
    "/v1/issuing/settlements/:settlement",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postIssuingSettlementsSettlementParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postIssuingSettlementsSettlementBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postIssuingSettlementsSettlement(input, ctx)

      ctx.body = postIssuingSettlementsSettlementResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIssuingTransactionsQuerySchema = z.object({
    card: z.coerce.string().optional(),
    cardholder: z.coerce.string().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    type: z.enum(["capture", "refund"]).optional(),
  })

  const getIssuingTransactionsBodySchema = z.object({}).optional()

  const getIssuingTransactionsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_issuing_transaction)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getIssuingTransactions",
    "/v1/issuing/transactions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getIssuingTransactionsQuerySchema, ctx.query),
        body: parseRequestInput(
          getIssuingTransactionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getIssuingTransactions(
        input,
        ctx,
      )

      ctx.body = getIssuingTransactionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getIssuingTransactionsTransactionParamSchema = z.object({
    transaction: z.coerce.string(),
  })

  const getIssuingTransactionsTransactionQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getIssuingTransactionsTransactionBodySchema = z.object({}).optional()

  const getIssuingTransactionsTransactionResponseValidator =
    responseValidationFactory([["200", s_issuing_transaction]], s_error)

  router.get(
    "getIssuingTransactionsTransaction",
    "/v1/issuing/transactions/:transaction",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getIssuingTransactionsTransactionParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getIssuingTransactionsTransactionQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getIssuingTransactionsTransactionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getIssuingTransactionsTransaction(input, ctx)

      ctx.body = getIssuingTransactionsTransactionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postIssuingTransactionsTransactionParamSchema = z.object({
    transaction: z.coerce.string(),
  })

  const postIssuingTransactionsTransactionBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postIssuingTransactionsTransactionResponseValidator =
    responseValidationFactory([["200", s_issuing_transaction]], s_error)

  router.post(
    "postIssuingTransactionsTransaction",
    "/v1/issuing/transactions/:transaction",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postIssuingTransactionsTransactionParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postIssuingTransactionsTransactionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postIssuingTransactionsTransaction(input, ctx)

      ctx.body = postIssuingTransactionsTransactionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postLinkAccountSessionsBodySchema = z.object({
    account_holder: z.object({
      account: z.coerce.string().optional(),
      customer: z.coerce.string().optional(),
      type: z.enum(["account", "customer"]),
    }),
    expand: z.array(z.coerce.string()).optional(),
    filters: z.object({ countries: z.array(z.coerce.string()) }).optional(),
    permissions: z.array(
      z.enum(["balances", "ownership", "payment_method", "transactions"]),
    ),
    prefetch: z.array(z.enum(["balances", "ownership"])).optional(),
    return_url: z.coerce.string().optional(),
  })

  const postLinkAccountSessionsResponseValidator = responseValidationFactory(
    [["200", s_financial_connections_session]],
    s_error,
  )

  router.post(
    "postLinkAccountSessions",
    "/v1/link_account_sessions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postLinkAccountSessionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postLinkAccountSessions(
        input,
        ctx,
      )

      ctx.body = postLinkAccountSessionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getLinkAccountSessionsSessionParamSchema = z.object({
    session: z.coerce.string(),
  })

  const getLinkAccountSessionsSessionQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getLinkAccountSessionsSessionBodySchema = z.object({}).optional()

  const getLinkAccountSessionsSessionResponseValidator =
    responseValidationFactory(
      [["200", s_financial_connections_session]],
      s_error,
    )

  router.get(
    "getLinkAccountSessionsSession",
    "/v1/link_account_sessions/:session",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getLinkAccountSessionsSessionParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getLinkAccountSessionsSessionQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getLinkAccountSessionsSessionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getLinkAccountSessionsSession(input, ctx)

      ctx.body = getLinkAccountSessionsSessionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getLinkedAccountsQuerySchema = z.object({
    account_holder: z
      .object({
        account: z.coerce.string().optional(),
        customer: z.coerce.string().optional(),
      })
      .optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    session: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getLinkedAccountsBodySchema = z.object({}).optional()

  const getLinkedAccountsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_financial_connections_account)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getLinkedAccounts", "/v1/linked_accounts", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getLinkedAccountsQuerySchema, ctx.query),
      body: parseRequestInput(getLinkedAccountsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getLinkedAccounts(input, ctx)

    ctx.body = getLinkedAccountsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getLinkedAccountsAccountParamSchema = z.object({
    account: z.coerce.string(),
  })

  const getLinkedAccountsAccountQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getLinkedAccountsAccountBodySchema = z.object({}).optional()

  const getLinkedAccountsAccountResponseValidator = responseValidationFactory(
    [["200", s_financial_connections_account]],
    s_error,
  )

  router.get(
    "getLinkedAccountsAccount",
    "/v1/linked_accounts/:account",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getLinkedAccountsAccountParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getLinkedAccountsAccountQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getLinkedAccountsAccountBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getLinkedAccountsAccount(
        input,
        ctx,
      )

      ctx.body = getLinkedAccountsAccountResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postLinkedAccountsAccountDisconnectParamSchema = z.object({
    account: z.coerce.string(),
  })

  const postLinkedAccountsAccountDisconnectBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postLinkedAccountsAccountDisconnectResponseValidator =
    responseValidationFactory(
      [["200", s_financial_connections_account]],
      s_error,
    )

  router.post(
    "postLinkedAccountsAccountDisconnect",
    "/v1/linked_accounts/:account/disconnect",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postLinkedAccountsAccountDisconnectParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postLinkedAccountsAccountDisconnectBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postLinkedAccountsAccountDisconnect(input, ctx)

      ctx.body = postLinkedAccountsAccountDisconnectResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getLinkedAccountsAccountOwnersParamSchema = z.object({
    account: z.coerce.string(),
  })

  const getLinkedAccountsAccountOwnersQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    ownership: z.coerce.string(),
    starting_after: z.coerce.string().optional(),
  })

  const getLinkedAccountsAccountOwnersBodySchema = z.object({}).optional()

  const getLinkedAccountsAccountOwnersResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(s_financial_connections_account_owner),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getLinkedAccountsAccountOwners",
    "/v1/linked_accounts/:account/owners",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getLinkedAccountsAccountOwnersParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getLinkedAccountsAccountOwnersQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getLinkedAccountsAccountOwnersBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getLinkedAccountsAccountOwners(input, ctx)

      ctx.body = getLinkedAccountsAccountOwnersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postLinkedAccountsAccountRefreshParamSchema = z.object({
    account: z.coerce.string(),
  })

  const postLinkedAccountsAccountRefreshBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    features: z.array(z.enum(["balance", "ownership"])),
  })

  const postLinkedAccountsAccountRefreshResponseValidator =
    responseValidationFactory(
      [["200", s_financial_connections_account]],
      s_error,
    )

  router.post(
    "postLinkedAccountsAccountRefresh",
    "/v1/linked_accounts/:account/refresh",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postLinkedAccountsAccountRefreshParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postLinkedAccountsAccountRefreshBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postLinkedAccountsAccountRefresh(input, ctx)

      ctx.body = postLinkedAccountsAccountRefreshResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getMandatesMandateParamSchema = z.object({ mandate: z.coerce.string() })

  const getMandatesMandateQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getMandatesMandateBodySchema = z.object({}).optional()

  const getMandatesMandateResponseValidator = responseValidationFactory(
    [["200", s_mandate]],
    s_error,
  )

  router.get(
    "getMandatesMandate",
    "/v1/mandates/:mandate",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getMandatesMandateParamSchema, ctx.params),
        query: parseRequestInput(getMandatesMandateQuerySchema, ctx.query),
        body: parseRequestInput(getMandatesMandateBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getMandatesMandate(
        input,
        ctx,
      )

      ctx.body = getMandatesMandateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getPaymentIntentsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    customer: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getPaymentIntentsBodySchema = z.object({}).optional()

  const getPaymentIntentsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_payment_intent)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getPaymentIntents", "/v1/payment_intents", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getPaymentIntentsQuerySchema, ctx.query),
      body: parseRequestInput(getPaymentIntentsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getPaymentIntents(input, ctx)

    ctx.body = getPaymentIntentsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postPaymentIntentsBodySchema = z.object({
    amount: z.coerce.number(),
    application_fee_amount: z.coerce.number().optional(),
    automatic_payment_methods: z
      .object({
        allow_redirects: z.enum(["always", "never"]).optional(),
        enabled: z.coerce.boolean(),
      })
      .optional(),
    capture_method: z
      .enum(["automatic", "automatic_async", "manual"])
      .optional(),
    confirm: z.coerce.boolean().optional(),
    confirmation_method: z.enum(["automatic", "manual"]).optional(),
    currency: z.coerce.string(),
    customer: z.coerce.string().optional(),
    description: z.coerce.string().optional(),
    error_on_requires_action: z.coerce.boolean().optional(),
    expand: z.array(z.coerce.string()).optional(),
    mandate: z.coerce.string().optional(),
    mandate_data: z.union([
      z.object({
        customer_acceptance: z.object({
          accepted_at: z.coerce.number().optional(),
          offline: z.object({}).optional(),
          online: z
            .object({
              ip_address: z.coerce.string(),
              user_agent: z.coerce.string(),
            })
            .optional(),
          type: z.enum(["offline", "online"]),
        }),
      }),
      z.enum([""]),
    ]),
    metadata: z.object({}).optional(),
    off_session: z.union([
      z.coerce.boolean(),
      z.enum(["one_off", "recurring"]),
    ]),
    on_behalf_of: z.coerce.string().optional(),
    payment_method: z.coerce.string().optional(),
    payment_method_configuration: z.coerce.string().optional(),
    payment_method_data: z
      .object({
        acss_debit: z
          .object({
            account_number: z.coerce.string(),
            institution_number: z.coerce.string(),
            transit_number: z.coerce.string(),
          })
          .optional(),
        affirm: z.object({}).optional(),
        afterpay_clearpay: z.object({}).optional(),
        alipay: z.object({}).optional(),
        au_becs_debit: z
          .object({
            account_number: z.coerce.string(),
            bsb_number: z.coerce.string(),
          })
          .optional(),
        bacs_debit: z
          .object({
            account_number: z.coerce.string().optional(),
            sort_code: z.coerce.string().optional(),
          })
          .optional(),
        bancontact: z.object({}).optional(),
        billing_details: z
          .object({
            address: z.union([
              z.object({
                city: z.coerce.string().optional(),
                country: z.coerce.string().optional(),
                line1: z.coerce.string().optional(),
                line2: z.coerce.string().optional(),
                postal_code: z.coerce.string().optional(),
                state: z.coerce.string().optional(),
              }),
              z.enum([""]),
            ]),
            email: z.union([z.coerce.string(), z.enum([""])]),
            name: z.union([z.coerce.string(), z.enum([""])]),
            phone: z.union([z.coerce.string(), z.enum([""])]),
          })
          .optional(),
        blik: z.object({}).optional(),
        boleto: z.object({ tax_id: z.coerce.string() }).optional(),
        cashapp: z.object({}).optional(),
        customer_balance: z.object({}).optional(),
        eps: z
          .object({
            bank: z
              .enum([
                "arzte_und_apotheker_bank",
                "austrian_anadi_bank_ag",
                "bank_austria",
                "bankhaus_carl_spangler",
                "bankhaus_schelhammer_und_schattera_ag",
                "bawag_psk_ag",
                "bks_bank_ag",
                "brull_kallmus_bank_ag",
                "btv_vier_lander_bank",
                "capital_bank_grawe_gruppe_ag",
                "deutsche_bank_ag",
                "dolomitenbank",
                "easybank_ag",
                "erste_bank_und_sparkassen",
                "hypo_alpeadriabank_international_ag",
                "hypo_bank_burgenland_aktiengesellschaft",
                "hypo_noe_lb_fur_niederosterreich_u_wien",
                "hypo_oberosterreich_salzburg_steiermark",
                "hypo_tirol_bank_ag",
                "hypo_vorarlberg_bank_ag",
                "marchfelder_bank",
                "oberbank_ag",
                "raiffeisen_bankengruppe_osterreich",
                "schoellerbank_ag",
                "sparda_bank_wien",
                "volksbank_gruppe",
                "volkskreditbank_ag",
                "vr_bank_braunau",
              ])
              .optional(),
          })
          .optional(),
        fpx: z
          .object({
            bank: z.enum([
              "affin_bank",
              "agrobank",
              "alliance_bank",
              "ambank",
              "bank_islam",
              "bank_muamalat",
              "bank_of_china",
              "bank_rakyat",
              "bsn",
              "cimb",
              "deutsche_bank",
              "hong_leong_bank",
              "hsbc",
              "kfh",
              "maybank2e",
              "maybank2u",
              "ocbc",
              "pb_enterprise",
              "public_bank",
              "rhb",
              "standard_chartered",
              "uob",
            ]),
          })
          .optional(),
        giropay: z.object({}).optional(),
        grabpay: z.object({}).optional(),
        ideal: z
          .object({
            bank: z
              .enum([
                "abn_amro",
                "asn_bank",
                "bunq",
                "handelsbanken",
                "ing",
                "knab",
                "moneyou",
                "n26",
                "rabobank",
                "regiobank",
                "revolut",
                "sns_bank",
                "triodos_bank",
                "van_lanschot",
                "yoursafe",
              ])
              .optional(),
          })
          .optional(),
        interac_present: z.object({}).optional(),
        klarna: z
          .object({
            dob: z
              .object({
                day: z.coerce.number(),
                month: z.coerce.number(),
                year: z.coerce.number(),
              })
              .optional(),
          })
          .optional(),
        konbini: z.object({}).optional(),
        link: z.object({}).optional(),
        metadata: z.object({}).optional(),
        oxxo: z.object({}).optional(),
        p24: z
          .object({
            bank: z
              .enum([
                "alior_bank",
                "bank_millennium",
                "bank_nowy_bfg_sa",
                "bank_pekao_sa",
                "banki_spbdzielcze",
                "blik",
                "bnp_paribas",
                "boz",
                "citi_handlowy",
                "credit_agricole",
                "envelobank",
                "etransfer_pocztowy24",
                "getin_bank",
                "ideabank",
                "ing",
                "inteligo",
                "mbank_mtransfer",
                "nest_przelew",
                "noble_pay",
                "pbac_z_ipko",
                "plus_bank",
                "santander_przelew24",
                "tmobile_usbugi_bankowe",
                "toyota_bank",
                "volkswagen_bank",
              ])
              .optional(),
          })
          .optional(),
        paynow: z.object({}).optional(),
        paypal: z.object({}).optional(),
        pix: z.object({}).optional(),
        promptpay: z.object({}).optional(),
        radar_options: z
          .object({ session: z.coerce.string().optional() })
          .optional(),
        sepa_debit: z.object({ iban: z.coerce.string() }).optional(),
        sofort: z
          .object({ country: z.enum(["AT", "BE", "DE", "ES", "IT", "NL"]) })
          .optional(),
        type: z.enum([
          "acss_debit",
          "affirm",
          "afterpay_clearpay",
          "alipay",
          "au_becs_debit",
          "bacs_debit",
          "bancontact",
          "blik",
          "boleto",
          "cashapp",
          "customer_balance",
          "eps",
          "fpx",
          "giropay",
          "grabpay",
          "ideal",
          "klarna",
          "konbini",
          "link",
          "oxxo",
          "p24",
          "paynow",
          "paypal",
          "pix",
          "promptpay",
          "sepa_debit",
          "sofort",
          "us_bank_account",
          "wechat_pay",
          "zip",
        ]),
        us_bank_account: z
          .object({
            account_holder_type: z.enum(["company", "individual"]).optional(),
            account_number: z.coerce.string().optional(),
            account_type: z.enum(["checking", "savings"]).optional(),
            financial_connections_account: z.coerce.string().optional(),
            routing_number: z.coerce.string().optional(),
          })
          .optional(),
        wechat_pay: z.object({}).optional(),
        zip: z.object({}).optional(),
      })
      .optional(),
    payment_method_options: z
      .object({
        acss_debit: z.union([
          z.object({
            mandate_options: z
              .object({
                custom_mandate_url: z.union([z.coerce.string(), z.enum([""])]),
                interval_description: z.coerce.string().optional(),
                payment_schedule: z
                  .enum(["combined", "interval", "sporadic"])
                  .optional(),
                transaction_type: z.enum(["business", "personal"]).optional(),
              })
              .optional(),
            setup_future_usage: z
              .enum(["", "none", "off_session", "on_session"])
              .optional(),
            verification_method: z
              .enum(["automatic", "instant", "microdeposits"])
              .optional(),
          }),
          z.enum([""]),
        ]),
        affirm: z.union([
          z.object({
            capture_method: z.enum(["", "manual"]).optional(),
            preferred_locale: z.coerce.string().optional(),
            setup_future_usage: z.enum(["none"]).optional(),
          }),
          z.enum([""]),
        ]),
        afterpay_clearpay: z.union([
          z.object({
            capture_method: z.enum(["", "manual"]).optional(),
            reference: z.coerce.string().optional(),
            setup_future_usage: z.enum(["none"]).optional(),
          }),
          z.enum([""]),
        ]),
        alipay: z.union([
          z.object({
            setup_future_usage: z.enum(["", "none", "off_session"]).optional(),
          }),
          z.enum([""]),
        ]),
        au_becs_debit: z.union([
          z.object({
            setup_future_usage: z
              .enum(["", "none", "off_session", "on_session"])
              .optional(),
          }),
          z.enum([""]),
        ]),
        bacs_debit: z.union([
          z.object({
            setup_future_usage: z
              .enum(["", "none", "off_session", "on_session"])
              .optional(),
          }),
          z.enum([""]),
        ]),
        bancontact: z.union([
          z.object({
            preferred_language: z.enum(["de", "en", "fr", "nl"]).optional(),
            setup_future_usage: z.enum(["", "none", "off_session"]).optional(),
          }),
          z.enum([""]),
        ]),
        blik: z.union([
          z.object({ code: z.coerce.string().optional() }),
          z.enum([""]),
        ]),
        boleto: z.union([
          z.object({
            expires_after_days: z.coerce.number().optional(),
            setup_future_usage: z
              .enum(["", "none", "off_session", "on_session"])
              .optional(),
          }),
          z.enum([""]),
        ]),
        card: z.union([
          z.object({
            capture_method: z.enum(["", "manual"]).optional(),
            cvc_token: z.coerce.string().optional(),
            installments: z
              .object({
                enabled: z.coerce.boolean().optional(),
                plan: z.union([
                  z.object({
                    count: z.coerce.number(),
                    interval: z.enum(["month"]),
                    type: z.enum(["fixed_count"]),
                  }),
                  z.enum([""]),
                ]),
              })
              .optional(),
            mandate_options: z
              .object({
                amount: z.coerce.number(),
                amount_type: z.enum(["fixed", "maximum"]),
                description: z.coerce.string().optional(),
                end_date: z.coerce.number().optional(),
                interval: z.enum(["day", "month", "sporadic", "week", "year"]),
                interval_count: z.coerce.number().optional(),
                reference: z.coerce.string(),
                start_date: z.coerce.number(),
                supported_types: z.array(z.enum(["india"])).optional(),
              })
              .optional(),
            network: z
              .enum([
                "amex",
                "cartes_bancaires",
                "diners",
                "discover",
                "eftpos_au",
                "interac",
                "jcb",
                "mastercard",
                "unionpay",
                "unknown",
                "visa",
              ])
              .optional(),
            request_three_d_secure: z.enum(["any", "automatic"]).optional(),
            setup_future_usage: z
              .enum(["", "none", "off_session", "on_session"])
              .optional(),
            statement_descriptor_suffix_kana: z.union([
              z.coerce.string(),
              z.enum([""]),
            ]),
            statement_descriptor_suffix_kanji: z.union([
              z.coerce.string(),
              z.enum([""]),
            ]),
          }),
          z.enum([""]),
        ]),
        card_present: z.union([
          z.object({
            request_extended_authorization: z.coerce.boolean().optional(),
            request_incremental_authorization_support: z.coerce
              .boolean()
              .optional(),
          }),
          z.enum([""]),
        ]),
        cashapp: z.union([
          z.object({
            capture_method: z.enum(["", "manual"]).optional(),
            setup_future_usage: z
              .enum(["", "none", "off_session", "on_session"])
              .optional(),
          }),
          z.enum([""]),
        ]),
        customer_balance: z.union([
          z.object({
            bank_transfer: z
              .object({
                eu_bank_transfer: z
                  .object({ country: z.coerce.string() })
                  .optional(),
                requested_address_types: z
                  .array(
                    z.enum([
                      "aba",
                      "iban",
                      "sepa",
                      "sort_code",
                      "spei",
                      "swift",
                      "zengin",
                    ]),
                  )
                  .optional(),
                type: z.enum([
                  "eu_bank_transfer",
                  "gb_bank_transfer",
                  "jp_bank_transfer",
                  "mx_bank_transfer",
                  "us_bank_transfer",
                ]),
              })
              .optional(),
            funding_type: z.enum(["bank_transfer"]).optional(),
            setup_future_usage: z.enum(["none"]).optional(),
          }),
          z.enum([""]),
        ]),
        eps: z.union([
          z.object({ setup_future_usage: z.enum(["none"]).optional() }),
          z.enum([""]),
        ]),
        fpx: z.union([
          z.object({ setup_future_usage: z.enum(["none"]).optional() }),
          z.enum([""]),
        ]),
        giropay: z.union([
          z.object({ setup_future_usage: z.enum(["none"]).optional() }),
          z.enum([""]),
        ]),
        grabpay: z.union([
          z.object({ setup_future_usage: z.enum(["none"]).optional() }),
          z.enum([""]),
        ]),
        ideal: z.union([
          z.object({
            setup_future_usage: z.enum(["", "none", "off_session"]).optional(),
          }),
          z.enum([""]),
        ]),
        interac_present: z.union([z.object({}), z.enum([""])]),
        klarna: z.union([
          z.object({
            capture_method: z.enum(["", "manual"]).optional(),
            preferred_locale: z
              .enum([
                "cs-CZ",
                "da-DK",
                "de-AT",
                "de-CH",
                "de-DE",
                "el-GR",
                "en-AT",
                "en-AU",
                "en-BE",
                "en-CA",
                "en-CH",
                "en-CZ",
                "en-DE",
                "en-DK",
                "en-ES",
                "en-FI",
                "en-FR",
                "en-GB",
                "en-GR",
                "en-IE",
                "en-IT",
                "en-NL",
                "en-NO",
                "en-NZ",
                "en-PL",
                "en-PT",
                "en-SE",
                "en-US",
                "es-ES",
                "es-US",
                "fi-FI",
                "fr-BE",
                "fr-CA",
                "fr-CH",
                "fr-FR",
                "it-CH",
                "it-IT",
                "nb-NO",
                "nl-BE",
                "nl-NL",
                "pl-PL",
                "pt-PT",
                "sv-FI",
                "sv-SE",
              ])
              .optional(),
            setup_future_usage: z.enum(["none"]).optional(),
          }),
          z.enum([""]),
        ]),
        konbini: z.union([
          z.object({
            confirmation_number: z.union([z.coerce.string(), z.enum([""])]),
            expires_after_days: z.union([z.coerce.number(), z.enum([""])]),
            expires_at: z.union([z.coerce.number(), z.enum([""])]),
            product_description: z.union([z.coerce.string(), z.enum([""])]),
            setup_future_usage: z.enum(["none"]).optional(),
          }),
          z.enum([""]),
        ]),
        link: z.union([
          z.object({
            capture_method: z.enum(["", "manual"]).optional(),
            setup_future_usage: z.enum(["", "none", "off_session"]).optional(),
          }),
          z.enum([""]),
        ]),
        oxxo: z.union([
          z.object({
            expires_after_days: z.coerce.number().optional(),
            setup_future_usage: z.enum(["none"]).optional(),
          }),
          z.enum([""]),
        ]),
        p24: z.union([
          z.object({
            setup_future_usage: z.enum(["none"]).optional(),
            tos_shown_and_accepted: z.coerce.boolean().optional(),
          }),
          z.enum([""]),
        ]),
        paynow: z.union([
          z.object({ setup_future_usage: z.enum(["none"]).optional() }),
          z.enum([""]),
        ]),
        paypal: z.union([
          z.object({
            capture_method: z.enum(["", "manual"]).optional(),
            preferred_locale: z
              .enum([
                "cs-CZ",
                "da-DK",
                "de-AT",
                "de-DE",
                "de-LU",
                "el-GR",
                "en-GB",
                "en-US",
                "es-ES",
                "fi-FI",
                "fr-BE",
                "fr-FR",
                "fr-LU",
                "hu-HU",
                "it-IT",
                "nl-BE",
                "nl-NL",
                "pl-PL",
                "pt-PT",
                "sk-SK",
                "sv-SE",
              ])
              .optional(),
            reference: z.coerce.string().optional(),
            risk_correlation_id: z.coerce.string().optional(),
            setup_future_usage: z.enum(["", "none", "off_session"]).optional(),
          }),
          z.enum([""]),
        ]),
        pix: z.union([
          z.object({
            expires_after_seconds: z.coerce.number().optional(),
            expires_at: z.coerce.number().optional(),
            setup_future_usage: z.enum(["none"]).optional(),
          }),
          z.enum([""]),
        ]),
        promptpay: z.union([
          z.object({ setup_future_usage: z.enum(["none"]).optional() }),
          z.enum([""]),
        ]),
        sepa_debit: z.union([
          z.object({
            mandate_options: z.object({}).optional(),
            setup_future_usage: z
              .enum(["", "none", "off_session", "on_session"])
              .optional(),
          }),
          z.enum([""]),
        ]),
        sofort: z.union([
          z.object({
            preferred_language: z
              .enum(["", "de", "en", "es", "fr", "it", "nl", "pl"])
              .optional(),
            setup_future_usage: z.enum(["", "none", "off_session"]).optional(),
          }),
          z.enum([""]),
        ]),
        us_bank_account: z.union([
          z.object({
            financial_connections: z
              .object({
                permissions: z
                  .array(
                    z.enum([
                      "balances",
                      "ownership",
                      "payment_method",
                      "transactions",
                    ]),
                  )
                  .optional(),
                prefetch: z.array(z.enum(["balances"])).optional(),
                return_url: z.coerce.string().optional(),
              })
              .optional(),
            networks: z
              .object({
                requested: z
                  .array(z.enum(["ach", "us_domestic_wire"]))
                  .optional(),
              })
              .optional(),
            preferred_settlement_speed: z
              .enum(["", "fastest", "standard"])
              .optional(),
            setup_future_usage: z
              .enum(["", "none", "off_session", "on_session"])
              .optional(),
            verification_method: z
              .enum(["automatic", "instant", "microdeposits"])
              .optional(),
          }),
          z.enum([""]),
        ]),
        wechat_pay: z.union([
          z.object({
            app_id: z.coerce.string().optional(),
            client: z.enum(["android", "ios", "web"]),
            setup_future_usage: z.enum(["none"]).optional(),
          }),
          z.enum([""]),
        ]),
        zip: z.union([
          z.object({ setup_future_usage: z.enum(["none"]).optional() }),
          z.enum([""]),
        ]),
      })
      .optional(),
    payment_method_types: z.array(z.coerce.string()).optional(),
    radar_options: z
      .object({ session: z.coerce.string().optional() })
      .optional(),
    receipt_email: z.coerce.string().optional(),
    return_url: z.coerce.string().optional(),
    setup_future_usage: z.enum(["off_session", "on_session"]).optional(),
    shipping: z
      .object({
        address: z.object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        }),
        carrier: z.coerce.string().optional(),
        name: z.coerce.string(),
        phone: z.coerce.string().optional(),
        tracking_number: z.coerce.string().optional(),
      })
      .optional(),
    statement_descriptor: z.coerce.string().optional(),
    statement_descriptor_suffix: z.coerce.string().optional(),
    transfer_data: z
      .object({
        amount: z.coerce.number().optional(),
        destination: z.coerce.string(),
      })
      .optional(),
    transfer_group: z.coerce.string().optional(),
    use_stripe_sdk: z.coerce.boolean().optional(),
  })

  const postPaymentIntentsResponseValidator = responseValidationFactory(
    [["200", s_payment_intent]],
    s_error,
  )

  router.post(
    "postPaymentIntents",
    "/v1/payment_intents",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(postPaymentIntentsBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.postPaymentIntents(
        input,
        ctx,
      )

      ctx.body = postPaymentIntentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getPaymentIntentsSearchQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    page: z.coerce.string().optional(),
    query: z.coerce.string(),
  })

  const getPaymentIntentsSearchBodySchema = z.object({}).optional()

  const getPaymentIntentsSearchResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_payment_intent)),
          has_more: z.coerce.boolean(),
          next_page: z.coerce.string().optional().nullable(),
          object: z.enum(["search_result"]),
          total_count: z.coerce.number().optional(),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getPaymentIntentsSearch",
    "/v1/payment_intents/search",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getPaymentIntentsSearchQuerySchema, ctx.query),
        body: parseRequestInput(
          getPaymentIntentsSearchBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getPaymentIntentsSearch(
        input,
        ctx,
      )

      ctx.body = getPaymentIntentsSearchResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getPaymentIntentsIntentParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const getPaymentIntentsIntentQuerySchema = z.object({
    client_secret: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
  })

  const getPaymentIntentsIntentBodySchema = z.object({}).optional()

  const getPaymentIntentsIntentResponseValidator = responseValidationFactory(
    [["200", s_payment_intent]],
    s_error,
  )

  router.get(
    "getPaymentIntentsIntent",
    "/v1/payment_intents/:intent",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getPaymentIntentsIntentParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(getPaymentIntentsIntentQuerySchema, ctx.query),
        body: parseRequestInput(
          getPaymentIntentsIntentBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getPaymentIntentsIntent(
        input,
        ctx,
      )

      ctx.body = getPaymentIntentsIntentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPaymentIntentsIntentParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const postPaymentIntentsIntentBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      application_fee_amount: z.union([z.coerce.number(), z.enum([""])]),
      capture_method: z
        .enum(["automatic", "automatic_async", "manual"])
        .optional(),
      currency: z.coerce.string().optional(),
      customer: z.coerce.string().optional(),
      description: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      payment_method: z.coerce.string().optional(),
      payment_method_configuration: z.coerce.string().optional(),
      payment_method_data: z
        .object({
          acss_debit: z
            .object({
              account_number: z.coerce.string(),
              institution_number: z.coerce.string(),
              transit_number: z.coerce.string(),
            })
            .optional(),
          affirm: z.object({}).optional(),
          afterpay_clearpay: z.object({}).optional(),
          alipay: z.object({}).optional(),
          au_becs_debit: z
            .object({
              account_number: z.coerce.string(),
              bsb_number: z.coerce.string(),
            })
            .optional(),
          bacs_debit: z
            .object({
              account_number: z.coerce.string().optional(),
              sort_code: z.coerce.string().optional(),
            })
            .optional(),
          bancontact: z.object({}).optional(),
          billing_details: z
            .object({
              address: z.union([
                z.object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                }),
                z.enum([""]),
              ]),
              email: z.union([z.coerce.string(), z.enum([""])]),
              name: z.union([z.coerce.string(), z.enum([""])]),
              phone: z.union([z.coerce.string(), z.enum([""])]),
            })
            .optional(),
          blik: z.object({}).optional(),
          boleto: z.object({ tax_id: z.coerce.string() }).optional(),
          cashapp: z.object({}).optional(),
          customer_balance: z.object({}).optional(),
          eps: z
            .object({
              bank: z
                .enum([
                  "arzte_und_apotheker_bank",
                  "austrian_anadi_bank_ag",
                  "bank_austria",
                  "bankhaus_carl_spangler",
                  "bankhaus_schelhammer_und_schattera_ag",
                  "bawag_psk_ag",
                  "bks_bank_ag",
                  "brull_kallmus_bank_ag",
                  "btv_vier_lander_bank",
                  "capital_bank_grawe_gruppe_ag",
                  "deutsche_bank_ag",
                  "dolomitenbank",
                  "easybank_ag",
                  "erste_bank_und_sparkassen",
                  "hypo_alpeadriabank_international_ag",
                  "hypo_bank_burgenland_aktiengesellschaft",
                  "hypo_noe_lb_fur_niederosterreich_u_wien",
                  "hypo_oberosterreich_salzburg_steiermark",
                  "hypo_tirol_bank_ag",
                  "hypo_vorarlberg_bank_ag",
                  "marchfelder_bank",
                  "oberbank_ag",
                  "raiffeisen_bankengruppe_osterreich",
                  "schoellerbank_ag",
                  "sparda_bank_wien",
                  "volksbank_gruppe",
                  "volkskreditbank_ag",
                  "vr_bank_braunau",
                ])
                .optional(),
            })
            .optional(),
          fpx: z
            .object({
              bank: z.enum([
                "affin_bank",
                "agrobank",
                "alliance_bank",
                "ambank",
                "bank_islam",
                "bank_muamalat",
                "bank_of_china",
                "bank_rakyat",
                "bsn",
                "cimb",
                "deutsche_bank",
                "hong_leong_bank",
                "hsbc",
                "kfh",
                "maybank2e",
                "maybank2u",
                "ocbc",
                "pb_enterprise",
                "public_bank",
                "rhb",
                "standard_chartered",
                "uob",
              ]),
            })
            .optional(),
          giropay: z.object({}).optional(),
          grabpay: z.object({}).optional(),
          ideal: z
            .object({
              bank: z
                .enum([
                  "abn_amro",
                  "asn_bank",
                  "bunq",
                  "handelsbanken",
                  "ing",
                  "knab",
                  "moneyou",
                  "n26",
                  "rabobank",
                  "regiobank",
                  "revolut",
                  "sns_bank",
                  "triodos_bank",
                  "van_lanschot",
                  "yoursafe",
                ])
                .optional(),
            })
            .optional(),
          interac_present: z.object({}).optional(),
          klarna: z
            .object({
              dob: z
                .object({
                  day: z.coerce.number(),
                  month: z.coerce.number(),
                  year: z.coerce.number(),
                })
                .optional(),
            })
            .optional(),
          konbini: z.object({}).optional(),
          link: z.object({}).optional(),
          metadata: z.object({}).optional(),
          oxxo: z.object({}).optional(),
          p24: z
            .object({
              bank: z
                .enum([
                  "alior_bank",
                  "bank_millennium",
                  "bank_nowy_bfg_sa",
                  "bank_pekao_sa",
                  "banki_spbdzielcze",
                  "blik",
                  "bnp_paribas",
                  "boz",
                  "citi_handlowy",
                  "credit_agricole",
                  "envelobank",
                  "etransfer_pocztowy24",
                  "getin_bank",
                  "ideabank",
                  "ing",
                  "inteligo",
                  "mbank_mtransfer",
                  "nest_przelew",
                  "noble_pay",
                  "pbac_z_ipko",
                  "plus_bank",
                  "santander_przelew24",
                  "tmobile_usbugi_bankowe",
                  "toyota_bank",
                  "volkswagen_bank",
                ])
                .optional(),
            })
            .optional(),
          paynow: z.object({}).optional(),
          paypal: z.object({}).optional(),
          pix: z.object({}).optional(),
          promptpay: z.object({}).optional(),
          radar_options: z
            .object({ session: z.coerce.string().optional() })
            .optional(),
          sepa_debit: z.object({ iban: z.coerce.string() }).optional(),
          sofort: z
            .object({ country: z.enum(["AT", "BE", "DE", "ES", "IT", "NL"]) })
            .optional(),
          type: z.enum([
            "acss_debit",
            "affirm",
            "afterpay_clearpay",
            "alipay",
            "au_becs_debit",
            "bacs_debit",
            "bancontact",
            "blik",
            "boleto",
            "cashapp",
            "customer_balance",
            "eps",
            "fpx",
            "giropay",
            "grabpay",
            "ideal",
            "klarna",
            "konbini",
            "link",
            "oxxo",
            "p24",
            "paynow",
            "paypal",
            "pix",
            "promptpay",
            "sepa_debit",
            "sofort",
            "us_bank_account",
            "wechat_pay",
            "zip",
          ]),
          us_bank_account: z
            .object({
              account_holder_type: z.enum(["company", "individual"]).optional(),
              account_number: z.coerce.string().optional(),
              account_type: z.enum(["checking", "savings"]).optional(),
              financial_connections_account: z.coerce.string().optional(),
              routing_number: z.coerce.string().optional(),
            })
            .optional(),
          wechat_pay: z.object({}).optional(),
          zip: z.object({}).optional(),
        })
        .optional(),
      payment_method_options: z
        .object({
          acss_debit: z.union([
            z.object({
              mandate_options: z
                .object({
                  custom_mandate_url: z.union([
                    z.coerce.string(),
                    z.enum([""]),
                  ]),
                  interval_description: z.coerce.string().optional(),
                  payment_schedule: z
                    .enum(["combined", "interval", "sporadic"])
                    .optional(),
                  transaction_type: z.enum(["business", "personal"]).optional(),
                })
                .optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
              verification_method: z
                .enum(["automatic", "instant", "microdeposits"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          affirm: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              preferred_locale: z.coerce.string().optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          afterpay_clearpay: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              reference: z.coerce.string().optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          alipay: z.union([
            z.object({
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          au_becs_debit: z.union([
            z.object({
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          bacs_debit: z.union([
            z.object({
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          bancontact: z.union([
            z.object({
              preferred_language: z.enum(["de", "en", "fr", "nl"]).optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          blik: z.union([
            z.object({ code: z.coerce.string().optional() }),
            z.enum([""]),
          ]),
          boleto: z.union([
            z.object({
              expires_after_days: z.coerce.number().optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          card: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              cvc_token: z.coerce.string().optional(),
              installments: z
                .object({
                  enabled: z.coerce.boolean().optional(),
                  plan: z.union([
                    z.object({
                      count: z.coerce.number(),
                      interval: z.enum(["month"]),
                      type: z.enum(["fixed_count"]),
                    }),
                    z.enum([""]),
                  ]),
                })
                .optional(),
              mandate_options: z
                .object({
                  amount: z.coerce.number(),
                  amount_type: z.enum(["fixed", "maximum"]),
                  description: z.coerce.string().optional(),
                  end_date: z.coerce.number().optional(),
                  interval: z.enum([
                    "day",
                    "month",
                    "sporadic",
                    "week",
                    "year",
                  ]),
                  interval_count: z.coerce.number().optional(),
                  reference: z.coerce.string(),
                  start_date: z.coerce.number(),
                  supported_types: z.array(z.enum(["india"])).optional(),
                })
                .optional(),
              network: z
                .enum([
                  "amex",
                  "cartes_bancaires",
                  "diners",
                  "discover",
                  "eftpos_au",
                  "interac",
                  "jcb",
                  "mastercard",
                  "unionpay",
                  "unknown",
                  "visa",
                ])
                .optional(),
              request_three_d_secure: z.enum(["any", "automatic"]).optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
              statement_descriptor_suffix_kana: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              statement_descriptor_suffix_kanji: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
            }),
            z.enum([""]),
          ]),
          card_present: z.union([
            z.object({
              request_extended_authorization: z.coerce.boolean().optional(),
              request_incremental_authorization_support: z.coerce
                .boolean()
                .optional(),
            }),
            z.enum([""]),
          ]),
          cashapp: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          customer_balance: z.union([
            z.object({
              bank_transfer: z
                .object({
                  eu_bank_transfer: z
                    .object({ country: z.coerce.string() })
                    .optional(),
                  requested_address_types: z
                    .array(
                      z.enum([
                        "aba",
                        "iban",
                        "sepa",
                        "sort_code",
                        "spei",
                        "swift",
                        "zengin",
                      ]),
                    )
                    .optional(),
                  type: z.enum([
                    "eu_bank_transfer",
                    "gb_bank_transfer",
                    "jp_bank_transfer",
                    "mx_bank_transfer",
                    "us_bank_transfer",
                  ]),
                })
                .optional(),
              funding_type: z.enum(["bank_transfer"]).optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          eps: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          fpx: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          giropay: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          grabpay: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          ideal: z.union([
            z.object({
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          interac_present: z.union([z.object({}), z.enum([""])]),
          klarna: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              preferred_locale: z
                .enum([
                  "cs-CZ",
                  "da-DK",
                  "de-AT",
                  "de-CH",
                  "de-DE",
                  "el-GR",
                  "en-AT",
                  "en-AU",
                  "en-BE",
                  "en-CA",
                  "en-CH",
                  "en-CZ",
                  "en-DE",
                  "en-DK",
                  "en-ES",
                  "en-FI",
                  "en-FR",
                  "en-GB",
                  "en-GR",
                  "en-IE",
                  "en-IT",
                  "en-NL",
                  "en-NO",
                  "en-NZ",
                  "en-PL",
                  "en-PT",
                  "en-SE",
                  "en-US",
                  "es-ES",
                  "es-US",
                  "fi-FI",
                  "fr-BE",
                  "fr-CA",
                  "fr-CH",
                  "fr-FR",
                  "it-CH",
                  "it-IT",
                  "nb-NO",
                  "nl-BE",
                  "nl-NL",
                  "pl-PL",
                  "pt-PT",
                  "sv-FI",
                  "sv-SE",
                ])
                .optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          konbini: z.union([
            z.object({
              confirmation_number: z.union([z.coerce.string(), z.enum([""])]),
              expires_after_days: z.union([z.coerce.number(), z.enum([""])]),
              expires_at: z.union([z.coerce.number(), z.enum([""])]),
              product_description: z.union([z.coerce.string(), z.enum([""])]),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          link: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          oxxo: z.union([
            z.object({
              expires_after_days: z.coerce.number().optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          p24: z.union([
            z.object({
              setup_future_usage: z.enum(["none"]).optional(),
              tos_shown_and_accepted: z.coerce.boolean().optional(),
            }),
            z.enum([""]),
          ]),
          paynow: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          paypal: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              preferred_locale: z
                .enum([
                  "cs-CZ",
                  "da-DK",
                  "de-AT",
                  "de-DE",
                  "de-LU",
                  "el-GR",
                  "en-GB",
                  "en-US",
                  "es-ES",
                  "fi-FI",
                  "fr-BE",
                  "fr-FR",
                  "fr-LU",
                  "hu-HU",
                  "it-IT",
                  "nl-BE",
                  "nl-NL",
                  "pl-PL",
                  "pt-PT",
                  "sk-SK",
                  "sv-SE",
                ])
                .optional(),
              reference: z.coerce.string().optional(),
              risk_correlation_id: z.coerce.string().optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          pix: z.union([
            z.object({
              expires_after_seconds: z.coerce.number().optional(),
              expires_at: z.coerce.number().optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          promptpay: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          sepa_debit: z.union([
            z.object({
              mandate_options: z.object({}).optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          sofort: z.union([
            z.object({
              preferred_language: z
                .enum(["", "de", "en", "es", "fr", "it", "nl", "pl"])
                .optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          us_bank_account: z.union([
            z.object({
              financial_connections: z
                .object({
                  permissions: z
                    .array(
                      z.enum([
                        "balances",
                        "ownership",
                        "payment_method",
                        "transactions",
                      ]),
                    )
                    .optional(),
                  prefetch: z.array(z.enum(["balances"])).optional(),
                  return_url: z.coerce.string().optional(),
                })
                .optional(),
              networks: z
                .object({
                  requested: z
                    .array(z.enum(["ach", "us_domestic_wire"]))
                    .optional(),
                })
                .optional(),
              preferred_settlement_speed: z
                .enum(["", "fastest", "standard"])
                .optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
              verification_method: z
                .enum(["automatic", "instant", "microdeposits"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          wechat_pay: z.union([
            z.object({
              app_id: z.coerce.string().optional(),
              client: z.enum(["android", "ios", "web"]),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          zip: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
        })
        .optional(),
      payment_method_types: z.array(z.coerce.string()).optional(),
      receipt_email: z.union([z.coerce.string(), z.enum([""])]),
      setup_future_usage: z.enum(["", "off_session", "on_session"]).optional(),
      shipping: z.union([
        z.object({
          address: z.object({
            city: z.coerce.string().optional(),
            country: z.coerce.string().optional(),
            line1: z.coerce.string().optional(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string().optional(),
            state: z.coerce.string().optional(),
          }),
          carrier: z.coerce.string().optional(),
          name: z.coerce.string(),
          phone: z.coerce.string().optional(),
          tracking_number: z.coerce.string().optional(),
        }),
        z.enum([""]),
      ]),
      statement_descriptor: z.coerce.string().optional(),
      statement_descriptor_suffix: z.coerce.string().optional(),
      transfer_data: z
        .object({ amount: z.coerce.number().optional() })
        .optional(),
      transfer_group: z.coerce.string().optional(),
    })
    .optional()

  const postPaymentIntentsIntentResponseValidator = responseValidationFactory(
    [["200", s_payment_intent]],
    s_error,
  )

  router.post(
    "postPaymentIntentsIntent",
    "/v1/payment_intents/:intent",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentIntentsIntentParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentIntentsIntentBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postPaymentIntentsIntent(
        input,
        ctx,
      )

      ctx.body = postPaymentIntentsIntentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPaymentIntentsIntentApplyCustomerBalanceParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const postPaymentIntentsIntentApplyCustomerBalanceBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      currency: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
    })
    .optional()

  const postPaymentIntentsIntentApplyCustomerBalanceResponseValidator =
    responseValidationFactory([["200", s_payment_intent]], s_error)

  router.post(
    "postPaymentIntentsIntentApplyCustomerBalance",
    "/v1/payment_intents/:intent/apply_customer_balance",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentIntentsIntentApplyCustomerBalanceParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentIntentsIntentApplyCustomerBalanceBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentIntentsIntentApplyCustomerBalance(
          input,
          ctx,
        )

      ctx.body = postPaymentIntentsIntentApplyCustomerBalanceResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postPaymentIntentsIntentCancelParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const postPaymentIntentsIntentCancelBodySchema = z
    .object({
      cancellation_reason: z
        .enum(["abandoned", "duplicate", "fraudulent", "requested_by_customer"])
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
    })
    .optional()

  const postPaymentIntentsIntentCancelResponseValidator =
    responseValidationFactory([["200", s_payment_intent]], s_error)

  router.post(
    "postPaymentIntentsIntentCancel",
    "/v1/payment_intents/:intent/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentIntentsIntentCancelParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentIntentsIntentCancelBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentIntentsIntentCancel(input, ctx)

      ctx.body = postPaymentIntentsIntentCancelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPaymentIntentsIntentCaptureParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const postPaymentIntentsIntentCaptureBodySchema = z
    .object({
      amount_to_capture: z.coerce.number().optional(),
      application_fee_amount: z.coerce.number().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      statement_descriptor: z.coerce.string().optional(),
      statement_descriptor_suffix: z.coerce.string().optional(),
      transfer_data: z
        .object({ amount: z.coerce.number().optional() })
        .optional(),
    })
    .optional()

  const postPaymentIntentsIntentCaptureResponseValidator =
    responseValidationFactory([["200", s_payment_intent]], s_error)

  router.post(
    "postPaymentIntentsIntentCapture",
    "/v1/payment_intents/:intent/capture",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentIntentsIntentCaptureParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentIntentsIntentCaptureBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentIntentsIntentCapture(input, ctx)

      ctx.body = postPaymentIntentsIntentCaptureResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPaymentIntentsIntentConfirmParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const postPaymentIntentsIntentConfirmBodySchema = z
    .object({
      capture_method: z
        .enum(["automatic", "automatic_async", "manual"])
        .optional(),
      client_secret: z.coerce.string().optional(),
      error_on_requires_action: z.coerce.boolean().optional(),
      expand: z.array(z.coerce.string()).optional(),
      mandate: z.coerce.string().optional(),
      mandate_data: z.union([
        z.object({
          customer_acceptance: z.object({
            accepted_at: z.coerce.number().optional(),
            offline: z.object({}).optional(),
            online: z
              .object({
                ip_address: z.coerce.string(),
                user_agent: z.coerce.string(),
              })
              .optional(),
            type: z.enum(["offline", "online"]),
          }),
        }),
        z.enum([""]),
        z.object({
          customer_acceptance: z.object({
            online: z.object({
              ip_address: z.coerce.string().optional(),
              user_agent: z.coerce.string().optional(),
            }),
            type: z.enum(["online"]),
          }),
        }),
      ]),
      off_session: z.union([
        z.coerce.boolean(),
        z.enum(["one_off", "recurring"]),
      ]),
      payment_method: z.coerce.string().optional(),
      payment_method_data: z
        .object({
          acss_debit: z
            .object({
              account_number: z.coerce.string(),
              institution_number: z.coerce.string(),
              transit_number: z.coerce.string(),
            })
            .optional(),
          affirm: z.object({}).optional(),
          afterpay_clearpay: z.object({}).optional(),
          alipay: z.object({}).optional(),
          au_becs_debit: z
            .object({
              account_number: z.coerce.string(),
              bsb_number: z.coerce.string(),
            })
            .optional(),
          bacs_debit: z
            .object({
              account_number: z.coerce.string().optional(),
              sort_code: z.coerce.string().optional(),
            })
            .optional(),
          bancontact: z.object({}).optional(),
          billing_details: z
            .object({
              address: z.union([
                z.object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                }),
                z.enum([""]),
              ]),
              email: z.union([z.coerce.string(), z.enum([""])]),
              name: z.union([z.coerce.string(), z.enum([""])]),
              phone: z.union([z.coerce.string(), z.enum([""])]),
            })
            .optional(),
          blik: z.object({}).optional(),
          boleto: z.object({ tax_id: z.coerce.string() }).optional(),
          cashapp: z.object({}).optional(),
          customer_balance: z.object({}).optional(),
          eps: z
            .object({
              bank: z
                .enum([
                  "arzte_und_apotheker_bank",
                  "austrian_anadi_bank_ag",
                  "bank_austria",
                  "bankhaus_carl_spangler",
                  "bankhaus_schelhammer_und_schattera_ag",
                  "bawag_psk_ag",
                  "bks_bank_ag",
                  "brull_kallmus_bank_ag",
                  "btv_vier_lander_bank",
                  "capital_bank_grawe_gruppe_ag",
                  "deutsche_bank_ag",
                  "dolomitenbank",
                  "easybank_ag",
                  "erste_bank_und_sparkassen",
                  "hypo_alpeadriabank_international_ag",
                  "hypo_bank_burgenland_aktiengesellschaft",
                  "hypo_noe_lb_fur_niederosterreich_u_wien",
                  "hypo_oberosterreich_salzburg_steiermark",
                  "hypo_tirol_bank_ag",
                  "hypo_vorarlberg_bank_ag",
                  "marchfelder_bank",
                  "oberbank_ag",
                  "raiffeisen_bankengruppe_osterreich",
                  "schoellerbank_ag",
                  "sparda_bank_wien",
                  "volksbank_gruppe",
                  "volkskreditbank_ag",
                  "vr_bank_braunau",
                ])
                .optional(),
            })
            .optional(),
          fpx: z
            .object({
              bank: z.enum([
                "affin_bank",
                "agrobank",
                "alliance_bank",
                "ambank",
                "bank_islam",
                "bank_muamalat",
                "bank_of_china",
                "bank_rakyat",
                "bsn",
                "cimb",
                "deutsche_bank",
                "hong_leong_bank",
                "hsbc",
                "kfh",
                "maybank2e",
                "maybank2u",
                "ocbc",
                "pb_enterprise",
                "public_bank",
                "rhb",
                "standard_chartered",
                "uob",
              ]),
            })
            .optional(),
          giropay: z.object({}).optional(),
          grabpay: z.object({}).optional(),
          ideal: z
            .object({
              bank: z
                .enum([
                  "abn_amro",
                  "asn_bank",
                  "bunq",
                  "handelsbanken",
                  "ing",
                  "knab",
                  "moneyou",
                  "n26",
                  "rabobank",
                  "regiobank",
                  "revolut",
                  "sns_bank",
                  "triodos_bank",
                  "van_lanschot",
                  "yoursafe",
                ])
                .optional(),
            })
            .optional(),
          interac_present: z.object({}).optional(),
          klarna: z
            .object({
              dob: z
                .object({
                  day: z.coerce.number(),
                  month: z.coerce.number(),
                  year: z.coerce.number(),
                })
                .optional(),
            })
            .optional(),
          konbini: z.object({}).optional(),
          link: z.object({}).optional(),
          metadata: z.object({}).optional(),
          oxxo: z.object({}).optional(),
          p24: z
            .object({
              bank: z
                .enum([
                  "alior_bank",
                  "bank_millennium",
                  "bank_nowy_bfg_sa",
                  "bank_pekao_sa",
                  "banki_spbdzielcze",
                  "blik",
                  "bnp_paribas",
                  "boz",
                  "citi_handlowy",
                  "credit_agricole",
                  "envelobank",
                  "etransfer_pocztowy24",
                  "getin_bank",
                  "ideabank",
                  "ing",
                  "inteligo",
                  "mbank_mtransfer",
                  "nest_przelew",
                  "noble_pay",
                  "pbac_z_ipko",
                  "plus_bank",
                  "santander_przelew24",
                  "tmobile_usbugi_bankowe",
                  "toyota_bank",
                  "volkswagen_bank",
                ])
                .optional(),
            })
            .optional(),
          paynow: z.object({}).optional(),
          paypal: z.object({}).optional(),
          pix: z.object({}).optional(),
          promptpay: z.object({}).optional(),
          radar_options: z
            .object({ session: z.coerce.string().optional() })
            .optional(),
          sepa_debit: z.object({ iban: z.coerce.string() }).optional(),
          sofort: z
            .object({ country: z.enum(["AT", "BE", "DE", "ES", "IT", "NL"]) })
            .optional(),
          type: z.enum([
            "acss_debit",
            "affirm",
            "afterpay_clearpay",
            "alipay",
            "au_becs_debit",
            "bacs_debit",
            "bancontact",
            "blik",
            "boleto",
            "cashapp",
            "customer_balance",
            "eps",
            "fpx",
            "giropay",
            "grabpay",
            "ideal",
            "klarna",
            "konbini",
            "link",
            "oxxo",
            "p24",
            "paynow",
            "paypal",
            "pix",
            "promptpay",
            "sepa_debit",
            "sofort",
            "us_bank_account",
            "wechat_pay",
            "zip",
          ]),
          us_bank_account: z
            .object({
              account_holder_type: z.enum(["company", "individual"]).optional(),
              account_number: z.coerce.string().optional(),
              account_type: z.enum(["checking", "savings"]).optional(),
              financial_connections_account: z.coerce.string().optional(),
              routing_number: z.coerce.string().optional(),
            })
            .optional(),
          wechat_pay: z.object({}).optional(),
          zip: z.object({}).optional(),
        })
        .optional(),
      payment_method_options: z
        .object({
          acss_debit: z.union([
            z.object({
              mandate_options: z
                .object({
                  custom_mandate_url: z.union([
                    z.coerce.string(),
                    z.enum([""]),
                  ]),
                  interval_description: z.coerce.string().optional(),
                  payment_schedule: z
                    .enum(["combined", "interval", "sporadic"])
                    .optional(),
                  transaction_type: z.enum(["business", "personal"]).optional(),
                })
                .optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
              verification_method: z
                .enum(["automatic", "instant", "microdeposits"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          affirm: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              preferred_locale: z.coerce.string().optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          afterpay_clearpay: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              reference: z.coerce.string().optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          alipay: z.union([
            z.object({
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          au_becs_debit: z.union([
            z.object({
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          bacs_debit: z.union([
            z.object({
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          bancontact: z.union([
            z.object({
              preferred_language: z.enum(["de", "en", "fr", "nl"]).optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          blik: z.union([
            z.object({ code: z.coerce.string().optional() }),
            z.enum([""]),
          ]),
          boleto: z.union([
            z.object({
              expires_after_days: z.coerce.number().optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          card: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              cvc_token: z.coerce.string().optional(),
              installments: z
                .object({
                  enabled: z.coerce.boolean().optional(),
                  plan: z.union([
                    z.object({
                      count: z.coerce.number(),
                      interval: z.enum(["month"]),
                      type: z.enum(["fixed_count"]),
                    }),
                    z.enum([""]),
                  ]),
                })
                .optional(),
              mandate_options: z
                .object({
                  amount: z.coerce.number(),
                  amount_type: z.enum(["fixed", "maximum"]),
                  description: z.coerce.string().optional(),
                  end_date: z.coerce.number().optional(),
                  interval: z.enum([
                    "day",
                    "month",
                    "sporadic",
                    "week",
                    "year",
                  ]),
                  interval_count: z.coerce.number().optional(),
                  reference: z.coerce.string(),
                  start_date: z.coerce.number(),
                  supported_types: z.array(z.enum(["india"])).optional(),
                })
                .optional(),
              network: z
                .enum([
                  "amex",
                  "cartes_bancaires",
                  "diners",
                  "discover",
                  "eftpos_au",
                  "interac",
                  "jcb",
                  "mastercard",
                  "unionpay",
                  "unknown",
                  "visa",
                ])
                .optional(),
              request_three_d_secure: z.enum(["any", "automatic"]).optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
              statement_descriptor_suffix_kana: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
              statement_descriptor_suffix_kanji: z.union([
                z.coerce.string(),
                z.enum([""]),
              ]),
            }),
            z.enum([""]),
          ]),
          card_present: z.union([
            z.object({
              request_extended_authorization: z.coerce.boolean().optional(),
              request_incremental_authorization_support: z.coerce
                .boolean()
                .optional(),
            }),
            z.enum([""]),
          ]),
          cashapp: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          customer_balance: z.union([
            z.object({
              bank_transfer: z
                .object({
                  eu_bank_transfer: z
                    .object({ country: z.coerce.string() })
                    .optional(),
                  requested_address_types: z
                    .array(
                      z.enum([
                        "aba",
                        "iban",
                        "sepa",
                        "sort_code",
                        "spei",
                        "swift",
                        "zengin",
                      ]),
                    )
                    .optional(),
                  type: z.enum([
                    "eu_bank_transfer",
                    "gb_bank_transfer",
                    "jp_bank_transfer",
                    "mx_bank_transfer",
                    "us_bank_transfer",
                  ]),
                })
                .optional(),
              funding_type: z.enum(["bank_transfer"]).optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          eps: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          fpx: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          giropay: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          grabpay: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          ideal: z.union([
            z.object({
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          interac_present: z.union([z.object({}), z.enum([""])]),
          klarna: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              preferred_locale: z
                .enum([
                  "cs-CZ",
                  "da-DK",
                  "de-AT",
                  "de-CH",
                  "de-DE",
                  "el-GR",
                  "en-AT",
                  "en-AU",
                  "en-BE",
                  "en-CA",
                  "en-CH",
                  "en-CZ",
                  "en-DE",
                  "en-DK",
                  "en-ES",
                  "en-FI",
                  "en-FR",
                  "en-GB",
                  "en-GR",
                  "en-IE",
                  "en-IT",
                  "en-NL",
                  "en-NO",
                  "en-NZ",
                  "en-PL",
                  "en-PT",
                  "en-SE",
                  "en-US",
                  "es-ES",
                  "es-US",
                  "fi-FI",
                  "fr-BE",
                  "fr-CA",
                  "fr-CH",
                  "fr-FR",
                  "it-CH",
                  "it-IT",
                  "nb-NO",
                  "nl-BE",
                  "nl-NL",
                  "pl-PL",
                  "pt-PT",
                  "sv-FI",
                  "sv-SE",
                ])
                .optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          konbini: z.union([
            z.object({
              confirmation_number: z.union([z.coerce.string(), z.enum([""])]),
              expires_after_days: z.union([z.coerce.number(), z.enum([""])]),
              expires_at: z.union([z.coerce.number(), z.enum([""])]),
              product_description: z.union([z.coerce.string(), z.enum([""])]),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          link: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          oxxo: z.union([
            z.object({
              expires_after_days: z.coerce.number().optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          p24: z.union([
            z.object({
              setup_future_usage: z.enum(["none"]).optional(),
              tos_shown_and_accepted: z.coerce.boolean().optional(),
            }),
            z.enum([""]),
          ]),
          paynow: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          paypal: z.union([
            z.object({
              capture_method: z.enum(["", "manual"]).optional(),
              preferred_locale: z
                .enum([
                  "cs-CZ",
                  "da-DK",
                  "de-AT",
                  "de-DE",
                  "de-LU",
                  "el-GR",
                  "en-GB",
                  "en-US",
                  "es-ES",
                  "fi-FI",
                  "fr-BE",
                  "fr-FR",
                  "fr-LU",
                  "hu-HU",
                  "it-IT",
                  "nl-BE",
                  "nl-NL",
                  "pl-PL",
                  "pt-PT",
                  "sk-SK",
                  "sv-SE",
                ])
                .optional(),
              reference: z.coerce.string().optional(),
              risk_correlation_id: z.coerce.string().optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          pix: z.union([
            z.object({
              expires_after_seconds: z.coerce.number().optional(),
              expires_at: z.coerce.number().optional(),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          promptpay: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
          sepa_debit: z.union([
            z.object({
              mandate_options: z.object({}).optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          sofort: z.union([
            z.object({
              preferred_language: z
                .enum(["", "de", "en", "es", "fr", "it", "nl", "pl"])
                .optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          us_bank_account: z.union([
            z.object({
              financial_connections: z
                .object({
                  permissions: z
                    .array(
                      z.enum([
                        "balances",
                        "ownership",
                        "payment_method",
                        "transactions",
                      ]),
                    )
                    .optional(),
                  prefetch: z.array(z.enum(["balances"])).optional(),
                  return_url: z.coerce.string().optional(),
                })
                .optional(),
              networks: z
                .object({
                  requested: z
                    .array(z.enum(["ach", "us_domestic_wire"]))
                    .optional(),
                })
                .optional(),
              preferred_settlement_speed: z
                .enum(["", "fastest", "standard"])
                .optional(),
              setup_future_usage: z
                .enum(["", "none", "off_session", "on_session"])
                .optional(),
              verification_method: z
                .enum(["automatic", "instant", "microdeposits"])
                .optional(),
            }),
            z.enum([""]),
          ]),
          wechat_pay: z.union([
            z.object({
              app_id: z.coerce.string().optional(),
              client: z.enum(["android", "ios", "web"]),
              setup_future_usage: z.enum(["none"]).optional(),
            }),
            z.enum([""]),
          ]),
          zip: z.union([
            z.object({ setup_future_usage: z.enum(["none"]).optional() }),
            z.enum([""]),
          ]),
        })
        .optional(),
      payment_method_types: z.array(z.coerce.string()).optional(),
      radar_options: z
        .object({ session: z.coerce.string().optional() })
        .optional(),
      receipt_email: z.union([z.coerce.string(), z.enum([""])]),
      return_url: z.coerce.string().optional(),
      setup_future_usage: z.enum(["", "off_session", "on_session"]).optional(),
      shipping: z.union([
        z.object({
          address: z.object({
            city: z.coerce.string().optional(),
            country: z.coerce.string().optional(),
            line1: z.coerce.string().optional(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string().optional(),
            state: z.coerce.string().optional(),
          }),
          carrier: z.coerce.string().optional(),
          name: z.coerce.string(),
          phone: z.coerce.string().optional(),
          tracking_number: z.coerce.string().optional(),
        }),
        z.enum([""]),
      ]),
      use_stripe_sdk: z.coerce.boolean().optional(),
    })
    .optional()

  const postPaymentIntentsIntentConfirmResponseValidator =
    responseValidationFactory([["200", s_payment_intent]], s_error)

  router.post(
    "postPaymentIntentsIntentConfirm",
    "/v1/payment_intents/:intent/confirm",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentIntentsIntentConfirmParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentIntentsIntentConfirmBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentIntentsIntentConfirm(input, ctx)

      ctx.body = postPaymentIntentsIntentConfirmResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPaymentIntentsIntentIncrementAuthorizationParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const postPaymentIntentsIntentIncrementAuthorizationBodySchema = z.object({
    amount: z.coerce.number(),
    application_fee_amount: z.coerce.number().optional(),
    description: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.object({}).optional(),
    statement_descriptor: z.coerce.string().optional(),
    transfer_data: z
      .object({ amount: z.coerce.number().optional() })
      .optional(),
  })

  const postPaymentIntentsIntentIncrementAuthorizationResponseValidator =
    responseValidationFactory([["200", s_payment_intent]], s_error)

  router.post(
    "postPaymentIntentsIntentIncrementAuthorization",
    "/v1/payment_intents/:intent/increment_authorization",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentIntentsIntentIncrementAuthorizationParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentIntentsIntentIncrementAuthorizationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentIntentsIntentIncrementAuthorization(
          input,
          ctx,
        )

      ctx.body =
        postPaymentIntentsIntentIncrementAuthorizationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postPaymentIntentsIntentVerifyMicrodepositsParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const postPaymentIntentsIntentVerifyMicrodepositsBodySchema = z
    .object({
      amounts: z.array(z.coerce.number()).optional(),
      client_secret: z.coerce.string().optional(),
      descriptor_code: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
    })
    .optional()

  const postPaymentIntentsIntentVerifyMicrodepositsResponseValidator =
    responseValidationFactory([["200", s_payment_intent]], s_error)

  router.post(
    "postPaymentIntentsIntentVerifyMicrodeposits",
    "/v1/payment_intents/:intent/verify_microdeposits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentIntentsIntentVerifyMicrodepositsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentIntentsIntentVerifyMicrodepositsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentIntentsIntentVerifyMicrodeposits(
          input,
          ctx,
        )

      ctx.body = postPaymentIntentsIntentVerifyMicrodepositsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getPaymentLinksQuerySchema = z.object({
    active: z.coerce.boolean().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getPaymentLinksBodySchema = z.object({}).optional()

  const getPaymentLinksResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_payment_link)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getPaymentLinks", "/v1/payment_links", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getPaymentLinksQuerySchema, ctx.query),
      body: parseRequestInput(getPaymentLinksBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getPaymentLinks(input, ctx)

    ctx.body = getPaymentLinksResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postPaymentLinksBodySchema = z.object({
    after_completion: z
      .object({
        hosted_confirmation: z
          .object({ custom_message: z.coerce.string().optional() })
          .optional(),
        redirect: z.object({ url: z.coerce.string() }).optional(),
        type: z.enum(["hosted_confirmation", "redirect"]),
      })
      .optional(),
    allow_promotion_codes: z.coerce.boolean().optional(),
    application_fee_amount: z.coerce.number().optional(),
    application_fee_percent: z.coerce.number().optional(),
    automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
    billing_address_collection: z.enum(["auto", "required"]).optional(),
    consent_collection: z
      .object({
        promotions: z.enum(["auto", "none"]).optional(),
        terms_of_service: z.enum(["none", "required"]).optional(),
      })
      .optional(),
    currency: z.coerce.string().optional(),
    custom_fields: z
      .array(
        z.object({
          dropdown: z
            .object({
              options: z.array(
                z.object({
                  label: z.coerce.string(),
                  value: z.coerce.string(),
                }),
              ),
            })
            .optional(),
          key: z.coerce.string(),
          label: z.object({
            custom: z.coerce.string(),
            type: z.enum(["custom"]),
          }),
          numeric: z
            .object({
              maximum_length: z.coerce.number().optional(),
              minimum_length: z.coerce.number().optional(),
            })
            .optional(),
          optional: z.coerce.boolean().optional(),
          text: z
            .object({
              maximum_length: z.coerce.number().optional(),
              minimum_length: z.coerce.number().optional(),
            })
            .optional(),
          type: z.enum(["dropdown", "numeric", "text"]),
        }),
      )
      .optional(),
    custom_text: z
      .object({
        shipping_address: z.union([
          z.object({ message: z.coerce.string() }),
          z.enum([""]),
        ]),
        submit: z.union([
          z.object({ message: z.coerce.string() }),
          z.enum([""]),
        ]),
      })
      .optional(),
    customer_creation: z.enum(["always", "if_required"]).optional(),
    expand: z.array(z.coerce.string()).optional(),
    invoice_creation: z
      .object({
        enabled: z.coerce.boolean(),
        invoice_data: z
          .object({
            account_tax_ids: z.union([
              z.array(z.coerce.string()),
              z.enum([""]),
            ]),
            custom_fields: z.union([
              z.array(
                z.object({ name: z.coerce.string(), value: z.coerce.string() }),
              ),
              z.enum([""]),
            ]),
            description: z.coerce.string().optional(),
            footer: z.coerce.string().optional(),
            metadata: z.union([z.object({}), z.enum([""])]),
            rendering_options: z.union([
              z.object({
                amount_tax_display: z
                  .enum(["", "exclude_tax", "include_inclusive_tax"])
                  .optional(),
              }),
              z.enum([""]),
            ]),
          })
          .optional(),
      })
      .optional(),
    line_items: z.array(
      z.object({
        adjustable_quantity: z
          .object({
            enabled: z.coerce.boolean(),
            maximum: z.coerce.number().optional(),
            minimum: z.coerce.number().optional(),
          })
          .optional(),
        price: z.coerce.string(),
        quantity: z.coerce.number(),
      }),
    ),
    metadata: z.object({}).optional(),
    on_behalf_of: z.coerce.string().optional(),
    payment_intent_data: z
      .object({
        capture_method: z
          .enum(["automatic", "automatic_async", "manual"])
          .optional(),
        setup_future_usage: z.enum(["off_session", "on_session"]).optional(),
      })
      .optional(),
    payment_method_collection: z.enum(["always", "if_required"]).optional(),
    payment_method_types: z
      .array(
        z.enum([
          "affirm",
          "afterpay_clearpay",
          "alipay",
          "au_becs_debit",
          "bacs_debit",
          "bancontact",
          "blik",
          "boleto",
          "card",
          "cashapp",
          "eps",
          "fpx",
          "giropay",
          "grabpay",
          "ideal",
          "klarna",
          "konbini",
          "link",
          "oxxo",
          "p24",
          "paynow",
          "paypal",
          "pix",
          "promptpay",
          "sepa_debit",
          "sofort",
          "us_bank_account",
          "wechat_pay",
        ]),
      )
      .optional(),
    phone_number_collection: z
      .object({ enabled: z.coerce.boolean() })
      .optional(),
    shipping_address_collection: z
      .object({
        allowed_countries: z.array(
          z.enum([
            "AC",
            "AD",
            "AE",
            "AF",
            "AG",
            "AI",
            "AL",
            "AM",
            "AO",
            "AQ",
            "AR",
            "AT",
            "AU",
            "AW",
            "AX",
            "AZ",
            "BA",
            "BB",
            "BD",
            "BE",
            "BF",
            "BG",
            "BH",
            "BI",
            "BJ",
            "BL",
            "BM",
            "BN",
            "BO",
            "BQ",
            "BR",
            "BS",
            "BT",
            "BV",
            "BW",
            "BY",
            "BZ",
            "CA",
            "CD",
            "CF",
            "CG",
            "CH",
            "CI",
            "CK",
            "CL",
            "CM",
            "CN",
            "CO",
            "CR",
            "CV",
            "CW",
            "CY",
            "CZ",
            "DE",
            "DJ",
            "DK",
            "DM",
            "DO",
            "DZ",
            "EC",
            "EE",
            "EG",
            "EH",
            "ER",
            "ES",
            "ET",
            "FI",
            "FJ",
            "FK",
            "FO",
            "FR",
            "GA",
            "GB",
            "GD",
            "GE",
            "GF",
            "GG",
            "GH",
            "GI",
            "GL",
            "GM",
            "GN",
            "GP",
            "GQ",
            "GR",
            "GS",
            "GT",
            "GU",
            "GW",
            "GY",
            "HK",
            "HN",
            "HR",
            "HT",
            "HU",
            "ID",
            "IE",
            "IL",
            "IM",
            "IN",
            "IO",
            "IQ",
            "IS",
            "IT",
            "JE",
            "JM",
            "JO",
            "JP",
            "KE",
            "KG",
            "KH",
            "KI",
            "KM",
            "KN",
            "KR",
            "KW",
            "KY",
            "KZ",
            "LA",
            "LB",
            "LC",
            "LI",
            "LK",
            "LR",
            "LS",
            "LT",
            "LU",
            "LV",
            "LY",
            "MA",
            "MC",
            "MD",
            "ME",
            "MF",
            "MG",
            "MK",
            "ML",
            "MM",
            "MN",
            "MO",
            "MQ",
            "MR",
            "MS",
            "MT",
            "MU",
            "MV",
            "MW",
            "MX",
            "MY",
            "MZ",
            "NA",
            "NC",
            "NE",
            "NG",
            "NI",
            "NL",
            "NO",
            "NP",
            "NR",
            "NU",
            "NZ",
            "OM",
            "PA",
            "PE",
            "PF",
            "PG",
            "PH",
            "PK",
            "PL",
            "PM",
            "PN",
            "PR",
            "PS",
            "PT",
            "PY",
            "QA",
            "RE",
            "RO",
            "RS",
            "RU",
            "RW",
            "SA",
            "SB",
            "SC",
            "SE",
            "SG",
            "SH",
            "SI",
            "SJ",
            "SK",
            "SL",
            "SM",
            "SN",
            "SO",
            "SR",
            "SS",
            "ST",
            "SV",
            "SX",
            "SZ",
            "TA",
            "TC",
            "TD",
            "TF",
            "TG",
            "TH",
            "TJ",
            "TK",
            "TL",
            "TM",
            "TN",
            "TO",
            "TR",
            "TT",
            "TV",
            "TW",
            "TZ",
            "UA",
            "UG",
            "US",
            "UY",
            "UZ",
            "VA",
            "VC",
            "VE",
            "VG",
            "VN",
            "VU",
            "WF",
            "WS",
            "XK",
            "YE",
            "YT",
            "ZA",
            "ZM",
            "ZW",
            "ZZ",
          ]),
        ),
      })
      .optional(),
    shipping_options: z
      .array(z.object({ shipping_rate: z.coerce.string().optional() }))
      .optional(),
    submit_type: z.enum(["auto", "book", "donate", "pay"]).optional(),
    subscription_data: z
      .object({
        description: z.coerce.string().optional(),
        trial_period_days: z.coerce.number().optional(),
      })
      .optional(),
    tax_id_collection: z.object({ enabled: z.coerce.boolean() }).optional(),
    transfer_data: z
      .object({
        amount: z.coerce.number().optional(),
        destination: z.coerce.string(),
      })
      .optional(),
  })

  const postPaymentLinksResponseValidator = responseValidationFactory(
    [["200", s_payment_link]],
    s_error,
  )

  router.post("postPaymentLinks", "/v1/payment_links", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postPaymentLinksBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postPaymentLinks(input, ctx)

    ctx.body = postPaymentLinksResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getPaymentLinksPaymentLinkParamSchema = z.object({
    payment_link: z.coerce.string(),
  })

  const getPaymentLinksPaymentLinkQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getPaymentLinksPaymentLinkBodySchema = z.object({}).optional()

  const getPaymentLinksPaymentLinkResponseValidator = responseValidationFactory(
    [["200", s_payment_link]],
    s_error,
  )

  router.get(
    "getPaymentLinksPaymentLink",
    "/v1/payment_links/:paymentLink",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getPaymentLinksPaymentLinkParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getPaymentLinksPaymentLinkQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getPaymentLinksPaymentLinkBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getPaymentLinksPaymentLink(
        input,
        ctx,
      )

      ctx.body = getPaymentLinksPaymentLinkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPaymentLinksPaymentLinkParamSchema = z.object({
    payment_link: z.coerce.string(),
  })

  const postPaymentLinksPaymentLinkBodySchema = z
    .object({
      active: z.coerce.boolean().optional(),
      after_completion: z
        .object({
          hosted_confirmation: z
            .object({ custom_message: z.coerce.string().optional() })
            .optional(),
          redirect: z.object({ url: z.coerce.string() }).optional(),
          type: z.enum(["hosted_confirmation", "redirect"]),
        })
        .optional(),
      allow_promotion_codes: z.coerce.boolean().optional(),
      automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
      billing_address_collection: z.enum(["auto", "required"]).optional(),
      custom_fields: z.union([
        z.array(
          z.object({
            dropdown: z
              .object({
                options: z.array(
                  z.object({
                    label: z.coerce.string(),
                    value: z.coerce.string(),
                  }),
                ),
              })
              .optional(),
            key: z.coerce.string(),
            label: z.object({
              custom: z.coerce.string(),
              type: z.enum(["custom"]),
            }),
            numeric: z
              .object({
                maximum_length: z.coerce.number().optional(),
                minimum_length: z.coerce.number().optional(),
              })
              .optional(),
            optional: z.coerce.boolean().optional(),
            text: z
              .object({
                maximum_length: z.coerce.number().optional(),
                minimum_length: z.coerce.number().optional(),
              })
              .optional(),
            type: z.enum(["dropdown", "numeric", "text"]),
          }),
        ),
        z.enum([""]),
      ]),
      custom_text: z
        .object({
          shipping_address: z.union([
            z.object({ message: z.coerce.string() }),
            z.enum([""]),
          ]),
          submit: z.union([
            z.object({ message: z.coerce.string() }),
            z.enum([""]),
          ]),
        })
        .optional(),
      customer_creation: z.enum(["always", "if_required"]).optional(),
      expand: z.array(z.coerce.string()).optional(),
      invoice_creation: z
        .object({
          enabled: z.coerce.boolean(),
          invoice_data: z
            .object({
              account_tax_ids: z.union([
                z.array(z.coerce.string()),
                z.enum([""]),
              ]),
              custom_fields: z.union([
                z.array(
                  z.object({
                    name: z.coerce.string(),
                    value: z.coerce.string(),
                  }),
                ),
                z.enum([""]),
              ]),
              description: z.coerce.string().optional(),
              footer: z.coerce.string().optional(),
              metadata: z.union([z.object({}), z.enum([""])]),
              rendering_options: z.union([
                z.object({
                  amount_tax_display: z
                    .enum(["", "exclude_tax", "include_inclusive_tax"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
            })
            .optional(),
        })
        .optional(),
      line_items: z
        .array(
          z.object({
            adjustable_quantity: z
              .object({
                enabled: z.coerce.boolean(),
                maximum: z.coerce.number().optional(),
                minimum: z.coerce.number().optional(),
              })
              .optional(),
            id: z.coerce.string(),
            quantity: z.coerce.number().optional(),
          }),
        )
        .optional(),
      metadata: z.object({}).optional(),
      payment_method_collection: z.enum(["always", "if_required"]).optional(),
      payment_method_types: z.union([
        z.array(
          z.enum([
            "affirm",
            "afterpay_clearpay",
            "alipay",
            "au_becs_debit",
            "bacs_debit",
            "bancontact",
            "blik",
            "boleto",
            "card",
            "cashapp",
            "eps",
            "fpx",
            "giropay",
            "grabpay",
            "ideal",
            "klarna",
            "konbini",
            "link",
            "oxxo",
            "p24",
            "paynow",
            "paypal",
            "pix",
            "promptpay",
            "sepa_debit",
            "sofort",
            "us_bank_account",
            "wechat_pay",
          ]),
        ),
        z.enum([""]),
      ]),
      shipping_address_collection: z.union([
        z.object({
          allowed_countries: z.array(
            z.enum([
              "AC",
              "AD",
              "AE",
              "AF",
              "AG",
              "AI",
              "AL",
              "AM",
              "AO",
              "AQ",
              "AR",
              "AT",
              "AU",
              "AW",
              "AX",
              "AZ",
              "BA",
              "BB",
              "BD",
              "BE",
              "BF",
              "BG",
              "BH",
              "BI",
              "BJ",
              "BL",
              "BM",
              "BN",
              "BO",
              "BQ",
              "BR",
              "BS",
              "BT",
              "BV",
              "BW",
              "BY",
              "BZ",
              "CA",
              "CD",
              "CF",
              "CG",
              "CH",
              "CI",
              "CK",
              "CL",
              "CM",
              "CN",
              "CO",
              "CR",
              "CV",
              "CW",
              "CY",
              "CZ",
              "DE",
              "DJ",
              "DK",
              "DM",
              "DO",
              "DZ",
              "EC",
              "EE",
              "EG",
              "EH",
              "ER",
              "ES",
              "ET",
              "FI",
              "FJ",
              "FK",
              "FO",
              "FR",
              "GA",
              "GB",
              "GD",
              "GE",
              "GF",
              "GG",
              "GH",
              "GI",
              "GL",
              "GM",
              "GN",
              "GP",
              "GQ",
              "GR",
              "GS",
              "GT",
              "GU",
              "GW",
              "GY",
              "HK",
              "HN",
              "HR",
              "HT",
              "HU",
              "ID",
              "IE",
              "IL",
              "IM",
              "IN",
              "IO",
              "IQ",
              "IS",
              "IT",
              "JE",
              "JM",
              "JO",
              "JP",
              "KE",
              "KG",
              "KH",
              "KI",
              "KM",
              "KN",
              "KR",
              "KW",
              "KY",
              "KZ",
              "LA",
              "LB",
              "LC",
              "LI",
              "LK",
              "LR",
              "LS",
              "LT",
              "LU",
              "LV",
              "LY",
              "MA",
              "MC",
              "MD",
              "ME",
              "MF",
              "MG",
              "MK",
              "ML",
              "MM",
              "MN",
              "MO",
              "MQ",
              "MR",
              "MS",
              "MT",
              "MU",
              "MV",
              "MW",
              "MX",
              "MY",
              "MZ",
              "NA",
              "NC",
              "NE",
              "NG",
              "NI",
              "NL",
              "NO",
              "NP",
              "NR",
              "NU",
              "NZ",
              "OM",
              "PA",
              "PE",
              "PF",
              "PG",
              "PH",
              "PK",
              "PL",
              "PM",
              "PN",
              "PR",
              "PS",
              "PT",
              "PY",
              "QA",
              "RE",
              "RO",
              "RS",
              "RU",
              "RW",
              "SA",
              "SB",
              "SC",
              "SE",
              "SG",
              "SH",
              "SI",
              "SJ",
              "SK",
              "SL",
              "SM",
              "SN",
              "SO",
              "SR",
              "SS",
              "ST",
              "SV",
              "SX",
              "SZ",
              "TA",
              "TC",
              "TD",
              "TF",
              "TG",
              "TH",
              "TJ",
              "TK",
              "TL",
              "TM",
              "TN",
              "TO",
              "TR",
              "TT",
              "TV",
              "TW",
              "TZ",
              "UA",
              "UG",
              "US",
              "UY",
              "UZ",
              "VA",
              "VC",
              "VE",
              "VG",
              "VN",
              "VU",
              "WF",
              "WS",
              "XK",
              "YE",
              "YT",
              "ZA",
              "ZM",
              "ZW",
              "ZZ",
            ]),
          ),
        }),
        z.enum([""]),
      ]),
    })
    .optional()

  const postPaymentLinksPaymentLinkResponseValidator =
    responseValidationFactory([["200", s_payment_link]], s_error)

  router.post(
    "postPaymentLinksPaymentLink",
    "/v1/payment_links/:paymentLink",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentLinksPaymentLinkParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentLinksPaymentLinkBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postPaymentLinksPaymentLink(
        input,
        ctx,
      )

      ctx.body = postPaymentLinksPaymentLinkResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getPaymentLinksPaymentLinkLineItemsParamSchema = z.object({
    payment_link: z.coerce.string(),
  })

  const getPaymentLinksPaymentLinkLineItemsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getPaymentLinksPaymentLinkLineItemsBodySchema = z.object({}).optional()

  const getPaymentLinksPaymentLinkLineItemsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_item)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getPaymentLinksPaymentLinkLineItems",
    "/v1/payment_links/:paymentLink/line_items",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getPaymentLinksPaymentLinkLineItemsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getPaymentLinksPaymentLinkLineItemsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getPaymentLinksPaymentLinkLineItemsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getPaymentLinksPaymentLinkLineItems(input, ctx)

      ctx.body = getPaymentLinksPaymentLinkLineItemsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getPaymentMethodConfigurationsQuerySchema = z.object({
    application: z.union([z.coerce.string(), z.enum([""])]),
    expand: z.array(z.coerce.string()).optional(),
  })

  const getPaymentMethodConfigurationsBodySchema = z.object({}).optional()

  const getPaymentMethodConfigurationsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(s_payment_method_configuration),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getPaymentMethodConfigurations",
    "/v1/payment_method_configurations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getPaymentMethodConfigurationsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getPaymentMethodConfigurationsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getPaymentMethodConfigurations(input, ctx)

      ctx.body = getPaymentMethodConfigurationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPaymentMethodConfigurationsBodySchema = z
    .object({
      acss_debit: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      affirm: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      afterpay_clearpay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      alipay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      apple_pay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      apple_pay_later: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      au_becs_debit: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      bacs_debit: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      bancontact: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      blik: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      boleto: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      card: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      cartes_bancaires: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      cashapp: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      eps: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      fpx: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      giropay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      google_pay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      grabpay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      ideal: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      jcb: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      klarna: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      konbini: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      link: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      name: z.coerce.string().optional(),
      oxxo: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      p24: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      parent: z.coerce.string().optional(),
      paynow: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      paypal: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      promptpay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      sepa_debit: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      sofort: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      us_bank_account: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      wechat_pay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
    })
    .optional()

  const postPaymentMethodConfigurationsResponseValidator =
    responseValidationFactory(
      [["200", s_payment_method_configuration]],
      s_error,
    )

  router.post(
    "postPaymentMethodConfigurations",
    "/v1/payment_method_configurations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postPaymentMethodConfigurationsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentMethodConfigurations(input, ctx)

      ctx.body = postPaymentMethodConfigurationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getPaymentMethodConfigurationsConfigurationParamSchema = z.object({
    configuration: z.coerce.string(),
  })

  const getPaymentMethodConfigurationsConfigurationQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getPaymentMethodConfigurationsConfigurationBodySchema = z
    .object({})
    .optional()

  const getPaymentMethodConfigurationsConfigurationResponseValidator =
    responseValidationFactory(
      [["200", s_payment_method_configuration]],
      s_error,
    )

  router.get(
    "getPaymentMethodConfigurationsConfiguration",
    "/v1/payment_method_configurations/:configuration",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getPaymentMethodConfigurationsConfigurationParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getPaymentMethodConfigurationsConfigurationQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getPaymentMethodConfigurationsConfigurationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getPaymentMethodConfigurationsConfiguration(
          input,
          ctx,
        )

      ctx.body = getPaymentMethodConfigurationsConfigurationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postPaymentMethodConfigurationsConfigurationParamSchema = z.object({
    configuration: z.coerce.string(),
  })

  const postPaymentMethodConfigurationsConfigurationBodySchema = z
    .object({
      acss_debit: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      active: z.coerce.boolean().optional(),
      affirm: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      afterpay_clearpay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      alipay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      apple_pay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      apple_pay_later: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      au_becs_debit: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      bacs_debit: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      bancontact: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      blik: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      boleto: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      card: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      cartes_bancaires: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      cashapp: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      eps: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      fpx: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      giropay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      google_pay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      grabpay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      ideal: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      jcb: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      klarna: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      konbini: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      link: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      name: z.coerce.string().optional(),
      oxxo: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      p24: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      paynow: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      paypal: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      promptpay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      sepa_debit: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      sofort: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      us_bank_account: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
      wechat_pay: z
        .object({
          display_preference: z
            .object({ preference: z.enum(["none", "off", "on"]).optional() })
            .optional(),
        })
        .optional(),
    })
    .optional()

  const postPaymentMethodConfigurationsConfigurationResponseValidator =
    responseValidationFactory(
      [["200", s_payment_method_configuration]],
      s_error,
    )

  router.post(
    "postPaymentMethodConfigurationsConfiguration",
    "/v1/payment_method_configurations/:configuration",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentMethodConfigurationsConfigurationParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentMethodConfigurationsConfigurationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentMethodConfigurationsConfiguration(
          input,
          ctx,
        )

      ctx.body = postPaymentMethodConfigurationsConfigurationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getPaymentMethodDomainsQuerySchema = z.object({
    domain_name: z.coerce.string().optional(),
    enabled: z.coerce.boolean().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getPaymentMethodDomainsBodySchema = z.object({}).optional()

  const getPaymentMethodDomainsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_payment_method_domain),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getPaymentMethodDomains",
    "/v1/payment_method_domains",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getPaymentMethodDomainsQuerySchema, ctx.query),
        body: parseRequestInput(
          getPaymentMethodDomainsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getPaymentMethodDomains(
        input,
        ctx,
      )

      ctx.body = getPaymentMethodDomainsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPaymentMethodDomainsBodySchema = z.object({
    domain_name: z.coerce.string(),
    enabled: z.coerce.boolean().optional(),
    expand: z.array(z.coerce.string()).optional(),
  })

  const postPaymentMethodDomainsResponseValidator = responseValidationFactory(
    [["200", s_payment_method_domain]],
    s_error,
  )

  router.post(
    "postPaymentMethodDomains",
    "/v1/payment_method_domains",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postPaymentMethodDomainsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postPaymentMethodDomains(
        input,
        ctx,
      )

      ctx.body = postPaymentMethodDomainsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getPaymentMethodDomainsPaymentMethodDomainParamSchema = z.object({
    payment_method_domain: z.coerce.string(),
  })

  const getPaymentMethodDomainsPaymentMethodDomainQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getPaymentMethodDomainsPaymentMethodDomainBodySchema = z
    .object({})
    .optional()

  const getPaymentMethodDomainsPaymentMethodDomainResponseValidator =
    responseValidationFactory([["200", s_payment_method_domain]], s_error)

  router.get(
    "getPaymentMethodDomainsPaymentMethodDomain",
    "/v1/payment_method_domains/:paymentMethodDomain",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getPaymentMethodDomainsPaymentMethodDomainParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getPaymentMethodDomainsPaymentMethodDomainQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getPaymentMethodDomainsPaymentMethodDomainBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getPaymentMethodDomainsPaymentMethodDomain(
          input,
          ctx,
        )

      ctx.body = getPaymentMethodDomainsPaymentMethodDomainResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postPaymentMethodDomainsPaymentMethodDomainParamSchema = z.object({
    payment_method_domain: z.coerce.string(),
  })

  const postPaymentMethodDomainsPaymentMethodDomainBodySchema = z
    .object({
      enabled: z.coerce.boolean().optional(),
      expand: z.array(z.coerce.string()).optional(),
    })
    .optional()

  const postPaymentMethodDomainsPaymentMethodDomainResponseValidator =
    responseValidationFactory([["200", s_payment_method_domain]], s_error)

  router.post(
    "postPaymentMethodDomainsPaymentMethodDomain",
    "/v1/payment_method_domains/:paymentMethodDomain",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentMethodDomainsPaymentMethodDomainParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentMethodDomainsPaymentMethodDomainBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentMethodDomainsPaymentMethodDomain(
          input,
          ctx,
        )

      ctx.body = postPaymentMethodDomainsPaymentMethodDomainResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postPaymentMethodDomainsPaymentMethodDomainValidateParamSchema =
    z.object({ payment_method_domain: z.coerce.string() })

  const postPaymentMethodDomainsPaymentMethodDomainValidateBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postPaymentMethodDomainsPaymentMethodDomainValidateResponseValidator =
    responseValidationFactory([["200", s_payment_method_domain]], s_error)

  router.post(
    "postPaymentMethodDomainsPaymentMethodDomainValidate",
    "/v1/payment_method_domains/:paymentMethodDomain/validate",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentMethodDomainsPaymentMethodDomainValidateParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentMethodDomainsPaymentMethodDomainValidateBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentMethodDomainsPaymentMethodDomainValidate(
          input,
          ctx,
        )

      ctx.body =
        postPaymentMethodDomainsPaymentMethodDomainValidateResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getPaymentMethodsQuerySchema = z.object({
    customer: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    type: z
      .enum([
        "acss_debit",
        "affirm",
        "afterpay_clearpay",
        "alipay",
        "au_becs_debit",
        "bacs_debit",
        "bancontact",
        "blik",
        "boleto",
        "card",
        "cashapp",
        "customer_balance",
        "eps",
        "fpx",
        "giropay",
        "grabpay",
        "ideal",
        "klarna",
        "konbini",
        "link",
        "oxxo",
        "p24",
        "paynow",
        "paypal",
        "pix",
        "promptpay",
        "sepa_debit",
        "sofort",
        "us_bank_account",
        "wechat_pay",
        "zip",
      ])
      .optional(),
  })

  const getPaymentMethodsBodySchema = z.object({}).optional()

  const getPaymentMethodsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_payment_method)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getPaymentMethods", "/v1/payment_methods", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getPaymentMethodsQuerySchema, ctx.query),
      body: parseRequestInput(getPaymentMethodsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getPaymentMethods(input, ctx)

    ctx.body = getPaymentMethodsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postPaymentMethodsBodySchema = z
    .object({
      acss_debit: z
        .object({
          account_number: z.coerce.string(),
          institution_number: z.coerce.string(),
          transit_number: z.coerce.string(),
        })
        .optional(),
      affirm: z.object({}).optional(),
      afterpay_clearpay: z.object({}).optional(),
      alipay: z.object({}).optional(),
      au_becs_debit: z
        .object({
          account_number: z.coerce.string(),
          bsb_number: z.coerce.string(),
        })
        .optional(),
      bacs_debit: z
        .object({
          account_number: z.coerce.string().optional(),
          sort_code: z.coerce.string().optional(),
        })
        .optional(),
      bancontact: z.object({}).optional(),
      billing_details: z
        .object({
          address: z.union([
            z.object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            }),
            z.enum([""]),
          ]),
          email: z.union([z.coerce.string(), z.enum([""])]),
          name: z.union([z.coerce.string(), z.enum([""])]),
          phone: z.union([z.coerce.string(), z.enum([""])]),
        })
        .optional(),
      blik: z.object({}).optional(),
      boleto: z.object({ tax_id: z.coerce.string() }).optional(),
      card: z.union([
        z.object({
          cvc: z.coerce.string().optional(),
          exp_month: z.coerce.number(),
          exp_year: z.coerce.number(),
          number: z.coerce.string(),
        }),
        z.object({ token: z.coerce.string() }),
      ]),
      cashapp: z.object({}).optional(),
      customer: z.coerce.string().optional(),
      customer_balance: z.object({}).optional(),
      eps: z
        .object({
          bank: z
            .enum([
              "arzte_und_apotheker_bank",
              "austrian_anadi_bank_ag",
              "bank_austria",
              "bankhaus_carl_spangler",
              "bankhaus_schelhammer_und_schattera_ag",
              "bawag_psk_ag",
              "bks_bank_ag",
              "brull_kallmus_bank_ag",
              "btv_vier_lander_bank",
              "capital_bank_grawe_gruppe_ag",
              "deutsche_bank_ag",
              "dolomitenbank",
              "easybank_ag",
              "erste_bank_und_sparkassen",
              "hypo_alpeadriabank_international_ag",
              "hypo_bank_burgenland_aktiengesellschaft",
              "hypo_noe_lb_fur_niederosterreich_u_wien",
              "hypo_oberosterreich_salzburg_steiermark",
              "hypo_tirol_bank_ag",
              "hypo_vorarlberg_bank_ag",
              "marchfelder_bank",
              "oberbank_ag",
              "raiffeisen_bankengruppe_osterreich",
              "schoellerbank_ag",
              "sparda_bank_wien",
              "volksbank_gruppe",
              "volkskreditbank_ag",
              "vr_bank_braunau",
            ])
            .optional(),
        })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      fpx: z
        .object({
          bank: z.enum([
            "affin_bank",
            "agrobank",
            "alliance_bank",
            "ambank",
            "bank_islam",
            "bank_muamalat",
            "bank_of_china",
            "bank_rakyat",
            "bsn",
            "cimb",
            "deutsche_bank",
            "hong_leong_bank",
            "hsbc",
            "kfh",
            "maybank2e",
            "maybank2u",
            "ocbc",
            "pb_enterprise",
            "public_bank",
            "rhb",
            "standard_chartered",
            "uob",
          ]),
        })
        .optional(),
      giropay: z.object({}).optional(),
      grabpay: z.object({}).optional(),
      ideal: z
        .object({
          bank: z
            .enum([
              "abn_amro",
              "asn_bank",
              "bunq",
              "handelsbanken",
              "ing",
              "knab",
              "moneyou",
              "n26",
              "rabobank",
              "regiobank",
              "revolut",
              "sns_bank",
              "triodos_bank",
              "van_lanschot",
              "yoursafe",
            ])
            .optional(),
        })
        .optional(),
      interac_present: z.object({}).optional(),
      klarna: z
        .object({
          dob: z
            .object({
              day: z.coerce.number(),
              month: z.coerce.number(),
              year: z.coerce.number(),
            })
            .optional(),
        })
        .optional(),
      konbini: z.object({}).optional(),
      link: z.object({}).optional(),
      metadata: z.object({}).optional(),
      oxxo: z.object({}).optional(),
      p24: z
        .object({
          bank: z
            .enum([
              "alior_bank",
              "bank_millennium",
              "bank_nowy_bfg_sa",
              "bank_pekao_sa",
              "banki_spbdzielcze",
              "blik",
              "bnp_paribas",
              "boz",
              "citi_handlowy",
              "credit_agricole",
              "envelobank",
              "etransfer_pocztowy24",
              "getin_bank",
              "ideabank",
              "ing",
              "inteligo",
              "mbank_mtransfer",
              "nest_przelew",
              "noble_pay",
              "pbac_z_ipko",
              "plus_bank",
              "santander_przelew24",
              "tmobile_usbugi_bankowe",
              "toyota_bank",
              "volkswagen_bank",
            ])
            .optional(),
        })
        .optional(),
      payment_method: z.coerce.string().optional(),
      paynow: z.object({}).optional(),
      paypal: z.object({}).optional(),
      pix: z.object({}).optional(),
      promptpay: z.object({}).optional(),
      radar_options: z
        .object({ session: z.coerce.string().optional() })
        .optional(),
      sepa_debit: z.object({ iban: z.coerce.string() }).optional(),
      sofort: z
        .object({ country: z.enum(["AT", "BE", "DE", "ES", "IT", "NL"]) })
        .optional(),
      type: z
        .enum([
          "acss_debit",
          "affirm",
          "afterpay_clearpay",
          "alipay",
          "au_becs_debit",
          "bacs_debit",
          "bancontact",
          "blik",
          "boleto",
          "card",
          "cashapp",
          "customer_balance",
          "eps",
          "fpx",
          "giropay",
          "grabpay",
          "ideal",
          "klarna",
          "konbini",
          "link",
          "oxxo",
          "p24",
          "paynow",
          "paypal",
          "pix",
          "promptpay",
          "sepa_debit",
          "sofort",
          "us_bank_account",
          "wechat_pay",
          "zip",
        ])
        .optional(),
      us_bank_account: z
        .object({
          account_holder_type: z.enum(["company", "individual"]).optional(),
          account_number: z.coerce.string().optional(),
          account_type: z.enum(["checking", "savings"]).optional(),
          financial_connections_account: z.coerce.string().optional(),
          routing_number: z.coerce.string().optional(),
        })
        .optional(),
      wechat_pay: z.object({}).optional(),
      zip: z.object({}).optional(),
    })
    .optional()

  const postPaymentMethodsResponseValidator = responseValidationFactory(
    [["200", s_payment_method]],
    s_error,
  )

  router.post(
    "postPaymentMethods",
    "/v1/payment_methods",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(postPaymentMethodsBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.postPaymentMethods(
        input,
        ctx,
      )

      ctx.body = postPaymentMethodsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getPaymentMethodsPaymentMethodParamSchema = z.object({
    payment_method: z.coerce.string(),
  })

  const getPaymentMethodsPaymentMethodQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getPaymentMethodsPaymentMethodBodySchema = z.object({}).optional()

  const getPaymentMethodsPaymentMethodResponseValidator =
    responseValidationFactory([["200", s_payment_method]], s_error)

  router.get(
    "getPaymentMethodsPaymentMethod",
    "/v1/payment_methods/:paymentMethod",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getPaymentMethodsPaymentMethodParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getPaymentMethodsPaymentMethodQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getPaymentMethodsPaymentMethodBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getPaymentMethodsPaymentMethod(input, ctx)

      ctx.body = getPaymentMethodsPaymentMethodResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPaymentMethodsPaymentMethodParamSchema = z.object({
    payment_method: z.coerce.string(),
  })

  const postPaymentMethodsPaymentMethodBodySchema = z
    .object({
      billing_details: z
        .object({
          address: z.union([
            z.object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            }),
            z.enum([""]),
          ]),
          email: z.union([z.coerce.string(), z.enum([""])]),
          name: z.union([z.coerce.string(), z.enum([""])]),
          phone: z.union([z.coerce.string(), z.enum([""])]),
        })
        .optional(),
      card: z
        .object({
          exp_month: z.coerce.number().optional(),
          exp_year: z.coerce.number().optional(),
        })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      link: z.object({}).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      us_bank_account: z
        .object({
          account_holder_type: z.enum(["company", "individual"]).optional(),
        })
        .optional(),
    })
    .optional()

  const postPaymentMethodsPaymentMethodResponseValidator =
    responseValidationFactory([["200", s_payment_method]], s_error)

  router.post(
    "postPaymentMethodsPaymentMethod",
    "/v1/payment_methods/:paymentMethod",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentMethodsPaymentMethodParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentMethodsPaymentMethodBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentMethodsPaymentMethod(input, ctx)

      ctx.body = postPaymentMethodsPaymentMethodResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPaymentMethodsPaymentMethodAttachParamSchema = z.object({
    payment_method: z.coerce.string(),
  })

  const postPaymentMethodsPaymentMethodAttachBodySchema = z.object({
    customer: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
  })

  const postPaymentMethodsPaymentMethodAttachResponseValidator =
    responseValidationFactory([["200", s_payment_method]], s_error)

  router.post(
    "postPaymentMethodsPaymentMethodAttach",
    "/v1/payment_methods/:paymentMethod/attach",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentMethodsPaymentMethodAttachParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentMethodsPaymentMethodAttachBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentMethodsPaymentMethodAttach(input, ctx)

      ctx.body = postPaymentMethodsPaymentMethodAttachResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postPaymentMethodsPaymentMethodDetachParamSchema = z.object({
    payment_method: z.coerce.string(),
  })

  const postPaymentMethodsPaymentMethodDetachBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postPaymentMethodsPaymentMethodDetachResponseValidator =
    responseValidationFactory([["200", s_payment_method]], s_error)

  router.post(
    "postPaymentMethodsPaymentMethodDetach",
    "/v1/payment_methods/:paymentMethod/detach",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPaymentMethodsPaymentMethodDetachParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPaymentMethodsPaymentMethodDetachBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPaymentMethodsPaymentMethodDetach(input, ctx)

      ctx.body = postPaymentMethodsPaymentMethodDetachResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getPayoutsQuerySchema = z.object({
    arrival_date: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    destination: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z.coerce.string().optional(),
  })

  const getPayoutsBodySchema = z.object({}).optional()

  const getPayoutsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_payout)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getPayouts", "/v1/payouts", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getPayoutsQuerySchema, ctx.query),
      body: parseRequestInput(getPayoutsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getPayouts(input, ctx)

    ctx.body = getPayoutsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postPayoutsBodySchema = z.object({
    amount: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string().optional(),
    destination: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.object({}).optional(),
    method: z.enum(["instant", "standard"]).optional(),
    source_type: z.enum(["bank_account", "card", "fpx"]).optional(),
    statement_descriptor: z.coerce.string().optional(),
  })

  const postPayoutsResponseValidator = responseValidationFactory(
    [["200", s_payout]],
    s_error,
  )

  router.post("postPayouts", "/v1/payouts", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postPayoutsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postPayouts(input, ctx)

    ctx.body = postPayoutsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getPayoutsPayoutParamSchema = z.object({ payout: z.coerce.string() })

  const getPayoutsPayoutQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getPayoutsPayoutBodySchema = z.object({}).optional()

  const getPayoutsPayoutResponseValidator = responseValidationFactory(
    [["200", s_payout]],
    s_error,
  )

  router.get("getPayoutsPayout", "/v1/payouts/:payout", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getPayoutsPayoutParamSchema, ctx.params),
      query: parseRequestInput(getPayoutsPayoutQuerySchema, ctx.query),
      body: parseRequestInput(getPayoutsPayoutBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getPayoutsPayout(input, ctx)

    ctx.body = getPayoutsPayoutResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postPayoutsPayoutParamSchema = z.object({ payout: z.coerce.string() })

  const postPayoutsPayoutBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postPayoutsPayoutResponseValidator = responseValidationFactory(
    [["200", s_payout]],
    s_error,
  )

  router.post("postPayoutsPayout", "/v1/payouts/:payout", async (ctx, next) => {
    const input = {
      params: parseRequestInput(postPayoutsPayoutParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(postPayoutsPayoutBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postPayoutsPayout(input, ctx)

    ctx.body = postPayoutsPayoutResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postPayoutsPayoutCancelParamSchema = z.object({
    payout: z.coerce.string(),
  })

  const postPayoutsPayoutCancelBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postPayoutsPayoutCancelResponseValidator = responseValidationFactory(
    [["200", s_payout]],
    s_error,
  )

  router.post(
    "postPayoutsPayoutCancel",
    "/v1/payouts/:payout/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPayoutsPayoutCancelParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPayoutsPayoutCancelBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postPayoutsPayoutCancel(
        input,
        ctx,
      )

      ctx.body = postPayoutsPayoutCancelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPayoutsPayoutReverseParamSchema = z.object({
    payout: z.coerce.string(),
  })

  const postPayoutsPayoutReverseBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.object({}).optional(),
    })
    .optional()

  const postPayoutsPayoutReverseResponseValidator = responseValidationFactory(
    [["200", s_payout]],
    s_error,
  )

  router.post(
    "postPayoutsPayoutReverse",
    "/v1/payouts/:payout/reverse",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPayoutsPayoutReverseParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPayoutsPayoutReverseBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postPayoutsPayoutReverse(
        input,
        ctx,
      )

      ctx.body = postPayoutsPayoutReverseResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getPlansQuerySchema = z.object({
    active: z.coerce.boolean().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    product: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getPlansBodySchema = z.object({}).optional()

  const getPlansResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_plan)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getPlans", "/v1/plans", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getPlansQuerySchema, ctx.query),
      body: parseRequestInput(getPlansBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getPlans(input, ctx)

    ctx.body = getPlansResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postPlansBodySchema = z.object({
    active: z.coerce.boolean().optional(),
    aggregate_usage: z
      .enum(["last_during_period", "last_ever", "max", "sum"])
      .optional(),
    amount: z.coerce.number().optional(),
    amount_decimal: z.coerce.string().optional(),
    billing_scheme: z.enum(["per_unit", "tiered"]).optional(),
    currency: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
    id: z.coerce.string().optional(),
    interval: z.enum(["day", "month", "week", "year"]),
    interval_count: z.coerce.number().optional(),
    metadata: z.union([z.object({}), z.enum([""])]),
    nickname: z.coerce.string().optional(),
    product: z.union([
      z.object({
        active: z.coerce.boolean().optional(),
        id: z.coerce.string().optional(),
        metadata: z.object({}).optional(),
        name: z.coerce.string(),
        statement_descriptor: z.coerce.string().optional(),
        tax_code: z.coerce.string().optional(),
        unit_label: z.coerce.string().optional(),
      }),
      z.coerce.string(),
    ]),
    tiers: z
      .array(
        z.object({
          flat_amount: z.coerce.number().optional(),
          flat_amount_decimal: z.coerce.string().optional(),
          unit_amount: z.coerce.number().optional(),
          unit_amount_decimal: z.coerce.string().optional(),
          up_to: z.union([z.enum(["inf"]), z.coerce.number()]),
        }),
      )
      .optional(),
    tiers_mode: z.enum(["graduated", "volume"]).optional(),
    transform_usage: z
      .object({ divide_by: z.coerce.number(), round: z.enum(["down", "up"]) })
      .optional(),
    trial_period_days: z.coerce.number().optional(),
    usage_type: z.enum(["licensed", "metered"]).optional(),
  })

  const postPlansResponseValidator = responseValidationFactory(
    [["200", s_plan]],
    s_error,
  )

  router.post("postPlans", "/v1/plans", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postPlansBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postPlans(input, ctx)

    ctx.body = postPlansResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const deletePlansPlanParamSchema = z.object({ plan: z.coerce.string() })

  const deletePlansPlanBodySchema = z.object({}).optional()

  const deletePlansPlanResponseValidator = responseValidationFactory(
    [["200", s_deleted_plan]],
    s_error,
  )

  router.delete("deletePlansPlan", "/v1/plans/:plan", async (ctx, next) => {
    const input = {
      params: parseRequestInput(deletePlansPlanParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(deletePlansPlanBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.deletePlansPlan(input, ctx)

    ctx.body = deletePlansPlanResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getPlansPlanParamSchema = z.object({ plan: z.coerce.string() })

  const getPlansPlanQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getPlansPlanBodySchema = z.object({}).optional()

  const getPlansPlanResponseValidator = responseValidationFactory(
    [["200", s_plan]],
    s_error,
  )

  router.get("getPlansPlan", "/v1/plans/:plan", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getPlansPlanParamSchema, ctx.params),
      query: parseRequestInput(getPlansPlanQuerySchema, ctx.query),
      body: parseRequestInput(getPlansPlanBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getPlansPlan(input, ctx)

    ctx.body = getPlansPlanResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postPlansPlanParamSchema = z.object({ plan: z.coerce.string() })

  const postPlansPlanBodySchema = z
    .object({
      active: z.coerce.boolean().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      nickname: z.coerce.string().optional(),
      product: z.coerce.string().optional(),
      trial_period_days: z.coerce.number().optional(),
    })
    .optional()

  const postPlansPlanResponseValidator = responseValidationFactory(
    [["200", s_plan]],
    s_error,
  )

  router.post("postPlansPlan", "/v1/plans/:plan", async (ctx, next) => {
    const input = {
      params: parseRequestInput(postPlansPlanParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(postPlansPlanBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postPlansPlan(input, ctx)

    ctx.body = postPlansPlanResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getPricesQuerySchema = z.object({
    active: z.coerce.boolean().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    currency: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    lookup_keys: z.array(z.coerce.string()).optional(),
    product: z.coerce.string().optional(),
    recurring: z
      .object({
        interval: z.enum(["day", "month", "week", "year"]).optional(),
        usage_type: z.enum(["licensed", "metered"]).optional(),
      })
      .optional(),
    starting_after: z.coerce.string().optional(),
    type: z.enum(["one_time", "recurring"]).optional(),
  })

  const getPricesBodySchema = z.object({}).optional()

  const getPricesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_price)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getPrices", "/v1/prices", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getPricesQuerySchema, ctx.query),
      body: parseRequestInput(getPricesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getPrices(input, ctx)

    ctx.body = getPricesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postPricesBodySchema = z.object({
    active: z.coerce.boolean().optional(),
    billing_scheme: z.enum(["per_unit", "tiered"]).optional(),
    currency: z.coerce.string(),
    currency_options: z.object({}).optional(),
    custom_unit_amount: z
      .object({
        enabled: z.coerce.boolean(),
        maximum: z.coerce.number().optional(),
        minimum: z.coerce.number().optional(),
        preset: z.coerce.number().optional(),
      })
      .optional(),
    expand: z.array(z.coerce.string()).optional(),
    lookup_key: z.coerce.string().optional(),
    metadata: z.object({}).optional(),
    nickname: z.coerce.string().optional(),
    product: z.coerce.string().optional(),
    product_data: z
      .object({
        active: z.coerce.boolean().optional(),
        id: z.coerce.string().optional(),
        metadata: z.object({}).optional(),
        name: z.coerce.string(),
        statement_descriptor: z.coerce.string().optional(),
        tax_code: z.coerce.string().optional(),
        unit_label: z.coerce.string().optional(),
      })
      .optional(),
    recurring: z
      .object({
        aggregate_usage: z
          .enum(["last_during_period", "last_ever", "max", "sum"])
          .optional(),
        interval: z.enum(["day", "month", "week", "year"]),
        interval_count: z.coerce.number().optional(),
        usage_type: z.enum(["licensed", "metered"]).optional(),
      })
      .optional(),
    tax_behavior: z.enum(["exclusive", "inclusive", "unspecified"]).optional(),
    tiers: z
      .array(
        z.object({
          flat_amount: z.coerce.number().optional(),
          flat_amount_decimal: z.coerce.string().optional(),
          unit_amount: z.coerce.number().optional(),
          unit_amount_decimal: z.coerce.string().optional(),
          up_to: z.union([z.enum(["inf"]), z.coerce.number()]),
        }),
      )
      .optional(),
    tiers_mode: z.enum(["graduated", "volume"]).optional(),
    transfer_lookup_key: z.coerce.boolean().optional(),
    transform_quantity: z
      .object({ divide_by: z.coerce.number(), round: z.enum(["down", "up"]) })
      .optional(),
    unit_amount: z.coerce.number().optional(),
    unit_amount_decimal: z.coerce.string().optional(),
  })

  const postPricesResponseValidator = responseValidationFactory(
    [["200", s_price]],
    s_error,
  )

  router.post("postPrices", "/v1/prices", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postPricesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postPrices(input, ctx)

    ctx.body = postPricesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getPricesSearchQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    page: z.coerce.string().optional(),
    query: z.coerce.string(),
  })

  const getPricesSearchBodySchema = z.object({}).optional()

  const getPricesSearchResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_price)),
          has_more: z.coerce.boolean(),
          next_page: z.coerce.string().optional().nullable(),
          object: z.enum(["search_result"]),
          total_count: z.coerce.number().optional(),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getPricesSearch", "/v1/prices/search", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getPricesSearchQuerySchema, ctx.query),
      body: parseRequestInput(getPricesSearchBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getPricesSearch(input, ctx)

    ctx.body = getPricesSearchResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getPricesPriceParamSchema = z.object({ price: z.coerce.string() })

  const getPricesPriceQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getPricesPriceBodySchema = z.object({}).optional()

  const getPricesPriceResponseValidator = responseValidationFactory(
    [["200", s_price]],
    s_error,
  )

  router.get("getPricesPrice", "/v1/prices/:price", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getPricesPriceParamSchema, ctx.params),
      query: parseRequestInput(getPricesPriceQuerySchema, ctx.query),
      body: parseRequestInput(getPricesPriceBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getPricesPrice(input, ctx)

    ctx.body = getPricesPriceResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postPricesPriceParamSchema = z.object({ price: z.coerce.string() })

  const postPricesPriceBodySchema = z
    .object({
      active: z.coerce.boolean().optional(),
      currency_options: z.union([z.object({}), z.enum([""])]),
      expand: z.array(z.coerce.string()).optional(),
      lookup_key: z.coerce.string().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      nickname: z.coerce.string().optional(),
      tax_behavior: z
        .enum(["exclusive", "inclusive", "unspecified"])
        .optional(),
      transfer_lookup_key: z.coerce.boolean().optional(),
    })
    .optional()

  const postPricesPriceResponseValidator = responseValidationFactory(
    [["200", s_price]],
    s_error,
  )

  router.post("postPricesPrice", "/v1/prices/:price", async (ctx, next) => {
    const input = {
      params: parseRequestInput(postPricesPriceParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(postPricesPriceBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postPricesPrice(input, ctx)

    ctx.body = postPricesPriceResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getProductsQuerySchema = z.object({
    active: z.coerce.boolean().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    ids: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    shippable: z.coerce.boolean().optional(),
    starting_after: z.coerce.string().optional(),
    url: z.coerce.string().optional(),
  })

  const getProductsBodySchema = z.object({}).optional()

  const getProductsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_product)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getProducts", "/v1/products", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getProductsQuerySchema, ctx.query),
      body: parseRequestInput(getProductsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getProducts(input, ctx)

    ctx.body = getProductsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postProductsBodySchema = z.object({
    active: z.coerce.boolean().optional(),
    default_price_data: z
      .object({
        currency: z.coerce.string(),
        currency_options: z.object({}).optional(),
        recurring: z
          .object({
            interval: z.enum(["day", "month", "week", "year"]),
            interval_count: z.coerce.number().optional(),
          })
          .optional(),
        tax_behavior: z
          .enum(["exclusive", "inclusive", "unspecified"])
          .optional(),
        unit_amount: z.coerce.number().optional(),
        unit_amount_decimal: z.coerce.string().optional(),
      })
      .optional(),
    description: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    features: z.array(z.object({ name: z.coerce.string() })).optional(),
    id: z.coerce.string().optional(),
    images: z.array(z.coerce.string()).optional(),
    metadata: z.object({}).optional(),
    name: z.coerce.string(),
    package_dimensions: z
      .object({
        height: z.coerce.number(),
        length: z.coerce.number(),
        weight: z.coerce.number(),
        width: z.coerce.number(),
      })
      .optional(),
    shippable: z.coerce.boolean().optional(),
    statement_descriptor: z.coerce.string().optional(),
    tax_code: z.coerce.string().optional(),
    unit_label: z.coerce.string().optional(),
    url: z.coerce.string().optional(),
  })

  const postProductsResponseValidator = responseValidationFactory(
    [["200", s_product]],
    s_error,
  )

  router.post("postProducts", "/v1/products", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postProductsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postProducts(input, ctx)

    ctx.body = postProductsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getProductsSearchQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    page: z.coerce.string().optional(),
    query: z.coerce.string(),
  })

  const getProductsSearchBodySchema = z.object({}).optional()

  const getProductsSearchResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_product)),
          has_more: z.coerce.boolean(),
          next_page: z.coerce.string().optional().nullable(),
          object: z.enum(["search_result"]),
          total_count: z.coerce.number().optional(),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getProductsSearch", "/v1/products/search", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getProductsSearchQuerySchema, ctx.query),
      body: parseRequestInput(getProductsSearchBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getProductsSearch(input, ctx)

    ctx.body = getProductsSearchResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const deleteProductsIdParamSchema = z.object({ id: z.coerce.string() })

  const deleteProductsIdBodySchema = z.object({}).optional()

  const deleteProductsIdResponseValidator = responseValidationFactory(
    [["200", s_deleted_product]],
    s_error,
  )

  router.delete("deleteProductsId", "/v1/products/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(deleteProductsIdParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(deleteProductsIdBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.deleteProductsId(input, ctx)

    ctx.body = deleteProductsIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getProductsIdParamSchema = z.object({ id: z.coerce.string() })

  const getProductsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getProductsIdBodySchema = z.object({}).optional()

  const getProductsIdResponseValidator = responseValidationFactory(
    [["200", s_product]],
    s_error,
  )

  router.get("getProductsId", "/v1/products/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getProductsIdParamSchema, ctx.params),
      query: parseRequestInput(getProductsIdQuerySchema, ctx.query),
      body: parseRequestInput(getProductsIdBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getProductsId(input, ctx)

    ctx.body = getProductsIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postProductsIdParamSchema = z.object({ id: z.coerce.string() })

  const postProductsIdBodySchema = z
    .object({
      active: z.coerce.boolean().optional(),
      default_price: z.coerce.string().optional(),
      description: z.union([z.coerce.string(), z.enum([""])]),
      expand: z.array(z.coerce.string()).optional(),
      features: z.union([
        z.array(z.object({ name: z.coerce.string() })),
        z.enum([""]),
      ]),
      images: z.union([z.array(z.coerce.string()), z.enum([""])]),
      metadata: z.union([z.object({}), z.enum([""])]),
      name: z.coerce.string().optional(),
      package_dimensions: z.union([
        z.object({
          height: z.coerce.number(),
          length: z.coerce.number(),
          weight: z.coerce.number(),
          width: z.coerce.number(),
        }),
        z.enum([""]),
      ]),
      shippable: z.coerce.boolean().optional(),
      statement_descriptor: z.coerce.string().optional(),
      tax_code: z.union([z.coerce.string(), z.enum([""])]),
      unit_label: z.union([z.coerce.string(), z.enum([""])]),
      url: z.union([z.coerce.string(), z.enum([""])]),
    })
    .optional()

  const postProductsIdResponseValidator = responseValidationFactory(
    [["200", s_product]],
    s_error,
  )

  router.post("postProductsId", "/v1/products/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(postProductsIdParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(postProductsIdBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postProductsId(input, ctx)

    ctx.body = postProductsIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getPromotionCodesQuerySchema = z.object({
    active: z.coerce.boolean().optional(),
    code: z.coerce.string().optional(),
    coupon: z.coerce.string().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    customer: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getPromotionCodesBodySchema = z.object({}).optional()

  const getPromotionCodesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_promotion_code)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getPromotionCodes", "/v1/promotion_codes", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getPromotionCodesQuerySchema, ctx.query),
      body: parseRequestInput(getPromotionCodesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getPromotionCodes(input, ctx)

    ctx.body = getPromotionCodesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postPromotionCodesBodySchema = z.object({
    active: z.coerce.boolean().optional(),
    code: z.coerce.string().optional(),
    coupon: z.coerce.string(),
    customer: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    expires_at: z.coerce.number().optional(),
    max_redemptions: z.coerce.number().optional(),
    metadata: z.object({}).optional(),
    restrictions: z
      .object({
        currency_options: z.object({}).optional(),
        first_time_transaction: z.coerce.boolean().optional(),
        minimum_amount: z.coerce.number().optional(),
        minimum_amount_currency: z.coerce.string().optional(),
      })
      .optional(),
  })

  const postPromotionCodesResponseValidator = responseValidationFactory(
    [["200", s_promotion_code]],
    s_error,
  )

  router.post(
    "postPromotionCodes",
    "/v1/promotion_codes",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(postPromotionCodesBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.postPromotionCodes(
        input,
        ctx,
      )

      ctx.body = postPromotionCodesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getPromotionCodesPromotionCodeParamSchema = z.object({
    promotion_code: z.coerce.string(),
  })

  const getPromotionCodesPromotionCodeQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getPromotionCodesPromotionCodeBodySchema = z.object({}).optional()

  const getPromotionCodesPromotionCodeResponseValidator =
    responseValidationFactory([["200", s_promotion_code]], s_error)

  router.get(
    "getPromotionCodesPromotionCode",
    "/v1/promotion_codes/:promotionCode",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getPromotionCodesPromotionCodeParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getPromotionCodesPromotionCodeQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getPromotionCodesPromotionCodeBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getPromotionCodesPromotionCode(input, ctx)

      ctx.body = getPromotionCodesPromotionCodeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postPromotionCodesPromotionCodeParamSchema = z.object({
    promotion_code: z.coerce.string(),
  })

  const postPromotionCodesPromotionCodeBodySchema = z
    .object({
      active: z.coerce.boolean().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      restrictions: z
        .object({ currency_options: z.object({}).optional() })
        .optional(),
    })
    .optional()

  const postPromotionCodesPromotionCodeResponseValidator =
    responseValidationFactory([["200", s_promotion_code]], s_error)

  router.post(
    "postPromotionCodesPromotionCode",
    "/v1/promotion_codes/:promotionCode",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postPromotionCodesPromotionCodeParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postPromotionCodesPromotionCodeBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postPromotionCodesPromotionCode(input, ctx)

      ctx.body = postPromotionCodesPromotionCodeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getQuotesQuerySchema = z.object({
    customer: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z.enum(["accepted", "canceled", "draft", "open"]).optional(),
    test_clock: z.coerce.string().optional(),
  })

  const getQuotesBodySchema = z.object({}).optional()

  const getQuotesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_quote)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getQuotes", "/v1/quotes", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getQuotesQuerySchema, ctx.query),
      body: parseRequestInput(getQuotesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getQuotes(input, ctx)

    ctx.body = getQuotesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postQuotesBodySchema = z
    .object({
      application_fee_amount: z.union([z.coerce.number(), z.enum([""])]),
      application_fee_percent: z.union([z.coerce.number(), z.enum([""])]),
      automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
      collection_method: z
        .enum(["charge_automatically", "send_invoice"])
        .optional(),
      customer: z.coerce.string().optional(),
      default_tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
      description: z.union([z.coerce.string(), z.enum([""])]),
      discounts: z.union([
        z.array(
          z.object({
            coupon: z.coerce.string().optional(),
            discount: z.coerce.string().optional(),
          }),
        ),
        z.enum([""]),
      ]),
      expand: z.array(z.coerce.string()).optional(),
      expires_at: z.coerce.number().optional(),
      footer: z.union([z.coerce.string(), z.enum([""])]),
      from_quote: z
        .object({
          is_revision: z.coerce.boolean().optional(),
          quote: z.coerce.string(),
        })
        .optional(),
      header: z.union([z.coerce.string(), z.enum([""])]),
      invoice_settings: z
        .object({ days_until_due: z.coerce.number().optional() })
        .optional(),
      line_items: z
        .array(
          z.object({
            price: z.coerce.string().optional(),
            price_data: z
              .object({
                currency: z.coerce.string(),
                product: z.coerce.string(),
                recurring: z
                  .object({
                    interval: z.enum(["day", "month", "week", "year"]),
                    interval_count: z.coerce.number().optional(),
                  })
                  .optional(),
                tax_behavior: z
                  .enum(["exclusive", "inclusive", "unspecified"])
                  .optional(),
                unit_amount: z.coerce.number().optional(),
                unit_amount_decimal: z.coerce.string().optional(),
              })
              .optional(),
            quantity: z.coerce.number().optional(),
            tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          }),
        )
        .optional(),
      metadata: z.object({}).optional(),
      on_behalf_of: z.union([z.coerce.string(), z.enum([""])]),
      subscription_data: z
        .object({
          description: z.coerce.string().optional(),
          effective_date: z.union([
            z.enum(["current_period_end"]),
            z.coerce.number(),
            z.enum([""]),
          ]),
          trial_period_days: z.union([z.coerce.number(), z.enum([""])]),
        })
        .optional(),
      test_clock: z.coerce.string().optional(),
      transfer_data: z.union([
        z.object({
          amount: z.coerce.number().optional(),
          amount_percent: z.coerce.number().optional(),
          destination: z.coerce.string(),
        }),
        z.enum([""]),
      ]),
    })
    .optional()

  const postQuotesResponseValidator = responseValidationFactory(
    [["200", s_quote]],
    s_error,
  )

  router.post("postQuotes", "/v1/quotes", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postQuotesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postQuotes(input, ctx)

    ctx.body = postQuotesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getQuotesQuoteParamSchema = z.object({ quote: z.coerce.string() })

  const getQuotesQuoteQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getQuotesQuoteBodySchema = z.object({}).optional()

  const getQuotesQuoteResponseValidator = responseValidationFactory(
    [["200", s_quote]],
    s_error,
  )

  router.get("getQuotesQuote", "/v1/quotes/:quote", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getQuotesQuoteParamSchema, ctx.params),
      query: parseRequestInput(getQuotesQuoteQuerySchema, ctx.query),
      body: parseRequestInput(getQuotesQuoteBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getQuotesQuote(input, ctx)

    ctx.body = getQuotesQuoteResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postQuotesQuoteParamSchema = z.object({ quote: z.coerce.string() })

  const postQuotesQuoteBodySchema = z
    .object({
      application_fee_amount: z.union([z.coerce.number(), z.enum([""])]),
      application_fee_percent: z.union([z.coerce.number(), z.enum([""])]),
      automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
      collection_method: z
        .enum(["charge_automatically", "send_invoice"])
        .optional(),
      customer: z.coerce.string().optional(),
      default_tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
      description: z.union([z.coerce.string(), z.enum([""])]),
      discounts: z.union([
        z.array(
          z.object({
            coupon: z.coerce.string().optional(),
            discount: z.coerce.string().optional(),
          }),
        ),
        z.enum([""]),
      ]),
      expand: z.array(z.coerce.string()).optional(),
      expires_at: z.coerce.number().optional(),
      footer: z.union([z.coerce.string(), z.enum([""])]),
      header: z.union([z.coerce.string(), z.enum([""])]),
      invoice_settings: z
        .object({ days_until_due: z.coerce.number().optional() })
        .optional(),
      line_items: z
        .array(
          z.object({
            id: z.coerce.string().optional(),
            price: z.coerce.string().optional(),
            price_data: z
              .object({
                currency: z.coerce.string(),
                product: z.coerce.string(),
                recurring: z
                  .object({
                    interval: z.enum(["day", "month", "week", "year"]),
                    interval_count: z.coerce.number().optional(),
                  })
                  .optional(),
                tax_behavior: z
                  .enum(["exclusive", "inclusive", "unspecified"])
                  .optional(),
                unit_amount: z.coerce.number().optional(),
                unit_amount_decimal: z.coerce.string().optional(),
              })
              .optional(),
            quantity: z.coerce.number().optional(),
            tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          }),
        )
        .optional(),
      metadata: z.object({}).optional(),
      on_behalf_of: z.union([z.coerce.string(), z.enum([""])]),
      subscription_data: z
        .object({
          description: z.union([z.coerce.string(), z.enum([""])]),
          effective_date: z.union([
            z.enum(["current_period_end"]),
            z.coerce.number(),
            z.enum([""]),
          ]),
          trial_period_days: z.union([z.coerce.number(), z.enum([""])]),
        })
        .optional(),
      transfer_data: z.union([
        z.object({
          amount: z.coerce.number().optional(),
          amount_percent: z.coerce.number().optional(),
          destination: z.coerce.string(),
        }),
        z.enum([""]),
      ]),
    })
    .optional()

  const postQuotesQuoteResponseValidator = responseValidationFactory(
    [["200", s_quote]],
    s_error,
  )

  router.post("postQuotesQuote", "/v1/quotes/:quote", async (ctx, next) => {
    const input = {
      params: parseRequestInput(postQuotesQuoteParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(postQuotesQuoteBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postQuotesQuote(input, ctx)

    ctx.body = postQuotesQuoteResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postQuotesQuoteAcceptParamSchema = z.object({
    quote: z.coerce.string(),
  })

  const postQuotesQuoteAcceptBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postQuotesQuoteAcceptResponseValidator = responseValidationFactory(
    [["200", s_quote]],
    s_error,
  )

  router.post(
    "postQuotesQuoteAccept",
    "/v1/quotes/:quote/accept",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postQuotesQuoteAcceptParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          postQuotesQuoteAcceptBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postQuotesQuoteAccept(
        input,
        ctx,
      )

      ctx.body = postQuotesQuoteAcceptResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postQuotesQuoteCancelParamSchema = z.object({
    quote: z.coerce.string(),
  })

  const postQuotesQuoteCancelBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postQuotesQuoteCancelResponseValidator = responseValidationFactory(
    [["200", s_quote]],
    s_error,
  )

  router.post(
    "postQuotesQuoteCancel",
    "/v1/quotes/:quote/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postQuotesQuoteCancelParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          postQuotesQuoteCancelBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postQuotesQuoteCancel(
        input,
        ctx,
      )

      ctx.body = postQuotesQuoteCancelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getQuotesQuoteComputedUpfrontLineItemsParamSchema = z.object({
    quote: z.coerce.string(),
  })

  const getQuotesQuoteComputedUpfrontLineItemsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getQuotesQuoteComputedUpfrontLineItemsBodySchema = z
    .object({})
    .optional()

  const getQuotesQuoteComputedUpfrontLineItemsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_item)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getQuotesQuoteComputedUpfrontLineItems",
    "/v1/quotes/:quote/computed_upfront_line_items",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getQuotesQuoteComputedUpfrontLineItemsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getQuotesQuoteComputedUpfrontLineItemsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getQuotesQuoteComputedUpfrontLineItemsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getQuotesQuoteComputedUpfrontLineItems(input, ctx)

      ctx.body = getQuotesQuoteComputedUpfrontLineItemsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postQuotesQuoteFinalizeParamSchema = z.object({
    quote: z.coerce.string(),
  })

  const postQuotesQuoteFinalizeBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      expires_at: z.coerce.number().optional(),
    })
    .optional()

  const postQuotesQuoteFinalizeResponseValidator = responseValidationFactory(
    [["200", s_quote]],
    s_error,
  )

  router.post(
    "postQuotesQuoteFinalize",
    "/v1/quotes/:quote/finalize",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postQuotesQuoteFinalizeParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postQuotesQuoteFinalizeBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postQuotesQuoteFinalize(
        input,
        ctx,
      )

      ctx.body = postQuotesQuoteFinalizeResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getQuotesQuoteLineItemsParamSchema = z.object({
    quote: z.coerce.string(),
  })

  const getQuotesQuoteLineItemsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getQuotesQuoteLineItemsBodySchema = z.object({}).optional()

  const getQuotesQuoteLineItemsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_item)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getQuotesQuoteLineItems",
    "/v1/quotes/:quote/line_items",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getQuotesQuoteLineItemsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(getQuotesQuoteLineItemsQuerySchema, ctx.query),
        body: parseRequestInput(
          getQuotesQuoteLineItemsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getQuotesQuoteLineItems(
        input,
        ctx,
      )

      ctx.body = getQuotesQuoteLineItemsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getQuotesQuotePdfParamSchema = z.object({ quote: z.coerce.string() })

  const getQuotesQuotePdfQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getQuotesQuotePdfBodySchema = z.object({}).optional()

  const getQuotesQuotePdfResponseValidator = responseValidationFactory(
    [["200", z.coerce.string()]],
    s_error,
  )

  router.get(
    "getQuotesQuotePdf",
    "/v1/quotes/:quote/pdf",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getQuotesQuotePdfParamSchema, ctx.params),
        query: parseRequestInput(getQuotesQuotePdfQuerySchema, ctx.query),
        body: parseRequestInput(getQuotesQuotePdfBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getQuotesQuotePdf(
        input,
        ctx,
      )

      ctx.body = getQuotesQuotePdfResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getRadarEarlyFraudWarningsQuerySchema = z.object({
    charge: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    payment_intent: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getRadarEarlyFraudWarningsBodySchema = z.object({}).optional()

  const getRadarEarlyFraudWarningsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_radar_early_fraud_warning)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getRadarEarlyFraudWarnings",
    "/v1/radar/early_fraud_warnings",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getRadarEarlyFraudWarningsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getRadarEarlyFraudWarningsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getRadarEarlyFraudWarnings(
        input,
        ctx,
      )

      ctx.body = getRadarEarlyFraudWarningsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getRadarEarlyFraudWarningsEarlyFraudWarningParamSchema = z.object({
    early_fraud_warning: z.coerce.string(),
  })

  const getRadarEarlyFraudWarningsEarlyFraudWarningQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getRadarEarlyFraudWarningsEarlyFraudWarningBodySchema = z
    .object({})
    .optional()

  const getRadarEarlyFraudWarningsEarlyFraudWarningResponseValidator =
    responseValidationFactory([["200", s_radar_early_fraud_warning]], s_error)

  router.get(
    "getRadarEarlyFraudWarningsEarlyFraudWarning",
    "/v1/radar/early_fraud_warnings/:earlyFraudWarning",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getRadarEarlyFraudWarningsEarlyFraudWarningParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getRadarEarlyFraudWarningsEarlyFraudWarningQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getRadarEarlyFraudWarningsEarlyFraudWarningBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getRadarEarlyFraudWarningsEarlyFraudWarning(
          input,
          ctx,
        )

      ctx.body = getRadarEarlyFraudWarningsEarlyFraudWarningResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getRadarValueListItemsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    value: z.coerce.string().optional(),
    value_list: z.coerce.string(),
  })

  const getRadarValueListItemsBodySchema = z.object({}).optional()

  const getRadarValueListItemsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_radar_value_list_item),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getRadarValueListItems",
    "/v1/radar/value_list_items",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getRadarValueListItemsQuerySchema, ctx.query),
        body: parseRequestInput(
          getRadarValueListItemsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getRadarValueListItems(
        input,
        ctx,
      )

      ctx.body = getRadarValueListItemsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postRadarValueListItemsBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    value: z.coerce.string(),
    value_list: z.coerce.string(),
  })

  const postRadarValueListItemsResponseValidator = responseValidationFactory(
    [["200", s_radar_value_list_item]],
    s_error,
  )

  router.post(
    "postRadarValueListItems",
    "/v1/radar/value_list_items",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postRadarValueListItemsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postRadarValueListItems(
        input,
        ctx,
      )

      ctx.body = postRadarValueListItemsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteRadarValueListItemsItemParamSchema = z.object({
    item: z.coerce.string(),
  })

  const deleteRadarValueListItemsItemBodySchema = z.object({}).optional()

  const deleteRadarValueListItemsItemResponseValidator =
    responseValidationFactory(
      [["200", s_deleted_radar_value_list_item]],
      s_error,
    )

  router.delete(
    "deleteRadarValueListItemsItem",
    "/v1/radar/value_list_items/:item",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteRadarValueListItemsItemParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteRadarValueListItemsItemBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteRadarValueListItemsItem(input, ctx)

      ctx.body = deleteRadarValueListItemsItemResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getRadarValueListItemsItemParamSchema = z.object({
    item: z.coerce.string(),
  })

  const getRadarValueListItemsItemQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getRadarValueListItemsItemBodySchema = z.object({}).optional()

  const getRadarValueListItemsItemResponseValidator = responseValidationFactory(
    [["200", s_radar_value_list_item]],
    s_error,
  )

  router.get(
    "getRadarValueListItemsItem",
    "/v1/radar/value_list_items/:item",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getRadarValueListItemsItemParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getRadarValueListItemsItemQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getRadarValueListItemsItemBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getRadarValueListItemsItem(
        input,
        ctx,
      )

      ctx.body = getRadarValueListItemsItemResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getRadarValueListsQuerySchema = z.object({
    alias: z.coerce.string().optional(),
    contains: z.coerce.string().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getRadarValueListsBodySchema = z.object({}).optional()

  const getRadarValueListsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_radar_value_list),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getRadarValueLists",
    "/v1/radar/value_lists",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getRadarValueListsQuerySchema, ctx.query),
        body: parseRequestInput(getRadarValueListsBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getRadarValueLists(
        input,
        ctx,
      )

      ctx.body = getRadarValueListsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postRadarValueListsBodySchema = z.object({
    alias: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
    item_type: z
      .enum([
        "card_bin",
        "card_fingerprint",
        "case_sensitive_string",
        "country",
        "customer_id",
        "email",
        "ip_address",
        "sepa_debit_fingerprint",
        "string",
        "us_bank_account_fingerprint",
      ])
      .optional(),
    metadata: z.object({}).optional(),
    name: z.coerce.string(),
  })

  const postRadarValueListsResponseValidator = responseValidationFactory(
    [["200", s_radar_value_list]],
    s_error,
  )

  router.post(
    "postRadarValueLists",
    "/v1/radar/value_lists",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postRadarValueListsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postRadarValueLists(
        input,
        ctx,
      )

      ctx.body = postRadarValueListsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteRadarValueListsValueListParamSchema = z.object({
    value_list: z.coerce.string(),
  })

  const deleteRadarValueListsValueListBodySchema = z.object({}).optional()

  const deleteRadarValueListsValueListResponseValidator =
    responseValidationFactory([["200", s_deleted_radar_value_list]], s_error)

  router.delete(
    "deleteRadarValueListsValueList",
    "/v1/radar/value_lists/:valueList",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteRadarValueListsValueListParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteRadarValueListsValueListBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteRadarValueListsValueList(input, ctx)

      ctx.body = deleteRadarValueListsValueListResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getRadarValueListsValueListParamSchema = z.object({
    value_list: z.coerce.string(),
  })

  const getRadarValueListsValueListQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getRadarValueListsValueListBodySchema = z.object({}).optional()

  const getRadarValueListsValueListResponseValidator =
    responseValidationFactory([["200", s_radar_value_list]], s_error)

  router.get(
    "getRadarValueListsValueList",
    "/v1/radar/value_lists/:valueList",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getRadarValueListsValueListParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getRadarValueListsValueListQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getRadarValueListsValueListBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getRadarValueListsValueList(
        input,
        ctx,
      )

      ctx.body = getRadarValueListsValueListResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postRadarValueListsValueListParamSchema = z.object({
    value_list: z.coerce.string(),
  })

  const postRadarValueListsValueListBodySchema = z
    .object({
      alias: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.object({}).optional(),
      name: z.coerce.string().optional(),
    })
    .optional()

  const postRadarValueListsValueListResponseValidator =
    responseValidationFactory([["200", s_radar_value_list]], s_error)

  router.post(
    "postRadarValueListsValueList",
    "/v1/radar/value_lists/:valueList",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postRadarValueListsValueListParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postRadarValueListsValueListBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postRadarValueListsValueList(input, ctx)

      ctx.body = postRadarValueListsValueListResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getRefundsQuerySchema = z.object({
    charge: z.coerce.string().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    payment_intent: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getRefundsBodySchema = z.object({}).optional()

  const getRefundsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_refund)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getRefunds", "/v1/refunds", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getRefundsQuerySchema, ctx.query),
      body: parseRequestInput(getRefundsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getRefunds(input, ctx)

    ctx.body = getRefundsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postRefundsBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      charge: z.coerce.string().optional(),
      currency: z.coerce.string().optional(),
      customer: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      instructions_email: z.coerce.string().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      origin: z.enum(["customer_balance"]).optional(),
      payment_intent: z.coerce.string().optional(),
      reason: z
        .enum(["duplicate", "fraudulent", "requested_by_customer"])
        .optional(),
      refund_application_fee: z.coerce.boolean().optional(),
      reverse_transfer: z.coerce.boolean().optional(),
    })
    .optional()

  const postRefundsResponseValidator = responseValidationFactory(
    [["200", s_refund]],
    s_error,
  )

  router.post("postRefunds", "/v1/refunds", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postRefundsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postRefunds(input, ctx)

    ctx.body = postRefundsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getRefundsRefundParamSchema = z.object({ refund: z.coerce.string() })

  const getRefundsRefundQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getRefundsRefundBodySchema = z.object({}).optional()

  const getRefundsRefundResponseValidator = responseValidationFactory(
    [["200", s_refund]],
    s_error,
  )

  router.get("getRefundsRefund", "/v1/refunds/:refund", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getRefundsRefundParamSchema, ctx.params),
      query: parseRequestInput(getRefundsRefundQuerySchema, ctx.query),
      body: parseRequestInput(getRefundsRefundBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getRefundsRefund(input, ctx)

    ctx.body = getRefundsRefundResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postRefundsRefundParamSchema = z.object({ refund: z.coerce.string() })

  const postRefundsRefundBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postRefundsRefundResponseValidator = responseValidationFactory(
    [["200", s_refund]],
    s_error,
  )

  router.post("postRefundsRefund", "/v1/refunds/:refund", async (ctx, next) => {
    const input = {
      params: parseRequestInput(postRefundsRefundParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(postRefundsRefundBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postRefundsRefund(input, ctx)

    ctx.body = postRefundsRefundResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postRefundsRefundCancelParamSchema = z.object({
    refund: z.coerce.string(),
  })

  const postRefundsRefundCancelBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postRefundsRefundCancelResponseValidator = responseValidationFactory(
    [["200", s_refund]],
    s_error,
  )

  router.post(
    "postRefundsRefundCancel",
    "/v1/refunds/:refund/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postRefundsRefundCancelParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postRefundsRefundCancelBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postRefundsRefundCancel(
        input,
        ctx,
      )

      ctx.body = postRefundsRefundCancelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getReportingReportRunsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getReportingReportRunsBodySchema = z.object({}).optional()

  const getReportingReportRunsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_reporting_report_run)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getReportingReportRuns",
    "/v1/reporting/report_runs",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getReportingReportRunsQuerySchema, ctx.query),
        body: parseRequestInput(
          getReportingReportRunsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getReportingReportRuns(
        input,
        ctx,
      )

      ctx.body = getReportingReportRunsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postReportingReportRunsBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    parameters: z
      .object({
        columns: z.array(z.coerce.string()).optional(),
        connected_account: z.coerce.string().optional(),
        currency: z.coerce.string().optional(),
        interval_end: z.coerce.number().optional(),
        interval_start: z.coerce.number().optional(),
        payout: z.coerce.string().optional(),
        reporting_category: z
          .enum([
            "advance",
            "advance_funding",
            "anticipation_repayment",
            "charge",
            "charge_failure",
            "connect_collection_transfer",
            "connect_reserved_funds",
            "contribution",
            "dispute",
            "dispute_reversal",
            "fee",
            "financing_paydown",
            "financing_paydown_reversal",
            "financing_payout",
            "financing_payout_reversal",
            "issuing_authorization_hold",
            "issuing_authorization_release",
            "issuing_dispute",
            "issuing_transaction",
            "network_cost",
            "obligation",
            "other_adjustment",
            "partial_capture_reversal",
            "payout",
            "payout_reversal",
            "platform_earning",
            "platform_earning_refund",
            "refund",
            "refund_failure",
            "risk_reserved_funds",
            "tax",
            "topup",
            "topup_reversal",
            "transfer",
            "transfer_reversal",
          ])
          .optional(),
        timezone: z
          .enum([
            "Africa/Abidjan",
            "Africa/Accra",
            "Africa/Addis_Ababa",
            "Africa/Algiers",
            "Africa/Asmara",
            "Africa/Asmera",
            "Africa/Bamako",
            "Africa/Bangui",
            "Africa/Banjul",
            "Africa/Bissau",
            "Africa/Blantyre",
            "Africa/Brazzaville",
            "Africa/Bujumbura",
            "Africa/Cairo",
            "Africa/Casablanca",
            "Africa/Ceuta",
            "Africa/Conakry",
            "Africa/Dakar",
            "Africa/Dar_es_Salaam",
            "Africa/Djibouti",
            "Africa/Douala",
            "Africa/El_Aaiun",
            "Africa/Freetown",
            "Africa/Gaborone",
            "Africa/Harare",
            "Africa/Johannesburg",
            "Africa/Juba",
            "Africa/Kampala",
            "Africa/Khartoum",
            "Africa/Kigali",
            "Africa/Kinshasa",
            "Africa/Lagos",
            "Africa/Libreville",
            "Africa/Lome",
            "Africa/Luanda",
            "Africa/Lubumbashi",
            "Africa/Lusaka",
            "Africa/Malabo",
            "Africa/Maputo",
            "Africa/Maseru",
            "Africa/Mbabane",
            "Africa/Mogadishu",
            "Africa/Monrovia",
            "Africa/Nairobi",
            "Africa/Ndjamena",
            "Africa/Niamey",
            "Africa/Nouakchott",
            "Africa/Ouagadougou",
            "Africa/Porto-Novo",
            "Africa/Sao_Tome",
            "Africa/Timbuktu",
            "Africa/Tripoli",
            "Africa/Tunis",
            "Africa/Windhoek",
            "America/Adak",
            "America/Anchorage",
            "America/Anguilla",
            "America/Antigua",
            "America/Araguaina",
            "America/Argentina/Buenos_Aires",
            "America/Argentina/Catamarca",
            "America/Argentina/ComodRivadavia",
            "America/Argentina/Cordoba",
            "America/Argentina/Jujuy",
            "America/Argentina/La_Rioja",
            "America/Argentina/Mendoza",
            "America/Argentina/Rio_Gallegos",
            "America/Argentina/Salta",
            "America/Argentina/San_Juan",
            "America/Argentina/San_Luis",
            "America/Argentina/Tucuman",
            "America/Argentina/Ushuaia",
            "America/Aruba",
            "America/Asuncion",
            "America/Atikokan",
            "America/Atka",
            "America/Bahia",
            "America/Bahia_Banderas",
            "America/Barbados",
            "America/Belem",
            "America/Belize",
            "America/Blanc-Sablon",
            "America/Boa_Vista",
            "America/Bogota",
            "America/Boise",
            "America/Buenos_Aires",
            "America/Cambridge_Bay",
            "America/Campo_Grande",
            "America/Cancun",
            "America/Caracas",
            "America/Catamarca",
            "America/Cayenne",
            "America/Cayman",
            "America/Chicago",
            "America/Chihuahua",
            "America/Ciudad_Juarez",
            "America/Coral_Harbour",
            "America/Cordoba",
            "America/Costa_Rica",
            "America/Creston",
            "America/Cuiaba",
            "America/Curacao",
            "America/Danmarkshavn",
            "America/Dawson",
            "America/Dawson_Creek",
            "America/Denver",
            "America/Detroit",
            "America/Dominica",
            "America/Edmonton",
            "America/Eirunepe",
            "America/El_Salvador",
            "America/Ensenada",
            "America/Fort_Nelson",
            "America/Fort_Wayne",
            "America/Fortaleza",
            "America/Glace_Bay",
            "America/Godthab",
            "America/Goose_Bay",
            "America/Grand_Turk",
            "America/Grenada",
            "America/Guadeloupe",
            "America/Guatemala",
            "America/Guayaquil",
            "America/Guyana",
            "America/Halifax",
            "America/Havana",
            "America/Hermosillo",
            "America/Indiana/Indianapolis",
            "America/Indiana/Knox",
            "America/Indiana/Marengo",
            "America/Indiana/Petersburg",
            "America/Indiana/Tell_City",
            "America/Indiana/Vevay",
            "America/Indiana/Vincennes",
            "America/Indiana/Winamac",
            "America/Indianapolis",
            "America/Inuvik",
            "America/Iqaluit",
            "America/Jamaica",
            "America/Jujuy",
            "America/Juneau",
            "America/Kentucky/Louisville",
            "America/Kentucky/Monticello",
            "America/Knox_IN",
            "America/Kralendijk",
            "America/La_Paz",
            "America/Lima",
            "America/Los_Angeles",
            "America/Louisville",
            "America/Lower_Princes",
            "America/Maceio",
            "America/Managua",
            "America/Manaus",
            "America/Marigot",
            "America/Martinique",
            "America/Matamoros",
            "America/Mazatlan",
            "America/Mendoza",
            "America/Menominee",
            "America/Merida",
            "America/Metlakatla",
            "America/Mexico_City",
            "America/Miquelon",
            "America/Moncton",
            "America/Monterrey",
            "America/Montevideo",
            "America/Montreal",
            "America/Montserrat",
            "America/Nassau",
            "America/New_York",
            "America/Nipigon",
            "America/Nome",
            "America/Noronha",
            "America/North_Dakota/Beulah",
            "America/North_Dakota/Center",
            "America/North_Dakota/New_Salem",
            "America/Nuuk",
            "America/Ojinaga",
            "America/Panama",
            "America/Pangnirtung",
            "America/Paramaribo",
            "America/Phoenix",
            "America/Port-au-Prince",
            "America/Port_of_Spain",
            "America/Porto_Acre",
            "America/Porto_Velho",
            "America/Puerto_Rico",
            "America/Punta_Arenas",
            "America/Rainy_River",
            "America/Rankin_Inlet",
            "America/Recife",
            "America/Regina",
            "America/Resolute",
            "America/Rio_Branco",
            "America/Rosario",
            "America/Santa_Isabel",
            "America/Santarem",
            "America/Santiago",
            "America/Santo_Domingo",
            "America/Sao_Paulo",
            "America/Scoresbysund",
            "America/Shiprock",
            "America/Sitka",
            "America/St_Barthelemy",
            "America/St_Johns",
            "America/St_Kitts",
            "America/St_Lucia",
            "America/St_Thomas",
            "America/St_Vincent",
            "America/Swift_Current",
            "America/Tegucigalpa",
            "America/Thule",
            "America/Thunder_Bay",
            "America/Tijuana",
            "America/Toronto",
            "America/Tortola",
            "America/Vancouver",
            "America/Virgin",
            "America/Whitehorse",
            "America/Winnipeg",
            "America/Yakutat",
            "America/Yellowknife",
            "Antarctica/Casey",
            "Antarctica/Davis",
            "Antarctica/DumontDUrville",
            "Antarctica/Macquarie",
            "Antarctica/Mawson",
            "Antarctica/McMurdo",
            "Antarctica/Palmer",
            "Antarctica/Rothera",
            "Antarctica/South_Pole",
            "Antarctica/Syowa",
            "Antarctica/Troll",
            "Antarctica/Vostok",
            "Arctic/Longyearbyen",
            "Asia/Aden",
            "Asia/Almaty",
            "Asia/Amman",
            "Asia/Anadyr",
            "Asia/Aqtau",
            "Asia/Aqtobe",
            "Asia/Ashgabat",
            "Asia/Ashkhabad",
            "Asia/Atyrau",
            "Asia/Baghdad",
            "Asia/Bahrain",
            "Asia/Baku",
            "Asia/Bangkok",
            "Asia/Barnaul",
            "Asia/Beirut",
            "Asia/Bishkek",
            "Asia/Brunei",
            "Asia/Calcutta",
            "Asia/Chita",
            "Asia/Choibalsan",
            "Asia/Chongqing",
            "Asia/Chungking",
            "Asia/Colombo",
            "Asia/Dacca",
            "Asia/Damascus",
            "Asia/Dhaka",
            "Asia/Dili",
            "Asia/Dubai",
            "Asia/Dushanbe",
            "Asia/Famagusta",
            "Asia/Gaza",
            "Asia/Harbin",
            "Asia/Hebron",
            "Asia/Ho_Chi_Minh",
            "Asia/Hong_Kong",
            "Asia/Hovd",
            "Asia/Irkutsk",
            "Asia/Istanbul",
            "Asia/Jakarta",
            "Asia/Jayapura",
            "Asia/Jerusalem",
            "Asia/Kabul",
            "Asia/Kamchatka",
            "Asia/Karachi",
            "Asia/Kashgar",
            "Asia/Kathmandu",
            "Asia/Katmandu",
            "Asia/Khandyga",
            "Asia/Kolkata",
            "Asia/Krasnoyarsk",
            "Asia/Kuala_Lumpur",
            "Asia/Kuching",
            "Asia/Kuwait",
            "Asia/Macao",
            "Asia/Macau",
            "Asia/Magadan",
            "Asia/Makassar",
            "Asia/Manila",
            "Asia/Muscat",
            "Asia/Nicosia",
            "Asia/Novokuznetsk",
            "Asia/Novosibirsk",
            "Asia/Omsk",
            "Asia/Oral",
            "Asia/Phnom_Penh",
            "Asia/Pontianak",
            "Asia/Pyongyang",
            "Asia/Qatar",
            "Asia/Qostanay",
            "Asia/Qyzylorda",
            "Asia/Rangoon",
            "Asia/Riyadh",
            "Asia/Saigon",
            "Asia/Sakhalin",
            "Asia/Samarkand",
            "Asia/Seoul",
            "Asia/Shanghai",
            "Asia/Singapore",
            "Asia/Srednekolymsk",
            "Asia/Taipei",
            "Asia/Tashkent",
            "Asia/Tbilisi",
            "Asia/Tehran",
            "Asia/Tel_Aviv",
            "Asia/Thimbu",
            "Asia/Thimphu",
            "Asia/Tokyo",
            "Asia/Tomsk",
            "Asia/Ujung_Pandang",
            "Asia/Ulaanbaatar",
            "Asia/Ulan_Bator",
            "Asia/Urumqi",
            "Asia/Ust-Nera",
            "Asia/Vientiane",
            "Asia/Vladivostok",
            "Asia/Yakutsk",
            "Asia/Yangon",
            "Asia/Yekaterinburg",
            "Asia/Yerevan",
            "Atlantic/Azores",
            "Atlantic/Bermuda",
            "Atlantic/Canary",
            "Atlantic/Cape_Verde",
            "Atlantic/Faeroe",
            "Atlantic/Faroe",
            "Atlantic/Jan_Mayen",
            "Atlantic/Madeira",
            "Atlantic/Reykjavik",
            "Atlantic/South_Georgia",
            "Atlantic/St_Helena",
            "Atlantic/Stanley",
            "Australia/ACT",
            "Australia/Adelaide",
            "Australia/Brisbane",
            "Australia/Broken_Hill",
            "Australia/Canberra",
            "Australia/Currie",
            "Australia/Darwin",
            "Australia/Eucla",
            "Australia/Hobart",
            "Australia/LHI",
            "Australia/Lindeman",
            "Australia/Lord_Howe",
            "Australia/Melbourne",
            "Australia/NSW",
            "Australia/North",
            "Australia/Perth",
            "Australia/Queensland",
            "Australia/South",
            "Australia/Sydney",
            "Australia/Tasmania",
            "Australia/Victoria",
            "Australia/West",
            "Australia/Yancowinna",
            "Brazil/Acre",
            "Brazil/DeNoronha",
            "Brazil/East",
            "Brazil/West",
            "CET",
            "CST6CDT",
            "Canada/Atlantic",
            "Canada/Central",
            "Canada/Eastern",
            "Canada/Mountain",
            "Canada/Newfoundland",
            "Canada/Pacific",
            "Canada/Saskatchewan",
            "Canada/Yukon",
            "Chile/Continental",
            "Chile/EasterIsland",
            "Cuba",
            "EET",
            "EST",
            "EST5EDT",
            "Egypt",
            "Eire",
            "Etc/GMT",
            "Etc/GMT+0",
            "Etc/GMT+1",
            "Etc/GMT+10",
            "Etc/GMT+11",
            "Etc/GMT+12",
            "Etc/GMT+2",
            "Etc/GMT+3",
            "Etc/GMT+4",
            "Etc/GMT+5",
            "Etc/GMT+6",
            "Etc/GMT+7",
            "Etc/GMT+8",
            "Etc/GMT+9",
            "Etc/GMT-0",
            "Etc/GMT-1",
            "Etc/GMT-10",
            "Etc/GMT-11",
            "Etc/GMT-12",
            "Etc/GMT-13",
            "Etc/GMT-14",
            "Etc/GMT-2",
            "Etc/GMT-3",
            "Etc/GMT-4",
            "Etc/GMT-5",
            "Etc/GMT-6",
            "Etc/GMT-7",
            "Etc/GMT-8",
            "Etc/GMT-9",
            "Etc/GMT0",
            "Etc/Greenwich",
            "Etc/UCT",
            "Etc/UTC",
            "Etc/Universal",
            "Etc/Zulu",
            "Europe/Amsterdam",
            "Europe/Andorra",
            "Europe/Astrakhan",
            "Europe/Athens",
            "Europe/Belfast",
            "Europe/Belgrade",
            "Europe/Berlin",
            "Europe/Bratislava",
            "Europe/Brussels",
            "Europe/Bucharest",
            "Europe/Budapest",
            "Europe/Busingen",
            "Europe/Chisinau",
            "Europe/Copenhagen",
            "Europe/Dublin",
            "Europe/Gibraltar",
            "Europe/Guernsey",
            "Europe/Helsinki",
            "Europe/Isle_of_Man",
            "Europe/Istanbul",
            "Europe/Jersey",
            "Europe/Kaliningrad",
            "Europe/Kiev",
            "Europe/Kirov",
            "Europe/Kyiv",
            "Europe/Lisbon",
            "Europe/Ljubljana",
            "Europe/London",
            "Europe/Luxembourg",
            "Europe/Madrid",
            "Europe/Malta",
            "Europe/Mariehamn",
            "Europe/Minsk",
            "Europe/Monaco",
            "Europe/Moscow",
            "Europe/Nicosia",
            "Europe/Oslo",
            "Europe/Paris",
            "Europe/Podgorica",
            "Europe/Prague",
            "Europe/Riga",
            "Europe/Rome",
            "Europe/Samara",
            "Europe/San_Marino",
            "Europe/Sarajevo",
            "Europe/Saratov",
            "Europe/Simferopol",
            "Europe/Skopje",
            "Europe/Sofia",
            "Europe/Stockholm",
            "Europe/Tallinn",
            "Europe/Tirane",
            "Europe/Tiraspol",
            "Europe/Ulyanovsk",
            "Europe/Uzhgorod",
            "Europe/Vaduz",
            "Europe/Vatican",
            "Europe/Vienna",
            "Europe/Vilnius",
            "Europe/Volgograd",
            "Europe/Warsaw",
            "Europe/Zagreb",
            "Europe/Zaporozhye",
            "Europe/Zurich",
            "Factory",
            "GB",
            "GB-Eire",
            "GMT",
            "GMT+0",
            "GMT-0",
            "GMT0",
            "Greenwich",
            "HST",
            "Hongkong",
            "Iceland",
            "Indian/Antananarivo",
            "Indian/Chagos",
            "Indian/Christmas",
            "Indian/Cocos",
            "Indian/Comoro",
            "Indian/Kerguelen",
            "Indian/Mahe",
            "Indian/Maldives",
            "Indian/Mauritius",
            "Indian/Mayotte",
            "Indian/Reunion",
            "Iran",
            "Israel",
            "Jamaica",
            "Japan",
            "Kwajalein",
            "Libya",
            "MET",
            "MST",
            "MST7MDT",
            "Mexico/BajaNorte",
            "Mexico/BajaSur",
            "Mexico/General",
            "NZ",
            "NZ-CHAT",
            "Navajo",
            "PRC",
            "PST8PDT",
            "Pacific/Apia",
            "Pacific/Auckland",
            "Pacific/Bougainville",
            "Pacific/Chatham",
            "Pacific/Chuuk",
            "Pacific/Easter",
            "Pacific/Efate",
            "Pacific/Enderbury",
            "Pacific/Fakaofo",
            "Pacific/Fiji",
            "Pacific/Funafuti",
            "Pacific/Galapagos",
            "Pacific/Gambier",
            "Pacific/Guadalcanal",
            "Pacific/Guam",
            "Pacific/Honolulu",
            "Pacific/Johnston",
            "Pacific/Kanton",
            "Pacific/Kiritimati",
            "Pacific/Kosrae",
            "Pacific/Kwajalein",
            "Pacific/Majuro",
            "Pacific/Marquesas",
            "Pacific/Midway",
            "Pacific/Nauru",
            "Pacific/Niue",
            "Pacific/Norfolk",
            "Pacific/Noumea",
            "Pacific/Pago_Pago",
            "Pacific/Palau",
            "Pacific/Pitcairn",
            "Pacific/Pohnpei",
            "Pacific/Ponape",
            "Pacific/Port_Moresby",
            "Pacific/Rarotonga",
            "Pacific/Saipan",
            "Pacific/Samoa",
            "Pacific/Tahiti",
            "Pacific/Tarawa",
            "Pacific/Tongatapu",
            "Pacific/Truk",
            "Pacific/Wake",
            "Pacific/Wallis",
            "Pacific/Yap",
            "Poland",
            "Portugal",
            "ROC",
            "ROK",
            "Singapore",
            "Turkey",
            "UCT",
            "US/Alaska",
            "US/Aleutian",
            "US/Arizona",
            "US/Central",
            "US/East-Indiana",
            "US/Eastern",
            "US/Hawaii",
            "US/Indiana-Starke",
            "US/Michigan",
            "US/Mountain",
            "US/Pacific",
            "US/Pacific-New",
            "US/Samoa",
            "UTC",
            "Universal",
            "W-SU",
            "WET",
            "Zulu",
          ])
          .optional(),
      })
      .optional(),
    report_type: z.coerce.string(),
  })

  const postReportingReportRunsResponseValidator = responseValidationFactory(
    [["200", s_reporting_report_run]],
    s_error,
  )

  router.post(
    "postReportingReportRuns",
    "/v1/reporting/report_runs",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postReportingReportRunsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postReportingReportRuns(
        input,
        ctx,
      )

      ctx.body = postReportingReportRunsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getReportingReportRunsReportRunParamSchema = z.object({
    report_run: z.coerce.string(),
  })

  const getReportingReportRunsReportRunQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getReportingReportRunsReportRunBodySchema = z.object({}).optional()

  const getReportingReportRunsReportRunResponseValidator =
    responseValidationFactory([["200", s_reporting_report_run]], s_error)

  router.get(
    "getReportingReportRunsReportRun",
    "/v1/reporting/report_runs/:reportRun",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getReportingReportRunsReportRunParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getReportingReportRunsReportRunQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getReportingReportRunsReportRunBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getReportingReportRunsReportRun(input, ctx)

      ctx.body = getReportingReportRunsReportRunResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getReportingReportTypesQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getReportingReportTypesBodySchema = z.object({}).optional()

  const getReportingReportTypesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_reporting_report_type),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getReportingReportTypes",
    "/v1/reporting/report_types",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getReportingReportTypesQuerySchema, ctx.query),
        body: parseRequestInput(
          getReportingReportTypesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getReportingReportTypes(
        input,
        ctx,
      )

      ctx.body = getReportingReportTypesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getReportingReportTypesReportTypeParamSchema = z.object({
    report_type: z.coerce.string(),
  })

  const getReportingReportTypesReportTypeQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getReportingReportTypesReportTypeBodySchema = z.object({}).optional()

  const getReportingReportTypesReportTypeResponseValidator =
    responseValidationFactory([["200", s_reporting_report_type]], s_error)

  router.get(
    "getReportingReportTypesReportType",
    "/v1/reporting/report_types/:reportType",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getReportingReportTypesReportTypeParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getReportingReportTypesReportTypeQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getReportingReportTypesReportTypeBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getReportingReportTypesReportType(input, ctx)

      ctx.body = getReportingReportTypesReportTypeResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getReviewsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getReviewsBodySchema = z.object({}).optional()

  const getReviewsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_review)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getReviews", "/v1/reviews", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getReviewsQuerySchema, ctx.query),
      body: parseRequestInput(getReviewsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getReviews(input, ctx)

    ctx.body = getReviewsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getReviewsReviewParamSchema = z.object({ review: z.coerce.string() })

  const getReviewsReviewQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getReviewsReviewBodySchema = z.object({}).optional()

  const getReviewsReviewResponseValidator = responseValidationFactory(
    [["200", s_review]],
    s_error,
  )

  router.get("getReviewsReview", "/v1/reviews/:review", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getReviewsReviewParamSchema, ctx.params),
      query: parseRequestInput(getReviewsReviewQuerySchema, ctx.query),
      body: parseRequestInput(getReviewsReviewBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getReviewsReview(input, ctx)

    ctx.body = getReviewsReviewResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postReviewsReviewApproveParamSchema = z.object({
    review: z.coerce.string(),
  })

  const postReviewsReviewApproveBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postReviewsReviewApproveResponseValidator = responseValidationFactory(
    [["200", s_review]],
    s_error,
  )

  router.post(
    "postReviewsReviewApprove",
    "/v1/reviews/:review/approve",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postReviewsReviewApproveParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postReviewsReviewApproveBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postReviewsReviewApprove(
        input,
        ctx,
      )

      ctx.body = postReviewsReviewApproveResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getSetupAttemptsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    setup_intent: z.coerce.string(),
    starting_after: z.coerce.string().optional(),
  })

  const getSetupAttemptsBodySchema = z.object({}).optional()

  const getSetupAttemptsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_setup_attempt)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getSetupAttempts", "/v1/setup_attempts", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getSetupAttemptsQuerySchema, ctx.query),
      body: parseRequestInput(getSetupAttemptsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getSetupAttempts(input, ctx)

    ctx.body = getSetupAttemptsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getSetupIntentsQuerySchema = z.object({
    attach_to_self: z.coerce.boolean().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    customer: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    payment_method: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getSetupIntentsBodySchema = z.object({}).optional()

  const getSetupIntentsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_setup_intent)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getSetupIntents", "/v1/setup_intents", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getSetupIntentsQuerySchema, ctx.query),
      body: parseRequestInput(getSetupIntentsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getSetupIntents(input, ctx)

    ctx.body = getSetupIntentsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postSetupIntentsBodySchema = z
    .object({
      attach_to_self: z.coerce.boolean().optional(),
      automatic_payment_methods: z
        .object({
          allow_redirects: z.enum(["always", "never"]).optional(),
          enabled: z.coerce.boolean(),
        })
        .optional(),
      confirm: z.coerce.boolean().optional(),
      customer: z.coerce.string().optional(),
      description: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      flow_directions: z.array(z.enum(["inbound", "outbound"])).optional(),
      mandate_data: z.union([
        z.object({
          customer_acceptance: z.object({
            accepted_at: z.coerce.number().optional(),
            offline: z.object({}).optional(),
            online: z
              .object({
                ip_address: z.coerce.string(),
                user_agent: z.coerce.string(),
              })
              .optional(),
            type: z.enum(["offline", "online"]),
          }),
        }),
        z.enum([""]),
      ]),
      metadata: z.object({}).optional(),
      on_behalf_of: z.coerce.string().optional(),
      payment_method: z.coerce.string().optional(),
      payment_method_configuration: z.coerce.string().optional(),
      payment_method_data: z
        .object({
          acss_debit: z
            .object({
              account_number: z.coerce.string(),
              institution_number: z.coerce.string(),
              transit_number: z.coerce.string(),
            })
            .optional(),
          affirm: z.object({}).optional(),
          afterpay_clearpay: z.object({}).optional(),
          alipay: z.object({}).optional(),
          au_becs_debit: z
            .object({
              account_number: z.coerce.string(),
              bsb_number: z.coerce.string(),
            })
            .optional(),
          bacs_debit: z
            .object({
              account_number: z.coerce.string().optional(),
              sort_code: z.coerce.string().optional(),
            })
            .optional(),
          bancontact: z.object({}).optional(),
          billing_details: z
            .object({
              address: z.union([
                z.object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                }),
                z.enum([""]),
              ]),
              email: z.union([z.coerce.string(), z.enum([""])]),
              name: z.union([z.coerce.string(), z.enum([""])]),
              phone: z.union([z.coerce.string(), z.enum([""])]),
            })
            .optional(),
          blik: z.object({}).optional(),
          boleto: z.object({ tax_id: z.coerce.string() }).optional(),
          cashapp: z.object({}).optional(),
          customer_balance: z.object({}).optional(),
          eps: z
            .object({
              bank: z
                .enum([
                  "arzte_und_apotheker_bank",
                  "austrian_anadi_bank_ag",
                  "bank_austria",
                  "bankhaus_carl_spangler",
                  "bankhaus_schelhammer_und_schattera_ag",
                  "bawag_psk_ag",
                  "bks_bank_ag",
                  "brull_kallmus_bank_ag",
                  "btv_vier_lander_bank",
                  "capital_bank_grawe_gruppe_ag",
                  "deutsche_bank_ag",
                  "dolomitenbank",
                  "easybank_ag",
                  "erste_bank_und_sparkassen",
                  "hypo_alpeadriabank_international_ag",
                  "hypo_bank_burgenland_aktiengesellschaft",
                  "hypo_noe_lb_fur_niederosterreich_u_wien",
                  "hypo_oberosterreich_salzburg_steiermark",
                  "hypo_tirol_bank_ag",
                  "hypo_vorarlberg_bank_ag",
                  "marchfelder_bank",
                  "oberbank_ag",
                  "raiffeisen_bankengruppe_osterreich",
                  "schoellerbank_ag",
                  "sparda_bank_wien",
                  "volksbank_gruppe",
                  "volkskreditbank_ag",
                  "vr_bank_braunau",
                ])
                .optional(),
            })
            .optional(),
          fpx: z
            .object({
              bank: z.enum([
                "affin_bank",
                "agrobank",
                "alliance_bank",
                "ambank",
                "bank_islam",
                "bank_muamalat",
                "bank_of_china",
                "bank_rakyat",
                "bsn",
                "cimb",
                "deutsche_bank",
                "hong_leong_bank",
                "hsbc",
                "kfh",
                "maybank2e",
                "maybank2u",
                "ocbc",
                "pb_enterprise",
                "public_bank",
                "rhb",
                "standard_chartered",
                "uob",
              ]),
            })
            .optional(),
          giropay: z.object({}).optional(),
          grabpay: z.object({}).optional(),
          ideal: z
            .object({
              bank: z
                .enum([
                  "abn_amro",
                  "asn_bank",
                  "bunq",
                  "handelsbanken",
                  "ing",
                  "knab",
                  "moneyou",
                  "n26",
                  "rabobank",
                  "regiobank",
                  "revolut",
                  "sns_bank",
                  "triodos_bank",
                  "van_lanschot",
                  "yoursafe",
                ])
                .optional(),
            })
            .optional(),
          interac_present: z.object({}).optional(),
          klarna: z
            .object({
              dob: z
                .object({
                  day: z.coerce.number(),
                  month: z.coerce.number(),
                  year: z.coerce.number(),
                })
                .optional(),
            })
            .optional(),
          konbini: z.object({}).optional(),
          link: z.object({}).optional(),
          metadata: z.object({}).optional(),
          oxxo: z.object({}).optional(),
          p24: z
            .object({
              bank: z
                .enum([
                  "alior_bank",
                  "bank_millennium",
                  "bank_nowy_bfg_sa",
                  "bank_pekao_sa",
                  "banki_spbdzielcze",
                  "blik",
                  "bnp_paribas",
                  "boz",
                  "citi_handlowy",
                  "credit_agricole",
                  "envelobank",
                  "etransfer_pocztowy24",
                  "getin_bank",
                  "ideabank",
                  "ing",
                  "inteligo",
                  "mbank_mtransfer",
                  "nest_przelew",
                  "noble_pay",
                  "pbac_z_ipko",
                  "plus_bank",
                  "santander_przelew24",
                  "tmobile_usbugi_bankowe",
                  "toyota_bank",
                  "volkswagen_bank",
                ])
                .optional(),
            })
            .optional(),
          paynow: z.object({}).optional(),
          paypal: z.object({}).optional(),
          pix: z.object({}).optional(),
          promptpay: z.object({}).optional(),
          radar_options: z
            .object({ session: z.coerce.string().optional() })
            .optional(),
          sepa_debit: z.object({ iban: z.coerce.string() }).optional(),
          sofort: z
            .object({ country: z.enum(["AT", "BE", "DE", "ES", "IT", "NL"]) })
            .optional(),
          type: z.enum([
            "acss_debit",
            "affirm",
            "afterpay_clearpay",
            "alipay",
            "au_becs_debit",
            "bacs_debit",
            "bancontact",
            "blik",
            "boleto",
            "cashapp",
            "customer_balance",
            "eps",
            "fpx",
            "giropay",
            "grabpay",
            "ideal",
            "klarna",
            "konbini",
            "link",
            "oxxo",
            "p24",
            "paynow",
            "paypal",
            "pix",
            "promptpay",
            "sepa_debit",
            "sofort",
            "us_bank_account",
            "wechat_pay",
            "zip",
          ]),
          us_bank_account: z
            .object({
              account_holder_type: z.enum(["company", "individual"]).optional(),
              account_number: z.coerce.string().optional(),
              account_type: z.enum(["checking", "savings"]).optional(),
              financial_connections_account: z.coerce.string().optional(),
              routing_number: z.coerce.string().optional(),
            })
            .optional(),
          wechat_pay: z.object({}).optional(),
          zip: z.object({}).optional(),
        })
        .optional(),
      payment_method_options: z
        .object({
          acss_debit: z
            .object({
              currency: z.enum(["cad", "usd"]).optional(),
              mandate_options: z
                .object({
                  custom_mandate_url: z.union([
                    z.coerce.string(),
                    z.enum([""]),
                  ]),
                  default_for: z
                    .array(z.enum(["invoice", "subscription"]))
                    .optional(),
                  interval_description: z.coerce.string().optional(),
                  payment_schedule: z
                    .enum(["combined", "interval", "sporadic"])
                    .optional(),
                  transaction_type: z.enum(["business", "personal"]).optional(),
                })
                .optional(),
              verification_method: z
                .enum(["automatic", "instant", "microdeposits"])
                .optional(),
            })
            .optional(),
          card: z
            .object({
              mandate_options: z
                .object({
                  amount: z.coerce.number(),
                  amount_type: z.enum(["fixed", "maximum"]),
                  currency: z.coerce.string(),
                  description: z.coerce.string().optional(),
                  end_date: z.coerce.number().optional(),
                  interval: z.enum([
                    "day",
                    "month",
                    "sporadic",
                    "week",
                    "year",
                  ]),
                  interval_count: z.coerce.number().optional(),
                  reference: z.coerce.string(),
                  start_date: z.coerce.number(),
                  supported_types: z.array(z.enum(["india"])).optional(),
                })
                .optional(),
              network: z
                .enum([
                  "amex",
                  "cartes_bancaires",
                  "diners",
                  "discover",
                  "eftpos_au",
                  "interac",
                  "jcb",
                  "mastercard",
                  "unionpay",
                  "unknown",
                  "visa",
                ])
                .optional(),
              request_three_d_secure: z.enum(["any", "automatic"]).optional(),
            })
            .optional(),
          link: z.object({}).optional(),
          paypal: z
            .object({ billing_agreement_id: z.coerce.string().optional() })
            .optional(),
          sepa_debit: z
            .object({ mandate_options: z.object({}).optional() })
            .optional(),
          us_bank_account: z
            .object({
              financial_connections: z
                .object({
                  permissions: z
                    .array(
                      z.enum([
                        "balances",
                        "ownership",
                        "payment_method",
                        "transactions",
                      ]),
                    )
                    .optional(),
                  prefetch: z.array(z.enum(["balances"])).optional(),
                  return_url: z.coerce.string().optional(),
                })
                .optional(),
              networks: z
                .object({
                  requested: z
                    .array(z.enum(["ach", "us_domestic_wire"]))
                    .optional(),
                })
                .optional(),
              verification_method: z
                .enum(["automatic", "instant", "microdeposits"])
                .optional(),
            })
            .optional(),
        })
        .optional(),
      payment_method_types: z.array(z.coerce.string()).optional(),
      return_url: z.coerce.string().optional(),
      single_use: z
        .object({ amount: z.coerce.number(), currency: z.coerce.string() })
        .optional(),
      usage: z.enum(["off_session", "on_session"]).optional(),
      use_stripe_sdk: z.coerce.boolean().optional(),
    })
    .optional()

  const postSetupIntentsResponseValidator = responseValidationFactory(
    [["200", s_setup_intent]],
    s_error,
  )

  router.post("postSetupIntents", "/v1/setup_intents", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postSetupIntentsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postSetupIntents(input, ctx)

    ctx.body = postSetupIntentsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getSetupIntentsIntentParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const getSetupIntentsIntentQuerySchema = z.object({
    client_secret: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
  })

  const getSetupIntentsIntentBodySchema = z.object({}).optional()

  const getSetupIntentsIntentResponseValidator = responseValidationFactory(
    [["200", s_setup_intent]],
    s_error,
  )

  router.get(
    "getSetupIntentsIntent",
    "/v1/setup_intents/:intent",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getSetupIntentsIntentParamSchema, ctx.params),
        query: parseRequestInput(getSetupIntentsIntentQuerySchema, ctx.query),
        body: parseRequestInput(
          getSetupIntentsIntentBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getSetupIntentsIntent(
        input,
        ctx,
      )

      ctx.body = getSetupIntentsIntentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postSetupIntentsIntentParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const postSetupIntentsIntentBodySchema = z
    .object({
      attach_to_self: z.coerce.boolean().optional(),
      customer: z.coerce.string().optional(),
      description: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      flow_directions: z.array(z.enum(["inbound", "outbound"])).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      payment_method: z.coerce.string().optional(),
      payment_method_configuration: z.coerce.string().optional(),
      payment_method_data: z
        .object({
          acss_debit: z
            .object({
              account_number: z.coerce.string(),
              institution_number: z.coerce.string(),
              transit_number: z.coerce.string(),
            })
            .optional(),
          affirm: z.object({}).optional(),
          afterpay_clearpay: z.object({}).optional(),
          alipay: z.object({}).optional(),
          au_becs_debit: z
            .object({
              account_number: z.coerce.string(),
              bsb_number: z.coerce.string(),
            })
            .optional(),
          bacs_debit: z
            .object({
              account_number: z.coerce.string().optional(),
              sort_code: z.coerce.string().optional(),
            })
            .optional(),
          bancontact: z.object({}).optional(),
          billing_details: z
            .object({
              address: z.union([
                z.object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                }),
                z.enum([""]),
              ]),
              email: z.union([z.coerce.string(), z.enum([""])]),
              name: z.union([z.coerce.string(), z.enum([""])]),
              phone: z.union([z.coerce.string(), z.enum([""])]),
            })
            .optional(),
          blik: z.object({}).optional(),
          boleto: z.object({ tax_id: z.coerce.string() }).optional(),
          cashapp: z.object({}).optional(),
          customer_balance: z.object({}).optional(),
          eps: z
            .object({
              bank: z
                .enum([
                  "arzte_und_apotheker_bank",
                  "austrian_anadi_bank_ag",
                  "bank_austria",
                  "bankhaus_carl_spangler",
                  "bankhaus_schelhammer_und_schattera_ag",
                  "bawag_psk_ag",
                  "bks_bank_ag",
                  "brull_kallmus_bank_ag",
                  "btv_vier_lander_bank",
                  "capital_bank_grawe_gruppe_ag",
                  "deutsche_bank_ag",
                  "dolomitenbank",
                  "easybank_ag",
                  "erste_bank_und_sparkassen",
                  "hypo_alpeadriabank_international_ag",
                  "hypo_bank_burgenland_aktiengesellschaft",
                  "hypo_noe_lb_fur_niederosterreich_u_wien",
                  "hypo_oberosterreich_salzburg_steiermark",
                  "hypo_tirol_bank_ag",
                  "hypo_vorarlberg_bank_ag",
                  "marchfelder_bank",
                  "oberbank_ag",
                  "raiffeisen_bankengruppe_osterreich",
                  "schoellerbank_ag",
                  "sparda_bank_wien",
                  "volksbank_gruppe",
                  "volkskreditbank_ag",
                  "vr_bank_braunau",
                ])
                .optional(),
            })
            .optional(),
          fpx: z
            .object({
              bank: z.enum([
                "affin_bank",
                "agrobank",
                "alliance_bank",
                "ambank",
                "bank_islam",
                "bank_muamalat",
                "bank_of_china",
                "bank_rakyat",
                "bsn",
                "cimb",
                "deutsche_bank",
                "hong_leong_bank",
                "hsbc",
                "kfh",
                "maybank2e",
                "maybank2u",
                "ocbc",
                "pb_enterprise",
                "public_bank",
                "rhb",
                "standard_chartered",
                "uob",
              ]),
            })
            .optional(),
          giropay: z.object({}).optional(),
          grabpay: z.object({}).optional(),
          ideal: z
            .object({
              bank: z
                .enum([
                  "abn_amro",
                  "asn_bank",
                  "bunq",
                  "handelsbanken",
                  "ing",
                  "knab",
                  "moneyou",
                  "n26",
                  "rabobank",
                  "regiobank",
                  "revolut",
                  "sns_bank",
                  "triodos_bank",
                  "van_lanschot",
                  "yoursafe",
                ])
                .optional(),
            })
            .optional(),
          interac_present: z.object({}).optional(),
          klarna: z
            .object({
              dob: z
                .object({
                  day: z.coerce.number(),
                  month: z.coerce.number(),
                  year: z.coerce.number(),
                })
                .optional(),
            })
            .optional(),
          konbini: z.object({}).optional(),
          link: z.object({}).optional(),
          metadata: z.object({}).optional(),
          oxxo: z.object({}).optional(),
          p24: z
            .object({
              bank: z
                .enum([
                  "alior_bank",
                  "bank_millennium",
                  "bank_nowy_bfg_sa",
                  "bank_pekao_sa",
                  "banki_spbdzielcze",
                  "blik",
                  "bnp_paribas",
                  "boz",
                  "citi_handlowy",
                  "credit_agricole",
                  "envelobank",
                  "etransfer_pocztowy24",
                  "getin_bank",
                  "ideabank",
                  "ing",
                  "inteligo",
                  "mbank_mtransfer",
                  "nest_przelew",
                  "noble_pay",
                  "pbac_z_ipko",
                  "plus_bank",
                  "santander_przelew24",
                  "tmobile_usbugi_bankowe",
                  "toyota_bank",
                  "volkswagen_bank",
                ])
                .optional(),
            })
            .optional(),
          paynow: z.object({}).optional(),
          paypal: z.object({}).optional(),
          pix: z.object({}).optional(),
          promptpay: z.object({}).optional(),
          radar_options: z
            .object({ session: z.coerce.string().optional() })
            .optional(),
          sepa_debit: z.object({ iban: z.coerce.string() }).optional(),
          sofort: z
            .object({ country: z.enum(["AT", "BE", "DE", "ES", "IT", "NL"]) })
            .optional(),
          type: z.enum([
            "acss_debit",
            "affirm",
            "afterpay_clearpay",
            "alipay",
            "au_becs_debit",
            "bacs_debit",
            "bancontact",
            "blik",
            "boleto",
            "cashapp",
            "customer_balance",
            "eps",
            "fpx",
            "giropay",
            "grabpay",
            "ideal",
            "klarna",
            "konbini",
            "link",
            "oxxo",
            "p24",
            "paynow",
            "paypal",
            "pix",
            "promptpay",
            "sepa_debit",
            "sofort",
            "us_bank_account",
            "wechat_pay",
            "zip",
          ]),
          us_bank_account: z
            .object({
              account_holder_type: z.enum(["company", "individual"]).optional(),
              account_number: z.coerce.string().optional(),
              account_type: z.enum(["checking", "savings"]).optional(),
              financial_connections_account: z.coerce.string().optional(),
              routing_number: z.coerce.string().optional(),
            })
            .optional(),
          wechat_pay: z.object({}).optional(),
          zip: z.object({}).optional(),
        })
        .optional(),
      payment_method_options: z
        .object({
          acss_debit: z
            .object({
              currency: z.enum(["cad", "usd"]).optional(),
              mandate_options: z
                .object({
                  custom_mandate_url: z.union([
                    z.coerce.string(),
                    z.enum([""]),
                  ]),
                  default_for: z
                    .array(z.enum(["invoice", "subscription"]))
                    .optional(),
                  interval_description: z.coerce.string().optional(),
                  payment_schedule: z
                    .enum(["combined", "interval", "sporadic"])
                    .optional(),
                  transaction_type: z.enum(["business", "personal"]).optional(),
                })
                .optional(),
              verification_method: z
                .enum(["automatic", "instant", "microdeposits"])
                .optional(),
            })
            .optional(),
          card: z
            .object({
              mandate_options: z
                .object({
                  amount: z.coerce.number(),
                  amount_type: z.enum(["fixed", "maximum"]),
                  currency: z.coerce.string(),
                  description: z.coerce.string().optional(),
                  end_date: z.coerce.number().optional(),
                  interval: z.enum([
                    "day",
                    "month",
                    "sporadic",
                    "week",
                    "year",
                  ]),
                  interval_count: z.coerce.number().optional(),
                  reference: z.coerce.string(),
                  start_date: z.coerce.number(),
                  supported_types: z.array(z.enum(["india"])).optional(),
                })
                .optional(),
              network: z
                .enum([
                  "amex",
                  "cartes_bancaires",
                  "diners",
                  "discover",
                  "eftpos_au",
                  "interac",
                  "jcb",
                  "mastercard",
                  "unionpay",
                  "unknown",
                  "visa",
                ])
                .optional(),
              request_three_d_secure: z.enum(["any", "automatic"]).optional(),
            })
            .optional(),
          link: z.object({}).optional(),
          paypal: z
            .object({ billing_agreement_id: z.coerce.string().optional() })
            .optional(),
          sepa_debit: z
            .object({ mandate_options: z.object({}).optional() })
            .optional(),
          us_bank_account: z
            .object({
              financial_connections: z
                .object({
                  permissions: z
                    .array(
                      z.enum([
                        "balances",
                        "ownership",
                        "payment_method",
                        "transactions",
                      ]),
                    )
                    .optional(),
                  prefetch: z.array(z.enum(["balances"])).optional(),
                  return_url: z.coerce.string().optional(),
                })
                .optional(),
              networks: z
                .object({
                  requested: z
                    .array(z.enum(["ach", "us_domestic_wire"]))
                    .optional(),
                })
                .optional(),
              verification_method: z
                .enum(["automatic", "instant", "microdeposits"])
                .optional(),
            })
            .optional(),
        })
        .optional(),
      payment_method_types: z.array(z.coerce.string()).optional(),
    })
    .optional()

  const postSetupIntentsIntentResponseValidator = responseValidationFactory(
    [["200", s_setup_intent]],
    s_error,
  )

  router.post(
    "postSetupIntentsIntent",
    "/v1/setup_intents/:intent",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSetupIntentsIntentParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSetupIntentsIntentBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postSetupIntentsIntent(
        input,
        ctx,
      )

      ctx.body = postSetupIntentsIntentResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postSetupIntentsIntentCancelParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const postSetupIntentsIntentCancelBodySchema = z
    .object({
      cancellation_reason: z
        .enum(["abandoned", "duplicate", "requested_by_customer"])
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
    })
    .optional()

  const postSetupIntentsIntentCancelResponseValidator =
    responseValidationFactory([["200", s_setup_intent]], s_error)

  router.post(
    "postSetupIntentsIntentCancel",
    "/v1/setup_intents/:intent/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSetupIntentsIntentCancelParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSetupIntentsIntentCancelBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postSetupIntentsIntentCancel(input, ctx)

      ctx.body = postSetupIntentsIntentCancelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postSetupIntentsIntentConfirmParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const postSetupIntentsIntentConfirmBodySchema = z
    .object({
      client_secret: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      mandate_data: z.union([
        z.object({
          customer_acceptance: z.object({
            accepted_at: z.coerce.number().optional(),
            offline: z.object({}).optional(),
            online: z
              .object({
                ip_address: z.coerce.string(),
                user_agent: z.coerce.string(),
              })
              .optional(),
            type: z.enum(["offline", "online"]),
          }),
        }),
        z.enum([""]),
        z.object({
          customer_acceptance: z.object({
            online: z.object({
              ip_address: z.coerce.string().optional(),
              user_agent: z.coerce.string().optional(),
            }),
            type: z.enum(["online"]),
          }),
        }),
      ]),
      payment_method: z.coerce.string().optional(),
      payment_method_data: z
        .object({
          acss_debit: z
            .object({
              account_number: z.coerce.string(),
              institution_number: z.coerce.string(),
              transit_number: z.coerce.string(),
            })
            .optional(),
          affirm: z.object({}).optional(),
          afterpay_clearpay: z.object({}).optional(),
          alipay: z.object({}).optional(),
          au_becs_debit: z
            .object({
              account_number: z.coerce.string(),
              bsb_number: z.coerce.string(),
            })
            .optional(),
          bacs_debit: z
            .object({
              account_number: z.coerce.string().optional(),
              sort_code: z.coerce.string().optional(),
            })
            .optional(),
          bancontact: z.object({}).optional(),
          billing_details: z
            .object({
              address: z.union([
                z.object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                }),
                z.enum([""]),
              ]),
              email: z.union([z.coerce.string(), z.enum([""])]),
              name: z.union([z.coerce.string(), z.enum([""])]),
              phone: z.union([z.coerce.string(), z.enum([""])]),
            })
            .optional(),
          blik: z.object({}).optional(),
          boleto: z.object({ tax_id: z.coerce.string() }).optional(),
          cashapp: z.object({}).optional(),
          customer_balance: z.object({}).optional(),
          eps: z
            .object({
              bank: z
                .enum([
                  "arzte_und_apotheker_bank",
                  "austrian_anadi_bank_ag",
                  "bank_austria",
                  "bankhaus_carl_spangler",
                  "bankhaus_schelhammer_und_schattera_ag",
                  "bawag_psk_ag",
                  "bks_bank_ag",
                  "brull_kallmus_bank_ag",
                  "btv_vier_lander_bank",
                  "capital_bank_grawe_gruppe_ag",
                  "deutsche_bank_ag",
                  "dolomitenbank",
                  "easybank_ag",
                  "erste_bank_und_sparkassen",
                  "hypo_alpeadriabank_international_ag",
                  "hypo_bank_burgenland_aktiengesellschaft",
                  "hypo_noe_lb_fur_niederosterreich_u_wien",
                  "hypo_oberosterreich_salzburg_steiermark",
                  "hypo_tirol_bank_ag",
                  "hypo_vorarlberg_bank_ag",
                  "marchfelder_bank",
                  "oberbank_ag",
                  "raiffeisen_bankengruppe_osterreich",
                  "schoellerbank_ag",
                  "sparda_bank_wien",
                  "volksbank_gruppe",
                  "volkskreditbank_ag",
                  "vr_bank_braunau",
                ])
                .optional(),
            })
            .optional(),
          fpx: z
            .object({
              bank: z.enum([
                "affin_bank",
                "agrobank",
                "alliance_bank",
                "ambank",
                "bank_islam",
                "bank_muamalat",
                "bank_of_china",
                "bank_rakyat",
                "bsn",
                "cimb",
                "deutsche_bank",
                "hong_leong_bank",
                "hsbc",
                "kfh",
                "maybank2e",
                "maybank2u",
                "ocbc",
                "pb_enterprise",
                "public_bank",
                "rhb",
                "standard_chartered",
                "uob",
              ]),
            })
            .optional(),
          giropay: z.object({}).optional(),
          grabpay: z.object({}).optional(),
          ideal: z
            .object({
              bank: z
                .enum([
                  "abn_amro",
                  "asn_bank",
                  "bunq",
                  "handelsbanken",
                  "ing",
                  "knab",
                  "moneyou",
                  "n26",
                  "rabobank",
                  "regiobank",
                  "revolut",
                  "sns_bank",
                  "triodos_bank",
                  "van_lanschot",
                  "yoursafe",
                ])
                .optional(),
            })
            .optional(),
          interac_present: z.object({}).optional(),
          klarna: z
            .object({
              dob: z
                .object({
                  day: z.coerce.number(),
                  month: z.coerce.number(),
                  year: z.coerce.number(),
                })
                .optional(),
            })
            .optional(),
          konbini: z.object({}).optional(),
          link: z.object({}).optional(),
          metadata: z.object({}).optional(),
          oxxo: z.object({}).optional(),
          p24: z
            .object({
              bank: z
                .enum([
                  "alior_bank",
                  "bank_millennium",
                  "bank_nowy_bfg_sa",
                  "bank_pekao_sa",
                  "banki_spbdzielcze",
                  "blik",
                  "bnp_paribas",
                  "boz",
                  "citi_handlowy",
                  "credit_agricole",
                  "envelobank",
                  "etransfer_pocztowy24",
                  "getin_bank",
                  "ideabank",
                  "ing",
                  "inteligo",
                  "mbank_mtransfer",
                  "nest_przelew",
                  "noble_pay",
                  "pbac_z_ipko",
                  "plus_bank",
                  "santander_przelew24",
                  "tmobile_usbugi_bankowe",
                  "toyota_bank",
                  "volkswagen_bank",
                ])
                .optional(),
            })
            .optional(),
          paynow: z.object({}).optional(),
          paypal: z.object({}).optional(),
          pix: z.object({}).optional(),
          promptpay: z.object({}).optional(),
          radar_options: z
            .object({ session: z.coerce.string().optional() })
            .optional(),
          sepa_debit: z.object({ iban: z.coerce.string() }).optional(),
          sofort: z
            .object({ country: z.enum(["AT", "BE", "DE", "ES", "IT", "NL"]) })
            .optional(),
          type: z.enum([
            "acss_debit",
            "affirm",
            "afterpay_clearpay",
            "alipay",
            "au_becs_debit",
            "bacs_debit",
            "bancontact",
            "blik",
            "boleto",
            "cashapp",
            "customer_balance",
            "eps",
            "fpx",
            "giropay",
            "grabpay",
            "ideal",
            "klarna",
            "konbini",
            "link",
            "oxxo",
            "p24",
            "paynow",
            "paypal",
            "pix",
            "promptpay",
            "sepa_debit",
            "sofort",
            "us_bank_account",
            "wechat_pay",
            "zip",
          ]),
          us_bank_account: z
            .object({
              account_holder_type: z.enum(["company", "individual"]).optional(),
              account_number: z.coerce.string().optional(),
              account_type: z.enum(["checking", "savings"]).optional(),
              financial_connections_account: z.coerce.string().optional(),
              routing_number: z.coerce.string().optional(),
            })
            .optional(),
          wechat_pay: z.object({}).optional(),
          zip: z.object({}).optional(),
        })
        .optional(),
      payment_method_options: z
        .object({
          acss_debit: z
            .object({
              currency: z.enum(["cad", "usd"]).optional(),
              mandate_options: z
                .object({
                  custom_mandate_url: z.union([
                    z.coerce.string(),
                    z.enum([""]),
                  ]),
                  default_for: z
                    .array(z.enum(["invoice", "subscription"]))
                    .optional(),
                  interval_description: z.coerce.string().optional(),
                  payment_schedule: z
                    .enum(["combined", "interval", "sporadic"])
                    .optional(),
                  transaction_type: z.enum(["business", "personal"]).optional(),
                })
                .optional(),
              verification_method: z
                .enum(["automatic", "instant", "microdeposits"])
                .optional(),
            })
            .optional(),
          card: z
            .object({
              mandate_options: z
                .object({
                  amount: z.coerce.number(),
                  amount_type: z.enum(["fixed", "maximum"]),
                  currency: z.coerce.string(),
                  description: z.coerce.string().optional(),
                  end_date: z.coerce.number().optional(),
                  interval: z.enum([
                    "day",
                    "month",
                    "sporadic",
                    "week",
                    "year",
                  ]),
                  interval_count: z.coerce.number().optional(),
                  reference: z.coerce.string(),
                  start_date: z.coerce.number(),
                  supported_types: z.array(z.enum(["india"])).optional(),
                })
                .optional(),
              network: z
                .enum([
                  "amex",
                  "cartes_bancaires",
                  "diners",
                  "discover",
                  "eftpos_au",
                  "interac",
                  "jcb",
                  "mastercard",
                  "unionpay",
                  "unknown",
                  "visa",
                ])
                .optional(),
              request_three_d_secure: z.enum(["any", "automatic"]).optional(),
            })
            .optional(),
          link: z.object({}).optional(),
          paypal: z
            .object({ billing_agreement_id: z.coerce.string().optional() })
            .optional(),
          sepa_debit: z
            .object({ mandate_options: z.object({}).optional() })
            .optional(),
          us_bank_account: z
            .object({
              financial_connections: z
                .object({
                  permissions: z
                    .array(
                      z.enum([
                        "balances",
                        "ownership",
                        "payment_method",
                        "transactions",
                      ]),
                    )
                    .optional(),
                  prefetch: z.array(z.enum(["balances"])).optional(),
                  return_url: z.coerce.string().optional(),
                })
                .optional(),
              networks: z
                .object({
                  requested: z
                    .array(z.enum(["ach", "us_domestic_wire"]))
                    .optional(),
                })
                .optional(),
              verification_method: z
                .enum(["automatic", "instant", "microdeposits"])
                .optional(),
            })
            .optional(),
        })
        .optional(),
      return_url: z.coerce.string().optional(),
      use_stripe_sdk: z.coerce.boolean().optional(),
    })
    .optional()

  const postSetupIntentsIntentConfirmResponseValidator =
    responseValidationFactory([["200", s_setup_intent]], s_error)

  router.post(
    "postSetupIntentsIntentConfirm",
    "/v1/setup_intents/:intent/confirm",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSetupIntentsIntentConfirmParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSetupIntentsIntentConfirmBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postSetupIntentsIntentConfirm(input, ctx)

      ctx.body = postSetupIntentsIntentConfirmResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postSetupIntentsIntentVerifyMicrodepositsParamSchema = z.object({
    intent: z.coerce.string(),
  })

  const postSetupIntentsIntentVerifyMicrodepositsBodySchema = z
    .object({
      amounts: z.array(z.coerce.number()).optional(),
      client_secret: z.coerce.string().optional(),
      descriptor_code: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
    })
    .optional()

  const postSetupIntentsIntentVerifyMicrodepositsResponseValidator =
    responseValidationFactory([["200", s_setup_intent]], s_error)

  router.post(
    "postSetupIntentsIntentVerifyMicrodeposits",
    "/v1/setup_intents/:intent/verify_microdeposits",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSetupIntentsIntentVerifyMicrodepositsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSetupIntentsIntentVerifyMicrodepositsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postSetupIntentsIntentVerifyMicrodeposits(
          input,
          ctx,
        )

      ctx.body = postSetupIntentsIntentVerifyMicrodepositsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getShippingRatesQuerySchema = z.object({
    active: z.coerce.boolean().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    currency: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getShippingRatesBodySchema = z.object({}).optional()

  const getShippingRatesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_shipping_rate),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getShippingRates", "/v1/shipping_rates", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getShippingRatesQuerySchema, ctx.query),
      body: parseRequestInput(getShippingRatesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getShippingRates(input, ctx)

    ctx.body = getShippingRatesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postShippingRatesBodySchema = z.object({
    delivery_estimate: z
      .object({
        maximum: z
          .object({
            unit: z.enum(["business_day", "day", "hour", "month", "week"]),
            value: z.coerce.number(),
          })
          .optional(),
        minimum: z
          .object({
            unit: z.enum(["business_day", "day", "hour", "month", "week"]),
            value: z.coerce.number(),
          })
          .optional(),
      })
      .optional(),
    display_name: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
    fixed_amount: z
      .object({
        amount: z.coerce.number(),
        currency: z.coerce.string(),
        currency_options: z.object({}).optional(),
      })
      .optional(),
    metadata: z.object({}).optional(),
    tax_behavior: z.enum(["exclusive", "inclusive", "unspecified"]).optional(),
    tax_code: z.coerce.string().optional(),
    type: z.enum(["fixed_amount"]).optional(),
  })

  const postShippingRatesResponseValidator = responseValidationFactory(
    [["200", s_shipping_rate]],
    s_error,
  )

  router.post("postShippingRates", "/v1/shipping_rates", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postShippingRatesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postShippingRates(input, ctx)

    ctx.body = postShippingRatesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getShippingRatesShippingRateTokenParamSchema = z.object({
    shipping_rate_token: z.coerce.string(),
  })

  const getShippingRatesShippingRateTokenQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getShippingRatesShippingRateTokenBodySchema = z.object({}).optional()

  const getShippingRatesShippingRateTokenResponseValidator =
    responseValidationFactory([["200", s_shipping_rate]], s_error)

  router.get(
    "getShippingRatesShippingRateToken",
    "/v1/shipping_rates/:shippingRateToken",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getShippingRatesShippingRateTokenParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getShippingRatesShippingRateTokenQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getShippingRatesShippingRateTokenBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getShippingRatesShippingRateToken(input, ctx)

      ctx.body = getShippingRatesShippingRateTokenResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postShippingRatesShippingRateTokenParamSchema = z.object({
    shipping_rate_token: z.coerce.string(),
  })

  const postShippingRatesShippingRateTokenBodySchema = z
    .object({
      active: z.coerce.boolean().optional(),
      expand: z.array(z.coerce.string()).optional(),
      fixed_amount: z
        .object({ currency_options: z.object({}).optional() })
        .optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      tax_behavior: z
        .enum(["exclusive", "inclusive", "unspecified"])
        .optional(),
    })
    .optional()

  const postShippingRatesShippingRateTokenResponseValidator =
    responseValidationFactory([["200", s_shipping_rate]], s_error)

  router.post(
    "postShippingRatesShippingRateToken",
    "/v1/shipping_rates/:shippingRateToken",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postShippingRatesShippingRateTokenParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postShippingRatesShippingRateTokenBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postShippingRatesShippingRateToken(input, ctx)

      ctx.body = postShippingRatesShippingRateTokenResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getSigmaScheduledQueryRunsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getSigmaScheduledQueryRunsBodySchema = z.object({}).optional()

  const getSigmaScheduledQueryRunsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_scheduled_query_run)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getSigmaScheduledQueryRuns",
    "/v1/sigma/scheduled_query_runs",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getSigmaScheduledQueryRunsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getSigmaScheduledQueryRunsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getSigmaScheduledQueryRuns(
        input,
        ctx,
      )

      ctx.body = getSigmaScheduledQueryRunsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getSigmaScheduledQueryRunsScheduledQueryRunParamSchema = z.object({
    scheduled_query_run: z.coerce.string(),
  })

  const getSigmaScheduledQueryRunsScheduledQueryRunQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getSigmaScheduledQueryRunsScheduledQueryRunBodySchema = z
    .object({})
    .optional()

  const getSigmaScheduledQueryRunsScheduledQueryRunResponseValidator =
    responseValidationFactory([["200", s_scheduled_query_run]], s_error)

  router.get(
    "getSigmaScheduledQueryRunsScheduledQueryRun",
    "/v1/sigma/scheduled_query_runs/:scheduledQueryRun",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getSigmaScheduledQueryRunsScheduledQueryRunParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getSigmaScheduledQueryRunsScheduledQueryRunQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getSigmaScheduledQueryRunsScheduledQueryRunBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getSigmaScheduledQueryRunsScheduledQueryRun(
          input,
          ctx,
        )

      ctx.body = getSigmaScheduledQueryRunsScheduledQueryRunResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postSourcesBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      currency: z.coerce.string().optional(),
      customer: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      flow: z
        .enum(["code_verification", "none", "receiver", "redirect"])
        .optional(),
      mandate: z
        .object({
          acceptance: z
            .object({
              date: z.coerce.number().optional(),
              ip: z.coerce.string().optional(),
              offline: z
                .object({ contact_email: z.coerce.string() })
                .optional(),
              online: z
                .object({
                  date: z.coerce.number().optional(),
                  ip: z.coerce.string().optional(),
                  user_agent: z.coerce.string().optional(),
                })
                .optional(),
              status: z.enum(["accepted", "pending", "refused", "revoked"]),
              type: z.enum(["offline", "online"]).optional(),
              user_agent: z.coerce.string().optional(),
            })
            .optional(),
          amount: z.union([z.coerce.number(), z.enum([""])]),
          currency: z.coerce.string().optional(),
          interval: z.enum(["one_time", "scheduled", "variable"]).optional(),
          notification_method: z
            .enum([
              "deprecated_none",
              "email",
              "manual",
              "none",
              "stripe_email",
            ])
            .optional(),
        })
        .optional(),
      metadata: z.object({}).optional(),
      original_source: z.coerce.string().optional(),
      owner: z
        .object({
          address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          email: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          phone: z.coerce.string().optional(),
        })
        .optional(),
      receiver: z
        .object({
          refund_attributes_method: z
            .enum(["email", "manual", "none"])
            .optional(),
        })
        .optional(),
      redirect: z.object({ return_url: z.coerce.string() }).optional(),
      source_order: z
        .object({
          items: z
            .array(
              z.object({
                amount: z.coerce.number().optional(),
                currency: z.coerce.string().optional(),
                description: z.coerce.string().optional(),
                parent: z.coerce.string().optional(),
                quantity: z.coerce.number().optional(),
                type: z.enum(["discount", "shipping", "sku", "tax"]).optional(),
              }),
            )
            .optional(),
          shipping: z
            .object({
              address: z.object({
                city: z.coerce.string().optional(),
                country: z.coerce.string().optional(),
                line1: z.coerce.string(),
                line2: z.coerce.string().optional(),
                postal_code: z.coerce.string().optional(),
                state: z.coerce.string().optional(),
              }),
              carrier: z.coerce.string().optional(),
              name: z.coerce.string().optional(),
              phone: z.coerce.string().optional(),
              tracking_number: z.coerce.string().optional(),
            })
            .optional(),
        })
        .optional(),
      statement_descriptor: z.coerce.string().optional(),
      token: z.coerce.string().optional(),
      type: z.coerce.string().optional(),
      usage: z.enum(["reusable", "single_use"]).optional(),
    })
    .optional()

  const postSourcesResponseValidator = responseValidationFactory(
    [["200", s_source]],
    s_error,
  )

  router.post("postSources", "/v1/sources", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postSourcesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postSources(input, ctx)

    ctx.body = postSourcesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getSourcesSourceParamSchema = z.object({ source: z.coerce.string() })

  const getSourcesSourceQuerySchema = z.object({
    client_secret: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
  })

  const getSourcesSourceBodySchema = z.object({}).optional()

  const getSourcesSourceResponseValidator = responseValidationFactory(
    [["200", s_source]],
    s_error,
  )

  router.get("getSourcesSource", "/v1/sources/:source", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getSourcesSourceParamSchema, ctx.params),
      query: parseRequestInput(getSourcesSourceQuerySchema, ctx.query),
      body: parseRequestInput(getSourcesSourceBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getSourcesSource(input, ctx)

    ctx.body = getSourcesSourceResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postSourcesSourceParamSchema = z.object({ source: z.coerce.string() })

  const postSourcesSourceBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      expand: z.array(z.coerce.string()).optional(),
      mandate: z
        .object({
          acceptance: z
            .object({
              date: z.coerce.number().optional(),
              ip: z.coerce.string().optional(),
              offline: z
                .object({ contact_email: z.coerce.string() })
                .optional(),
              online: z
                .object({
                  date: z.coerce.number().optional(),
                  ip: z.coerce.string().optional(),
                  user_agent: z.coerce.string().optional(),
                })
                .optional(),
              status: z.enum(["accepted", "pending", "refused", "revoked"]),
              type: z.enum(["offline", "online"]).optional(),
              user_agent: z.coerce.string().optional(),
            })
            .optional(),
          amount: z.union([z.coerce.number(), z.enum([""])]),
          currency: z.coerce.string().optional(),
          interval: z.enum(["one_time", "scheduled", "variable"]).optional(),
          notification_method: z
            .enum([
              "deprecated_none",
              "email",
              "manual",
              "none",
              "stripe_email",
            ])
            .optional(),
        })
        .optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      owner: z
        .object({
          address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          email: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          phone: z.coerce.string().optional(),
        })
        .optional(),
      source_order: z
        .object({
          items: z
            .array(
              z.object({
                amount: z.coerce.number().optional(),
                currency: z.coerce.string().optional(),
                description: z.coerce.string().optional(),
                parent: z.coerce.string().optional(),
                quantity: z.coerce.number().optional(),
                type: z.enum(["discount", "shipping", "sku", "tax"]).optional(),
              }),
            )
            .optional(),
          shipping: z
            .object({
              address: z.object({
                city: z.coerce.string().optional(),
                country: z.coerce.string().optional(),
                line1: z.coerce.string(),
                line2: z.coerce.string().optional(),
                postal_code: z.coerce.string().optional(),
                state: z.coerce.string().optional(),
              }),
              carrier: z.coerce.string().optional(),
              name: z.coerce.string().optional(),
              phone: z.coerce.string().optional(),
              tracking_number: z.coerce.string().optional(),
            })
            .optional(),
        })
        .optional(),
    })
    .optional()

  const postSourcesSourceResponseValidator = responseValidationFactory(
    [["200", s_source]],
    s_error,
  )

  router.post("postSourcesSource", "/v1/sources/:source", async (ctx, next) => {
    const input = {
      params: parseRequestInput(postSourcesSourceParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(postSourcesSourceBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postSourcesSource(input, ctx)

    ctx.body = postSourcesSourceResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getSourcesSourceMandateNotificationsMandateNotificationParamSchema =
    z.object({
      mandate_notification: z.coerce.string(),
      source: z.coerce.string(),
    })

  const getSourcesSourceMandateNotificationsMandateNotificationQuerySchema =
    z.object({ expand: z.array(z.coerce.string()).optional() })

  const getSourcesSourceMandateNotificationsMandateNotificationBodySchema = z
    .object({})
    .optional()

  const getSourcesSourceMandateNotificationsMandateNotificationResponseValidator =
    responseValidationFactory([["200", s_source_mandate_notification]], s_error)

  router.get(
    "getSourcesSourceMandateNotificationsMandateNotification",
    "/v1/sources/:source/mandate_notifications/:mandateNotification",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getSourcesSourceMandateNotificationsMandateNotificationParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getSourcesSourceMandateNotificationsMandateNotificationQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getSourcesSourceMandateNotificationsMandateNotificationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getSourcesSourceMandateNotificationsMandateNotification(
          input,
          ctx,
        )

      ctx.body =
        getSourcesSourceMandateNotificationsMandateNotificationResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getSourcesSourceSourceTransactionsParamSchema = z.object({
    source: z.coerce.string(),
  })

  const getSourcesSourceSourceTransactionsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getSourcesSourceSourceTransactionsBodySchema = z.object({}).optional()

  const getSourcesSourceSourceTransactionsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(s_source_transaction),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getSourcesSourceSourceTransactions",
    "/v1/sources/:source/source_transactions",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getSourcesSourceSourceTransactionsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getSourcesSourceSourceTransactionsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getSourcesSourceSourceTransactionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getSourcesSourceSourceTransactions(input, ctx)

      ctx.body = getSourcesSourceSourceTransactionsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getSourcesSourceSourceTransactionsSourceTransactionParamSchema =
    z.object({
      source: z.coerce.string(),
      source_transaction: z.coerce.string(),
    })

  const getSourcesSourceSourceTransactionsSourceTransactionQuerySchema =
    z.object({ expand: z.array(z.coerce.string()).optional() })

  const getSourcesSourceSourceTransactionsSourceTransactionBodySchema = z
    .object({})
    .optional()

  const getSourcesSourceSourceTransactionsSourceTransactionResponseValidator =
    responseValidationFactory([["200", s_source_transaction]], s_error)

  router.get(
    "getSourcesSourceSourceTransactionsSourceTransaction",
    "/v1/sources/:source/source_transactions/:sourceTransaction",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getSourcesSourceSourceTransactionsSourceTransactionParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getSourcesSourceSourceTransactionsSourceTransactionQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getSourcesSourceSourceTransactionsSourceTransactionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getSourcesSourceSourceTransactionsSourceTransaction(
          input,
          ctx,
        )

      ctx.body =
        getSourcesSourceSourceTransactionsSourceTransactionResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postSourcesSourceVerifyParamSchema = z.object({
    source: z.coerce.string(),
  })

  const postSourcesSourceVerifyBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    values: z.array(z.coerce.string()),
  })

  const postSourcesSourceVerifyResponseValidator = responseValidationFactory(
    [["200", s_source]],
    s_error,
  )

  router.post(
    "postSourcesSourceVerify",
    "/v1/sources/:source/verify",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSourcesSourceVerifyParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSourcesSourceVerifyBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postSourcesSourceVerify(
        input,
        ctx,
      )

      ctx.body = postSourcesSourceVerifyResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getSubscriptionItemsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    subscription: z.coerce.string(),
  })

  const getSubscriptionItemsBodySchema = z.object({}).optional()

  const getSubscriptionItemsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_subscription_item)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getSubscriptionItems",
    "/v1/subscription_items",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getSubscriptionItemsQuerySchema, ctx.query),
        body: parseRequestInput(
          getSubscriptionItemsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getSubscriptionItems(
        input,
        ctx,
      )

      ctx.body = getSubscriptionItemsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postSubscriptionItemsBodySchema = z.object({
    billing_thresholds: z.union([
      z.object({ usage_gte: z.coerce.number() }),
      z.enum([""]),
    ]),
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.object({}).optional(),
    payment_behavior: z
      .enum([
        "allow_incomplete",
        "default_incomplete",
        "error_if_incomplete",
        "pending_if_incomplete",
      ])
      .optional(),
    price: z.coerce.string().optional(),
    price_data: z
      .object({
        currency: z.coerce.string(),
        product: z.coerce.string(),
        recurring: z.object({
          interval: z.enum(["day", "month", "week", "year"]),
          interval_count: z.coerce.number().optional(),
        }),
        tax_behavior: z
          .enum(["exclusive", "inclusive", "unspecified"])
          .optional(),
        unit_amount: z.coerce.number().optional(),
        unit_amount_decimal: z.coerce.string().optional(),
      })
      .optional(),
    proration_behavior: z
      .enum(["always_invoice", "create_prorations", "none"])
      .optional(),
    proration_date: z.coerce.number().optional(),
    quantity: z.coerce.number().optional(),
    subscription: z.coerce.string(),
    tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
  })

  const postSubscriptionItemsResponseValidator = responseValidationFactory(
    [["200", s_subscription_item]],
    s_error,
  )

  router.post(
    "postSubscriptionItems",
    "/v1/subscription_items",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postSubscriptionItemsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postSubscriptionItems(
        input,
        ctx,
      )

      ctx.body = postSubscriptionItemsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteSubscriptionItemsItemParamSchema = z.object({
    item: z.coerce.string(),
  })

  const deleteSubscriptionItemsItemBodySchema = z
    .object({
      clear_usage: z.coerce.boolean().optional(),
      proration_behavior: z
        .enum(["always_invoice", "create_prorations", "none"])
        .optional(),
      proration_date: z.coerce.number().optional(),
    })
    .optional()

  const deleteSubscriptionItemsItemResponseValidator =
    responseValidationFactory([["200", s_deleted_subscription_item]], s_error)

  router.delete(
    "deleteSubscriptionItemsItem",
    "/v1/subscription_items/:item",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteSubscriptionItemsItemParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteSubscriptionItemsItemBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.deleteSubscriptionItemsItem(
        input,
        ctx,
      )

      ctx.body = deleteSubscriptionItemsItemResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getSubscriptionItemsItemParamSchema = z.object({
    item: z.coerce.string(),
  })

  const getSubscriptionItemsItemQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getSubscriptionItemsItemBodySchema = z.object({}).optional()

  const getSubscriptionItemsItemResponseValidator = responseValidationFactory(
    [["200", s_subscription_item]],
    s_error,
  )

  router.get(
    "getSubscriptionItemsItem",
    "/v1/subscription_items/:item",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getSubscriptionItemsItemParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getSubscriptionItemsItemQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getSubscriptionItemsItemBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getSubscriptionItemsItem(
        input,
        ctx,
      )

      ctx.body = getSubscriptionItemsItemResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postSubscriptionItemsItemParamSchema = z.object({
    item: z.coerce.string(),
  })

  const postSubscriptionItemsItemBodySchema = z
    .object({
      billing_thresholds: z.union([
        z.object({ usage_gte: z.coerce.number() }),
        z.enum([""]),
      ]),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      off_session: z.coerce.boolean().optional(),
      payment_behavior: z
        .enum([
          "allow_incomplete",
          "default_incomplete",
          "error_if_incomplete",
          "pending_if_incomplete",
        ])
        .optional(),
      price: z.coerce.string().optional(),
      price_data: z
        .object({
          currency: z.coerce.string(),
          product: z.coerce.string(),
          recurring: z.object({
            interval: z.enum(["day", "month", "week", "year"]),
            interval_count: z.coerce.number().optional(),
          }),
          tax_behavior: z
            .enum(["exclusive", "inclusive", "unspecified"])
            .optional(),
          unit_amount: z.coerce.number().optional(),
          unit_amount_decimal: z.coerce.string().optional(),
        })
        .optional(),
      proration_behavior: z
        .enum(["always_invoice", "create_prorations", "none"])
        .optional(),
      proration_date: z.coerce.number().optional(),
      quantity: z.coerce.number().optional(),
      tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
    })
    .optional()

  const postSubscriptionItemsItemResponseValidator = responseValidationFactory(
    [["200", s_subscription_item]],
    s_error,
  )

  router.post(
    "postSubscriptionItemsItem",
    "/v1/subscription_items/:item",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSubscriptionItemsItemParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSubscriptionItemsItemBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postSubscriptionItemsItem(
        input,
        ctx,
      )

      ctx.body = postSubscriptionItemsItemResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getSubscriptionItemsSubscriptionItemUsageRecordSummariesParamSchema =
    z.object({ subscription_item: z.coerce.string() })

  const getSubscriptionItemsSubscriptionItemUsageRecordSummariesQuerySchema =
    z.object({
      ending_before: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      limit: z.coerce.number().optional(),
      starting_after: z.coerce.string().optional(),
    })

  const getSubscriptionItemsSubscriptionItemUsageRecordSummariesBodySchema = z
    .object({})
    .optional()

  const getSubscriptionItemsSubscriptionItemUsageRecordSummariesResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(s_usage_record_summary),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getSubscriptionItemsSubscriptionItemUsageRecordSummaries",
    "/v1/subscription_items/:subscriptionItem/usage_record_summaries",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getSubscriptionItemsSubscriptionItemUsageRecordSummariesParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getSubscriptionItemsSubscriptionItemUsageRecordSummariesQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getSubscriptionItemsSubscriptionItemUsageRecordSummariesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getSubscriptionItemsSubscriptionItemUsageRecordSummaries(
          input,
          ctx,
        )

      ctx.body =
        getSubscriptionItemsSubscriptionItemUsageRecordSummariesResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postSubscriptionItemsSubscriptionItemUsageRecordsParamSchema = z.object(
    { subscription_item: z.coerce.string() },
  )

  const postSubscriptionItemsSubscriptionItemUsageRecordsBodySchema = z.object({
    action: z.enum(["increment", "set"]).optional(),
    expand: z.array(z.coerce.string()).optional(),
    quantity: z.coerce.number(),
    timestamp: z.union([z.enum(["now"]), z.coerce.number()]),
  })

  const postSubscriptionItemsSubscriptionItemUsageRecordsResponseValidator =
    responseValidationFactory([["200", s_usage_record]], s_error)

  router.post(
    "postSubscriptionItemsSubscriptionItemUsageRecords",
    "/v1/subscription_items/:subscriptionItem/usage_records",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSubscriptionItemsSubscriptionItemUsageRecordsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSubscriptionItemsSubscriptionItemUsageRecordsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postSubscriptionItemsSubscriptionItemUsageRecords(
          input,
          ctx,
        )

      ctx.body =
        postSubscriptionItemsSubscriptionItemUsageRecordsResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getSubscriptionSchedulesQuerySchema = z.object({
    canceled_at: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    completed_at: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    customer: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    released_at: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    scheduled: z.coerce.boolean().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getSubscriptionSchedulesBodySchema = z.object({}).optional()

  const getSubscriptionSchedulesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_subscription_schedule)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getSubscriptionSchedules",
    "/v1/subscription_schedules",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getSubscriptionSchedulesQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getSubscriptionSchedulesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getSubscriptionSchedules(
        input,
        ctx,
      )

      ctx.body = getSubscriptionSchedulesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postSubscriptionSchedulesBodySchema = z
    .object({
      customer: z.coerce.string().optional(),
      default_settings: z
        .object({
          application_fee_percent: z.coerce.number().optional(),
          automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
          billing_cycle_anchor: z.enum(["automatic", "phase_start"]).optional(),
          billing_thresholds: z.union([
            z.object({
              amount_gte: z.coerce.number().optional(),
              reset_billing_cycle_anchor: z.coerce.boolean().optional(),
            }),
            z.enum([""]),
          ]),
          collection_method: z
            .enum(["charge_automatically", "send_invoice"])
            .optional(),
          default_payment_method: z.coerce.string().optional(),
          description: z.union([z.coerce.string(), z.enum([""])]),
          invoice_settings: z
            .object({ days_until_due: z.coerce.number().optional() })
            .optional(),
          on_behalf_of: z.union([z.coerce.string(), z.enum([""])]),
          transfer_data: z.union([
            z.object({
              amount_percent: z.coerce.number().optional(),
              destination: z.coerce.string(),
            }),
            z.enum([""]),
          ]),
        })
        .optional(),
      end_behavior: z.enum(["cancel", "none", "release", "renew"]).optional(),
      expand: z.array(z.coerce.string()).optional(),
      from_subscription: z.coerce.string().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      phases: z
        .array(
          z.object({
            add_invoice_items: z
              .array(
                z.object({
                  price: z.coerce.string().optional(),
                  price_data: z
                    .object({
                      currency: z.coerce.string(),
                      product: z.coerce.string(),
                      tax_behavior: z
                        .enum(["exclusive", "inclusive", "unspecified"])
                        .optional(),
                      unit_amount: z.coerce.number().optional(),
                      unit_amount_decimal: z.coerce.string().optional(),
                    })
                    .optional(),
                  quantity: z.coerce.number().optional(),
                  tax_rates: z.union([
                    z.array(z.coerce.string()),
                    z.enum([""]),
                  ]),
                }),
              )
              .optional(),
            application_fee_percent: z.coerce.number().optional(),
            automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
            billing_cycle_anchor: z
              .enum(["automatic", "phase_start"])
              .optional(),
            billing_thresholds: z.union([
              z.object({
                amount_gte: z.coerce.number().optional(),
                reset_billing_cycle_anchor: z.coerce.boolean().optional(),
              }),
              z.enum([""]),
            ]),
            collection_method: z
              .enum(["charge_automatically", "send_invoice"])
              .optional(),
            coupon: z.coerce.string().optional(),
            currency: z.coerce.string().optional(),
            default_payment_method: z.coerce.string().optional(),
            default_tax_rates: z.union([
              z.array(z.coerce.string()),
              z.enum([""]),
            ]),
            description: z.union([z.coerce.string(), z.enum([""])]),
            end_date: z.coerce.number().optional(),
            invoice_settings: z
              .object({ days_until_due: z.coerce.number().optional() })
              .optional(),
            items: z.array(
              z.object({
                billing_thresholds: z.union([
                  z.object({ usage_gte: z.coerce.number() }),
                  z.enum([""]),
                ]),
                metadata: z.object({}).optional(),
                price: z.coerce.string().optional(),
                price_data: z
                  .object({
                    currency: z.coerce.string(),
                    product: z.coerce.string(),
                    recurring: z.object({
                      interval: z.enum(["day", "month", "week", "year"]),
                      interval_count: z.coerce.number().optional(),
                    }),
                    tax_behavior: z
                      .enum(["exclusive", "inclusive", "unspecified"])
                      .optional(),
                    unit_amount: z.coerce.number().optional(),
                    unit_amount_decimal: z.coerce.string().optional(),
                  })
                  .optional(),
                quantity: z.coerce.number().optional(),
                tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
              }),
            ),
            iterations: z.coerce.number().optional(),
            metadata: z.object({}).optional(),
            on_behalf_of: z.coerce.string().optional(),
            proration_behavior: z
              .enum(["always_invoice", "create_prorations", "none"])
              .optional(),
            transfer_data: z
              .object({
                amount_percent: z.coerce.number().optional(),
                destination: z.coerce.string(),
              })
              .optional(),
            trial: z.coerce.boolean().optional(),
            trial_end: z.coerce.number().optional(),
          }),
        )
        .optional(),
      start_date: z.union([z.coerce.number(), z.enum(["now"])]),
    })
    .optional()

  const postSubscriptionSchedulesResponseValidator = responseValidationFactory(
    [["200", s_subscription_schedule]],
    s_error,
  )

  router.post(
    "postSubscriptionSchedules",
    "/v1/subscription_schedules",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postSubscriptionSchedulesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postSubscriptionSchedules(
        input,
        ctx,
      )

      ctx.body = postSubscriptionSchedulesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getSubscriptionSchedulesScheduleParamSchema = z.object({
    schedule: z.coerce.string(),
  })

  const getSubscriptionSchedulesScheduleQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getSubscriptionSchedulesScheduleBodySchema = z.object({}).optional()

  const getSubscriptionSchedulesScheduleResponseValidator =
    responseValidationFactory([["200", s_subscription_schedule]], s_error)

  router.get(
    "getSubscriptionSchedulesSchedule",
    "/v1/subscription_schedules/:schedule",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getSubscriptionSchedulesScheduleParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getSubscriptionSchedulesScheduleQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getSubscriptionSchedulesScheduleBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getSubscriptionSchedulesSchedule(input, ctx)

      ctx.body = getSubscriptionSchedulesScheduleResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postSubscriptionSchedulesScheduleParamSchema = z.object({
    schedule: z.coerce.string(),
  })

  const postSubscriptionSchedulesScheduleBodySchema = z
    .object({
      default_settings: z
        .object({
          application_fee_percent: z.coerce.number().optional(),
          automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
          billing_cycle_anchor: z.enum(["automatic", "phase_start"]).optional(),
          billing_thresholds: z.union([
            z.object({
              amount_gte: z.coerce.number().optional(),
              reset_billing_cycle_anchor: z.coerce.boolean().optional(),
            }),
            z.enum([""]),
          ]),
          collection_method: z
            .enum(["charge_automatically", "send_invoice"])
            .optional(),
          default_payment_method: z.coerce.string().optional(),
          description: z.union([z.coerce.string(), z.enum([""])]),
          invoice_settings: z
            .object({ days_until_due: z.coerce.number().optional() })
            .optional(),
          on_behalf_of: z.union([z.coerce.string(), z.enum([""])]),
          transfer_data: z.union([
            z.object({
              amount_percent: z.coerce.number().optional(),
              destination: z.coerce.string(),
            }),
            z.enum([""]),
          ]),
        })
        .optional(),
      end_behavior: z.enum(["cancel", "none", "release", "renew"]).optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      phases: z
        .array(
          z.object({
            add_invoice_items: z
              .array(
                z.object({
                  price: z.coerce.string().optional(),
                  price_data: z
                    .object({
                      currency: z.coerce.string(),
                      product: z.coerce.string(),
                      tax_behavior: z
                        .enum(["exclusive", "inclusive", "unspecified"])
                        .optional(),
                      unit_amount: z.coerce.number().optional(),
                      unit_amount_decimal: z.coerce.string().optional(),
                    })
                    .optional(),
                  quantity: z.coerce.number().optional(),
                  tax_rates: z.union([
                    z.array(z.coerce.string()),
                    z.enum([""]),
                  ]),
                }),
              )
              .optional(),
            application_fee_percent: z.coerce.number().optional(),
            automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
            billing_cycle_anchor: z
              .enum(["automatic", "phase_start"])
              .optional(),
            billing_thresholds: z.union([
              z.object({
                amount_gte: z.coerce.number().optional(),
                reset_billing_cycle_anchor: z.coerce.boolean().optional(),
              }),
              z.enum([""]),
            ]),
            collection_method: z
              .enum(["charge_automatically", "send_invoice"])
              .optional(),
            coupon: z.coerce.string().optional(),
            default_payment_method: z.coerce.string().optional(),
            default_tax_rates: z.union([
              z.array(z.coerce.string()),
              z.enum([""]),
            ]),
            description: z.union([z.coerce.string(), z.enum([""])]),
            end_date: z.union([z.coerce.number(), z.enum(["now"])]),
            invoice_settings: z
              .object({ days_until_due: z.coerce.number().optional() })
              .optional(),
            items: z.array(
              z.object({
                billing_thresholds: z.union([
                  z.object({ usage_gte: z.coerce.number() }),
                  z.enum([""]),
                ]),
                metadata: z.object({}).optional(),
                price: z.coerce.string().optional(),
                price_data: z
                  .object({
                    currency: z.coerce.string(),
                    product: z.coerce.string(),
                    recurring: z.object({
                      interval: z.enum(["day", "month", "week", "year"]),
                      interval_count: z.coerce.number().optional(),
                    }),
                    tax_behavior: z
                      .enum(["exclusive", "inclusive", "unspecified"])
                      .optional(),
                    unit_amount: z.coerce.number().optional(),
                    unit_amount_decimal: z.coerce.string().optional(),
                  })
                  .optional(),
                quantity: z.coerce.number().optional(),
                tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
              }),
            ),
            iterations: z.coerce.number().optional(),
            metadata: z.object({}).optional(),
            on_behalf_of: z.coerce.string().optional(),
            proration_behavior: z
              .enum(["always_invoice", "create_prorations", "none"])
              .optional(),
            start_date: z.union([z.coerce.number(), z.enum(["now"])]),
            transfer_data: z
              .object({
                amount_percent: z.coerce.number().optional(),
                destination: z.coerce.string(),
              })
              .optional(),
            trial: z.coerce.boolean().optional(),
            trial_end: z.union([z.coerce.number(), z.enum(["now"])]),
          }),
        )
        .optional(),
      proration_behavior: z
        .enum(["always_invoice", "create_prorations", "none"])
        .optional(),
    })
    .optional()

  const postSubscriptionSchedulesScheduleResponseValidator =
    responseValidationFactory([["200", s_subscription_schedule]], s_error)

  router.post(
    "postSubscriptionSchedulesSchedule",
    "/v1/subscription_schedules/:schedule",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSubscriptionSchedulesScheduleParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSubscriptionSchedulesScheduleBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postSubscriptionSchedulesSchedule(input, ctx)

      ctx.body = postSubscriptionSchedulesScheduleResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postSubscriptionSchedulesScheduleCancelParamSchema = z.object({
    schedule: z.coerce.string(),
  })

  const postSubscriptionSchedulesScheduleCancelBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      invoice_now: z.coerce.boolean().optional(),
      prorate: z.coerce.boolean().optional(),
    })
    .optional()

  const postSubscriptionSchedulesScheduleCancelResponseValidator =
    responseValidationFactory([["200", s_subscription_schedule]], s_error)

  router.post(
    "postSubscriptionSchedulesScheduleCancel",
    "/v1/subscription_schedules/:schedule/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSubscriptionSchedulesScheduleCancelParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSubscriptionSchedulesScheduleCancelBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postSubscriptionSchedulesScheduleCancel(input, ctx)

      ctx.body = postSubscriptionSchedulesScheduleCancelResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postSubscriptionSchedulesScheduleReleaseParamSchema = z.object({
    schedule: z.coerce.string(),
  })

  const postSubscriptionSchedulesScheduleReleaseBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      preserve_cancel_date: z.coerce.boolean().optional(),
    })
    .optional()

  const postSubscriptionSchedulesScheduleReleaseResponseValidator =
    responseValidationFactory([["200", s_subscription_schedule]], s_error)

  router.post(
    "postSubscriptionSchedulesScheduleRelease",
    "/v1/subscription_schedules/:schedule/release",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSubscriptionSchedulesScheduleReleaseParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSubscriptionSchedulesScheduleReleaseBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postSubscriptionSchedulesScheduleRelease(
          input,
          ctx,
        )

      ctx.body = postSubscriptionSchedulesScheduleReleaseResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getSubscriptionsQuerySchema = z.object({
    automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
    collection_method: z
      .enum(["charge_automatically", "send_invoice"])
      .optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    current_period_end: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    current_period_start: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    customer: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    price: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
    status: z
      .enum([
        "active",
        "all",
        "canceled",
        "ended",
        "incomplete",
        "incomplete_expired",
        "past_due",
        "paused",
        "trialing",
        "unpaid",
      ])
      .optional(),
    test_clock: z.coerce.string().optional(),
  })

  const getSubscriptionsBodySchema = z.object({}).optional()

  const getSubscriptionsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_subscription)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getSubscriptions", "/v1/subscriptions", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getSubscriptionsQuerySchema, ctx.query),
      body: parseRequestInput(getSubscriptionsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getSubscriptions(input, ctx)

    ctx.body = getSubscriptionsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postSubscriptionsBodySchema = z.object({
    add_invoice_items: z
      .array(
        z.object({
          price: z.coerce.string().optional(),
          price_data: z
            .object({
              currency: z.coerce.string(),
              product: z.coerce.string(),
              tax_behavior: z
                .enum(["exclusive", "inclusive", "unspecified"])
                .optional(),
              unit_amount: z.coerce.number().optional(),
              unit_amount_decimal: z.coerce.string().optional(),
            })
            .optional(),
          quantity: z.coerce.number().optional(),
          tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
        }),
      )
      .optional(),
    application_fee_percent: z.coerce.number().optional(),
    automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
    backdate_start_date: z.coerce.number().optional(),
    billing_cycle_anchor: z.coerce.number().optional(),
    billing_thresholds: z.union([
      z.object({
        amount_gte: z.coerce.number().optional(),
        reset_billing_cycle_anchor: z.coerce.boolean().optional(),
      }),
      z.enum([""]),
    ]),
    cancel_at: z.coerce.number().optional(),
    cancel_at_period_end: z.coerce.boolean().optional(),
    collection_method: z
      .enum(["charge_automatically", "send_invoice"])
      .optional(),
    coupon: z.coerce.string().optional(),
    currency: z.coerce.string().optional(),
    customer: z.coerce.string(),
    days_until_due: z.coerce.number().optional(),
    default_payment_method: z.coerce.string().optional(),
    default_source: z.coerce.string().optional(),
    default_tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
    description: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    items: z
      .array(
        z.object({
          billing_thresholds: z.union([
            z.object({ usage_gte: z.coerce.number() }),
            z.enum([""]),
          ]),
          metadata: z.object({}).optional(),
          price: z.coerce.string().optional(),
          price_data: z
            .object({
              currency: z.coerce.string(),
              product: z.coerce.string(),
              recurring: z.object({
                interval: z.enum(["day", "month", "week", "year"]),
                interval_count: z.coerce.number().optional(),
              }),
              tax_behavior: z
                .enum(["exclusive", "inclusive", "unspecified"])
                .optional(),
              unit_amount: z.coerce.number().optional(),
              unit_amount_decimal: z.coerce.string().optional(),
            })
            .optional(),
          quantity: z.coerce.number().optional(),
          tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
        }),
      )
      .optional(),
    metadata: z.union([z.object({}), z.enum([""])]),
    off_session: z.coerce.boolean().optional(),
    on_behalf_of: z.union([z.coerce.string(), z.enum([""])]),
    payment_behavior: z
      .enum([
        "allow_incomplete",
        "default_incomplete",
        "error_if_incomplete",
        "pending_if_incomplete",
      ])
      .optional(),
    payment_settings: z
      .object({
        payment_method_options: z
          .object({
            acss_debit: z.union([
              z.object({
                mandate_options: z
                  .object({
                    transaction_type: z
                      .enum(["business", "personal"])
                      .optional(),
                  })
                  .optional(),
                verification_method: z
                  .enum(["automatic", "instant", "microdeposits"])
                  .optional(),
              }),
              z.enum([""]),
            ]),
            bancontact: z.union([
              z.object({
                preferred_language: z.enum(["de", "en", "fr", "nl"]).optional(),
              }),
              z.enum([""]),
            ]),
            card: z.union([
              z.object({
                mandate_options: z
                  .object({
                    amount: z.coerce.number().optional(),
                    amount_type: z.enum(["fixed", "maximum"]).optional(),
                    description: z.coerce.string().optional(),
                  })
                  .optional(),
                network: z
                  .enum([
                    "amex",
                    "cartes_bancaires",
                    "diners",
                    "discover",
                    "eftpos_au",
                    "interac",
                    "jcb",
                    "mastercard",
                    "unionpay",
                    "unknown",
                    "visa",
                  ])
                  .optional(),
                request_three_d_secure: z.enum(["any", "automatic"]).optional(),
              }),
              z.enum([""]),
            ]),
            customer_balance: z.union([
              z.object({
                bank_transfer: z
                  .object({
                    eu_bank_transfer: z
                      .object({ country: z.coerce.string() })
                      .optional(),
                    type: z.coerce.string().optional(),
                  })
                  .optional(),
                funding_type: z.coerce.string().optional(),
              }),
              z.enum([""]),
            ]),
            konbini: z.union([z.object({}), z.enum([""])]),
            us_bank_account: z.union([
              z.object({
                financial_connections: z
                  .object({
                    permissions: z
                      .array(
                        z.enum([
                          "balances",
                          "ownership",
                          "payment_method",
                          "transactions",
                        ]),
                      )
                      .optional(),
                    prefetch: z.array(z.enum(["balances"])).optional(),
                  })
                  .optional(),
                verification_method: z
                  .enum(["automatic", "instant", "microdeposits"])
                  .optional(),
              }),
              z.enum([""]),
            ]),
          })
          .optional(),
        payment_method_types: z.union([
          z.array(
            z.enum([
              "ach_credit_transfer",
              "ach_debit",
              "acss_debit",
              "au_becs_debit",
              "bacs_debit",
              "bancontact",
              "boleto",
              "card",
              "cashapp",
              "customer_balance",
              "fpx",
              "giropay",
              "grabpay",
              "ideal",
              "konbini",
              "link",
              "paynow",
              "paypal",
              "promptpay",
              "sepa_debit",
              "sofort",
              "us_bank_account",
              "wechat_pay",
            ]),
          ),
          z.enum([""]),
        ]),
        save_default_payment_method: z
          .enum(["off", "on_subscription"])
          .optional(),
      })
      .optional(),
    pending_invoice_item_interval: z.union([
      z.object({
        interval: z.enum(["day", "month", "week", "year"]),
        interval_count: z.coerce.number().optional(),
      }),
      z.enum([""]),
    ]),
    promotion_code: z.coerce.string().optional(),
    proration_behavior: z
      .enum(["always_invoice", "create_prorations", "none"])
      .optional(),
    transfer_data: z
      .object({
        amount_percent: z.coerce.number().optional(),
        destination: z.coerce.string(),
      })
      .optional(),
    trial_end: z.union([z.enum(["now"]), z.coerce.number()]),
    trial_from_plan: z.coerce.boolean().optional(),
    trial_period_days: z.coerce.number().optional(),
    trial_settings: z
      .object({
        end_behavior: z.object({
          missing_payment_method: z.enum(["cancel", "create_invoice", "pause"]),
        }),
      })
      .optional(),
  })

  const postSubscriptionsResponseValidator = responseValidationFactory(
    [["200", s_subscription]],
    s_error,
  )

  router.post("postSubscriptions", "/v1/subscriptions", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postSubscriptionsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postSubscriptions(input, ctx)

    ctx.body = postSubscriptionsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getSubscriptionsSearchQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    page: z.coerce.string().optional(),
    query: z.coerce.string(),
  })

  const getSubscriptionsSearchBodySchema = z.object({}).optional()

  const getSubscriptionsSearchResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_subscription)),
          has_more: z.coerce.boolean(),
          next_page: z.coerce.string().optional().nullable(),
          object: z.enum(["search_result"]),
          total_count: z.coerce.number().optional(),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getSubscriptionsSearch",
    "/v1/subscriptions/search",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getSubscriptionsSearchQuerySchema, ctx.query),
        body: parseRequestInput(
          getSubscriptionsSearchBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getSubscriptionsSearch(
        input,
        ctx,
      )

      ctx.body = getSubscriptionsSearchResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteSubscriptionsSubscriptionExposedIdParamSchema = z.object({
    subscription_exposed_id: z.coerce.string(),
  })

  const deleteSubscriptionsSubscriptionExposedIdBodySchema = z
    .object({
      cancellation_details: z
        .object({
          comment: z.union([z.coerce.string(), z.enum([""])]),
          feedback: z
            .enum([
              "",
              "customer_service",
              "low_quality",
              "missing_features",
              "other",
              "switched_service",
              "too_complex",
              "too_expensive",
              "unused",
            ])
            .optional(),
        })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      invoice_now: z.coerce.boolean().optional(),
      prorate: z.coerce.boolean().optional(),
    })
    .optional()

  const deleteSubscriptionsSubscriptionExposedIdResponseValidator =
    responseValidationFactory([["200", s_subscription]], s_error)

  router.delete(
    "deleteSubscriptionsSubscriptionExposedId",
    "/v1/subscriptions/:subscriptionExposedId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteSubscriptionsSubscriptionExposedIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteSubscriptionsSubscriptionExposedIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteSubscriptionsSubscriptionExposedId(
          input,
          ctx,
        )

      ctx.body = deleteSubscriptionsSubscriptionExposedIdResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getSubscriptionsSubscriptionExposedIdParamSchema = z.object({
    subscription_exposed_id: z.coerce.string(),
  })

  const getSubscriptionsSubscriptionExposedIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getSubscriptionsSubscriptionExposedIdBodySchema = z
    .object({})
    .optional()

  const getSubscriptionsSubscriptionExposedIdResponseValidator =
    responseValidationFactory([["200", s_subscription]], s_error)

  router.get(
    "getSubscriptionsSubscriptionExposedId",
    "/v1/subscriptions/:subscriptionExposedId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getSubscriptionsSubscriptionExposedIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getSubscriptionsSubscriptionExposedIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getSubscriptionsSubscriptionExposedIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getSubscriptionsSubscriptionExposedId(input, ctx)

      ctx.body = getSubscriptionsSubscriptionExposedIdResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postSubscriptionsSubscriptionExposedIdParamSchema = z.object({
    subscription_exposed_id: z.coerce.string(),
  })

  const postSubscriptionsSubscriptionExposedIdBodySchema = z
    .object({
      add_invoice_items: z
        .array(
          z.object({
            price: z.coerce.string().optional(),
            price_data: z
              .object({
                currency: z.coerce.string(),
                product: z.coerce.string(),
                tax_behavior: z
                  .enum(["exclusive", "inclusive", "unspecified"])
                  .optional(),
                unit_amount: z.coerce.number().optional(),
                unit_amount_decimal: z.coerce.string().optional(),
              })
              .optional(),
            quantity: z.coerce.number().optional(),
            tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          }),
        )
        .optional(),
      application_fee_percent: z.coerce.number().optional(),
      automatic_tax: z.object({ enabled: z.coerce.boolean() }).optional(),
      billing_cycle_anchor: z.enum(["now", "unchanged"]).optional(),
      billing_thresholds: z.union([
        z.object({
          amount_gte: z.coerce.number().optional(),
          reset_billing_cycle_anchor: z.coerce.boolean().optional(),
        }),
        z.enum([""]),
      ]),
      cancel_at: z.union([z.coerce.number(), z.enum([""])]),
      cancel_at_period_end: z.coerce.boolean().optional(),
      cancellation_details: z
        .object({
          comment: z.union([z.coerce.string(), z.enum([""])]),
          feedback: z
            .enum([
              "",
              "customer_service",
              "low_quality",
              "missing_features",
              "other",
              "switched_service",
              "too_complex",
              "too_expensive",
              "unused",
            ])
            .optional(),
        })
        .optional(),
      collection_method: z
        .enum(["charge_automatically", "send_invoice"])
        .optional(),
      coupon: z.coerce.string().optional(),
      days_until_due: z.coerce.number().optional(),
      default_payment_method: z.coerce.string().optional(),
      default_source: z.union([z.coerce.string(), z.enum([""])]),
      default_tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
      description: z.union([z.coerce.string(), z.enum([""])]),
      expand: z.array(z.coerce.string()).optional(),
      items: z
        .array(
          z.object({
            billing_thresholds: z.union([
              z.object({ usage_gte: z.coerce.number() }),
              z.enum([""]),
            ]),
            clear_usage: z.coerce.boolean().optional(),
            deleted: z.coerce.boolean().optional(),
            id: z.coerce.string().optional(),
            metadata: z.union([z.object({}), z.enum([""])]),
            price: z.coerce.string().optional(),
            price_data: z
              .object({
                currency: z.coerce.string(),
                product: z.coerce.string(),
                recurring: z.object({
                  interval: z.enum(["day", "month", "week", "year"]),
                  interval_count: z.coerce.number().optional(),
                }),
                tax_behavior: z
                  .enum(["exclusive", "inclusive", "unspecified"])
                  .optional(),
                unit_amount: z.coerce.number().optional(),
                unit_amount_decimal: z.coerce.string().optional(),
              })
              .optional(),
            quantity: z.coerce.number().optional(),
            tax_rates: z.union([z.array(z.coerce.string()), z.enum([""])]),
          }),
        )
        .optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      off_session: z.coerce.boolean().optional(),
      on_behalf_of: z.union([z.coerce.string(), z.enum([""])]),
      pause_collection: z.union([
        z.object({
          behavior: z.enum(["keep_as_draft", "mark_uncollectible", "void"]),
          resumes_at: z.coerce.number().optional(),
        }),
        z.enum([""]),
      ]),
      payment_behavior: z
        .enum([
          "allow_incomplete",
          "default_incomplete",
          "error_if_incomplete",
          "pending_if_incomplete",
        ])
        .optional(),
      payment_settings: z
        .object({
          payment_method_options: z
            .object({
              acss_debit: z.union([
                z.object({
                  mandate_options: z
                    .object({
                      transaction_type: z
                        .enum(["business", "personal"])
                        .optional(),
                    })
                    .optional(),
                  verification_method: z
                    .enum(["automatic", "instant", "microdeposits"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              bancontact: z.union([
                z.object({
                  preferred_language: z
                    .enum(["de", "en", "fr", "nl"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              card: z.union([
                z.object({
                  mandate_options: z
                    .object({
                      amount: z.coerce.number().optional(),
                      amount_type: z.enum(["fixed", "maximum"]).optional(),
                      description: z.coerce.string().optional(),
                    })
                    .optional(),
                  network: z
                    .enum([
                      "amex",
                      "cartes_bancaires",
                      "diners",
                      "discover",
                      "eftpos_au",
                      "interac",
                      "jcb",
                      "mastercard",
                      "unionpay",
                      "unknown",
                      "visa",
                    ])
                    .optional(),
                  request_three_d_secure: z
                    .enum(["any", "automatic"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
              customer_balance: z.union([
                z.object({
                  bank_transfer: z
                    .object({
                      eu_bank_transfer: z
                        .object({ country: z.coerce.string() })
                        .optional(),
                      type: z.coerce.string().optional(),
                    })
                    .optional(),
                  funding_type: z.coerce.string().optional(),
                }),
                z.enum([""]),
              ]),
              konbini: z.union([z.object({}), z.enum([""])]),
              us_bank_account: z.union([
                z.object({
                  financial_connections: z
                    .object({
                      permissions: z
                        .array(
                          z.enum([
                            "balances",
                            "ownership",
                            "payment_method",
                            "transactions",
                          ]),
                        )
                        .optional(),
                      prefetch: z.array(z.enum(["balances"])).optional(),
                    })
                    .optional(),
                  verification_method: z
                    .enum(["automatic", "instant", "microdeposits"])
                    .optional(),
                }),
                z.enum([""]),
              ]),
            })
            .optional(),
          payment_method_types: z.union([
            z.array(
              z.enum([
                "ach_credit_transfer",
                "ach_debit",
                "acss_debit",
                "au_becs_debit",
                "bacs_debit",
                "bancontact",
                "boleto",
                "card",
                "cashapp",
                "customer_balance",
                "fpx",
                "giropay",
                "grabpay",
                "ideal",
                "konbini",
                "link",
                "paynow",
                "paypal",
                "promptpay",
                "sepa_debit",
                "sofort",
                "us_bank_account",
                "wechat_pay",
              ]),
            ),
            z.enum([""]),
          ]),
          save_default_payment_method: z
            .enum(["off", "on_subscription"])
            .optional(),
        })
        .optional(),
      pending_invoice_item_interval: z.union([
        z.object({
          interval: z.enum(["day", "month", "week", "year"]),
          interval_count: z.coerce.number().optional(),
        }),
        z.enum([""]),
      ]),
      promotion_code: z.coerce.string().optional(),
      proration_behavior: z
        .enum(["always_invoice", "create_prorations", "none"])
        .optional(),
      proration_date: z.coerce.number().optional(),
      transfer_data: z.union([
        z.object({
          amount_percent: z.coerce.number().optional(),
          destination: z.coerce.string(),
        }),
        z.enum([""]),
      ]),
      trial_end: z.union([z.enum(["now"]), z.coerce.number()]),
      trial_from_plan: z.coerce.boolean().optional(),
      trial_settings: z
        .object({
          end_behavior: z.object({
            missing_payment_method: z.enum([
              "cancel",
              "create_invoice",
              "pause",
            ]),
          }),
        })
        .optional(),
    })
    .optional()

  const postSubscriptionsSubscriptionExposedIdResponseValidator =
    responseValidationFactory([["200", s_subscription]], s_error)

  router.post(
    "postSubscriptionsSubscriptionExposedId",
    "/v1/subscriptions/:subscriptionExposedId",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSubscriptionsSubscriptionExposedIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSubscriptionsSubscriptionExposedIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postSubscriptionsSubscriptionExposedId(input, ctx)

      ctx.body = postSubscriptionsSubscriptionExposedIdResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const deleteSubscriptionsSubscriptionExposedIdDiscountParamSchema = z.object({
    subscription_exposed_id: z.coerce.string(),
  })

  const deleteSubscriptionsSubscriptionExposedIdDiscountBodySchema = z
    .object({})
    .optional()

  const deleteSubscriptionsSubscriptionExposedIdDiscountResponseValidator =
    responseValidationFactory([["200", s_deleted_discount]], s_error)

  router.delete(
    "deleteSubscriptionsSubscriptionExposedIdDiscount",
    "/v1/subscriptions/:subscriptionExposedId/discount",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteSubscriptionsSubscriptionExposedIdDiscountParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteSubscriptionsSubscriptionExposedIdDiscountBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteSubscriptionsSubscriptionExposedIdDiscount(
          input,
          ctx,
        )

      ctx.body =
        deleteSubscriptionsSubscriptionExposedIdDiscountResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postSubscriptionsSubscriptionResumeParamSchema = z.object({
    subscription: z.coerce.string(),
  })

  const postSubscriptionsSubscriptionResumeBodySchema = z
    .object({
      billing_cycle_anchor: z.enum(["now", "unchanged"]).optional(),
      expand: z.array(z.coerce.string()).optional(),
      proration_behavior: z
        .enum(["always_invoice", "create_prorations", "none"])
        .optional(),
      proration_date: z.coerce.number().optional(),
    })
    .optional()

  const postSubscriptionsSubscriptionResumeResponseValidator =
    responseValidationFactory([["200", s_subscription]], s_error)

  router.post(
    "postSubscriptionsSubscriptionResume",
    "/v1/subscriptions/:subscription/resume",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postSubscriptionsSubscriptionResumeParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postSubscriptionsSubscriptionResumeBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postSubscriptionsSubscriptionResume(input, ctx)

      ctx.body = postSubscriptionsSubscriptionResumeResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTaxCalculationsBodySchema = z.object({
    currency: z.coerce.string(),
    customer: z.coerce.string().optional(),
    customer_details: z
      .object({
        address: z
          .object({
            city: z.union([z.coerce.string(), z.enum([""])]),
            country: z.coerce.string(),
            line1: z.union([z.coerce.string(), z.enum([""])]),
            line2: z.union([z.coerce.string(), z.enum([""])]),
            postal_code: z.union([z.coerce.string(), z.enum([""])]),
            state: z.union([z.coerce.string(), z.enum([""])]),
          })
          .optional(),
        address_source: z.enum(["billing", "shipping"]).optional(),
        ip_address: z.coerce.string().optional(),
        tax_ids: z
          .array(
            z.object({
              type: z.enum([
                "ad_nrt",
                "ae_trn",
                "ar_cuit",
                "au_abn",
                "au_arn",
                "bg_uic",
                "bo_tin",
                "br_cnpj",
                "br_cpf",
                "ca_bn",
                "ca_gst_hst",
                "ca_pst_bc",
                "ca_pst_mb",
                "ca_pst_sk",
                "ca_qst",
                "ch_vat",
                "cl_tin",
                "cn_tin",
                "co_nit",
                "cr_tin",
                "do_rcn",
                "ec_ruc",
                "eg_tin",
                "es_cif",
                "eu_oss_vat",
                "eu_vat",
                "gb_vat",
                "ge_vat",
                "hk_br",
                "hu_tin",
                "id_npwp",
                "il_vat",
                "in_gst",
                "is_vat",
                "jp_cn",
                "jp_rn",
                "jp_trn",
                "ke_pin",
                "kr_brn",
                "li_uid",
                "mx_rfc",
                "my_frp",
                "my_itn",
                "my_sst",
                "no_vat",
                "nz_gst",
                "pe_ruc",
                "ph_tin",
                "ro_tin",
                "rs_pib",
                "ru_inn",
                "ru_kpp",
                "sa_vat",
                "sg_gst",
                "sg_uen",
                "si_tin",
                "sv_nit",
                "th_vat",
                "tr_tin",
                "tw_vat",
                "ua_vat",
                "us_ein",
                "uy_ruc",
                "ve_rif",
                "vn_tin",
                "za_vat",
              ]),
              value: z.coerce.string(),
            }),
          )
          .optional(),
        taxability_override: z
          .enum(["customer_exempt", "none", "reverse_charge"])
          .optional(),
      })
      .optional(),
    expand: z.array(z.coerce.string()).optional(),
    line_items: z.array(
      z.object({
        amount: z.coerce.number(),
        product: z.coerce.string().optional(),
        quantity: z.coerce.number().optional(),
        reference: z.coerce.string().optional(),
        tax_behavior: z.enum(["exclusive", "inclusive"]).optional(),
        tax_code: z.coerce.string().optional(),
      }),
    ),
    shipping_cost: z
      .object({
        amount: z.coerce.number().optional(),
        shipping_rate: z.coerce.string().optional(),
        tax_behavior: z.enum(["exclusive", "inclusive"]).optional(),
        tax_code: z.coerce.string().optional(),
      })
      .optional(),
    tax_date: z.coerce.number().optional(),
  })

  const postTaxCalculationsResponseValidator = responseValidationFactory(
    [["200", s_tax_calculation]],
    s_error,
  )

  router.post(
    "postTaxCalculations",
    "/v1/tax/calculations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTaxCalculationsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTaxCalculations(
        input,
        ctx,
      )

      ctx.body = postTaxCalculationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTaxCalculationsCalculationLineItemsParamSchema = z.object({
    calculation: z.coerce.string(),
  })

  const getTaxCalculationsCalculationLineItemsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getTaxCalculationsCalculationLineItemsBodySchema = z
    .object({})
    .optional()

  const getTaxCalculationsCalculationLineItemsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(s_tax_calculation_line_item),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getTaxCalculationsCalculationLineItems",
    "/v1/tax/calculations/:calculation/line_items",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTaxCalculationsCalculationLineItemsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTaxCalculationsCalculationLineItemsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTaxCalculationsCalculationLineItemsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTaxCalculationsCalculationLineItems(input, ctx)

      ctx.body = getTaxCalculationsCalculationLineItemsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getTaxSettingsQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTaxSettingsBodySchema = z.object({}).optional()

  const getTaxSettingsResponseValidator = responseValidationFactory(
    [["200", s_tax_settings]],
    s_error,
  )

  router.get("getTaxSettings", "/v1/tax/settings", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getTaxSettingsQuerySchema, ctx.query),
      body: parseRequestInput(getTaxSettingsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getTaxSettings(input, ctx)

    ctx.body = getTaxSettingsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postTaxSettingsBodySchema = z
    .object({
      defaults: z
        .object({
          tax_behavior: z
            .enum(["exclusive", "inclusive", "inferred_by_currency"])
            .optional(),
          tax_code: z.coerce.string().optional(),
        })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      head_office: z
        .object({
          address: z.object({
            city: z.coerce.string().optional(),
            country: z.coerce.string().optional(),
            line1: z.coerce.string().optional(),
            line2: z.coerce.string().optional(),
            postal_code: z.coerce.string().optional(),
            state: z.coerce.string().optional(),
          }),
        })
        .optional(),
    })
    .optional()

  const postTaxSettingsResponseValidator = responseValidationFactory(
    [["200", s_tax_settings]],
    s_error,
  )

  router.post("postTaxSettings", "/v1/tax/settings", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postTaxSettingsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postTaxSettings(input, ctx)

    ctx.body = postTaxSettingsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postTaxTransactionsCreateFromCalculationBodySchema = z.object({
    calculation: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.object({}).optional(),
    reference: z.coerce.string(),
  })

  const postTaxTransactionsCreateFromCalculationResponseValidator =
    responseValidationFactory([["200", s_tax_transaction]], s_error)

  router.post(
    "postTaxTransactionsCreateFromCalculation",
    "/v1/tax/transactions/create_from_calculation",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTaxTransactionsCreateFromCalculationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTaxTransactionsCreateFromCalculation(
          input,
          ctx,
        )

      ctx.body = postTaxTransactionsCreateFromCalculationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTaxTransactionsCreateReversalBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    flat_amount: z.coerce.number().optional(),
    line_items: z
      .array(
        z.object({
          amount: z.coerce.number(),
          amount_tax: z.coerce.number(),
          metadata: z.object({}).optional(),
          original_line_item: z.coerce.string(),
          quantity: z.coerce.number().optional(),
          reference: z.coerce.string(),
        }),
      )
      .optional(),
    metadata: z.object({}).optional(),
    mode: z.enum(["full", "partial"]),
    original_transaction: z.coerce.string(),
    reference: z.coerce.string(),
    shipping_cost: z
      .object({ amount: z.coerce.number(), amount_tax: z.coerce.number() })
      .optional(),
  })

  const postTaxTransactionsCreateReversalResponseValidator =
    responseValidationFactory([["200", s_tax_transaction]], s_error)

  router.post(
    "postTaxTransactionsCreateReversal",
    "/v1/tax/transactions/create_reversal",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTaxTransactionsCreateReversalBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTaxTransactionsCreateReversal(input, ctx)

      ctx.body = postTaxTransactionsCreateReversalResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getTaxTransactionsTransactionParamSchema = z.object({
    transaction: z.coerce.string(),
  })

  const getTaxTransactionsTransactionQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTaxTransactionsTransactionBodySchema = z.object({}).optional()

  const getTaxTransactionsTransactionResponseValidator =
    responseValidationFactory([["200", s_tax_transaction]], s_error)

  router.get(
    "getTaxTransactionsTransaction",
    "/v1/tax/transactions/:transaction",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTaxTransactionsTransactionParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTaxTransactionsTransactionQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTaxTransactionsTransactionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTaxTransactionsTransaction(input, ctx)

      ctx.body = getTaxTransactionsTransactionResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTaxTransactionsTransactionLineItemsParamSchema = z.object({
    transaction: z.coerce.string(),
  })

  const getTaxTransactionsTransactionLineItemsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getTaxTransactionsTransactionLineItemsBodySchema = z
    .object({})
    .optional()

  const getTaxTransactionsTransactionLineItemsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(s_tax_transaction_line_item),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getTaxTransactionsTransactionLineItems",
    "/v1/tax/transactions/:transaction/line_items",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTaxTransactionsTransactionLineItemsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTaxTransactionsTransactionLineItemsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTaxTransactionsTransactionLineItemsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTaxTransactionsTransactionLineItems(input, ctx)

      ctx.body = getTaxTransactionsTransactionLineItemsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getTaxCodesQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getTaxCodesBodySchema = z.object({}).optional()

  const getTaxCodesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_tax_code),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getTaxCodes", "/v1/tax_codes", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getTaxCodesQuerySchema, ctx.query),
      body: parseRequestInput(getTaxCodesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getTaxCodes(input, ctx)

    ctx.body = getTaxCodesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getTaxCodesIdParamSchema = z.object({ id: z.coerce.string() })

  const getTaxCodesIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTaxCodesIdBodySchema = z.object({}).optional()

  const getTaxCodesIdResponseValidator = responseValidationFactory(
    [["200", s_tax_code]],
    s_error,
  )

  router.get("getTaxCodesId", "/v1/tax_codes/:id", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getTaxCodesIdParamSchema, ctx.params),
      query: parseRequestInput(getTaxCodesIdQuerySchema, ctx.query),
      body: parseRequestInput(getTaxCodesIdBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getTaxCodesId(input, ctx)

    ctx.body = getTaxCodesIdResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getTaxRatesQuerySchema = z.object({
    active: z.coerce.boolean().optional(),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    inclusive: z.coerce.boolean().optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getTaxRatesBodySchema = z.object({}).optional()

  const getTaxRatesResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_tax_rate),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getTaxRates", "/v1/tax_rates", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getTaxRatesQuerySchema, ctx.query),
      body: parseRequestInput(getTaxRatesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getTaxRates(input, ctx)

    ctx.body = getTaxRatesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postTaxRatesBodySchema = z.object({
    active: z.coerce.boolean().optional(),
    country: z.coerce.string().optional(),
    description: z.coerce.string().optional(),
    display_name: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
    inclusive: z.coerce.boolean(),
    jurisdiction: z.coerce.string().optional(),
    metadata: z.object({}).optional(),
    percentage: z.coerce.number(),
    state: z.coerce.string().optional(),
    tax_type: z
      .enum([
        "amusement_tax",
        "communications_tax",
        "gst",
        "hst",
        "igst",
        "jct",
        "lease_tax",
        "pst",
        "qst",
        "rst",
        "sales_tax",
        "service_tax",
        "vat",
      ])
      .optional(),
  })

  const postTaxRatesResponseValidator = responseValidationFactory(
    [["200", s_tax_rate]],
    s_error,
  )

  router.post("postTaxRates", "/v1/tax_rates", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postTaxRatesBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postTaxRates(input, ctx)

    ctx.body = postTaxRatesResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getTaxRatesTaxRateParamSchema = z.object({
    tax_rate: z.coerce.string(),
  })

  const getTaxRatesTaxRateQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTaxRatesTaxRateBodySchema = z.object({}).optional()

  const getTaxRatesTaxRateResponseValidator = responseValidationFactory(
    [["200", s_tax_rate]],
    s_error,
  )

  router.get(
    "getTaxRatesTaxRate",
    "/v1/tax_rates/:taxRate",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getTaxRatesTaxRateParamSchema, ctx.params),
        query: parseRequestInput(getTaxRatesTaxRateQuerySchema, ctx.query),
        body: parseRequestInput(getTaxRatesTaxRateBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getTaxRatesTaxRate(
        input,
        ctx,
      )

      ctx.body = getTaxRatesTaxRateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTaxRatesTaxRateParamSchema = z.object({
    tax_rate: z.coerce.string(),
  })

  const postTaxRatesTaxRateBodySchema = z
    .object({
      active: z.coerce.boolean().optional(),
      country: z.coerce.string().optional(),
      description: z.coerce.string().optional(),
      display_name: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      jurisdiction: z.coerce.string().optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      state: z.coerce.string().optional(),
      tax_type: z
        .enum([
          "amusement_tax",
          "communications_tax",
          "gst",
          "hst",
          "igst",
          "jct",
          "lease_tax",
          "pst",
          "qst",
          "rst",
          "sales_tax",
          "service_tax",
          "vat",
        ])
        .optional(),
    })
    .optional()

  const postTaxRatesTaxRateResponseValidator = responseValidationFactory(
    [["200", s_tax_rate]],
    s_error,
  )

  router.post(
    "postTaxRatesTaxRate",
    "/v1/tax_rates/:taxRate",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postTaxRatesTaxRateParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          postTaxRatesTaxRateBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTaxRatesTaxRate(
        input,
        ctx,
      )

      ctx.body = postTaxRatesTaxRateResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTerminalConfigurationsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    is_account_default: z.coerce.boolean().optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getTerminalConfigurationsBodySchema = z.object({}).optional()

  const getTerminalConfigurationsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_terminal_configuration)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getTerminalConfigurations",
    "/v1/terminal/configurations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getTerminalConfigurationsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTerminalConfigurationsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTerminalConfigurations(
        input,
        ctx,
      )

      ctx.body = getTerminalConfigurationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTerminalConfigurationsBodySchema = z
    .object({
      bbpos_wisepos_e: z
        .object({ splashscreen: z.union([z.coerce.string(), z.enum([""])]) })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      tipping: z.union([
        z.object({
          aud: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          cad: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          chf: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          czk: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          dkk: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          eur: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          gbp: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          hkd: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          myr: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          nok: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          nzd: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          sek: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          sgd: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          usd: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
        }),
        z.enum([""]),
      ]),
      verifone_p400: z
        .object({ splashscreen: z.union([z.coerce.string(), z.enum([""])]) })
        .optional(),
    })
    .optional()

  const postTerminalConfigurationsResponseValidator = responseValidationFactory(
    [["200", s_terminal_configuration]],
    s_error,
  )

  router.post(
    "postTerminalConfigurations",
    "/v1/terminal/configurations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTerminalConfigurationsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTerminalConfigurations(
        input,
        ctx,
      )

      ctx.body = postTerminalConfigurationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteTerminalConfigurationsConfigurationParamSchema = z.object({
    configuration: z.coerce.string(),
  })

  const deleteTerminalConfigurationsConfigurationBodySchema = z
    .object({})
    .optional()

  const deleteTerminalConfigurationsConfigurationResponseValidator =
    responseValidationFactory(
      [["200", s_deleted_terminal_configuration]],
      s_error,
    )

  router.delete(
    "deleteTerminalConfigurationsConfiguration",
    "/v1/terminal/configurations/:configuration",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteTerminalConfigurationsConfigurationParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteTerminalConfigurationsConfigurationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteTerminalConfigurationsConfiguration(
          input,
          ctx,
        )

      ctx.body = deleteTerminalConfigurationsConfigurationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getTerminalConfigurationsConfigurationParamSchema = z.object({
    configuration: z.coerce.string(),
  })

  const getTerminalConfigurationsConfigurationQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTerminalConfigurationsConfigurationBodySchema = z
    .object({})
    .optional()

  const getTerminalConfigurationsConfigurationResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.union([
            z.lazy(() => s_terminal_configuration),
            s_deleted_terminal_configuration,
          ]),
        ],
      ],
      s_error,
    )

  router.get(
    "getTerminalConfigurationsConfiguration",
    "/v1/terminal/configurations/:configuration",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTerminalConfigurationsConfigurationParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTerminalConfigurationsConfigurationQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTerminalConfigurationsConfigurationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTerminalConfigurationsConfiguration(input, ctx)

      ctx.body = getTerminalConfigurationsConfigurationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTerminalConfigurationsConfigurationParamSchema = z.object({
    configuration: z.coerce.string(),
  })

  const postTerminalConfigurationsConfigurationBodySchema = z
    .object({
      bbpos_wisepos_e: z.union([
        z.object({ splashscreen: z.union([z.coerce.string(), z.enum([""])]) }),
        z.enum([""]),
      ]),
      expand: z.array(z.coerce.string()).optional(),
      tipping: z.union([
        z.object({
          aud: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          cad: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          chf: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          czk: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          dkk: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          eur: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          gbp: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          hkd: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          myr: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          nok: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          nzd: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          sek: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          sgd: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
          usd: z
            .object({
              fixed_amounts: z.array(z.coerce.number()).optional(),
              percentages: z.array(z.coerce.number()).optional(),
              smart_tip_threshold: z.coerce.number().optional(),
            })
            .optional(),
        }),
        z.enum([""]),
      ]),
      verifone_p400: z.union([
        z.object({ splashscreen: z.union([z.coerce.string(), z.enum([""])]) }),
        z.enum([""]),
      ]),
    })
    .optional()

  const postTerminalConfigurationsConfigurationResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.union([
            z.lazy(() => s_terminal_configuration),
            s_deleted_terminal_configuration,
          ]),
        ],
      ],
      s_error,
    )

  router.post(
    "postTerminalConfigurationsConfiguration",
    "/v1/terminal/configurations/:configuration",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTerminalConfigurationsConfigurationParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTerminalConfigurationsConfigurationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTerminalConfigurationsConfiguration(input, ctx)

      ctx.body = postTerminalConfigurationsConfigurationResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTerminalConnectionTokensBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      location: z.coerce.string().optional(),
    })
    .optional()

  const postTerminalConnectionTokensResponseValidator =
    responseValidationFactory([["200", s_terminal_connection_token]], s_error)

  router.post(
    "postTerminalConnectionTokens",
    "/v1/terminal/connection_tokens",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTerminalConnectionTokensBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTerminalConnectionTokens(input, ctx)

      ctx.body = postTerminalConnectionTokensResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTerminalLocationsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getTerminalLocationsBodySchema = z.object({}).optional()

  const getTerminalLocationsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_terminal_location),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getTerminalLocations",
    "/v1/terminal/locations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getTerminalLocationsQuerySchema, ctx.query),
        body: parseRequestInput(
          getTerminalLocationsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTerminalLocations(
        input,
        ctx,
      )

      ctx.body = getTerminalLocationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTerminalLocationsBodySchema = z.object({
    address: z.object({
      city: z.coerce.string().optional(),
      country: z.coerce.string(),
      line1: z.coerce.string().optional(),
      line2: z.coerce.string().optional(),
      postal_code: z.coerce.string().optional(),
      state: z.coerce.string().optional(),
    }),
    configuration_overrides: z.coerce.string().optional(),
    display_name: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.union([z.object({}), z.enum([""])]),
  })

  const postTerminalLocationsResponseValidator = responseValidationFactory(
    [["200", s_terminal_location]],
    s_error,
  )

  router.post(
    "postTerminalLocations",
    "/v1/terminal/locations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTerminalLocationsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTerminalLocations(
        input,
        ctx,
      )

      ctx.body = postTerminalLocationsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteTerminalLocationsLocationParamSchema = z.object({
    location: z.coerce.string(),
  })

  const deleteTerminalLocationsLocationBodySchema = z.object({}).optional()

  const deleteTerminalLocationsLocationResponseValidator =
    responseValidationFactory([["200", s_deleted_terminal_location]], s_error)

  router.delete(
    "deleteTerminalLocationsLocation",
    "/v1/terminal/locations/:location",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteTerminalLocationsLocationParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteTerminalLocationsLocationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteTerminalLocationsLocation(input, ctx)

      ctx.body = deleteTerminalLocationsLocationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTerminalLocationsLocationParamSchema = z.object({
    location: z.coerce.string(),
  })

  const getTerminalLocationsLocationQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTerminalLocationsLocationBodySchema = z.object({}).optional()

  const getTerminalLocationsLocationResponseValidator =
    responseValidationFactory(
      [["200", z.union([s_terminal_location, s_deleted_terminal_location])]],
      s_error,
    )

  router.get(
    "getTerminalLocationsLocation",
    "/v1/terminal/locations/:location",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTerminalLocationsLocationParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTerminalLocationsLocationQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTerminalLocationsLocationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTerminalLocationsLocation(input, ctx)

      ctx.body = getTerminalLocationsLocationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTerminalLocationsLocationParamSchema = z.object({
    location: z.coerce.string(),
  })

  const postTerminalLocationsLocationBodySchema = z
    .object({
      address: z
        .object({
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          line1: z.coerce.string().optional(),
          line2: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
        })
        .optional(),
      configuration_overrides: z.union([z.coerce.string(), z.enum([""])]),
      display_name: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postTerminalLocationsLocationResponseValidator =
    responseValidationFactory(
      [["200", z.union([s_terminal_location, s_deleted_terminal_location])]],
      s_error,
    )

  router.post(
    "postTerminalLocationsLocation",
    "/v1/terminal/locations/:location",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTerminalLocationsLocationParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTerminalLocationsLocationBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTerminalLocationsLocation(input, ctx)

      ctx.body = postTerminalLocationsLocationResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTerminalReadersQuerySchema = z.object({
    device_type: z
      .enum([
        "bbpos_chipper2x",
        "bbpos_wisepad3",
        "bbpos_wisepos_e",
        "simulated_wisepos_e",
        "stripe_m2",
        "verifone_P400",
      ])
      .optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    location: z.coerce.string().optional(),
    serial_number: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
    status: z.enum(["offline", "online"]).optional(),
  })

  const getTerminalReadersBodySchema = z.object({}).optional()

  const getTerminalReadersResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_terminal_reader)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getTerminalReaders",
    "/v1/terminal/readers",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getTerminalReadersQuerySchema, ctx.query),
        body: parseRequestInput(getTerminalReadersBodySchema, ctx.request.body),
      }

      const { status, body } = await implementation.getTerminalReaders(
        input,
        ctx,
      )

      ctx.body = getTerminalReadersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTerminalReadersBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    label: z.coerce.string().optional(),
    location: z.coerce.string().optional(),
    metadata: z.union([z.object({}), z.enum([""])]),
    registration_code: z.coerce.string(),
  })

  const postTerminalReadersResponseValidator = responseValidationFactory(
    [["200", s_terminal_reader]],
    s_error,
  )

  router.post(
    "postTerminalReaders",
    "/v1/terminal/readers",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTerminalReadersBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTerminalReaders(
        input,
        ctx,
      )

      ctx.body = postTerminalReadersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteTerminalReadersReaderParamSchema = z.object({
    reader: z.coerce.string(),
  })

  const deleteTerminalReadersReaderBodySchema = z.object({}).optional()

  const deleteTerminalReadersReaderResponseValidator =
    responseValidationFactory([["200", s_deleted_terminal_reader]], s_error)

  router.delete(
    "deleteTerminalReadersReader",
    "/v1/terminal/readers/:reader",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteTerminalReadersReaderParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteTerminalReadersReaderBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.deleteTerminalReadersReader(
        input,
        ctx,
      )

      ctx.body = deleteTerminalReadersReaderResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTerminalReadersReaderParamSchema = z.object({
    reader: z.coerce.string(),
  })

  const getTerminalReadersReaderQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTerminalReadersReaderBodySchema = z.object({}).optional()

  const getTerminalReadersReaderResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.union([z.lazy(() => s_terminal_reader), s_deleted_terminal_reader]),
      ],
    ],
    s_error,
  )

  router.get(
    "getTerminalReadersReader",
    "/v1/terminal/readers/:reader",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTerminalReadersReaderParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTerminalReadersReaderQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTerminalReadersReaderBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTerminalReadersReader(
        input,
        ctx,
      )

      ctx.body = getTerminalReadersReaderResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTerminalReadersReaderParamSchema = z.object({
    reader: z.coerce.string(),
  })

  const postTerminalReadersReaderBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      label: z.union([z.coerce.string(), z.enum([""])]),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postTerminalReadersReaderResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.union([z.lazy(() => s_terminal_reader), s_deleted_terminal_reader]),
      ],
    ],
    s_error,
  )

  router.post(
    "postTerminalReadersReader",
    "/v1/terminal/readers/:reader",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTerminalReadersReaderParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTerminalReadersReaderBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTerminalReadersReader(
        input,
        ctx,
      )

      ctx.body = postTerminalReadersReaderResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTerminalReadersReaderCancelActionParamSchema = z.object({
    reader: z.coerce.string(),
  })

  const postTerminalReadersReaderCancelActionBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTerminalReadersReaderCancelActionResponseValidator =
    responseValidationFactory([["200", s_terminal_reader]], s_error)

  router.post(
    "postTerminalReadersReaderCancelAction",
    "/v1/terminal/readers/:reader/cancel_action",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTerminalReadersReaderCancelActionParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTerminalReadersReaderCancelActionBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTerminalReadersReaderCancelAction(input, ctx)

      ctx.body = postTerminalReadersReaderCancelActionResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTerminalReadersReaderProcessPaymentIntentParamSchema = z.object({
    reader: z.coerce.string(),
  })

  const postTerminalReadersReaderProcessPaymentIntentBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    payment_intent: z.coerce.string(),
    process_config: z
      .object({
        skip_tipping: z.coerce.boolean().optional(),
        tipping: z
          .object({ amount_eligible: z.coerce.number().optional() })
          .optional(),
      })
      .optional(),
  })

  const postTerminalReadersReaderProcessPaymentIntentResponseValidator =
    responseValidationFactory([["200", s_terminal_reader]], s_error)

  router.post(
    "postTerminalReadersReaderProcessPaymentIntent",
    "/v1/terminal/readers/:reader/process_payment_intent",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTerminalReadersReaderProcessPaymentIntentParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTerminalReadersReaderProcessPaymentIntentBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTerminalReadersReaderProcessPaymentIntent(
          input,
          ctx,
        )

      ctx.body = postTerminalReadersReaderProcessPaymentIntentResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTerminalReadersReaderProcessSetupIntentParamSchema = z.object({
    reader: z.coerce.string(),
  })

  const postTerminalReadersReaderProcessSetupIntentBodySchema = z.object({
    customer_consent_collected: z.coerce.boolean(),
    expand: z.array(z.coerce.string()).optional(),
    process_config: z.object({}).optional(),
    setup_intent: z.coerce.string(),
  })

  const postTerminalReadersReaderProcessSetupIntentResponseValidator =
    responseValidationFactory([["200", s_terminal_reader]], s_error)

  router.post(
    "postTerminalReadersReaderProcessSetupIntent",
    "/v1/terminal/readers/:reader/process_setup_intent",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTerminalReadersReaderProcessSetupIntentParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTerminalReadersReaderProcessSetupIntentBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTerminalReadersReaderProcessSetupIntent(
          input,
          ctx,
        )

      ctx.body = postTerminalReadersReaderProcessSetupIntentResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTerminalReadersReaderRefundPaymentParamSchema = z.object({
    reader: z.coerce.string(),
  })

  const postTerminalReadersReaderRefundPaymentBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      charge: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.object({}).optional(),
      payment_intent: z.coerce.string().optional(),
      refund_application_fee: z.coerce.boolean().optional(),
      reverse_transfer: z.coerce.boolean().optional(),
    })
    .optional()

  const postTerminalReadersReaderRefundPaymentResponseValidator =
    responseValidationFactory([["200", s_terminal_reader]], s_error)

  router.post(
    "postTerminalReadersReaderRefundPayment",
    "/v1/terminal/readers/:reader/refund_payment",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTerminalReadersReaderRefundPaymentParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTerminalReadersReaderRefundPaymentBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTerminalReadersReaderRefundPayment(input, ctx)

      ctx.body = postTerminalReadersReaderRefundPaymentResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTerminalReadersReaderSetReaderDisplayParamSchema = z.object({
    reader: z.coerce.string(),
  })

  const postTerminalReadersReaderSetReaderDisplayBodySchema = z.object({
    cart: z
      .object({
        currency: z.coerce.string(),
        line_items: z.array(
          z.object({
            amount: z.coerce.number(),
            description: z.coerce.string(),
            quantity: z.coerce.number(),
          }),
        ),
        tax: z.coerce.number().optional(),
        total: z.coerce.number(),
      })
      .optional(),
    expand: z.array(z.coerce.string()).optional(),
    type: z.enum(["cart"]),
  })

  const postTerminalReadersReaderSetReaderDisplayResponseValidator =
    responseValidationFactory([["200", s_terminal_reader]], s_error)

  router.post(
    "postTerminalReadersReaderSetReaderDisplay",
    "/v1/terminal/readers/:reader/set_reader_display",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTerminalReadersReaderSetReaderDisplayParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTerminalReadersReaderSetReaderDisplayBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTerminalReadersReaderSetReaderDisplay(
          input,
          ctx,
        )

      ctx.body = postTerminalReadersReaderSetReaderDisplayResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersCustomersCustomerFundCashBalanceParamSchema = z.object({
    customer: z.coerce.string(),
  })

  const postTestHelpersCustomersCustomerFundCashBalanceBodySchema = z.object({
    amount: z.coerce.number(),
    currency: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
    reference: z.coerce.string().optional(),
  })

  const postTestHelpersCustomersCustomerFundCashBalanceResponseValidator =
    responseValidationFactory(
      [["200", s_customer_cash_balance_transaction]],
      s_error,
    )

  router.post(
    "postTestHelpersCustomersCustomerFundCashBalance",
    "/v1/test_helpers/customers/:customer/fund_cash_balance",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersCustomersCustomerFundCashBalanceParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersCustomersCustomerFundCashBalanceBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersCustomersCustomerFundCashBalance(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersCustomersCustomerFundCashBalanceResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingAuthorizationsBodySchema = z.object({
    amount: z.coerce.number(),
    amount_details: z
      .object({
        atm_fee: z.coerce.number().optional(),
        cashback_amount: z.coerce.number().optional(),
      })
      .optional(),
    authorization_method: z
      .enum(["chip", "contactless", "keyed_in", "online", "swipe"])
      .optional(),
    card: z.coerce.string(),
    currency: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    is_amount_controllable: z.coerce.boolean().optional(),
    merchant_data: z
      .object({
        category: z
          .enum([
            "ac_refrigeration_repair",
            "accounting_bookkeeping_services",
            "advertising_services",
            "agricultural_cooperative",
            "airlines_air_carriers",
            "airports_flying_fields",
            "ambulance_services",
            "amusement_parks_carnivals",
            "antique_reproductions",
            "antique_shops",
            "aquariums",
            "architectural_surveying_services",
            "art_dealers_and_galleries",
            "artists_supply_and_craft_shops",
            "auto_and_home_supply_stores",
            "auto_body_repair_shops",
            "auto_paint_shops",
            "auto_service_shops",
            "automated_cash_disburse",
            "automated_fuel_dispensers",
            "automobile_associations",
            "automotive_parts_and_accessories_stores",
            "automotive_tire_stores",
            "bail_and_bond_payments",
            "bakeries",
            "bands_orchestras",
            "barber_and_beauty_shops",
            "betting_casino_gambling",
            "bicycle_shops",
            "billiard_pool_establishments",
            "boat_dealers",
            "boat_rentals_and_leases",
            "book_stores",
            "books_periodicals_and_newspapers",
            "bowling_alleys",
            "bus_lines",
            "business_secretarial_schools",
            "buying_shopping_services",
            "cable_satellite_and_other_pay_television_and_radio",
            "camera_and_photographic_supply_stores",
            "candy_nut_and_confectionery_stores",
            "car_and_truck_dealers_new_used",
            "car_and_truck_dealers_used_only",
            "car_rental_agencies",
            "car_washes",
            "carpentry_services",
            "carpet_upholstery_cleaning",
            "caterers",
            "charitable_and_social_service_organizations_fundraising",
            "chemicals_and_allied_products",
            "child_care_services",
            "childrens_and_infants_wear_stores",
            "chiropodists_podiatrists",
            "chiropractors",
            "cigar_stores_and_stands",
            "civic_social_fraternal_associations",
            "cleaning_and_maintenance",
            "clothing_rental",
            "colleges_universities",
            "commercial_equipment",
            "commercial_footwear",
            "commercial_photography_art_and_graphics",
            "commuter_transport_and_ferries",
            "computer_network_services",
            "computer_programming",
            "computer_repair",
            "computer_software_stores",
            "computers_peripherals_and_software",
            "concrete_work_services",
            "construction_materials",
            "consulting_public_relations",
            "correspondence_schools",
            "cosmetic_stores",
            "counseling_services",
            "country_clubs",
            "courier_services",
            "court_costs",
            "credit_reporting_agencies",
            "cruise_lines",
            "dairy_products_stores",
            "dance_hall_studios_schools",
            "dating_escort_services",
            "dentists_orthodontists",
            "department_stores",
            "detective_agencies",
            "digital_goods_applications",
            "digital_goods_games",
            "digital_goods_large_volume",
            "digital_goods_media",
            "direct_marketing_catalog_merchant",
            "direct_marketing_combination_catalog_and_retail_merchant",
            "direct_marketing_inbound_telemarketing",
            "direct_marketing_insurance_services",
            "direct_marketing_other",
            "direct_marketing_outbound_telemarketing",
            "direct_marketing_subscription",
            "direct_marketing_travel",
            "discount_stores",
            "doctors",
            "door_to_door_sales",
            "drapery_window_covering_and_upholstery_stores",
            "drinking_places",
            "drug_stores_and_pharmacies",
            "drugs_drug_proprietaries_and_druggist_sundries",
            "dry_cleaners",
            "durable_goods",
            "duty_free_stores",
            "eating_places_restaurants",
            "educational_services",
            "electric_razor_stores",
            "electric_vehicle_charging",
            "electrical_parts_and_equipment",
            "electrical_services",
            "electronics_repair_shops",
            "electronics_stores",
            "elementary_secondary_schools",
            "emergency_services_gcas_visa_use_only",
            "employment_temp_agencies",
            "equipment_rental",
            "exterminating_services",
            "family_clothing_stores",
            "fast_food_restaurants",
            "financial_institutions",
            "fines_government_administrative_entities",
            "fireplace_fireplace_screens_and_accessories_stores",
            "floor_covering_stores",
            "florists",
            "florists_supplies_nursery_stock_and_flowers",
            "freezer_and_locker_meat_provisioners",
            "fuel_dealers_non_automotive",
            "funeral_services_crematories",
            "furniture_home_furnishings_and_equipment_stores_except_appliances",
            "furniture_repair_refinishing",
            "furriers_and_fur_shops",
            "general_services",
            "gift_card_novelty_and_souvenir_shops",
            "glass_paint_and_wallpaper_stores",
            "glassware_crystal_stores",
            "golf_courses_public",
            "government_licensed_horse_dog_racing_us_region_only",
            "government_licensed_online_casions_online_gambling_us_region_only",
            "government_owned_lotteries_non_us_region",
            "government_owned_lotteries_us_region_only",
            "government_services",
            "grocery_stores_supermarkets",
            "hardware_equipment_and_supplies",
            "hardware_stores",
            "health_and_beauty_spas",
            "hearing_aids_sales_and_supplies",
            "heating_plumbing_a_c",
            "hobby_toy_and_game_shops",
            "home_supply_warehouse_stores",
            "hospitals",
            "hotels_motels_and_resorts",
            "household_appliance_stores",
            "industrial_supplies",
            "information_retrieval_services",
            "insurance_default",
            "insurance_underwriting_premiums",
            "intra_company_purchases",
            "jewelry_stores_watches_clocks_and_silverware_stores",
            "landscaping_services",
            "laundries",
            "laundry_cleaning_services",
            "legal_services_attorneys",
            "luggage_and_leather_goods_stores",
            "lumber_building_materials_stores",
            "manual_cash_disburse",
            "marinas_service_and_supplies",
            "marketplaces",
            "masonry_stonework_and_plaster",
            "massage_parlors",
            "medical_and_dental_labs",
            "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
            "medical_services",
            "membership_organizations",
            "mens_and_boys_clothing_and_accessories_stores",
            "mens_womens_clothing_stores",
            "metal_service_centers",
            "miscellaneous_apparel_and_accessory_shops",
            "miscellaneous_auto_dealers",
            "miscellaneous_business_services",
            "miscellaneous_food_stores",
            "miscellaneous_general_merchandise",
            "miscellaneous_general_services",
            "miscellaneous_home_furnishing_specialty_stores",
            "miscellaneous_publishing_and_printing",
            "miscellaneous_recreation_services",
            "miscellaneous_repair_shops",
            "miscellaneous_specialty_retail",
            "mobile_home_dealers",
            "motion_picture_theaters",
            "motor_freight_carriers_and_trucking",
            "motor_homes_dealers",
            "motor_vehicle_supplies_and_new_parts",
            "motorcycle_shops_and_dealers",
            "motorcycle_shops_dealers",
            "music_stores_musical_instruments_pianos_and_sheet_music",
            "news_dealers_and_newsstands",
            "non_fi_money_orders",
            "non_fi_stored_value_card_purchase_load",
            "nondurable_goods",
            "nurseries_lawn_and_garden_supply_stores",
            "nursing_personal_care",
            "office_and_commercial_furniture",
            "opticians_eyeglasses",
            "optometrists_ophthalmologist",
            "orthopedic_goods_prosthetic_devices",
            "osteopaths",
            "package_stores_beer_wine_and_liquor",
            "paints_varnishes_and_supplies",
            "parking_lots_garages",
            "passenger_railways",
            "pawn_shops",
            "pet_shops_pet_food_and_supplies",
            "petroleum_and_petroleum_products",
            "photo_developing",
            "photographic_photocopy_microfilm_equipment_and_supplies",
            "photographic_studios",
            "picture_video_production",
            "piece_goods_notions_and_other_dry_goods",
            "plumbing_heating_equipment_and_supplies",
            "political_organizations",
            "postal_services_government_only",
            "precious_stones_and_metals_watches_and_jewelry",
            "professional_services",
            "public_warehousing_and_storage",
            "quick_copy_repro_and_blueprint",
            "railroads",
            "real_estate_agents_and_managers_rentals",
            "record_stores",
            "recreational_vehicle_rentals",
            "religious_goods_stores",
            "religious_organizations",
            "roofing_siding_sheet_metal",
            "secretarial_support_services",
            "security_brokers_dealers",
            "service_stations",
            "sewing_needlework_fabric_and_piece_goods_stores",
            "shoe_repair_hat_cleaning",
            "shoe_stores",
            "small_appliance_repair",
            "snowmobile_dealers",
            "special_trade_services",
            "specialty_cleaning",
            "sporting_goods_stores",
            "sporting_recreation_camps",
            "sports_and_riding_apparel_stores",
            "sports_clubs_fields",
            "stamp_and_coin_stores",
            "stationary_office_supplies_printing_and_writing_paper",
            "stationery_stores_office_and_school_supply_stores",
            "swimming_pools_sales",
            "t_ui_travel_germany",
            "tailors_alterations",
            "tax_payments_government_agencies",
            "tax_preparation_services",
            "taxicabs_limousines",
            "telecommunication_equipment_and_telephone_sales",
            "telecommunication_services",
            "telegraph_services",
            "tent_and_awning_shops",
            "testing_laboratories",
            "theatrical_ticket_agencies",
            "timeshares",
            "tire_retreading_and_repair",
            "tolls_bridge_fees",
            "tourist_attractions_and_exhibits",
            "towing_services",
            "trailer_parks_campgrounds",
            "transportation_services",
            "travel_agencies_tour_operators",
            "truck_stop_iteration",
            "truck_utility_trailer_rentals",
            "typesetting_plate_making_and_related_services",
            "typewriter_stores",
            "u_s_federal_government_agencies_or_departments",
            "uniforms_commercial_clothing",
            "used_merchandise_and_secondhand_stores",
            "utilities",
            "variety_stores",
            "veterinary_services",
            "video_amusement_game_supplies",
            "video_game_arcades",
            "video_tape_rental_stores",
            "vocational_trade_schools",
            "watch_jewelry_repair",
            "welding_repair",
            "wholesale_clubs",
            "wig_and_toupee_stores",
            "wires_money_orders",
            "womens_accessory_and_specialty_shops",
            "womens_ready_to_wear_stores",
            "wrecking_and_salvage_yards",
          ])
          .optional(),
        city: z.coerce.string().optional(),
        country: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        network_id: z.coerce.string().optional(),
        postal_code: z.coerce.string().optional(),
        state: z.coerce.string().optional(),
        terminal_id: z.coerce.string().optional(),
      })
      .optional(),
    network_data: z
      .object({ acquiring_institution_id: z.coerce.string().optional() })
      .optional(),
    verification_data: z
      .object({
        address_line1_check: z
          .enum(["match", "mismatch", "not_provided"])
          .optional(),
        address_postal_code_check: z
          .enum(["match", "mismatch", "not_provided"])
          .optional(),
        cvc_check: z.enum(["match", "mismatch", "not_provided"]).optional(),
        expiry_check: z.enum(["match", "mismatch", "not_provided"]).optional(),
      })
      .optional(),
    wallet: z.enum(["apple_pay", "google_pay", "samsung_pay"]).optional(),
  })

  const postTestHelpersIssuingAuthorizationsResponseValidator =
    responseValidationFactory([["200", s_issuing_authorization]], s_error)

  router.post(
    "postTestHelpersIssuingAuthorizations",
    "/v1/test_helpers/issuing/authorizations",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingAuthorizationsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingAuthorizations(input, ctx)

      ctx.body = postTestHelpersIssuingAuthorizationsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingAuthorizationsAuthorizationCaptureParamSchema =
    z.object({ authorization: z.coerce.string() })

  const postTestHelpersIssuingAuthorizationsAuthorizationCaptureBodySchema = z
    .object({
      capture_amount: z.coerce.number().optional(),
      close_authorization: z.coerce.boolean().optional(),
      expand: z.array(z.coerce.string()).optional(),
      purchase_details: z
        .object({
          flight: z
            .object({
              departure_at: z.coerce.number().optional(),
              passenger_name: z.coerce.string().optional(),
              refundable: z.coerce.boolean().optional(),
              segments: z
                .array(
                  z.object({
                    arrival_airport_code: z.coerce.string().optional(),
                    carrier: z.coerce.string().optional(),
                    departure_airport_code: z.coerce.string().optional(),
                    flight_number: z.coerce.string().optional(),
                    service_class: z.coerce.string().optional(),
                    stopover_allowed: z.coerce.boolean().optional(),
                  }),
                )
                .optional(),
              travel_agency: z.coerce.string().optional(),
            })
            .optional(),
          fuel: z
            .object({
              type: z
                .enum([
                  "diesel",
                  "other",
                  "unleaded_plus",
                  "unleaded_regular",
                  "unleaded_super",
                ])
                .optional(),
              unit: z.enum(["liter", "us_gallon"]).optional(),
              unit_cost_decimal: z.coerce.string().optional(),
              volume_decimal: z.coerce.string().optional(),
            })
            .optional(),
          lodging: z
            .object({
              check_in_at: z.coerce.number().optional(),
              nights: z.coerce.number().optional(),
            })
            .optional(),
          receipt: z
            .array(
              z.object({
                description: z.coerce.string().optional(),
                quantity: z.coerce.string().optional(),
                total: z.coerce.number().optional(),
                unit_cost: z.coerce.number().optional(),
              }),
            )
            .optional(),
          reference: z.coerce.string().optional(),
        })
        .optional(),
    })
    .optional()

  const postTestHelpersIssuingAuthorizationsAuthorizationCaptureResponseValidator =
    responseValidationFactory([["200", s_issuing_authorization]], s_error)

  router.post(
    "postTestHelpersIssuingAuthorizationsAuthorizationCapture",
    "/v1/test_helpers/issuing/authorizations/:authorization/capture",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersIssuingAuthorizationsAuthorizationCaptureParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingAuthorizationsAuthorizationCaptureBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingAuthorizationsAuthorizationCapture(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersIssuingAuthorizationsAuthorizationCaptureResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingAuthorizationsAuthorizationExpireParamSchema =
    z.object({ authorization: z.coerce.string() })

  const postTestHelpersIssuingAuthorizationsAuthorizationExpireBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTestHelpersIssuingAuthorizationsAuthorizationExpireResponseValidator =
    responseValidationFactory([["200", s_issuing_authorization]], s_error)

  router.post(
    "postTestHelpersIssuingAuthorizationsAuthorizationExpire",
    "/v1/test_helpers/issuing/authorizations/:authorization/expire",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersIssuingAuthorizationsAuthorizationExpireParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingAuthorizationsAuthorizationExpireBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingAuthorizationsAuthorizationExpire(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersIssuingAuthorizationsAuthorizationExpireResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingAuthorizationsAuthorizationIncrementParamSchema =
    z.object({ authorization: z.coerce.string() })

  const postTestHelpersIssuingAuthorizationsAuthorizationIncrementBodySchema =
    z.object({
      expand: z.array(z.coerce.string()).optional(),
      increment_amount: z.coerce.number(),
      is_amount_controllable: z.coerce.boolean().optional(),
    })

  const postTestHelpersIssuingAuthorizationsAuthorizationIncrementResponseValidator =
    responseValidationFactory([["200", s_issuing_authorization]], s_error)

  router.post(
    "postTestHelpersIssuingAuthorizationsAuthorizationIncrement",
    "/v1/test_helpers/issuing/authorizations/:authorization/increment",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersIssuingAuthorizationsAuthorizationIncrementParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingAuthorizationsAuthorizationIncrementBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingAuthorizationsAuthorizationIncrement(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersIssuingAuthorizationsAuthorizationIncrementResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingAuthorizationsAuthorizationReverseParamSchema =
    z.object({ authorization: z.coerce.string() })

  const postTestHelpersIssuingAuthorizationsAuthorizationReverseBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      reverse_amount: z.coerce.number().optional(),
    })
    .optional()

  const postTestHelpersIssuingAuthorizationsAuthorizationReverseResponseValidator =
    responseValidationFactory([["200", s_issuing_authorization]], s_error)

  router.post(
    "postTestHelpersIssuingAuthorizationsAuthorizationReverse",
    "/v1/test_helpers/issuing/authorizations/:authorization/reverse",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersIssuingAuthorizationsAuthorizationReverseParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingAuthorizationsAuthorizationReverseBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingAuthorizationsAuthorizationReverse(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersIssuingAuthorizationsAuthorizationReverseResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingCardsCardShippingDeliverParamSchema = z.object({
    card: z.coerce.string(),
  })

  const postTestHelpersIssuingCardsCardShippingDeliverBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTestHelpersIssuingCardsCardShippingDeliverResponseValidator =
    responseValidationFactory([["200", s_issuing_card]], s_error)

  router.post(
    "postTestHelpersIssuingCardsCardShippingDeliver",
    "/v1/test_helpers/issuing/cards/:card/shipping/deliver",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersIssuingCardsCardShippingDeliverParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingCardsCardShippingDeliverBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingCardsCardShippingDeliver(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersIssuingCardsCardShippingDeliverResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingCardsCardShippingFailParamSchema = z.object({
    card: z.coerce.string(),
  })

  const postTestHelpersIssuingCardsCardShippingFailBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTestHelpersIssuingCardsCardShippingFailResponseValidator =
    responseValidationFactory([["200", s_issuing_card]], s_error)

  router.post(
    "postTestHelpersIssuingCardsCardShippingFail",
    "/v1/test_helpers/issuing/cards/:card/shipping/fail",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersIssuingCardsCardShippingFailParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingCardsCardShippingFailBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingCardsCardShippingFail(
          input,
          ctx,
        )

      ctx.body = postTestHelpersIssuingCardsCardShippingFailResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingCardsCardShippingReturnParamSchema = z.object({
    card: z.coerce.string(),
  })

  const postTestHelpersIssuingCardsCardShippingReturnBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTestHelpersIssuingCardsCardShippingReturnResponseValidator =
    responseValidationFactory([["200", s_issuing_card]], s_error)

  router.post(
    "postTestHelpersIssuingCardsCardShippingReturn",
    "/v1/test_helpers/issuing/cards/:card/shipping/return",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersIssuingCardsCardShippingReturnParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingCardsCardShippingReturnBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingCardsCardShippingReturn(
          input,
          ctx,
        )

      ctx.body = postTestHelpersIssuingCardsCardShippingReturnResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingCardsCardShippingShipParamSchema = z.object({
    card: z.coerce.string(),
  })

  const postTestHelpersIssuingCardsCardShippingShipBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTestHelpersIssuingCardsCardShippingShipResponseValidator =
    responseValidationFactory([["200", s_issuing_card]], s_error)

  router.post(
    "postTestHelpersIssuingCardsCardShippingShip",
    "/v1/test_helpers/issuing/cards/:card/shipping/ship",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersIssuingCardsCardShippingShipParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingCardsCardShippingShipBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingCardsCardShippingShip(
          input,
          ctx,
        )

      ctx.body = postTestHelpersIssuingCardsCardShippingShipResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingTransactionsCreateForceCaptureBodySchema =
    z.object({
      amount: z.coerce.number(),
      card: z.coerce.string(),
      currency: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      merchant_data: z
        .object({
          category: z
            .enum([
              "ac_refrigeration_repair",
              "accounting_bookkeeping_services",
              "advertising_services",
              "agricultural_cooperative",
              "airlines_air_carriers",
              "airports_flying_fields",
              "ambulance_services",
              "amusement_parks_carnivals",
              "antique_reproductions",
              "antique_shops",
              "aquariums",
              "architectural_surveying_services",
              "art_dealers_and_galleries",
              "artists_supply_and_craft_shops",
              "auto_and_home_supply_stores",
              "auto_body_repair_shops",
              "auto_paint_shops",
              "auto_service_shops",
              "automated_cash_disburse",
              "automated_fuel_dispensers",
              "automobile_associations",
              "automotive_parts_and_accessories_stores",
              "automotive_tire_stores",
              "bail_and_bond_payments",
              "bakeries",
              "bands_orchestras",
              "barber_and_beauty_shops",
              "betting_casino_gambling",
              "bicycle_shops",
              "billiard_pool_establishments",
              "boat_dealers",
              "boat_rentals_and_leases",
              "book_stores",
              "books_periodicals_and_newspapers",
              "bowling_alleys",
              "bus_lines",
              "business_secretarial_schools",
              "buying_shopping_services",
              "cable_satellite_and_other_pay_television_and_radio",
              "camera_and_photographic_supply_stores",
              "candy_nut_and_confectionery_stores",
              "car_and_truck_dealers_new_used",
              "car_and_truck_dealers_used_only",
              "car_rental_agencies",
              "car_washes",
              "carpentry_services",
              "carpet_upholstery_cleaning",
              "caterers",
              "charitable_and_social_service_organizations_fundraising",
              "chemicals_and_allied_products",
              "child_care_services",
              "childrens_and_infants_wear_stores",
              "chiropodists_podiatrists",
              "chiropractors",
              "cigar_stores_and_stands",
              "civic_social_fraternal_associations",
              "cleaning_and_maintenance",
              "clothing_rental",
              "colleges_universities",
              "commercial_equipment",
              "commercial_footwear",
              "commercial_photography_art_and_graphics",
              "commuter_transport_and_ferries",
              "computer_network_services",
              "computer_programming",
              "computer_repair",
              "computer_software_stores",
              "computers_peripherals_and_software",
              "concrete_work_services",
              "construction_materials",
              "consulting_public_relations",
              "correspondence_schools",
              "cosmetic_stores",
              "counseling_services",
              "country_clubs",
              "courier_services",
              "court_costs",
              "credit_reporting_agencies",
              "cruise_lines",
              "dairy_products_stores",
              "dance_hall_studios_schools",
              "dating_escort_services",
              "dentists_orthodontists",
              "department_stores",
              "detective_agencies",
              "digital_goods_applications",
              "digital_goods_games",
              "digital_goods_large_volume",
              "digital_goods_media",
              "direct_marketing_catalog_merchant",
              "direct_marketing_combination_catalog_and_retail_merchant",
              "direct_marketing_inbound_telemarketing",
              "direct_marketing_insurance_services",
              "direct_marketing_other",
              "direct_marketing_outbound_telemarketing",
              "direct_marketing_subscription",
              "direct_marketing_travel",
              "discount_stores",
              "doctors",
              "door_to_door_sales",
              "drapery_window_covering_and_upholstery_stores",
              "drinking_places",
              "drug_stores_and_pharmacies",
              "drugs_drug_proprietaries_and_druggist_sundries",
              "dry_cleaners",
              "durable_goods",
              "duty_free_stores",
              "eating_places_restaurants",
              "educational_services",
              "electric_razor_stores",
              "electric_vehicle_charging",
              "electrical_parts_and_equipment",
              "electrical_services",
              "electronics_repair_shops",
              "electronics_stores",
              "elementary_secondary_schools",
              "emergency_services_gcas_visa_use_only",
              "employment_temp_agencies",
              "equipment_rental",
              "exterminating_services",
              "family_clothing_stores",
              "fast_food_restaurants",
              "financial_institutions",
              "fines_government_administrative_entities",
              "fireplace_fireplace_screens_and_accessories_stores",
              "floor_covering_stores",
              "florists",
              "florists_supplies_nursery_stock_and_flowers",
              "freezer_and_locker_meat_provisioners",
              "fuel_dealers_non_automotive",
              "funeral_services_crematories",
              "furniture_home_furnishings_and_equipment_stores_except_appliances",
              "furniture_repair_refinishing",
              "furriers_and_fur_shops",
              "general_services",
              "gift_card_novelty_and_souvenir_shops",
              "glass_paint_and_wallpaper_stores",
              "glassware_crystal_stores",
              "golf_courses_public",
              "government_licensed_horse_dog_racing_us_region_only",
              "government_licensed_online_casions_online_gambling_us_region_only",
              "government_owned_lotteries_non_us_region",
              "government_owned_lotteries_us_region_only",
              "government_services",
              "grocery_stores_supermarkets",
              "hardware_equipment_and_supplies",
              "hardware_stores",
              "health_and_beauty_spas",
              "hearing_aids_sales_and_supplies",
              "heating_plumbing_a_c",
              "hobby_toy_and_game_shops",
              "home_supply_warehouse_stores",
              "hospitals",
              "hotels_motels_and_resorts",
              "household_appliance_stores",
              "industrial_supplies",
              "information_retrieval_services",
              "insurance_default",
              "insurance_underwriting_premiums",
              "intra_company_purchases",
              "jewelry_stores_watches_clocks_and_silverware_stores",
              "landscaping_services",
              "laundries",
              "laundry_cleaning_services",
              "legal_services_attorneys",
              "luggage_and_leather_goods_stores",
              "lumber_building_materials_stores",
              "manual_cash_disburse",
              "marinas_service_and_supplies",
              "marketplaces",
              "masonry_stonework_and_plaster",
              "massage_parlors",
              "medical_and_dental_labs",
              "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
              "medical_services",
              "membership_organizations",
              "mens_and_boys_clothing_and_accessories_stores",
              "mens_womens_clothing_stores",
              "metal_service_centers",
              "miscellaneous_apparel_and_accessory_shops",
              "miscellaneous_auto_dealers",
              "miscellaneous_business_services",
              "miscellaneous_food_stores",
              "miscellaneous_general_merchandise",
              "miscellaneous_general_services",
              "miscellaneous_home_furnishing_specialty_stores",
              "miscellaneous_publishing_and_printing",
              "miscellaneous_recreation_services",
              "miscellaneous_repair_shops",
              "miscellaneous_specialty_retail",
              "mobile_home_dealers",
              "motion_picture_theaters",
              "motor_freight_carriers_and_trucking",
              "motor_homes_dealers",
              "motor_vehicle_supplies_and_new_parts",
              "motorcycle_shops_and_dealers",
              "motorcycle_shops_dealers",
              "music_stores_musical_instruments_pianos_and_sheet_music",
              "news_dealers_and_newsstands",
              "non_fi_money_orders",
              "non_fi_stored_value_card_purchase_load",
              "nondurable_goods",
              "nurseries_lawn_and_garden_supply_stores",
              "nursing_personal_care",
              "office_and_commercial_furniture",
              "opticians_eyeglasses",
              "optometrists_ophthalmologist",
              "orthopedic_goods_prosthetic_devices",
              "osteopaths",
              "package_stores_beer_wine_and_liquor",
              "paints_varnishes_and_supplies",
              "parking_lots_garages",
              "passenger_railways",
              "pawn_shops",
              "pet_shops_pet_food_and_supplies",
              "petroleum_and_petroleum_products",
              "photo_developing",
              "photographic_photocopy_microfilm_equipment_and_supplies",
              "photographic_studios",
              "picture_video_production",
              "piece_goods_notions_and_other_dry_goods",
              "plumbing_heating_equipment_and_supplies",
              "political_organizations",
              "postal_services_government_only",
              "precious_stones_and_metals_watches_and_jewelry",
              "professional_services",
              "public_warehousing_and_storage",
              "quick_copy_repro_and_blueprint",
              "railroads",
              "real_estate_agents_and_managers_rentals",
              "record_stores",
              "recreational_vehicle_rentals",
              "religious_goods_stores",
              "religious_organizations",
              "roofing_siding_sheet_metal",
              "secretarial_support_services",
              "security_brokers_dealers",
              "service_stations",
              "sewing_needlework_fabric_and_piece_goods_stores",
              "shoe_repair_hat_cleaning",
              "shoe_stores",
              "small_appliance_repair",
              "snowmobile_dealers",
              "special_trade_services",
              "specialty_cleaning",
              "sporting_goods_stores",
              "sporting_recreation_camps",
              "sports_and_riding_apparel_stores",
              "sports_clubs_fields",
              "stamp_and_coin_stores",
              "stationary_office_supplies_printing_and_writing_paper",
              "stationery_stores_office_and_school_supply_stores",
              "swimming_pools_sales",
              "t_ui_travel_germany",
              "tailors_alterations",
              "tax_payments_government_agencies",
              "tax_preparation_services",
              "taxicabs_limousines",
              "telecommunication_equipment_and_telephone_sales",
              "telecommunication_services",
              "telegraph_services",
              "tent_and_awning_shops",
              "testing_laboratories",
              "theatrical_ticket_agencies",
              "timeshares",
              "tire_retreading_and_repair",
              "tolls_bridge_fees",
              "tourist_attractions_and_exhibits",
              "towing_services",
              "trailer_parks_campgrounds",
              "transportation_services",
              "travel_agencies_tour_operators",
              "truck_stop_iteration",
              "truck_utility_trailer_rentals",
              "typesetting_plate_making_and_related_services",
              "typewriter_stores",
              "u_s_federal_government_agencies_or_departments",
              "uniforms_commercial_clothing",
              "used_merchandise_and_secondhand_stores",
              "utilities",
              "variety_stores",
              "veterinary_services",
              "video_amusement_game_supplies",
              "video_game_arcades",
              "video_tape_rental_stores",
              "vocational_trade_schools",
              "watch_jewelry_repair",
              "welding_repair",
              "wholesale_clubs",
              "wig_and_toupee_stores",
              "wires_money_orders",
              "womens_accessory_and_specialty_shops",
              "womens_ready_to_wear_stores",
              "wrecking_and_salvage_yards",
            ])
            .optional(),
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          network_id: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
          terminal_id: z.coerce.string().optional(),
        })
        .optional(),
      purchase_details: z
        .object({
          flight: z
            .object({
              departure_at: z.coerce.number().optional(),
              passenger_name: z.coerce.string().optional(),
              refundable: z.coerce.boolean().optional(),
              segments: z
                .array(
                  z.object({
                    arrival_airport_code: z.coerce.string().optional(),
                    carrier: z.coerce.string().optional(),
                    departure_airport_code: z.coerce.string().optional(),
                    flight_number: z.coerce.string().optional(),
                    service_class: z.coerce.string().optional(),
                    stopover_allowed: z.coerce.boolean().optional(),
                  }),
                )
                .optional(),
              travel_agency: z.coerce.string().optional(),
            })
            .optional(),
          fuel: z
            .object({
              type: z
                .enum([
                  "diesel",
                  "other",
                  "unleaded_plus",
                  "unleaded_regular",
                  "unleaded_super",
                ])
                .optional(),
              unit: z.enum(["liter", "us_gallon"]).optional(),
              unit_cost_decimal: z.coerce.string().optional(),
              volume_decimal: z.coerce.string().optional(),
            })
            .optional(),
          lodging: z
            .object({
              check_in_at: z.coerce.number().optional(),
              nights: z.coerce.number().optional(),
            })
            .optional(),
          receipt: z
            .array(
              z.object({
                description: z.coerce.string().optional(),
                quantity: z.coerce.string().optional(),
                total: z.coerce.number().optional(),
                unit_cost: z.coerce.number().optional(),
              }),
            )
            .optional(),
          reference: z.coerce.string().optional(),
        })
        .optional(),
    })

  const postTestHelpersIssuingTransactionsCreateForceCaptureResponseValidator =
    responseValidationFactory([["200", s_issuing_transaction]], s_error)

  router.post(
    "postTestHelpersIssuingTransactionsCreateForceCapture",
    "/v1/test_helpers/issuing/transactions/create_force_capture",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingTransactionsCreateForceCaptureBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingTransactionsCreateForceCapture(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersIssuingTransactionsCreateForceCaptureResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingTransactionsCreateUnlinkedRefundBodySchema =
    z.object({
      amount: z.coerce.number(),
      card: z.coerce.string(),
      currency: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      merchant_data: z
        .object({
          category: z
            .enum([
              "ac_refrigeration_repair",
              "accounting_bookkeeping_services",
              "advertising_services",
              "agricultural_cooperative",
              "airlines_air_carriers",
              "airports_flying_fields",
              "ambulance_services",
              "amusement_parks_carnivals",
              "antique_reproductions",
              "antique_shops",
              "aquariums",
              "architectural_surveying_services",
              "art_dealers_and_galleries",
              "artists_supply_and_craft_shops",
              "auto_and_home_supply_stores",
              "auto_body_repair_shops",
              "auto_paint_shops",
              "auto_service_shops",
              "automated_cash_disburse",
              "automated_fuel_dispensers",
              "automobile_associations",
              "automotive_parts_and_accessories_stores",
              "automotive_tire_stores",
              "bail_and_bond_payments",
              "bakeries",
              "bands_orchestras",
              "barber_and_beauty_shops",
              "betting_casino_gambling",
              "bicycle_shops",
              "billiard_pool_establishments",
              "boat_dealers",
              "boat_rentals_and_leases",
              "book_stores",
              "books_periodicals_and_newspapers",
              "bowling_alleys",
              "bus_lines",
              "business_secretarial_schools",
              "buying_shopping_services",
              "cable_satellite_and_other_pay_television_and_radio",
              "camera_and_photographic_supply_stores",
              "candy_nut_and_confectionery_stores",
              "car_and_truck_dealers_new_used",
              "car_and_truck_dealers_used_only",
              "car_rental_agencies",
              "car_washes",
              "carpentry_services",
              "carpet_upholstery_cleaning",
              "caterers",
              "charitable_and_social_service_organizations_fundraising",
              "chemicals_and_allied_products",
              "child_care_services",
              "childrens_and_infants_wear_stores",
              "chiropodists_podiatrists",
              "chiropractors",
              "cigar_stores_and_stands",
              "civic_social_fraternal_associations",
              "cleaning_and_maintenance",
              "clothing_rental",
              "colleges_universities",
              "commercial_equipment",
              "commercial_footwear",
              "commercial_photography_art_and_graphics",
              "commuter_transport_and_ferries",
              "computer_network_services",
              "computer_programming",
              "computer_repair",
              "computer_software_stores",
              "computers_peripherals_and_software",
              "concrete_work_services",
              "construction_materials",
              "consulting_public_relations",
              "correspondence_schools",
              "cosmetic_stores",
              "counseling_services",
              "country_clubs",
              "courier_services",
              "court_costs",
              "credit_reporting_agencies",
              "cruise_lines",
              "dairy_products_stores",
              "dance_hall_studios_schools",
              "dating_escort_services",
              "dentists_orthodontists",
              "department_stores",
              "detective_agencies",
              "digital_goods_applications",
              "digital_goods_games",
              "digital_goods_large_volume",
              "digital_goods_media",
              "direct_marketing_catalog_merchant",
              "direct_marketing_combination_catalog_and_retail_merchant",
              "direct_marketing_inbound_telemarketing",
              "direct_marketing_insurance_services",
              "direct_marketing_other",
              "direct_marketing_outbound_telemarketing",
              "direct_marketing_subscription",
              "direct_marketing_travel",
              "discount_stores",
              "doctors",
              "door_to_door_sales",
              "drapery_window_covering_and_upholstery_stores",
              "drinking_places",
              "drug_stores_and_pharmacies",
              "drugs_drug_proprietaries_and_druggist_sundries",
              "dry_cleaners",
              "durable_goods",
              "duty_free_stores",
              "eating_places_restaurants",
              "educational_services",
              "electric_razor_stores",
              "electric_vehicle_charging",
              "electrical_parts_and_equipment",
              "electrical_services",
              "electronics_repair_shops",
              "electronics_stores",
              "elementary_secondary_schools",
              "emergency_services_gcas_visa_use_only",
              "employment_temp_agencies",
              "equipment_rental",
              "exterminating_services",
              "family_clothing_stores",
              "fast_food_restaurants",
              "financial_institutions",
              "fines_government_administrative_entities",
              "fireplace_fireplace_screens_and_accessories_stores",
              "floor_covering_stores",
              "florists",
              "florists_supplies_nursery_stock_and_flowers",
              "freezer_and_locker_meat_provisioners",
              "fuel_dealers_non_automotive",
              "funeral_services_crematories",
              "furniture_home_furnishings_and_equipment_stores_except_appliances",
              "furniture_repair_refinishing",
              "furriers_and_fur_shops",
              "general_services",
              "gift_card_novelty_and_souvenir_shops",
              "glass_paint_and_wallpaper_stores",
              "glassware_crystal_stores",
              "golf_courses_public",
              "government_licensed_horse_dog_racing_us_region_only",
              "government_licensed_online_casions_online_gambling_us_region_only",
              "government_owned_lotteries_non_us_region",
              "government_owned_lotteries_us_region_only",
              "government_services",
              "grocery_stores_supermarkets",
              "hardware_equipment_and_supplies",
              "hardware_stores",
              "health_and_beauty_spas",
              "hearing_aids_sales_and_supplies",
              "heating_plumbing_a_c",
              "hobby_toy_and_game_shops",
              "home_supply_warehouse_stores",
              "hospitals",
              "hotels_motels_and_resorts",
              "household_appliance_stores",
              "industrial_supplies",
              "information_retrieval_services",
              "insurance_default",
              "insurance_underwriting_premiums",
              "intra_company_purchases",
              "jewelry_stores_watches_clocks_and_silverware_stores",
              "landscaping_services",
              "laundries",
              "laundry_cleaning_services",
              "legal_services_attorneys",
              "luggage_and_leather_goods_stores",
              "lumber_building_materials_stores",
              "manual_cash_disburse",
              "marinas_service_and_supplies",
              "marketplaces",
              "masonry_stonework_and_plaster",
              "massage_parlors",
              "medical_and_dental_labs",
              "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
              "medical_services",
              "membership_organizations",
              "mens_and_boys_clothing_and_accessories_stores",
              "mens_womens_clothing_stores",
              "metal_service_centers",
              "miscellaneous_apparel_and_accessory_shops",
              "miscellaneous_auto_dealers",
              "miscellaneous_business_services",
              "miscellaneous_food_stores",
              "miscellaneous_general_merchandise",
              "miscellaneous_general_services",
              "miscellaneous_home_furnishing_specialty_stores",
              "miscellaneous_publishing_and_printing",
              "miscellaneous_recreation_services",
              "miscellaneous_repair_shops",
              "miscellaneous_specialty_retail",
              "mobile_home_dealers",
              "motion_picture_theaters",
              "motor_freight_carriers_and_trucking",
              "motor_homes_dealers",
              "motor_vehicle_supplies_and_new_parts",
              "motorcycle_shops_and_dealers",
              "motorcycle_shops_dealers",
              "music_stores_musical_instruments_pianos_and_sheet_music",
              "news_dealers_and_newsstands",
              "non_fi_money_orders",
              "non_fi_stored_value_card_purchase_load",
              "nondurable_goods",
              "nurseries_lawn_and_garden_supply_stores",
              "nursing_personal_care",
              "office_and_commercial_furniture",
              "opticians_eyeglasses",
              "optometrists_ophthalmologist",
              "orthopedic_goods_prosthetic_devices",
              "osteopaths",
              "package_stores_beer_wine_and_liquor",
              "paints_varnishes_and_supplies",
              "parking_lots_garages",
              "passenger_railways",
              "pawn_shops",
              "pet_shops_pet_food_and_supplies",
              "petroleum_and_petroleum_products",
              "photo_developing",
              "photographic_photocopy_microfilm_equipment_and_supplies",
              "photographic_studios",
              "picture_video_production",
              "piece_goods_notions_and_other_dry_goods",
              "plumbing_heating_equipment_and_supplies",
              "political_organizations",
              "postal_services_government_only",
              "precious_stones_and_metals_watches_and_jewelry",
              "professional_services",
              "public_warehousing_and_storage",
              "quick_copy_repro_and_blueprint",
              "railroads",
              "real_estate_agents_and_managers_rentals",
              "record_stores",
              "recreational_vehicle_rentals",
              "religious_goods_stores",
              "religious_organizations",
              "roofing_siding_sheet_metal",
              "secretarial_support_services",
              "security_brokers_dealers",
              "service_stations",
              "sewing_needlework_fabric_and_piece_goods_stores",
              "shoe_repair_hat_cleaning",
              "shoe_stores",
              "small_appliance_repair",
              "snowmobile_dealers",
              "special_trade_services",
              "specialty_cleaning",
              "sporting_goods_stores",
              "sporting_recreation_camps",
              "sports_and_riding_apparel_stores",
              "sports_clubs_fields",
              "stamp_and_coin_stores",
              "stationary_office_supplies_printing_and_writing_paper",
              "stationery_stores_office_and_school_supply_stores",
              "swimming_pools_sales",
              "t_ui_travel_germany",
              "tailors_alterations",
              "tax_payments_government_agencies",
              "tax_preparation_services",
              "taxicabs_limousines",
              "telecommunication_equipment_and_telephone_sales",
              "telecommunication_services",
              "telegraph_services",
              "tent_and_awning_shops",
              "testing_laboratories",
              "theatrical_ticket_agencies",
              "timeshares",
              "tire_retreading_and_repair",
              "tolls_bridge_fees",
              "tourist_attractions_and_exhibits",
              "towing_services",
              "trailer_parks_campgrounds",
              "transportation_services",
              "travel_agencies_tour_operators",
              "truck_stop_iteration",
              "truck_utility_trailer_rentals",
              "typesetting_plate_making_and_related_services",
              "typewriter_stores",
              "u_s_federal_government_agencies_or_departments",
              "uniforms_commercial_clothing",
              "used_merchandise_and_secondhand_stores",
              "utilities",
              "variety_stores",
              "veterinary_services",
              "video_amusement_game_supplies",
              "video_game_arcades",
              "video_tape_rental_stores",
              "vocational_trade_schools",
              "watch_jewelry_repair",
              "welding_repair",
              "wholesale_clubs",
              "wig_and_toupee_stores",
              "wires_money_orders",
              "womens_accessory_and_specialty_shops",
              "womens_ready_to_wear_stores",
              "wrecking_and_salvage_yards",
            ])
            .optional(),
          city: z.coerce.string().optional(),
          country: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          network_id: z.coerce.string().optional(),
          postal_code: z.coerce.string().optional(),
          state: z.coerce.string().optional(),
          terminal_id: z.coerce.string().optional(),
        })
        .optional(),
      purchase_details: z
        .object({
          flight: z
            .object({
              departure_at: z.coerce.number().optional(),
              passenger_name: z.coerce.string().optional(),
              refundable: z.coerce.boolean().optional(),
              segments: z
                .array(
                  z.object({
                    arrival_airport_code: z.coerce.string().optional(),
                    carrier: z.coerce.string().optional(),
                    departure_airport_code: z.coerce.string().optional(),
                    flight_number: z.coerce.string().optional(),
                    service_class: z.coerce.string().optional(),
                    stopover_allowed: z.coerce.boolean().optional(),
                  }),
                )
                .optional(),
              travel_agency: z.coerce.string().optional(),
            })
            .optional(),
          fuel: z
            .object({
              type: z
                .enum([
                  "diesel",
                  "other",
                  "unleaded_plus",
                  "unleaded_regular",
                  "unleaded_super",
                ])
                .optional(),
              unit: z.enum(["liter", "us_gallon"]).optional(),
              unit_cost_decimal: z.coerce.string().optional(),
              volume_decimal: z.coerce.string().optional(),
            })
            .optional(),
          lodging: z
            .object({
              check_in_at: z.coerce.number().optional(),
              nights: z.coerce.number().optional(),
            })
            .optional(),
          receipt: z
            .array(
              z.object({
                description: z.coerce.string().optional(),
                quantity: z.coerce.string().optional(),
                total: z.coerce.number().optional(),
                unit_cost: z.coerce.number().optional(),
              }),
            )
            .optional(),
          reference: z.coerce.string().optional(),
        })
        .optional(),
    })

  const postTestHelpersIssuingTransactionsCreateUnlinkedRefundResponseValidator =
    responseValidationFactory([["200", s_issuing_transaction]], s_error)

  router.post(
    "postTestHelpersIssuingTransactionsCreateUnlinkedRefund",
    "/v1/test_helpers/issuing/transactions/create_unlinked_refund",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingTransactionsCreateUnlinkedRefundBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingTransactionsCreateUnlinkedRefund(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersIssuingTransactionsCreateUnlinkedRefundResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersIssuingTransactionsTransactionRefundParamSchema =
    z.object({ transaction: z.coerce.string() })

  const postTestHelpersIssuingTransactionsTransactionRefundBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      refund_amount: z.coerce.number().optional(),
    })
    .optional()

  const postTestHelpersIssuingTransactionsTransactionRefundResponseValidator =
    responseValidationFactory([["200", s_issuing_transaction]], s_error)

  router.post(
    "postTestHelpersIssuingTransactionsTransactionRefund",
    "/v1/test_helpers/issuing/transactions/:transaction/refund",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersIssuingTransactionsTransactionRefundParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersIssuingTransactionsTransactionRefundBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersIssuingTransactionsTransactionRefund(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersIssuingTransactionsTransactionRefundResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersRefundsRefundExpireParamSchema = z.object({
    refund: z.coerce.string(),
  })

  const postTestHelpersRefundsRefundExpireBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTestHelpersRefundsRefundExpireResponseValidator =
    responseValidationFactory([["200", s_refund]], s_error)

  router.post(
    "postTestHelpersRefundsRefundExpire",
    "/v1/test_helpers/refunds/:refund/expire",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersRefundsRefundExpireParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersRefundsRefundExpireBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersRefundsRefundExpire(input, ctx)

      ctx.body = postTestHelpersRefundsRefundExpireResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTerminalReadersReaderPresentPaymentMethodParamSchema =
    z.object({ reader: z.coerce.string() })

  const postTestHelpersTerminalReadersReaderPresentPaymentMethodBodySchema = z
    .object({
      amount_tip: z.coerce.number().optional(),
      card_present: z
        .object({ number: z.coerce.string().optional() })
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      interac_present: z
        .object({ number: z.coerce.string().optional() })
        .optional(),
      type: z.enum(["card_present", "interac_present"]).optional(),
    })
    .optional()

  const postTestHelpersTerminalReadersReaderPresentPaymentMethodResponseValidator =
    responseValidationFactory([["200", s_terminal_reader]], s_error)

  router.post(
    "postTestHelpersTerminalReadersReaderPresentPaymentMethod",
    "/v1/test_helpers/terminal/readers/:reader/present_payment_method",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersTerminalReadersReaderPresentPaymentMethodParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTerminalReadersReaderPresentPaymentMethodBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTerminalReadersReaderPresentPaymentMethod(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersTerminalReadersReaderPresentPaymentMethodResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getTestHelpersTestClocksQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getTestHelpersTestClocksBodySchema = z.object({}).optional()

  const getTestHelpersTestClocksResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_test_helpers_test_clock),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getTestHelpersTestClocks",
    "/v1/test_helpers/test_clocks",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getTestHelpersTestClocksQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTestHelpersTestClocksBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTestHelpersTestClocks(
        input,
        ctx,
      )

      ctx.body = getTestHelpersTestClocksResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTestClocksBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    frozen_time: z.coerce.number(),
    name: z.coerce.string().optional(),
  })

  const postTestHelpersTestClocksResponseValidator = responseValidationFactory(
    [["200", s_test_helpers_test_clock]],
    s_error,
  )

  router.post(
    "postTestHelpersTestClocks",
    "/v1/test_helpers/test_clocks",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTestClocksBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTestHelpersTestClocks(
        input,
        ctx,
      )

      ctx.body = postTestHelpersTestClocksResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteTestHelpersTestClocksTestClockParamSchema = z.object({
    test_clock: z.coerce.string(),
  })

  const deleteTestHelpersTestClocksTestClockBodySchema = z.object({}).optional()

  const deleteTestHelpersTestClocksTestClockResponseValidator =
    responseValidationFactory(
      [["200", s_deleted_test_helpers_test_clock]],
      s_error,
    )

  router.delete(
    "deleteTestHelpersTestClocksTestClock",
    "/v1/test_helpers/test_clocks/:testClock",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteTestHelpersTestClocksTestClockParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteTestHelpersTestClocksTestClockBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteTestHelpersTestClocksTestClock(input, ctx)

      ctx.body = deleteTestHelpersTestClocksTestClockResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getTestHelpersTestClocksTestClockParamSchema = z.object({
    test_clock: z.coerce.string(),
  })

  const getTestHelpersTestClocksTestClockQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTestHelpersTestClocksTestClockBodySchema = z.object({}).optional()

  const getTestHelpersTestClocksTestClockResponseValidator =
    responseValidationFactory([["200", s_test_helpers_test_clock]], s_error)

  router.get(
    "getTestHelpersTestClocksTestClock",
    "/v1/test_helpers/test_clocks/:testClock",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTestHelpersTestClocksTestClockParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTestHelpersTestClocksTestClockQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTestHelpersTestClocksTestClockBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTestHelpersTestClocksTestClock(input, ctx)

      ctx.body = getTestHelpersTestClocksTestClockResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTestClocksTestClockAdvanceParamSchema = z.object({
    test_clock: z.coerce.string(),
  })

  const postTestHelpersTestClocksTestClockAdvanceBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    frozen_time: z.coerce.number(),
  })

  const postTestHelpersTestClocksTestClockAdvanceResponseValidator =
    responseValidationFactory([["200", s_test_helpers_test_clock]], s_error)

  router.post(
    "postTestHelpersTestClocksTestClockAdvance",
    "/v1/test_helpers/test_clocks/:testClock/advance",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersTestClocksTestClockAdvanceParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTestClocksTestClockAdvanceBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTestClocksTestClockAdvance(
          input,
          ctx,
        )

      ctx.body = postTestHelpersTestClocksTestClockAdvanceResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTreasuryInboundTransfersIdFailParamSchema = z.object({
    id: z.coerce.string(),
  })

  const postTestHelpersTreasuryInboundTransfersIdFailBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      failure_details: z
        .object({
          code: z
            .enum([
              "account_closed",
              "account_frozen",
              "bank_account_restricted",
              "bank_ownership_changed",
              "debit_not_authorized",
              "incorrect_account_holder_address",
              "incorrect_account_holder_name",
              "incorrect_account_holder_tax_id",
              "insufficient_funds",
              "invalid_account_number",
              "invalid_currency",
              "no_account",
              "other",
            ])
            .optional(),
        })
        .optional(),
    })
    .optional()

  const postTestHelpersTreasuryInboundTransfersIdFailResponseValidator =
    responseValidationFactory([["200", s_treasury_inbound_transfer]], s_error)

  router.post(
    "postTestHelpersTreasuryInboundTransfersIdFail",
    "/v1/test_helpers/treasury/inbound_transfers/:id/fail",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersTreasuryInboundTransfersIdFailParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTreasuryInboundTransfersIdFailBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTreasuryInboundTransfersIdFail(
          input,
          ctx,
        )

      ctx.body = postTestHelpersTreasuryInboundTransfersIdFailResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTreasuryInboundTransfersIdReturnParamSchema = z.object({
    id: z.coerce.string(),
  })

  const postTestHelpersTreasuryInboundTransfersIdReturnBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTestHelpersTreasuryInboundTransfersIdReturnResponseValidator =
    responseValidationFactory([["200", s_treasury_inbound_transfer]], s_error)

  router.post(
    "postTestHelpersTreasuryInboundTransfersIdReturn",
    "/v1/test_helpers/treasury/inbound_transfers/:id/return",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersTreasuryInboundTransfersIdReturnParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTreasuryInboundTransfersIdReturnBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTreasuryInboundTransfersIdReturn(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersTreasuryInboundTransfersIdReturnResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTreasuryInboundTransfersIdSucceedParamSchema = z.object({
    id: z.coerce.string(),
  })

  const postTestHelpersTreasuryInboundTransfersIdSucceedBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTestHelpersTreasuryInboundTransfersIdSucceedResponseValidator =
    responseValidationFactory([["200", s_treasury_inbound_transfer]], s_error)

  router.post(
    "postTestHelpersTreasuryInboundTransfersIdSucceed",
    "/v1/test_helpers/treasury/inbound_transfers/:id/succeed",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersTreasuryInboundTransfersIdSucceedParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTreasuryInboundTransfersIdSucceedBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTreasuryInboundTransfersIdSucceed(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersTreasuryInboundTransfersIdSucceedResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTreasuryOutboundPaymentsIdFailParamSchema = z.object({
    id: z.coerce.string(),
  })

  const postTestHelpersTreasuryOutboundPaymentsIdFailBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTestHelpersTreasuryOutboundPaymentsIdFailResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_payment]], s_error)

  router.post(
    "postTestHelpersTreasuryOutboundPaymentsIdFail",
    "/v1/test_helpers/treasury/outbound_payments/:id/fail",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersTreasuryOutboundPaymentsIdFailParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTreasuryOutboundPaymentsIdFailBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTreasuryOutboundPaymentsIdFail(
          input,
          ctx,
        )

      ctx.body = postTestHelpersTreasuryOutboundPaymentsIdFailResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTreasuryOutboundPaymentsIdPostParamSchema = z.object({
    id: z.coerce.string(),
  })

  const postTestHelpersTreasuryOutboundPaymentsIdPostBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTestHelpersTreasuryOutboundPaymentsIdPostResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_payment]], s_error)

  router.post(
    "postTestHelpersTreasuryOutboundPaymentsIdPost",
    "/v1/test_helpers/treasury/outbound_payments/:id/post",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersTreasuryOutboundPaymentsIdPostParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTreasuryOutboundPaymentsIdPostBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTreasuryOutboundPaymentsIdPost(
          input,
          ctx,
        )

      ctx.body = postTestHelpersTreasuryOutboundPaymentsIdPostResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTreasuryOutboundPaymentsIdReturnParamSchema = z.object({
    id: z.coerce.string(),
  })

  const postTestHelpersTreasuryOutboundPaymentsIdReturnBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      returned_details: z
        .object({
          code: z
            .enum([
              "account_closed",
              "account_frozen",
              "bank_account_restricted",
              "bank_ownership_changed",
              "declined",
              "incorrect_account_holder_name",
              "invalid_account_number",
              "invalid_currency",
              "no_account",
              "other",
            ])
            .optional(),
        })
        .optional(),
    })
    .optional()

  const postTestHelpersTreasuryOutboundPaymentsIdReturnResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_payment]], s_error)

  router.post(
    "postTestHelpersTreasuryOutboundPaymentsIdReturn",
    "/v1/test_helpers/treasury/outbound_payments/:id/return",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersTreasuryOutboundPaymentsIdReturnParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTreasuryOutboundPaymentsIdReturnBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTreasuryOutboundPaymentsIdReturn(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersTreasuryOutboundPaymentsIdReturnResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTreasuryOutboundTransfersOutboundTransferFailParamSchema =
    z.object({ outbound_transfer: z.coerce.string() })

  const postTestHelpersTreasuryOutboundTransfersOutboundTransferFailBodySchema =
    z.object({ expand: z.array(z.coerce.string()).optional() }).optional()

  const postTestHelpersTreasuryOutboundTransfersOutboundTransferFailResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_transfer]], s_error)

  router.post(
    "postTestHelpersTreasuryOutboundTransfersOutboundTransferFail",
    "/v1/test_helpers/treasury/outbound_transfers/:outboundTransfer/fail",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersTreasuryOutboundTransfersOutboundTransferFailParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTreasuryOutboundTransfersOutboundTransferFailBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTreasuryOutboundTransfersOutboundTransferFail(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersTreasuryOutboundTransfersOutboundTransferFailResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTreasuryOutboundTransfersOutboundTransferPostParamSchema =
    z.object({ outbound_transfer: z.coerce.string() })

  const postTestHelpersTreasuryOutboundTransfersOutboundTransferPostBodySchema =
    z.object({ expand: z.array(z.coerce.string()).optional() }).optional()

  const postTestHelpersTreasuryOutboundTransfersOutboundTransferPostResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_transfer]], s_error)

  router.post(
    "postTestHelpersTreasuryOutboundTransfersOutboundTransferPost",
    "/v1/test_helpers/treasury/outbound_transfers/:outboundTransfer/post",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersTreasuryOutboundTransfersOutboundTransferPostParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTreasuryOutboundTransfersOutboundTransferPostBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTreasuryOutboundTransfersOutboundTransferPost(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersTreasuryOutboundTransfersOutboundTransferPostResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTreasuryOutboundTransfersOutboundTransferReturnParamSchema =
    z.object({ outbound_transfer: z.coerce.string() })

  const postTestHelpersTreasuryOutboundTransfersOutboundTransferReturnBodySchema =
    z
      .object({
        expand: z.array(z.coerce.string()).optional(),
        returned_details: z
          .object({
            code: z
              .enum([
                "account_closed",
                "account_frozen",
                "bank_account_restricted",
                "bank_ownership_changed",
                "declined",
                "incorrect_account_holder_name",
                "invalid_account_number",
                "invalid_currency",
                "no_account",
                "other",
              ])
              .optional(),
          })
          .optional(),
      })
      .optional()

  const postTestHelpersTreasuryOutboundTransfersOutboundTransferReturnResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_transfer]], s_error)

  router.post(
    "postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn",
    "/v1/test_helpers/treasury/outbound_transfers/:outboundTransfer/return",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTestHelpersTreasuryOutboundTransfersOutboundTransferReturnParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTreasuryOutboundTransfersOutboundTransferReturnBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn(
          input,
          ctx,
        )

      ctx.body =
        postTestHelpersTreasuryOutboundTransfersOutboundTransferReturnResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTreasuryReceivedCreditsBodySchema = z.object({
    amount: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    initiating_payment_method_details: z
      .object({
        type: z.enum(["us_bank_account"]),
        us_bank_account: z
          .object({
            account_holder_name: z.coerce.string().optional(),
            account_number: z.coerce.string().optional(),
            routing_number: z.coerce.string().optional(),
          })
          .optional(),
      })
      .optional(),
    network: z.enum(["ach", "us_domestic_wire"]),
  })

  const postTestHelpersTreasuryReceivedCreditsResponseValidator =
    responseValidationFactory([["200", s_treasury_received_credit]], s_error)

  router.post(
    "postTestHelpersTreasuryReceivedCredits",
    "/v1/test_helpers/treasury/received_credits",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTreasuryReceivedCreditsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTreasuryReceivedCredits(input, ctx)

      ctx.body = postTestHelpersTreasuryReceivedCreditsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTestHelpersTreasuryReceivedDebitsBodySchema = z.object({
    amount: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    initiating_payment_method_details: z
      .object({
        type: z.enum(["us_bank_account"]),
        us_bank_account: z
          .object({
            account_holder_name: z.coerce.string().optional(),
            account_number: z.coerce.string().optional(),
            routing_number: z.coerce.string().optional(),
          })
          .optional(),
      })
      .optional(),
    network: z.enum(["ach"]),
  })

  const postTestHelpersTreasuryReceivedDebitsResponseValidator =
    responseValidationFactory([["200", s_treasury_received_debit]], s_error)

  router.post(
    "postTestHelpersTreasuryReceivedDebits",
    "/v1/test_helpers/treasury/received_debits",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTestHelpersTreasuryReceivedDebitsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTestHelpersTreasuryReceivedDebits(input, ctx)

      ctx.body = postTestHelpersTreasuryReceivedDebitsResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTokensBodySchema = z
    .object({
      account: z
        .object({
          business_type: z
            .enum(["company", "government_entity", "individual", "non_profit"])
            .optional(),
          company: z
            .object({
              address: z
                .object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                })
                .optional(),
              address_kana: z
                .object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                  town: z.coerce.string().optional(),
                })
                .optional(),
              address_kanji: z
                .object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                  town: z.coerce.string().optional(),
                })
                .optional(),
              directors_provided: z.coerce.boolean().optional(),
              executives_provided: z.coerce.boolean().optional(),
              export_license_id: z.coerce.string().optional(),
              export_purpose_code: z.coerce.string().optional(),
              name: z.coerce.string().optional(),
              name_kana: z.coerce.string().optional(),
              name_kanji: z.coerce.string().optional(),
              owners_provided: z.coerce.boolean().optional(),
              ownership_declaration: z
                .object({
                  date: z.coerce.number().optional(),
                  ip: z.coerce.string().optional(),
                  user_agent: z.coerce.string().optional(),
                })
                .optional(),
              ownership_declaration_shown_and_signed: z.coerce
                .boolean()
                .optional(),
              phone: z.coerce.string().optional(),
              registration_number: z.coerce.string().optional(),
              structure: z
                .enum([
                  "",
                  "free_zone_establishment",
                  "free_zone_llc",
                  "government_instrumentality",
                  "governmental_unit",
                  "incorporated_non_profit",
                  "incorporated_partnership",
                  "limited_liability_partnership",
                  "llc",
                  "multi_member_llc",
                  "private_company",
                  "private_corporation",
                  "private_partnership",
                  "public_company",
                  "public_corporation",
                  "public_partnership",
                  "single_member_llc",
                  "sole_establishment",
                  "sole_proprietorship",
                  "tax_exempt_government_instrumentality",
                  "unincorporated_association",
                  "unincorporated_non_profit",
                  "unincorporated_partnership",
                ])
                .optional(),
              tax_id: z.coerce.string().optional(),
              tax_id_registrar: z.coerce.string().optional(),
              vat_id: z.coerce.string().optional(),
              verification: z
                .object({
                  document: z
                    .object({
                      back: z.coerce.string().optional(),
                      front: z.coerce.string().optional(),
                    })
                    .optional(),
                })
                .optional(),
            })
            .optional(),
          individual: z
            .object({
              address: z
                .object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                })
                .optional(),
              address_kana: z
                .object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                  town: z.coerce.string().optional(),
                })
                .optional(),
              address_kanji: z
                .object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                  town: z.coerce.string().optional(),
                })
                .optional(),
              dob: z.union([
                z.object({
                  day: z.coerce.number(),
                  month: z.coerce.number(),
                  year: z.coerce.number(),
                }),
                z.enum([""]),
              ]),
              email: z.coerce.string().optional(),
              first_name: z.coerce.string().optional(),
              first_name_kana: z.coerce.string().optional(),
              first_name_kanji: z.coerce.string().optional(),
              full_name_aliases: z.union([
                z.array(z.coerce.string()),
                z.enum([""]),
              ]),
              gender: z.coerce.string().optional(),
              id_number: z.coerce.string().optional(),
              id_number_secondary: z.coerce.string().optional(),
              last_name: z.coerce.string().optional(),
              last_name_kana: z.coerce.string().optional(),
              last_name_kanji: z.coerce.string().optional(),
              maiden_name: z.coerce.string().optional(),
              metadata: z.union([z.object({}), z.enum([""])]),
              phone: z.coerce.string().optional(),
              political_exposure: z.enum(["existing", "none"]).optional(),
              registered_address: z
                .object({
                  city: z.coerce.string().optional(),
                  country: z.coerce.string().optional(),
                  line1: z.coerce.string().optional(),
                  line2: z.coerce.string().optional(),
                  postal_code: z.coerce.string().optional(),
                  state: z.coerce.string().optional(),
                })
                .optional(),
              ssn_last_4: z.coerce.string().optional(),
              verification: z
                .object({
                  additional_document: z
                    .object({
                      back: z.coerce.string().optional(),
                      front: z.coerce.string().optional(),
                    })
                    .optional(),
                  document: z
                    .object({
                      back: z.coerce.string().optional(),
                      front: z.coerce.string().optional(),
                    })
                    .optional(),
                })
                .optional(),
            })
            .optional(),
          tos_shown_and_accepted: z.coerce.boolean().optional(),
        })
        .optional(),
      bank_account: z
        .object({
          account_holder_name: z.coerce.string().optional(),
          account_holder_type: z.enum(["company", "individual"]).optional(),
          account_number: z.coerce.string(),
          account_type: z
            .enum(["checking", "futsu", "savings", "toza"])
            .optional(),
          country: z.coerce.string(),
          currency: z.coerce.string().optional(),
          routing_number: z.coerce.string().optional(),
        })
        .optional(),
      card: z.union([
        z.object({
          address_city: z.coerce.string().optional(),
          address_country: z.coerce.string().optional(),
          address_line1: z.coerce.string().optional(),
          address_line2: z.coerce.string().optional(),
          address_state: z.coerce.string().optional(),
          address_zip: z.coerce.string().optional(),
          currency: z.coerce.string().optional(),
          cvc: z.coerce.string().optional(),
          exp_month: z.coerce.string(),
          exp_year: z.coerce.string(),
          name: z.coerce.string().optional(),
          number: z.coerce.string(),
        }),
        z.coerce.string(),
      ]),
      customer: z.coerce.string().optional(),
      cvc_update: z.object({ cvc: z.coerce.string() }).optional(),
      expand: z.array(z.coerce.string()).optional(),
      person: z
        .object({
          address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          address_kana: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
              town: z.coerce.string().optional(),
            })
            .optional(),
          address_kanji: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
              town: z.coerce.string().optional(),
            })
            .optional(),
          dob: z.union([
            z.object({
              day: z.coerce.number(),
              month: z.coerce.number(),
              year: z.coerce.number(),
            }),
            z.enum([""]),
          ]),
          documents: z
            .object({
              company_authorization: z
                .object({
                  files: z
                    .array(z.union([z.coerce.string(), z.enum([""])]))
                    .optional(),
                })
                .optional(),
              passport: z
                .object({
                  files: z
                    .array(z.union([z.coerce.string(), z.enum([""])]))
                    .optional(),
                })
                .optional(),
              visa: z
                .object({
                  files: z
                    .array(z.union([z.coerce.string(), z.enum([""])]))
                    .optional(),
                })
                .optional(),
            })
            .optional(),
          email: z.coerce.string().optional(),
          first_name: z.coerce.string().optional(),
          first_name_kana: z.coerce.string().optional(),
          first_name_kanji: z.coerce.string().optional(),
          full_name_aliases: z.union([
            z.array(z.coerce.string()),
            z.enum([""]),
          ]),
          gender: z.coerce.string().optional(),
          id_number: z.coerce.string().optional(),
          id_number_secondary: z.coerce.string().optional(),
          last_name: z.coerce.string().optional(),
          last_name_kana: z.coerce.string().optional(),
          last_name_kanji: z.coerce.string().optional(),
          maiden_name: z.coerce.string().optional(),
          metadata: z.union([z.object({}), z.enum([""])]),
          nationality: z.coerce.string().optional(),
          phone: z.coerce.string().optional(),
          political_exposure: z.coerce.string().optional(),
          registered_address: z
            .object({
              city: z.coerce.string().optional(),
              country: z.coerce.string().optional(),
              line1: z.coerce.string().optional(),
              line2: z.coerce.string().optional(),
              postal_code: z.coerce.string().optional(),
              state: z.coerce.string().optional(),
            })
            .optional(),
          relationship: z
            .object({
              director: z.coerce.boolean().optional(),
              executive: z.coerce.boolean().optional(),
              owner: z.coerce.boolean().optional(),
              percent_ownership: z.union([z.coerce.number(), z.enum([""])]),
              representative: z.coerce.boolean().optional(),
              title: z.coerce.string().optional(),
            })
            .optional(),
          ssn_last_4: z.coerce.string().optional(),
          verification: z
            .object({
              additional_document: z
                .object({
                  back: z.coerce.string().optional(),
                  front: z.coerce.string().optional(),
                })
                .optional(),
              document: z
                .object({
                  back: z.coerce.string().optional(),
                  front: z.coerce.string().optional(),
                })
                .optional(),
            })
            .optional(),
        })
        .optional(),
      pii: z.object({ id_number: z.coerce.string().optional() }).optional(),
    })
    .optional()

  const postTokensResponseValidator = responseValidationFactory(
    [["200", s_token]],
    s_error,
  )

  router.post("postTokens", "/v1/tokens", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postTokensBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postTokens(input, ctx)

    ctx.body = postTokensResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getTokensTokenParamSchema = z.object({ token: z.coerce.string() })

  const getTokensTokenQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTokensTokenBodySchema = z.object({}).optional()

  const getTokensTokenResponseValidator = responseValidationFactory(
    [["200", s_token]],
    s_error,
  )

  router.get("getTokensToken", "/v1/tokens/:token", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getTokensTokenParamSchema, ctx.params),
      query: parseRequestInput(getTokensTokenQuerySchema, ctx.query),
      body: parseRequestInput(getTokensTokenBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getTokensToken(input, ctx)

    ctx.body = getTokensTokenResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getTopupsQuerySchema = z.object({
    amount: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z.enum(["canceled", "failed", "pending", "succeeded"]).optional(),
  })

  const getTopupsBodySchema = z.object({}).optional()

  const getTopupsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_topup)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getTopups", "/v1/topups", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getTopupsQuerySchema, ctx.query),
      body: parseRequestInput(getTopupsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getTopups(input, ctx)

    ctx.body = getTopupsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postTopupsBodySchema = z.object({
    amount: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.union([z.object({}), z.enum([""])]),
    source: z.coerce.string().optional(),
    statement_descriptor: z.coerce.string().optional(),
    transfer_group: z.coerce.string().optional(),
  })

  const postTopupsResponseValidator = responseValidationFactory(
    [["200", s_topup]],
    s_error,
  )

  router.post("postTopups", "/v1/topups", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postTopupsBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postTopups(input, ctx)

    ctx.body = postTopupsResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getTopupsTopupParamSchema = z.object({ topup: z.coerce.string() })

  const getTopupsTopupQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTopupsTopupBodySchema = z.object({}).optional()

  const getTopupsTopupResponseValidator = responseValidationFactory(
    [["200", s_topup]],
    s_error,
  )

  router.get("getTopupsTopup", "/v1/topups/:topup", async (ctx, next) => {
    const input = {
      params: parseRequestInput(getTopupsTopupParamSchema, ctx.params),
      query: parseRequestInput(getTopupsTopupQuerySchema, ctx.query),
      body: parseRequestInput(getTopupsTopupBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getTopupsTopup(input, ctx)

    ctx.body = getTopupsTopupResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postTopupsTopupParamSchema = z.object({ topup: z.coerce.string() })

  const postTopupsTopupBodySchema = z
    .object({
      description: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postTopupsTopupResponseValidator = responseValidationFactory(
    [["200", s_topup]],
    s_error,
  )

  router.post("postTopupsTopup", "/v1/topups/:topup", async (ctx, next) => {
    const input = {
      params: parseRequestInput(postTopupsTopupParamSchema, ctx.params),
      query: undefined,
      body: parseRequestInput(postTopupsTopupBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postTopupsTopup(input, ctx)

    ctx.body = postTopupsTopupResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postTopupsTopupCancelParamSchema = z.object({
    topup: z.coerce.string(),
  })

  const postTopupsTopupCancelBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTopupsTopupCancelResponseValidator = responseValidationFactory(
    [["200", s_topup]],
    s_error,
  )

  router.post(
    "postTopupsTopupCancel",
    "/v1/topups/:topup/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postTopupsTopupCancelParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          postTopupsTopupCancelBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTopupsTopupCancel(
        input,
        ctx,
      )

      ctx.body = postTopupsTopupCancelResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTransfersQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    destination: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    transfer_group: z.coerce.string().optional(),
  })

  const getTransfersBodySchema = z.object({}).optional()

  const getTransfersResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_transfer)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get("getTransfers", "/v1/transfers", async (ctx, next) => {
    const input = {
      params: undefined,
      query: parseRequestInput(getTransfersQuerySchema, ctx.query),
      body: parseRequestInput(getTransfersBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.getTransfers(input, ctx)

    ctx.body = getTransfersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const postTransfersBodySchema = z.object({
    amount: z.coerce.number().optional(),
    currency: z.coerce.string(),
    description: z.coerce.string().optional(),
    destination: z.coerce.string(),
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.object({}).optional(),
    source_transaction: z.coerce.string().optional(),
    source_type: z.enum(["bank_account", "card", "fpx"]).optional(),
    transfer_group: z.coerce.string().optional(),
  })

  const postTransfersResponseValidator = responseValidationFactory(
    [["200", s_transfer]],
    s_error,
  )

  router.post("postTransfers", "/v1/transfers", async (ctx, next) => {
    const input = {
      params: undefined,
      query: undefined,
      body: parseRequestInput(postTransfersBodySchema, ctx.request.body),
    }

    const { status, body } = await implementation.postTransfers(input, ctx)

    ctx.body = postTransfersResponseValidator(status, body)
    ctx.status = status
    return next()
  })

  const getTransfersIdReversalsParamSchema = z.object({ id: z.coerce.string() })

  const getTransfersIdReversalsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getTransfersIdReversalsBodySchema = z.object({}).optional()

  const getTransfersIdReversalsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_transfer_reversal)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getTransfersIdReversals",
    "/v1/transfers/:id/reversals",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTransfersIdReversalsParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(getTransfersIdReversalsQuerySchema, ctx.query),
        body: parseRequestInput(
          getTransfersIdReversalsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTransfersIdReversals(
        input,
        ctx,
      )

      ctx.body = getTransfersIdReversalsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTransfersIdReversalsParamSchema = z.object({
    id: z.coerce.string(),
  })

  const postTransfersIdReversalsBodySchema = z
    .object({
      amount: z.coerce.number().optional(),
      description: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      refund_application_fee: z.coerce.boolean().optional(),
    })
    .optional()

  const postTransfersIdReversalsResponseValidator = responseValidationFactory(
    [["200", s_transfer_reversal]],
    s_error,
  )

  router.post(
    "postTransfersIdReversals",
    "/v1/transfers/:id/reversals",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTransfersIdReversalsParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTransfersIdReversalsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTransfersIdReversals(
        input,
        ctx,
      )

      ctx.body = postTransfersIdReversalsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTransfersTransferParamSchema = z.object({
    transfer: z.coerce.string(),
  })

  const getTransfersTransferQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTransfersTransferBodySchema = z.object({}).optional()

  const getTransfersTransferResponseValidator = responseValidationFactory(
    [["200", s_transfer]],
    s_error,
  )

  router.get(
    "getTransfersTransfer",
    "/v1/transfers/:transfer",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(getTransfersTransferParamSchema, ctx.params),
        query: parseRequestInput(getTransfersTransferQuerySchema, ctx.query),
        body: parseRequestInput(
          getTransfersTransferBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTransfersTransfer(
        input,
        ctx,
      )

      ctx.body = getTransfersTransferResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTransfersTransferParamSchema = z.object({
    transfer: z.coerce.string(),
  })

  const postTransfersTransferBodySchema = z
    .object({
      description: z.coerce.string().optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postTransfersTransferResponseValidator = responseValidationFactory(
    [["200", s_transfer]],
    s_error,
  )

  router.post(
    "postTransfersTransfer",
    "/v1/transfers/:transfer",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(postTransfersTransferParamSchema, ctx.params),
        query: undefined,
        body: parseRequestInput(
          postTransfersTransferBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTransfersTransfer(
        input,
        ctx,
      )

      ctx.body = postTransfersTransferResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTransfersTransferReversalsIdParamSchema = z.object({
    id: z.coerce.string(),
    transfer: z.coerce.string(),
  })

  const getTransfersTransferReversalsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTransfersTransferReversalsIdBodySchema = z.object({}).optional()

  const getTransfersTransferReversalsIdResponseValidator =
    responseValidationFactory([["200", s_transfer_reversal]], s_error)

  router.get(
    "getTransfersTransferReversalsId",
    "/v1/transfers/:transfer/reversals/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTransfersTransferReversalsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTransfersTransferReversalsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTransfersTransferReversalsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTransfersTransferReversalsId(input, ctx)

      ctx.body = getTransfersTransferReversalsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTransfersTransferReversalsIdParamSchema = z.object({
    id: z.coerce.string(),
    transfer: z.coerce.string(),
  })

  const postTransfersTransferReversalsIdBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
    })
    .optional()

  const postTransfersTransferReversalsIdResponseValidator =
    responseValidationFactory([["200", s_transfer_reversal]], s_error)

  router.post(
    "postTransfersTransferReversalsId",
    "/v1/transfers/:transfer/reversals/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTransfersTransferReversalsIdParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTransfersTransferReversalsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTransfersTransferReversalsId(input, ctx)

      ctx.body = postTransfersTransferReversalsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryCreditReversalsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    limit: z.coerce.number().optional(),
    received_credit: z.coerce.string().optional(),
    starting_after: z.coerce.string().optional(),
    status: z.enum(["canceled", "posted", "processing"]).optional(),
  })

  const getTreasuryCreditReversalsBodySchema = z.object({}).optional()

  const getTreasuryCreditReversalsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_treasury_credit_reversal)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getTreasuryCreditReversals",
    "/v1/treasury/credit_reversals",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getTreasuryCreditReversalsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryCreditReversalsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTreasuryCreditReversals(
        input,
        ctx,
      )

      ctx.body = getTreasuryCreditReversalsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTreasuryCreditReversalsBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.object({}).optional(),
    received_credit: z.coerce.string(),
  })

  const postTreasuryCreditReversalsResponseValidator =
    responseValidationFactory([["200", s_treasury_credit_reversal]], s_error)

  router.post(
    "postTreasuryCreditReversals",
    "/v1/treasury/credit_reversals",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTreasuryCreditReversalsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTreasuryCreditReversals(
        input,
        ctx,
      )

      ctx.body = postTreasuryCreditReversalsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryCreditReversalsCreditReversalParamSchema = z.object({
    credit_reversal: z.coerce.string(),
  })

  const getTreasuryCreditReversalsCreditReversalQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTreasuryCreditReversalsCreditReversalBodySchema = z
    .object({})
    .optional()

  const getTreasuryCreditReversalsCreditReversalResponseValidator =
    responseValidationFactory([["200", s_treasury_credit_reversal]], s_error)

  router.get(
    "getTreasuryCreditReversalsCreditReversal",
    "/v1/treasury/credit_reversals/:creditReversal",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTreasuryCreditReversalsCreditReversalParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTreasuryCreditReversalsCreditReversalQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryCreditReversalsCreditReversalBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryCreditReversalsCreditReversal(
          input,
          ctx,
        )

      ctx.body = getTreasuryCreditReversalsCreditReversalResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getTreasuryDebitReversalsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    limit: z.coerce.number().optional(),
    received_debit: z.coerce.string().optional(),
    resolution: z.enum(["lost", "won"]).optional(),
    starting_after: z.coerce.string().optional(),
    status: z.enum(["canceled", "completed", "processing"]).optional(),
  })

  const getTreasuryDebitReversalsBodySchema = z.object({}).optional()

  const getTreasuryDebitReversalsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_treasury_debit_reversal)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getTreasuryDebitReversals",
    "/v1/treasury/debit_reversals",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getTreasuryDebitReversalsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryDebitReversalsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTreasuryDebitReversals(
        input,
        ctx,
      )

      ctx.body = getTreasuryDebitReversalsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTreasuryDebitReversalsBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.object({}).optional(),
    received_debit: z.coerce.string(),
  })

  const postTreasuryDebitReversalsResponseValidator = responseValidationFactory(
    [["200", s_treasury_debit_reversal]],
    s_error,
  )

  router.post(
    "postTreasuryDebitReversals",
    "/v1/treasury/debit_reversals",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTreasuryDebitReversalsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postTreasuryDebitReversals(
        input,
        ctx,
      )

      ctx.body = postTreasuryDebitReversalsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryDebitReversalsDebitReversalParamSchema = z.object({
    debit_reversal: z.coerce.string(),
  })

  const getTreasuryDebitReversalsDebitReversalQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTreasuryDebitReversalsDebitReversalBodySchema = z
    .object({})
    .optional()

  const getTreasuryDebitReversalsDebitReversalResponseValidator =
    responseValidationFactory([["200", s_treasury_debit_reversal]], s_error)

  router.get(
    "getTreasuryDebitReversalsDebitReversal",
    "/v1/treasury/debit_reversals/:debitReversal",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTreasuryDebitReversalsDebitReversalParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTreasuryDebitReversalsDebitReversalQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryDebitReversalsDebitReversalBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryDebitReversalsDebitReversal(input, ctx)

      ctx.body = getTreasuryDebitReversalsDebitReversalResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getTreasuryFinancialAccountsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getTreasuryFinancialAccountsBodySchema = z.object({}).optional()

  const getTreasuryFinancialAccountsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(s_treasury_financial_account),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getTreasuryFinancialAccounts",
    "/v1/treasury/financial_accounts",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getTreasuryFinancialAccountsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryFinancialAccountsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryFinancialAccounts(input, ctx)

      ctx.body = getTreasuryFinancialAccountsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTreasuryFinancialAccountsBodySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
    features: z
      .object({
        card_issuing: z.object({ requested: z.coerce.boolean() }).optional(),
        deposit_insurance: z
          .object({ requested: z.coerce.boolean() })
          .optional(),
        financial_addresses: z
          .object({
            aba: z.object({ requested: z.coerce.boolean() }).optional(),
          })
          .optional(),
        inbound_transfers: z
          .object({
            ach: z.object({ requested: z.coerce.boolean() }).optional(),
          })
          .optional(),
        intra_stripe_flows: z
          .object({ requested: z.coerce.boolean() })
          .optional(),
        outbound_payments: z
          .object({
            ach: z.object({ requested: z.coerce.boolean() }).optional(),
            us_domestic_wire: z
              .object({ requested: z.coerce.boolean() })
              .optional(),
          })
          .optional(),
        outbound_transfers: z
          .object({
            ach: z.object({ requested: z.coerce.boolean() }).optional(),
            us_domestic_wire: z
              .object({ requested: z.coerce.boolean() })
              .optional(),
          })
          .optional(),
      })
      .optional(),
    metadata: z.object({}).optional(),
    platform_restrictions: z
      .object({
        inbound_flows: z.enum(["restricted", "unrestricted"]).optional(),
        outbound_flows: z.enum(["restricted", "unrestricted"]).optional(),
      })
      .optional(),
    supported_currencies: z.array(z.coerce.string()),
  })

  const postTreasuryFinancialAccountsResponseValidator =
    responseValidationFactory([["200", s_treasury_financial_account]], s_error)

  router.post(
    "postTreasuryFinancialAccounts",
    "/v1/treasury/financial_accounts",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTreasuryFinancialAccountsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTreasuryFinancialAccounts(input, ctx)

      ctx.body = postTreasuryFinancialAccountsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryFinancialAccountsFinancialAccountParamSchema = z.object({
    financial_account: z.coerce.string(),
  })

  const getTreasuryFinancialAccountsFinancialAccountQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTreasuryFinancialAccountsFinancialAccountBodySchema = z
    .object({})
    .optional()

  const getTreasuryFinancialAccountsFinancialAccountResponseValidator =
    responseValidationFactory([["200", s_treasury_financial_account]], s_error)

  router.get(
    "getTreasuryFinancialAccountsFinancialAccount",
    "/v1/treasury/financial_accounts/:financialAccount",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTreasuryFinancialAccountsFinancialAccountParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTreasuryFinancialAccountsFinancialAccountQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryFinancialAccountsFinancialAccountBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryFinancialAccountsFinancialAccount(
          input,
          ctx,
        )

      ctx.body = getTreasuryFinancialAccountsFinancialAccountResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTreasuryFinancialAccountsFinancialAccountParamSchema = z.object({
    financial_account: z.coerce.string(),
  })

  const postTreasuryFinancialAccountsFinancialAccountBodySchema = z
    .object({
      expand: z.array(z.coerce.string()).optional(),
      features: z
        .object({
          card_issuing: z.object({ requested: z.coerce.boolean() }).optional(),
          deposit_insurance: z
            .object({ requested: z.coerce.boolean() })
            .optional(),
          financial_addresses: z
            .object({
              aba: z.object({ requested: z.coerce.boolean() }).optional(),
            })
            .optional(),
          inbound_transfers: z
            .object({
              ach: z.object({ requested: z.coerce.boolean() }).optional(),
            })
            .optional(),
          intra_stripe_flows: z
            .object({ requested: z.coerce.boolean() })
            .optional(),
          outbound_payments: z
            .object({
              ach: z.object({ requested: z.coerce.boolean() }).optional(),
              us_domestic_wire: z
                .object({ requested: z.coerce.boolean() })
                .optional(),
            })
            .optional(),
          outbound_transfers: z
            .object({
              ach: z.object({ requested: z.coerce.boolean() }).optional(),
              us_domestic_wire: z
                .object({ requested: z.coerce.boolean() })
                .optional(),
            })
            .optional(),
        })
        .optional(),
      metadata: z.object({}).optional(),
      platform_restrictions: z
        .object({
          inbound_flows: z.enum(["restricted", "unrestricted"]).optional(),
          outbound_flows: z.enum(["restricted", "unrestricted"]).optional(),
        })
        .optional(),
    })
    .optional()

  const postTreasuryFinancialAccountsFinancialAccountResponseValidator =
    responseValidationFactory([["200", s_treasury_financial_account]], s_error)

  router.post(
    "postTreasuryFinancialAccountsFinancialAccount",
    "/v1/treasury/financial_accounts/:financialAccount",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTreasuryFinancialAccountsFinancialAccountParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTreasuryFinancialAccountsFinancialAccountBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTreasuryFinancialAccountsFinancialAccount(
          input,
          ctx,
        )

      ctx.body = postTreasuryFinancialAccountsFinancialAccountResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getTreasuryFinancialAccountsFinancialAccountFeaturesParamSchema =
    z.object({ financial_account: z.coerce.string() })

  const getTreasuryFinancialAccountsFinancialAccountFeaturesQuerySchema =
    z.object({ expand: z.array(z.coerce.string()).optional() })

  const getTreasuryFinancialAccountsFinancialAccountFeaturesBodySchema = z
    .object({})
    .optional()

  const getTreasuryFinancialAccountsFinancialAccountFeaturesResponseValidator =
    responseValidationFactory(
      [["200", s_treasury_financial_account_features]],
      s_error,
    )

  router.get(
    "getTreasuryFinancialAccountsFinancialAccountFeatures",
    "/v1/treasury/financial_accounts/:financialAccount/features",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTreasuryFinancialAccountsFinancialAccountFeaturesParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTreasuryFinancialAccountsFinancialAccountFeaturesQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryFinancialAccountsFinancialAccountFeaturesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryFinancialAccountsFinancialAccountFeatures(
          input,
          ctx,
        )

      ctx.body =
        getTreasuryFinancialAccountsFinancialAccountFeaturesResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const postTreasuryFinancialAccountsFinancialAccountFeaturesParamSchema =
    z.object({ financial_account: z.coerce.string() })

  const postTreasuryFinancialAccountsFinancialAccountFeaturesBodySchema = z
    .object({
      card_issuing: z.object({ requested: z.coerce.boolean() }).optional(),
      deposit_insurance: z.object({ requested: z.coerce.boolean() }).optional(),
      expand: z.array(z.coerce.string()).optional(),
      financial_addresses: z
        .object({ aba: z.object({ requested: z.coerce.boolean() }).optional() })
        .optional(),
      inbound_transfers: z
        .object({ ach: z.object({ requested: z.coerce.boolean() }).optional() })
        .optional(),
      intra_stripe_flows: z
        .object({ requested: z.coerce.boolean() })
        .optional(),
      outbound_payments: z
        .object({
          ach: z.object({ requested: z.coerce.boolean() }).optional(),
          us_domestic_wire: z
            .object({ requested: z.coerce.boolean() })
            .optional(),
        })
        .optional(),
      outbound_transfers: z
        .object({
          ach: z.object({ requested: z.coerce.boolean() }).optional(),
          us_domestic_wire: z
            .object({ requested: z.coerce.boolean() })
            .optional(),
        })
        .optional(),
    })
    .optional()

  const postTreasuryFinancialAccountsFinancialAccountFeaturesResponseValidator =
    responseValidationFactory(
      [["200", s_treasury_financial_account_features]],
      s_error,
    )

  router.post(
    "postTreasuryFinancialAccountsFinancialAccountFeatures",
    "/v1/treasury/financial_accounts/:financialAccount/features",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTreasuryFinancialAccountsFinancialAccountFeaturesParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTreasuryFinancialAccountsFinancialAccountFeaturesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTreasuryFinancialAccountsFinancialAccountFeatures(
          input,
          ctx,
        )

      ctx.body =
        postTreasuryFinancialAccountsFinancialAccountFeaturesResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getTreasuryInboundTransfersQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z
      .enum(["canceled", "failed", "processing", "succeeded"])
      .optional(),
  })

  const getTreasuryInboundTransfersBodySchema = z.object({}).optional()

  const getTreasuryInboundTransfersResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_treasury_inbound_transfer)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getTreasuryInboundTransfers",
    "/v1/treasury/inbound_transfers",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getTreasuryInboundTransfersQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryInboundTransfersBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTreasuryInboundTransfers(
        input,
        ctx,
      )

      ctx.body = getTreasuryInboundTransfersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTreasuryInboundTransfersBodySchema = z.object({
    amount: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    metadata: z.object({}).optional(),
    origin_payment_method: z.coerce.string(),
    statement_descriptor: z.coerce.string().optional(),
  })

  const postTreasuryInboundTransfersResponseValidator =
    responseValidationFactory([["200", s_treasury_inbound_transfer]], s_error)

  router.post(
    "postTreasuryInboundTransfers",
    "/v1/treasury/inbound_transfers",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTreasuryInboundTransfersBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTreasuryInboundTransfers(input, ctx)

      ctx.body = postTreasuryInboundTransfersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryInboundTransfersIdParamSchema = z.object({
    id: z.coerce.string(),
  })

  const getTreasuryInboundTransfersIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTreasuryInboundTransfersIdBodySchema = z.object({}).optional()

  const getTreasuryInboundTransfersIdResponseValidator =
    responseValidationFactory([["200", s_treasury_inbound_transfer]], s_error)

  router.get(
    "getTreasuryInboundTransfersId",
    "/v1/treasury/inbound_transfers/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTreasuryInboundTransfersIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTreasuryInboundTransfersIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryInboundTransfersIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryInboundTransfersId(input, ctx)

      ctx.body = getTreasuryInboundTransfersIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTreasuryInboundTransfersInboundTransferCancelParamSchema = z.object(
    { inbound_transfer: z.coerce.string() },
  )

  const postTreasuryInboundTransfersInboundTransferCancelBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTreasuryInboundTransfersInboundTransferCancelResponseValidator =
    responseValidationFactory([["200", s_treasury_inbound_transfer]], s_error)

  router.post(
    "postTreasuryInboundTransfersInboundTransferCancel",
    "/v1/treasury/inbound_transfers/:inboundTransfer/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTreasuryInboundTransfersInboundTransferCancelParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTreasuryInboundTransfersInboundTransferCancelBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTreasuryInboundTransfersInboundTransferCancel(
          input,
          ctx,
        )

      ctx.body =
        postTreasuryInboundTransfersInboundTransferCancelResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getTreasuryOutboundPaymentsQuerySchema = z.object({
    customer: z.coerce.string().optional(),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z
      .enum(["canceled", "failed", "posted", "processing", "returned"])
      .optional(),
  })

  const getTreasuryOutboundPaymentsBodySchema = z.object({}).optional()

  const getTreasuryOutboundPaymentsResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_treasury_outbound_payment)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getTreasuryOutboundPayments",
    "/v1/treasury/outbound_payments",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getTreasuryOutboundPaymentsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryOutboundPaymentsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTreasuryOutboundPayments(
        input,
        ctx,
      )

      ctx.body = getTreasuryOutboundPaymentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTreasuryOutboundPaymentsBodySchema = z.object({
    amount: z.coerce.number(),
    currency: z.coerce.string(),
    customer: z.coerce.string().optional(),
    description: z.coerce.string().optional(),
    destination_payment_method: z.coerce.string().optional(),
    destination_payment_method_data: z
      .object({
        billing_details: z
          .object({
            address: z.union([
              z.object({
                city: z.coerce.string().optional(),
                country: z.coerce.string().optional(),
                line1: z.coerce.string().optional(),
                line2: z.coerce.string().optional(),
                postal_code: z.coerce.string().optional(),
                state: z.coerce.string().optional(),
              }),
              z.enum([""]),
            ]),
            email: z.union([z.coerce.string(), z.enum([""])]),
            name: z.union([z.coerce.string(), z.enum([""])]),
            phone: z.union([z.coerce.string(), z.enum([""])]),
          })
          .optional(),
        financial_account: z.coerce.string().optional(),
        metadata: z.object({}).optional(),
        type: z.enum(["financial_account", "us_bank_account"]),
        us_bank_account: z
          .object({
            account_holder_type: z.enum(["company", "individual"]).optional(),
            account_number: z.coerce.string().optional(),
            account_type: z.enum(["checking", "savings"]).optional(),
            financial_connections_account: z.coerce.string().optional(),
            routing_number: z.coerce.string().optional(),
          })
          .optional(),
      })
      .optional(),
    destination_payment_method_options: z
      .object({
        us_bank_account: z.union([
          z.object({ network: z.enum(["ach", "us_domestic_wire"]).optional() }),
          z.enum([""]),
        ]),
      })
      .optional(),
    end_user_details: z
      .object({
        ip_address: z.coerce.string().optional(),
        present: z.coerce.boolean(),
      })
      .optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    metadata: z.object({}).optional(),
    statement_descriptor: z.coerce.string().optional(),
  })

  const postTreasuryOutboundPaymentsResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_payment]], s_error)

  router.post(
    "postTreasuryOutboundPayments",
    "/v1/treasury/outbound_payments",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTreasuryOutboundPaymentsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTreasuryOutboundPayments(input, ctx)

      ctx.body = postTreasuryOutboundPaymentsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryOutboundPaymentsIdParamSchema = z.object({
    id: z.coerce.string(),
  })

  const getTreasuryOutboundPaymentsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTreasuryOutboundPaymentsIdBodySchema = z.object({}).optional()

  const getTreasuryOutboundPaymentsIdResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_payment]], s_error)

  router.get(
    "getTreasuryOutboundPaymentsId",
    "/v1/treasury/outbound_payments/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTreasuryOutboundPaymentsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTreasuryOutboundPaymentsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryOutboundPaymentsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryOutboundPaymentsId(input, ctx)

      ctx.body = getTreasuryOutboundPaymentsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTreasuryOutboundPaymentsIdCancelParamSchema = z.object({
    id: z.coerce.string(),
  })

  const postTreasuryOutboundPaymentsIdCancelBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTreasuryOutboundPaymentsIdCancelResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_payment]], s_error)

  router.post(
    "postTreasuryOutboundPaymentsIdCancel",
    "/v1/treasury/outbound_payments/:id/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTreasuryOutboundPaymentsIdCancelParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTreasuryOutboundPaymentsIdCancelBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTreasuryOutboundPaymentsIdCancel(input, ctx)

      ctx.body = postTreasuryOutboundPaymentsIdCancelResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getTreasuryOutboundTransfersQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z
      .enum(["canceled", "failed", "posted", "processing", "returned"])
      .optional(),
  })

  const getTreasuryOutboundTransfersBodySchema = z.object({}).optional()

  const getTreasuryOutboundTransfersResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_treasury_outbound_transfer)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getTreasuryOutboundTransfers",
    "/v1/treasury/outbound_transfers",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getTreasuryOutboundTransfersQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryOutboundTransfersBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryOutboundTransfers(input, ctx)

      ctx.body = getTreasuryOutboundTransfersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postTreasuryOutboundTransfersBodySchema = z.object({
    amount: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string().optional(),
    destination_payment_method: z.coerce.string().optional(),
    destination_payment_method_options: z
      .object({
        us_bank_account: z.union([
          z.object({ network: z.enum(["ach", "us_domestic_wire"]).optional() }),
          z.enum([""]),
        ]),
      })
      .optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    metadata: z.object({}).optional(),
    statement_descriptor: z.coerce.string().optional(),
  })

  const postTreasuryOutboundTransfersResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_transfer]], s_error)

  router.post(
    "postTreasuryOutboundTransfers",
    "/v1/treasury/outbound_transfers",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postTreasuryOutboundTransfersBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTreasuryOutboundTransfers(input, ctx)

      ctx.body = postTreasuryOutboundTransfersResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryOutboundTransfersOutboundTransferParamSchema = z.object({
    outbound_transfer: z.coerce.string(),
  })

  const getTreasuryOutboundTransfersOutboundTransferQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTreasuryOutboundTransfersOutboundTransferBodySchema = z
    .object({})
    .optional()

  const getTreasuryOutboundTransfersOutboundTransferResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_transfer]], s_error)

  router.get(
    "getTreasuryOutboundTransfersOutboundTransfer",
    "/v1/treasury/outbound_transfers/:outboundTransfer",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTreasuryOutboundTransfersOutboundTransferParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTreasuryOutboundTransfersOutboundTransferQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryOutboundTransfersOutboundTransferBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryOutboundTransfersOutboundTransfer(
          input,
          ctx,
        )

      ctx.body = getTreasuryOutboundTransfersOutboundTransferResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postTreasuryOutboundTransfersOutboundTransferCancelParamSchema =
    z.object({ outbound_transfer: z.coerce.string() })

  const postTreasuryOutboundTransfersOutboundTransferCancelBodySchema = z
    .object({ expand: z.array(z.coerce.string()).optional() })
    .optional()

  const postTreasuryOutboundTransfersOutboundTransferCancelResponseValidator =
    responseValidationFactory([["200", s_treasury_outbound_transfer]], s_error)

  router.post(
    "postTreasuryOutboundTransfersOutboundTransferCancel",
    "/v1/treasury/outbound_transfers/:outboundTransfer/cancel",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postTreasuryOutboundTransfersOutboundTransferCancelParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postTreasuryOutboundTransfersOutboundTransferCancelBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postTreasuryOutboundTransfersOutboundTransferCancel(
          input,
          ctx,
        )

      ctx.body =
        postTreasuryOutboundTransfersOutboundTransferCancelResponseValidator(
          status,
          body,
        )
      ctx.status = status
      return next()
    },
  )

  const getTreasuryReceivedCreditsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    limit: z.coerce.number().optional(),
    linked_flows: z
      .object({
        source_flow_type: z.enum([
          "credit_reversal",
          "other",
          "outbound_payment",
          "payout",
        ]),
      })
      .optional(),
    starting_after: z.coerce.string().optional(),
    status: z.enum(["failed", "succeeded"]).optional(),
  })

  const getTreasuryReceivedCreditsBodySchema = z.object({}).optional()

  const getTreasuryReceivedCreditsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_treasury_received_credit)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getTreasuryReceivedCredits",
    "/v1/treasury/received_credits",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getTreasuryReceivedCreditsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryReceivedCreditsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTreasuryReceivedCredits(
        input,
        ctx,
      )

      ctx.body = getTreasuryReceivedCreditsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryReceivedCreditsIdParamSchema = z.object({
    id: z.coerce.string(),
  })

  const getTreasuryReceivedCreditsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTreasuryReceivedCreditsIdBodySchema = z.object({}).optional()

  const getTreasuryReceivedCreditsIdResponseValidator =
    responseValidationFactory([["200", s_treasury_received_credit]], s_error)

  router.get(
    "getTreasuryReceivedCreditsId",
    "/v1/treasury/received_credits/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTreasuryReceivedCreditsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTreasuryReceivedCreditsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryReceivedCreditsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryReceivedCreditsId(input, ctx)

      ctx.body = getTreasuryReceivedCreditsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryReceivedDebitsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
    status: z.enum(["failed", "succeeded"]).optional(),
  })

  const getTreasuryReceivedDebitsBodySchema = z.object({}).optional()

  const getTreasuryReceivedDebitsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_treasury_received_debit)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getTreasuryReceivedDebits",
    "/v1/treasury/received_debits",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getTreasuryReceivedDebitsQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryReceivedDebitsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTreasuryReceivedDebits(
        input,
        ctx,
      )

      ctx.body = getTreasuryReceivedDebitsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryReceivedDebitsIdParamSchema = z.object({
    id: z.coerce.string(),
  })

  const getTreasuryReceivedDebitsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTreasuryReceivedDebitsIdBodySchema = z.object({}).optional()

  const getTreasuryReceivedDebitsIdResponseValidator =
    responseValidationFactory([["200", s_treasury_received_debit]], s_error)

  router.get(
    "getTreasuryReceivedDebitsId",
    "/v1/treasury/received_debits/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTreasuryReceivedDebitsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTreasuryReceivedDebitsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryReceivedDebitsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTreasuryReceivedDebitsId(
        input,
        ctx,
      )

      ctx.body = getTreasuryReceivedDebitsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryTransactionEntriesQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    effective_at: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    limit: z.coerce.number().optional(),
    order_by: z.enum(["created", "effective_at"]).optional(),
    starting_after: z.coerce.string().optional(),
    transaction: z.coerce.string().optional(),
  })

  const getTreasuryTransactionEntriesBodySchema = z.object({}).optional()

  const getTreasuryTransactionEntriesResponseValidator =
    responseValidationFactory(
      [
        [
          "200",
          z.object({
            data: z.array(z.lazy(() => s_treasury_transaction_entry)),
            has_more: z.coerce.boolean(),
            object: z.enum(["list"]),
            url: z.coerce.string(),
          }),
        ],
      ],
      s_error,
    )

  router.get(
    "getTreasuryTransactionEntries",
    "/v1/treasury/transaction_entries",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(
          getTreasuryTransactionEntriesQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryTransactionEntriesBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryTransactionEntries(input, ctx)

      ctx.body = getTreasuryTransactionEntriesResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryTransactionEntriesIdParamSchema = z.object({
    id: z.coerce.string(),
  })

  const getTreasuryTransactionEntriesIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTreasuryTransactionEntriesIdBodySchema = z.object({}).optional()

  const getTreasuryTransactionEntriesIdResponseValidator =
    responseValidationFactory([["200", s_treasury_transaction_entry]], s_error)

  router.get(
    "getTreasuryTransactionEntriesId",
    "/v1/treasury/transaction_entries/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTreasuryTransactionEntriesIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTreasuryTransactionEntriesIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryTransactionEntriesIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getTreasuryTransactionEntriesId(input, ctx)

      ctx.body = getTreasuryTransactionEntriesIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryTransactionsQuerySchema = z.object({
    created: z.union([
      z.object({
        gt: z.coerce.number().optional(),
        gte: z.coerce.number().optional(),
        lt: z.coerce.number().optional(),
        lte: z.coerce.number().optional(),
      }),
      z.coerce.number(),
    ]),
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    financial_account: z.coerce.string(),
    limit: z.coerce.number().optional(),
    order_by: z.enum(["created", "posted_at"]).optional(),
    starting_after: z.coerce.string().optional(),
    status: z.enum(["open", "posted", "void"]).optional(),
    status_transitions: z
      .object({
        posted_at: z.union([
          z.object({
            gt: z.coerce.number().optional(),
            gte: z.coerce.number().optional(),
            lt: z.coerce.number().optional(),
            lte: z.coerce.number().optional(),
          }),
          z.coerce.number(),
        ]),
      })
      .optional(),
  })

  const getTreasuryTransactionsBodySchema = z.object({}).optional()

  const getTreasuryTransactionsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(z.lazy(() => s_treasury_transaction)),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getTreasuryTransactions",
    "/v1/treasury/transactions",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getTreasuryTransactionsQuerySchema, ctx.query),
        body: parseRequestInput(
          getTreasuryTransactionsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTreasuryTransactions(
        input,
        ctx,
      )

      ctx.body = getTreasuryTransactionsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getTreasuryTransactionsIdParamSchema = z.object({
    id: z.coerce.string(),
  })

  const getTreasuryTransactionsIdQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getTreasuryTransactionsIdBodySchema = z.object({}).optional()

  const getTreasuryTransactionsIdResponseValidator = responseValidationFactory(
    [["200", s_treasury_transaction]],
    s_error,
  )

  router.get(
    "getTreasuryTransactionsId",
    "/v1/treasury/transactions/:id",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getTreasuryTransactionsIdParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getTreasuryTransactionsIdQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getTreasuryTransactionsIdBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getTreasuryTransactionsId(
        input,
        ctx,
      )

      ctx.body = getTreasuryTransactionsIdResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const getWebhookEndpointsQuerySchema = z.object({
    ending_before: z.coerce.string().optional(),
    expand: z.array(z.coerce.string()).optional(),
    limit: z.coerce.number().optional(),
    starting_after: z.coerce.string().optional(),
  })

  const getWebhookEndpointsBodySchema = z.object({}).optional()

  const getWebhookEndpointsResponseValidator = responseValidationFactory(
    [
      [
        "200",
        z.object({
          data: z.array(s_webhook_endpoint),
          has_more: z.coerce.boolean(),
          object: z.enum(["list"]),
          url: z.coerce.string(),
        }),
      ],
    ],
    s_error,
  )

  router.get(
    "getWebhookEndpoints",
    "/v1/webhook_endpoints",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: parseRequestInput(getWebhookEndpointsQuerySchema, ctx.query),
        body: parseRequestInput(
          getWebhookEndpointsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.getWebhookEndpoints(
        input,
        ctx,
      )

      ctx.body = getWebhookEndpointsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const postWebhookEndpointsBodySchema = z.object({
    api_version: z
      .enum([
        "2011-01-01",
        "2011-06-21",
        "2011-06-28",
        "2011-08-01",
        "2011-09-15",
        "2011-11-17",
        "2012-02-23",
        "2012-03-25",
        "2012-06-18",
        "2012-06-28",
        "2012-07-09",
        "2012-09-24",
        "2012-10-26",
        "2012-11-07",
        "2013-02-11",
        "2013-02-13",
        "2013-07-05",
        "2013-08-12",
        "2013-08-13",
        "2013-10-29",
        "2013-12-03",
        "2014-01-31",
        "2014-03-13",
        "2014-03-28",
        "2014-05-19",
        "2014-06-13",
        "2014-06-17",
        "2014-07-22",
        "2014-07-26",
        "2014-08-04",
        "2014-08-20",
        "2014-09-08",
        "2014-10-07",
        "2014-11-05",
        "2014-11-20",
        "2014-12-08",
        "2014-12-17",
        "2014-12-22",
        "2015-01-11",
        "2015-01-26",
        "2015-02-10",
        "2015-02-16",
        "2015-02-18",
        "2015-03-24",
        "2015-04-07",
        "2015-06-15",
        "2015-07-07",
        "2015-07-13",
        "2015-07-28",
        "2015-08-07",
        "2015-08-19",
        "2015-09-03",
        "2015-09-08",
        "2015-09-23",
        "2015-10-01",
        "2015-10-12",
        "2015-10-16",
        "2016-02-03",
        "2016-02-19",
        "2016-02-22",
        "2016-02-23",
        "2016-02-29",
        "2016-03-07",
        "2016-06-15",
        "2016-07-06",
        "2016-10-19",
        "2017-01-27",
        "2017-02-14",
        "2017-04-06",
        "2017-05-25",
        "2017-06-05",
        "2017-08-15",
        "2017-12-14",
        "2018-01-23",
        "2018-02-05",
        "2018-02-06",
        "2018-02-28",
        "2018-05-21",
        "2018-07-27",
        "2018-08-23",
        "2018-09-06",
        "2018-09-24",
        "2018-10-31",
        "2018-11-08",
        "2019-02-11",
        "2019-02-19",
        "2019-03-14",
        "2019-05-16",
        "2019-08-14",
        "2019-09-09",
        "2019-10-08",
        "2019-10-17",
        "2019-11-05",
        "2019-12-03",
        "2020-03-02",
        "2020-08-27",
        "2022-08-01",
        "2022-11-15",
        "2023-08-16",
      ])
      .optional(),
    connect: z.coerce.boolean().optional(),
    description: z.union([z.coerce.string(), z.enum([""])]),
    enabled_events: z.array(
      z.enum([
        "*",
        "account.application.authorized",
        "account.application.deauthorized",
        "account.external_account.created",
        "account.external_account.deleted",
        "account.external_account.updated",
        "account.updated",
        "application_fee.created",
        "application_fee.refund.updated",
        "application_fee.refunded",
        "balance.available",
        "billing_portal.configuration.created",
        "billing_portal.configuration.updated",
        "billing_portal.session.created",
        "capability.updated",
        "cash_balance.funds_available",
        "charge.captured",
        "charge.dispute.closed",
        "charge.dispute.created",
        "charge.dispute.funds_reinstated",
        "charge.dispute.funds_withdrawn",
        "charge.dispute.updated",
        "charge.expired",
        "charge.failed",
        "charge.pending",
        "charge.refund.updated",
        "charge.refunded",
        "charge.succeeded",
        "charge.updated",
        "checkout.session.async_payment_failed",
        "checkout.session.async_payment_succeeded",
        "checkout.session.completed",
        "checkout.session.expired",
        "coupon.created",
        "coupon.deleted",
        "coupon.updated",
        "credit_note.created",
        "credit_note.updated",
        "credit_note.voided",
        "customer.created",
        "customer.deleted",
        "customer.discount.created",
        "customer.discount.deleted",
        "customer.discount.updated",
        "customer.source.created",
        "customer.source.deleted",
        "customer.source.expiring",
        "customer.source.updated",
        "customer.subscription.created",
        "customer.subscription.deleted",
        "customer.subscription.paused",
        "customer.subscription.pending_update_applied",
        "customer.subscription.pending_update_expired",
        "customer.subscription.resumed",
        "customer.subscription.trial_will_end",
        "customer.subscription.updated",
        "customer.tax_id.created",
        "customer.tax_id.deleted",
        "customer.tax_id.updated",
        "customer.updated",
        "customer_cash_balance_transaction.created",
        "file.created",
        "financial_connections.account.created",
        "financial_connections.account.deactivated",
        "financial_connections.account.disconnected",
        "financial_connections.account.reactivated",
        "financial_connections.account.refreshed_balance",
        "identity.verification_session.canceled",
        "identity.verification_session.created",
        "identity.verification_session.processing",
        "identity.verification_session.redacted",
        "identity.verification_session.requires_input",
        "identity.verification_session.verified",
        "invoice.created",
        "invoice.deleted",
        "invoice.finalization_failed",
        "invoice.finalized",
        "invoice.marked_uncollectible",
        "invoice.paid",
        "invoice.payment_action_required",
        "invoice.payment_failed",
        "invoice.payment_succeeded",
        "invoice.sent",
        "invoice.upcoming",
        "invoice.updated",
        "invoice.voided",
        "invoiceitem.created",
        "invoiceitem.deleted",
        "issuing_authorization.created",
        "issuing_authorization.request",
        "issuing_authorization.updated",
        "issuing_card.created",
        "issuing_card.updated",
        "issuing_cardholder.created",
        "issuing_cardholder.updated",
        "issuing_dispute.closed",
        "issuing_dispute.created",
        "issuing_dispute.funds_reinstated",
        "issuing_dispute.submitted",
        "issuing_dispute.updated",
        "issuing_transaction.created",
        "issuing_transaction.updated",
        "mandate.updated",
        "order.created",
        "payment_intent.amount_capturable_updated",
        "payment_intent.canceled",
        "payment_intent.created",
        "payment_intent.partially_funded",
        "payment_intent.payment_failed",
        "payment_intent.processing",
        "payment_intent.requires_action",
        "payment_intent.succeeded",
        "payment_link.created",
        "payment_link.updated",
        "payment_method.attached",
        "payment_method.automatically_updated",
        "payment_method.detached",
        "payment_method.updated",
        "payout.canceled",
        "payout.created",
        "payout.failed",
        "payout.paid",
        "payout.reconciliation_completed",
        "payout.updated",
        "person.created",
        "person.deleted",
        "person.updated",
        "plan.created",
        "plan.deleted",
        "plan.updated",
        "price.created",
        "price.deleted",
        "price.updated",
        "product.created",
        "product.deleted",
        "product.updated",
        "promotion_code.created",
        "promotion_code.updated",
        "quote.accepted",
        "quote.canceled",
        "quote.created",
        "quote.finalized",
        "radar.early_fraud_warning.created",
        "radar.early_fraud_warning.updated",
        "recipient.created",
        "recipient.deleted",
        "recipient.updated",
        "refund.created",
        "refund.updated",
        "reporting.report_run.failed",
        "reporting.report_run.succeeded",
        "reporting.report_type.updated",
        "review.closed",
        "review.opened",
        "setup_intent.canceled",
        "setup_intent.created",
        "setup_intent.requires_action",
        "setup_intent.setup_failed",
        "setup_intent.succeeded",
        "sigma.scheduled_query_run.created",
        "sku.created",
        "sku.deleted",
        "sku.updated",
        "source.canceled",
        "source.chargeable",
        "source.failed",
        "source.mandate_notification",
        "source.refund_attributes_required",
        "source.transaction.created",
        "source.transaction.updated",
        "subscription_schedule.aborted",
        "subscription_schedule.canceled",
        "subscription_schedule.completed",
        "subscription_schedule.created",
        "subscription_schedule.expiring",
        "subscription_schedule.released",
        "subscription_schedule.updated",
        "tax.settings.updated",
        "tax_rate.created",
        "tax_rate.updated",
        "terminal.reader.action_failed",
        "terminal.reader.action_succeeded",
        "test_helpers.test_clock.advancing",
        "test_helpers.test_clock.created",
        "test_helpers.test_clock.deleted",
        "test_helpers.test_clock.internal_failure",
        "test_helpers.test_clock.ready",
        "topup.canceled",
        "topup.created",
        "topup.failed",
        "topup.reversed",
        "topup.succeeded",
        "transfer.created",
        "transfer.reversed",
        "transfer.updated",
        "treasury.credit_reversal.created",
        "treasury.credit_reversal.posted",
        "treasury.debit_reversal.completed",
        "treasury.debit_reversal.created",
        "treasury.debit_reversal.initial_credit_granted",
        "treasury.financial_account.closed",
        "treasury.financial_account.created",
        "treasury.financial_account.features_status_updated",
        "treasury.inbound_transfer.canceled",
        "treasury.inbound_transfer.created",
        "treasury.inbound_transfer.failed",
        "treasury.inbound_transfer.succeeded",
        "treasury.outbound_payment.canceled",
        "treasury.outbound_payment.created",
        "treasury.outbound_payment.expected_arrival_date_updated",
        "treasury.outbound_payment.failed",
        "treasury.outbound_payment.posted",
        "treasury.outbound_payment.returned",
        "treasury.outbound_transfer.canceled",
        "treasury.outbound_transfer.created",
        "treasury.outbound_transfer.expected_arrival_date_updated",
        "treasury.outbound_transfer.failed",
        "treasury.outbound_transfer.posted",
        "treasury.outbound_transfer.returned",
        "treasury.received_credit.created",
        "treasury.received_credit.failed",
        "treasury.received_credit.succeeded",
        "treasury.received_debit.created",
      ]),
    ),
    expand: z.array(z.coerce.string()).optional(),
    metadata: z.union([z.object({}), z.enum([""])]),
    url: z.coerce.string(),
  })

  const postWebhookEndpointsResponseValidator = responseValidationFactory(
    [["200", s_webhook_endpoint]],
    s_error,
  )

  router.post(
    "postWebhookEndpoints",
    "/v1/webhook_endpoints",
    async (ctx, next) => {
      const input = {
        params: undefined,
        query: undefined,
        body: parseRequestInput(
          postWebhookEndpointsBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } = await implementation.postWebhookEndpoints(
        input,
        ctx,
      )

      ctx.body = postWebhookEndpointsResponseValidator(status, body)
      ctx.status = status
      return next()
    },
  )

  const deleteWebhookEndpointsWebhookEndpointParamSchema = z.object({
    webhook_endpoint: z.coerce.string(),
  })

  const deleteWebhookEndpointsWebhookEndpointBodySchema = z
    .object({})
    .optional()

  const deleteWebhookEndpointsWebhookEndpointResponseValidator =
    responseValidationFactory([["200", s_deleted_webhook_endpoint]], s_error)

  router.delete(
    "deleteWebhookEndpointsWebhookEndpoint",
    "/v1/webhook_endpoints/:webhookEndpoint",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          deleteWebhookEndpointsWebhookEndpointParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          deleteWebhookEndpointsWebhookEndpointBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.deleteWebhookEndpointsWebhookEndpoint(input, ctx)

      ctx.body = deleteWebhookEndpointsWebhookEndpointResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const getWebhookEndpointsWebhookEndpointParamSchema = z.object({
    webhook_endpoint: z.coerce.string(),
  })

  const getWebhookEndpointsWebhookEndpointQuerySchema = z.object({
    expand: z.array(z.coerce.string()).optional(),
  })

  const getWebhookEndpointsWebhookEndpointBodySchema = z.object({}).optional()

  const getWebhookEndpointsWebhookEndpointResponseValidator =
    responseValidationFactory([["200", s_webhook_endpoint]], s_error)

  router.get(
    "getWebhookEndpointsWebhookEndpoint",
    "/v1/webhook_endpoints/:webhookEndpoint",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          getWebhookEndpointsWebhookEndpointParamSchema,
          ctx.params,
        ),
        query: parseRequestInput(
          getWebhookEndpointsWebhookEndpointQuerySchema,
          ctx.query,
        ),
        body: parseRequestInput(
          getWebhookEndpointsWebhookEndpointBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.getWebhookEndpointsWebhookEndpoint(input, ctx)

      ctx.body = getWebhookEndpointsWebhookEndpointResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  const postWebhookEndpointsWebhookEndpointParamSchema = z.object({
    webhook_endpoint: z.coerce.string(),
  })

  const postWebhookEndpointsWebhookEndpointBodySchema = z
    .object({
      description: z.union([z.coerce.string(), z.enum([""])]),
      disabled: z.coerce.boolean().optional(),
      enabled_events: z
        .array(
          z.enum([
            "*",
            "account.application.authorized",
            "account.application.deauthorized",
            "account.external_account.created",
            "account.external_account.deleted",
            "account.external_account.updated",
            "account.updated",
            "application_fee.created",
            "application_fee.refund.updated",
            "application_fee.refunded",
            "balance.available",
            "billing_portal.configuration.created",
            "billing_portal.configuration.updated",
            "billing_portal.session.created",
            "capability.updated",
            "cash_balance.funds_available",
            "charge.captured",
            "charge.dispute.closed",
            "charge.dispute.created",
            "charge.dispute.funds_reinstated",
            "charge.dispute.funds_withdrawn",
            "charge.dispute.updated",
            "charge.expired",
            "charge.failed",
            "charge.pending",
            "charge.refund.updated",
            "charge.refunded",
            "charge.succeeded",
            "charge.updated",
            "checkout.session.async_payment_failed",
            "checkout.session.async_payment_succeeded",
            "checkout.session.completed",
            "checkout.session.expired",
            "coupon.created",
            "coupon.deleted",
            "coupon.updated",
            "credit_note.created",
            "credit_note.updated",
            "credit_note.voided",
            "customer.created",
            "customer.deleted",
            "customer.discount.created",
            "customer.discount.deleted",
            "customer.discount.updated",
            "customer.source.created",
            "customer.source.deleted",
            "customer.source.expiring",
            "customer.source.updated",
            "customer.subscription.created",
            "customer.subscription.deleted",
            "customer.subscription.paused",
            "customer.subscription.pending_update_applied",
            "customer.subscription.pending_update_expired",
            "customer.subscription.resumed",
            "customer.subscription.trial_will_end",
            "customer.subscription.updated",
            "customer.tax_id.created",
            "customer.tax_id.deleted",
            "customer.tax_id.updated",
            "customer.updated",
            "customer_cash_balance_transaction.created",
            "file.created",
            "financial_connections.account.created",
            "financial_connections.account.deactivated",
            "financial_connections.account.disconnected",
            "financial_connections.account.reactivated",
            "financial_connections.account.refreshed_balance",
            "identity.verification_session.canceled",
            "identity.verification_session.created",
            "identity.verification_session.processing",
            "identity.verification_session.redacted",
            "identity.verification_session.requires_input",
            "identity.verification_session.verified",
            "invoice.created",
            "invoice.deleted",
            "invoice.finalization_failed",
            "invoice.finalized",
            "invoice.marked_uncollectible",
            "invoice.paid",
            "invoice.payment_action_required",
            "invoice.payment_failed",
            "invoice.payment_succeeded",
            "invoice.sent",
            "invoice.upcoming",
            "invoice.updated",
            "invoice.voided",
            "invoiceitem.created",
            "invoiceitem.deleted",
            "issuing_authorization.created",
            "issuing_authorization.request",
            "issuing_authorization.updated",
            "issuing_card.created",
            "issuing_card.updated",
            "issuing_cardholder.created",
            "issuing_cardholder.updated",
            "issuing_dispute.closed",
            "issuing_dispute.created",
            "issuing_dispute.funds_reinstated",
            "issuing_dispute.submitted",
            "issuing_dispute.updated",
            "issuing_transaction.created",
            "issuing_transaction.updated",
            "mandate.updated",
            "order.created",
            "payment_intent.amount_capturable_updated",
            "payment_intent.canceled",
            "payment_intent.created",
            "payment_intent.partially_funded",
            "payment_intent.payment_failed",
            "payment_intent.processing",
            "payment_intent.requires_action",
            "payment_intent.succeeded",
            "payment_link.created",
            "payment_link.updated",
            "payment_method.attached",
            "payment_method.automatically_updated",
            "payment_method.detached",
            "payment_method.updated",
            "payout.canceled",
            "payout.created",
            "payout.failed",
            "payout.paid",
            "payout.reconciliation_completed",
            "payout.updated",
            "person.created",
            "person.deleted",
            "person.updated",
            "plan.created",
            "plan.deleted",
            "plan.updated",
            "price.created",
            "price.deleted",
            "price.updated",
            "product.created",
            "product.deleted",
            "product.updated",
            "promotion_code.created",
            "promotion_code.updated",
            "quote.accepted",
            "quote.canceled",
            "quote.created",
            "quote.finalized",
            "radar.early_fraud_warning.created",
            "radar.early_fraud_warning.updated",
            "recipient.created",
            "recipient.deleted",
            "recipient.updated",
            "refund.created",
            "refund.updated",
            "reporting.report_run.failed",
            "reporting.report_run.succeeded",
            "reporting.report_type.updated",
            "review.closed",
            "review.opened",
            "setup_intent.canceled",
            "setup_intent.created",
            "setup_intent.requires_action",
            "setup_intent.setup_failed",
            "setup_intent.succeeded",
            "sigma.scheduled_query_run.created",
            "sku.created",
            "sku.deleted",
            "sku.updated",
            "source.canceled",
            "source.chargeable",
            "source.failed",
            "source.mandate_notification",
            "source.refund_attributes_required",
            "source.transaction.created",
            "source.transaction.updated",
            "subscription_schedule.aborted",
            "subscription_schedule.canceled",
            "subscription_schedule.completed",
            "subscription_schedule.created",
            "subscription_schedule.expiring",
            "subscription_schedule.released",
            "subscription_schedule.updated",
            "tax.settings.updated",
            "tax_rate.created",
            "tax_rate.updated",
            "terminal.reader.action_failed",
            "terminal.reader.action_succeeded",
            "test_helpers.test_clock.advancing",
            "test_helpers.test_clock.created",
            "test_helpers.test_clock.deleted",
            "test_helpers.test_clock.internal_failure",
            "test_helpers.test_clock.ready",
            "topup.canceled",
            "topup.created",
            "topup.failed",
            "topup.reversed",
            "topup.succeeded",
            "transfer.created",
            "transfer.reversed",
            "transfer.updated",
            "treasury.credit_reversal.created",
            "treasury.credit_reversal.posted",
            "treasury.debit_reversal.completed",
            "treasury.debit_reversal.created",
            "treasury.debit_reversal.initial_credit_granted",
            "treasury.financial_account.closed",
            "treasury.financial_account.created",
            "treasury.financial_account.features_status_updated",
            "treasury.inbound_transfer.canceled",
            "treasury.inbound_transfer.created",
            "treasury.inbound_transfer.failed",
            "treasury.inbound_transfer.succeeded",
            "treasury.outbound_payment.canceled",
            "treasury.outbound_payment.created",
            "treasury.outbound_payment.expected_arrival_date_updated",
            "treasury.outbound_payment.failed",
            "treasury.outbound_payment.posted",
            "treasury.outbound_payment.returned",
            "treasury.outbound_transfer.canceled",
            "treasury.outbound_transfer.created",
            "treasury.outbound_transfer.expected_arrival_date_updated",
            "treasury.outbound_transfer.failed",
            "treasury.outbound_transfer.posted",
            "treasury.outbound_transfer.returned",
            "treasury.received_credit.created",
            "treasury.received_credit.failed",
            "treasury.received_credit.succeeded",
            "treasury.received_debit.created",
          ]),
        )
        .optional(),
      expand: z.array(z.coerce.string()).optional(),
      metadata: z.union([z.object({}), z.enum([""])]),
      url: z.coerce.string().optional(),
    })
    .optional()

  const postWebhookEndpointsWebhookEndpointResponseValidator =
    responseValidationFactory([["200", s_webhook_endpoint]], s_error)

  router.post(
    "postWebhookEndpointsWebhookEndpoint",
    "/v1/webhook_endpoints/:webhookEndpoint",
    async (ctx, next) => {
      const input = {
        params: parseRequestInput(
          postWebhookEndpointsWebhookEndpointParamSchema,
          ctx.params,
        ),
        query: undefined,
        body: parseRequestInput(
          postWebhookEndpointsWebhookEndpointBodySchema,
          ctx.request.body,
        ),
      }

      const { status, body } =
        await implementation.postWebhookEndpointsWebhookEndpoint(input, ctx)

      ctx.body = postWebhookEndpointsWebhookEndpointResponseValidator(
        status,
        body,
      )
      ctx.status = status
      return next()
    },
  )

  return startServer({
    middleware: [],
    router,
    port: config.port,
  })
}
