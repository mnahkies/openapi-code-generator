/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import {
  t_account,
  t_account_branding_settings,
  t_account_settings,
  t_api_errors,
  t_application_fee,
  t_balance_transaction,
  t_bank_account,
  t_bank_connections_resource_accountholder,
  t_capability,
  t_card,
  t_charge,
  t_charge_transfer_data,
  t_checkout_session,
  t_connect_collection_transfer,
  t_credit_note,
  t_credit_note_line_item,
  t_customer,
  t_customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction,
  t_customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction,
  t_customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction,
  t_customer_balance_transaction,
  t_customer_cash_balance_transaction,
  t_deleted_discount,
  t_discount,
  t_discounts_resource_discount_amount,
  t_dispute,
  t_dispute_evidence,
  t_error,
  t_external_account,
  t_fee_refund,
  t_file,
  t_file_link,
  t_financial_connections_account,
  t_financial_connections_session,
  t_invoice,
  t_invoice_setting_customer_setting,
  t_invoice_transfer_data,
  t_invoiceitem,
  t_invoices_from_invoice,
  t_issuing_authorization,
  t_issuing_card,
  t_issuing_cardholder,
  t_issuing_cardholder_id_document,
  t_issuing_cardholder_individual,
  t_issuing_cardholder_verification,
  t_issuing_dispute,
  t_issuing_dispute_canceled_evidence,
  t_issuing_dispute_duplicate_evidence,
  t_issuing_dispute_evidence,
  t_issuing_dispute_fraudulent_evidence,
  t_issuing_dispute_merchandise_not_as_described_evidence,
  t_issuing_dispute_not_received_evidence,
  t_issuing_dispute_other_evidence,
  t_issuing_dispute_service_not_as_described_evidence,
  t_issuing_transaction,
  t_item,
  t_legal_entity_company,
  t_legal_entity_company_verification,
  t_legal_entity_company_verification_document,
  t_legal_entity_person_verification,
  t_legal_entity_person_verification_document,
  t_line_item,
  t_line_items_discount_amount,
  t_mandate,
  t_payment_intent,
  t_payment_link,
  t_payment_links_resource_invoice_creation,
  t_payment_links_resource_invoice_settings,
  t_payment_links_resource_transfer_data,
  t_payment_method,
  t_payment_method_card,
  t_payment_method_card_generated_card,
  t_payment_method_details,
  t_payment_method_details_bancontact,
  t_payment_method_details_ideal,
  t_payment_method_details_sofort,
  t_payment_method_sepa_debit,
  t_payment_pages_checkout_session_invoice_creation,
  t_payment_pages_checkout_session_invoice_settings,
  t_payment_pages_checkout_session_total_details,
  t_payment_pages_checkout_session_total_details_resource_breakdown,
  t_payment_source,
  t_payout,
  t_person,
  t_plan,
  t_price,
  t_product,
  t_promotion_code,
  t_quote,
  t_quotes_resource_computed,
  t_quotes_resource_from_quote,
  t_quotes_resource_recurring,
  t_quotes_resource_total_details,
  t_quotes_resource_total_details_resource_breakdown,
  t_quotes_resource_transfer_data,
  t_quotes_resource_upfront,
  t_radar_early_fraud_warning,
  t_refund,
  t_reporting_report_run,
  t_review,
  t_scheduled_query_run,
  t_sepa_debit_generated_from,
  t_setup_attempt,
  t_setup_attempt_payment_method_details,
  t_setup_attempt_payment_method_details_bancontact,
  t_setup_attempt_payment_method_details_card_present,
  t_setup_attempt_payment_method_details_ideal,
  t_setup_attempt_payment_method_details_sofort,
  t_setup_intent,
  t_subscription,
  t_subscription_item,
  t_subscription_schedule,
  t_subscription_schedule_add_invoice_item,
  t_subscription_schedule_configuration_item,
  t_subscription_schedule_phase_configuration,
  t_subscription_schedules_resource_default_settings,
  t_subscription_transfer_data,
  t_subscriptions_resource_pending_update,
  t_tax_id,
  t_terminal_configuration,
  t_terminal_configuration_configuration_resource_device_type_specific_config,
  t_terminal_reader,
  t_terminal_reader_reader_resource_process_payment_intent_action,
  t_terminal_reader_reader_resource_process_setup_intent_action,
  t_terminal_reader_reader_resource_reader_action,
  t_terminal_reader_reader_resource_refund_payment_action,
  t_token,
  t_topup,
  t_transfer,
  t_transfer_data,
  t_transfer_reversal,
  t_treasury_credit_reversal,
  t_treasury_debit_reversal,
  t_treasury_inbound_transfer,
  t_treasury_outbound_payment,
  t_treasury_outbound_payments_resource_returned_status,
  t_treasury_outbound_transfer,
  t_treasury_outbound_transfers_resource_returned_details,
  t_treasury_received_credit,
  t_treasury_received_credits_resource_linked_flows,
  t_treasury_received_credits_resource_source_flows_details,
  t_treasury_received_debit,
  t_treasury_transaction,
  t_treasury_transaction_entry,
  t_treasury_transactions_resource_flow_details,
} from "./models"
import { z } from "zod"

export const s_account_bacs_debit_payments_settings = z.object({
  display_name: z.coerce.string().optional(),
})

export const s_account_capabilities = z.object({
  acss_debit_payments: z.enum(["active", "inactive", "pending"]).optional(),
  affirm_payments: z.enum(["active", "inactive", "pending"]).optional(),
  afterpay_clearpay_payments: z
    .enum(["active", "inactive", "pending"])
    .optional(),
  au_becs_debit_payments: z.enum(["active", "inactive", "pending"]).optional(),
  bacs_debit_payments: z.enum(["active", "inactive", "pending"]).optional(),
  bancontact_payments: z.enum(["active", "inactive", "pending"]).optional(),
  bank_transfer_payments: z.enum(["active", "inactive", "pending"]).optional(),
  blik_payments: z.enum(["active", "inactive", "pending"]).optional(),
  boleto_payments: z.enum(["active", "inactive", "pending"]).optional(),
  card_issuing: z.enum(["active", "inactive", "pending"]).optional(),
  card_payments: z.enum(["active", "inactive", "pending"]).optional(),
  cartes_bancaires_payments: z
    .enum(["active", "inactive", "pending"])
    .optional(),
  cashapp_payments: z.enum(["active", "inactive", "pending"]).optional(),
  eps_payments: z.enum(["active", "inactive", "pending"]).optional(),
  fpx_payments: z.enum(["active", "inactive", "pending"]).optional(),
  giropay_payments: z.enum(["active", "inactive", "pending"]).optional(),
  grabpay_payments: z.enum(["active", "inactive", "pending"]).optional(),
  ideal_payments: z.enum(["active", "inactive", "pending"]).optional(),
  india_international_payments: z
    .enum(["active", "inactive", "pending"])
    .optional(),
  jcb_payments: z.enum(["active", "inactive", "pending"]).optional(),
  klarna_payments: z.enum(["active", "inactive", "pending"]).optional(),
  konbini_payments: z.enum(["active", "inactive", "pending"]).optional(),
  legacy_payments: z.enum(["active", "inactive", "pending"]).optional(),
  link_payments: z.enum(["active", "inactive", "pending"]).optional(),
  oxxo_payments: z.enum(["active", "inactive", "pending"]).optional(),
  p24_payments: z.enum(["active", "inactive", "pending"]).optional(),
  paynow_payments: z.enum(["active", "inactive", "pending"]).optional(),
  promptpay_payments: z.enum(["active", "inactive", "pending"]).optional(),
  sepa_debit_payments: z.enum(["active", "inactive", "pending"]).optional(),
  sofort_payments: z.enum(["active", "inactive", "pending"]).optional(),
  tax_reporting_us_1099_k: z.enum(["active", "inactive", "pending"]).optional(),
  tax_reporting_us_1099_misc: z
    .enum(["active", "inactive", "pending"])
    .optional(),
  transfers: z.enum(["active", "inactive", "pending"]).optional(),
  treasury: z.enum(["active", "inactive", "pending"]).optional(),
  us_bank_account_ach_payments: z
    .enum(["active", "inactive", "pending"])
    .optional(),
})

export const s_account_dashboard_settings = z.object({
  display_name: z.coerce.string().optional().nullable(),
  timezone: z.coerce.string().optional().nullable(),
})

export const s_account_decline_charge_on = z.object({
  avs_failure: z.coerce.boolean(),
  cvc_failure: z.coerce.boolean(),
})

export const s_account_link = z.object({
  created: z.coerce.number(),
  expires_at: z.coerce.number(),
  object: z.enum(["account_link"]),
  url: z.coerce.string(),
})

export const s_account_payments_settings = z.object({
  statement_descriptor: z.coerce.string().optional().nullable(),
  statement_descriptor_kana: z.coerce.string().optional().nullable(),
  statement_descriptor_kanji: z.coerce.string().optional().nullable(),
  statement_descriptor_prefix_kana: z.coerce.string().optional().nullable(),
  statement_descriptor_prefix_kanji: z.coerce.string().optional().nullable(),
})

export const s_account_requirements_alternative = z.object({
  alternative_fields_due: z.array(z.coerce.string()),
  original_fields_due: z.array(z.coerce.string()),
})

export const s_account_requirements_error = z.object({
  code: z.enum([
    "invalid_address_city_state_postal_code",
    "invalid_dob_age_under_18",
    "invalid_representative_country",
    "invalid_street_address",
    "invalid_tos_acceptance",
    "invalid_value_other",
    "verification_document_address_mismatch",
    "verification_document_address_missing",
    "verification_document_corrupt",
    "verification_document_country_not_supported",
    "verification_document_dob_mismatch",
    "verification_document_duplicate_type",
    "verification_document_expired",
    "verification_document_failed_copy",
    "verification_document_failed_greyscale",
    "verification_document_failed_other",
    "verification_document_failed_test_mode",
    "verification_document_fraudulent",
    "verification_document_id_number_mismatch",
    "verification_document_id_number_missing",
    "verification_document_incomplete",
    "verification_document_invalid",
    "verification_document_issue_or_expiry_date_missing",
    "verification_document_manipulated",
    "verification_document_missing_back",
    "verification_document_missing_front",
    "verification_document_name_mismatch",
    "verification_document_name_missing",
    "verification_document_nationality_mismatch",
    "verification_document_not_readable",
    "verification_document_not_signed",
    "verification_document_not_uploaded",
    "verification_document_photo_mismatch",
    "verification_document_too_large",
    "verification_document_type_not_supported",
    "verification_failed_address_match",
    "verification_failed_business_iec_number",
    "verification_failed_document_match",
    "verification_failed_id_number_match",
    "verification_failed_keyed_identity",
    "verification_failed_keyed_match",
    "verification_failed_name_match",
    "verification_failed_other",
    "verification_failed_residential_address",
    "verification_failed_tax_id_match",
    "verification_failed_tax_id_not_issued",
    "verification_missing_executives",
    "verification_missing_owners",
    "verification_requires_additional_memorandum_of_associations",
  ]),
  reason: z.coerce.string(),
  requirement: z.coerce.string(),
})

export const s_account_sepa_debit_payments_settings = z.object({
  creditor_id: z.coerce.string().optional(),
})

export const s_account_terms_of_service = z.object({
  date: z.coerce.number().optional().nullable(),
  ip: z.coerce.string().optional().nullable(),
  user_agent: z.coerce.string().optional(),
})

export const s_account_tos_acceptance = z.object({
  date: z.coerce.number().optional().nullable(),
  ip: z.coerce.string().optional().nullable(),
  service_agreement: z.coerce.string().optional(),
  user_agent: z.coerce.string().optional().nullable(),
})

export const s_account_unification_account_controller = z.object({
  is_controller: z.coerce.boolean().optional(),
  type: z.enum(["account", "application"]),
})

export const s_address = z.object({
  city: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  line1: z.coerce.string().optional().nullable(),
  line2: z.coerce.string().optional().nullable(),
  postal_code: z.coerce.string().optional().nullable(),
  state: z.coerce.string().optional().nullable(),
})

export const s_apple_pay_domain = z.object({
  created: z.coerce.number(),
  domain_name: z.coerce.string(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["apple_pay_domain"]),
})

export const s_application = z.object({
  id: z.coerce.string(),
  name: z.coerce.string().optional().nullable(),
  object: z.enum(["application"]),
})

export const s_automatic_tax = z.object({
  enabled: z.coerce.boolean(),
  status: z
    .enum(["complete", "failed", "requires_location_inputs"])
    .optional()
    .nullable(),
})

export const s_balance_amount_by_source_type = z.object({
  bank_account: z.coerce.number().optional(),
  card: z.coerce.number().optional(),
  fpx: z.coerce.number().optional(),
})

export const s_bank_connections_resource_balance_api_resource_cash_balance =
  z.object({ available: z.object({}).optional().nullable() })

export const s_bank_connections_resource_balance_api_resource_credit_balance =
  z.object({ used: z.object({}).optional().nullable() })

export const s_bank_connections_resource_balance_refresh = z.object({
  last_attempted_at: z.coerce.number(),
  status: z.enum(["failed", "pending", "succeeded"]),
})

export const s_bank_connections_resource_link_account_session_filters =
  z.object({ countries: z.array(z.coerce.string()).optional().nullable() })

export const s_bank_connections_resource_ownership_refresh = z.object({
  last_attempted_at: z.coerce.number(),
  status: z.enum(["failed", "pending", "succeeded"]),
})

export const s_cancellation_details = z.object({
  comment: z.coerce.string().optional().nullable(),
  feedback: z
    .enum([
      "customer_service",
      "low_quality",
      "missing_features",
      "other",
      "switched_service",
      "too_complex",
      "too_expensive",
      "unused",
    ])
    .optional()
    .nullable(),
  reason: z
    .enum(["cancellation_requested", "payment_disputed", "payment_failed"])
    .optional()
    .nullable(),
})

export const s_card_issuing_account_terms_of_service = z.object({
  date: z.coerce.number().optional().nullable(),
  ip: z.coerce.string().optional().nullable(),
  user_agent: z.coerce.string().optional(),
})

export const s_card_mandate_payment_method_details = z.object({})

export const s_charge_fraud_details = z.object({
  stripe_report: z.coerce.string().optional(),
  user_report: z.coerce.string().optional(),
})

export const s_checkout_acss_debit_mandate_options = z.object({
  custom_mandate_url: z.coerce.string().optional(),
  default_for: z.array(z.enum(["invoice", "subscription"])).optional(),
  interval_description: z.coerce.string().optional().nullable(),
  payment_schedule: z
    .enum(["combined", "interval", "sporadic"])
    .optional()
    .nullable(),
  transaction_type: z.enum(["business", "personal"]).optional().nullable(),
})

export const s_checkout_affirm_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_afterpay_clearpay_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_alipay_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_au_becs_debit_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_bacs_debit_payment_method_options = z.object({
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
})

export const s_checkout_bancontact_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_boleto_payment_method_options = z.object({
  expires_after_days: z.coerce.number(),
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
})

export const s_checkout_card_installments_options = z.object({
  enabled: z.coerce.boolean().optional(),
})

export const s_checkout_cashapp_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_eps_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_fpx_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_giropay_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_grab_pay_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_ideal_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_klarna_payment_method_options = z.object({
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
})

export const s_checkout_konbini_payment_method_options = z.object({
  expires_after_days: z.coerce.number().optional().nullable(),
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_oxxo_payment_method_options = z.object({
  expires_after_days: z.coerce.number(),
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_p24_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_paynow_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_checkout_pix_payment_method_options = z.object({
  expires_after_seconds: z.coerce.number().optional().nullable(),
})

export const s_checkout_sepa_debit_payment_method_options = z.object({
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
})

export const s_checkout_sofort_payment_method_options = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_country_spec_verification_field_details = z.object({
  additional: z.array(z.coerce.string()),
  minimum: z.array(z.coerce.string()),
})

export const s_coupon_applies_to = z.object({
  products: z.array(z.coerce.string()),
})

export const s_custom_unit_amount = z.object({
  maximum: z.coerce.number().optional().nullable(),
  minimum: z.coerce.number().optional().nullable(),
  preset: z.coerce.number().optional().nullable(),
})

export const s_customer_balance_customer_balance_settings = z.object({
  reconciliation_mode: z.enum(["automatic", "manual"]),
  using_merchant_default: z.coerce.boolean(),
})

export const s_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer =
  z.object({
    bic: z.coerce.string().optional().nullable(),
    iban_last4: z.coerce.string().optional().nullable(),
    sender_name: z.coerce.string().optional().nullable(),
  })

export const s_customer_tax_location = z.object({
  country: z.coerce.string(),
  source: z.enum([
    "billing_address",
    "ip_address",
    "payment_method",
    "shipping_destination",
  ]),
  state: z.coerce.string().optional().nullable(),
})

export const s_deleted_account = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["account"]),
})

export const s_deleted_apple_pay_domain = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["apple_pay_domain"]),
})

export const s_deleted_application = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  name: z.coerce.string().optional().nullable(),
  object: z.enum(["application"]),
})

export const s_deleted_bank_account = z.object({
  currency: z.coerce.string().optional().nullable(),
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["bank_account"]),
})

export const s_deleted_card = z.object({
  currency: z.coerce.string().optional().nullable(),
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["card"]),
})

export const s_deleted_coupon = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["coupon"]),
})

export const s_deleted_customer = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["customer"]),
})

export const s_deleted_invoice = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["invoice"]),
})

export const s_deleted_invoiceitem = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["invoiceitem"]),
})

export const s_deleted_person = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["person"]),
})

export const s_deleted_plan = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["plan"]),
})

export const s_deleted_price = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["price"]),
})

export const s_deleted_product = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["product"]),
})

export const s_deleted_radar_value_list = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["radar.value_list"]),
})

export const s_deleted_radar_value_list_item = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["radar.value_list_item"]),
})

export const s_deleted_subscription_item = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["subscription_item"]),
})

export const s_deleted_tax_id = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["tax_id"]),
})

export const s_deleted_terminal_configuration = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["terminal.configuration"]),
})

export const s_deleted_terminal_location = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["terminal.location"]),
})

export const s_deleted_terminal_reader = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["terminal.reader"]),
})

export const s_deleted_test_helpers_test_clock = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["test_helpers.test_clock"]),
})

export const s_deleted_webhook_endpoint = z.object({
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  object: z.enum(["webhook_endpoint"]),
})

export const s_dispute_evidence_details = z.object({
  due_by: z.coerce.number().optional().nullable(),
  has_evidence: z.coerce.boolean(),
  past_due: z.coerce.boolean(),
  submission_count: z.coerce.number(),
})

export const s_email_sent = z.object({
  email_sent_at: z.coerce.number(),
  email_sent_to: z.coerce.string(),
})

export const s_ephemeral_key = z.object({
  created: z.coerce.number(),
  expires: z.coerce.number(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["ephemeral_key"]),
  secret: z.coerce.string().optional(),
})

export const s_exchange_rate = z.object({
  id: z.coerce.string(),
  object: z.enum(["exchange_rate"]),
  rates: z.object({}),
})

export const s_fee = z.object({
  amount: z.coerce.number(),
  application: z.coerce.string().optional().nullable(),
  currency: z.coerce.string(),
  description: z.coerce.string().optional().nullable(),
  type: z.coerce.string(),
})

export const s_financial_connections_account_owner = z.object({
  email: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  name: z.coerce.string(),
  object: z.enum(["financial_connections.account_owner"]),
  ownership: z.coerce.string(),
  phone: z.coerce.string().optional().nullable(),
  raw_address: z.coerce.string().optional().nullable(),
  refreshed_at: z.coerce.number().optional().nullable(),
})

export const s_financial_reporting_finance_report_run_run_parameters = z.object(
  {
    columns: z.array(z.coerce.string()).optional(),
    connected_account: z.coerce.string().optional(),
    currency: z.coerce.string().optional(),
    interval_end: z.coerce.number().optional(),
    interval_start: z.coerce.number().optional(),
    payout: z.coerce.string().optional(),
    reporting_category: z.coerce.string().optional(),
    timezone: z.coerce.string().optional(),
  }
)

export const s_funding_instructions_bank_transfer_iban_record = z.object({
  account_holder_name: z.coerce.string(),
  bic: z.coerce.string(),
  country: z.coerce.string(),
  iban: z.coerce.string(),
})

export const s_funding_instructions_bank_transfer_sort_code_record = z.object({
  account_holder_name: z.coerce.string(),
  account_number: z.coerce.string(),
  sort_code: z.coerce.string(),
})

export const s_funding_instructions_bank_transfer_spei_record = z.object({
  bank_code: z.coerce.string(),
  bank_name: z.coerce.string(),
  clabe: z.coerce.string(),
})

export const s_funding_instructions_bank_transfer_zengin_record = z.object({
  account_holder_name: z.coerce.string().optional().nullable(),
  account_number: z.coerce.string().optional().nullable(),
  account_type: z.coerce.string().optional().nullable(),
  bank_code: z.coerce.string().optional().nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  branch_code: z.coerce.string().optional().nullable(),
  branch_name: z.coerce.string().optional().nullable(),
})

export const s_gelato_data_document_report_date_of_birth = z.object({
  day: z.coerce.number().optional().nullable(),
  month: z.coerce.number().optional().nullable(),
  year: z.coerce.number().optional().nullable(),
})

export const s_gelato_data_document_report_expiration_date = z.object({
  day: z.coerce.number().optional().nullable(),
  month: z.coerce.number().optional().nullable(),
  year: z.coerce.number().optional().nullable(),
})

export const s_gelato_data_document_report_issued_date = z.object({
  day: z.coerce.number().optional().nullable(),
  month: z.coerce.number().optional().nullable(),
  year: z.coerce.number().optional().nullable(),
})

export const s_gelato_data_id_number_report_date = z.object({
  day: z.coerce.number().optional().nullable(),
  month: z.coerce.number().optional().nullable(),
  year: z.coerce.number().optional().nullable(),
})

export const s_gelato_data_verified_outputs_date = z.object({
  day: z.coerce.number().optional().nullable(),
  month: z.coerce.number().optional().nullable(),
  year: z.coerce.number().optional().nullable(),
})

export const s_gelato_document_report_error = z.object({
  code: z
    .enum([
      "document_expired",
      "document_type_not_supported",
      "document_unverified_other",
    ])
    .optional()
    .nullable(),
  reason: z.coerce.string().optional().nullable(),
})

export const s_gelato_id_number_report_error = z.object({
  code: z
    .enum([
      "id_number_insufficient_document_data",
      "id_number_mismatch",
      "id_number_unverified_other",
    ])
    .optional()
    .nullable(),
  reason: z.coerce.string().optional().nullable(),
})

export const s_gelato_report_document_options = z.object({
  allowed_types: z
    .array(z.enum(["driving_license", "id_card", "passport"]))
    .optional(),
  require_id_number: z.coerce.boolean().optional(),
  require_live_capture: z.coerce.boolean().optional(),
  require_matching_selfie: z.coerce.boolean().optional(),
})

export const s_gelato_report_id_number_options = z.object({})

export const s_gelato_selfie_report_error = z.object({
  code: z
    .enum([
      "selfie_document_missing_photo",
      "selfie_face_mismatch",
      "selfie_manipulated",
      "selfie_unverified_other",
    ])
    .optional()
    .nullable(),
  reason: z.coerce.string().optional().nullable(),
})

export const s_gelato_session_document_options = z.object({
  allowed_types: z
    .array(z.enum(["driving_license", "id_card", "passport"]))
    .optional(),
  require_id_number: z.coerce.boolean().optional(),
  require_live_capture: z.coerce.boolean().optional(),
  require_matching_selfie: z.coerce.boolean().optional(),
})

export const s_gelato_session_id_number_options = z.object({})

export const s_gelato_session_last_error = z.object({
  code: z
    .enum([
      "abandoned",
      "consent_declined",
      "country_not_supported",
      "device_not_supported",
      "document_expired",
      "document_type_not_supported",
      "document_unverified_other",
      "id_number_insufficient_document_data",
      "id_number_mismatch",
      "id_number_unverified_other",
      "selfie_document_missing_photo",
      "selfie_face_mismatch",
      "selfie_manipulated",
      "selfie_unverified_other",
      "under_supported_age",
    ])
    .optional()
    .nullable(),
  reason: z.coerce.string().optional().nullable(),
})

export const s_inbound_transfers_payment_method_details_us_bank_account =
  z.object({
    account_holder_type: z
      .enum(["company", "individual"])
      .optional()
      .nullable(),
    account_type: z.enum(["checking", "savings"]).optional().nullable(),
    bank_name: z.coerce.string().optional().nullable(),
    fingerprint: z.coerce.string().optional().nullable(),
    last4: z.coerce.string().optional().nullable(),
    network: z.enum(["ach"]),
    routing_number: z.coerce.string().optional().nullable(),
  })

export const s_invoice_installments_card = z.object({
  enabled: z.coerce.boolean().optional().nullable(),
})

export const s_invoice_item_threshold_reason = z.object({
  line_item_ids: z.array(z.coerce.string()),
  usage_gte: z.coerce.number(),
})

export const s_invoice_line_item_period = z.object({
  end: z.coerce.number(),
  start: z.coerce.number(),
})

export const s_invoice_mandate_options_card = z.object({
  amount: z.coerce.number().optional().nullable(),
  amount_type: z.enum(["fixed", "maximum"]).optional().nullable(),
  description: z.coerce.string().optional().nullable(),
})

export const s_invoice_payment_method_options_acss_debit_mandate_options =
  z.object({
    transaction_type: z.enum(["business", "personal"]).optional().nullable(),
  })

export const s_invoice_payment_method_options_bancontact = z.object({
  preferred_language: z.enum(["de", "en", "fr", "nl"]),
})

export const s_invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer =
  z.object({ country: z.enum(["BE", "DE", "ES", "FR", "IE", "NL"]) })

export const s_invoice_payment_method_options_konbini = z.object({})

export const s_invoice_payment_method_options_us_bank_account_linked_account_options =
  z.object({
    permissions: z
      .array(z.enum(["balances", "payment_method", "transactions"]))
      .optional(),
  })

export const s_invoice_setting_custom_field = z.object({
  name: z.coerce.string(),
  value: z.coerce.string(),
})

export const s_invoice_setting_phase_setting = z.object({
  days_until_due: z.coerce.number().optional().nullable(),
})

export const s_invoice_setting_quote_setting = z.object({
  days_until_due: z.coerce.number().optional().nullable(),
})

export const s_invoice_setting_rendering_options = z.object({
  amount_tax_display: z.coerce.string().optional().nullable(),
})

export const s_invoice_setting_subscription_schedule_setting = z.object({
  days_until_due: z.coerce.number().optional().nullable(),
})

export const s_invoices_line_items_credited_items = z.object({
  invoice: z.coerce.string(),
  invoice_line_items: z.array(z.coerce.string()),
})

export const s_invoices_resource_invoice_tax_id = z.object({
  type: z.enum([
    "ae_trn",
    "au_abn",
    "au_arn",
    "bg_uic",
    "br_cnpj",
    "br_cpf",
    "ca_bn",
    "ca_gst_hst",
    "ca_pst_bc",
    "ca_pst_mb",
    "ca_pst_sk",
    "ca_qst",
    "ch_vat",
    "cl_tin",
    "eg_tin",
    "es_cif",
    "eu_oss_vat",
    "eu_vat",
    "gb_vat",
    "ge_vat",
    "hk_br",
    "hu_tin",
    "id_npwp",
    "il_vat",
    "in_gst",
    "is_vat",
    "jp_cn",
    "jp_rn",
    "jp_trn",
    "ke_pin",
    "kr_brn",
    "li_uid",
    "mx_rfc",
    "my_frp",
    "my_itn",
    "my_sst",
    "no_vat",
    "nz_gst",
    "ph_tin",
    "ru_inn",
    "ru_kpp",
    "sa_vat",
    "sg_gst",
    "sg_uen",
    "si_tin",
    "th_vat",
    "tr_tin",
    "tw_vat",
    "ua_vat",
    "unknown",
    "us_ein",
    "za_vat",
  ]),
  value: z.coerce.string().optional().nullable(),
})

export const s_invoices_status_transitions = z.object({
  finalized_at: z.coerce.number().optional().nullable(),
  marked_uncollectible_at: z.coerce.number().optional().nullable(),
  paid_at: z.coerce.number().optional().nullable(),
  voided_at: z.coerce.number().optional().nullable(),
})

export const s_issuing_authorization_amount_details = z.object({
  atm_fee: z.coerce.number().optional().nullable(),
})

export const s_issuing_authorization_merchant_data = z.object({
  category: z.coerce.string(),
  category_code: z.coerce.string(),
  city: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  network_id: z.coerce.string(),
  postal_code: z.coerce.string().optional().nullable(),
  state: z.coerce.string().optional().nullable(),
})

export const s_issuing_authorization_network_data = z.object({
  acquiring_institution_id: z.coerce.string().optional().nullable(),
})

export const s_issuing_authorization_treasury = z.object({
  received_credits: z.array(z.coerce.string()),
  received_debits: z.array(z.coerce.string()),
  transaction: z.coerce.string().optional().nullable(),
})

export const s_issuing_authorization_verification_data = z.object({
  address_line1_check: z.enum(["match", "mismatch", "not_provided"]),
  address_postal_code_check: z.enum(["match", "mismatch", "not_provided"]),
  cvc_check: z.enum(["match", "mismatch", "not_provided"]),
  expiry_check: z.enum(["match", "mismatch", "not_provided"]),
})

export const s_issuing_card_apple_pay = z.object({
  eligible: z.coerce.boolean(),
  ineligible_reason: z
    .enum([
      "missing_agreement",
      "missing_cardholder_contact",
      "unsupported_region",
    ])
    .optional()
    .nullable(),
})

export const s_issuing_card_google_pay = z.object({
  eligible: z.coerce.boolean(),
  ineligible_reason: z
    .enum([
      "missing_agreement",
      "missing_cardholder_contact",
      "unsupported_region",
    ])
    .optional()
    .nullable(),
})

export const s_issuing_card_shipping_customs = z.object({
  eori_number: z.coerce.string().optional().nullable(),
})

export const s_issuing_card_spending_limit = z.object({
  amount: z.coerce.number(),
  categories: z
    .array(
      z.enum([
        "ac_refrigeration_repair",
        "accounting_bookkeeping_services",
        "advertising_services",
        "agricultural_cooperative",
        "airlines_air_carriers",
        "airports_flying_fields",
        "ambulance_services",
        "amusement_parks_carnivals",
        "antique_reproductions",
        "antique_shops",
        "aquariums",
        "architectural_surveying_services",
        "art_dealers_and_galleries",
        "artists_supply_and_craft_shops",
        "auto_and_home_supply_stores",
        "auto_body_repair_shops",
        "auto_paint_shops",
        "auto_service_shops",
        "automated_cash_disburse",
        "automated_fuel_dispensers",
        "automobile_associations",
        "automotive_parts_and_accessories_stores",
        "automotive_tire_stores",
        "bail_and_bond_payments",
        "bakeries",
        "bands_orchestras",
        "barber_and_beauty_shops",
        "betting_casino_gambling",
        "bicycle_shops",
        "billiard_pool_establishments",
        "boat_dealers",
        "boat_rentals_and_leases",
        "book_stores",
        "books_periodicals_and_newspapers",
        "bowling_alleys",
        "bus_lines",
        "business_secretarial_schools",
        "buying_shopping_services",
        "cable_satellite_and_other_pay_television_and_radio",
        "camera_and_photographic_supply_stores",
        "candy_nut_and_confectionery_stores",
        "car_and_truck_dealers_new_used",
        "car_and_truck_dealers_used_only",
        "car_rental_agencies",
        "car_washes",
        "carpentry_services",
        "carpet_upholstery_cleaning",
        "caterers",
        "charitable_and_social_service_organizations_fundraising",
        "chemicals_and_allied_products",
        "child_care_services",
        "childrens_and_infants_wear_stores",
        "chiropodists_podiatrists",
        "chiropractors",
        "cigar_stores_and_stands",
        "civic_social_fraternal_associations",
        "cleaning_and_maintenance",
        "clothing_rental",
        "colleges_universities",
        "commercial_equipment",
        "commercial_footwear",
        "commercial_photography_art_and_graphics",
        "commuter_transport_and_ferries",
        "computer_network_services",
        "computer_programming",
        "computer_repair",
        "computer_software_stores",
        "computers_peripherals_and_software",
        "concrete_work_services",
        "construction_materials",
        "consulting_public_relations",
        "correspondence_schools",
        "cosmetic_stores",
        "counseling_services",
        "country_clubs",
        "courier_services",
        "court_costs",
        "credit_reporting_agencies",
        "cruise_lines",
        "dairy_products_stores",
        "dance_hall_studios_schools",
        "dating_escort_services",
        "dentists_orthodontists",
        "department_stores",
        "detective_agencies",
        "digital_goods_applications",
        "digital_goods_games",
        "digital_goods_large_volume",
        "digital_goods_media",
        "direct_marketing_catalog_merchant",
        "direct_marketing_combination_catalog_and_retail_merchant",
        "direct_marketing_inbound_telemarketing",
        "direct_marketing_insurance_services",
        "direct_marketing_other",
        "direct_marketing_outbound_telemarketing",
        "direct_marketing_subscription",
        "direct_marketing_travel",
        "discount_stores",
        "doctors",
        "door_to_door_sales",
        "drapery_window_covering_and_upholstery_stores",
        "drinking_places",
        "drug_stores_and_pharmacies",
        "drugs_drug_proprietaries_and_druggist_sundries",
        "dry_cleaners",
        "durable_goods",
        "duty_free_stores",
        "eating_places_restaurants",
        "educational_services",
        "electric_razor_stores",
        "electric_vehicle_charging",
        "electrical_parts_and_equipment",
        "electrical_services",
        "electronics_repair_shops",
        "electronics_stores",
        "elementary_secondary_schools",
        "emergency_services_gcas_visa_use_only",
        "employment_temp_agencies",
        "equipment_rental",
        "exterminating_services",
        "family_clothing_stores",
        "fast_food_restaurants",
        "financial_institutions",
        "fines_government_administrative_entities",
        "fireplace_fireplace_screens_and_accessories_stores",
        "floor_covering_stores",
        "florists",
        "florists_supplies_nursery_stock_and_flowers",
        "freezer_and_locker_meat_provisioners",
        "fuel_dealers_non_automotive",
        "funeral_services_crematories",
        "furniture_home_furnishings_and_equipment_stores_except_appliances",
        "furniture_repair_refinishing",
        "furriers_and_fur_shops",
        "general_services",
        "gift_card_novelty_and_souvenir_shops",
        "glass_paint_and_wallpaper_stores",
        "glassware_crystal_stores",
        "golf_courses_public",
        "government_licensed_horse_dog_racing_us_region_only",
        "government_licensed_online_casions_online_gambling_us_region_only",
        "government_owned_lotteries_non_us_region",
        "government_owned_lotteries_us_region_only",
        "government_services",
        "grocery_stores_supermarkets",
        "hardware_equipment_and_supplies",
        "hardware_stores",
        "health_and_beauty_spas",
        "hearing_aids_sales_and_supplies",
        "heating_plumbing_a_c",
        "hobby_toy_and_game_shops",
        "home_supply_warehouse_stores",
        "hospitals",
        "hotels_motels_and_resorts",
        "household_appliance_stores",
        "industrial_supplies",
        "information_retrieval_services",
        "insurance_default",
        "insurance_underwriting_premiums",
        "intra_company_purchases",
        "jewelry_stores_watches_clocks_and_silverware_stores",
        "landscaping_services",
        "laundries",
        "laundry_cleaning_services",
        "legal_services_attorneys",
        "luggage_and_leather_goods_stores",
        "lumber_building_materials_stores",
        "manual_cash_disburse",
        "marinas_service_and_supplies",
        "marketplaces",
        "masonry_stonework_and_plaster",
        "massage_parlors",
        "medical_and_dental_labs",
        "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
        "medical_services",
        "membership_organizations",
        "mens_and_boys_clothing_and_accessories_stores",
        "mens_womens_clothing_stores",
        "metal_service_centers",
        "miscellaneous",
        "miscellaneous_apparel_and_accessory_shops",
        "miscellaneous_auto_dealers",
        "miscellaneous_business_services",
        "miscellaneous_food_stores",
        "miscellaneous_general_merchandise",
        "miscellaneous_general_services",
        "miscellaneous_home_furnishing_specialty_stores",
        "miscellaneous_publishing_and_printing",
        "miscellaneous_recreation_services",
        "miscellaneous_repair_shops",
        "miscellaneous_specialty_retail",
        "mobile_home_dealers",
        "motion_picture_theaters",
        "motor_freight_carriers_and_trucking",
        "motor_homes_dealers",
        "motor_vehicle_supplies_and_new_parts",
        "motorcycle_shops_and_dealers",
        "motorcycle_shops_dealers",
        "music_stores_musical_instruments_pianos_and_sheet_music",
        "news_dealers_and_newsstands",
        "non_fi_money_orders",
        "non_fi_stored_value_card_purchase_load",
        "nondurable_goods",
        "nurseries_lawn_and_garden_supply_stores",
        "nursing_personal_care",
        "office_and_commercial_furniture",
        "opticians_eyeglasses",
        "optometrists_ophthalmologist",
        "orthopedic_goods_prosthetic_devices",
        "osteopaths",
        "package_stores_beer_wine_and_liquor",
        "paints_varnishes_and_supplies",
        "parking_lots_garages",
        "passenger_railways",
        "pawn_shops",
        "pet_shops_pet_food_and_supplies",
        "petroleum_and_petroleum_products",
        "photo_developing",
        "photographic_photocopy_microfilm_equipment_and_supplies",
        "photographic_studios",
        "picture_video_production",
        "piece_goods_notions_and_other_dry_goods",
        "plumbing_heating_equipment_and_supplies",
        "political_organizations",
        "postal_services_government_only",
        "precious_stones_and_metals_watches_and_jewelry",
        "professional_services",
        "public_warehousing_and_storage",
        "quick_copy_repro_and_blueprint",
        "railroads",
        "real_estate_agents_and_managers_rentals",
        "record_stores",
        "recreational_vehicle_rentals",
        "religious_goods_stores",
        "religious_organizations",
        "roofing_siding_sheet_metal",
        "secretarial_support_services",
        "security_brokers_dealers",
        "service_stations",
        "sewing_needlework_fabric_and_piece_goods_stores",
        "shoe_repair_hat_cleaning",
        "shoe_stores",
        "small_appliance_repair",
        "snowmobile_dealers",
        "special_trade_services",
        "specialty_cleaning",
        "sporting_goods_stores",
        "sporting_recreation_camps",
        "sports_and_riding_apparel_stores",
        "sports_clubs_fields",
        "stamp_and_coin_stores",
        "stationary_office_supplies_printing_and_writing_paper",
        "stationery_stores_office_and_school_supply_stores",
        "swimming_pools_sales",
        "t_ui_travel_germany",
        "tailors_alterations",
        "tax_payments_government_agencies",
        "tax_preparation_services",
        "taxicabs_limousines",
        "telecommunication_equipment_and_telephone_sales",
        "telecommunication_services",
        "telegraph_services",
        "tent_and_awning_shops",
        "testing_laboratories",
        "theatrical_ticket_agencies",
        "timeshares",
        "tire_retreading_and_repair",
        "tolls_bridge_fees",
        "tourist_attractions_and_exhibits",
        "towing_services",
        "trailer_parks_campgrounds",
        "transportation_services",
        "travel_agencies_tour_operators",
        "truck_stop_iteration",
        "truck_utility_trailer_rentals",
        "typesetting_plate_making_and_related_services",
        "typewriter_stores",
        "u_s_federal_government_agencies_or_departments",
        "uniforms_commercial_clothing",
        "used_merchandise_and_secondhand_stores",
        "utilities",
        "variety_stores",
        "veterinary_services",
        "video_amusement_game_supplies",
        "video_game_arcades",
        "video_tape_rental_stores",
        "vocational_trade_schools",
        "watch_jewelry_repair",
        "welding_repair",
        "wholesale_clubs",
        "wig_and_toupee_stores",
        "wires_money_orders",
        "womens_accessory_and_specialty_shops",
        "womens_ready_to_wear_stores",
        "wrecking_and_salvage_yards",
      ])
    )
    .optional()
    .nullable(),
  interval: z.enum([
    "all_time",
    "daily",
    "monthly",
    "per_authorization",
    "weekly",
    "yearly",
  ]),
})

export const s_issuing_cardholder_company = z.object({
  tax_id_provided: z.coerce.boolean(),
})

export const s_issuing_cardholder_individual_dob = z.object({
  day: z.coerce.number().optional().nullable(),
  month: z.coerce.number().optional().nullable(),
  year: z.coerce.number().optional().nullable(),
})

export const s_issuing_cardholder_requirements = z.object({
  disabled_reason: z
    .enum([
      "listed",
      "rejected.listed",
      "requirements.past_due",
      "under_review",
    ])
    .optional()
    .nullable(),
  past_due: z
    .array(
      z.enum([
        "company.tax_id",
        "individual.card_issuing.user_terms_acceptance.date",
        "individual.card_issuing.user_terms_acceptance.ip",
        "individual.dob.day",
        "individual.dob.month",
        "individual.dob.year",
        "individual.first_name",
        "individual.last_name",
        "individual.verification.document",
      ])
    )
    .optional()
    .nullable(),
})

export const s_issuing_cardholder_spending_limit = z.object({
  amount: z.coerce.number(),
  categories: z
    .array(
      z.enum([
        "ac_refrigeration_repair",
        "accounting_bookkeeping_services",
        "advertising_services",
        "agricultural_cooperative",
        "airlines_air_carriers",
        "airports_flying_fields",
        "ambulance_services",
        "amusement_parks_carnivals",
        "antique_reproductions",
        "antique_shops",
        "aquariums",
        "architectural_surveying_services",
        "art_dealers_and_galleries",
        "artists_supply_and_craft_shops",
        "auto_and_home_supply_stores",
        "auto_body_repair_shops",
        "auto_paint_shops",
        "auto_service_shops",
        "automated_cash_disburse",
        "automated_fuel_dispensers",
        "automobile_associations",
        "automotive_parts_and_accessories_stores",
        "automotive_tire_stores",
        "bail_and_bond_payments",
        "bakeries",
        "bands_orchestras",
        "barber_and_beauty_shops",
        "betting_casino_gambling",
        "bicycle_shops",
        "billiard_pool_establishments",
        "boat_dealers",
        "boat_rentals_and_leases",
        "book_stores",
        "books_periodicals_and_newspapers",
        "bowling_alleys",
        "bus_lines",
        "business_secretarial_schools",
        "buying_shopping_services",
        "cable_satellite_and_other_pay_television_and_radio",
        "camera_and_photographic_supply_stores",
        "candy_nut_and_confectionery_stores",
        "car_and_truck_dealers_new_used",
        "car_and_truck_dealers_used_only",
        "car_rental_agencies",
        "car_washes",
        "carpentry_services",
        "carpet_upholstery_cleaning",
        "caterers",
        "charitable_and_social_service_organizations_fundraising",
        "chemicals_and_allied_products",
        "child_care_services",
        "childrens_and_infants_wear_stores",
        "chiropodists_podiatrists",
        "chiropractors",
        "cigar_stores_and_stands",
        "civic_social_fraternal_associations",
        "cleaning_and_maintenance",
        "clothing_rental",
        "colleges_universities",
        "commercial_equipment",
        "commercial_footwear",
        "commercial_photography_art_and_graphics",
        "commuter_transport_and_ferries",
        "computer_network_services",
        "computer_programming",
        "computer_repair",
        "computer_software_stores",
        "computers_peripherals_and_software",
        "concrete_work_services",
        "construction_materials",
        "consulting_public_relations",
        "correspondence_schools",
        "cosmetic_stores",
        "counseling_services",
        "country_clubs",
        "courier_services",
        "court_costs",
        "credit_reporting_agencies",
        "cruise_lines",
        "dairy_products_stores",
        "dance_hall_studios_schools",
        "dating_escort_services",
        "dentists_orthodontists",
        "department_stores",
        "detective_agencies",
        "digital_goods_applications",
        "digital_goods_games",
        "digital_goods_large_volume",
        "digital_goods_media",
        "direct_marketing_catalog_merchant",
        "direct_marketing_combination_catalog_and_retail_merchant",
        "direct_marketing_inbound_telemarketing",
        "direct_marketing_insurance_services",
        "direct_marketing_other",
        "direct_marketing_outbound_telemarketing",
        "direct_marketing_subscription",
        "direct_marketing_travel",
        "discount_stores",
        "doctors",
        "door_to_door_sales",
        "drapery_window_covering_and_upholstery_stores",
        "drinking_places",
        "drug_stores_and_pharmacies",
        "drugs_drug_proprietaries_and_druggist_sundries",
        "dry_cleaners",
        "durable_goods",
        "duty_free_stores",
        "eating_places_restaurants",
        "educational_services",
        "electric_razor_stores",
        "electric_vehicle_charging",
        "electrical_parts_and_equipment",
        "electrical_services",
        "electronics_repair_shops",
        "electronics_stores",
        "elementary_secondary_schools",
        "emergency_services_gcas_visa_use_only",
        "employment_temp_agencies",
        "equipment_rental",
        "exterminating_services",
        "family_clothing_stores",
        "fast_food_restaurants",
        "financial_institutions",
        "fines_government_administrative_entities",
        "fireplace_fireplace_screens_and_accessories_stores",
        "floor_covering_stores",
        "florists",
        "florists_supplies_nursery_stock_and_flowers",
        "freezer_and_locker_meat_provisioners",
        "fuel_dealers_non_automotive",
        "funeral_services_crematories",
        "furniture_home_furnishings_and_equipment_stores_except_appliances",
        "furniture_repair_refinishing",
        "furriers_and_fur_shops",
        "general_services",
        "gift_card_novelty_and_souvenir_shops",
        "glass_paint_and_wallpaper_stores",
        "glassware_crystal_stores",
        "golf_courses_public",
        "government_licensed_horse_dog_racing_us_region_only",
        "government_licensed_online_casions_online_gambling_us_region_only",
        "government_owned_lotteries_non_us_region",
        "government_owned_lotteries_us_region_only",
        "government_services",
        "grocery_stores_supermarkets",
        "hardware_equipment_and_supplies",
        "hardware_stores",
        "health_and_beauty_spas",
        "hearing_aids_sales_and_supplies",
        "heating_plumbing_a_c",
        "hobby_toy_and_game_shops",
        "home_supply_warehouse_stores",
        "hospitals",
        "hotels_motels_and_resorts",
        "household_appliance_stores",
        "industrial_supplies",
        "information_retrieval_services",
        "insurance_default",
        "insurance_underwriting_premiums",
        "intra_company_purchases",
        "jewelry_stores_watches_clocks_and_silverware_stores",
        "landscaping_services",
        "laundries",
        "laundry_cleaning_services",
        "legal_services_attorneys",
        "luggage_and_leather_goods_stores",
        "lumber_building_materials_stores",
        "manual_cash_disburse",
        "marinas_service_and_supplies",
        "marketplaces",
        "masonry_stonework_and_plaster",
        "massage_parlors",
        "medical_and_dental_labs",
        "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
        "medical_services",
        "membership_organizations",
        "mens_and_boys_clothing_and_accessories_stores",
        "mens_womens_clothing_stores",
        "metal_service_centers",
        "miscellaneous",
        "miscellaneous_apparel_and_accessory_shops",
        "miscellaneous_auto_dealers",
        "miscellaneous_business_services",
        "miscellaneous_food_stores",
        "miscellaneous_general_merchandise",
        "miscellaneous_general_services",
        "miscellaneous_home_furnishing_specialty_stores",
        "miscellaneous_publishing_and_printing",
        "miscellaneous_recreation_services",
        "miscellaneous_repair_shops",
        "miscellaneous_specialty_retail",
        "mobile_home_dealers",
        "motion_picture_theaters",
        "motor_freight_carriers_and_trucking",
        "motor_homes_dealers",
        "motor_vehicle_supplies_and_new_parts",
        "motorcycle_shops_and_dealers",
        "motorcycle_shops_dealers",
        "music_stores_musical_instruments_pianos_and_sheet_music",
        "news_dealers_and_newsstands",
        "non_fi_money_orders",
        "non_fi_stored_value_card_purchase_load",
        "nondurable_goods",
        "nurseries_lawn_and_garden_supply_stores",
        "nursing_personal_care",
        "office_and_commercial_furniture",
        "opticians_eyeglasses",
        "optometrists_ophthalmologist",
        "orthopedic_goods_prosthetic_devices",
        "osteopaths",
        "package_stores_beer_wine_and_liquor",
        "paints_varnishes_and_supplies",
        "parking_lots_garages",
        "passenger_railways",
        "pawn_shops",
        "pet_shops_pet_food_and_supplies",
        "petroleum_and_petroleum_products",
        "photo_developing",
        "photographic_photocopy_microfilm_equipment_and_supplies",
        "photographic_studios",
        "picture_video_production",
        "piece_goods_notions_and_other_dry_goods",
        "plumbing_heating_equipment_and_supplies",
        "political_organizations",
        "postal_services_government_only",
        "precious_stones_and_metals_watches_and_jewelry",
        "professional_services",
        "public_warehousing_and_storage",
        "quick_copy_repro_and_blueprint",
        "railroads",
        "real_estate_agents_and_managers_rentals",
        "record_stores",
        "recreational_vehicle_rentals",
        "religious_goods_stores",
        "religious_organizations",
        "roofing_siding_sheet_metal",
        "secretarial_support_services",
        "security_brokers_dealers",
        "service_stations",
        "sewing_needlework_fabric_and_piece_goods_stores",
        "shoe_repair_hat_cleaning",
        "shoe_stores",
        "small_appliance_repair",
        "snowmobile_dealers",
        "special_trade_services",
        "specialty_cleaning",
        "sporting_goods_stores",
        "sporting_recreation_camps",
        "sports_and_riding_apparel_stores",
        "sports_clubs_fields",
        "stamp_and_coin_stores",
        "stationary_office_supplies_printing_and_writing_paper",
        "stationery_stores_office_and_school_supply_stores",
        "swimming_pools_sales",
        "t_ui_travel_germany",
        "tailors_alterations",
        "tax_payments_government_agencies",
        "tax_preparation_services",
        "taxicabs_limousines",
        "telecommunication_equipment_and_telephone_sales",
        "telecommunication_services",
        "telegraph_services",
        "tent_and_awning_shops",
        "testing_laboratories",
        "theatrical_ticket_agencies",
        "timeshares",
        "tire_retreading_and_repair",
        "tolls_bridge_fees",
        "tourist_attractions_and_exhibits",
        "towing_services",
        "trailer_parks_campgrounds",
        "transportation_services",
        "travel_agencies_tour_operators",
        "truck_stop_iteration",
        "truck_utility_trailer_rentals",
        "typesetting_plate_making_and_related_services",
        "typewriter_stores",
        "u_s_federal_government_agencies_or_departments",
        "uniforms_commercial_clothing",
        "used_merchandise_and_secondhand_stores",
        "utilities",
        "variety_stores",
        "veterinary_services",
        "video_amusement_game_supplies",
        "video_game_arcades",
        "video_tape_rental_stores",
        "vocational_trade_schools",
        "watch_jewelry_repair",
        "welding_repair",
        "wholesale_clubs",
        "wig_and_toupee_stores",
        "wires_money_orders",
        "womens_accessory_and_specialty_shops",
        "womens_ready_to_wear_stores",
        "wrecking_and_salvage_yards",
      ])
    )
    .optional()
    .nullable(),
  interval: z.enum([
    "all_time",
    "daily",
    "monthly",
    "per_authorization",
    "weekly",
    "yearly",
  ]),
})

export const s_issuing_cardholder_user_terms_acceptance = z.object({
  date: z.coerce.number().optional().nullable(),
  ip: z.coerce.string().optional().nullable(),
  user_agent: z.coerce.string().optional().nullable(),
})

export const s_issuing_dispute_treasury = z.object({
  debit_reversal: z.coerce.string().optional().nullable(),
  received_debit: z.coerce.string(),
})

export const s_issuing_settlement = z.object({
  bin: z.coerce.string(),
  clearing_date: z.coerce.number(),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  id: z.coerce.string(),
  interchange_fees: z.coerce.number(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  net_total: z.coerce.number(),
  network: z.enum(["visa"]),
  network_fees: z.coerce.number(),
  network_settlement_identifier: z.coerce.string(),
  object: z.enum(["issuing.settlement"]),
  settlement_service: z.coerce.string(),
  transaction_count: z.coerce.number(),
  transaction_volume: z.coerce.number(),
})

export const s_issuing_transaction_amount_details = z.object({
  atm_fee: z.coerce.number().optional().nullable(),
})

export const s_issuing_transaction_flight_data_leg = z.object({
  arrival_airport_code: z.coerce.string().optional().nullable(),
  carrier: z.coerce.string().optional().nullable(),
  departure_airport_code: z.coerce.string().optional().nullable(),
  flight_number: z.coerce.string().optional().nullable(),
  service_class: z.coerce.string().optional().nullable(),
  stopover_allowed: z.coerce.boolean().optional().nullable(),
})

export const s_issuing_transaction_fuel_data = z.object({
  type: z.coerce.string(),
  unit: z.coerce.string(),
  unit_cost_decimal: z.coerce.string(),
  volume_decimal: z.coerce.string().optional().nullable(),
})

export const s_issuing_transaction_lodging_data = z.object({
  check_in_at: z.coerce.number().optional().nullable(),
  nights: z.coerce.number().optional().nullable(),
})

export const s_issuing_transaction_receipt_data = z.object({
  description: z.coerce.string().optional().nullable(),
  quantity: z.coerce.number().optional().nullable(),
  total: z.coerce.number().optional().nullable(),
  unit_cost: z.coerce.number().optional().nullable(),
})

export const s_issuing_transaction_treasury = z.object({
  received_credit: z.coerce.string().optional().nullable(),
  received_debit: z.coerce.string().optional().nullable(),
})

export const s_legal_entity_dob = z.object({
  day: z.coerce.number().optional().nullable(),
  month: z.coerce.number().optional().nullable(),
  year: z.coerce.number().optional().nullable(),
})

export const s_legal_entity_japan_address = z.object({
  city: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  line1: z.coerce.string().optional().nullable(),
  line2: z.coerce.string().optional().nullable(),
  postal_code: z.coerce.string().optional().nullable(),
  state: z.coerce.string().optional().nullable(),
  town: z.coerce.string().optional().nullable(),
})

export const s_legal_entity_ubo_declaration = z.object({
  date: z.coerce.number().optional().nullable(),
  ip: z.coerce.string().optional().nullable(),
  user_agent: z.coerce.string().optional().nullable(),
})

export const s_linked_account_options_us_bank_account = z.object({
  permissions: z
    .array(z.enum(["balances", "ownership", "payment_method", "transactions"]))
    .optional(),
  return_url: z.coerce.string().optional(),
})

export const s_login_link = z.object({
  created: z.coerce.number(),
  object: z.enum(["login_link"]),
  url: z.coerce.string(),
})

export const s_mandate_acss_debit = z.object({
  default_for: z.array(z.enum(["invoice", "subscription"])).optional(),
  interval_description: z.coerce.string().optional().nullable(),
  payment_schedule: z.enum(["combined", "interval", "sporadic"]),
  transaction_type: z.enum(["business", "personal"]),
})

export const s_mandate_au_becs_debit = z.object({ url: z.coerce.string() })

export const s_mandate_bacs_debit = z.object({
  network_status: z.enum(["accepted", "pending", "refused", "revoked"]),
  reference: z.coerce.string(),
  url: z.coerce.string(),
})

export const s_mandate_cashapp = z.object({})

export const s_mandate_link = z.object({})

export const s_mandate_multi_use = z.object({})

export const s_mandate_options_off_session_details_blik = z.object({
  amount: z.coerce.number().optional().nullable(),
  currency: z.coerce.string().optional().nullable(),
  interval: z.enum(["day", "month", "week", "year"]).optional().nullable(),
  interval_count: z.coerce.number().optional().nullable(),
})

export const s_mandate_sepa_debit = z.object({
  reference: z.coerce.string(),
  url: z.coerce.string(),
})

export const s_mandate_single_use = z.object({
  amount: z.coerce.number(),
  currency: z.coerce.string(),
})

export const s_mandate_us_bank_account = z.object({})

export const s_networks = z.object({
  available: z.array(z.coerce.string()),
  preferred: z.coerce.string().optional().nullable(),
})

export const s_notification_event_data = z.object({
  object: z.object({}),
  previous_attributes: z.object({}).optional(),
})

export const s_notification_event_request = z.object({
  id: z.coerce.string().optional().nullable(),
  idempotency_key: z.coerce.string().optional().nullable(),
})

export const s_offline_acceptance = z.object({})

export const s_online_acceptance = z.object({
  ip_address: z.coerce.string().optional().nullable(),
  user_agent: z.coerce.string().optional().nullable(),
})

export const s_outbound_payments_payment_method_details_financial_account =
  z.object({ id: z.coerce.string(), network: z.enum(["stripe"]) })

export const s_outbound_payments_payment_method_details_us_bank_account =
  z.object({
    account_holder_type: z
      .enum(["company", "individual"])
      .optional()
      .nullable(),
    account_type: z.enum(["checking", "savings"]).optional().nullable(),
    bank_name: z.coerce.string().optional().nullable(),
    fingerprint: z.coerce.string().optional().nullable(),
    last4: z.coerce.string().optional().nullable(),
    network: z.enum(["ach", "us_domestic_wire"]),
    routing_number: z.coerce.string().optional().nullable(),
  })

export const s_outbound_transfers_payment_method_details_us_bank_account =
  z.object({
    account_holder_type: z
      .enum(["company", "individual"])
      .optional()
      .nullable(),
    account_type: z.enum(["checking", "savings"]).optional().nullable(),
    bank_name: z.coerce.string().optional().nullable(),
    fingerprint: z.coerce.string().optional().nullable(),
    last4: z.coerce.string().optional().nullable(),
    network: z.enum(["ach", "us_domestic_wire"]),
    routing_number: z.coerce.string().optional().nullable(),
  })

export const s_package_dimensions = z.object({
  height: z.coerce.number(),
  length: z.coerce.number(),
  weight: z.coerce.number(),
  width: z.coerce.number(),
})

export const s_payment_flows_amount_details_resource_tip = z.object({
  amount: z.coerce.number().optional(),
})

export const s_payment_flows_automatic_payment_methods_payment_intent =
  z.object({ enabled: z.coerce.boolean() })

export const s_payment_flows_automatic_payment_methods_setup_intent = z.object({
  enabled: z.coerce.boolean().optional().nullable(),
})

export const s_payment_flows_private_payment_methods_alipay = z.object({})

export const s_payment_flows_private_payment_methods_alipay_details = z.object({
  buyer_id: z.coerce.string().optional(),
  fingerprint: z.coerce.string().optional().nullable(),
  transaction_id: z.coerce.string().optional().nullable(),
})

export const s_payment_flows_private_payment_methods_klarna_dob = z.object({
  day: z.coerce.number().optional().nullable(),
  month: z.coerce.number().optional().nullable(),
  year: z.coerce.number().optional().nullable(),
})

export const s_payment_intent_next_action_alipay_handle_redirect = z.object({
  native_data: z.coerce.string().optional().nullable(),
  native_url: z.coerce.string().optional().nullable(),
  return_url: z.coerce.string().optional().nullable(),
  url: z.coerce.string().optional().nullable(),
})

export const s_payment_intent_next_action_boleto = z.object({
  expires_at: z.coerce.number().optional().nullable(),
  hosted_voucher_url: z.coerce.string().optional().nullable(),
  number: z.coerce.string().optional().nullable(),
  pdf: z.coerce.string().optional().nullable(),
})

export const s_payment_intent_next_action_card_await_notification = z.object({
  charge_attempt_at: z.coerce.number().optional().nullable(),
  customer_approval_required: z.coerce.boolean().optional().nullable(),
})

export const s_payment_intent_next_action_cashapp_qr_code = z.object({
  expires_at: z.coerce.number(),
  image_url_png: z.coerce.string(),
  image_url_svg: z.coerce.string(),
})

export const s_payment_intent_next_action_display_oxxo_details = z.object({
  expires_after: z.coerce.number().optional().nullable(),
  hosted_voucher_url: z.coerce.string().optional().nullable(),
  number: z.coerce.string().optional().nullable(),
})

export const s_payment_intent_next_action_konbini_familymart = z.object({
  confirmation_number: z.coerce.string().optional(),
  payment_code: z.coerce.string(),
})

export const s_payment_intent_next_action_konbini_lawson = z.object({
  confirmation_number: z.coerce.string().optional(),
  payment_code: z.coerce.string(),
})

export const s_payment_intent_next_action_konbini_ministop = z.object({
  confirmation_number: z.coerce.string().optional(),
  payment_code: z.coerce.string(),
})

export const s_payment_intent_next_action_konbini_seicomart = z.object({
  confirmation_number: z.coerce.string().optional(),
  payment_code: z.coerce.string(),
})

export const s_payment_intent_next_action_paynow_display_qr_code = z.object({
  data: z.coerce.string(),
  hosted_instructions_url: z.coerce.string().optional().nullable(),
  image_url_png: z.coerce.string(),
  image_url_svg: z.coerce.string(),
})

export const s_payment_intent_next_action_pix_display_qr_code = z.object({
  data: z.coerce.string().optional(),
  expires_at: z.coerce.number().optional(),
  hosted_instructions_url: z.coerce.string().optional(),
  image_url_png: z.coerce.string().optional(),
  image_url_svg: z.coerce.string().optional(),
})

export const s_payment_intent_next_action_promptpay_display_qr_code = z.object({
  data: z.coerce.string(),
  hosted_instructions_url: z.coerce.string(),
  image_url_png: z.coerce.string(),
  image_url_svg: z.coerce.string(),
})

export const s_payment_intent_next_action_redirect_to_url = z.object({
  return_url: z.coerce.string().optional().nullable(),
  url: z.coerce.string().optional().nullable(),
})

export const s_payment_intent_next_action_verify_with_microdeposits = z.object({
  arrival_date: z.coerce.number(),
  hosted_verification_url: z.coerce.string(),
  microdeposit_type: z
    .enum(["amounts", "descriptor_code"])
    .optional()
    .nullable(),
})

export const s_payment_intent_next_action_wechat_pay_display_qr_code = z.object(
  {
    data: z.coerce.string(),
    hosted_instructions_url: z.coerce.string(),
    image_data_url: z.coerce.string(),
    image_url_png: z.coerce.string(),
    image_url_svg: z.coerce.string(),
  }
)

export const s_payment_intent_next_action_wechat_pay_redirect_to_android_app =
  z.object({
    app_id: z.coerce.string(),
    nonce_str: z.coerce.string(),
    package: z.coerce.string(),
    partner_id: z.coerce.string(),
    prepay_id: z.coerce.string(),
    sign: z.coerce.string(),
    timestamp: z.coerce.string(),
  })

export const s_payment_intent_next_action_wechat_pay_redirect_to_ios_app =
  z.object({ native_url: z.coerce.string() })

export const s_payment_intent_payment_method_options_au_becs_debit = z.object({
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
})

export const s_payment_intent_payment_method_options_blik = z.object({})

export const s_payment_intent_payment_method_options_eps = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_intent_payment_method_options_link = z.object({
  capture_method: z.enum(["manual"]).optional(),
  persistent_token: z.coerce.string().optional().nullable(),
  setup_future_usage: z.enum(["none", "off_session"]).optional(),
})

export const s_payment_intent_payment_method_options_mandate_options_acss_debit =
  z.object({
    custom_mandate_url: z.coerce.string().optional(),
    interval_description: z.coerce.string().optional().nullable(),
    payment_schedule: z
      .enum(["combined", "interval", "sporadic"])
      .optional()
      .nullable(),
    transaction_type: z.enum(["business", "personal"]).optional().nullable(),
  })

export const s_payment_intent_payment_method_options_mandate_options_sepa_debit =
  z.object({})

export const s_payment_intent_processing_customer_notification = z.object({
  approval_requested: z.coerce.boolean().optional().nullable(),
  completes_at: z.coerce.number().optional().nullable(),
})

export const s_payment_links_resource_automatic_tax = z.object({
  enabled: z.coerce.boolean(),
})

export const s_payment_links_resource_completion_behavior_confirmation_page =
  z.object({ custom_message: z.coerce.string().optional().nullable() })

export const s_payment_links_resource_completion_behavior_redirect = z.object({
  url: z.coerce.string(),
})

export const s_payment_links_resource_consent_collection = z.object({
  promotions: z.enum(["auto", "none"]).optional().nullable(),
  terms_of_service: z.enum(["none", "required"]).optional().nullable(),
})

export const s_payment_links_resource_custom_fields_dropdown_option = z.object({
  label: z.coerce.string(),
  value: z.coerce.string(),
})

export const s_payment_links_resource_custom_fields_label = z.object({
  custom: z.coerce.string().optional().nullable(),
  type: z.enum(["custom"]),
})

export const s_payment_links_resource_custom_text_position = z.object({
  message: z.coerce.string(),
})

export const s_payment_links_resource_payment_intent_data = z.object({
  capture_method: z
    .enum(["automatic", "automatic_async", "manual"])
    .optional()
    .nullable(),
  setup_future_usage: z
    .enum(["off_session", "on_session"])
    .optional()
    .nullable(),
})

export const s_payment_links_resource_phone_number_collection = z.object({
  enabled: z.coerce.boolean(),
})

export const s_payment_links_resource_shipping_address_collection = z.object({
  allowed_countries: z.array(
    z.enum([
      "AC",
      "AD",
      "AE",
      "AF",
      "AG",
      "AI",
      "AL",
      "AM",
      "AO",
      "AQ",
      "AR",
      "AT",
      "AU",
      "AW",
      "AX",
      "AZ",
      "BA",
      "BB",
      "BD",
      "BE",
      "BF",
      "BG",
      "BH",
      "BI",
      "BJ",
      "BL",
      "BM",
      "BN",
      "BO",
      "BQ",
      "BR",
      "BS",
      "BT",
      "BV",
      "BW",
      "BY",
      "BZ",
      "CA",
      "CD",
      "CF",
      "CG",
      "CH",
      "CI",
      "CK",
      "CL",
      "CM",
      "CN",
      "CO",
      "CR",
      "CV",
      "CW",
      "CY",
      "CZ",
      "DE",
      "DJ",
      "DK",
      "DM",
      "DO",
      "DZ",
      "EC",
      "EE",
      "EG",
      "EH",
      "ER",
      "ES",
      "ET",
      "FI",
      "FJ",
      "FK",
      "FO",
      "FR",
      "GA",
      "GB",
      "GD",
      "GE",
      "GF",
      "GG",
      "GH",
      "GI",
      "GL",
      "GM",
      "GN",
      "GP",
      "GQ",
      "GR",
      "GS",
      "GT",
      "GU",
      "GW",
      "GY",
      "HK",
      "HN",
      "HR",
      "HT",
      "HU",
      "ID",
      "IE",
      "IL",
      "IM",
      "IN",
      "IO",
      "IQ",
      "IS",
      "IT",
      "JE",
      "JM",
      "JO",
      "JP",
      "KE",
      "KG",
      "KH",
      "KI",
      "KM",
      "KN",
      "KR",
      "KW",
      "KY",
      "KZ",
      "LA",
      "LB",
      "LC",
      "LI",
      "LK",
      "LR",
      "LS",
      "LT",
      "LU",
      "LV",
      "LY",
      "MA",
      "MC",
      "MD",
      "ME",
      "MF",
      "MG",
      "MK",
      "ML",
      "MM",
      "MN",
      "MO",
      "MQ",
      "MR",
      "MS",
      "MT",
      "MU",
      "MV",
      "MW",
      "MX",
      "MY",
      "MZ",
      "NA",
      "NC",
      "NE",
      "NG",
      "NI",
      "NL",
      "NO",
      "NP",
      "NR",
      "NU",
      "NZ",
      "OM",
      "PA",
      "PE",
      "PF",
      "PG",
      "PH",
      "PK",
      "PL",
      "PM",
      "PN",
      "PR",
      "PS",
      "PT",
      "PY",
      "QA",
      "RE",
      "RO",
      "RS",
      "RU",
      "RW",
      "SA",
      "SB",
      "SC",
      "SE",
      "SG",
      "SH",
      "SI",
      "SJ",
      "SK",
      "SL",
      "SM",
      "SN",
      "SO",
      "SR",
      "SS",
      "ST",
      "SV",
      "SX",
      "SZ",
      "TA",
      "TC",
      "TD",
      "TF",
      "TG",
      "TH",
      "TJ",
      "TK",
      "TL",
      "TM",
      "TN",
      "TO",
      "TR",
      "TT",
      "TV",
      "TW",
      "TZ",
      "UA",
      "UG",
      "US",
      "UY",
      "UZ",
      "VA",
      "VC",
      "VE",
      "VG",
      "VN",
      "VU",
      "WF",
      "WS",
      "XK",
      "YE",
      "YT",
      "ZA",
      "ZM",
      "ZW",
      "ZZ",
    ])
  ),
})

export const s_payment_links_resource_subscription_data = z.object({
  description: z.coerce.string().optional().nullable(),
  trial_period_days: z.coerce.number().optional().nullable(),
})

export const s_payment_links_resource_tax_id_collection = z.object({
  enabled: z.coerce.boolean(),
})

export const s_payment_method_acss_debit = z.object({
  bank_name: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  institution_number: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  transit_number: z.coerce.string().optional().nullable(),
})

export const s_payment_method_affirm = z.object({})

export const s_payment_method_afterpay_clearpay = z.object({})

export const s_payment_method_au_becs_debit = z.object({
  bsb_number: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
})

export const s_payment_method_bacs_debit = z.object({
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  sort_code: z.coerce.string().optional().nullable(),
})

export const s_payment_method_bancontact = z.object({})

export const s_payment_method_blik = z.object({})

export const s_payment_method_boleto = z.object({ tax_id: z.coerce.string() })

export const s_payment_method_card_checks = z.object({
  address_line1_check: z.coerce.string().optional().nullable(),
  address_postal_code_check: z.coerce.string().optional().nullable(),
  cvc_check: z.coerce.string().optional().nullable(),
})

export const s_payment_method_card_present = z.object({})

export const s_payment_method_card_wallet_amex_express_checkout = z.object({})

export const s_payment_method_card_wallet_apple_pay = z.object({})

export const s_payment_method_card_wallet_google_pay = z.object({})

export const s_payment_method_card_wallet_samsung_pay = z.object({})

export const s_payment_method_cashapp = z.object({})

export const s_payment_method_customer_balance = z.object({})

export const s_payment_method_details_ach_credit_transfer = z.object({
  account_number: z.coerce.string().optional().nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  routing_number: z.coerce.string().optional().nullable(),
  swift_code: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_ach_debit = z.object({
  account_holder_type: z.enum(["company", "individual"]).optional().nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  routing_number: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_acss_debit = z.object({
  bank_name: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  institution_number: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  mandate: z.coerce.string().optional(),
  transit_number: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_affirm = z.object({})

export const s_payment_method_details_afterpay_clearpay = z.object({
  reference: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_au_becs_debit = z.object({
  bsb_number: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  mandate: z.coerce.string().optional(),
})

export const s_payment_method_details_bacs_debit = z.object({
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  mandate: z.coerce.string().optional().nullable(),
  sort_code: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_blik = z.object({})

export const s_payment_method_details_boleto = z.object({
  tax_id: z.coerce.string(),
})

export const s_payment_method_details_card_checks = z.object({
  address_line1_check: z.coerce.string().optional().nullable(),
  address_postal_code_check: z.coerce.string().optional().nullable(),
  cvc_check: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_card_installments_plan = z.object({
  count: z.coerce.number().optional().nullable(),
  interval: z.enum(["month"]).optional().nullable(),
  type: z.enum(["fixed_count"]),
})

export const s_payment_method_details_card_present_receipt = z.object({
  account_type: z.enum(["checking", "credit", "prepaid", "unknown"]).optional(),
  application_cryptogram: z.coerce.string().optional().nullable(),
  application_preferred_name: z.coerce.string().optional().nullable(),
  authorization_code: z.coerce.string().optional().nullable(),
  authorization_response_code: z.coerce.string().optional().nullable(),
  cardholder_verification_method: z.coerce.string().optional().nullable(),
  dedicated_file_name: z.coerce.string().optional().nullable(),
  terminal_verification_results: z.coerce.string().optional().nullable(),
  transaction_status_information: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_card_wallet_amex_express_checkout =
  z.object({})

export const s_payment_method_details_card_wallet_apple_pay = z.object({})

export const s_payment_method_details_card_wallet_google_pay = z.object({})

export const s_payment_method_details_card_wallet_samsung_pay = z.object({})

export const s_payment_method_details_cashapp = z.object({})

export const s_payment_method_details_customer_balance = z.object({})

export const s_payment_method_details_eps = z.object({
  bank: z
    .enum([
      "arzte_und_apotheker_bank",
      "austrian_anadi_bank_ag",
      "bank_austria",
      "bankhaus_carl_spangler",
      "bankhaus_schelhammer_und_schattera_ag",
      "bawag_psk_ag",
      "bks_bank_ag",
      "brull_kallmus_bank_ag",
      "btv_vier_lander_bank",
      "capital_bank_grawe_gruppe_ag",
      "deutsche_bank_ag",
      "dolomitenbank",
      "easybank_ag",
      "erste_bank_und_sparkassen",
      "hypo_alpeadriabank_international_ag",
      "hypo_bank_burgenland_aktiengesellschaft",
      "hypo_noe_lb_fur_niederosterreich_u_wien",
      "hypo_oberosterreich_salzburg_steiermark",
      "hypo_tirol_bank_ag",
      "hypo_vorarlberg_bank_ag",
      "marchfelder_bank",
      "oberbank_ag",
      "raiffeisen_bankengruppe_osterreich",
      "schoellerbank_ag",
      "sparda_bank_wien",
      "volksbank_gruppe",
      "volkskreditbank_ag",
      "vr_bank_braunau",
    ])
    .optional()
    .nullable(),
  verified_name: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_fpx = z.object({
  bank: z.enum([
    "affin_bank",
    "agrobank",
    "alliance_bank",
    "ambank",
    "bank_islam",
    "bank_muamalat",
    "bank_of_china",
    "bank_rakyat",
    "bsn",
    "cimb",
    "deutsche_bank",
    "hong_leong_bank",
    "hsbc",
    "kfh",
    "maybank2e",
    "maybank2u",
    "ocbc",
    "pb_enterprise",
    "public_bank",
    "rhb",
    "standard_chartered",
    "uob",
  ]),
  transaction_id: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_giropay = z.object({
  bank_code: z.coerce.string().optional().nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  bic: z.coerce.string().optional().nullable(),
  verified_name: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_grabpay = z.object({
  transaction_id: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_interac_present_receipt = z.object({
  account_type: z.enum(["checking", "savings", "unknown"]).optional(),
  application_cryptogram: z.coerce.string().optional().nullable(),
  application_preferred_name: z.coerce.string().optional().nullable(),
  authorization_code: z.coerce.string().optional().nullable(),
  authorization_response_code: z.coerce.string().optional().nullable(),
  cardholder_verification_method: z.coerce.string().optional().nullable(),
  dedicated_file_name: z.coerce.string().optional().nullable(),
  terminal_verification_results: z.coerce.string().optional().nullable(),
  transaction_status_information: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_klarna = z.object({
  payment_method_category: z.coerce.string().optional().nullable(),
  preferred_locale: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_konbini_store = z.object({
  chain: z
    .enum(["familymart", "lawson", "ministop", "seicomart"])
    .optional()
    .nullable(),
})

export const s_payment_method_details_link = z.object({
  country: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_multibanco = z.object({
  entity: z.coerce.string().optional().nullable(),
  reference: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_oxxo = z.object({
  number: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_p24 = z.object({
  bank: z
    .enum([
      "alior_bank",
      "bank_millennium",
      "bank_nowy_bfg_sa",
      "bank_pekao_sa",
      "banki_spbdzielcze",
      "blik",
      "bnp_paribas",
      "boz",
      "citi_handlowy",
      "credit_agricole",
      "envelobank",
      "etransfer_pocztowy24",
      "getin_bank",
      "ideabank",
      "ing",
      "inteligo",
      "mbank_mtransfer",
      "nest_przelew",
      "noble_pay",
      "pbac_z_ipko",
      "plus_bank",
      "santander_przelew24",
      "tmobile_usbugi_bankowe",
      "toyota_bank",
      "volkswagen_bank",
    ])
    .optional()
    .nullable(),
  reference: z.coerce.string().optional().nullable(),
  verified_name: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_paynow = z.object({
  reference: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_pix = z.object({
  bank_transaction_id: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_promptpay = z.object({
  reference: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_sepa_debit = z.object({
  bank_code: z.coerce.string().optional().nullable(),
  branch_code: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  mandate: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_stripe_account = z.object({})

export const s_payment_method_details_us_bank_account = z.object({
  account_holder_type: z.enum(["company", "individual"]).optional().nullable(),
  account_type: z.enum(["checking", "savings"]).optional().nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  routing_number: z.coerce.string().optional().nullable(),
})

export const s_payment_method_details_wechat = z.object({})

export const s_payment_method_details_wechat_pay = z.object({
  fingerprint: z.coerce.string().optional().nullable(),
  transaction_id: z.coerce.string().optional().nullable(),
})

export const s_payment_method_eps = z.object({
  bank: z
    .enum([
      "arzte_und_apotheker_bank",
      "austrian_anadi_bank_ag",
      "bank_austria",
      "bankhaus_carl_spangler",
      "bankhaus_schelhammer_und_schattera_ag",
      "bawag_psk_ag",
      "bks_bank_ag",
      "brull_kallmus_bank_ag",
      "btv_vier_lander_bank",
      "capital_bank_grawe_gruppe_ag",
      "deutsche_bank_ag",
      "dolomitenbank",
      "easybank_ag",
      "erste_bank_und_sparkassen",
      "hypo_alpeadriabank_international_ag",
      "hypo_bank_burgenland_aktiengesellschaft",
      "hypo_noe_lb_fur_niederosterreich_u_wien",
      "hypo_oberosterreich_salzburg_steiermark",
      "hypo_tirol_bank_ag",
      "hypo_vorarlberg_bank_ag",
      "marchfelder_bank",
      "oberbank_ag",
      "raiffeisen_bankengruppe_osterreich",
      "schoellerbank_ag",
      "sparda_bank_wien",
      "volksbank_gruppe",
      "volkskreditbank_ag",
      "vr_bank_braunau",
    ])
    .optional()
    .nullable(),
})

export const s_payment_method_fpx = z.object({
  bank: z.enum([
    "affin_bank",
    "agrobank",
    "alliance_bank",
    "ambank",
    "bank_islam",
    "bank_muamalat",
    "bank_of_china",
    "bank_rakyat",
    "bsn",
    "cimb",
    "deutsche_bank",
    "hong_leong_bank",
    "hsbc",
    "kfh",
    "maybank2e",
    "maybank2u",
    "ocbc",
    "pb_enterprise",
    "public_bank",
    "rhb",
    "standard_chartered",
    "uob",
  ]),
})

export const s_payment_method_giropay = z.object({})

export const s_payment_method_grabpay = z.object({})

export const s_payment_method_ideal = z.object({
  bank: z
    .enum([
      "abn_amro",
      "asn_bank",
      "bunq",
      "handelsbanken",
      "ing",
      "knab",
      "moneyou",
      "rabobank",
      "regiobank",
      "revolut",
      "sns_bank",
      "triodos_bank",
      "van_lanschot",
      "yoursafe",
    ])
    .optional()
    .nullable(),
  bic: z
    .enum([
      "ABNANL2A",
      "ASNBNL21",
      "BITSNL2A",
      "BUNQNL2A",
      "FVLBNL22",
      "HANDNL2A",
      "INGBNL2A",
      "KNABNL2H",
      "MOYONL21",
      "RABONL2U",
      "RBRBNL21",
      "REVOIE23",
      "REVOLT21",
      "SNSBNL2A",
      "TRIONL2U",
    ])
    .optional()
    .nullable(),
})

export const s_payment_method_interac_present = z.object({})

export const s_payment_method_konbini = z.object({})

export const s_payment_method_link = z.object({
  email: z.coerce.string().optional().nullable(),
  persistent_token: z.coerce.string().optional(),
})

export const s_payment_method_options_affirm = z.object({
  capture_method: z.enum(["manual"]).optional(),
  preferred_locale: z.coerce.string().optional(),
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_afterpay_clearpay = z.object({
  capture_method: z.enum(["manual"]).optional(),
  reference: z.coerce.string().optional().nullable(),
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_alipay = z.object({
  setup_future_usage: z.enum(["none", "off_session"]).optional(),
})

export const s_payment_method_options_bacs_debit = z.object({
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
})

export const s_payment_method_options_bancontact = z.object({
  preferred_language: z.enum(["de", "en", "fr", "nl"]),
  setup_future_usage: z.enum(["none", "off_session"]).optional(),
})

export const s_payment_method_options_boleto = z.object({
  expires_after_days: z.coerce.number(),
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
})

export const s_payment_method_options_card_mandate_options = z.object({
  amount: z.coerce.number(),
  amount_type: z.enum(["fixed", "maximum"]),
  description: z.coerce.string().optional().nullable(),
  end_date: z.coerce.number().optional().nullable(),
  interval: z.enum(["day", "month", "sporadic", "week", "year"]),
  interval_count: z.coerce.number().optional().nullable(),
  reference: z.coerce.string(),
  start_date: z.coerce.number(),
  supported_types: z
    .array(z.enum(["india"]))
    .optional()
    .nullable(),
})

export const s_payment_method_options_card_present = z.object({
  request_extended_authorization: z.coerce.boolean().optional().nullable(),
  request_incremental_authorization_support: z.coerce
    .boolean()
    .optional()
    .nullable(),
})

export const s_payment_method_options_cashapp = z.object({
  capture_method: z.enum(["manual"]).optional(),
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
})

export const s_payment_method_options_customer_balance_eu_bank_account =
  z.object({ country: z.enum(["BE", "DE", "ES", "FR", "IE", "NL"]) })

export const s_payment_method_options_fpx = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_giropay = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_grabpay = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_ideal = z.object({
  setup_future_usage: z.enum(["none", "off_session"]).optional(),
})

export const s_payment_method_options_interac_present = z.object({})

export const s_payment_method_options_klarna = z.object({
  capture_method: z.enum(["manual"]).optional(),
  preferred_locale: z.coerce.string().optional().nullable(),
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_konbini = z.object({
  confirmation_number: z.coerce.string().optional().nullable(),
  expires_after_days: z.coerce.number().optional().nullable(),
  expires_at: z.coerce.number().optional().nullable(),
  product_description: z.coerce.string().optional().nullable(),
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_oxxo = z.object({
  expires_after_days: z.coerce.number(),
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_p24 = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_paynow = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_pix = z.object({
  expires_after_seconds: z.coerce.number().optional().nullable(),
  expires_at: z.coerce.number().optional().nullable(),
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_promptpay = z.object({
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_options_sofort = z.object({
  preferred_language: z
    .enum(["de", "en", "es", "fr", "it", "nl", "pl"])
    .optional()
    .nullable(),
  setup_future_usage: z.enum(["none", "off_session"]).optional(),
})

export const s_payment_method_options_wechat_pay = z.object({
  app_id: z.coerce.string().optional().nullable(),
  client: z.enum(["android", "ios", "web"]).optional().nullable(),
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_oxxo = z.object({})

export const s_payment_method_p24 = z.object({
  bank: z
    .enum([
      "alior_bank",
      "bank_millennium",
      "bank_nowy_bfg_sa",
      "bank_pekao_sa",
      "banki_spbdzielcze",
      "blik",
      "bnp_paribas",
      "boz",
      "citi_handlowy",
      "credit_agricole",
      "envelobank",
      "etransfer_pocztowy24",
      "getin_bank",
      "ideabank",
      "ing",
      "inteligo",
      "mbank_mtransfer",
      "nest_przelew",
      "noble_pay",
      "pbac_z_ipko",
      "plus_bank",
      "santander_przelew24",
      "tmobile_usbugi_bankowe",
      "toyota_bank",
      "volkswagen_bank",
    ])
    .optional()
    .nullable(),
})

export const s_payment_method_paynow = z.object({})

export const s_payment_method_pix = z.object({})

export const s_payment_method_promptpay = z.object({})

export const s_payment_method_sofort = z.object({
  country: z.coerce.string().optional().nullable(),
})

export const s_payment_method_us_bank_account_blocked = z.object({
  network_code: z
    .enum([
      "R02",
      "R03",
      "R04",
      "R05",
      "R07",
      "R08",
      "R10",
      "R11",
      "R16",
      "R20",
      "R29",
      "R31",
    ])
    .optional()
    .nullable(),
  reason: z
    .enum([
      "bank_account_closed",
      "bank_account_frozen",
      "bank_account_invalid_details",
      "bank_account_restricted",
      "bank_account_unusable",
      "debit_not_authorized",
    ])
    .optional()
    .nullable(),
})

export const s_payment_method_wechat_pay = z.object({})

export const s_payment_pages_checkout_session_after_expiration_recovery =
  z.object({
    allow_promotion_codes: z.coerce.boolean(),
    enabled: z.coerce.boolean(),
    expires_at: z.coerce.number().optional().nullable(),
    url: z.coerce.string().optional().nullable(),
  })

export const s_payment_pages_checkout_session_automatic_tax = z.object({
  enabled: z.coerce.boolean(),
  status: z
    .enum(["complete", "failed", "requires_location_inputs"])
    .optional()
    .nullable(),
})

export const s_payment_pages_checkout_session_consent = z.object({
  promotions: z.enum(["opt_in", "opt_out"]).optional().nullable(),
  terms_of_service: z.enum(["accepted"]).optional().nullable(),
})

export const s_payment_pages_checkout_session_consent_collection = z.object({
  promotions: z.enum(["auto", "none"]).optional().nullable(),
  terms_of_service: z.enum(["none", "required"]).optional().nullable(),
})

export const s_payment_pages_checkout_session_currency_conversion = z.object({
  amount_subtotal: z.coerce.number(),
  amount_total: z.coerce.number(),
  fx_rate: z.coerce.string(),
  source_currency: z.coerce.string(),
})

export const s_payment_pages_checkout_session_custom_fields_label = z.object({
  custom: z.coerce.string().optional().nullable(),
  type: z.enum(["custom"]),
})

export const s_payment_pages_checkout_session_custom_fields_numeric = z.object({
  value: z.coerce.string().optional().nullable(),
})

export const s_payment_pages_checkout_session_custom_fields_option = z.object({
  label: z.coerce.string(),
  value: z.coerce.string(),
})

export const s_payment_pages_checkout_session_custom_fields_text = z.object({
  value: z.coerce.string().optional().nullable(),
})

export const s_payment_pages_checkout_session_custom_text_position = z.object({
  message: z.coerce.string(),
})

export const s_payment_pages_checkout_session_phone_number_collection =
  z.object({ enabled: z.coerce.boolean() })

export const s_payment_pages_checkout_session_shipping_address_collection =
  z.object({
    allowed_countries: z.array(
      z.enum([
        "AC",
        "AD",
        "AE",
        "AF",
        "AG",
        "AI",
        "AL",
        "AM",
        "AO",
        "AQ",
        "AR",
        "AT",
        "AU",
        "AW",
        "AX",
        "AZ",
        "BA",
        "BB",
        "BD",
        "BE",
        "BF",
        "BG",
        "BH",
        "BI",
        "BJ",
        "BL",
        "BM",
        "BN",
        "BO",
        "BQ",
        "BR",
        "BS",
        "BT",
        "BV",
        "BW",
        "BY",
        "BZ",
        "CA",
        "CD",
        "CF",
        "CG",
        "CH",
        "CI",
        "CK",
        "CL",
        "CM",
        "CN",
        "CO",
        "CR",
        "CV",
        "CW",
        "CY",
        "CZ",
        "DE",
        "DJ",
        "DK",
        "DM",
        "DO",
        "DZ",
        "EC",
        "EE",
        "EG",
        "EH",
        "ER",
        "ES",
        "ET",
        "FI",
        "FJ",
        "FK",
        "FO",
        "FR",
        "GA",
        "GB",
        "GD",
        "GE",
        "GF",
        "GG",
        "GH",
        "GI",
        "GL",
        "GM",
        "GN",
        "GP",
        "GQ",
        "GR",
        "GS",
        "GT",
        "GU",
        "GW",
        "GY",
        "HK",
        "HN",
        "HR",
        "HT",
        "HU",
        "ID",
        "IE",
        "IL",
        "IM",
        "IN",
        "IO",
        "IQ",
        "IS",
        "IT",
        "JE",
        "JM",
        "JO",
        "JP",
        "KE",
        "KG",
        "KH",
        "KI",
        "KM",
        "KN",
        "KR",
        "KW",
        "KY",
        "KZ",
        "LA",
        "LB",
        "LC",
        "LI",
        "LK",
        "LR",
        "LS",
        "LT",
        "LU",
        "LV",
        "LY",
        "MA",
        "MC",
        "MD",
        "ME",
        "MF",
        "MG",
        "MK",
        "ML",
        "MM",
        "MN",
        "MO",
        "MQ",
        "MR",
        "MS",
        "MT",
        "MU",
        "MV",
        "MW",
        "MX",
        "MY",
        "MZ",
        "NA",
        "NC",
        "NE",
        "NG",
        "NI",
        "NL",
        "NO",
        "NP",
        "NR",
        "NU",
        "NZ",
        "OM",
        "PA",
        "PE",
        "PF",
        "PG",
        "PH",
        "PK",
        "PL",
        "PM",
        "PN",
        "PR",
        "PS",
        "PT",
        "PY",
        "QA",
        "RE",
        "RO",
        "RS",
        "RU",
        "RW",
        "SA",
        "SB",
        "SC",
        "SE",
        "SG",
        "SH",
        "SI",
        "SJ",
        "SK",
        "SL",
        "SM",
        "SN",
        "SO",
        "SR",
        "SS",
        "ST",
        "SV",
        "SX",
        "SZ",
        "TA",
        "TC",
        "TD",
        "TF",
        "TG",
        "TH",
        "TJ",
        "TK",
        "TL",
        "TM",
        "TN",
        "TO",
        "TR",
        "TT",
        "TV",
        "TW",
        "TZ",
        "UA",
        "UG",
        "US",
        "UY",
        "UZ",
        "VA",
        "VC",
        "VE",
        "VG",
        "VN",
        "VU",
        "WF",
        "WS",
        "XK",
        "YE",
        "YT",
        "ZA",
        "ZM",
        "ZW",
        "ZZ",
      ])
    ),
  })

export const s_payment_pages_checkout_session_tax_id = z.object({
  type: z.enum([
    "ae_trn",
    "au_abn",
    "au_arn",
    "bg_uic",
    "br_cnpj",
    "br_cpf",
    "ca_bn",
    "ca_gst_hst",
    "ca_pst_bc",
    "ca_pst_mb",
    "ca_pst_sk",
    "ca_qst",
    "ch_vat",
    "cl_tin",
    "eg_tin",
    "es_cif",
    "eu_oss_vat",
    "eu_vat",
    "gb_vat",
    "ge_vat",
    "hk_br",
    "hu_tin",
    "id_npwp",
    "il_vat",
    "in_gst",
    "is_vat",
    "jp_cn",
    "jp_rn",
    "jp_trn",
    "ke_pin",
    "kr_brn",
    "li_uid",
    "mx_rfc",
    "my_frp",
    "my_itn",
    "my_sst",
    "no_vat",
    "nz_gst",
    "ph_tin",
    "ru_inn",
    "ru_kpp",
    "sa_vat",
    "sg_gst",
    "sg_uen",
    "si_tin",
    "th_vat",
    "tr_tin",
    "tw_vat",
    "ua_vat",
    "unknown",
    "us_ein",
    "za_vat",
  ]),
  value: z.coerce.string().optional().nullable(),
})

export const s_payment_pages_checkout_session_tax_id_collection = z.object({
  enabled: z.coerce.boolean(),
})

export const s_period = z.object({
  end: z.coerce.number().optional().nullable(),
  start: z.coerce.number().optional().nullable(),
})

export const s_person_relationship = z.object({
  director: z.coerce.boolean().optional().nullable(),
  executive: z.coerce.boolean().optional().nullable(),
  owner: z.coerce.boolean().optional().nullable(),
  percent_ownership: z.coerce.number().optional().nullable(),
  representative: z.coerce.boolean().optional().nullable(),
  title: z.coerce.string().optional().nullable(),
})

export const s_plan_tier = z.object({
  flat_amount: z.coerce.number().optional().nullable(),
  flat_amount_decimal: z.coerce.string().optional().nullable(),
  unit_amount: z.coerce.number().optional().nullable(),
  unit_amount_decimal: z.coerce.string().optional().nullable(),
  up_to: z.coerce.number().optional().nullable(),
})

export const s_platform_tax_fee = z.object({
  account: z.coerce.string(),
  id: z.coerce.string(),
  object: z.enum(["platform_tax_fee"]),
  source_transaction: z.coerce.string(),
  type: z.coerce.string(),
})

export const s_portal_business_profile = z.object({
  headline: z.coerce.string().optional().nullable(),
  privacy_policy_url: z.coerce.string().optional().nullable(),
  terms_of_service_url: z.coerce.string().optional().nullable(),
})

export const s_portal_customer_update = z.object({
  allowed_updates: z.array(
    z.enum(["address", "email", "name", "phone", "shipping", "tax_id"])
  ),
  enabled: z.coerce.boolean(),
})

export const s_portal_flows_after_completion_hosted_confirmation = z.object({
  custom_message: z.coerce.string().optional().nullable(),
})

export const s_portal_flows_after_completion_redirect = z.object({
  return_url: z.coerce.string(),
})

export const s_portal_flows_flow_subscription_cancel = z.object({
  subscription: z.coerce.string(),
})

export const s_portal_invoice_list = z.object({ enabled: z.coerce.boolean() })

export const s_portal_login_page = z.object({
  enabled: z.coerce.boolean(),
  url: z.coerce.string().optional().nullable(),
})

export const s_portal_payment_method_update = z.object({
  enabled: z.coerce.boolean(),
})

export const s_portal_subscription_cancellation_reason = z.object({
  enabled: z.coerce.boolean(),
  options: z.array(
    z.enum([
      "customer_service",
      "low_quality",
      "missing_features",
      "other",
      "switched_service",
      "too_complex",
      "too_expensive",
      "unused",
    ])
  ),
})

export const s_portal_subscription_pause = z.object({
  enabled: z.coerce.boolean(),
})

export const s_portal_subscription_update_product = z.object({
  prices: z.array(z.coerce.string()),
  product: z.coerce.string(),
})

export const s_price_tier = z.object({
  flat_amount: z.coerce.number().optional().nullable(),
  flat_amount_decimal: z.coerce.string().optional().nullable(),
  unit_amount: z.coerce.number().optional().nullable(),
  unit_amount_decimal: z.coerce.string().optional().nullable(),
  up_to: z.coerce.number().optional().nullable(),
})

export const s_quotes_resource_automatic_tax = z.object({
  enabled: z.coerce.boolean(),
  status: z
    .enum(["complete", "failed", "requires_location_inputs"])
    .optional()
    .nullable(),
})

export const s_quotes_resource_status_transitions = z.object({
  accepted_at: z.coerce.number().optional().nullable(),
  canceled_at: z.coerce.number().optional().nullable(),
  finalized_at: z.coerce.number().optional().nullable(),
})

export const s_quotes_resource_subscription_data_subscription_data = z.object({
  description: z.coerce.string().optional().nullable(),
  effective_date: z.coerce.number().optional().nullable(),
  trial_period_days: z.coerce.number().optional().nullable(),
})

export const s_radar_radar_options = z.object({
  session: z.coerce.string().optional(),
})

export const s_radar_review_resource_location = z.object({
  city: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  latitude: z.coerce.number().optional().nullable(),
  longitude: z.coerce.number().optional().nullable(),
  region: z.coerce.string().optional().nullable(),
})

export const s_radar_review_resource_session = z.object({
  browser: z.coerce.string().optional().nullable(),
  device: z.coerce.string().optional().nullable(),
  platform: z.coerce.string().optional().nullable(),
  version: z.coerce.string().optional().nullable(),
})

export const s_radar_value_list_item = z.object({
  created: z.coerce.number(),
  created_by: z.coerce.string(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["radar.value_list_item"]),
  value: z.coerce.string(),
  value_list: z.coerce.string(),
})

export const s_received_payment_method_details_financial_account = z.object({
  id: z.coerce.string(),
  network: z.enum(["stripe"]),
})

export const s_recurring = z.object({
  aggregate_usage: z
    .enum(["last_during_period", "last_ever", "max", "sum"])
    .optional()
    .nullable(),
  interval: z.enum(["day", "month", "week", "year"]),
  interval_count: z.coerce.number(),
  usage_type: z.enum(["licensed", "metered"]),
})

export const s_reporting_report_type = z.object({
  data_available_end: z.coerce.number(),
  data_available_start: z.coerce.number(),
  default_columns: z.array(z.coerce.string()).optional().nullable(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  name: z.coerce.string(),
  object: z.enum(["reporting.report_type"]),
  updated: z.coerce.number(),
  version: z.coerce.number(),
})

export const s_reserve_transaction = z.object({
  amount: z.coerce.number(),
  currency: z.coerce.string(),
  description: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  object: z.enum(["reserve_transaction"]),
})

export const s_rule = z.object({
  action: z.coerce.string(),
  id: z.coerce.string(),
  predicate: z.coerce.string(),
})

export const s_schedules_phase_automatic_tax = z.object({
  enabled: z.coerce.boolean(),
})

export const s_secret_service_resource_scope = z.object({
  type: z.enum(["account", "user"]),
  user: z.coerce.string().optional(),
})

export const s_setup_attempt_payment_method_details_acss_debit = z.object({})

export const s_setup_attempt_payment_method_details_au_becs_debit = z.object({})

export const s_setup_attempt_payment_method_details_bacs_debit = z.object({})

export const s_setup_attempt_payment_method_details_blik = z.object({})

export const s_setup_attempt_payment_method_details_boleto = z.object({})

export const s_setup_attempt_payment_method_details_cashapp = z.object({})

export const s_setup_attempt_payment_method_details_klarna = z.object({})

export const s_setup_attempt_payment_method_details_link = z.object({})

export const s_setup_attempt_payment_method_details_sepa_debit = z.object({})

export const s_setup_attempt_payment_method_details_us_bank_account = z.object(
  {}
)

export const s_setup_intent_next_action_redirect_to_url = z.object({
  return_url: z.coerce.string().optional().nullable(),
  url: z.coerce.string().optional().nullable(),
})

export const s_setup_intent_next_action_verify_with_microdeposits = z.object({
  arrival_date: z.coerce.number(),
  hosted_verification_url: z.coerce.string(),
  microdeposit_type: z
    .enum(["amounts", "descriptor_code"])
    .optional()
    .nullable(),
})

export const s_setup_intent_payment_method_options_card_mandate_options =
  z.object({
    amount: z.coerce.number(),
    amount_type: z.enum(["fixed", "maximum"]),
    currency: z.coerce.string(),
    description: z.coerce.string().optional().nullable(),
    end_date: z.coerce.number().optional().nullable(),
    interval: z.enum(["day", "month", "sporadic", "week", "year"]),
    interval_count: z.coerce.number().optional().nullable(),
    reference: z.coerce.string(),
    start_date: z.coerce.number(),
    supported_types: z
      .array(z.enum(["india"]))
      .optional()
      .nullable(),
  })

export const s_setup_intent_payment_method_options_link = z.object({
  persistent_token: z.coerce.string().optional().nullable(),
})

export const s_setup_intent_payment_method_options_mandate_options_acss_debit =
  z.object({
    custom_mandate_url: z.coerce.string().optional(),
    default_for: z.array(z.enum(["invoice", "subscription"])).optional(),
    interval_description: z.coerce.string().optional().nullable(),
    payment_schedule: z
      .enum(["combined", "interval", "sporadic"])
      .optional()
      .nullable(),
    transaction_type: z.enum(["business", "personal"]).optional().nullable(),
  })

export const s_setup_intent_payment_method_options_mandate_options_sepa_debit =
  z.object({})

export const s_setup_intent_type_specific_payment_method_options_client =
  z.object({
    verification_method: z
      .enum(["automatic", "instant", "microdeposits"])
      .optional(),
  })

export const s_shipping_rate_delivery_estimate_bound = z.object({
  unit: z.enum(["business_day", "day", "hour", "month", "week"]),
  value: z.coerce.number(),
})

export const s_sigma_scheduled_query_run_error = z.object({
  message: z.coerce.string(),
})

export const s_source_code_verification_flow = z.object({
  attempts_remaining: z.coerce.number(),
  status: z.coerce.string(),
})

export const s_source_mandate_notification_acss_debit_data = z.object({
  statement_descriptor: z.coerce.string().optional(),
})

export const s_source_mandate_notification_bacs_debit_data = z.object({
  last4: z.coerce.string().optional(),
})

export const s_source_mandate_notification_sepa_debit_data = z.object({
  creditor_identifier: z.coerce.string().optional(),
  last4: z.coerce.string().optional(),
  mandate_reference: z.coerce.string().optional(),
})

export const s_source_order_item = z.object({
  amount: z.coerce.number().optional().nullable(),
  currency: z.coerce.string().optional().nullable(),
  description: z.coerce.string().optional().nullable(),
  parent: z.coerce.string().optional().nullable(),
  quantity: z.coerce.number().optional(),
  type: z.coerce.string().optional().nullable(),
})

export const s_source_receiver_flow = z.object({
  address: z.coerce.string().optional().nullable(),
  amount_charged: z.coerce.number(),
  amount_received: z.coerce.number(),
  amount_returned: z.coerce.number(),
  refund_attributes_method: z.coerce.string(),
  refund_attributes_status: z.coerce.string(),
})

export const s_source_redirect_flow = z.object({
  failure_reason: z.coerce.string().optional().nullable(),
  return_url: z.coerce.string(),
  status: z.coerce.string(),
  url: z.coerce.string(),
})

export const s_source_transaction_ach_credit_transfer_data = z.object({
  customer_data: z.coerce.string().optional(),
  fingerprint: z.coerce.string().optional(),
  last4: z.coerce.string().optional(),
  routing_number: z.coerce.string().optional(),
})

export const s_source_transaction_chf_credit_transfer_data = z.object({
  reference: z.coerce.string().optional(),
  sender_address_country: z.coerce.string().optional(),
  sender_address_line1: z.coerce.string().optional(),
  sender_iban: z.coerce.string().optional(),
  sender_name: z.coerce.string().optional(),
})

export const s_source_transaction_gbp_credit_transfer_data = z.object({
  fingerprint: z.coerce.string().optional(),
  funding_method: z.coerce.string().optional(),
  last4: z.coerce.string().optional(),
  reference: z.coerce.string().optional(),
  sender_account_number: z.coerce.string().optional(),
  sender_name: z.coerce.string().optional(),
  sender_sort_code: z.coerce.string().optional(),
})

export const s_source_transaction_paper_check_data = z.object({
  available_at: z.coerce.string().optional(),
  invoices: z.coerce.string().optional(),
})

export const s_source_transaction_sepa_credit_transfer_data = z.object({
  reference: z.coerce.string().optional(),
  sender_iban: z.coerce.string().optional(),
  sender_name: z.coerce.string().optional(),
})

export const s_source_type_ach_credit_transfer = z.object({
  account_number: z.coerce.string().optional().nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  refund_account_holder_name: z.coerce.string().optional().nullable(),
  refund_account_holder_type: z.coerce.string().optional().nullable(),
  refund_routing_number: z.coerce.string().optional().nullable(),
  routing_number: z.coerce.string().optional().nullable(),
  swift_code: z.coerce.string().optional().nullable(),
})

export const s_source_type_ach_debit = z.object({
  bank_name: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  routing_number: z.coerce.string().optional().nullable(),
  type: z.coerce.string().optional().nullable(),
})

export const s_source_type_acss_debit = z.object({
  bank_address_city: z.coerce.string().optional().nullable(),
  bank_address_line_1: z.coerce.string().optional().nullable(),
  bank_address_line_2: z.coerce.string().optional().nullable(),
  bank_address_postal_code: z.coerce.string().optional().nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  category: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  routing_number: z.coerce.string().optional().nullable(),
})

export const s_source_type_alipay = z.object({
  data_string: z.coerce.string().optional().nullable(),
  native_url: z.coerce.string().optional().nullable(),
  statement_descriptor: z.coerce.string().optional().nullable(),
})

export const s_source_type_au_becs_debit = z.object({
  bsb_number: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
})

export const s_source_type_bancontact = z.object({
  bank_code: z.coerce.string().optional().nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  bic: z.coerce.string().optional().nullable(),
  iban_last4: z.coerce.string().optional().nullable(),
  preferred_language: z.coerce.string().optional().nullable(),
  statement_descriptor: z.coerce.string().optional().nullable(),
})

export const s_source_type_card = z.object({
  address_line1_check: z.coerce.string().optional().nullable(),
  address_zip_check: z.coerce.string().optional().nullable(),
  brand: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  cvc_check: z.coerce.string().optional().nullable(),
  dynamic_last4: z.coerce.string().optional().nullable(),
  exp_month: z.coerce.number().optional().nullable(),
  exp_year: z.coerce.number().optional().nullable(),
  fingerprint: z.coerce.string().optional(),
  funding: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  three_d_secure: z.coerce.string().optional(),
  tokenization_method: z.coerce.string().optional().nullable(),
})

export const s_source_type_card_present = z.object({
  application_cryptogram: z.coerce.string().optional(),
  application_preferred_name: z.coerce.string().optional(),
  authorization_code: z.coerce.string().optional().nullable(),
  authorization_response_code: z.coerce.string().optional(),
  brand: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  cvm_type: z.coerce.string().optional(),
  data_type: z.coerce.string().optional().nullable(),
  dedicated_file_name: z.coerce.string().optional(),
  emv_auth_data: z.coerce.string().optional(),
  evidence_customer_signature: z.coerce.string().optional().nullable(),
  evidence_transaction_certificate: z.coerce.string().optional().nullable(),
  exp_month: z.coerce.number().optional().nullable(),
  exp_year: z.coerce.number().optional().nullable(),
  fingerprint: z.coerce.string().optional(),
  funding: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  pos_device_id: z.coerce.string().optional().nullable(),
  pos_entry_mode: z.coerce.string().optional(),
  read_method: z.coerce.string().optional().nullable(),
  reader: z.coerce.string().optional().nullable(),
  terminal_verification_results: z.coerce.string().optional(),
  transaction_status_information: z.coerce.string().optional(),
})

export const s_source_type_eps = z.object({
  reference: z.coerce.string().optional().nullable(),
  statement_descriptor: z.coerce.string().optional().nullable(),
})

export const s_source_type_giropay = z.object({
  bank_code: z.coerce.string().optional().nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  bic: z.coerce.string().optional().nullable(),
  statement_descriptor: z.coerce.string().optional().nullable(),
})

export const s_source_type_ideal = z.object({
  bank: z.coerce.string().optional().nullable(),
  bic: z.coerce.string().optional().nullable(),
  iban_last4: z.coerce.string().optional().nullable(),
  statement_descriptor: z.coerce.string().optional().nullable(),
})

export const s_source_type_klarna = z.object({
  background_image_url: z.coerce.string().optional(),
  client_token: z.coerce.string().optional().nullable(),
  first_name: z.coerce.string().optional(),
  last_name: z.coerce.string().optional(),
  locale: z.coerce.string().optional(),
  logo_url: z.coerce.string().optional(),
  page_title: z.coerce.string().optional(),
  pay_later_asset_urls_descriptive: z.coerce.string().optional(),
  pay_later_asset_urls_standard: z.coerce.string().optional(),
  pay_later_name: z.coerce.string().optional(),
  pay_later_redirect_url: z.coerce.string().optional(),
  pay_now_asset_urls_descriptive: z.coerce.string().optional(),
  pay_now_asset_urls_standard: z.coerce.string().optional(),
  pay_now_name: z.coerce.string().optional(),
  pay_now_redirect_url: z.coerce.string().optional(),
  pay_over_time_asset_urls_descriptive: z.coerce.string().optional(),
  pay_over_time_asset_urls_standard: z.coerce.string().optional(),
  pay_over_time_name: z.coerce.string().optional(),
  pay_over_time_redirect_url: z.coerce.string().optional(),
  payment_method_categories: z.coerce.string().optional(),
  purchase_country: z.coerce.string().optional(),
  purchase_type: z.coerce.string().optional(),
  redirect_url: z.coerce.string().optional(),
  shipping_delay: z.coerce.number().optional(),
  shipping_first_name: z.coerce.string().optional(),
  shipping_last_name: z.coerce.string().optional(),
})

export const s_source_type_multibanco = z.object({
  entity: z.coerce.string().optional().nullable(),
  reference: z.coerce.string().optional().nullable(),
  refund_account_holder_address_city: z.coerce.string().optional().nullable(),
  refund_account_holder_address_country: z.coerce
    .string()
    .optional()
    .nullable(),
  refund_account_holder_address_line1: z.coerce.string().optional().nullable(),
  refund_account_holder_address_line2: z.coerce.string().optional().nullable(),
  refund_account_holder_address_postal_code: z.coerce
    .string()
    .optional()
    .nullable(),
  refund_account_holder_address_state: z.coerce.string().optional().nullable(),
  refund_account_holder_name: z.coerce.string().optional().nullable(),
  refund_iban: z.coerce.string().optional().nullable(),
})

export const s_source_type_p24 = z.object({
  reference: z.coerce.string().optional().nullable(),
})

export const s_source_type_sepa_debit = z.object({
  bank_code: z.coerce.string().optional().nullable(),
  branch_code: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  mandate_reference: z.coerce.string().optional().nullable(),
  mandate_url: z.coerce.string().optional().nullable(),
})

export const s_source_type_sofort = z.object({
  bank_code: z.coerce.string().optional().nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  bic: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  iban_last4: z.coerce.string().optional().nullable(),
  preferred_language: z.coerce.string().optional().nullable(),
  statement_descriptor: z.coerce.string().optional().nullable(),
})

export const s_source_type_three_d_secure = z.object({
  address_line1_check: z.coerce.string().optional().nullable(),
  address_zip_check: z.coerce.string().optional().nullable(),
  authenticated: z.coerce.boolean().optional().nullable(),
  brand: z.coerce.string().optional().nullable(),
  card: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  customer: z.coerce.string().optional().nullable(),
  cvc_check: z.coerce.string().optional().nullable(),
  dynamic_last4: z.coerce.string().optional().nullable(),
  exp_month: z.coerce.number().optional().nullable(),
  exp_year: z.coerce.number().optional().nullable(),
  fingerprint: z.coerce.string().optional(),
  funding: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  three_d_secure: z.coerce.string().optional(),
  tokenization_method: z.coerce.string().optional().nullable(),
})

export const s_source_type_wechat = z.object({
  prepay_id: z.coerce.string().optional(),
  qr_code_url: z.coerce.string().optional().nullable(),
  statement_descriptor: z.coerce.string().optional(),
})

export const s_subscription_automatic_tax = z.object({
  enabled: z.coerce.boolean(),
})

export const s_subscription_billing_thresholds = z.object({
  amount_gte: z.coerce.number().optional().nullable(),
  reset_billing_cycle_anchor: z.coerce.boolean().optional().nullable(),
})

export const s_subscription_item_billing_thresholds = z.object({
  usage_gte: z.coerce.number().optional().nullable(),
})

export const s_subscription_pending_invoice_item_interval = z.object({
  interval: z.enum(["day", "month", "week", "year"]),
  interval_count: z.coerce.number(),
})

export const s_subscription_schedule_current_phase = z.object({
  end_date: z.coerce.number(),
  start_date: z.coerce.number(),
})

export const s_subscription_schedules_resource_default_settings_automatic_tax =
  z.object({ enabled: z.coerce.boolean() })

export const s_subscriptions_resource_pause_collection = z.object({
  behavior: z.enum(["keep_as_draft", "mark_uncollectible", "void"]),
  resumes_at: z.coerce.number().optional().nullable(),
})

export const s_subscriptions_trials_resource_end_behavior = z.object({
  missing_payment_method: z.enum(["cancel", "create_invoice", "pause"]),
})

export const s_tax_code = z.object({
  description: z.coerce.string(),
  id: z.coerce.string(),
  name: z.coerce.string(),
  object: z.enum(["tax_code"]),
})

export const s_tax_deducted_at_source = z.object({
  id: z.coerce.string(),
  object: z.enum(["tax_deducted_at_source"]),
  period_end: z.coerce.number(),
  period_start: z.coerce.number(),
  tax_deduction_account_number: z.coerce.string(),
})

export const s_tax_id_verification = z.object({
  status: z.enum(["pending", "unavailable", "unverified", "verified"]),
  verified_address: z.coerce.string().optional().nullable(),
  verified_name: z.coerce.string().optional().nullable(),
})

export const s_tax_product_resource_customer_details_resource_tax_id = z.object(
  {
    type: z.enum([
      "ae_trn",
      "au_abn",
      "au_arn",
      "bg_uic",
      "br_cnpj",
      "br_cpf",
      "ca_bn",
      "ca_gst_hst",
      "ca_pst_bc",
      "ca_pst_mb",
      "ca_pst_sk",
      "ca_qst",
      "ch_vat",
      "cl_tin",
      "eg_tin",
      "es_cif",
      "eu_oss_vat",
      "eu_vat",
      "gb_vat",
      "ge_vat",
      "hk_br",
      "hu_tin",
      "id_npwp",
      "il_vat",
      "in_gst",
      "is_vat",
      "jp_cn",
      "jp_rn",
      "jp_trn",
      "ke_pin",
      "kr_brn",
      "li_uid",
      "mx_rfc",
      "my_frp",
      "my_itn",
      "my_sst",
      "no_vat",
      "nz_gst",
      "ph_tin",
      "ru_inn",
      "ru_kpp",
      "sa_vat",
      "sg_gst",
      "sg_uen",
      "si_tin",
      "th_vat",
      "tr_tin",
      "tw_vat",
      "ua_vat",
      "unknown",
      "us_ein",
      "za_vat",
    ]),
    value: z.coerce.string(),
  }
)

export const s_tax_product_resource_jurisdiction = z.object({
  country: z.coerce.string(),
  display_name: z.coerce.string(),
  level: z.enum(["city", "country", "county", "district", "state"]),
  state: z.coerce.string().optional().nullable(),
})

export const s_tax_product_resource_line_item_tax_rate_details = z.object({
  display_name: z.coerce.string(),
  percentage_decimal: z.coerce.string(),
  tax_type: z.enum([
    "gst",
    "hst",
    "igst",
    "jct",
    "lease_tax",
    "pst",
    "qst",
    "rst",
    "sales_tax",
    "vat",
  ]),
})

export const s_tax_product_resource_postal_address = z.object({
  city: z.coerce.string().optional().nullable(),
  country: z.coerce.string(),
  line1: z.coerce.string().optional().nullable(),
  line2: z.coerce.string().optional().nullable(),
  postal_code: z.coerce.string().optional().nullable(),
  state: z.coerce.string().optional().nullable(),
})

export const s_tax_product_resource_shipping_cost = z.object({
  amount: z.coerce.number(),
  amount_tax: z.coerce.number(),
  shipping_rate: z.coerce.string().optional(),
  tax_behavior: z.enum(["exclusive", "inclusive"]),
  tax_code: z.coerce.string(),
})

export const s_tax_product_resource_tax_rate_details = z.object({
  country: z.coerce.string().optional().nullable(),
  percentage_decimal: z.coerce.string(),
  state: z.coerce.string().optional().nullable(),
  tax_type: z
    .enum([
      "gst",
      "hst",
      "igst",
      "jct",
      "lease_tax",
      "pst",
      "qst",
      "rst",
      "sales_tax",
      "vat",
    ])
    .optional()
    .nullable(),
})

export const s_tax_product_resource_tax_transaction_line_item_resource_reversal =
  z.object({ original_line_item: z.coerce.string() })

export const s_tax_product_resource_tax_transaction_resource_reversal =
  z.object({ original_transaction: z.coerce.string().optional().nullable() })

export const s_tax_rate = z.object({
  active: z.coerce.boolean(),
  country: z.coerce.string().optional().nullable(),
  created: z.coerce.number(),
  description: z.coerce.string().optional().nullable(),
  display_name: z.coerce.string(),
  id: z.coerce.string(),
  inclusive: z.coerce.boolean(),
  jurisdiction: z.coerce.string().optional().nullable(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional().nullable(),
  object: z.enum(["tax_rate"]),
  percentage: z.coerce.number(),
  state: z.coerce.string().optional().nullable(),
  tax_type: z
    .enum([
      "gst",
      "hst",
      "igst",
      "jct",
      "lease_tax",
      "pst",
      "qst",
      "rst",
      "sales_tax",
      "vat",
    ])
    .optional()
    .nullable(),
})

export const s_terminal_configuration_configuration_resource_currency_specific_config =
  z.object({
    fixed_amounts: z.array(z.coerce.number()).optional().nullable(),
    percentages: z.array(z.coerce.number()).optional().nullable(),
    smart_tip_threshold: z.coerce.number().optional(),
  })

export const s_terminal_connection_token = z.object({
  location: z.coerce.string().optional(),
  object: z.enum(["terminal.connection_token"]),
  secret: z.coerce.string(),
})

export const s_terminal_reader_reader_resource_line_item = z.object({
  amount: z.coerce.number(),
  description: z.coerce.string(),
  quantity: z.coerce.number(),
})

export const s_terminal_reader_reader_resource_tipping_config = z.object({
  amount_eligible: z.coerce.number().optional(),
})

export const s_test_helpers_test_clock = z.object({
  created: z.coerce.number(),
  deletes_after: z.coerce.number(),
  frozen_time: z.coerce.number(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  name: z.coerce.string().optional().nullable(),
  object: z.enum(["test_helpers.test_clock"]),
  status: z.enum(["advancing", "internal_failure", "ready"]),
})

export const s_three_d_secure_details = z.object({
  authentication_flow: z
    .enum(["challenge", "frictionless"])
    .optional()
    .nullable(),
  result: z
    .enum([
      "attempt_acknowledged",
      "authenticated",
      "exempted",
      "failed",
      "not_supported",
      "processing_error",
    ])
    .optional()
    .nullable(),
  result_reason: z
    .enum([
      "abandoned",
      "bypassed",
      "canceled",
      "card_not_enrolled",
      "network_not_supported",
      "protocol_error",
      "rejected",
    ])
    .optional()
    .nullable(),
  version: z.enum(["1.0.2", "2.1.0", "2.2.0"]).optional().nullable(),
})

export const s_three_d_secure_usage = z.object({
  supported: z.coerce.boolean(),
})

export const s_transfer_schedule = z.object({
  delay_days: z.coerce.number(),
  interval: z.coerce.string(),
  monthly_anchor: z.coerce.number().optional(),
  weekly_anchor: z.coerce.string().optional(),
})

export const s_transform_quantity = z.object({
  divide_by: z.coerce.number(),
  round: z.enum(["down", "up"]),
})

export const s_transform_usage = z.object({
  divide_by: z.coerce.number(),
  round: z.enum(["down", "up"]),
})

export const s_treasury_financial_accounts_resource_aba_record = z.object({
  account_holder_name: z.coerce.string(),
  account_number: z.coerce.string().optional().nullable(),
  account_number_last4: z.coerce.string(),
  bank_name: z.coerce.string(),
  routing_number: z.coerce.string(),
})

export const s_treasury_financial_accounts_resource_balance = z.object({
  cash: z.object({}),
  inbound_pending: z.object({}),
  outbound_pending: z.object({}),
})

export const s_treasury_financial_accounts_resource_closed_status_details =
  z.object({
    reasons: z.array(
      z.enum(["account_rejected", "closed_by_platform", "other"])
    ),
  })

export const s_treasury_financial_accounts_resource_platform_restrictions =
  z.object({
    inbound_flows: z.enum(["restricted", "unrestricted"]).optional().nullable(),
    outbound_flows: z
      .enum(["restricted", "unrestricted"])
      .optional()
      .nullable(),
  })

export const s_treasury_financial_accounts_resource_toggles_setting_status_details =
  z.object({
    code: z.enum([
      "activating",
      "capability_not_requested",
      "financial_account_closed",
      "rejected_other",
      "rejected_unsupported_business",
      "requirements_past_due",
      "requirements_pending_verification",
      "restricted_by_platform",
      "restricted_other",
    ]),
    resolution: z
      .enum(["contact_stripe", "provide_information", "remove_restriction"])
      .optional()
      .nullable(),
    restriction: z.enum(["inbound_flows", "outbound_flows"]).optional(),
  })

export const s_treasury_inbound_transfers_resource_failure_details = z.object({
  code: z.enum([
    "account_closed",
    "account_frozen",
    "bank_account_restricted",
    "bank_ownership_changed",
    "debit_not_authorized",
    "incorrect_account_holder_address",
    "incorrect_account_holder_name",
    "incorrect_account_holder_tax_id",
    "insufficient_funds",
    "invalid_account_number",
    "invalid_currency",
    "no_account",
    "other",
  ]),
})

export const s_treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows =
  z.object({ received_debit: z.coerce.string().optional().nullable() })

export const s_treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions =
  z.object({
    canceled_at: z.coerce.number().optional().nullable(),
    failed_at: z.coerce.number().optional().nullable(),
    succeeded_at: z.coerce.number().optional().nullable(),
  })

export const s_treasury_outbound_payments_resource_outbound_payment_resource_end_user_details =
  z.object({
    ip_address: z.coerce.string().optional().nullable(),
    present: z.coerce.boolean(),
  })

export const s_treasury_outbound_payments_resource_outbound_payment_resource_status_transitions =
  z.object({
    canceled_at: z.coerce.number().optional().nullable(),
    failed_at: z.coerce.number().optional().nullable(),
    posted_at: z.coerce.number().optional().nullable(),
    returned_at: z.coerce.number().optional().nullable(),
  })

export const s_treasury_outbound_transfers_resource_status_transitions =
  z.object({
    canceled_at: z.coerce.number().optional().nullable(),
    failed_at: z.coerce.number().optional().nullable(),
    posted_at: z.coerce.number().optional().nullable(),
    returned_at: z.coerce.number().optional().nullable(),
  })

export const s_treasury_received_credits_resource_reversal_details = z.object({
  deadline: z.coerce.number().optional().nullable(),
  restricted_reason: z
    .enum([
      "already_reversed",
      "deadline_passed",
      "network_restricted",
      "other",
      "source_flow_restricted",
    ])
    .optional()
    .nullable(),
})

export const s_treasury_received_credits_resource_status_transitions = z.object(
  { posted_at: z.coerce.number().optional().nullable() }
)

export const s_treasury_received_debits_resource_debit_reversal_linked_flows =
  z.object({ issuing_dispute: z.coerce.string().optional().nullable() })

export const s_treasury_received_debits_resource_linked_flows = z.object({
  debit_reversal: z.coerce.string().optional().nullable(),
  inbound_transfer: z.coerce.string().optional().nullable(),
  issuing_authorization: z.coerce.string().optional().nullable(),
  issuing_transaction: z.coerce.string().optional().nullable(),
})

export const s_treasury_received_debits_resource_reversal_details = z.object({
  deadline: z.coerce.number().optional().nullable(),
  restricted_reason: z
    .enum([
      "already_reversed",
      "deadline_passed",
      "network_restricted",
      "other",
      "source_flow_restricted",
    ])
    .optional()
    .nullable(),
})

export const s_treasury_received_debits_resource_status_transitions = z.object({
  completed_at: z.coerce.number().optional().nullable(),
})

export const s_treasury_shared_resource_initiating_payment_method_details_us_bank_account =
  z.object({
    bank_name: z.coerce.string().optional().nullable(),
    last4: z.coerce.string().optional().nullable(),
    routing_number: z.coerce.string().optional().nullable(),
  })

export const s_treasury_transactions_resource_abstract_transaction_resource_status_transitions =
  z.object({
    posted_at: z.coerce.number().optional().nullable(),
    void_at: z.coerce.number().optional().nullable(),
  })

export const s_treasury_transactions_resource_balance_impact = z.object({
  cash: z.coerce.number(),
  inbound_pending: z.coerce.number(),
  outbound_pending: z.coerce.number(),
})

export const s_us_bank_account_networks = z.object({
  preferred: z.coerce.string().optional().nullable(),
  supported: z.array(z.enum(["ach", "us_domestic_wire"])),
})

export const s_usage_record = z.object({
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["usage_record"]),
  quantity: z.coerce.number(),
  subscription_item: z.coerce.string(),
  timestamp: z.coerce.number(),
})

export const s_verification_session_redaction = z.object({
  status: z.enum(["processing", "redacted"]),
})

export const s_webhook_endpoint = z.object({
  api_version: z.coerce.string().optional().nullable(),
  application: z.coerce.string().optional().nullable(),
  created: z.coerce.number(),
  description: z.coerce.string().optional().nullable(),
  enabled_events: z.array(z.coerce.string()),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["webhook_endpoint"]),
  secret: z.coerce.string().optional(),
  status: z.coerce.string(),
  url: z.coerce.string(),
})

export const s_account_business_profile = z.object({
  mcc: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  product_description: z.coerce.string().optional().nullable(),
  support_address: s_address.nullable(),
  support_email: z.coerce.string().optional().nullable(),
  support_phone: z.coerce.string().optional().nullable(),
  support_url: z.coerce.string().optional().nullable(),
  url: z.coerce.string().optional().nullable(),
})

export const s_account_capability_future_requirements = z.object({
  alternatives: z
    .array(s_account_requirements_alternative)
    .optional()
    .nullable(),
  current_deadline: z.coerce.number().optional().nullable(),
  currently_due: z.array(z.coerce.string()),
  disabled_reason: z.coerce.string().optional().nullable(),
  errors: z.array(s_account_requirements_error),
  eventually_due: z.array(z.coerce.string()),
  past_due: z.array(z.coerce.string()),
  pending_verification: z.array(z.coerce.string()),
})

export const s_account_capability_requirements = z.object({
  alternatives: z
    .array(s_account_requirements_alternative)
    .optional()
    .nullable(),
  current_deadline: z.coerce.number().optional().nullable(),
  currently_due: z.array(z.coerce.string()),
  disabled_reason: z.coerce.string().optional().nullable(),
  errors: z.array(s_account_requirements_error),
  eventually_due: z.array(z.coerce.string()),
  past_due: z.array(z.coerce.string()),
  pending_verification: z.array(z.coerce.string()),
})

export const s_account_card_issuing_settings = z.object({
  tos_acceptance: s_card_issuing_account_terms_of_service,
})

export const s_account_card_payments_settings = z.object({
  decline_on: s_account_decline_charge_on,
  statement_descriptor_prefix: z.coerce.string().optional().nullable(),
  statement_descriptor_prefix_kana: z.coerce.string().optional().nullable(),
  statement_descriptor_prefix_kanji: z.coerce.string().optional().nullable(),
})

export const s_account_future_requirements = z.object({
  alternatives: z
    .array(s_account_requirements_alternative)
    .optional()
    .nullable(),
  current_deadline: z.coerce.number().optional().nullable(),
  currently_due: z.array(z.coerce.string()).optional().nullable(),
  disabled_reason: z.coerce.string().optional().nullable(),
  errors: z.array(s_account_requirements_error).optional().nullable(),
  eventually_due: z.array(z.coerce.string()).optional().nullable(),
  past_due: z.array(z.coerce.string()).optional().nullable(),
  pending_verification: z.array(z.coerce.string()).optional().nullable(),
})

export const s_account_payout_settings = z.object({
  debit_negative_balances: z.coerce.boolean(),
  schedule: s_transfer_schedule,
  statement_descriptor: z.coerce.string().optional().nullable(),
})

export const s_account_requirements = z.object({
  alternatives: z
    .array(s_account_requirements_alternative)
    .optional()
    .nullable(),
  current_deadline: z.coerce.number().optional().nullable(),
  currently_due: z.array(z.coerce.string()).optional().nullable(),
  disabled_reason: z.coerce.string().optional().nullable(),
  errors: z.array(s_account_requirements_error).optional().nullable(),
  eventually_due: z.array(z.coerce.string()).optional().nullable(),
  past_due: z.array(z.coerce.string()).optional().nullable(),
  pending_verification: z.array(z.coerce.string()).optional().nullable(),
})

export const s_account_treasury_settings = z.object({
  tos_acceptance: s_account_terms_of_service,
})

export const s_apps_secret = z.object({
  created: z.coerce.number(),
  deleted: z.coerce.boolean().optional(),
  expires_at: z.coerce.number().optional().nullable(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  name: z.coerce.string(),
  object: z.enum(["apps.secret"]),
  payload: z.coerce.string().optional().nullable(),
  scope: s_secret_service_resource_scope,
})

export const s_balance_amount = z.object({
  amount: z.coerce.number(),
  currency: z.coerce.string(),
  source_types: s_balance_amount_by_source_type,
})

export const s_bank_connections_resource_balance = z.object({
  as_of: z.coerce.number(),
  cash: s_bank_connections_resource_balance_api_resource_cash_balance,
  credit: s_bank_connections_resource_balance_api_resource_credit_balance,
  current: z.object({}),
  type: z.enum(["cash", "credit"]),
})

export const s_billing_details = z.object({
  address: s_address.nullable(),
  email: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  phone: z.coerce.string().optional().nullable(),
})

export const s_cash_balance = z.object({
  available: z.object({}).optional().nullable(),
  customer: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["cash_balance"]),
  settings: s_customer_balance_customer_balance_settings,
})

export const s_charge_outcome = z.object({
  network_status: z.coerce.string().optional().nullable(),
  reason: z.coerce.string().optional().nullable(),
  risk_level: z.coerce.string().optional(),
  risk_score: z.coerce.number().optional(),
  rule: z.union([z.coerce.string(), s_rule]),
  seller_message: z.coerce.string().optional().nullable(),
  type: z.coerce.string(),
})

export const s_checkout_acss_debit_payment_method_options = z.object({
  currency: z.enum(["cad", "usd"]).optional(),
  mandate_options: s_checkout_acss_debit_mandate_options,
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
  verification_method: z
    .enum(["automatic", "instant", "microdeposits"])
    .optional(),
})

export const s_checkout_card_payment_method_options = z.object({
  installments: s_checkout_card_installments_options,
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
  statement_descriptor_suffix_kana: z.coerce.string().optional(),
  statement_descriptor_suffix_kanji: z.coerce.string().optional(),
})

export const s_checkout_customer_balance_bank_transfer_payment_method_options =
  z.object({
    eu_bank_transfer: s_payment_method_options_customer_balance_eu_bank_account,
    requested_address_types: z
      .array(z.enum(["iban", "sepa", "sort_code", "spei", "zengin"]))
      .optional(),
    type: z
      .enum([
        "eu_bank_transfer",
        "gb_bank_transfer",
        "jp_bank_transfer",
        "mx_bank_transfer",
      ])
      .optional()
      .nullable(),
  })

export const s_checkout_us_bank_account_payment_method_options = z.object({
  financial_connections: s_linked_account_options_us_bank_account,
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
  verification_method: z.enum(["automatic", "instant"]).optional(),
})

export const s_country_spec_verification_fields = z.object({
  company: s_country_spec_verification_field_details,
  individual: s_country_spec_verification_field_details,
})

export const s_coupon = z.object({
  amount_off: z.coerce.number().optional().nullable(),
  applies_to: s_coupon_applies_to,
  created: z.coerce.number(),
  currency: z.coerce.string().optional().nullable(),
  currency_options: z.object({}).optional(),
  duration: z.enum(["forever", "once", "repeating"]),
  duration_in_months: z.coerce.number().optional().nullable(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  max_redemptions: z.coerce.number().optional().nullable(),
  metadata: z.object({}).optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  object: z.enum(["coupon"]),
  percent_off: z.coerce.number().optional().nullable(),
  redeem_by: z.coerce.number().optional().nullable(),
  times_redeemed: z.coerce.number(),
  valid: z.coerce.boolean(),
})

export const s_credit_note_tax_amount = z.object({
  amount: z.coerce.number(),
  inclusive: z.coerce.boolean(),
  tax_rate: z.union([z.coerce.string(), s_tax_rate]),
})

export const s_customer_acceptance = z.object({
  accepted_at: z.coerce.number().optional().nullable(),
  offline: s_offline_acceptance,
  online: s_online_acceptance,
  type: z.enum(["offline", "online"]),
})

export const s_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer =
  z.object({
    eu_bank_transfer:
      s_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer_resource_eu_bank_transfer,
    reference: z.coerce.string().optional().nullable(),
    type: z.enum([
      "eu_bank_transfer",
      "gb_bank_transfer",
      "jp_bank_transfer",
      "mx_bank_transfer",
    ]),
  })

export const s_customer_tax = z.object({
  automatic_tax: z.enum([
    "failed",
    "not_collecting",
    "supported",
    "unrecognized_location",
  ]),
  ip_address: z.coerce.string().optional().nullable(),
  location: s_customer_tax_location.nullable(),
})

export const s_deleted_external_account = z.union([
  s_deleted_bank_account,
  s_deleted_card,
])

export const s_deleted_payment_source = z.union([
  s_deleted_bank_account,
  s_deleted_card,
])

export const s_event = z.object({
  account: z.coerce.string().optional(),
  api_version: z.coerce.string().optional().nullable(),
  created: z.coerce.number(),
  data: s_notification_event_data,
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["event"]),
  pending_webhooks: z.coerce.number(),
  request: s_notification_event_request.nullable(),
  type: z.coerce.string(),
})

export const s_external_account_requirements = z.object({
  currently_due: z.array(z.coerce.string()).optional().nullable(),
  errors: z.array(s_account_requirements_error).optional().nullable(),
  past_due: z.array(z.coerce.string()).optional().nullable(),
  pending_verification: z.array(z.coerce.string()).optional().nullable(),
})

export const s_financial_connections_account_ownership = z.object({
  created: z.coerce.number(),
  id: z.coerce.string(),
  object: z.enum(["financial_connections.account_ownership"]),
  owners: z.object({
    data: z.array(s_financial_connections_account_owner),
    has_more: z.coerce.boolean(),
    object: z.enum(["list"]),
    url: z.coerce.string(),
  }),
})

export const s_funding_instructions_bank_transfer_financial_address = z.object({
  iban: s_funding_instructions_bank_transfer_iban_record,
  sort_code: s_funding_instructions_bank_transfer_sort_code_record,
  spei: s_funding_instructions_bank_transfer_spei_record,
  supported_networks: z
    .array(z.enum(["bacs", "fps", "sepa", "spei", "zengin"]))
    .optional(),
  type: z.enum(["iban", "sort_code", "spei", "zengin"]),
  zengin: s_funding_instructions_bank_transfer_zengin_record,
})

export const s_gelato_document_report = z.object({
  address: s_address.nullable(),
  dob: s_gelato_data_document_report_date_of_birth.nullable(),
  error: s_gelato_document_report_error.nullable(),
  expiration_date: s_gelato_data_document_report_expiration_date.nullable(),
  files: z.array(z.coerce.string()).optional().nullable(),
  first_name: z.coerce.string().optional().nullable(),
  issued_date: s_gelato_data_document_report_issued_date.nullable(),
  issuing_country: z.coerce.string().optional().nullable(),
  last_name: z.coerce.string().optional().nullable(),
  number: z.coerce.string().optional().nullable(),
  status: z.enum(["unverified", "verified"]),
  type: z
    .enum(["driving_license", "id_card", "passport"])
    .optional()
    .nullable(),
})

export const s_gelato_id_number_report = z.object({
  dob: s_gelato_data_id_number_report_date.nullable(),
  error: s_gelato_id_number_report_error.nullable(),
  first_name: z.coerce.string().optional().nullable(),
  id_number: z.coerce.string().optional().nullable(),
  id_number_type: z.enum(["br_cpf", "sg_nric", "us_ssn"]).optional().nullable(),
  last_name: z.coerce.string().optional().nullable(),
  status: z.enum(["unverified", "verified"]),
})

export const s_gelato_selfie_report = z.object({
  document: z.coerce.string().optional().nullable(),
  error: s_gelato_selfie_report_error.nullable(),
  selfie: z.coerce.string().optional().nullable(),
  status: z.enum(["unverified", "verified"]),
})

export const s_gelato_verification_report_options = z.object({
  document: s_gelato_report_document_options,
  id_number: s_gelato_report_id_number_options,
})

export const s_gelato_verification_session_options = z.object({
  document: s_gelato_session_document_options,
  id_number: s_gelato_session_id_number_options,
})

export const s_gelato_verified_outputs = z.object({
  address: s_address.nullable(),
  dob: s_gelato_data_verified_outputs_date.nullable(),
  first_name: z.coerce.string().optional().nullable(),
  id_number: z.coerce.string().optional().nullable(),
  id_number_type: z.enum(["br_cpf", "sg_nric", "us_ssn"]).optional().nullable(),
  last_name: z.coerce.string().optional().nullable(),
})

export const s_invoice_payment_method_options_acss_debit = z.object({
  mandate_options: s_invoice_payment_method_options_acss_debit_mandate_options,
  verification_method: z
    .enum(["automatic", "instant", "microdeposits"])
    .optional(),
})

export const s_invoice_payment_method_options_card = z.object({
  installments: s_invoice_installments_card,
  request_three_d_secure: z.enum(["any", "automatic"]).optional().nullable(),
})

export const s_invoice_payment_method_options_customer_balance_bank_transfer =
  z.object({
    eu_bank_transfer:
      s_invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer,
    type: z.coerce.string().optional().nullable(),
  })

export const s_invoice_payment_method_options_us_bank_account = z.object({
  financial_connections:
    s_invoice_payment_method_options_us_bank_account_linked_account_options,
  verification_method: z
    .enum(["automatic", "instant", "microdeposits"])
    .optional(),
})

export const s_invoice_tax_amount = z.object({
  amount: z.coerce.number(),
  inclusive: z.coerce.boolean(),
  tax_rate: z.union([z.coerce.string(), s_tax_rate]),
})

export const s_invoice_threshold_reason = z.object({
  amount_gte: z.coerce.number().optional().nullable(),
  item_reasons: z.array(s_invoice_item_threshold_reason),
})

export const s_invoices_line_items_proration_details = z.object({
  credited_items: s_invoices_line_items_credited_items.nullable(),
})

export const s_issuing_authorization_pending_request = z.object({
  amount: z.coerce.number(),
  amount_details: s_issuing_authorization_amount_details.nullable(),
  currency: z.coerce.string(),
  is_amount_controllable: z.coerce.boolean(),
  merchant_amount: z.coerce.number(),
  merchant_currency: z.coerce.string(),
})

export const s_issuing_authorization_request = z.object({
  amount: z.coerce.number(),
  amount_details: s_issuing_authorization_amount_details.nullable(),
  approved: z.coerce.boolean(),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  merchant_amount: z.coerce.number(),
  merchant_currency: z.coerce.string(),
  reason: z.enum([
    "account_disabled",
    "card_active",
    "card_inactive",
    "cardholder_inactive",
    "cardholder_verification_required",
    "insufficient_funds",
    "not_allowed",
    "spending_controls",
    "suspected_fraud",
    "verification_failed",
    "webhook_approved",
    "webhook_declined",
    "webhook_error",
    "webhook_timeout",
  ]),
  reason_message: z.coerce.string().optional().nullable(),
})

export const s_issuing_card_authorization_controls = z.object({
  allowed_categories: z
    .array(
      z.enum([
        "ac_refrigeration_repair",
        "accounting_bookkeeping_services",
        "advertising_services",
        "agricultural_cooperative",
        "airlines_air_carriers",
        "airports_flying_fields",
        "ambulance_services",
        "amusement_parks_carnivals",
        "antique_reproductions",
        "antique_shops",
        "aquariums",
        "architectural_surveying_services",
        "art_dealers_and_galleries",
        "artists_supply_and_craft_shops",
        "auto_and_home_supply_stores",
        "auto_body_repair_shops",
        "auto_paint_shops",
        "auto_service_shops",
        "automated_cash_disburse",
        "automated_fuel_dispensers",
        "automobile_associations",
        "automotive_parts_and_accessories_stores",
        "automotive_tire_stores",
        "bail_and_bond_payments",
        "bakeries",
        "bands_orchestras",
        "barber_and_beauty_shops",
        "betting_casino_gambling",
        "bicycle_shops",
        "billiard_pool_establishments",
        "boat_dealers",
        "boat_rentals_and_leases",
        "book_stores",
        "books_periodicals_and_newspapers",
        "bowling_alleys",
        "bus_lines",
        "business_secretarial_schools",
        "buying_shopping_services",
        "cable_satellite_and_other_pay_television_and_radio",
        "camera_and_photographic_supply_stores",
        "candy_nut_and_confectionery_stores",
        "car_and_truck_dealers_new_used",
        "car_and_truck_dealers_used_only",
        "car_rental_agencies",
        "car_washes",
        "carpentry_services",
        "carpet_upholstery_cleaning",
        "caterers",
        "charitable_and_social_service_organizations_fundraising",
        "chemicals_and_allied_products",
        "child_care_services",
        "childrens_and_infants_wear_stores",
        "chiropodists_podiatrists",
        "chiropractors",
        "cigar_stores_and_stands",
        "civic_social_fraternal_associations",
        "cleaning_and_maintenance",
        "clothing_rental",
        "colleges_universities",
        "commercial_equipment",
        "commercial_footwear",
        "commercial_photography_art_and_graphics",
        "commuter_transport_and_ferries",
        "computer_network_services",
        "computer_programming",
        "computer_repair",
        "computer_software_stores",
        "computers_peripherals_and_software",
        "concrete_work_services",
        "construction_materials",
        "consulting_public_relations",
        "correspondence_schools",
        "cosmetic_stores",
        "counseling_services",
        "country_clubs",
        "courier_services",
        "court_costs",
        "credit_reporting_agencies",
        "cruise_lines",
        "dairy_products_stores",
        "dance_hall_studios_schools",
        "dating_escort_services",
        "dentists_orthodontists",
        "department_stores",
        "detective_agencies",
        "digital_goods_applications",
        "digital_goods_games",
        "digital_goods_large_volume",
        "digital_goods_media",
        "direct_marketing_catalog_merchant",
        "direct_marketing_combination_catalog_and_retail_merchant",
        "direct_marketing_inbound_telemarketing",
        "direct_marketing_insurance_services",
        "direct_marketing_other",
        "direct_marketing_outbound_telemarketing",
        "direct_marketing_subscription",
        "direct_marketing_travel",
        "discount_stores",
        "doctors",
        "door_to_door_sales",
        "drapery_window_covering_and_upholstery_stores",
        "drinking_places",
        "drug_stores_and_pharmacies",
        "drugs_drug_proprietaries_and_druggist_sundries",
        "dry_cleaners",
        "durable_goods",
        "duty_free_stores",
        "eating_places_restaurants",
        "educational_services",
        "electric_razor_stores",
        "electric_vehicle_charging",
        "electrical_parts_and_equipment",
        "electrical_services",
        "electronics_repair_shops",
        "electronics_stores",
        "elementary_secondary_schools",
        "emergency_services_gcas_visa_use_only",
        "employment_temp_agencies",
        "equipment_rental",
        "exterminating_services",
        "family_clothing_stores",
        "fast_food_restaurants",
        "financial_institutions",
        "fines_government_administrative_entities",
        "fireplace_fireplace_screens_and_accessories_stores",
        "floor_covering_stores",
        "florists",
        "florists_supplies_nursery_stock_and_flowers",
        "freezer_and_locker_meat_provisioners",
        "fuel_dealers_non_automotive",
        "funeral_services_crematories",
        "furniture_home_furnishings_and_equipment_stores_except_appliances",
        "furniture_repair_refinishing",
        "furriers_and_fur_shops",
        "general_services",
        "gift_card_novelty_and_souvenir_shops",
        "glass_paint_and_wallpaper_stores",
        "glassware_crystal_stores",
        "golf_courses_public",
        "government_licensed_horse_dog_racing_us_region_only",
        "government_licensed_online_casions_online_gambling_us_region_only",
        "government_owned_lotteries_non_us_region",
        "government_owned_lotteries_us_region_only",
        "government_services",
        "grocery_stores_supermarkets",
        "hardware_equipment_and_supplies",
        "hardware_stores",
        "health_and_beauty_spas",
        "hearing_aids_sales_and_supplies",
        "heating_plumbing_a_c",
        "hobby_toy_and_game_shops",
        "home_supply_warehouse_stores",
        "hospitals",
        "hotels_motels_and_resorts",
        "household_appliance_stores",
        "industrial_supplies",
        "information_retrieval_services",
        "insurance_default",
        "insurance_underwriting_premiums",
        "intra_company_purchases",
        "jewelry_stores_watches_clocks_and_silverware_stores",
        "landscaping_services",
        "laundries",
        "laundry_cleaning_services",
        "legal_services_attorneys",
        "luggage_and_leather_goods_stores",
        "lumber_building_materials_stores",
        "manual_cash_disburse",
        "marinas_service_and_supplies",
        "marketplaces",
        "masonry_stonework_and_plaster",
        "massage_parlors",
        "medical_and_dental_labs",
        "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
        "medical_services",
        "membership_organizations",
        "mens_and_boys_clothing_and_accessories_stores",
        "mens_womens_clothing_stores",
        "metal_service_centers",
        "miscellaneous",
        "miscellaneous_apparel_and_accessory_shops",
        "miscellaneous_auto_dealers",
        "miscellaneous_business_services",
        "miscellaneous_food_stores",
        "miscellaneous_general_merchandise",
        "miscellaneous_general_services",
        "miscellaneous_home_furnishing_specialty_stores",
        "miscellaneous_publishing_and_printing",
        "miscellaneous_recreation_services",
        "miscellaneous_repair_shops",
        "miscellaneous_specialty_retail",
        "mobile_home_dealers",
        "motion_picture_theaters",
        "motor_freight_carriers_and_trucking",
        "motor_homes_dealers",
        "motor_vehicle_supplies_and_new_parts",
        "motorcycle_shops_and_dealers",
        "motorcycle_shops_dealers",
        "music_stores_musical_instruments_pianos_and_sheet_music",
        "news_dealers_and_newsstands",
        "non_fi_money_orders",
        "non_fi_stored_value_card_purchase_load",
        "nondurable_goods",
        "nurseries_lawn_and_garden_supply_stores",
        "nursing_personal_care",
        "office_and_commercial_furniture",
        "opticians_eyeglasses",
        "optometrists_ophthalmologist",
        "orthopedic_goods_prosthetic_devices",
        "osteopaths",
        "package_stores_beer_wine_and_liquor",
        "paints_varnishes_and_supplies",
        "parking_lots_garages",
        "passenger_railways",
        "pawn_shops",
        "pet_shops_pet_food_and_supplies",
        "petroleum_and_petroleum_products",
        "photo_developing",
        "photographic_photocopy_microfilm_equipment_and_supplies",
        "photographic_studios",
        "picture_video_production",
        "piece_goods_notions_and_other_dry_goods",
        "plumbing_heating_equipment_and_supplies",
        "political_organizations",
        "postal_services_government_only",
        "precious_stones_and_metals_watches_and_jewelry",
        "professional_services",
        "public_warehousing_and_storage",
        "quick_copy_repro_and_blueprint",
        "railroads",
        "real_estate_agents_and_managers_rentals",
        "record_stores",
        "recreational_vehicle_rentals",
        "religious_goods_stores",
        "religious_organizations",
        "roofing_siding_sheet_metal",
        "secretarial_support_services",
        "security_brokers_dealers",
        "service_stations",
        "sewing_needlework_fabric_and_piece_goods_stores",
        "shoe_repair_hat_cleaning",
        "shoe_stores",
        "small_appliance_repair",
        "snowmobile_dealers",
        "special_trade_services",
        "specialty_cleaning",
        "sporting_goods_stores",
        "sporting_recreation_camps",
        "sports_and_riding_apparel_stores",
        "sports_clubs_fields",
        "stamp_and_coin_stores",
        "stationary_office_supplies_printing_and_writing_paper",
        "stationery_stores_office_and_school_supply_stores",
        "swimming_pools_sales",
        "t_ui_travel_germany",
        "tailors_alterations",
        "tax_payments_government_agencies",
        "tax_preparation_services",
        "taxicabs_limousines",
        "telecommunication_equipment_and_telephone_sales",
        "telecommunication_services",
        "telegraph_services",
        "tent_and_awning_shops",
        "testing_laboratories",
        "theatrical_ticket_agencies",
        "timeshares",
        "tire_retreading_and_repair",
        "tolls_bridge_fees",
        "tourist_attractions_and_exhibits",
        "towing_services",
        "trailer_parks_campgrounds",
        "transportation_services",
        "travel_agencies_tour_operators",
        "truck_stop_iteration",
        "truck_utility_trailer_rentals",
        "typesetting_plate_making_and_related_services",
        "typewriter_stores",
        "u_s_federal_government_agencies_or_departments",
        "uniforms_commercial_clothing",
        "used_merchandise_and_secondhand_stores",
        "utilities",
        "variety_stores",
        "veterinary_services",
        "video_amusement_game_supplies",
        "video_game_arcades",
        "video_tape_rental_stores",
        "vocational_trade_schools",
        "watch_jewelry_repair",
        "welding_repair",
        "wholesale_clubs",
        "wig_and_toupee_stores",
        "wires_money_orders",
        "womens_accessory_and_specialty_shops",
        "womens_ready_to_wear_stores",
        "wrecking_and_salvage_yards",
      ])
    )
    .optional()
    .nullable(),
  blocked_categories: z
    .array(
      z.enum([
        "ac_refrigeration_repair",
        "accounting_bookkeeping_services",
        "advertising_services",
        "agricultural_cooperative",
        "airlines_air_carriers",
        "airports_flying_fields",
        "ambulance_services",
        "amusement_parks_carnivals",
        "antique_reproductions",
        "antique_shops",
        "aquariums",
        "architectural_surveying_services",
        "art_dealers_and_galleries",
        "artists_supply_and_craft_shops",
        "auto_and_home_supply_stores",
        "auto_body_repair_shops",
        "auto_paint_shops",
        "auto_service_shops",
        "automated_cash_disburse",
        "automated_fuel_dispensers",
        "automobile_associations",
        "automotive_parts_and_accessories_stores",
        "automotive_tire_stores",
        "bail_and_bond_payments",
        "bakeries",
        "bands_orchestras",
        "barber_and_beauty_shops",
        "betting_casino_gambling",
        "bicycle_shops",
        "billiard_pool_establishments",
        "boat_dealers",
        "boat_rentals_and_leases",
        "book_stores",
        "books_periodicals_and_newspapers",
        "bowling_alleys",
        "bus_lines",
        "business_secretarial_schools",
        "buying_shopping_services",
        "cable_satellite_and_other_pay_television_and_radio",
        "camera_and_photographic_supply_stores",
        "candy_nut_and_confectionery_stores",
        "car_and_truck_dealers_new_used",
        "car_and_truck_dealers_used_only",
        "car_rental_agencies",
        "car_washes",
        "carpentry_services",
        "carpet_upholstery_cleaning",
        "caterers",
        "charitable_and_social_service_organizations_fundraising",
        "chemicals_and_allied_products",
        "child_care_services",
        "childrens_and_infants_wear_stores",
        "chiropodists_podiatrists",
        "chiropractors",
        "cigar_stores_and_stands",
        "civic_social_fraternal_associations",
        "cleaning_and_maintenance",
        "clothing_rental",
        "colleges_universities",
        "commercial_equipment",
        "commercial_footwear",
        "commercial_photography_art_and_graphics",
        "commuter_transport_and_ferries",
        "computer_network_services",
        "computer_programming",
        "computer_repair",
        "computer_software_stores",
        "computers_peripherals_and_software",
        "concrete_work_services",
        "construction_materials",
        "consulting_public_relations",
        "correspondence_schools",
        "cosmetic_stores",
        "counseling_services",
        "country_clubs",
        "courier_services",
        "court_costs",
        "credit_reporting_agencies",
        "cruise_lines",
        "dairy_products_stores",
        "dance_hall_studios_schools",
        "dating_escort_services",
        "dentists_orthodontists",
        "department_stores",
        "detective_agencies",
        "digital_goods_applications",
        "digital_goods_games",
        "digital_goods_large_volume",
        "digital_goods_media",
        "direct_marketing_catalog_merchant",
        "direct_marketing_combination_catalog_and_retail_merchant",
        "direct_marketing_inbound_telemarketing",
        "direct_marketing_insurance_services",
        "direct_marketing_other",
        "direct_marketing_outbound_telemarketing",
        "direct_marketing_subscription",
        "direct_marketing_travel",
        "discount_stores",
        "doctors",
        "door_to_door_sales",
        "drapery_window_covering_and_upholstery_stores",
        "drinking_places",
        "drug_stores_and_pharmacies",
        "drugs_drug_proprietaries_and_druggist_sundries",
        "dry_cleaners",
        "durable_goods",
        "duty_free_stores",
        "eating_places_restaurants",
        "educational_services",
        "electric_razor_stores",
        "electric_vehicle_charging",
        "electrical_parts_and_equipment",
        "electrical_services",
        "electronics_repair_shops",
        "electronics_stores",
        "elementary_secondary_schools",
        "emergency_services_gcas_visa_use_only",
        "employment_temp_agencies",
        "equipment_rental",
        "exterminating_services",
        "family_clothing_stores",
        "fast_food_restaurants",
        "financial_institutions",
        "fines_government_administrative_entities",
        "fireplace_fireplace_screens_and_accessories_stores",
        "floor_covering_stores",
        "florists",
        "florists_supplies_nursery_stock_and_flowers",
        "freezer_and_locker_meat_provisioners",
        "fuel_dealers_non_automotive",
        "funeral_services_crematories",
        "furniture_home_furnishings_and_equipment_stores_except_appliances",
        "furniture_repair_refinishing",
        "furriers_and_fur_shops",
        "general_services",
        "gift_card_novelty_and_souvenir_shops",
        "glass_paint_and_wallpaper_stores",
        "glassware_crystal_stores",
        "golf_courses_public",
        "government_licensed_horse_dog_racing_us_region_only",
        "government_licensed_online_casions_online_gambling_us_region_only",
        "government_owned_lotteries_non_us_region",
        "government_owned_lotteries_us_region_only",
        "government_services",
        "grocery_stores_supermarkets",
        "hardware_equipment_and_supplies",
        "hardware_stores",
        "health_and_beauty_spas",
        "hearing_aids_sales_and_supplies",
        "heating_plumbing_a_c",
        "hobby_toy_and_game_shops",
        "home_supply_warehouse_stores",
        "hospitals",
        "hotels_motels_and_resorts",
        "household_appliance_stores",
        "industrial_supplies",
        "information_retrieval_services",
        "insurance_default",
        "insurance_underwriting_premiums",
        "intra_company_purchases",
        "jewelry_stores_watches_clocks_and_silverware_stores",
        "landscaping_services",
        "laundries",
        "laundry_cleaning_services",
        "legal_services_attorneys",
        "luggage_and_leather_goods_stores",
        "lumber_building_materials_stores",
        "manual_cash_disburse",
        "marinas_service_and_supplies",
        "marketplaces",
        "masonry_stonework_and_plaster",
        "massage_parlors",
        "medical_and_dental_labs",
        "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
        "medical_services",
        "membership_organizations",
        "mens_and_boys_clothing_and_accessories_stores",
        "mens_womens_clothing_stores",
        "metal_service_centers",
        "miscellaneous",
        "miscellaneous_apparel_and_accessory_shops",
        "miscellaneous_auto_dealers",
        "miscellaneous_business_services",
        "miscellaneous_food_stores",
        "miscellaneous_general_merchandise",
        "miscellaneous_general_services",
        "miscellaneous_home_furnishing_specialty_stores",
        "miscellaneous_publishing_and_printing",
        "miscellaneous_recreation_services",
        "miscellaneous_repair_shops",
        "miscellaneous_specialty_retail",
        "mobile_home_dealers",
        "motion_picture_theaters",
        "motor_freight_carriers_and_trucking",
        "motor_homes_dealers",
        "motor_vehicle_supplies_and_new_parts",
        "motorcycle_shops_and_dealers",
        "motorcycle_shops_dealers",
        "music_stores_musical_instruments_pianos_and_sheet_music",
        "news_dealers_and_newsstands",
        "non_fi_money_orders",
        "non_fi_stored_value_card_purchase_load",
        "nondurable_goods",
        "nurseries_lawn_and_garden_supply_stores",
        "nursing_personal_care",
        "office_and_commercial_furniture",
        "opticians_eyeglasses",
        "optometrists_ophthalmologist",
        "orthopedic_goods_prosthetic_devices",
        "osteopaths",
        "package_stores_beer_wine_and_liquor",
        "paints_varnishes_and_supplies",
        "parking_lots_garages",
        "passenger_railways",
        "pawn_shops",
        "pet_shops_pet_food_and_supplies",
        "petroleum_and_petroleum_products",
        "photo_developing",
        "photographic_photocopy_microfilm_equipment_and_supplies",
        "photographic_studios",
        "picture_video_production",
        "piece_goods_notions_and_other_dry_goods",
        "plumbing_heating_equipment_and_supplies",
        "political_organizations",
        "postal_services_government_only",
        "precious_stones_and_metals_watches_and_jewelry",
        "professional_services",
        "public_warehousing_and_storage",
        "quick_copy_repro_and_blueprint",
        "railroads",
        "real_estate_agents_and_managers_rentals",
        "record_stores",
        "recreational_vehicle_rentals",
        "religious_goods_stores",
        "religious_organizations",
        "roofing_siding_sheet_metal",
        "secretarial_support_services",
        "security_brokers_dealers",
        "service_stations",
        "sewing_needlework_fabric_and_piece_goods_stores",
        "shoe_repair_hat_cleaning",
        "shoe_stores",
        "small_appliance_repair",
        "snowmobile_dealers",
        "special_trade_services",
        "specialty_cleaning",
        "sporting_goods_stores",
        "sporting_recreation_camps",
        "sports_and_riding_apparel_stores",
        "sports_clubs_fields",
        "stamp_and_coin_stores",
        "stationary_office_supplies_printing_and_writing_paper",
        "stationery_stores_office_and_school_supply_stores",
        "swimming_pools_sales",
        "t_ui_travel_germany",
        "tailors_alterations",
        "tax_payments_government_agencies",
        "tax_preparation_services",
        "taxicabs_limousines",
        "telecommunication_equipment_and_telephone_sales",
        "telecommunication_services",
        "telegraph_services",
        "tent_and_awning_shops",
        "testing_laboratories",
        "theatrical_ticket_agencies",
        "timeshares",
        "tire_retreading_and_repair",
        "tolls_bridge_fees",
        "tourist_attractions_and_exhibits",
        "towing_services",
        "trailer_parks_campgrounds",
        "transportation_services",
        "travel_agencies_tour_operators",
        "truck_stop_iteration",
        "truck_utility_trailer_rentals",
        "typesetting_plate_making_and_related_services",
        "typewriter_stores",
        "u_s_federal_government_agencies_or_departments",
        "uniforms_commercial_clothing",
        "used_merchandise_and_secondhand_stores",
        "utilities",
        "variety_stores",
        "veterinary_services",
        "video_amusement_game_supplies",
        "video_game_arcades",
        "video_tape_rental_stores",
        "vocational_trade_schools",
        "watch_jewelry_repair",
        "welding_repair",
        "wholesale_clubs",
        "wig_and_toupee_stores",
        "wires_money_orders",
        "womens_accessory_and_specialty_shops",
        "womens_ready_to_wear_stores",
        "wrecking_and_salvage_yards",
      ])
    )
    .optional()
    .nullable(),
  spending_limits: z.array(s_issuing_card_spending_limit).optional().nullable(),
  spending_limits_currency: z.coerce.string().optional().nullable(),
})

export const s_issuing_card_shipping = z.object({
  address: s_address,
  carrier: z.enum(["dhl", "fedex", "royal_mail", "usps"]).optional().nullable(),
  customs: s_issuing_card_shipping_customs.nullable(),
  eta: z.coerce.number().optional().nullable(),
  name: z.coerce.string(),
  phone_number: z.coerce.string().optional().nullable(),
  require_signature: z.coerce.boolean().optional().nullable(),
  service: z.enum(["express", "priority", "standard"]),
  status: z
    .enum([
      "canceled",
      "delivered",
      "failure",
      "pending",
      "returned",
      "shipped",
    ])
    .optional()
    .nullable(),
  tracking_number: z.coerce.string().optional().nullable(),
  tracking_url: z.coerce.string().optional().nullable(),
  type: z.enum(["bulk", "individual"]),
})

export const s_issuing_card_wallets = z.object({
  apple_pay: s_issuing_card_apple_pay,
  google_pay: s_issuing_card_google_pay,
  primary_account_identifier: z.coerce.string().optional().nullable(),
})

export const s_issuing_cardholder_address = z.object({ address: s_address })

export const s_issuing_cardholder_authorization_controls = z.object({
  allowed_categories: z
    .array(
      z.enum([
        "ac_refrigeration_repair",
        "accounting_bookkeeping_services",
        "advertising_services",
        "agricultural_cooperative",
        "airlines_air_carriers",
        "airports_flying_fields",
        "ambulance_services",
        "amusement_parks_carnivals",
        "antique_reproductions",
        "antique_shops",
        "aquariums",
        "architectural_surveying_services",
        "art_dealers_and_galleries",
        "artists_supply_and_craft_shops",
        "auto_and_home_supply_stores",
        "auto_body_repair_shops",
        "auto_paint_shops",
        "auto_service_shops",
        "automated_cash_disburse",
        "automated_fuel_dispensers",
        "automobile_associations",
        "automotive_parts_and_accessories_stores",
        "automotive_tire_stores",
        "bail_and_bond_payments",
        "bakeries",
        "bands_orchestras",
        "barber_and_beauty_shops",
        "betting_casino_gambling",
        "bicycle_shops",
        "billiard_pool_establishments",
        "boat_dealers",
        "boat_rentals_and_leases",
        "book_stores",
        "books_periodicals_and_newspapers",
        "bowling_alleys",
        "bus_lines",
        "business_secretarial_schools",
        "buying_shopping_services",
        "cable_satellite_and_other_pay_television_and_radio",
        "camera_and_photographic_supply_stores",
        "candy_nut_and_confectionery_stores",
        "car_and_truck_dealers_new_used",
        "car_and_truck_dealers_used_only",
        "car_rental_agencies",
        "car_washes",
        "carpentry_services",
        "carpet_upholstery_cleaning",
        "caterers",
        "charitable_and_social_service_organizations_fundraising",
        "chemicals_and_allied_products",
        "child_care_services",
        "childrens_and_infants_wear_stores",
        "chiropodists_podiatrists",
        "chiropractors",
        "cigar_stores_and_stands",
        "civic_social_fraternal_associations",
        "cleaning_and_maintenance",
        "clothing_rental",
        "colleges_universities",
        "commercial_equipment",
        "commercial_footwear",
        "commercial_photography_art_and_graphics",
        "commuter_transport_and_ferries",
        "computer_network_services",
        "computer_programming",
        "computer_repair",
        "computer_software_stores",
        "computers_peripherals_and_software",
        "concrete_work_services",
        "construction_materials",
        "consulting_public_relations",
        "correspondence_schools",
        "cosmetic_stores",
        "counseling_services",
        "country_clubs",
        "courier_services",
        "court_costs",
        "credit_reporting_agencies",
        "cruise_lines",
        "dairy_products_stores",
        "dance_hall_studios_schools",
        "dating_escort_services",
        "dentists_orthodontists",
        "department_stores",
        "detective_agencies",
        "digital_goods_applications",
        "digital_goods_games",
        "digital_goods_large_volume",
        "digital_goods_media",
        "direct_marketing_catalog_merchant",
        "direct_marketing_combination_catalog_and_retail_merchant",
        "direct_marketing_inbound_telemarketing",
        "direct_marketing_insurance_services",
        "direct_marketing_other",
        "direct_marketing_outbound_telemarketing",
        "direct_marketing_subscription",
        "direct_marketing_travel",
        "discount_stores",
        "doctors",
        "door_to_door_sales",
        "drapery_window_covering_and_upholstery_stores",
        "drinking_places",
        "drug_stores_and_pharmacies",
        "drugs_drug_proprietaries_and_druggist_sundries",
        "dry_cleaners",
        "durable_goods",
        "duty_free_stores",
        "eating_places_restaurants",
        "educational_services",
        "electric_razor_stores",
        "electric_vehicle_charging",
        "electrical_parts_and_equipment",
        "electrical_services",
        "electronics_repair_shops",
        "electronics_stores",
        "elementary_secondary_schools",
        "emergency_services_gcas_visa_use_only",
        "employment_temp_agencies",
        "equipment_rental",
        "exterminating_services",
        "family_clothing_stores",
        "fast_food_restaurants",
        "financial_institutions",
        "fines_government_administrative_entities",
        "fireplace_fireplace_screens_and_accessories_stores",
        "floor_covering_stores",
        "florists",
        "florists_supplies_nursery_stock_and_flowers",
        "freezer_and_locker_meat_provisioners",
        "fuel_dealers_non_automotive",
        "funeral_services_crematories",
        "furniture_home_furnishings_and_equipment_stores_except_appliances",
        "furniture_repair_refinishing",
        "furriers_and_fur_shops",
        "general_services",
        "gift_card_novelty_and_souvenir_shops",
        "glass_paint_and_wallpaper_stores",
        "glassware_crystal_stores",
        "golf_courses_public",
        "government_licensed_horse_dog_racing_us_region_only",
        "government_licensed_online_casions_online_gambling_us_region_only",
        "government_owned_lotteries_non_us_region",
        "government_owned_lotteries_us_region_only",
        "government_services",
        "grocery_stores_supermarkets",
        "hardware_equipment_and_supplies",
        "hardware_stores",
        "health_and_beauty_spas",
        "hearing_aids_sales_and_supplies",
        "heating_plumbing_a_c",
        "hobby_toy_and_game_shops",
        "home_supply_warehouse_stores",
        "hospitals",
        "hotels_motels_and_resorts",
        "household_appliance_stores",
        "industrial_supplies",
        "information_retrieval_services",
        "insurance_default",
        "insurance_underwriting_premiums",
        "intra_company_purchases",
        "jewelry_stores_watches_clocks_and_silverware_stores",
        "landscaping_services",
        "laundries",
        "laundry_cleaning_services",
        "legal_services_attorneys",
        "luggage_and_leather_goods_stores",
        "lumber_building_materials_stores",
        "manual_cash_disburse",
        "marinas_service_and_supplies",
        "marketplaces",
        "masonry_stonework_and_plaster",
        "massage_parlors",
        "medical_and_dental_labs",
        "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
        "medical_services",
        "membership_organizations",
        "mens_and_boys_clothing_and_accessories_stores",
        "mens_womens_clothing_stores",
        "metal_service_centers",
        "miscellaneous",
        "miscellaneous_apparel_and_accessory_shops",
        "miscellaneous_auto_dealers",
        "miscellaneous_business_services",
        "miscellaneous_food_stores",
        "miscellaneous_general_merchandise",
        "miscellaneous_general_services",
        "miscellaneous_home_furnishing_specialty_stores",
        "miscellaneous_publishing_and_printing",
        "miscellaneous_recreation_services",
        "miscellaneous_repair_shops",
        "miscellaneous_specialty_retail",
        "mobile_home_dealers",
        "motion_picture_theaters",
        "motor_freight_carriers_and_trucking",
        "motor_homes_dealers",
        "motor_vehicle_supplies_and_new_parts",
        "motorcycle_shops_and_dealers",
        "motorcycle_shops_dealers",
        "music_stores_musical_instruments_pianos_and_sheet_music",
        "news_dealers_and_newsstands",
        "non_fi_money_orders",
        "non_fi_stored_value_card_purchase_load",
        "nondurable_goods",
        "nurseries_lawn_and_garden_supply_stores",
        "nursing_personal_care",
        "office_and_commercial_furniture",
        "opticians_eyeglasses",
        "optometrists_ophthalmologist",
        "orthopedic_goods_prosthetic_devices",
        "osteopaths",
        "package_stores_beer_wine_and_liquor",
        "paints_varnishes_and_supplies",
        "parking_lots_garages",
        "passenger_railways",
        "pawn_shops",
        "pet_shops_pet_food_and_supplies",
        "petroleum_and_petroleum_products",
        "photo_developing",
        "photographic_photocopy_microfilm_equipment_and_supplies",
        "photographic_studios",
        "picture_video_production",
        "piece_goods_notions_and_other_dry_goods",
        "plumbing_heating_equipment_and_supplies",
        "political_organizations",
        "postal_services_government_only",
        "precious_stones_and_metals_watches_and_jewelry",
        "professional_services",
        "public_warehousing_and_storage",
        "quick_copy_repro_and_blueprint",
        "railroads",
        "real_estate_agents_and_managers_rentals",
        "record_stores",
        "recreational_vehicle_rentals",
        "religious_goods_stores",
        "religious_organizations",
        "roofing_siding_sheet_metal",
        "secretarial_support_services",
        "security_brokers_dealers",
        "service_stations",
        "sewing_needlework_fabric_and_piece_goods_stores",
        "shoe_repair_hat_cleaning",
        "shoe_stores",
        "small_appliance_repair",
        "snowmobile_dealers",
        "special_trade_services",
        "specialty_cleaning",
        "sporting_goods_stores",
        "sporting_recreation_camps",
        "sports_and_riding_apparel_stores",
        "sports_clubs_fields",
        "stamp_and_coin_stores",
        "stationary_office_supplies_printing_and_writing_paper",
        "stationery_stores_office_and_school_supply_stores",
        "swimming_pools_sales",
        "t_ui_travel_germany",
        "tailors_alterations",
        "tax_payments_government_agencies",
        "tax_preparation_services",
        "taxicabs_limousines",
        "telecommunication_equipment_and_telephone_sales",
        "telecommunication_services",
        "telegraph_services",
        "tent_and_awning_shops",
        "testing_laboratories",
        "theatrical_ticket_agencies",
        "timeshares",
        "tire_retreading_and_repair",
        "tolls_bridge_fees",
        "tourist_attractions_and_exhibits",
        "towing_services",
        "trailer_parks_campgrounds",
        "transportation_services",
        "travel_agencies_tour_operators",
        "truck_stop_iteration",
        "truck_utility_trailer_rentals",
        "typesetting_plate_making_and_related_services",
        "typewriter_stores",
        "u_s_federal_government_agencies_or_departments",
        "uniforms_commercial_clothing",
        "used_merchandise_and_secondhand_stores",
        "utilities",
        "variety_stores",
        "veterinary_services",
        "video_amusement_game_supplies",
        "video_game_arcades",
        "video_tape_rental_stores",
        "vocational_trade_schools",
        "watch_jewelry_repair",
        "welding_repair",
        "wholesale_clubs",
        "wig_and_toupee_stores",
        "wires_money_orders",
        "womens_accessory_and_specialty_shops",
        "womens_ready_to_wear_stores",
        "wrecking_and_salvage_yards",
      ])
    )
    .optional()
    .nullable(),
  blocked_categories: z
    .array(
      z.enum([
        "ac_refrigeration_repair",
        "accounting_bookkeeping_services",
        "advertising_services",
        "agricultural_cooperative",
        "airlines_air_carriers",
        "airports_flying_fields",
        "ambulance_services",
        "amusement_parks_carnivals",
        "antique_reproductions",
        "antique_shops",
        "aquariums",
        "architectural_surveying_services",
        "art_dealers_and_galleries",
        "artists_supply_and_craft_shops",
        "auto_and_home_supply_stores",
        "auto_body_repair_shops",
        "auto_paint_shops",
        "auto_service_shops",
        "automated_cash_disburse",
        "automated_fuel_dispensers",
        "automobile_associations",
        "automotive_parts_and_accessories_stores",
        "automotive_tire_stores",
        "bail_and_bond_payments",
        "bakeries",
        "bands_orchestras",
        "barber_and_beauty_shops",
        "betting_casino_gambling",
        "bicycle_shops",
        "billiard_pool_establishments",
        "boat_dealers",
        "boat_rentals_and_leases",
        "book_stores",
        "books_periodicals_and_newspapers",
        "bowling_alleys",
        "bus_lines",
        "business_secretarial_schools",
        "buying_shopping_services",
        "cable_satellite_and_other_pay_television_and_radio",
        "camera_and_photographic_supply_stores",
        "candy_nut_and_confectionery_stores",
        "car_and_truck_dealers_new_used",
        "car_and_truck_dealers_used_only",
        "car_rental_agencies",
        "car_washes",
        "carpentry_services",
        "carpet_upholstery_cleaning",
        "caterers",
        "charitable_and_social_service_organizations_fundraising",
        "chemicals_and_allied_products",
        "child_care_services",
        "childrens_and_infants_wear_stores",
        "chiropodists_podiatrists",
        "chiropractors",
        "cigar_stores_and_stands",
        "civic_social_fraternal_associations",
        "cleaning_and_maintenance",
        "clothing_rental",
        "colleges_universities",
        "commercial_equipment",
        "commercial_footwear",
        "commercial_photography_art_and_graphics",
        "commuter_transport_and_ferries",
        "computer_network_services",
        "computer_programming",
        "computer_repair",
        "computer_software_stores",
        "computers_peripherals_and_software",
        "concrete_work_services",
        "construction_materials",
        "consulting_public_relations",
        "correspondence_schools",
        "cosmetic_stores",
        "counseling_services",
        "country_clubs",
        "courier_services",
        "court_costs",
        "credit_reporting_agencies",
        "cruise_lines",
        "dairy_products_stores",
        "dance_hall_studios_schools",
        "dating_escort_services",
        "dentists_orthodontists",
        "department_stores",
        "detective_agencies",
        "digital_goods_applications",
        "digital_goods_games",
        "digital_goods_large_volume",
        "digital_goods_media",
        "direct_marketing_catalog_merchant",
        "direct_marketing_combination_catalog_and_retail_merchant",
        "direct_marketing_inbound_telemarketing",
        "direct_marketing_insurance_services",
        "direct_marketing_other",
        "direct_marketing_outbound_telemarketing",
        "direct_marketing_subscription",
        "direct_marketing_travel",
        "discount_stores",
        "doctors",
        "door_to_door_sales",
        "drapery_window_covering_and_upholstery_stores",
        "drinking_places",
        "drug_stores_and_pharmacies",
        "drugs_drug_proprietaries_and_druggist_sundries",
        "dry_cleaners",
        "durable_goods",
        "duty_free_stores",
        "eating_places_restaurants",
        "educational_services",
        "electric_razor_stores",
        "electric_vehicle_charging",
        "electrical_parts_and_equipment",
        "electrical_services",
        "electronics_repair_shops",
        "electronics_stores",
        "elementary_secondary_schools",
        "emergency_services_gcas_visa_use_only",
        "employment_temp_agencies",
        "equipment_rental",
        "exterminating_services",
        "family_clothing_stores",
        "fast_food_restaurants",
        "financial_institutions",
        "fines_government_administrative_entities",
        "fireplace_fireplace_screens_and_accessories_stores",
        "floor_covering_stores",
        "florists",
        "florists_supplies_nursery_stock_and_flowers",
        "freezer_and_locker_meat_provisioners",
        "fuel_dealers_non_automotive",
        "funeral_services_crematories",
        "furniture_home_furnishings_and_equipment_stores_except_appliances",
        "furniture_repair_refinishing",
        "furriers_and_fur_shops",
        "general_services",
        "gift_card_novelty_and_souvenir_shops",
        "glass_paint_and_wallpaper_stores",
        "glassware_crystal_stores",
        "golf_courses_public",
        "government_licensed_horse_dog_racing_us_region_only",
        "government_licensed_online_casions_online_gambling_us_region_only",
        "government_owned_lotteries_non_us_region",
        "government_owned_lotteries_us_region_only",
        "government_services",
        "grocery_stores_supermarkets",
        "hardware_equipment_and_supplies",
        "hardware_stores",
        "health_and_beauty_spas",
        "hearing_aids_sales_and_supplies",
        "heating_plumbing_a_c",
        "hobby_toy_and_game_shops",
        "home_supply_warehouse_stores",
        "hospitals",
        "hotels_motels_and_resorts",
        "household_appliance_stores",
        "industrial_supplies",
        "information_retrieval_services",
        "insurance_default",
        "insurance_underwriting_premiums",
        "intra_company_purchases",
        "jewelry_stores_watches_clocks_and_silverware_stores",
        "landscaping_services",
        "laundries",
        "laundry_cleaning_services",
        "legal_services_attorneys",
        "luggage_and_leather_goods_stores",
        "lumber_building_materials_stores",
        "manual_cash_disburse",
        "marinas_service_and_supplies",
        "marketplaces",
        "masonry_stonework_and_plaster",
        "massage_parlors",
        "medical_and_dental_labs",
        "medical_dental_ophthalmic_and_hospital_equipment_and_supplies",
        "medical_services",
        "membership_organizations",
        "mens_and_boys_clothing_and_accessories_stores",
        "mens_womens_clothing_stores",
        "metal_service_centers",
        "miscellaneous",
        "miscellaneous_apparel_and_accessory_shops",
        "miscellaneous_auto_dealers",
        "miscellaneous_business_services",
        "miscellaneous_food_stores",
        "miscellaneous_general_merchandise",
        "miscellaneous_general_services",
        "miscellaneous_home_furnishing_specialty_stores",
        "miscellaneous_publishing_and_printing",
        "miscellaneous_recreation_services",
        "miscellaneous_repair_shops",
        "miscellaneous_specialty_retail",
        "mobile_home_dealers",
        "motion_picture_theaters",
        "motor_freight_carriers_and_trucking",
        "motor_homes_dealers",
        "motor_vehicle_supplies_and_new_parts",
        "motorcycle_shops_and_dealers",
        "motorcycle_shops_dealers",
        "music_stores_musical_instruments_pianos_and_sheet_music",
        "news_dealers_and_newsstands",
        "non_fi_money_orders",
        "non_fi_stored_value_card_purchase_load",
        "nondurable_goods",
        "nurseries_lawn_and_garden_supply_stores",
        "nursing_personal_care",
        "office_and_commercial_furniture",
        "opticians_eyeglasses",
        "optometrists_ophthalmologist",
        "orthopedic_goods_prosthetic_devices",
        "osteopaths",
        "package_stores_beer_wine_and_liquor",
        "paints_varnishes_and_supplies",
        "parking_lots_garages",
        "passenger_railways",
        "pawn_shops",
        "pet_shops_pet_food_and_supplies",
        "petroleum_and_petroleum_products",
        "photo_developing",
        "photographic_photocopy_microfilm_equipment_and_supplies",
        "photographic_studios",
        "picture_video_production",
        "piece_goods_notions_and_other_dry_goods",
        "plumbing_heating_equipment_and_supplies",
        "political_organizations",
        "postal_services_government_only",
        "precious_stones_and_metals_watches_and_jewelry",
        "professional_services",
        "public_warehousing_and_storage",
        "quick_copy_repro_and_blueprint",
        "railroads",
        "real_estate_agents_and_managers_rentals",
        "record_stores",
        "recreational_vehicle_rentals",
        "religious_goods_stores",
        "religious_organizations",
        "roofing_siding_sheet_metal",
        "secretarial_support_services",
        "security_brokers_dealers",
        "service_stations",
        "sewing_needlework_fabric_and_piece_goods_stores",
        "shoe_repair_hat_cleaning",
        "shoe_stores",
        "small_appliance_repair",
        "snowmobile_dealers",
        "special_trade_services",
        "specialty_cleaning",
        "sporting_goods_stores",
        "sporting_recreation_camps",
        "sports_and_riding_apparel_stores",
        "sports_clubs_fields",
        "stamp_and_coin_stores",
        "stationary_office_supplies_printing_and_writing_paper",
        "stationery_stores_office_and_school_supply_stores",
        "swimming_pools_sales",
        "t_ui_travel_germany",
        "tailors_alterations",
        "tax_payments_government_agencies",
        "tax_preparation_services",
        "taxicabs_limousines",
        "telecommunication_equipment_and_telephone_sales",
        "telecommunication_services",
        "telegraph_services",
        "tent_and_awning_shops",
        "testing_laboratories",
        "theatrical_ticket_agencies",
        "timeshares",
        "tire_retreading_and_repair",
        "tolls_bridge_fees",
        "tourist_attractions_and_exhibits",
        "towing_services",
        "trailer_parks_campgrounds",
        "transportation_services",
        "travel_agencies_tour_operators",
        "truck_stop_iteration",
        "truck_utility_trailer_rentals",
        "typesetting_plate_making_and_related_services",
        "typewriter_stores",
        "u_s_federal_government_agencies_or_departments",
        "uniforms_commercial_clothing",
        "used_merchandise_and_secondhand_stores",
        "utilities",
        "variety_stores",
        "veterinary_services",
        "video_amusement_game_supplies",
        "video_game_arcades",
        "video_tape_rental_stores",
        "vocational_trade_schools",
        "watch_jewelry_repair",
        "welding_repair",
        "wholesale_clubs",
        "wig_and_toupee_stores",
        "wires_money_orders",
        "womens_accessory_and_specialty_shops",
        "womens_ready_to_wear_stores",
        "wrecking_and_salvage_yards",
      ])
    )
    .optional()
    .nullable(),
  spending_limits: z
    .array(s_issuing_cardholder_spending_limit)
    .optional()
    .nullable(),
  spending_limits_currency: z.coerce.string().optional().nullable(),
})

export const s_issuing_cardholder_card_issuing = z.object({
  user_terms_acceptance: s_issuing_cardholder_user_terms_acceptance.nullable(),
})

export const s_issuing_transaction_flight_data = z.object({
  departure_at: z.coerce.number().optional().nullable(),
  passenger_name: z.coerce.string().optional().nullable(),
  refundable: z.coerce.boolean().optional().nullable(),
  segments: z
    .array(s_issuing_transaction_flight_data_leg)
    .optional()
    .nullable(),
  travel_agency: z.coerce.string().optional().nullable(),
})

export const s_line_items_tax_amount = z.object({
  amount: z.coerce.number(),
  rate: s_tax_rate,
})

export const s_mandate_blik = z.object({
  expires_after: z.coerce.number().optional().nullable(),
  off_session: s_mandate_options_off_session_details_blik,
  type: z.enum(["off_session", "on_session"]).optional().nullable(),
})

export const s_payment_flows_amount_details = z.object({
  tip: s_payment_flows_amount_details_resource_tip,
})

export const s_payment_flows_installment_options = z.object({
  enabled: z.coerce.boolean(),
  plan: s_payment_method_details_card_installments_plan,
})

export const s_payment_intent_card_processing = z.object({
  customer_notification: s_payment_intent_processing_customer_notification,
})

export const s_payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code =
  z.object({
    hosted_instructions_url: z.coerce.string(),
    mobile_auth_url: z.coerce.string(),
    qr_code: s_payment_intent_next_action_cashapp_qr_code,
  })

export const s_payment_intent_next_action_konbini_stores = z.object({
  familymart: s_payment_intent_next_action_konbini_familymart.nullable(),
  lawson: s_payment_intent_next_action_konbini_lawson.nullable(),
  ministop: s_payment_intent_next_action_konbini_ministop.nullable(),
  seicomart: s_payment_intent_next_action_konbini_seicomart.nullable(),
})

export const s_payment_intent_payment_method_options_acss_debit = z.object({
  mandate_options:
    s_payment_intent_payment_method_options_mandate_options_acss_debit,
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
  verification_method: z
    .enum(["automatic", "instant", "microdeposits"])
    .optional(),
})

export const s_payment_intent_payment_method_options_sepa_debit = z.object({
  mandate_options:
    s_payment_intent_payment_method_options_mandate_options_sepa_debit,
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
})

export const s_payment_intent_payment_method_options_us_bank_account = z.object(
  {
    financial_connections: s_linked_account_options_us_bank_account,
    setup_future_usage: z
      .enum(["none", "off_session", "on_session"])
      .optional(),
    verification_method: z
      .enum(["automatic", "instant", "microdeposits"])
      .optional(),
  }
)

export const s_payment_links_resource_after_completion = z.object({
  hosted_confirmation:
    s_payment_links_resource_completion_behavior_confirmation_page,
  redirect: s_payment_links_resource_completion_behavior_redirect,
  type: z.enum(["hosted_confirmation", "redirect"]),
})

export const s_payment_links_resource_custom_fields_dropdown = z.object({
  options: z.array(s_payment_links_resource_custom_fields_dropdown_option),
})

export const s_payment_links_resource_custom_text = z.object({
  shipping_address: s_payment_links_resource_custom_text_position.nullable(),
  submit: s_payment_links_resource_custom_text_position.nullable(),
})

export const s_payment_method_card_wallet_masterpass = z.object({
  billing_address: s_address.nullable(),
  email: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  shipping_address: s_address.nullable(),
})

export const s_payment_method_card_wallet_visa_checkout = z.object({
  billing_address: s_address.nullable(),
  email: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  shipping_address: s_address.nullable(),
})

export const s_payment_method_details_card_installments = z.object({
  plan: s_payment_method_details_card_installments_plan.nullable(),
})

export const s_payment_method_details_card_present = z.object({
  amount_authorized: z.coerce.number().optional().nullable(),
  brand: z.coerce.string().optional().nullable(),
  capture_before: z.coerce.number().optional(),
  cardholder_name: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  emv_auth_data: z.coerce.string().optional().nullable(),
  exp_month: z.coerce.number(),
  exp_year: z.coerce.number(),
  fingerprint: z.coerce.string().optional().nullable(),
  funding: z.coerce.string().optional().nullable(),
  generated_card: z.coerce.string().optional().nullable(),
  incremental_authorization_supported: z.coerce.boolean(),
  last4: z.coerce.string().optional().nullable(),
  network: z.coerce.string().optional().nullable(),
  overcapture_supported: z.coerce.boolean(),
  read_method: z
    .enum([
      "contact_emv",
      "contactless_emv",
      "contactless_magstripe_mode",
      "magnetic_stripe_fallback",
      "magnetic_stripe_track2",
    ])
    .optional()
    .nullable(),
  receipt: s_payment_method_details_card_present_receipt.nullable(),
})

export const s_payment_method_details_card_wallet_masterpass = z.object({
  billing_address: s_address.nullable(),
  email: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  shipping_address: s_address.nullable(),
})

export const s_payment_method_details_card_wallet_visa_checkout = z.object({
  billing_address: s_address.nullable(),
  email: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  shipping_address: s_address.nullable(),
})

export const s_payment_method_details_interac_present = z.object({
  brand: z.coerce.string().optional().nullable(),
  cardholder_name: z.coerce.string().optional().nullable(),
  country: z.coerce.string().optional().nullable(),
  emv_auth_data: z.coerce.string().optional().nullable(),
  exp_month: z.coerce.number(),
  exp_year: z.coerce.number(),
  fingerprint: z.coerce.string().optional().nullable(),
  funding: z.coerce.string().optional().nullable(),
  generated_card: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  network: z.coerce.string().optional().nullable(),
  preferred_locales: z.array(z.coerce.string()).optional().nullable(),
  read_method: z
    .enum([
      "contact_emv",
      "contactless_emv",
      "contactless_magstripe_mode",
      "magnetic_stripe_fallback",
      "magnetic_stripe_track2",
    ])
    .optional()
    .nullable(),
  receipt: s_payment_method_details_interac_present_receipt.nullable(),
})

export const s_payment_method_details_konbini = z.object({
  store: s_payment_method_details_konbini_store.nullable(),
})

export const s_payment_method_klarna = z.object({
  dob: s_payment_flows_private_payment_methods_klarna_dob.nullable(),
})

export const s_payment_method_options_card_installments = z.object({
  available_plans: z
    .array(s_payment_method_details_card_installments_plan)
    .optional()
    .nullable(),
  enabled: z.coerce.boolean(),
  plan: s_payment_method_details_card_installments_plan.nullable(),
})

export const s_payment_method_options_customer_balance_bank_transfer = z.object(
  {
    eu_bank_transfer: s_payment_method_options_customer_balance_eu_bank_account,
    requested_address_types: z
      .array(z.enum(["iban", "sepa", "sort_code", "spei", "zengin"]))
      .optional(),
    type: z
      .enum([
        "eu_bank_transfer",
        "gb_bank_transfer",
        "jp_bank_transfer",
        "mx_bank_transfer",
      ])
      .optional()
      .nullable(),
  }
)

export const s_payment_method_us_bank_account_status_details = z.object({
  blocked: s_payment_method_us_bank_account_blocked,
})

export const s_payment_pages_checkout_session_after_expiration = z.object({
  recovery:
    s_payment_pages_checkout_session_after_expiration_recovery.nullable(),
})

export const s_payment_pages_checkout_session_custom_fields_dropdown = z.object(
  {
    options: z.array(s_payment_pages_checkout_session_custom_fields_option),
    value: z.coerce.string().optional().nullable(),
  }
)

export const s_payment_pages_checkout_session_custom_text = z.object({
  shipping_address:
    s_payment_pages_checkout_session_custom_text_position.nullable(),
  submit: s_payment_pages_checkout_session_custom_text_position.nullable(),
})

export const s_payment_pages_checkout_session_customer_details = z.object({
  address: s_address.nullable(),
  email: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  phone: z.coerce.string().optional().nullable(),
  tax_exempt: z.enum(["exempt", "none", "reverse"]).optional().nullable(),
  tax_ids: z
    .array(s_payment_pages_checkout_session_tax_id)
    .optional()
    .nullable(),
})

export const s_person_future_requirements = z.object({
  alternatives: z
    .array(s_account_requirements_alternative)
    .optional()
    .nullable(),
  currently_due: z.array(z.coerce.string()),
  errors: z.array(s_account_requirements_error),
  eventually_due: z.array(z.coerce.string()),
  past_due: z.array(z.coerce.string()),
  pending_verification: z.array(z.coerce.string()),
})

export const s_person_requirements = z.object({
  alternatives: z
    .array(s_account_requirements_alternative)
    .optional()
    .nullable(),
  currently_due: z.array(z.coerce.string()),
  errors: z.array(s_account_requirements_error),
  eventually_due: z.array(z.coerce.string()),
  past_due: z.array(z.coerce.string()),
  pending_verification: z.array(z.coerce.string()),
})

export const s_portal_flows_flow_after_completion = z.object({
  hosted_confirmation:
    s_portal_flows_after_completion_hosted_confirmation.nullable(),
  redirect: s_portal_flows_after_completion_redirect.nullable(),
  type: z.enum(["hosted_confirmation", "portal_homepage", "redirect"]),
})

export const s_portal_subscription_cancel = z.object({
  cancellation_reason: s_portal_subscription_cancellation_reason,
  enabled: z.coerce.boolean(),
  mode: z.enum(["at_period_end", "immediately"]),
  proration_behavior: z.enum(["always_invoice", "create_prorations", "none"]),
})

export const s_portal_subscription_update = z.object({
  default_allowed_updates: z.array(
    z.enum(["price", "promotion_code", "quantity"])
  ),
  enabled: z.coerce.boolean(),
  products: z.array(s_portal_subscription_update_product).optional().nullable(),
  proration_behavior: z.enum(["always_invoice", "create_prorations", "none"]),
})

export const s_promotion_codes_resource_restrictions = z.object({
  currency_options: z.object({}).optional(),
  first_time_transaction: z.coerce.boolean(),
  minimum_amount: z.coerce.number().optional().nullable(),
  minimum_amount_currency: z.coerce.string().optional().nullable(),
})

export const s_radar_value_list = z.object({
  alias: z.coerce.string(),
  created: z.coerce.number(),
  created_by: z.coerce.string(),
  id: z.coerce.string(),
  item_type: z.enum([
    "card_bin",
    "card_fingerprint",
    "case_sensitive_string",
    "country",
    "customer_id",
    "email",
    "ip_address",
    "string",
  ]),
  list_items: z.object({
    data: z.array(s_radar_value_list_item),
    has_more: z.coerce.boolean(),
    object: z.enum(["list"]),
    url: z.coerce.string(),
  }),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  name: z.coerce.string(),
  object: z.enum(["radar.value_list"]),
})

export const s_refund_next_action_display_details = z.object({
  email_sent: s_email_sent,
  expires_at: z.coerce.number(),
})

export const s_setup_attempt_payment_method_details_card = z.object({
  checks: s_payment_method_details_card_checks.nullable(),
  three_d_secure: s_three_d_secure_details.nullable(),
})

export const s_setup_intent_payment_method_options_acss_debit = z.object({
  currency: z.enum(["cad", "usd"]).optional().nullable(),
  mandate_options:
    s_setup_intent_payment_method_options_mandate_options_acss_debit,
  verification_method: z
    .enum(["automatic", "instant", "microdeposits"])
    .optional(),
})

export const s_setup_intent_payment_method_options_card = z.object({
  mandate_options:
    s_setup_intent_payment_method_options_card_mandate_options.nullable(),
  network: z
    .enum([
      "amex",
      "cartes_bancaires",
      "diners",
      "discover",
      "interac",
      "jcb",
      "mastercard",
      "unionpay",
      "unknown",
      "visa",
    ])
    .optional()
    .nullable(),
  request_three_d_secure: z
    .enum(["any", "automatic", "challenge_only"])
    .optional()
    .nullable(),
})

export const s_setup_intent_payment_method_options_mandate_options_blik =
  z.object({
    expires_after: z.coerce.number().optional().nullable(),
    off_session: s_mandate_options_off_session_details_blik,
    type: z.enum(["off_session", "on_session"]).optional().nullable(),
  })

export const s_setup_intent_payment_method_options_sepa_debit = z.object({
  mandate_options:
    s_setup_intent_payment_method_options_mandate_options_sepa_debit,
})

export const s_setup_intent_payment_method_options_us_bank_account = z.object({
  financial_connections: s_linked_account_options_us_bank_account,
  verification_method: z
    .enum(["automatic", "instant", "microdeposits"])
    .optional(),
})

export const s_shipping = z.object({
  address: s_address,
  carrier: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional(),
  phone: z.coerce.string().optional().nullable(),
  tracking_number: z.coerce.string().optional().nullable(),
})

export const s_shipping_rate_delivery_estimate = z.object({
  maximum: s_shipping_rate_delivery_estimate_bound.nullable(),
  minimum: s_shipping_rate_delivery_estimate_bound.nullable(),
})

export const s_shipping_rate_fixed_amount = z.object({
  amount: z.coerce.number(),
  currency: z.coerce.string(),
  currency_options: z.object({}).optional(),
})

export const s_source_owner = z.object({
  address: s_address.nullable(),
  email: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  phone: z.coerce.string().optional().nullable(),
  verified_address: s_address.nullable(),
  verified_email: z.coerce.string().optional().nullable(),
  verified_name: z.coerce.string().optional().nullable(),
  verified_phone: z.coerce.string().optional().nullable(),
})

export const s_source_transaction = z.object({
  ach_credit_transfer: s_source_transaction_ach_credit_transfer_data,
  amount: z.coerce.number(),
  chf_credit_transfer: s_source_transaction_chf_credit_transfer_data,
  created: z.coerce.number(),
  currency: z.coerce.string(),
  gbp_credit_transfer: s_source_transaction_gbp_credit_transfer_data,
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["source_transaction"]),
  paper_check: s_source_transaction_paper_check_data,
  sepa_credit_transfer: s_source_transaction_sepa_credit_transfer_data,
  source: z.coerce.string(),
  status: z.coerce.string(),
  type: z.enum([
    "ach_credit_transfer",
    "ach_debit",
    "alipay",
    "bancontact",
    "card",
    "card_present",
    "eps",
    "giropay",
    "ideal",
    "klarna",
    "multibanco",
    "p24",
    "sepa_debit",
    "sofort",
    "three_d_secure",
    "wechat",
  ]),
})

export const s_subscription_payment_method_options_card = z.object({
  mandate_options: s_invoice_mandate_options_card,
  network: z
    .enum([
      "amex",
      "cartes_bancaires",
      "diners",
      "discover",
      "interac",
      "jcb",
      "mastercard",
      "unionpay",
      "unknown",
      "visa",
    ])
    .optional()
    .nullable(),
  request_three_d_secure: z.enum(["any", "automatic"]).optional().nullable(),
})

export const s_subscriptions_trials_resource_trial_settings = z.object({
  end_behavior: s_subscriptions_trials_resource_end_behavior,
})

export const s_tax_product_resource_customer_details = z.object({
  address: s_tax_product_resource_postal_address.nullable(),
  address_source: z.enum(["billing", "shipping"]).optional().nullable(),
  ip_address: z.coerce.string().optional().nullable(),
  tax_ids: z.array(s_tax_product_resource_customer_details_resource_tax_id),
  taxability_override: z.enum(["customer_exempt", "none", "reverse_charge"]),
})

export const s_tax_product_resource_line_item_tax_breakdown = z.object({
  amount: z.coerce.number(),
  jurisdiction: s_tax_product_resource_jurisdiction,
  sourcing: z.enum(["destination", "origin"]),
  tax_rate_details:
    s_tax_product_resource_line_item_tax_rate_details.nullable(),
  taxability_reason: z.enum([
    "customer_exempt",
    "not_collecting",
    "not_subject_to_tax",
    "not_supported",
    "portion_product_exempt",
    "portion_reduced_rated",
    "portion_standard_rated",
    "product_exempt",
    "product_exempt_holiday",
    "proportionally_rated",
    "reduced_rated",
    "reverse_charge",
    "standard_rated",
    "taxable_basis_reduced",
    "zero_rated",
  ]),
  taxable_amount: z.coerce.number(),
})

export const s_tax_product_resource_tax_breakdown = z.object({
  amount: z.coerce.number(),
  inclusive: z.coerce.boolean(),
  tax_rate_details: s_tax_product_resource_tax_rate_details,
  taxable_amount: z.coerce.number(),
})

export const s_tax_transaction_line_item = z.object({
  amount: z.coerce.number(),
  amount_tax: z.coerce.number(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional().nullable(),
  object: z.enum(["tax.transaction_line_item"]),
  quantity: z.coerce.number(),
  reference: z.coerce.string(),
  reversal:
    s_tax_product_resource_tax_transaction_line_item_resource_reversal.nullable(),
  tax_behavior: z.enum(["exclusive", "inclusive"]),
  tax_code: z.coerce.string(),
  type: z.enum(["reversal", "transaction"]),
})

export const s_terminal_configuration_configuration_resource_tipping = z.object(
  {
    aud: s_terminal_configuration_configuration_resource_currency_specific_config,
    cad: s_terminal_configuration_configuration_resource_currency_specific_config,
    chf: s_terminal_configuration_configuration_resource_currency_specific_config,
    czk: s_terminal_configuration_configuration_resource_currency_specific_config,
    dkk: s_terminal_configuration_configuration_resource_currency_specific_config,
    eur: s_terminal_configuration_configuration_resource_currency_specific_config,
    gbp: s_terminal_configuration_configuration_resource_currency_specific_config,
    hkd: s_terminal_configuration_configuration_resource_currency_specific_config,
    myr: s_terminal_configuration_configuration_resource_currency_specific_config,
    nok: s_terminal_configuration_configuration_resource_currency_specific_config,
    nzd: s_terminal_configuration_configuration_resource_currency_specific_config,
    sek: s_terminal_configuration_configuration_resource_currency_specific_config,
    sgd: s_terminal_configuration_configuration_resource_currency_specific_config,
    usd: s_terminal_configuration_configuration_resource_currency_specific_config,
  }
)

export const s_terminal_location = z.object({
  address: s_address,
  configuration_overrides: z.coerce.string().optional(),
  display_name: z.coerce.string(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["terminal.location"]),
})

export const s_terminal_reader_reader_resource_cart = z.object({
  currency: z.coerce.string(),
  line_items: z.array(s_terminal_reader_reader_resource_line_item),
  tax: z.coerce.number().optional().nullable(),
  total: z.coerce.number(),
})

export const s_terminal_reader_reader_resource_process_config = z.object({
  skip_tipping: z.coerce.boolean().optional(),
  tipping: s_terminal_reader_reader_resource_tipping_config,
})

export const s_treasury_financial_accounts_resource_ach_toggle_settings =
  z.object({
    requested: z.coerce.boolean(),
    status: z.enum(["active", "pending", "restricted"]),
    status_details: z.array(
      s_treasury_financial_accounts_resource_toggles_setting_status_details
    ),
  })

export const s_treasury_financial_accounts_resource_financial_address =
  z.object({
    aba: s_treasury_financial_accounts_resource_aba_record,
    supported_networks: z.array(z.enum(["ach", "us_domestic_wire"])).optional(),
    type: z.enum(["aba"]),
  })

export const s_treasury_financial_accounts_resource_status_details = z.object({
  closed:
    s_treasury_financial_accounts_resource_closed_status_details.nullable(),
})

export const s_treasury_financial_accounts_resource_toggle_settings = z.object({
  requested: z.coerce.boolean(),
  status: z.enum(["active", "pending", "restricted"]),
  status_details: z.array(
    s_treasury_financial_accounts_resource_toggles_setting_status_details
  ),
})

export const s_treasury_shared_resource_billing_details = z.object({
  address: s_address,
  email: z.coerce.string().optional().nullable(),
  name: z.coerce.string().optional().nullable(),
})

export const s_usage_record_summary = z.object({
  id: z.coerce.string(),
  invoice: z.coerce.string().optional().nullable(),
  livemode: z.coerce.boolean(),
  object: z.enum(["usage_record_summary"]),
  period: s_period,
  subscription_item: z.coerce.string(),
  total_usage: z.coerce.number(),
})

export const s_balance_detail = z.object({
  available: z.array(s_balance_amount),
})

export const s_card_generated_from_payment_method_details = z.object({
  card_present: s_payment_method_details_card_present,
  type: z.coerce.string(),
})

export const s_checkout_customer_balance_payment_method_options = z.object({
  bank_transfer:
    s_checkout_customer_balance_bank_transfer_payment_method_options,
  funding_type: z.enum(["bank_transfer"]).optional().nullable(),
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_country_spec = z.object({
  default_currency: z.coerce.string(),
  id: z.coerce.string(),
  object: z.enum(["country_spec"]),
  supported_bank_account_currencies: z.object({}),
  supported_payment_currencies: z.array(z.coerce.string()),
  supported_payment_methods: z.array(z.coerce.string()),
  supported_transfer_countries: z.array(z.coerce.string()),
  verification_fields: s_country_spec_verification_fields,
})

export const s_customer_balance_resource_cash_balance_transaction_resource_funded_transaction =
  z.object({
    bank_transfer:
      s_customer_balance_resource_cash_balance_transaction_resource_funded_transaction_resource_bank_transfer,
  })

export const s_funding_instructions_bank_transfer = z.object({
  country: z.coerce.string(),
  financial_addresses: z.array(
    s_funding_instructions_bank_transfer_financial_address
  ),
  type: z.enum(["eu_bank_transfer", "jp_bank_transfer"]),
})

export const s_identity_verification_report = z.object({
  created: z.coerce.number(),
  document: s_gelato_document_report,
  id: z.coerce.string(),
  id_number: s_gelato_id_number_report,
  livemode: z.coerce.boolean(),
  object: z.enum(["identity.verification_report"]),
  options: s_gelato_verification_report_options,
  selfie: s_gelato_selfie_report,
  type: z.enum(["document", "id_number"]).optional(),
  verification_session: z.coerce.string().optional().nullable(),
})

export const s_inbound_transfers = z.object({
  billing_details: s_treasury_shared_resource_billing_details,
  type: z.enum(["us_bank_account"]),
  us_bank_account: s_inbound_transfers_payment_method_details_us_bank_account,
})

export const s_invoice_payment_method_options_customer_balance = z.object({
  bank_transfer:
    s_invoice_payment_method_options_customer_balance_bank_transfer,
  funding_type: z.enum(["bank_transfer"]).optional().nullable(),
})

export const s_issuing_transaction_purchase_details = z.object({
  flight: s_issuing_transaction_flight_data.nullable(),
  fuel: s_issuing_transaction_fuel_data.nullable(),
  lodging: s_issuing_transaction_lodging_data.nullable(),
  receipt: z.array(s_issuing_transaction_receipt_data).optional().nullable(),
  reference: z.coerce.string().optional().nullable(),
})

export const s_mandate_payment_method_details = z.object({
  acss_debit: s_mandate_acss_debit,
  au_becs_debit: s_mandate_au_becs_debit,
  bacs_debit: s_mandate_bacs_debit,
  blik: s_mandate_blik,
  card: s_card_mandate_payment_method_details,
  cashapp: s_mandate_cashapp,
  link: s_mandate_link,
  sepa_debit: s_mandate_sepa_debit,
  type: z.coerce.string(),
  us_bank_account: s_mandate_us_bank_account,
})

export const s_outbound_payments_payment_method_details = z.object({
  billing_details: s_treasury_shared_resource_billing_details,
  financial_account:
    s_outbound_payments_payment_method_details_financial_account,
  type: z.enum(["financial_account", "us_bank_account"]),
  us_bank_account: s_outbound_payments_payment_method_details_us_bank_account,
})

export const s_outbound_transfers_payment_method_details = z.object({
  billing_details: s_treasury_shared_resource_billing_details,
  type: z.enum(["us_bank_account"]),
  us_bank_account: s_outbound_transfers_payment_method_details_us_bank_account,
})

export const s_payment_intent_next_action_display_bank_transfer_instructions =
  z.object({
    amount_remaining: z.coerce.number().optional().nullable(),
    currency: z.coerce.string().optional().nullable(),
    financial_addresses: z
      .array(s_funding_instructions_bank_transfer_financial_address)
      .optional(),
    hosted_instructions_url: z.coerce.string().optional().nullable(),
    reference: z.coerce.string().optional().nullable(),
    type: z.enum([
      "eu_bank_transfer",
      "gb_bank_transfer",
      "jp_bank_transfer",
      "mx_bank_transfer",
    ]),
  })

export const s_payment_intent_next_action_konbini = z.object({
  expires_at: z.coerce.number(),
  hosted_voucher_url: z.coerce.string().optional().nullable(),
  stores: s_payment_intent_next_action_konbini_stores,
})

export const s_payment_intent_payment_method_options_card = z.object({
  capture_method: z.enum(["manual"]).optional(),
  installments: s_payment_method_options_card_installments.nullable(),
  mandate_options: s_payment_method_options_card_mandate_options.nullable(),
  network: z
    .enum([
      "amex",
      "cartes_bancaires",
      "diners",
      "discover",
      "interac",
      "jcb",
      "mastercard",
      "unionpay",
      "unknown",
      "visa",
    ])
    .optional()
    .nullable(),
  request_three_d_secure: z
    .enum(["any", "automatic", "challenge_only"])
    .optional()
    .nullable(),
  setup_future_usage: z.enum(["none", "off_session", "on_session"]).optional(),
  statement_descriptor_suffix_kana: z.coerce.string().optional(),
  statement_descriptor_suffix_kanji: z.coerce.string().optional(),
})

export const s_payment_intent_processing = z.object({
  card: s_payment_intent_card_processing,
  type: z.enum(["card"]),
})

export const s_payment_intent_type_specific_payment_method_options_client =
  z.object({
    capture_method: z.enum(["manual", "manual_preferred"]).optional(),
    installments: s_payment_flows_installment_options,
    setup_future_usage: z
      .enum(["none", "off_session", "on_session"])
      .optional(),
    verification_method: z
      .enum(["automatic", "instant", "microdeposits"])
      .optional(),
  })

export const s_payment_links_resource_custom_fields = z.object({
  dropdown: s_payment_links_resource_custom_fields_dropdown.nullable(),
  key: z.coerce.string(),
  label: s_payment_links_resource_custom_fields_label,
  optional: z.coerce.boolean(),
  type: z.enum(["dropdown", "numeric", "text"]),
})

export const s_payment_method_card_wallet = z.object({
  amex_express_checkout: s_payment_method_card_wallet_amex_express_checkout,
  apple_pay: s_payment_method_card_wallet_apple_pay,
  dynamic_last4: z.coerce.string().optional().nullable(),
  google_pay: s_payment_method_card_wallet_google_pay,
  masterpass: s_payment_method_card_wallet_masterpass,
  samsung_pay: s_payment_method_card_wallet_samsung_pay,
  type: z.enum([
    "amex_express_checkout",
    "apple_pay",
    "google_pay",
    "link",
    "masterpass",
    "samsung_pay",
    "visa_checkout",
  ]),
  visa_checkout: s_payment_method_card_wallet_visa_checkout,
})

export const s_payment_method_details_card_wallet = z.object({
  amex_express_checkout:
    s_payment_method_details_card_wallet_amex_express_checkout,
  apple_pay: s_payment_method_details_card_wallet_apple_pay,
  dynamic_last4: z.coerce.string().optional().nullable(),
  google_pay: s_payment_method_details_card_wallet_google_pay,
  masterpass: s_payment_method_details_card_wallet_masterpass,
  samsung_pay: s_payment_method_details_card_wallet_samsung_pay,
  type: z.enum([
    "amex_express_checkout",
    "apple_pay",
    "google_pay",
    "link",
    "masterpass",
    "samsung_pay",
    "visa_checkout",
  ]),
  visa_checkout: s_payment_method_details_card_wallet_visa_checkout,
})

export const s_payment_method_options_customer_balance = z.object({
  bank_transfer: s_payment_method_options_customer_balance_bank_transfer,
  funding_type: z.enum(["bank_transfer"]).optional().nullable(),
  setup_future_usage: z.enum(["none"]).optional(),
})

export const s_payment_method_us_bank_account = z.object({
  account_holder_type: z.enum(["company", "individual"]).optional().nullable(),
  account_type: z.enum(["checking", "savings"]).optional().nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  financial_connections_account: z.coerce.string().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  last4: z.coerce.string().optional().nullable(),
  networks: s_us_bank_account_networks.nullable(),
  routing_number: z.coerce.string().optional().nullable(),
  status_details: s_payment_method_us_bank_account_status_details.nullable(),
})

export const s_payment_pages_checkout_session_custom_fields = z.object({
  dropdown: s_payment_pages_checkout_session_custom_fields_dropdown.nullable(),
  key: z.coerce.string(),
  label: s_payment_pages_checkout_session_custom_fields_label,
  numeric: s_payment_pages_checkout_session_custom_fields_numeric.nullable(),
  optional: z.coerce.boolean(),
  text: s_payment_pages_checkout_session_custom_fields_text.nullable(),
  type: z.enum(["dropdown", "numeric", "text"]),
})

export const s_portal_features = z.object({
  customer_update: s_portal_customer_update,
  invoice_history: s_portal_invoice_list,
  payment_method_update: s_portal_payment_method_update,
  subscription_cancel: s_portal_subscription_cancel,
  subscription_pause: s_portal_subscription_pause,
  subscription_update: s_portal_subscription_update,
})

export const s_portal_flows_flow = z.object({
  after_completion: s_portal_flows_flow_after_completion,
  subscription_cancel: s_portal_flows_flow_subscription_cancel.nullable(),
  type: z.enum(["payment_method_update", "subscription_cancel"]),
})

export const s_refund_next_action = z.object({
  display_details: s_refund_next_action_display_details.nullable(),
  type: z.coerce.string(),
})

export const s_setup_intent_next_action = z.object({
  cashapp_handle_redirect_or_display_qr_code:
    s_payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code,
  redirect_to_url: s_setup_intent_next_action_redirect_to_url,
  type: z.coerce.string(),
  use_stripe_sdk: z.object({}).optional(),
  verify_with_microdeposits:
    s_setup_intent_next_action_verify_with_microdeposits,
})

export const s_setup_intent_payment_method_options_blik = z.object({
  mandate_options: s_setup_intent_payment_method_options_mandate_options_blik,
})

export const s_shipping_rate = z.object({
  active: z.coerce.boolean(),
  created: z.coerce.number(),
  delivery_estimate: s_shipping_rate_delivery_estimate.nullable(),
  display_name: z.coerce.string().optional().nullable(),
  fixed_amount: s_shipping_rate_fixed_amount,
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["shipping_rate"]),
  tax_behavior: z
    .enum(["exclusive", "inclusive", "unspecified"])
    .optional()
    .nullable(),
  tax_code: z.union([z.coerce.string(), s_tax_code]).nullable(),
  type: z.enum(["fixed_amount"]),
})

export const s_source_order = z.object({
  amount: z.coerce.number(),
  currency: z.coerce.string(),
  email: z.coerce.string().optional(),
  items: z.array(s_source_order_item).optional().nullable(),
  shipping: s_shipping,
})

export const s_tax_calculation_line_item = z.object({
  amount: z.coerce.number(),
  amount_tax: z.coerce.number(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["tax.calculation_line_item"]),
  product: z.coerce.string().optional().nullable(),
  quantity: z.coerce.number(),
  reference: z.coerce.string().optional().nullable(),
  tax_behavior: z.enum(["exclusive", "inclusive"]),
  tax_breakdown: z
    .array(s_tax_product_resource_line_item_tax_breakdown)
    .optional()
    .nullable(),
  tax_code: z.coerce.string(),
})

export const s_tax_transaction = z.object({
  created: z.coerce.number(),
  currency: z.coerce.string(),
  customer: z.coerce.string().optional().nullable(),
  customer_details: s_tax_product_resource_customer_details,
  id: z.coerce.string(),
  line_items: z
    .object({
      data: z.array(s_tax_transaction_line_item),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    })
    .optional()
    .nullable(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional().nullable(),
  object: z.enum(["tax.transaction"]),
  reference: z.coerce.string(),
  reversal: s_tax_product_resource_tax_transaction_resource_reversal.nullable(),
  shipping_cost: s_tax_product_resource_shipping_cost.nullable(),
  tax_date: z.coerce.number(),
  type: z.enum(["reversal", "transaction"]),
})

export const s_terminal_reader_reader_resource_set_reader_display_action =
  z.object({
    cart: s_terminal_reader_reader_resource_cart.nullable(),
    type: z.enum(["cart"]),
  })

export const s_treasury_financial_accounts_resource_financial_addresses_features =
  z.object({ aba: s_treasury_financial_accounts_resource_toggle_settings })

export const s_treasury_financial_accounts_resource_inbound_transfers =
  z.object({ ach: s_treasury_financial_accounts_resource_ach_toggle_settings })

export const s_treasury_financial_accounts_resource_outbound_payments =
  z.object({
    ach: s_treasury_financial_accounts_resource_ach_toggle_settings,
    us_domestic_wire: s_treasury_financial_accounts_resource_toggle_settings,
  })

export const s_treasury_financial_accounts_resource_outbound_transfers =
  z.object({
    ach: s_treasury_financial_accounts_resource_ach_toggle_settings,
    us_domestic_wire: s_treasury_financial_accounts_resource_toggle_settings,
  })

export const s_treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details =
  z.object({
    balance: z.enum(["payments"]).optional(),
    billing_details: s_treasury_shared_resource_billing_details,
    financial_account: s_received_payment_method_details_financial_account,
    issuing_card: z.coerce.string().optional(),
    type: z.enum([
      "balance",
      "financial_account",
      "issuing_card",
      "stripe",
      "us_bank_account",
    ]),
    us_bank_account:
      s_treasury_shared_resource_initiating_payment_method_details_us_bank_account,
  })

export const s_balance = z.object({
  available: z.array(s_balance_amount),
  connect_reserved: z.array(s_balance_amount).optional(),
  instant_available: z.array(s_balance_amount).optional(),
  issuing: s_balance_detail,
  livemode: z.coerce.boolean(),
  object: z.enum(["balance"]),
  pending: z.array(s_balance_amount),
})

export const s_billing_portal_configuration = z.object({
  active: z.coerce.boolean(),
  application: z
    .union([z.coerce.string(), s_application, s_deleted_application])
    .nullable(),
  business_profile: s_portal_business_profile,
  created: z.coerce.number(),
  default_return_url: z.coerce.string().optional().nullable(),
  features: s_portal_features,
  id: z.coerce.string(),
  is_default: z.coerce.boolean(),
  livemode: z.coerce.boolean(),
  login_page: s_portal_login_page,
  metadata: z.object({}).optional().nullable(),
  object: z.enum(["billing_portal.configuration"]),
  updated: z.coerce.number(),
})

export const s_checkout_session_payment_method_options = z.object({
  acss_debit: s_checkout_acss_debit_payment_method_options,
  affirm: s_checkout_affirm_payment_method_options,
  afterpay_clearpay: s_checkout_afterpay_clearpay_payment_method_options,
  alipay: s_checkout_alipay_payment_method_options,
  au_becs_debit: s_checkout_au_becs_debit_payment_method_options,
  bacs_debit: s_checkout_bacs_debit_payment_method_options,
  bancontact: s_checkout_bancontact_payment_method_options,
  boleto: s_checkout_boleto_payment_method_options,
  card: s_checkout_card_payment_method_options,
  cashapp: s_checkout_cashapp_payment_method_options,
  customer_balance: s_checkout_customer_balance_payment_method_options,
  eps: s_checkout_eps_payment_method_options,
  fpx: s_checkout_fpx_payment_method_options,
  giropay: s_checkout_giropay_payment_method_options,
  grabpay: s_checkout_grab_pay_payment_method_options,
  ideal: s_checkout_ideal_payment_method_options,
  klarna: s_checkout_klarna_payment_method_options,
  konbini: s_checkout_konbini_payment_method_options,
  oxxo: s_checkout_oxxo_payment_method_options,
  p24: s_checkout_p24_payment_method_options,
  paynow: s_checkout_paynow_payment_method_options,
  pix: s_checkout_pix_payment_method_options,
  sepa_debit: s_checkout_sepa_debit_payment_method_options,
  sofort: s_checkout_sofort_payment_method_options,
  us_bank_account: s_checkout_us_bank_account_payment_method_options,
})

export const s_funding_instructions = z.object({
  bank_transfer: s_funding_instructions_bank_transfer,
  currency: z.coerce.string(),
  funding_type: z.enum(["bank_transfer"]),
  livemode: z.coerce.boolean(),
  object: z.enum(["funding_instructions"]),
})

export const s_identity_verification_session = z.object({
  client_secret: z.coerce.string().optional().nullable(),
  created: z.coerce.number(),
  id: z.coerce.string(),
  last_error: s_gelato_session_last_error.nullable(),
  last_verification_report: z
    .union([z.coerce.string(), s_identity_verification_report])
    .nullable(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["identity.verification_session"]),
  options: s_gelato_verification_session_options.nullable(),
  redaction: s_verification_session_redaction.nullable(),
  status: z.enum(["canceled", "processing", "requires_input", "verified"]),
  type: z.enum(["document", "id_number"]).optional().nullable(),
  url: z.coerce.string().optional().nullable(),
  verified_outputs: s_gelato_verified_outputs.nullable(),
})

export const s_invoices_payment_method_options = z.object({
  acss_debit: s_invoice_payment_method_options_acss_debit.nullable(),
  bancontact: s_invoice_payment_method_options_bancontact.nullable(),
  card: s_invoice_payment_method_options_card.nullable(),
  customer_balance:
    s_invoice_payment_method_options_customer_balance.nullable(),
  konbini: s_invoice_payment_method_options_konbini.nullable(),
  us_bank_account: s_invoice_payment_method_options_us_bank_account.nullable(),
})

export const s_invoices_shipping_cost = z.object({
  amount_subtotal: z.coerce.number(),
  amount_tax: z.coerce.number(),
  amount_total: z.coerce.number(),
  shipping_rate: z.union([z.coerce.string(), s_shipping_rate]).nullable(),
  taxes: z.array(s_line_items_tax_amount).optional(),
})

export const s_payment_intent_next_action = z.object({
  alipay_handle_redirect: s_payment_intent_next_action_alipay_handle_redirect,
  boleto_display_details: s_payment_intent_next_action_boleto,
  card_await_notification: s_payment_intent_next_action_card_await_notification,
  cashapp_handle_redirect_or_display_qr_code:
    s_payment_intent_next_action_cashapp_handle_redirect_or_display_qr_code,
  display_bank_transfer_instructions:
    s_payment_intent_next_action_display_bank_transfer_instructions,
  konbini_display_details: s_payment_intent_next_action_konbini,
  oxxo_display_details: s_payment_intent_next_action_display_oxxo_details,
  paynow_display_qr_code: s_payment_intent_next_action_paynow_display_qr_code,
  pix_display_qr_code: s_payment_intent_next_action_pix_display_qr_code,
  promptpay_display_qr_code:
    s_payment_intent_next_action_promptpay_display_qr_code,
  redirect_to_url: s_payment_intent_next_action_redirect_to_url,
  type: z.coerce.string(),
  use_stripe_sdk: z.object({}).optional(),
  verify_with_microdeposits:
    s_payment_intent_next_action_verify_with_microdeposits,
  wechat_pay_display_qr_code:
    s_payment_intent_next_action_wechat_pay_display_qr_code,
  wechat_pay_redirect_to_android_app:
    s_payment_intent_next_action_wechat_pay_redirect_to_android_app,
  wechat_pay_redirect_to_ios_app:
    s_payment_intent_next_action_wechat_pay_redirect_to_ios_app,
})

export const s_payment_intent_payment_method_options = z.object({
  acss_debit: z.union([
    s_payment_intent_payment_method_options_acss_debit,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  affirm: z.union([
    s_payment_method_options_affirm,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  afterpay_clearpay: z.union([
    s_payment_method_options_afterpay_clearpay,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  alipay: z.union([
    s_payment_method_options_alipay,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  au_becs_debit: z.union([
    s_payment_intent_payment_method_options_au_becs_debit,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  bacs_debit: z.union([
    s_payment_method_options_bacs_debit,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  bancontact: z.union([
    s_payment_method_options_bancontact,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  blik: z.union([
    s_payment_intent_payment_method_options_blik,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  boleto: z.union([
    s_payment_method_options_boleto,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  card: z.union([
    s_payment_intent_payment_method_options_card,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  card_present: z.union([
    s_payment_method_options_card_present,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  cashapp: z.union([
    s_payment_method_options_cashapp,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  customer_balance: z.union([
    s_payment_method_options_customer_balance,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  eps: z.union([
    s_payment_intent_payment_method_options_eps,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  fpx: z.union([
    s_payment_method_options_fpx,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  giropay: z.union([
    s_payment_method_options_giropay,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  grabpay: z.union([
    s_payment_method_options_grabpay,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  ideal: z.union([
    s_payment_method_options_ideal,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  interac_present: z.union([
    s_payment_method_options_interac_present,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  klarna: z.union([
    s_payment_method_options_klarna,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  konbini: z.union([
    s_payment_method_options_konbini,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  link: z.union([
    s_payment_intent_payment_method_options_link,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  oxxo: z.union([
    s_payment_method_options_oxxo,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  p24: z.union([
    s_payment_method_options_p24,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  paynow: z.union([
    s_payment_method_options_paynow,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  pix: z.union([
    s_payment_method_options_pix,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  promptpay: z.union([
    s_payment_method_options_promptpay,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  sepa_debit: z.union([
    s_payment_intent_payment_method_options_sepa_debit,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  sofort: z.union([
    s_payment_method_options_sofort,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  us_bank_account: z.union([
    s_payment_intent_payment_method_options_us_bank_account,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
  wechat_pay: z.union([
    s_payment_method_options_wechat_pay,
    s_payment_intent_type_specific_payment_method_options_client,
  ]),
})

export const s_payment_links_resource_shipping_option = z.object({
  shipping_amount: z.coerce.number(),
  shipping_rate: z.union([z.coerce.string(), s_shipping_rate]),
})

export const s_payment_method_details_card = z.object({
  brand: z.coerce.string().optional().nullable(),
  checks: s_payment_method_details_card_checks.nullable(),
  country: z.coerce.string().optional().nullable(),
  exp_month: z.coerce.number(),
  exp_year: z.coerce.number(),
  fingerprint: z.coerce.string().optional().nullable(),
  funding: z.coerce.string().optional().nullable(),
  installments: s_payment_method_details_card_installments.nullable(),
  last4: z.coerce.string().optional().nullable(),
  mandate: z.coerce.string().optional().nullable(),
  network: z.coerce.string().optional().nullable(),
  three_d_secure: s_three_d_secure_details.nullable(),
  wallet: s_payment_method_details_card_wallet.nullable(),
})

export const s_payment_pages_checkout_session_shipping_cost = z.object({
  amount_subtotal: z.coerce.number(),
  amount_tax: z.coerce.number(),
  amount_total: z.coerce.number(),
  shipping_rate: z.union([z.coerce.string(), s_shipping_rate]).nullable(),
  taxes: z.array(s_line_items_tax_amount).optional(),
})

export const s_payment_pages_checkout_session_shipping_option = z.object({
  shipping_amount: z.coerce.number(),
  shipping_rate: z.union([z.coerce.string(), s_shipping_rate]),
})

export const s_setup_intent_payment_method_options = z.object({
  acss_debit: z.union([
    s_setup_intent_payment_method_options_acss_debit,
    s_setup_intent_type_specific_payment_method_options_client,
  ]),
  blik: z.union([
    s_setup_intent_payment_method_options_blik,
    s_setup_intent_type_specific_payment_method_options_client,
  ]),
  card: s_setup_intent_payment_method_options_card,
  link: z.union([
    s_setup_intent_payment_method_options_link,
    s_setup_intent_type_specific_payment_method_options_client,
  ]),
  sepa_debit: z.union([
    s_setup_intent_payment_method_options_sepa_debit,
    s_setup_intent_type_specific_payment_method_options_client,
  ]),
  us_bank_account: z.union([
    s_setup_intent_payment_method_options_us_bank_account,
    s_setup_intent_type_specific_payment_method_options_client,
  ]),
})

export const s_source = z.object({
  ach_credit_transfer: s_source_type_ach_credit_transfer,
  ach_debit: s_source_type_ach_debit,
  acss_debit: s_source_type_acss_debit,
  alipay: s_source_type_alipay,
  amount: z.coerce.number().optional().nullable(),
  au_becs_debit: s_source_type_au_becs_debit,
  bancontact: s_source_type_bancontact,
  card: s_source_type_card,
  card_present: s_source_type_card_present,
  client_secret: z.coerce.string(),
  code_verification: s_source_code_verification_flow,
  created: z.coerce.number(),
  currency: z.coerce.string().optional().nullable(),
  customer: z.coerce.string().optional(),
  eps: s_source_type_eps,
  flow: z.coerce.string(),
  giropay: s_source_type_giropay,
  id: z.coerce.string(),
  ideal: s_source_type_ideal,
  klarna: s_source_type_klarna,
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional().nullable(),
  multibanco: s_source_type_multibanco,
  object: z.enum(["source"]),
  owner: s_source_owner.nullable(),
  p24: s_source_type_p24,
  receiver: s_source_receiver_flow,
  redirect: s_source_redirect_flow,
  sepa_debit: s_source_type_sepa_debit,
  sofort: s_source_type_sofort,
  source_order: s_source_order,
  statement_descriptor: z.coerce.string().optional().nullable(),
  status: z.coerce.string(),
  three_d_secure: s_source_type_three_d_secure,
  type: z.enum([
    "ach_credit_transfer",
    "ach_debit",
    "acss_debit",
    "alipay",
    "au_becs_debit",
    "bancontact",
    "card",
    "card_present",
    "eps",
    "giropay",
    "ideal",
    "klarna",
    "multibanco",
    "p24",
    "sepa_debit",
    "sofort",
    "three_d_secure",
    "wechat",
  ]),
  usage: z.coerce.string().optional().nullable(),
  wechat: s_source_type_wechat,
})

export const s_subscriptions_resource_payment_method_options = z.object({
  acss_debit: s_invoice_payment_method_options_acss_debit.nullable(),
  bancontact: s_invoice_payment_method_options_bancontact.nullable(),
  card: s_subscription_payment_method_options_card.nullable(),
  customer_balance:
    s_invoice_payment_method_options_customer_balance.nullable(),
  konbini: s_invoice_payment_method_options_konbini.nullable(),
  us_bank_account: s_invoice_payment_method_options_us_bank_account.nullable(),
})

export const s_tax_calculation = z.object({
  amount_total: z.coerce.number(),
  currency: z.coerce.string(),
  customer: z.coerce.string().optional().nullable(),
  customer_details: s_tax_product_resource_customer_details,
  expires_at: z.coerce.number().optional().nullable(),
  id: z.coerce.string().optional().nullable(),
  line_items: z
    .object({
      data: z.array(s_tax_calculation_line_item),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    })
    .optional()
    .nullable(),
  livemode: z.coerce.boolean(),
  object: z.enum(["tax.calculation"]),
  shipping_cost: s_tax_product_resource_shipping_cost.nullable(),
  tax_amount_exclusive: z.coerce.number(),
  tax_amount_inclusive: z.coerce.number(),
  tax_breakdown: z.array(s_tax_product_resource_tax_breakdown),
  tax_date: z.coerce.number(),
})

export const s_treasury_financial_account_features = z.object({
  card_issuing: s_treasury_financial_accounts_resource_toggle_settings,
  deposit_insurance: s_treasury_financial_accounts_resource_toggle_settings,
  financial_addresses:
    s_treasury_financial_accounts_resource_financial_addresses_features,
  inbound_transfers: s_treasury_financial_accounts_resource_inbound_transfers,
  intra_stripe_flows: s_treasury_financial_accounts_resource_toggle_settings,
  object: z.enum(["treasury.financial_account_features"]),
  outbound_payments: s_treasury_financial_accounts_resource_outbound_payments,
  outbound_transfers: s_treasury_financial_accounts_resource_outbound_transfers,
})

export const s_billing_portal_session = z.object({
  configuration: z.union([z.coerce.string(), s_billing_portal_configuration]),
  created: z.coerce.number(),
  customer: z.coerce.string(),
  flow: s_portal_flows_flow.nullable(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  locale: z
    .enum([
      "auto",
      "bg",
      "cs",
      "da",
      "de",
      "el",
      "en",
      "en-AU",
      "en-CA",
      "en-GB",
      "en-IE",
      "en-IN",
      "en-NZ",
      "en-SG",
      "es",
      "es-419",
      "et",
      "fi",
      "fil",
      "fr",
      "fr-CA",
      "hr",
      "hu",
      "id",
      "it",
      "ja",
      "ko",
      "lt",
      "lv",
      "ms",
      "mt",
      "nb",
      "nl",
      "pl",
      "pt",
      "pt-BR",
      "ro",
      "ru",
      "sk",
      "sl",
      "sv",
      "th",
      "tr",
      "vi",
      "zh",
      "zh-HK",
      "zh-TW",
    ])
    .optional()
    .nullable(),
  object: z.enum(["billing_portal.session"]),
  on_behalf_of: z.coerce.string().optional().nullable(),
  return_url: z.coerce.string().optional().nullable(),
  url: z.coerce.string(),
})

export const s_invoices_payment_settings = z.object({
  default_mandate: z.coerce.string().optional().nullable(),
  payment_method_options: s_invoices_payment_method_options.nullable(),
  payment_method_types: z
    .array(
      z.enum([
        "ach_credit_transfer",
        "ach_debit",
        "acss_debit",
        "au_becs_debit",
        "bacs_debit",
        "bancontact",
        "boleto",
        "card",
        "cashapp",
        "customer_balance",
        "fpx",
        "giropay",
        "grabpay",
        "ideal",
        "konbini",
        "link",
        "paynow",
        "promptpay",
        "sepa_debit",
        "sofort",
        "us_bank_account",
        "wechat_pay",
      ])
    )
    .optional()
    .nullable(),
})

export const s_source_mandate_notification = z.object({
  acss_debit: s_source_mandate_notification_acss_debit_data,
  amount: z.coerce.number().optional().nullable(),
  bacs_debit: s_source_mandate_notification_bacs_debit_data,
  created: z.coerce.number(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["source_mandate_notification"]),
  reason: z.coerce.string(),
  sepa_debit: s_source_mandate_notification_sepa_debit_data,
  source: s_source,
  status: z.coerce.string(),
  type: z.coerce.string(),
})

export const s_subscriptions_resource_payment_settings = z.object({
  payment_method_options:
    s_subscriptions_resource_payment_method_options.nullable(),
  payment_method_types: z
    .array(
      z.enum([
        "ach_credit_transfer",
        "ach_debit",
        "acss_debit",
        "au_becs_debit",
        "bacs_debit",
        "bancontact",
        "boleto",
        "card",
        "cashapp",
        "customer_balance",
        "fpx",
        "giropay",
        "grabpay",
        "ideal",
        "konbini",
        "link",
        "paynow",
        "promptpay",
        "sepa_debit",
        "sofort",
        "us_bank_account",
        "wechat_pay",
      ])
    )
    .optional()
    .nullable(),
  save_default_payment_method: z
    .enum(["off", "on_subscription"])
    .optional()
    .nullable(),
})

export const s_treasury_financial_account = z.object({
  active_features: z
    .array(
      z.enum([
        "card_issuing",
        "deposit_insurance",
        "financial_addresses.aba",
        "inbound_transfers.ach",
        "intra_stripe_flows",
        "outbound_payments.ach",
        "outbound_payments.us_domestic_wire",
        "outbound_transfers.ach",
        "outbound_transfers.us_domestic_wire",
        "remote_deposit_capture",
      ])
    )
    .optional(),
  balance: s_treasury_financial_accounts_resource_balance,
  country: z.coerce.string(),
  created: z.coerce.number(),
  features: s_treasury_financial_account_features,
  financial_addresses: z.array(
    s_treasury_financial_accounts_resource_financial_address
  ),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional().nullable(),
  object: z.enum(["treasury.financial_account"]),
  pending_features: z
    .array(
      z.enum([
        "card_issuing",
        "deposit_insurance",
        "financial_addresses.aba",
        "inbound_transfers.ach",
        "intra_stripe_flows",
        "outbound_payments.ach",
        "outbound_payments.us_domestic_wire",
        "outbound_transfers.ach",
        "outbound_transfers.us_domestic_wire",
        "remote_deposit_capture",
      ])
    )
    .optional(),
  platform_restrictions:
    s_treasury_financial_accounts_resource_platform_restrictions.nullable(),
  restricted_features: z
    .array(
      z.enum([
        "card_issuing",
        "deposit_insurance",
        "financial_addresses.aba",
        "inbound_transfers.ach",
        "intra_stripe_flows",
        "outbound_payments.ach",
        "outbound_payments.us_domestic_wire",
        "outbound_transfers.ach",
        "outbound_transfers.us_domestic_wire",
        "remote_deposit_capture",
      ])
    )
    .optional(),
  status: z.enum(["closed", "open"]),
  status_details: s_treasury_financial_accounts_resource_status_details,
  supported_currencies: z.array(z.coerce.string()),
})

export const s_account: z.ZodType<t_account> = z.object({
  business_profile: s_account_business_profile.nullable(),
  business_type: z
    .enum(["company", "government_entity", "individual", "non_profit"])
    .optional()
    .nullable(),
  capabilities: s_account_capabilities,
  charges_enabled: z.coerce.boolean().optional(),
  company: z.lazy(() => s_legal_entity_company),
  controller: s_account_unification_account_controller,
  country: z.coerce.string().optional(),
  created: z.coerce.number().optional(),
  default_currency: z.coerce.string().optional(),
  details_submitted: z.coerce.boolean().optional(),
  email: z.coerce.string().optional().nullable(),
  external_accounts: z
    .object({
      data: z.array(
        z.union([z.lazy(() => s_bank_account), z.lazy(() => s_card)])
      ),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    })
    .optional(),
  future_requirements: s_account_future_requirements,
  id: z.coerce.string(),
  individual: z.lazy(() => s_person),
  metadata: z.object({}).optional(),
  object: z.enum(["account"]),
  payouts_enabled: z.coerce.boolean().optional(),
  requirements: s_account_requirements,
  settings: z.lazy(() => s_account_settings).nullable(),
  tos_acceptance: s_account_tos_acceptance,
  type: z.enum(["custom", "express", "standard"]).optional(),
})

export const s_error: z.ZodType<t_error> = z.object({
  error: z.lazy(() => s_api_errors),
})

export const s_external_account: z.ZodType<t_external_account> = z.union([
  z.lazy(() => s_bank_account),
  z.lazy(() => s_card),
])

export const s_capability: z.ZodType<t_capability> = z.object({
  account: z.union([z.coerce.string(), z.lazy(() => s_account)]),
  future_requirements: s_account_capability_future_requirements,
  id: z.coerce.string(),
  object: z.enum(["capability"]),
  requested: z.coerce.boolean(),
  requested_at: z.coerce.number().optional().nullable(),
  requirements: s_account_capability_requirements,
  status: z.enum(["active", "disabled", "inactive", "pending", "unrequested"]),
})

export const s_bank_account: z.ZodType<t_bank_account> = z.object({
  account: z.union([z.coerce.string(), z.lazy(() => s_account)]).nullable(),
  account_holder_name: z.coerce.string().optional().nullable(),
  account_holder_type: z.coerce.string().optional().nullable(),
  account_type: z.coerce.string().optional().nullable(),
  available_payout_methods: z
    .array(z.enum(["instant", "standard"]))
    .optional()
    .nullable(),
  bank_name: z.coerce.string().optional().nullable(),
  country: z.coerce.string(),
  currency: z.coerce.string(),
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  default_for_currency: z.coerce.boolean().optional().nullable(),
  fingerprint: z.coerce.string().optional().nullable(),
  future_requirements: s_external_account_requirements.nullable(),
  id: z.coerce.string(),
  last4: z.coerce.string(),
  metadata: z.object({}).optional().nullable(),
  object: z.enum(["bank_account"]),
  requirements: s_external_account_requirements.nullable(),
  routing_number: z.coerce.string().optional().nullable(),
  status: z.coerce.string(),
})

export const s_card: z.ZodType<t_card> = z.object({
  account: z.union([z.coerce.string(), z.lazy(() => s_account)]).nullable(),
  address_city: z.coerce.string().optional().nullable(),
  address_country: z.coerce.string().optional().nullable(),
  address_line1: z.coerce.string().optional().nullable(),
  address_line1_check: z.coerce.string().optional().nullable(),
  address_line2: z.coerce.string().optional().nullable(),
  address_state: z.coerce.string().optional().nullable(),
  address_zip: z.coerce.string().optional().nullable(),
  address_zip_check: z.coerce.string().optional().nullable(),
  available_payout_methods: z
    .array(z.enum(["instant", "standard"]))
    .optional()
    .nullable(),
  brand: z.coerce.string(),
  country: z.coerce.string().optional().nullable(),
  currency: z.coerce.string().optional().nullable(),
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  cvc_check: z.coerce.string().optional().nullable(),
  default_for_currency: z.coerce.boolean().optional().nullable(),
  dynamic_last4: z.coerce.string().optional().nullable(),
  exp_month: z.coerce.number(),
  exp_year: z.coerce.number(),
  fingerprint: z.coerce.string().optional().nullable(),
  funding: z.coerce.string(),
  id: z.coerce.string(),
  last4: z.coerce.string(),
  metadata: z.object({}).optional().nullable(),
  name: z.coerce.string().optional().nullable(),
  object: z.enum(["card"]),
  status: z.coerce.string().optional().nullable(),
  tokenization_method: z.coerce.string().optional().nullable(),
})

export const s_person: z.ZodType<t_person> = z.object({
  account: z.coerce.string(),
  address: s_address,
  address_kana: s_legal_entity_japan_address.nullable(),
  address_kanji: s_legal_entity_japan_address.nullable(),
  created: z.coerce.number(),
  dob: s_legal_entity_dob,
  email: z.coerce.string().optional().nullable(),
  first_name: z.coerce.string().optional().nullable(),
  first_name_kana: z.coerce.string().optional().nullable(),
  first_name_kanji: z.coerce.string().optional().nullable(),
  full_name_aliases: z.array(z.coerce.string()).optional(),
  future_requirements: s_person_future_requirements.nullable(),
  gender: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  id_number_provided: z.coerce.boolean().optional(),
  id_number_secondary_provided: z.coerce.boolean().optional(),
  last_name: z.coerce.string().optional().nullable(),
  last_name_kana: z.coerce.string().optional().nullable(),
  last_name_kanji: z.coerce.string().optional().nullable(),
  maiden_name: z.coerce.string().optional().nullable(),
  metadata: z.object({}).optional(),
  nationality: z.coerce.string().optional().nullable(),
  object: z.enum(["person"]),
  phone: z.coerce.string().optional().nullable(),
  political_exposure: z.enum(["existing", "none"]).optional(),
  registered_address: s_address,
  relationship: s_person_relationship,
  requirements: s_person_requirements.nullable(),
  ssn_last_4_provided: z.coerce.boolean().optional(),
  verification: z.lazy(() => s_legal_entity_person_verification),
})

export const s_application_fee: z.ZodType<t_application_fee> = z.object({
  account: z.union([z.coerce.string(), z.lazy(() => s_account)]),
  amount: z.coerce.number(),
  amount_refunded: z.coerce.number(),
  application: z.union([z.coerce.string(), s_application]),
  balance_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_balance_transaction)])
    .nullable(),
  charge: z.union([z.coerce.string(), z.lazy(() => s_charge)]),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["application_fee"]),
  originating_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_charge)])
    .nullable(),
  refunded: z.coerce.boolean(),
  refunds: z.object({
    data: z.array(z.lazy(() => s_fee_refund)),
    has_more: z.coerce.boolean(),
    object: z.enum(["list"]),
    url: z.coerce.string(),
  }),
})

export const s_fee_refund: z.ZodType<t_fee_refund> = z.object({
  amount: z.coerce.number(),
  balance_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_balance_transaction)])
    .nullable(),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  fee: z.union([z.coerce.string(), z.lazy(() => s_application_fee)]),
  id: z.coerce.string(),
  metadata: z.object({}).optional().nullable(),
  object: z.enum(["fee_refund"]),
})

export const s_balance_transaction: z.ZodType<t_balance_transaction> = z.object(
  {
    amount: z.coerce.number(),
    available_on: z.coerce.number(),
    created: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string().optional().nullable(),
    exchange_rate: z.coerce.number().optional().nullable(),
    fee: z.coerce.number(),
    fee_details: z.array(s_fee),
    id: z.coerce.string(),
    net: z.coerce.number(),
    object: z.enum(["balance_transaction"]),
    reporting_category: z.coerce.string(),
    source: z
      .union([
        z.coerce.string(),
        z.lazy(() => s_application_fee),
        z.lazy(() => s_charge),
        z.lazy(() => s_connect_collection_transfer),
        z.lazy(() => s_dispute),
        z.lazy(() => s_fee_refund),
        z.lazy(() => s_issuing_authorization),
        z.lazy(() => s_issuing_dispute),
        z.lazy(() => s_issuing_transaction),
        z.lazy(() => s_payout),
        s_platform_tax_fee,
        z.lazy(() => s_refund),
        s_reserve_transaction,
        s_tax_deducted_at_source,
        z.lazy(() => s_topup),
        z.lazy(() => s_transfer),
        z.lazy(() => s_transfer_reversal),
      ])
      .nullable(),
    status: z.coerce.string(),
    type: z.enum([
      "adjustment",
      "advance",
      "advance_funding",
      "anticipation_repayment",
      "application_fee",
      "application_fee_refund",
      "charge",
      "connect_collection_transfer",
      "contribution",
      "issuing_authorization_hold",
      "issuing_authorization_release",
      "issuing_dispute",
      "issuing_transaction",
      "payment",
      "payment_failure_refund",
      "payment_refund",
      "payout",
      "payout_cancel",
      "payout_failure",
      "refund",
      "refund_failure",
      "reserve_transaction",
      "reserved_funds",
      "stripe_fee",
      "stripe_fx_fee",
      "tax_fee",
      "topup",
      "topup_reversal",
      "transfer",
      "transfer_cancel",
      "transfer_failure",
      "transfer_refund",
    ]),
  }
)

export const s_charge: z.ZodType<t_charge> = z.object({
  amount: z.coerce.number(),
  amount_captured: z.coerce.number(),
  amount_refunded: z.coerce.number(),
  application: z.union([z.coerce.string(), s_application]).nullable(),
  application_fee: z
    .union([z.coerce.string(), z.lazy(() => s_application_fee)])
    .nullable(),
  application_fee_amount: z.coerce.number().optional().nullable(),
  balance_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_balance_transaction)])
    .nullable(),
  billing_details: s_billing_details,
  calculated_statement_descriptor: z.coerce.string().optional().nullable(),
  captured: z.coerce.boolean(),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  description: z.coerce.string().optional().nullable(),
  disputed: z.coerce.boolean(),
  failure_balance_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_balance_transaction)])
    .nullable(),
  failure_code: z.coerce.string().optional().nullable(),
  failure_message: z.coerce.string().optional().nullable(),
  fraud_details: s_charge_fraud_details.nullable(),
  id: z.coerce.string(),
  invoice: z.union([z.coerce.string(), z.lazy(() => s_invoice)]).nullable(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["charge"]),
  on_behalf_of: z
    .union([z.coerce.string(), z.lazy(() => s_account)])
    .nullable(),
  outcome: s_charge_outcome.nullable(),
  paid: z.coerce.boolean(),
  payment_intent: z
    .union([z.coerce.string(), z.lazy(() => s_payment_intent)])
    .nullable(),
  payment_method: z.coerce.string().optional().nullable(),
  payment_method_details: z.lazy(() => s_payment_method_details).nullable(),
  radar_options: s_radar_radar_options,
  receipt_email: z.coerce.string().optional().nullable(),
  receipt_number: z.coerce.string().optional().nullable(),
  receipt_url: z.coerce.string().optional().nullable(),
  refunded: z.coerce.boolean(),
  refunds: z
    .object({
      data: z.array(z.lazy(() => s_refund)),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    })
    .optional()
    .nullable(),
  review: z.union([z.coerce.string(), z.lazy(() => s_review)]).nullable(),
  shipping: s_shipping.nullable(),
  source_transfer: z
    .union([z.coerce.string(), z.lazy(() => s_transfer)])
    .nullable(),
  statement_descriptor: z.coerce.string().optional().nullable(),
  statement_descriptor_suffix: z.coerce.string().optional().nullable(),
  status: z.enum(["failed", "pending", "succeeded"]),
  transfer: z.union([z.coerce.string(), z.lazy(() => s_transfer)]),
  transfer_data: z.lazy(() => s_charge_transfer_data).nullable(),
  transfer_group: z.coerce.string().optional().nullable(),
})

export const s_dispute: z.ZodType<t_dispute> = z.object({
  amount: z.coerce.number(),
  balance_transactions: z.array(z.lazy(() => s_balance_transaction)),
  charge: z.union([z.coerce.string(), z.lazy(() => s_charge)]),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  evidence: z.lazy(() => s_dispute_evidence),
  evidence_details: s_dispute_evidence_details,
  id: z.coerce.string(),
  is_charge_refundable: z.coerce.boolean(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["dispute"]),
  payment_intent: z
    .union([z.coerce.string(), z.lazy(() => s_payment_intent)])
    .nullable(),
  reason: z.coerce.string(),
  status: z.enum([
    "charge_refunded",
    "lost",
    "needs_response",
    "under_review",
    "warning_closed",
    "warning_needs_response",
    "warning_under_review",
    "won",
  ]),
})

export const s_refund: z.ZodType<t_refund> = z.object({
  amount: z.coerce.number(),
  balance_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_balance_transaction)])
    .nullable(),
  charge: z.union([z.coerce.string(), z.lazy(() => s_charge)]).nullable(),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  description: z.coerce.string().optional(),
  failure_balance_transaction: z.union([
    z.coerce.string(),
    z.lazy(() => s_balance_transaction),
  ]),
  failure_reason: z.coerce.string().optional(),
  id: z.coerce.string(),
  instructions_email: z.coerce.string().optional(),
  metadata: z.object({}).optional().nullable(),
  next_action: s_refund_next_action,
  object: z.enum(["refund"]),
  payment_intent: z
    .union([z.coerce.string(), z.lazy(() => s_payment_intent)])
    .nullable(),
  reason: z
    .enum([
      "duplicate",
      "expired_uncaptured_charge",
      "fraudulent",
      "requested_by_customer",
    ])
    .optional()
    .nullable(),
  receipt_number: z.coerce.string().optional().nullable(),
  source_transfer_reversal: z
    .union([z.coerce.string(), z.lazy(() => s_transfer_reversal)])
    .nullable(),
  status: z.coerce.string().optional().nullable(),
  transfer_reversal: z
    .union([z.coerce.string(), z.lazy(() => s_transfer_reversal)])
    .nullable(),
})

export const s_checkout_session: z.ZodType<t_checkout_session> = z.object({
  after_expiration:
    s_payment_pages_checkout_session_after_expiration.nullable(),
  allow_promotion_codes: z.coerce.boolean().optional().nullable(),
  amount_subtotal: z.coerce.number().optional().nullable(),
  amount_total: z.coerce.number().optional().nullable(),
  automatic_tax: s_payment_pages_checkout_session_automatic_tax,
  billing_address_collection: z
    .enum(["auto", "required"])
    .optional()
    .nullable(),
  cancel_url: z.coerce.string().optional().nullable(),
  client_reference_id: z.coerce.string().optional().nullable(),
  consent: s_payment_pages_checkout_session_consent.nullable(),
  consent_collection:
    s_payment_pages_checkout_session_consent_collection.nullable(),
  created: z.coerce.number(),
  currency: z.coerce.string().optional().nullable(),
  currency_conversion:
    s_payment_pages_checkout_session_currency_conversion.nullable(),
  custom_fields: z.array(s_payment_pages_checkout_session_custom_fields),
  custom_text: s_payment_pages_checkout_session_custom_text,
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  customer_creation: z.enum(["always", "if_required"]).optional().nullable(),
  customer_details:
    s_payment_pages_checkout_session_customer_details.nullable(),
  customer_email: z.coerce.string().optional().nullable(),
  expires_at: z.coerce.number(),
  id: z.coerce.string(),
  invoice: z.union([z.coerce.string(), z.lazy(() => s_invoice)]).nullable(),
  invoice_creation: z
    .lazy(() => s_payment_pages_checkout_session_invoice_creation)
    .nullable(),
  line_items: z
    .object({
      data: z.array(z.lazy(() => s_item)),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    })
    .optional(),
  livemode: z.coerce.boolean(),
  locale: z
    .enum([
      "auto",
      "bg",
      "cs",
      "da",
      "de",
      "el",
      "en",
      "en-GB",
      "es",
      "es-419",
      "et",
      "fi",
      "fil",
      "fr",
      "fr-CA",
      "hr",
      "hu",
      "id",
      "it",
      "ja",
      "ko",
      "lt",
      "lv",
      "ms",
      "mt",
      "nb",
      "nl",
      "pl",
      "pt",
      "pt-BR",
      "ro",
      "ru",
      "sk",
      "sl",
      "sv",
      "th",
      "tr",
      "vi",
      "zh",
      "zh-HK",
      "zh-TW",
    ])
    .optional()
    .nullable(),
  metadata: z.object({}).optional().nullable(),
  mode: z.enum(["payment", "setup", "subscription"]),
  object: z.enum(["checkout.session"]),
  payment_intent: z
    .union([z.coerce.string(), z.lazy(() => s_payment_intent)])
    .nullable(),
  payment_link: z
    .union([z.coerce.string(), z.lazy(() => s_payment_link)])
    .nullable(),
  payment_method_collection: z
    .enum(["always", "if_required"])
    .optional()
    .nullable(),
  payment_method_options: s_checkout_session_payment_method_options.nullable(),
  payment_method_types: z.array(z.coerce.string()),
  payment_status: z.enum(["no_payment_required", "paid", "unpaid"]),
  phone_number_collection:
    s_payment_pages_checkout_session_phone_number_collection,
  recovered_from: z.coerce.string().optional().nullable(),
  setup_intent: z
    .union([z.coerce.string(), z.lazy(() => s_setup_intent)])
    .nullable(),
  shipping_address_collection:
    s_payment_pages_checkout_session_shipping_address_collection.nullable(),
  shipping_cost: s_payment_pages_checkout_session_shipping_cost.nullable(),
  shipping_details: s_shipping.nullable(),
  shipping_options: z.array(s_payment_pages_checkout_session_shipping_option),
  status: z.enum(["complete", "expired", "open"]).optional().nullable(),
  submit_type: z.enum(["auto", "book", "donate", "pay"]).optional().nullable(),
  subscription: z
    .union([z.coerce.string(), z.lazy(() => s_subscription)])
    .nullable(),
  success_url: z.coerce.string(),
  tax_id_collection: s_payment_pages_checkout_session_tax_id_collection,
  total_details: z
    .lazy(() => s_payment_pages_checkout_session_total_details)
    .nullable(),
  url: z.coerce.string().optional().nullable(),
})

export const s_item: z.ZodType<t_item> = z.object({
  amount_discount: z.coerce.number(),
  amount_subtotal: z.coerce.number(),
  amount_tax: z.coerce.number(),
  amount_total: z.coerce.number(),
  currency: z.coerce.string(),
  description: z.coerce.string(),
  discounts: z.array(z.lazy(() => s_line_items_discount_amount)).optional(),
  id: z.coerce.string(),
  object: z.enum(["item"]),
  price: z.lazy(() => s_price).nullable(),
  quantity: z.coerce.number().optional().nullable(),
  taxes: z.array(s_line_items_tax_amount).optional(),
})

export const s_credit_note: z.ZodType<t_credit_note> = z.object({
  amount: z.coerce.number(),
  amount_shipping: z.coerce.number(),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  customer: z.union([
    z.coerce.string(),
    z.lazy(() => s_customer),
    s_deleted_customer,
  ]),
  customer_balance_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_customer_balance_transaction)])
    .nullable(),
  discount_amount: z.coerce.number(),
  discount_amounts: z.array(z.lazy(() => s_discounts_resource_discount_amount)),
  id: z.coerce.string(),
  invoice: z.union([z.coerce.string(), z.lazy(() => s_invoice)]),
  lines: z.object({
    data: z.array(z.lazy(() => s_credit_note_line_item)),
    has_more: z.coerce.boolean(),
    object: z.enum(["list"]),
    url: z.coerce.string(),
  }),
  livemode: z.coerce.boolean(),
  memo: z.coerce.string().optional().nullable(),
  metadata: z.object({}).optional().nullable(),
  number: z.coerce.string(),
  object: z.enum(["credit_note"]),
  out_of_band_amount: z.coerce.number().optional().nullable(),
  pdf: z.coerce.string(),
  reason: z
    .enum(["duplicate", "fraudulent", "order_change", "product_unsatisfactory"])
    .optional()
    .nullable(),
  refund: z.union([z.coerce.string(), z.lazy(() => s_refund)]).nullable(),
  shipping_cost: s_invoices_shipping_cost.nullable(),
  status: z.enum(["issued", "void"]),
  subtotal: z.coerce.number(),
  subtotal_excluding_tax: z.coerce.number().optional().nullable(),
  tax_amounts: z.array(s_credit_note_tax_amount),
  total: z.coerce.number(),
  total_excluding_tax: z.coerce.number().optional().nullable(),
  type: z.enum(["post_payment", "pre_payment"]),
  voided_at: z.coerce.number().optional().nullable(),
})

export const s_credit_note_line_item: z.ZodType<t_credit_note_line_item> =
  z.object({
    amount: z.coerce.number(),
    amount_excluding_tax: z.coerce.number().optional().nullable(),
    description: z.coerce.string().optional().nullable(),
    discount_amount: z.coerce.number(),
    discount_amounts: z.array(
      z.lazy(() => s_discounts_resource_discount_amount)
    ),
    id: z.coerce.string(),
    invoice_line_item: z.coerce.string().optional(),
    livemode: z.coerce.boolean(),
    object: z.enum(["credit_note_line_item"]),
    quantity: z.coerce.number().optional().nullable(),
    tax_amounts: z.array(s_credit_note_tax_amount),
    tax_rates: z.array(s_tax_rate),
    type: z.enum(["custom_line_item", "invoice_line_item"]),
    unit_amount: z.coerce.number().optional().nullable(),
    unit_amount_decimal: z.coerce.string().optional().nullable(),
    unit_amount_excluding_tax: z.coerce.string().optional().nullable(),
  })

export const s_customer: z.ZodType<t_customer> = z.object({
  address: s_address.nullable(),
  balance: z.coerce.number().optional(),
  cash_balance: s_cash_balance.nullable(),
  created: z.coerce.number(),
  currency: z.coerce.string().optional().nullable(),
  default_source: z
    .union([
      z.coerce.string(),
      z.lazy(() => s_bank_account),
      z.lazy(() => s_card),
      s_source,
    ])
    .nullable(),
  delinquent: z.coerce.boolean().optional().nullable(),
  description: z.coerce.string().optional().nullable(),
  discount: z.lazy(() => s_discount).nullable(),
  email: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  invoice_credit_balance: z.object({}).optional(),
  invoice_prefix: z.coerce.string().optional().nullable(),
  invoice_settings: z.lazy(() => s_invoice_setting_customer_setting),
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional(),
  name: z.coerce.string().optional().nullable(),
  next_invoice_sequence: z.coerce.number().optional(),
  object: z.enum(["customer"]),
  phone: z.coerce.string().optional().nullable(),
  preferred_locales: z.array(z.coerce.string()).optional().nullable(),
  shipping: s_shipping.nullable(),
  sources: z
    .object({
      data: z.array(
        z.union([z.lazy(() => s_bank_account), z.lazy(() => s_card), s_source])
      ),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    })
    .optional(),
  subscriptions: z
    .object({
      data: z.array(z.lazy(() => s_subscription)),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    })
    .optional(),
  tax: s_customer_tax,
  tax_exempt: z.enum(["exempt", "none", "reverse"]).optional().nullable(),
  tax_ids: z
    .object({
      data: z.array(z.lazy(() => s_tax_id)),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    })
    .optional(),
  test_clock: z
    .union([z.coerce.string(), s_test_helpers_test_clock])
    .nullable(),
})

export const s_customer_balance_transaction: z.ZodType<t_customer_balance_transaction> =
  z.object({
    amount: z.coerce.number(),
    created: z.coerce.number(),
    credit_note: z
      .union([z.coerce.string(), z.lazy(() => s_credit_note)])
      .nullable(),
    currency: z.coerce.string(),
    customer: z.union([z.coerce.string(), z.lazy(() => s_customer)]),
    description: z.coerce.string().optional().nullable(),
    ending_balance: z.coerce.number(),
    id: z.coerce.string(),
    invoice: z.union([z.coerce.string(), z.lazy(() => s_invoice)]).nullable(),
    livemode: z.coerce.boolean(),
    metadata: z.object({}).optional().nullable(),
    object: z.enum(["customer_balance_transaction"]),
    type: z.enum([
      "adjustment",
      "applied_to_invoice",
      "credit_note",
      "initial",
      "invoice_overpaid",
      "invoice_too_large",
      "invoice_too_small",
      "migration",
      "unapplied_from_invoice",
      "unspent_receiver_credit",
    ]),
  })

export const s_payment_source: z.ZodType<t_payment_source> = z.union([
  z.lazy(() => s_account),
  z.lazy(() => s_bank_account),
  z.lazy(() => s_card),
  s_source,
])

export const s_customer_cash_balance_transaction: z.ZodType<t_customer_cash_balance_transaction> =
  z.object({
    applied_to_payment: z.lazy(
      () =>
        s_customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction
    ),
    created: z.coerce.number(),
    currency: z.coerce.string(),
    customer: z.union([z.coerce.string(), z.lazy(() => s_customer)]),
    ending_balance: z.coerce.number(),
    funded:
      s_customer_balance_resource_cash_balance_transaction_resource_funded_transaction,
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    net_amount: z.coerce.number(),
    object: z.enum(["customer_cash_balance_transaction"]),
    refunded_from_payment: z.lazy(
      () =>
        s_customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction
    ),
    type: z.enum([
      "applied_to_payment",
      "funded",
      "funding_reversed",
      "refunded_from_payment",
      "return_canceled",
      "return_initiated",
      "unapplied_from_payment",
    ]),
    unapplied_from_payment: z.lazy(
      () =>
        s_customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction
    ),
  })

export const s_deleted_discount: z.ZodType<t_deleted_discount> = z.object({
  checkout_session: z.coerce.string().optional().nullable(),
  coupon: s_coupon,
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  deleted: z.coerce.boolean(),
  id: z.coerce.string(),
  invoice: z.coerce.string().optional().nullable(),
  invoice_item: z.coerce.string().optional().nullable(),
  object: z.enum(["discount"]),
  promotion_code: z
    .union([z.coerce.string(), z.lazy(() => s_promotion_code)])
    .nullable(),
  start: z.coerce.number(),
  subscription: z.coerce.string().optional().nullable(),
})

export const s_discount: z.ZodType<t_discount> = z.object({
  checkout_session: z.coerce.string().optional().nullable(),
  coupon: s_coupon,
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  end: z.coerce.number().optional().nullable(),
  id: z.coerce.string(),
  invoice: z.coerce.string().optional().nullable(),
  invoice_item: z.coerce.string().optional().nullable(),
  object: z.enum(["discount"]),
  promotion_code: z
    .union([z.coerce.string(), z.lazy(() => s_promotion_code)])
    .nullable(),
  start: z.coerce.number(),
  subscription: z.coerce.string().optional().nullable(),
})

export const s_payment_method: z.ZodType<t_payment_method> = z.object({
  acss_debit: s_payment_method_acss_debit,
  affirm: s_payment_method_affirm,
  afterpay_clearpay: s_payment_method_afterpay_clearpay,
  alipay: s_payment_flows_private_payment_methods_alipay,
  au_becs_debit: s_payment_method_au_becs_debit,
  bacs_debit: s_payment_method_bacs_debit,
  bancontact: s_payment_method_bancontact,
  billing_details: s_billing_details,
  blik: s_payment_method_blik,
  boleto: s_payment_method_boleto,
  card: z.lazy(() => s_payment_method_card),
  card_present: s_payment_method_card_present,
  cashapp: s_payment_method_cashapp,
  created: z.coerce.number(),
  customer: z.union([z.coerce.string(), z.lazy(() => s_customer)]).nullable(),
  customer_balance: s_payment_method_customer_balance,
  eps: s_payment_method_eps,
  fpx: s_payment_method_fpx,
  giropay: s_payment_method_giropay,
  grabpay: s_payment_method_grabpay,
  id: z.coerce.string(),
  ideal: s_payment_method_ideal,
  interac_present: s_payment_method_interac_present,
  klarna: s_payment_method_klarna,
  konbini: s_payment_method_konbini,
  link: s_payment_method_link,
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional().nullable(),
  object: z.enum(["payment_method"]),
  oxxo: s_payment_method_oxxo,
  p24: s_payment_method_p24,
  paynow: s_payment_method_paynow,
  pix: s_payment_method_pix,
  promptpay: s_payment_method_promptpay,
  radar_options: s_radar_radar_options,
  sepa_debit: z.lazy(() => s_payment_method_sepa_debit),
  sofort: s_payment_method_sofort,
  type: z.enum([
    "acss_debit",
    "affirm",
    "afterpay_clearpay",
    "alipay",
    "au_becs_debit",
    "bacs_debit",
    "bancontact",
    "blik",
    "boleto",
    "card",
    "card_present",
    "cashapp",
    "customer_balance",
    "eps",
    "fpx",
    "giropay",
    "grabpay",
    "ideal",
    "interac_present",
    "klarna",
    "konbini",
    "link",
    "oxxo",
    "p24",
    "paynow",
    "pix",
    "promptpay",
    "sepa_debit",
    "sofort",
    "us_bank_account",
    "wechat_pay",
  ]),
  us_bank_account: s_payment_method_us_bank_account,
  wechat_pay: s_payment_method_wechat_pay,
})

export const s_subscription: z.ZodType<t_subscription> = z.object({
  application: z
    .union([z.coerce.string(), s_application, s_deleted_application])
    .nullable(),
  application_fee_percent: z.coerce.number().optional().nullable(),
  automatic_tax: s_subscription_automatic_tax,
  billing_cycle_anchor: z.coerce.number(),
  billing_thresholds: s_subscription_billing_thresholds.nullable(),
  cancel_at: z.coerce.number().optional().nullable(),
  cancel_at_period_end: z.coerce.boolean(),
  canceled_at: z.coerce.number().optional().nullable(),
  cancellation_details: s_cancellation_details.nullable(),
  collection_method: z.enum(["charge_automatically", "send_invoice"]),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  current_period_end: z.coerce.number(),
  current_period_start: z.coerce.number(),
  customer: z.union([
    z.coerce.string(),
    z.lazy(() => s_customer),
    s_deleted_customer,
  ]),
  days_until_due: z.coerce.number().optional().nullable(),
  default_payment_method: z
    .union([z.coerce.string(), z.lazy(() => s_payment_method)])
    .nullable(),
  default_source: z
    .union([
      z.coerce.string(),
      z.lazy(() => s_bank_account),
      z.lazy(() => s_card),
      s_source,
    ])
    .nullable(),
  default_tax_rates: z.array(s_tax_rate).optional().nullable(),
  description: z.coerce.string().optional().nullable(),
  discount: z.lazy(() => s_discount).nullable(),
  ended_at: z.coerce.number().optional().nullable(),
  id: z.coerce.string(),
  items: z.object({
    data: z.array(z.lazy(() => s_subscription_item)),
    has_more: z.coerce.boolean(),
    object: z.enum(["list"]),
    url: z.coerce.string(),
  }),
  latest_invoice: z
    .union([z.coerce.string(), z.lazy(() => s_invoice)])
    .nullable(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  next_pending_invoice_item_invoice: z.coerce.number().optional().nullable(),
  object: z.enum(["subscription"]),
  on_behalf_of: z
    .union([z.coerce.string(), z.lazy(() => s_account)])
    .nullable(),
  pause_collection: s_subscriptions_resource_pause_collection.nullable(),
  payment_settings: s_subscriptions_resource_payment_settings.nullable(),
  pending_invoice_item_interval:
    s_subscription_pending_invoice_item_interval.nullable(),
  pending_setup_intent: z
    .union([z.coerce.string(), z.lazy(() => s_setup_intent)])
    .nullable(),
  pending_update: z
    .lazy(() => s_subscriptions_resource_pending_update)
    .nullable(),
  schedule: z
    .union([z.coerce.string(), z.lazy(() => s_subscription_schedule)])
    .nullable(),
  start_date: z.coerce.number(),
  status: z.enum([
    "active",
    "canceled",
    "incomplete",
    "incomplete_expired",
    "past_due",
    "paused",
    "trialing",
    "unpaid",
  ]),
  test_clock: z
    .union([z.coerce.string(), s_test_helpers_test_clock])
    .nullable(),
  transfer_data: z.lazy(() => s_subscription_transfer_data).nullable(),
  trial_end: z.coerce.number().optional().nullable(),
  trial_settings: s_subscriptions_trials_resource_trial_settings.nullable(),
  trial_start: z.coerce.number().optional().nullable(),
})

export const s_tax_id: z.ZodType<t_tax_id> = z.object({
  country: z.coerce.string().optional().nullable(),
  created: z.coerce.number(),
  customer: z.union([z.coerce.string(), z.lazy(() => s_customer)]).nullable(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["tax_id"]),
  type: z.enum([
    "ae_trn",
    "au_abn",
    "au_arn",
    "bg_uic",
    "br_cnpj",
    "br_cpf",
    "ca_bn",
    "ca_gst_hst",
    "ca_pst_bc",
    "ca_pst_mb",
    "ca_pst_sk",
    "ca_qst",
    "ch_vat",
    "cl_tin",
    "eg_tin",
    "es_cif",
    "eu_oss_vat",
    "eu_vat",
    "gb_vat",
    "ge_vat",
    "hk_br",
    "hu_tin",
    "id_npwp",
    "il_vat",
    "in_gst",
    "is_vat",
    "jp_cn",
    "jp_rn",
    "jp_trn",
    "ke_pin",
    "kr_brn",
    "li_uid",
    "mx_rfc",
    "my_frp",
    "my_itn",
    "my_sst",
    "no_vat",
    "nz_gst",
    "ph_tin",
    "ru_inn",
    "ru_kpp",
    "sa_vat",
    "sg_gst",
    "sg_uen",
    "si_tin",
    "th_vat",
    "tr_tin",
    "tw_vat",
    "ua_vat",
    "unknown",
    "us_ein",
    "za_vat",
  ]),
  value: z.coerce.string(),
  verification: s_tax_id_verification.nullable(),
})

export const s_file_link: z.ZodType<t_file_link> = z.object({
  created: z.coerce.number(),
  expired: z.coerce.boolean(),
  expires_at: z.coerce.number().optional().nullable(),
  file: z.union([z.coerce.string(), z.lazy(() => s_file)]),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["file_link"]),
  url: z.coerce.string().optional().nullable(),
})

export const s_file: z.ZodType<t_file> = z.object({
  created: z.coerce.number(),
  expires_at: z.coerce.number().optional().nullable(),
  filename: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  links: z
    .object({
      data: z.array(z.lazy(() => s_file_link)),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    })
    .optional()
    .nullable(),
  object: z.enum(["file"]),
  purpose: z.enum([
    "account_requirement",
    "additional_verification",
    "business_icon",
    "business_logo",
    "customer_signature",
    "dispute_evidence",
    "document_provider_identity_document",
    "finance_report_run",
    "identity_document",
    "identity_document_downloadable",
    "pci_document",
    "selfie",
    "sigma_scheduled_query",
    "tax_document_user_upload",
    "terminal_reader_splashscreen",
  ]),
  size: z.coerce.number(),
  title: z.coerce.string().optional().nullable(),
  type: z.coerce.string().optional().nullable(),
  url: z.coerce.string().optional().nullable(),
})

export const s_financial_connections_account: z.ZodType<t_financial_connections_account> =
  z.object({
    account_holder: z
      .lazy(() => s_bank_connections_resource_accountholder)
      .nullable(),
    balance: s_bank_connections_resource_balance.nullable(),
    balance_refresh: s_bank_connections_resource_balance_refresh.nullable(),
    category: z.enum(["cash", "credit", "investment", "other"]),
    created: z.coerce.number(),
    display_name: z.coerce.string().optional().nullable(),
    id: z.coerce.string(),
    institution_name: z.coerce.string(),
    last4: z.coerce.string().optional().nullable(),
    livemode: z.coerce.boolean(),
    object: z.enum(["financial_connections.account"]),
    ownership: z
      .union([z.coerce.string(), s_financial_connections_account_ownership])
      .nullable(),
    ownership_refresh: s_bank_connections_resource_ownership_refresh.nullable(),
    permissions: z
      .array(
        z.enum(["balances", "ownership", "payment_method", "transactions"])
      )
      .optional()
      .nullable(),
    status: z.enum(["active", "disconnected", "inactive"]),
    subcategory: z.enum([
      "checking",
      "credit_card",
      "line_of_credit",
      "mortgage",
      "other",
      "savings",
    ]),
    supported_payment_method_types: z.array(
      z.enum(["link", "us_bank_account"])
    ),
  })

export const s_financial_connections_session: z.ZodType<t_financial_connections_session> =
  z.object({
    account_holder: z
      .lazy(() => s_bank_connections_resource_accountholder)
      .nullable(),
    accounts: z.object({
      data: z.array(z.lazy(() => s_financial_connections_account)),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    }),
    client_secret: z.coerce.string(),
    filters: s_bank_connections_resource_link_account_session_filters,
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    object: z.enum(["financial_connections.session"]),
    permissions: z.array(
      z.enum(["balances", "ownership", "payment_method", "transactions"])
    ),
    return_url: z.coerce.string().optional(),
  })

export const s_invoiceitem: z.ZodType<t_invoiceitem> = z.object({
  amount: z.coerce.number(),
  currency: z.coerce.string(),
  customer: z.union([
    z.coerce.string(),
    z.lazy(() => s_customer),
    s_deleted_customer,
  ]),
  date: z.coerce.number(),
  description: z.coerce.string().optional().nullable(),
  discountable: z.coerce.boolean(),
  discounts: z
    .array(z.union([z.coerce.string(), z.lazy(() => s_discount)]))
    .optional()
    .nullable(),
  id: z.coerce.string(),
  invoice: z.union([z.coerce.string(), z.lazy(() => s_invoice)]).nullable(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional().nullable(),
  object: z.enum(["invoiceitem"]),
  period: s_invoice_line_item_period,
  price: z.lazy(() => s_price).nullable(),
  proration: z.coerce.boolean(),
  quantity: z.coerce.number(),
  subscription: z
    .union([z.coerce.string(), z.lazy(() => s_subscription)])
    .nullable(),
  subscription_item: z.coerce.string().optional(),
  tax_rates: z.array(s_tax_rate).optional().nullable(),
  test_clock: z
    .union([z.coerce.string(), s_test_helpers_test_clock])
    .nullable(),
  unit_amount: z.coerce.number().optional().nullable(),
  unit_amount_decimal: z.coerce.string().optional().nullable(),
})

export const s_invoice: z.ZodType<t_invoice> = z.object({
  account_country: z.coerce.string().optional().nullable(),
  account_name: z.coerce.string().optional().nullable(),
  account_tax_ids: z
    .array(
      z.union([z.coerce.string(), z.lazy(() => s_tax_id), s_deleted_tax_id])
    )
    .optional()
    .nullable(),
  amount_due: z.coerce.number(),
  amount_paid: z.coerce.number(),
  amount_remaining: z.coerce.number(),
  amount_shipping: z.coerce.number(),
  application: z
    .union([z.coerce.string(), s_application, s_deleted_application])
    .nullable(),
  application_fee_amount: z.coerce.number().optional().nullable(),
  attempt_count: z.coerce.number(),
  attempted: z.coerce.boolean(),
  auto_advance: z.coerce.boolean().optional(),
  automatic_tax: s_automatic_tax,
  billing_reason: z
    .enum([
      "automatic_pending_invoice_item_invoice",
      "manual",
      "quote_accept",
      "subscription",
      "subscription_create",
      "subscription_cycle",
      "subscription_threshold",
      "subscription_update",
      "upcoming",
    ])
    .optional()
    .nullable(),
  charge: z.union([z.coerce.string(), z.lazy(() => s_charge)]).nullable(),
  collection_method: z.enum(["charge_automatically", "send_invoice"]),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  custom_fields: z.array(s_invoice_setting_custom_field).optional().nullable(),
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  customer_address: s_address.nullable(),
  customer_email: z.coerce.string().optional().nullable(),
  customer_name: z.coerce.string().optional().nullable(),
  customer_phone: z.coerce.string().optional().nullable(),
  customer_shipping: s_shipping.nullable(),
  customer_tax_exempt: z
    .enum(["exempt", "none", "reverse"])
    .optional()
    .nullable(),
  customer_tax_ids: z
    .array(s_invoices_resource_invoice_tax_id)
    .optional()
    .nullable(),
  default_payment_method: z
    .union([z.coerce.string(), z.lazy(() => s_payment_method)])
    .nullable(),
  default_source: z
    .union([
      z.coerce.string(),
      z.lazy(() => s_bank_account),
      z.lazy(() => s_card),
      s_source,
    ])
    .nullable(),
  default_tax_rates: z.array(s_tax_rate),
  description: z.coerce.string().optional().nullable(),
  discount: z.lazy(() => s_discount).nullable(),
  discounts: z
    .array(
      z.union([
        z.coerce.string(),
        z.lazy(() => s_discount),
        z.lazy(() => s_deleted_discount),
      ])
    )
    .optional()
    .nullable(),
  due_date: z.coerce.number().optional().nullable(),
  ending_balance: z.coerce.number().optional().nullable(),
  footer: z.coerce.string().optional().nullable(),
  from_invoice: z.lazy(() => s_invoices_from_invoice).nullable(),
  hosted_invoice_url: z.coerce.string().optional().nullable(),
  id: z.coerce.string().optional(),
  invoice_pdf: z.coerce.string().optional().nullable(),
  last_finalization_error: z.lazy(() => s_api_errors).nullable(),
  latest_revision: z
    .union([z.coerce.string(), z.lazy(() => s_invoice)])
    .nullable(),
  lines: z.object({
    data: z.array(z.lazy(() => s_line_item)),
    has_more: z.coerce.boolean(),
    object: z.enum(["list"]),
    url: z.coerce.string(),
  }),
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional().nullable(),
  next_payment_attempt: z.coerce.number().optional().nullable(),
  number: z.coerce.string().optional().nullable(),
  object: z.enum(["invoice"]),
  on_behalf_of: z
    .union([z.coerce.string(), z.lazy(() => s_account)])
    .nullable(),
  paid: z.coerce.boolean(),
  paid_out_of_band: z.coerce.boolean(),
  payment_intent: z
    .union([z.coerce.string(), z.lazy(() => s_payment_intent)])
    .nullable(),
  payment_settings: s_invoices_payment_settings,
  period_end: z.coerce.number(),
  period_start: z.coerce.number(),
  post_payment_credit_notes_amount: z.coerce.number(),
  pre_payment_credit_notes_amount: z.coerce.number(),
  quote: z.union([z.coerce.string(), z.lazy(() => s_quote)]).nullable(),
  receipt_number: z.coerce.string().optional().nullable(),
  rendering_options: s_invoice_setting_rendering_options.nullable(),
  shipping_cost: s_invoices_shipping_cost.nullable(),
  shipping_details: s_shipping.nullable(),
  starting_balance: z.coerce.number(),
  statement_descriptor: z.coerce.string().optional().nullable(),
  status: z
    .enum(["draft", "open", "paid", "uncollectible", "void"])
    .optional()
    .nullable(),
  status_transitions: s_invoices_status_transitions,
  subscription: z
    .union([z.coerce.string(), z.lazy(() => s_subscription)])
    .nullable(),
  subscription_proration_date: z.coerce.number().optional(),
  subtotal: z.coerce.number(),
  subtotal_excluding_tax: z.coerce.number().optional().nullable(),
  tax: z.coerce.number().optional().nullable(),
  test_clock: z
    .union([z.coerce.string(), s_test_helpers_test_clock])
    .nullable(),
  threshold_reason: s_invoice_threshold_reason,
  total: z.coerce.number(),
  total_discount_amounts: z
    .array(z.lazy(() => s_discounts_resource_discount_amount))
    .optional()
    .nullable(),
  total_excluding_tax: z.coerce.number().optional().nullable(),
  total_tax_amounts: z.array(s_invoice_tax_amount),
  transfer_data: z.lazy(() => s_invoice_transfer_data).nullable(),
  webhooks_delivered_at: z.coerce.number().optional().nullable(),
})

export const s_line_item: z.ZodType<t_line_item> = z.object({
  amount: z.coerce.number(),
  amount_excluding_tax: z.coerce.number().optional().nullable(),
  currency: z.coerce.string(),
  description: z.coerce.string().optional().nullable(),
  discount_amounts: z
    .array(z.lazy(() => s_discounts_resource_discount_amount))
    .optional()
    .nullable(),
  discountable: z.coerce.boolean(),
  discounts: z
    .array(z.union([z.coerce.string(), z.lazy(() => s_discount)]))
    .optional()
    .nullable(),
  id: z.coerce.string(),
  invoice_item: z.coerce.string().optional(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["line_item"]),
  period: s_invoice_line_item_period,
  price: z.lazy(() => s_price).nullable(),
  proration: z.coerce.boolean(),
  proration_details: s_invoices_line_items_proration_details.nullable(),
  quantity: z.coerce.number().optional().nullable(),
  subscription: z.coerce.string().optional().nullable(),
  subscription_item: z.coerce.string().optional(),
  tax_amounts: z.array(s_invoice_tax_amount).optional(),
  tax_rates: z.array(s_tax_rate).optional(),
  type: z.enum(["invoiceitem", "subscription"]),
  unit_amount_excluding_tax: z.coerce.string().optional().nullable(),
})

export const s_issuing_authorization: z.ZodType<t_issuing_authorization> =
  z.object({
    amount: z.coerce.number(),
    amount_details: s_issuing_authorization_amount_details.nullable(),
    approved: z.coerce.boolean(),
    authorization_method: z.enum([
      "chip",
      "contactless",
      "keyed_in",
      "online",
      "swipe",
    ]),
    balance_transactions: z.array(z.lazy(() => s_balance_transaction)),
    card: z.lazy(() => s_issuing_card),
    cardholder: z
      .union([z.coerce.string(), z.lazy(() => s_issuing_cardholder)])
      .nullable(),
    created: z.coerce.number(),
    currency: z.coerce.string(),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    merchant_amount: z.coerce.number(),
    merchant_currency: z.coerce.string(),
    merchant_data: s_issuing_authorization_merchant_data,
    metadata: z.object({}),
    network_data: s_issuing_authorization_network_data.nullable(),
    object: z.enum(["issuing.authorization"]),
    pending_request: s_issuing_authorization_pending_request.nullable(),
    request_history: z.array(s_issuing_authorization_request),
    status: z.enum(["closed", "pending", "reversed"]),
    transactions: z.array(z.lazy(() => s_issuing_transaction)),
    treasury: s_issuing_authorization_treasury.nullable(),
    verification_data: s_issuing_authorization_verification_data,
    wallet: z.coerce.string().optional().nullable(),
  })

export const s_issuing_cardholder: z.ZodType<t_issuing_cardholder> = z.object({
  billing: s_issuing_cardholder_address,
  company: s_issuing_cardholder_company.nullable(),
  created: z.coerce.number(),
  email: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  individual: z.lazy(() => s_issuing_cardholder_individual).nullable(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  name: z.coerce.string(),
  object: z.enum(["issuing.cardholder"]),
  phone_number: z.coerce.string().optional().nullable(),
  requirements: s_issuing_cardholder_requirements,
  spending_controls: s_issuing_cardholder_authorization_controls.nullable(),
  status: z.enum(["active", "blocked", "inactive"]),
  type: z.enum(["company", "individual"]),
})

export const s_issuing_card: z.ZodType<t_issuing_card> = z.object({
  brand: z.coerce.string(),
  cancellation_reason: z
    .enum(["design_rejected", "lost", "stolen"])
    .optional()
    .nullable(),
  cardholder: z.lazy(() => s_issuing_cardholder),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  cvc: z.coerce.string().optional(),
  exp_month: z.coerce.number(),
  exp_year: z.coerce.number(),
  financial_account: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  last4: z.coerce.string(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  number: z.coerce.string().optional(),
  object: z.enum(["issuing.card"]),
  replaced_by: z
    .union([z.coerce.string(), z.lazy(() => s_issuing_card)])
    .nullable(),
  replacement_for: z
    .union([z.coerce.string(), z.lazy(() => s_issuing_card)])
    .nullable(),
  replacement_reason: z
    .enum(["damaged", "expired", "lost", "stolen"])
    .optional()
    .nullable(),
  shipping: s_issuing_card_shipping.nullable(),
  spending_controls: s_issuing_card_authorization_controls,
  status: z.enum(["active", "canceled", "inactive"]),
  type: z.enum(["physical", "virtual"]),
  wallets: s_issuing_card_wallets.nullable(),
})

export const s_issuing_dispute: z.ZodType<t_issuing_dispute> = z.object({
  amount: z.coerce.number(),
  balance_transactions: z
    .array(z.lazy(() => s_balance_transaction))
    .optional()
    .nullable(),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  evidence: z.lazy(() => s_issuing_dispute_evidence),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["issuing.dispute"]),
  status: z.enum(["expired", "lost", "submitted", "unsubmitted", "won"]),
  transaction: z.union([
    z.coerce.string(),
    z.lazy(() => s_issuing_transaction),
  ]),
  treasury: s_issuing_dispute_treasury.nullable(),
})

export const s_issuing_transaction: z.ZodType<t_issuing_transaction> = z.object(
  {
    amount: z.coerce.number(),
    amount_details: s_issuing_transaction_amount_details.nullable(),
    authorization: z
      .union([z.coerce.string(), z.lazy(() => s_issuing_authorization)])
      .nullable(),
    balance_transaction: z
      .union([z.coerce.string(), z.lazy(() => s_balance_transaction)])
      .nullable(),
    card: z.union([z.coerce.string(), z.lazy(() => s_issuing_card)]),
    cardholder: z
      .union([z.coerce.string(), z.lazy(() => s_issuing_cardholder)])
      .nullable(),
    created: z.coerce.number(),
    currency: z.coerce.string(),
    dispute: z
      .union([z.coerce.string(), z.lazy(() => s_issuing_dispute)])
      .nullable(),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    merchant_amount: z.coerce.number(),
    merchant_currency: z.coerce.string(),
    merchant_data: s_issuing_authorization_merchant_data,
    metadata: z.object({}),
    object: z.enum(["issuing.transaction"]),
    purchase_details: s_issuing_transaction_purchase_details.nullable(),
    treasury: s_issuing_transaction_treasury.nullable(),
    type: z.enum(["capture", "refund"]),
    wallet: z
      .enum(["apple_pay", "google_pay", "samsung_pay"])
      .optional()
      .nullable(),
  }
)

export const s_mandate: z.ZodType<t_mandate> = z.object({
  customer_acceptance: s_customer_acceptance,
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  multi_use: s_mandate_multi_use,
  object: z.enum(["mandate"]),
  payment_method: z.union([z.coerce.string(), z.lazy(() => s_payment_method)]),
  payment_method_details: s_mandate_payment_method_details,
  single_use: s_mandate_single_use,
  status: z.enum(["active", "inactive", "pending"]),
  type: z.enum(["multi_use", "single_use"]),
})

export const s_payment_intent: z.ZodType<t_payment_intent> = z.object({
  amount: z.coerce.number(),
  amount_capturable: z.coerce.number().optional(),
  amount_details: s_payment_flows_amount_details,
  amount_received: z.coerce.number().optional(),
  application: z.union([z.coerce.string(), s_application]).nullable(),
  application_fee_amount: z.coerce.number().optional().nullable(),
  automatic_payment_methods:
    s_payment_flows_automatic_payment_methods_payment_intent.nullable(),
  canceled_at: z.coerce.number().optional().nullable(),
  cancellation_reason: z
    .enum([
      "abandoned",
      "automatic",
      "duplicate",
      "failed_invoice",
      "fraudulent",
      "requested_by_customer",
      "void_invoice",
    ])
    .optional()
    .nullable(),
  capture_method: z.enum(["automatic", "automatic_async", "manual"]),
  client_secret: z.coerce.string().optional().nullable(),
  confirmation_method: z.enum(["automatic", "manual"]),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  description: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  invoice: z.union([z.coerce.string(), z.lazy(() => s_invoice)]).nullable(),
  last_payment_error: z.lazy(() => s_api_errors).nullable(),
  latest_charge: z
    .union([z.coerce.string(), z.lazy(() => s_charge)])
    .nullable(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional(),
  next_action: s_payment_intent_next_action.nullable(),
  object: z.enum(["payment_intent"]),
  on_behalf_of: z
    .union([z.coerce.string(), z.lazy(() => s_account)])
    .nullable(),
  payment_method: z
    .union([z.coerce.string(), z.lazy(() => s_payment_method)])
    .nullable(),
  payment_method_options: s_payment_intent_payment_method_options.nullable(),
  payment_method_types: z.array(z.coerce.string()),
  processing: s_payment_intent_processing.nullable(),
  receipt_email: z.coerce.string().optional().nullable(),
  review: z.union([z.coerce.string(), z.lazy(() => s_review)]).nullable(),
  setup_future_usage: z
    .enum(["off_session", "on_session"])
    .optional()
    .nullable(),
  shipping: s_shipping.nullable(),
  statement_descriptor: z.coerce.string().optional().nullable(),
  statement_descriptor_suffix: z.coerce.string().optional().nullable(),
  status: z.enum([
    "canceled",
    "processing",
    "requires_action",
    "requires_capture",
    "requires_confirmation",
    "requires_payment_method",
    "succeeded",
  ]),
  transfer_data: z.lazy(() => s_transfer_data).nullable(),
  transfer_group: z.coerce.string().optional().nullable(),
})

export const s_payment_link: z.ZodType<t_payment_link> = z.object({
  active: z.coerce.boolean(),
  after_completion: s_payment_links_resource_after_completion,
  allow_promotion_codes: z.coerce.boolean(),
  application_fee_amount: z.coerce.number().optional().nullable(),
  application_fee_percent: z.coerce.number().optional().nullable(),
  automatic_tax: s_payment_links_resource_automatic_tax,
  billing_address_collection: z.enum(["auto", "required"]),
  consent_collection: s_payment_links_resource_consent_collection.nullable(),
  currency: z.coerce.string(),
  custom_fields: z.array(s_payment_links_resource_custom_fields),
  custom_text: s_payment_links_resource_custom_text,
  customer_creation: z.enum(["always", "if_required"]),
  id: z.coerce.string(),
  invoice_creation: z
    .lazy(() => s_payment_links_resource_invoice_creation)
    .nullable(),
  line_items: z
    .object({
      data: z.array(z.lazy(() => s_item)),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    })
    .optional(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["payment_link"]),
  on_behalf_of: z
    .union([z.coerce.string(), z.lazy(() => s_account)])
    .nullable(),
  payment_intent_data: s_payment_links_resource_payment_intent_data.nullable(),
  payment_method_collection: z.enum(["always", "if_required"]),
  payment_method_types: z
    .array(
      z.enum([
        "affirm",
        "afterpay_clearpay",
        "alipay",
        "au_becs_debit",
        "bacs_debit",
        "bancontact",
        "blik",
        "boleto",
        "card",
        "cashapp",
        "eps",
        "fpx",
        "giropay",
        "grabpay",
        "ideal",
        "klarna",
        "konbini",
        "link",
        "oxxo",
        "p24",
        "paynow",
        "pix",
        "promptpay",
        "sepa_debit",
        "sofort",
        "us_bank_account",
        "wechat_pay",
      ])
    )
    .optional()
    .nullable(),
  phone_number_collection: s_payment_links_resource_phone_number_collection,
  shipping_address_collection:
    s_payment_links_resource_shipping_address_collection.nullable(),
  shipping_options: z.array(s_payment_links_resource_shipping_option),
  submit_type: z.enum(["auto", "book", "donate", "pay"]),
  subscription_data: s_payment_links_resource_subscription_data.nullable(),
  tax_id_collection: s_payment_links_resource_tax_id_collection,
  transfer_data: z
    .lazy(() => s_payment_links_resource_transfer_data)
    .nullable(),
  url: z.coerce.string(),
})

export const s_payout: z.ZodType<t_payout> = z.object({
  amount: z.coerce.number(),
  arrival_date: z.coerce.number(),
  automatic: z.coerce.boolean(),
  balance_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_balance_transaction)])
    .nullable(),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  description: z.coerce.string().optional().nullable(),
  destination: z
    .union([
      z.coerce.string(),
      z.lazy(() => s_bank_account),
      z.lazy(() => s_card),
      s_deleted_bank_account,
      s_deleted_card,
    ])
    .nullable(),
  failure_balance_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_balance_transaction)])
    .nullable(),
  failure_code: z.coerce.string().optional().nullable(),
  failure_message: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional().nullable(),
  method: z.coerce.string(),
  object: z.enum(["payout"]),
  original_payout: z
    .union([z.coerce.string(), z.lazy(() => s_payout)])
    .nullable(),
  reconciliation_status: z.enum(["completed", "in_progress", "not_applicable"]),
  reversed_by: z.union([z.coerce.string(), z.lazy(() => s_payout)]).nullable(),
  source_type: z.coerce.string(),
  statement_descriptor: z.coerce.string().optional().nullable(),
  status: z.coerce.string(),
  type: z.enum(["bank_account", "card"]),
})

export const s_plan: z.ZodType<t_plan> = z.object({
  active: z.coerce.boolean(),
  aggregate_usage: z
    .enum(["last_during_period", "last_ever", "max", "sum"])
    .optional()
    .nullable(),
  amount: z.coerce.number().optional().nullable(),
  amount_decimal: z.coerce.string().optional().nullable(),
  billing_scheme: z.enum(["per_unit", "tiered"]),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  id: z.coerce.string(),
  interval: z.enum(["day", "month", "week", "year"]),
  interval_count: z.coerce.number(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}).optional().nullable(),
  nickname: z.coerce.string().optional().nullable(),
  object: z.enum(["plan"]),
  product: z
    .union([z.coerce.string(), z.lazy(() => s_product), s_deleted_product])
    .nullable(),
  tiers: z.array(s_plan_tier).optional(),
  tiers_mode: z.enum(["graduated", "volume"]).optional().nullable(),
  transform_usage: s_transform_usage.nullable(),
  trial_period_days: z.coerce.number().optional().nullable(),
  usage_type: z.enum(["licensed", "metered"]),
})

export const s_price: z.ZodType<t_price> = z.object({
  active: z.coerce.boolean(),
  billing_scheme: z.enum(["per_unit", "tiered"]),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  currency_options: z.object({}).optional(),
  custom_unit_amount: s_custom_unit_amount.nullable(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  lookup_key: z.coerce.string().optional().nullable(),
  metadata: z.object({}),
  nickname: z.coerce.string().optional().nullable(),
  object: z.enum(["price"]),
  product: z.union([
    z.coerce.string(),
    z.lazy(() => s_product),
    s_deleted_product,
  ]),
  recurring: s_recurring.nullable(),
  tax_behavior: z
    .enum(["exclusive", "inclusive", "unspecified"])
    .optional()
    .nullable(),
  tiers: z.array(s_price_tier).optional(),
  tiers_mode: z.enum(["graduated", "volume"]).optional().nullable(),
  transform_quantity: s_transform_quantity.nullable(),
  type: z.enum(["one_time", "recurring"]),
  unit_amount: z.coerce.number().optional().nullable(),
  unit_amount_decimal: z.coerce.string().optional().nullable(),
})

export const s_product: z.ZodType<t_product> = z.object({
  active: z.coerce.boolean(),
  created: z.coerce.number(),
  default_price: z.union([z.coerce.string(), z.lazy(() => s_price)]).nullable(),
  description: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  images: z.array(z.coerce.string()),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  name: z.coerce.string(),
  object: z.enum(["product"]),
  package_dimensions: s_package_dimensions.nullable(),
  shippable: z.coerce.boolean().optional().nullable(),
  statement_descriptor: z.coerce.string().optional().nullable(),
  tax_code: z.union([z.coerce.string(), s_tax_code]).nullable(),
  unit_label: z.coerce.string().optional().nullable(),
  updated: z.coerce.number(),
  url: z.coerce.string().optional().nullable(),
})

export const s_promotion_code: z.ZodType<t_promotion_code> = z.object({
  active: z.coerce.boolean(),
  code: z.coerce.string(),
  coupon: s_coupon,
  created: z.coerce.number(),
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  expires_at: z.coerce.number().optional().nullable(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  max_redemptions: z.coerce.number().optional().nullable(),
  metadata: z.object({}).optional().nullable(),
  object: z.enum(["promotion_code"]),
  restrictions: s_promotion_codes_resource_restrictions,
  times_redeemed: z.coerce.number(),
})

export const s_quote: z.ZodType<t_quote> = z.object({
  amount_subtotal: z.coerce.number(),
  amount_total: z.coerce.number(),
  application: z
    .union([z.coerce.string(), s_application, s_deleted_application])
    .nullable(),
  application_fee_amount: z.coerce.number().optional().nullable(),
  application_fee_percent: z.coerce.number().optional().nullable(),
  automatic_tax: s_quotes_resource_automatic_tax,
  collection_method: z.enum(["charge_automatically", "send_invoice"]),
  computed: z.lazy(() => s_quotes_resource_computed),
  created: z.coerce.number(),
  currency: z.coerce.string().optional().nullable(),
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  default_tax_rates: z
    .array(z.union([z.coerce.string(), s_tax_rate]))
    .optional(),
  description: z.coerce.string().optional().nullable(),
  discounts: z.array(z.union([z.coerce.string(), z.lazy(() => s_discount)])),
  expires_at: z.coerce.number(),
  footer: z.coerce.string().optional().nullable(),
  from_quote: z.lazy(() => s_quotes_resource_from_quote).nullable(),
  header: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  invoice: z
    .union([z.coerce.string(), z.lazy(() => s_invoice), s_deleted_invoice])
    .nullable(),
  invoice_settings: s_invoice_setting_quote_setting.nullable(),
  line_items: z
    .object({
      data: z.array(z.lazy(() => s_item)),
      has_more: z.coerce.boolean(),
      object: z.enum(["list"]),
      url: z.coerce.string(),
    })
    .optional(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  number: z.coerce.string().optional().nullable(),
  object: z.enum(["quote"]),
  on_behalf_of: z
    .union([z.coerce.string(), z.lazy(() => s_account)])
    .nullable(),
  status: z.enum(["accepted", "canceled", "draft", "open"]),
  status_transitions: s_quotes_resource_status_transitions,
  subscription: z
    .union([z.coerce.string(), z.lazy(() => s_subscription)])
    .nullable(),
  subscription_data: s_quotes_resource_subscription_data_subscription_data,
  subscription_schedule: z
    .union([z.coerce.string(), z.lazy(() => s_subscription_schedule)])
    .nullable(),
  test_clock: z
    .union([z.coerce.string(), s_test_helpers_test_clock])
    .nullable(),
  total_details: z.lazy(() => s_quotes_resource_total_details),
  transfer_data: z.lazy(() => s_quotes_resource_transfer_data).nullable(),
})

export const s_radar_early_fraud_warning: z.ZodType<t_radar_early_fraud_warning> =
  z.object({
    actionable: z.coerce.boolean(),
    charge: z.union([z.coerce.string(), z.lazy(() => s_charge)]),
    created: z.coerce.number(),
    fraud_type: z.coerce.string(),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    object: z.enum(["radar.early_fraud_warning"]),
    payment_intent: z.union([
      z.coerce.string(),
      z.lazy(() => s_payment_intent),
    ]),
  })

export const s_reporting_report_run: z.ZodType<t_reporting_report_run> =
  z.object({
    created: z.coerce.number(),
    error: z.coerce.string().optional().nullable(),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    object: z.enum(["reporting.report_run"]),
    parameters: s_financial_reporting_finance_report_run_run_parameters,
    report_type: z.coerce.string(),
    result: z.lazy(() => s_file).nullable(),
    status: z.coerce.string(),
    succeeded_at: z.coerce.number().optional().nullable(),
  })

export const s_review: z.ZodType<t_review> = z.object({
  billing_zip: z.coerce.string().optional().nullable(),
  charge: z.union([z.coerce.string(), z.lazy(() => s_charge)]).nullable(),
  closed_reason: z
    .enum(["approved", "disputed", "redacted", "refunded", "refunded_as_fraud"])
    .optional()
    .nullable(),
  created: z.coerce.number(),
  id: z.coerce.string(),
  ip_address: z.coerce.string().optional().nullable(),
  ip_address_location: s_radar_review_resource_location.nullable(),
  livemode: z.coerce.boolean(),
  object: z.enum(["review"]),
  open: z.coerce.boolean(),
  opened_reason: z.enum(["manual", "rule"]),
  payment_intent: z.union([z.coerce.string(), z.lazy(() => s_payment_intent)]),
  reason: z.coerce.string(),
  session: s_radar_review_resource_session.nullable(),
})

export const s_setup_attempt: z.ZodType<t_setup_attempt> = z.object({
  application: z.union([z.coerce.string(), s_application]).nullable(),
  attach_to_self: z.coerce.boolean().optional(),
  created: z.coerce.number(),
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  flow_directions: z
    .array(z.enum(["inbound", "outbound"]))
    .optional()
    .nullable(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["setup_attempt"]),
  on_behalf_of: z
    .union([z.coerce.string(), z.lazy(() => s_account)])
    .nullable(),
  payment_method: z.union([z.coerce.string(), z.lazy(() => s_payment_method)]),
  payment_method_details: z.lazy(() => s_setup_attempt_payment_method_details),
  setup_error: z.lazy(() => s_api_errors).nullable(),
  setup_intent: z.union([z.coerce.string(), z.lazy(() => s_setup_intent)]),
  status: z.coerce.string(),
  usage: z.coerce.string(),
})

export const s_setup_intent: z.ZodType<t_setup_intent> = z.object({
  application: z.union([z.coerce.string(), s_application]).nullable(),
  attach_to_self: z.coerce.boolean().optional(),
  automatic_payment_methods:
    s_payment_flows_automatic_payment_methods_setup_intent.nullable(),
  cancellation_reason: z
    .enum(["abandoned", "duplicate", "requested_by_customer"])
    .optional()
    .nullable(),
  client_secret: z.coerce.string().optional().nullable(),
  created: z.coerce.number(),
  customer: z
    .union([z.coerce.string(), z.lazy(() => s_customer), s_deleted_customer])
    .nullable(),
  description: z.coerce.string().optional().nullable(),
  flow_directions: z
    .array(z.enum(["inbound", "outbound"]))
    .optional()
    .nullable(),
  id: z.coerce.string(),
  last_setup_error: z.lazy(() => s_api_errors).nullable(),
  latest_attempt: z
    .union([z.coerce.string(), z.lazy(() => s_setup_attempt)])
    .nullable(),
  livemode: z.coerce.boolean(),
  mandate: z.union([z.coerce.string(), z.lazy(() => s_mandate)]).nullable(),
  metadata: z.object({}).optional().nullable(),
  next_action: s_setup_intent_next_action.nullable(),
  object: z.enum(["setup_intent"]),
  on_behalf_of: z
    .union([z.coerce.string(), z.lazy(() => s_account)])
    .nullable(),
  payment_method: z
    .union([z.coerce.string(), z.lazy(() => s_payment_method)])
    .nullable(),
  payment_method_options: s_setup_intent_payment_method_options.nullable(),
  payment_method_types: z.array(z.coerce.string()),
  single_use_mandate: z
    .union([z.coerce.string(), z.lazy(() => s_mandate)])
    .nullable(),
  status: z.enum([
    "canceled",
    "processing",
    "requires_action",
    "requires_confirmation",
    "requires_payment_method",
    "succeeded",
  ]),
  usage: z.coerce.string(),
})

export const s_scheduled_query_run: z.ZodType<t_scheduled_query_run> = z.object(
  {
    created: z.coerce.number(),
    data_load_time: z.coerce.number(),
    error: s_sigma_scheduled_query_run_error,
    file: z.lazy(() => s_file).nullable(),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    object: z.enum(["scheduled_query_run"]),
    result_available_until: z.coerce.number(),
    sql: z.coerce.string(),
    status: z.coerce.string(),
    title: z.coerce.string(),
  }
)

export const s_subscription_item: z.ZodType<t_subscription_item> = z.object({
  billing_thresholds: s_subscription_item_billing_thresholds.nullable(),
  created: z.coerce.number(),
  id: z.coerce.string(),
  metadata: z.object({}),
  object: z.enum(["subscription_item"]),
  price: z.lazy(() => s_price),
  quantity: z.coerce.number().optional(),
  subscription: z.coerce.string(),
  tax_rates: z.array(s_tax_rate).optional().nullable(),
})

export const s_subscription_schedule: z.ZodType<t_subscription_schedule> =
  z.object({
    application: z
      .union([z.coerce.string(), s_application, s_deleted_application])
      .nullable(),
    canceled_at: z.coerce.number().optional().nullable(),
    completed_at: z.coerce.number().optional().nullable(),
    created: z.coerce.number(),
    current_phase: s_subscription_schedule_current_phase.nullable(),
    customer: z.union([
      z.coerce.string(),
      z.lazy(() => s_customer),
      s_deleted_customer,
    ]),
    default_settings: z.lazy(
      () => s_subscription_schedules_resource_default_settings
    ),
    end_behavior: z.enum(["cancel", "none", "release", "renew"]),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    metadata: z.object({}).optional().nullable(),
    object: z.enum(["subscription_schedule"]),
    phases: z.array(z.lazy(() => s_subscription_schedule_phase_configuration)),
    released_at: z.coerce.number().optional().nullable(),
    released_subscription: z.coerce.string().optional().nullable(),
    status: z.enum([
      "active",
      "canceled",
      "completed",
      "not_started",
      "released",
    ]),
    subscription: z
      .union([z.coerce.string(), z.lazy(() => s_subscription)])
      .nullable(),
    test_clock: z
      .union([z.coerce.string(), s_test_helpers_test_clock])
      .nullable(),
  })

export const s_terminal_configuration: z.ZodType<t_terminal_configuration> =
  z.object({
    bbpos_wisepos_e: z.lazy(
      () =>
        s_terminal_configuration_configuration_resource_device_type_specific_config
    ),
    id: z.coerce.string(),
    is_account_default: z.coerce.boolean().optional().nullable(),
    livemode: z.coerce.boolean(),
    object: z.enum(["terminal.configuration"]),
    tipping: s_terminal_configuration_configuration_resource_tipping,
    verifone_p400: z.lazy(
      () =>
        s_terminal_configuration_configuration_resource_device_type_specific_config
    ),
  })

export const s_terminal_reader: z.ZodType<t_terminal_reader> = z.object({
  action: z
    .lazy(() => s_terminal_reader_reader_resource_reader_action)
    .nullable(),
  device_sw_version: z.coerce.string().optional().nullable(),
  device_type: z.enum([
    "bbpos_chipper2x",
    "bbpos_wisepad3",
    "bbpos_wisepos_e",
    "simulated_wisepos_e",
    "stripe_m2",
    "verifone_P400",
  ]),
  id: z.coerce.string(),
  ip_address: z.coerce.string().optional().nullable(),
  label: z.coerce.string(),
  livemode: z.coerce.boolean(),
  location: z.union([z.coerce.string(), s_terminal_location]).nullable(),
  metadata: z.object({}),
  object: z.enum(["terminal.reader"]),
  serial_number: z.coerce.string(),
  status: z.coerce.string().optional().nullable(),
})

export const s_treasury_inbound_transfer: z.ZodType<t_treasury_inbound_transfer> =
  z.object({
    amount: z.coerce.number(),
    cancelable: z.coerce.boolean(),
    created: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string().optional().nullable(),
    failure_details:
      s_treasury_inbound_transfers_resource_failure_details.nullable(),
    financial_account: z.coerce.string(),
    hosted_regulatory_receipt_url: z.coerce.string().optional().nullable(),
    id: z.coerce.string(),
    linked_flows:
      s_treasury_inbound_transfers_resource_inbound_transfer_resource_linked_flows,
    livemode: z.coerce.boolean(),
    metadata: z.object({}),
    object: z.enum(["treasury.inbound_transfer"]),
    origin_payment_method: z.coerce.string(),
    origin_payment_method_details: s_inbound_transfers.nullable(),
    returned: z.coerce.boolean().optional().nullable(),
    statement_descriptor: z.coerce.string(),
    status: z.enum(["canceled", "failed", "processing", "succeeded"]),
    status_transitions:
      s_treasury_inbound_transfers_resource_inbound_transfer_resource_status_transitions,
    transaction: z
      .union([z.coerce.string(), z.lazy(() => s_treasury_transaction)])
      .nullable(),
  })

export const s_treasury_outbound_payment: z.ZodType<t_treasury_outbound_payment> =
  z.object({
    amount: z.coerce.number(),
    cancelable: z.coerce.boolean(),
    created: z.coerce.number(),
    currency: z.coerce.string(),
    customer: z.coerce.string().optional().nullable(),
    description: z.coerce.string().optional().nullable(),
    destination_payment_method: z.coerce.string().optional().nullable(),
    destination_payment_method_details:
      s_outbound_payments_payment_method_details.nullable(),
    end_user_details:
      s_treasury_outbound_payments_resource_outbound_payment_resource_end_user_details.nullable(),
    expected_arrival_date: z.coerce.number(),
    financial_account: z.coerce.string(),
    hosted_regulatory_receipt_url: z.coerce.string().optional().nullable(),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    metadata: z.object({}),
    object: z.enum(["treasury.outbound_payment"]),
    returned_details: z
      .lazy(() => s_treasury_outbound_payments_resource_returned_status)
      .nullable(),
    statement_descriptor: z.coerce.string(),
    status: z.enum(["canceled", "failed", "posted", "processing", "returned"]),
    status_transitions:
      s_treasury_outbound_payments_resource_outbound_payment_resource_status_transitions,
    transaction: z.union([
      z.coerce.string(),
      z.lazy(() => s_treasury_transaction),
    ]),
  })

export const s_treasury_outbound_transfer: z.ZodType<t_treasury_outbound_transfer> =
  z.object({
    amount: z.coerce.number(),
    cancelable: z.coerce.boolean(),
    created: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string().optional().nullable(),
    destination_payment_method: z.coerce.string().optional().nullable(),
    destination_payment_method_details:
      s_outbound_transfers_payment_method_details,
    expected_arrival_date: z.coerce.number(),
    financial_account: z.coerce.string(),
    hosted_regulatory_receipt_url: z.coerce.string().optional().nullable(),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    metadata: z.object({}),
    object: z.enum(["treasury.outbound_transfer"]),
    returned_details: z
      .lazy(() => s_treasury_outbound_transfers_resource_returned_details)
      .nullable(),
    statement_descriptor: z.coerce.string(),
    status: z.enum(["canceled", "failed", "posted", "processing", "returned"]),
    status_transitions:
      s_treasury_outbound_transfers_resource_status_transitions,
    transaction: z.union([
      z.coerce.string(),
      z.lazy(() => s_treasury_transaction),
    ]),
  })

export const s_treasury_received_credit: z.ZodType<t_treasury_received_credit> =
  z.object({
    amount: z.coerce.number(),
    created: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string(),
    failure_code: z
      .enum(["account_closed", "account_frozen", "other"])
      .optional()
      .nullable(),
    financial_account: z.coerce.string().optional().nullable(),
    hosted_regulatory_receipt_url: z.coerce.string().optional().nullable(),
    id: z.coerce.string(),
    initiating_payment_method_details:
      s_treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details,
    linked_flows: z.lazy(
      () => s_treasury_received_credits_resource_linked_flows
    ),
    livemode: z.coerce.boolean(),
    network: z.enum(["ach", "card", "stripe", "us_domestic_wire"]),
    object: z.enum(["treasury.received_credit"]),
    reversal_details:
      s_treasury_received_credits_resource_reversal_details.nullable(),
    status: z.enum(["failed", "succeeded"]),
    transaction: z
      .union([z.coerce.string(), z.lazy(() => s_treasury_transaction)])
      .nullable(),
  })

export const s_treasury_received_debit: z.ZodType<t_treasury_received_debit> =
  z.object({
    amount: z.coerce.number(),
    created: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string(),
    failure_code: z
      .enum(["account_closed", "account_frozen", "insufficient_funds", "other"])
      .optional()
      .nullable(),
    financial_account: z.coerce.string().optional().nullable(),
    hosted_regulatory_receipt_url: z.coerce.string().optional().nullable(),
    id: z.coerce.string(),
    initiating_payment_method_details:
      s_treasury_shared_resource_initiating_payment_method_details_initiating_payment_method_details,
    linked_flows: s_treasury_received_debits_resource_linked_flows,
    livemode: z.coerce.boolean(),
    network: z.enum(["ach", "card", "stripe"]),
    object: z.enum(["treasury.received_debit"]),
    reversal_details:
      s_treasury_received_debits_resource_reversal_details.nullable(),
    status: z.enum(["failed", "succeeded"]),
    transaction: z
      .union([z.coerce.string(), z.lazy(() => s_treasury_transaction)])
      .nullable(),
  })

export const s_token: z.ZodType<t_token> = z.object({
  bank_account: z.lazy(() => s_bank_account),
  card: z.lazy(() => s_card),
  client_ip: z.coerce.string().optional().nullable(),
  created: z.coerce.number(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  object: z.enum(["token"]),
  type: z.coerce.string(),
  used: z.coerce.boolean(),
})

export const s_topup: z.ZodType<t_topup> = z.object({
  amount: z.coerce.number(),
  balance_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_balance_transaction)])
    .nullable(),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  description: z.coerce.string().optional().nullable(),
  expected_availability_date: z.coerce.number().optional().nullable(),
  failure_code: z.coerce.string().optional().nullable(),
  failure_message: z.coerce.string().optional().nullable(),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["topup"]),
  source: s_source.nullable(),
  statement_descriptor: z.coerce.string().optional().nullable(),
  status: z.enum(["canceled", "failed", "pending", "reversed", "succeeded"]),
  transfer_group: z.coerce.string().optional().nullable(),
})

export const s_transfer: z.ZodType<t_transfer> = z.object({
  amount: z.coerce.number(),
  amount_reversed: z.coerce.number(),
  balance_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_balance_transaction)])
    .nullable(),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  description: z.coerce.string().optional().nullable(),
  destination: z.union([z.coerce.string(), z.lazy(() => s_account)]).nullable(),
  destination_payment: z.union([z.coerce.string(), z.lazy(() => s_charge)]),
  id: z.coerce.string(),
  livemode: z.coerce.boolean(),
  metadata: z.object({}),
  object: z.enum(["transfer"]),
  reversals: z.object({
    data: z.array(z.lazy(() => s_transfer_reversal)),
    has_more: z.coerce.boolean(),
    object: z.enum(["list"]),
    url: z.coerce.string(),
  }),
  reversed: z.coerce.boolean(),
  source_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_charge)])
    .nullable(),
  source_type: z.coerce.string().optional(),
  transfer_group: z.coerce.string().optional().nullable(),
})

export const s_transfer_reversal: z.ZodType<t_transfer_reversal> = z.object({
  amount: z.coerce.number(),
  balance_transaction: z
    .union([z.coerce.string(), z.lazy(() => s_balance_transaction)])
    .nullable(),
  created: z.coerce.number(),
  currency: z.coerce.string(),
  destination_payment_refund: z
    .union([z.coerce.string(), z.lazy(() => s_refund)])
    .nullable(),
  id: z.coerce.string(),
  metadata: z.object({}).optional().nullable(),
  object: z.enum(["transfer_reversal"]),
  source_refund: z
    .union([z.coerce.string(), z.lazy(() => s_refund)])
    .nullable(),
  transfer: z.union([z.coerce.string(), z.lazy(() => s_transfer)]),
})

export const s_treasury_credit_reversal: z.ZodType<t_treasury_credit_reversal> =
  z.object({
    amount: z.coerce.number(),
    created: z.coerce.number(),
    currency: z.coerce.string(),
    financial_account: z.coerce.string(),
    hosted_regulatory_receipt_url: z.coerce.string().optional().nullable(),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    metadata: z.object({}),
    network: z.enum(["ach", "stripe"]),
    object: z.enum(["treasury.credit_reversal"]),
    received_credit: z.coerce.string(),
    status: z.enum(["canceled", "posted", "processing"]),
    status_transitions: s_treasury_received_credits_resource_status_transitions,
    transaction: z
      .union([z.coerce.string(), z.lazy(() => s_treasury_transaction)])
      .nullable(),
  })

export const s_treasury_debit_reversal: z.ZodType<t_treasury_debit_reversal> =
  z.object({
    amount: z.coerce.number(),
    created: z.coerce.number(),
    currency: z.coerce.string(),
    financial_account: z.coerce.string().optional().nullable(),
    hosted_regulatory_receipt_url: z.coerce.string().optional().nullable(),
    id: z.coerce.string(),
    linked_flows:
      s_treasury_received_debits_resource_debit_reversal_linked_flows.nullable(),
    livemode: z.coerce.boolean(),
    metadata: z.object({}),
    network: z.enum(["ach", "card"]),
    object: z.enum(["treasury.debit_reversal"]),
    received_debit: z.coerce.string(),
    status: z.enum(["failed", "processing", "succeeded"]),
    status_transitions: s_treasury_received_debits_resource_status_transitions,
    transaction: z
      .union([z.coerce.string(), z.lazy(() => s_treasury_transaction)])
      .nullable(),
  })

export const s_treasury_transaction_entry: z.ZodType<t_treasury_transaction_entry> =
  z.object({
    balance_impact: s_treasury_transactions_resource_balance_impact,
    created: z.coerce.number(),
    currency: z.coerce.string(),
    effective_at: z.coerce.number(),
    financial_account: z.coerce.string(),
    flow: z.coerce.string().optional().nullable(),
    flow_details: z
      .lazy(() => s_treasury_transactions_resource_flow_details)
      .nullable(),
    flow_type: z.enum([
      "credit_reversal",
      "debit_reversal",
      "inbound_transfer",
      "issuing_authorization",
      "other",
      "outbound_payment",
      "outbound_transfer",
      "received_credit",
      "received_debit",
    ]),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    object: z.enum(["treasury.transaction_entry"]),
    transaction: z.union([
      z.coerce.string(),
      z.lazy(() => s_treasury_transaction),
    ]),
    type: z.enum([
      "credit_reversal",
      "credit_reversal_posting",
      "debit_reversal",
      "inbound_transfer",
      "inbound_transfer_return",
      "issuing_authorization_hold",
      "issuing_authorization_release",
      "other",
      "outbound_payment",
      "outbound_payment_cancellation",
      "outbound_payment_failure",
      "outbound_payment_posting",
      "outbound_payment_return",
      "outbound_transfer",
      "outbound_transfer_cancellation",
      "outbound_transfer_failure",
      "outbound_transfer_posting",
      "outbound_transfer_return",
      "received_credit",
      "received_debit",
    ]),
  })

export const s_treasury_transaction: z.ZodType<t_treasury_transaction> =
  z.object({
    amount: z.coerce.number(),
    balance_impact: s_treasury_transactions_resource_balance_impact,
    created: z.coerce.number(),
    currency: z.coerce.string(),
    description: z.coerce.string(),
    entries: z
      .object({
        data: z.array(z.lazy(() => s_treasury_transaction_entry)),
        has_more: z.coerce.boolean(),
        object: z.enum(["list"]),
        url: z.coerce.string(),
      })
      .optional()
      .nullable(),
    financial_account: z.coerce.string(),
    flow: z.coerce.string().optional().nullable(),
    flow_details: z
      .lazy(() => s_treasury_transactions_resource_flow_details)
      .nullable(),
    flow_type: z.enum([
      "credit_reversal",
      "debit_reversal",
      "inbound_transfer",
      "issuing_authorization",
      "other",
      "outbound_payment",
      "outbound_transfer",
      "received_credit",
      "received_debit",
    ]),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    object: z.enum(["treasury.transaction"]),
    status: z.enum(["open", "posted", "void"]),
    status_transitions:
      s_treasury_transactions_resource_abstract_transaction_resource_status_transitions,
  })

export const s_legal_entity_company: z.ZodType<t_legal_entity_company> =
  z.object({
    address: s_address,
    address_kana: s_legal_entity_japan_address.nullable(),
    address_kanji: s_legal_entity_japan_address.nullable(),
    directors_provided: z.coerce.boolean().optional(),
    executives_provided: z.coerce.boolean().optional(),
    export_license_id: z.coerce.string().optional(),
    export_purpose_code: z.coerce.string().optional(),
    name: z.coerce.string().optional().nullable(),
    name_kana: z.coerce.string().optional().nullable(),
    name_kanji: z.coerce.string().optional().nullable(),
    owners_provided: z.coerce.boolean().optional(),
    ownership_declaration: s_legal_entity_ubo_declaration.nullable(),
    phone: z.coerce.string().optional().nullable(),
    structure: z
      .enum([
        "free_zone_establishment",
        "free_zone_llc",
        "government_instrumentality",
        "governmental_unit",
        "incorporated_non_profit",
        "limited_liability_partnership",
        "llc",
        "multi_member_llc",
        "private_company",
        "private_corporation",
        "private_partnership",
        "public_company",
        "public_corporation",
        "public_partnership",
        "single_member_llc",
        "sole_establishment",
        "sole_proprietorship",
        "tax_exempt_government_instrumentality",
        "unincorporated_association",
        "unincorporated_non_profit",
      ])
      .optional(),
    tax_id_provided: z.coerce.boolean().optional(),
    tax_id_registrar: z.coerce.string().optional(),
    vat_id_provided: z.coerce.boolean().optional(),
    verification: z.lazy(() => s_legal_entity_company_verification).nullable(),
  })

export const s_account_settings: z.ZodType<t_account_settings> = z.object({
  bacs_debit_payments: s_account_bacs_debit_payments_settings,
  branding: z.lazy(() => s_account_branding_settings),
  card_issuing: s_account_card_issuing_settings,
  card_payments: s_account_card_payments_settings,
  dashboard: s_account_dashboard_settings,
  payments: s_account_payments_settings,
  payouts: s_account_payout_settings,
  sepa_debit_payments: s_account_sepa_debit_payments_settings,
  treasury: s_account_treasury_settings,
})

export const s_api_errors: z.ZodType<t_api_errors> = z.object({
  charge: z.coerce.string().optional(),
  code: z.coerce.string().optional(),
  decline_code: z.coerce.string().optional(),
  doc_url: z.coerce.string().optional(),
  message: z.coerce.string().optional(),
  param: z.coerce.string().optional(),
  payment_intent: z.lazy(() => s_payment_intent),
  payment_method: z.lazy(() => s_payment_method),
  payment_method_type: z.coerce.string().optional(),
  request_log_url: z.coerce.string().optional(),
  setup_intent: z.lazy(() => s_setup_intent),
  source: z.union([
    z.lazy(() => s_bank_account),
    z.lazy(() => s_card),
    s_source,
  ]),
  type: z.enum([
    "api_error",
    "card_error",
    "idempotency_error",
    "invalid_request_error",
  ]),
})

export const s_legal_entity_person_verification: z.ZodType<t_legal_entity_person_verification> =
  z.object({
    additional_document: z
      .lazy(() => s_legal_entity_person_verification_document)
      .nullable(),
    details: z.coerce.string().optional().nullable(),
    details_code: z.coerce.string().optional().nullable(),
    document: z.lazy(() => s_legal_entity_person_verification_document),
    status: z.coerce.string(),
  })

export const s_connect_collection_transfer: z.ZodType<t_connect_collection_transfer> =
  z.object({
    amount: z.coerce.number(),
    currency: z.coerce.string(),
    destination: z.union([z.coerce.string(), z.lazy(() => s_account)]),
    id: z.coerce.string(),
    livemode: z.coerce.boolean(),
    object: z.enum(["connect_collection_transfer"]),
  })

export const s_payment_method_details: z.ZodType<t_payment_method_details> =
  z.object({
    ach_credit_transfer: s_payment_method_details_ach_credit_transfer,
    ach_debit: s_payment_method_details_ach_debit,
    acss_debit: s_payment_method_details_acss_debit,
    affirm: s_payment_method_details_affirm,
    afterpay_clearpay: s_payment_method_details_afterpay_clearpay,
    alipay: s_payment_flows_private_payment_methods_alipay_details,
    au_becs_debit: s_payment_method_details_au_becs_debit,
    bacs_debit: s_payment_method_details_bacs_debit,
    bancontact: z.lazy(() => s_payment_method_details_bancontact),
    blik: s_payment_method_details_blik,
    boleto: s_payment_method_details_boleto,
    card: s_payment_method_details_card,
    card_present: s_payment_method_details_card_present,
    cashapp: s_payment_method_details_cashapp,
    customer_balance: s_payment_method_details_customer_balance,
    eps: s_payment_method_details_eps,
    fpx: s_payment_method_details_fpx,
    giropay: s_payment_method_details_giropay,
    grabpay: s_payment_method_details_grabpay,
    ideal: z.lazy(() => s_payment_method_details_ideal),
    interac_present: s_payment_method_details_interac_present,
    klarna: s_payment_method_details_klarna,
    konbini: s_payment_method_details_konbini,
    link: s_payment_method_details_link,
    multibanco: s_payment_method_details_multibanco,
    oxxo: s_payment_method_details_oxxo,
    p24: s_payment_method_details_p24,
    paynow: s_payment_method_details_paynow,
    pix: s_payment_method_details_pix,
    promptpay: s_payment_method_details_promptpay,
    sepa_debit: s_payment_method_details_sepa_debit,
    sofort: z.lazy(() => s_payment_method_details_sofort),
    stripe_account: s_payment_method_details_stripe_account,
    type: z.coerce.string(),
    us_bank_account: s_payment_method_details_us_bank_account,
    wechat: s_payment_method_details_wechat,
    wechat_pay: s_payment_method_details_wechat_pay,
  })

export const s_charge_transfer_data: z.ZodType<t_charge_transfer_data> =
  z.object({
    amount: z.coerce.number().optional().nullable(),
    destination: z.union([z.coerce.string(), z.lazy(() => s_account)]),
  })

export const s_dispute_evidence: z.ZodType<t_dispute_evidence> = z.object({
  access_activity_log: z.coerce.string().optional().nullable(),
  billing_address: z.coerce.string().optional().nullable(),
  cancellation_policy: z
    .union([z.coerce.string(), z.lazy(() => s_file)])
    .nullable(),
  cancellation_policy_disclosure: z.coerce.string().optional().nullable(),
  cancellation_rebuttal: z.coerce.string().optional().nullable(),
  customer_communication: z
    .union([z.coerce.string(), z.lazy(() => s_file)])
    .nullable(),
  customer_email_address: z.coerce.string().optional().nullable(),
  customer_name: z.coerce.string().optional().nullable(),
  customer_purchase_ip: z.coerce.string().optional().nullable(),
  customer_signature: z
    .union([z.coerce.string(), z.lazy(() => s_file)])
    .nullable(),
  duplicate_charge_documentation: z
    .union([z.coerce.string(), z.lazy(() => s_file)])
    .nullable(),
  duplicate_charge_explanation: z.coerce.string().optional().nullable(),
  duplicate_charge_id: z.coerce.string().optional().nullable(),
  product_description: z.coerce.string().optional().nullable(),
  receipt: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
  refund_policy: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
  refund_policy_disclosure: z.coerce.string().optional().nullable(),
  refund_refusal_explanation: z.coerce.string().optional().nullable(),
  service_date: z.coerce.string().optional().nullable(),
  service_documentation: z
    .union([z.coerce.string(), z.lazy(() => s_file)])
    .nullable(),
  shipping_address: z.coerce.string().optional().nullable(),
  shipping_carrier: z.coerce.string().optional().nullable(),
  shipping_date: z.coerce.string().optional().nullable(),
  shipping_documentation: z
    .union([z.coerce.string(), z.lazy(() => s_file)])
    .nullable(),
  shipping_tracking_number: z.coerce.string().optional().nullable(),
  uncategorized_file: z
    .union([z.coerce.string(), z.lazy(() => s_file)])
    .nullable(),
  uncategorized_text: z.coerce.string().optional().nullable(),
})

export const s_payment_pages_checkout_session_invoice_creation: z.ZodType<t_payment_pages_checkout_session_invoice_creation> =
  z.object({
    enabled: z.coerce.boolean(),
    invoice_data: z.lazy(
      () => s_payment_pages_checkout_session_invoice_settings
    ),
  })

export const s_payment_pages_checkout_session_total_details: z.ZodType<t_payment_pages_checkout_session_total_details> =
  z.object({
    amount_discount: z.coerce.number(),
    amount_shipping: z.coerce.number().optional().nullable(),
    amount_tax: z.coerce.number(),
    breakdown: z.lazy(
      () => s_payment_pages_checkout_session_total_details_resource_breakdown
    ),
  })

export const s_line_items_discount_amount: z.ZodType<t_line_items_discount_amount> =
  z.object({ amount: z.coerce.number(), discount: z.lazy(() => s_discount) })

export const s_discounts_resource_discount_amount: z.ZodType<t_discounts_resource_discount_amount> =
  z.object({
    amount: z.coerce.number(),
    discount: z.union([
      z.coerce.string(),
      z.lazy(() => s_discount),
      z.lazy(() => s_deleted_discount),
    ]),
  })

export const s_invoice_setting_customer_setting: z.ZodType<t_invoice_setting_customer_setting> =
  z.object({
    custom_fields: z
      .array(s_invoice_setting_custom_field)
      .optional()
      .nullable(),
    default_payment_method: z
      .union([z.coerce.string(), z.lazy(() => s_payment_method)])
      .nullable(),
    footer: z.coerce.string().optional().nullable(),
    rendering_options: s_invoice_setting_rendering_options.nullable(),
  })

export const s_customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction: z.ZodType<t_customer_balance_resource_cash_balance_transaction_resource_applied_to_payment_transaction> =
  z.object({
    payment_intent: z.union([
      z.coerce.string(),
      z.lazy(() => s_payment_intent),
    ]),
  })

export const s_customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction: z.ZodType<t_customer_balance_resource_cash_balance_transaction_resource_refunded_from_payment_transaction> =
  z.object({ refund: z.union([z.coerce.string(), z.lazy(() => s_refund)]) })

export const s_customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction: z.ZodType<t_customer_balance_resource_cash_balance_transaction_resource_unapplied_from_payment_transaction> =
  z.object({
    payment_intent: z.union([
      z.coerce.string(),
      z.lazy(() => s_payment_intent),
    ]),
  })

export const s_payment_method_card: z.ZodType<t_payment_method_card> = z.object(
  {
    brand: z.coerce.string(),
    checks: s_payment_method_card_checks.nullable(),
    country: z.coerce.string().optional().nullable(),
    exp_month: z.coerce.number(),
    exp_year: z.coerce.number(),
    fingerprint: z.coerce.string().optional().nullable(),
    funding: z.coerce.string(),
    generated_from: z
      .lazy(() => s_payment_method_card_generated_card)
      .nullable(),
    last4: z.coerce.string(),
    networks: s_networks.nullable(),
    three_d_secure_usage: s_three_d_secure_usage.nullable(),
    wallet: s_payment_method_card_wallet.nullable(),
  }
)

export const s_payment_method_sepa_debit: z.ZodType<t_payment_method_sepa_debit> =
  z.object({
    bank_code: z.coerce.string().optional().nullable(),
    branch_code: z.coerce.string().optional().nullable(),
    country: z.coerce.string().optional().nullable(),
    fingerprint: z.coerce.string().optional().nullable(),
    generated_from: z.lazy(() => s_sepa_debit_generated_from).nullable(),
    last4: z.coerce.string().optional().nullable(),
  })

export const s_subscriptions_resource_pending_update: z.ZodType<t_subscriptions_resource_pending_update> =
  z.object({
    billing_cycle_anchor: z.coerce.number().optional().nullable(),
    expires_at: z.coerce.number(),
    subscription_items: z
      .array(z.lazy(() => s_subscription_item))
      .optional()
      .nullable(),
    trial_end: z.coerce.number().optional().nullable(),
    trial_from_plan: z.coerce.boolean().optional().nullable(),
  })

export const s_subscription_transfer_data: z.ZodType<t_subscription_transfer_data> =
  z.object({
    amount_percent: z.coerce.number().optional().nullable(),
    destination: z.union([z.coerce.string(), z.lazy(() => s_account)]),
  })

export const s_bank_connections_resource_accountholder: z.ZodType<t_bank_connections_resource_accountholder> =
  z.object({
    account: z.union([z.coerce.string(), z.lazy(() => s_account)]),
    customer: z.union([z.coerce.string(), z.lazy(() => s_customer)]),
    type: z.enum(["account", "customer"]),
  })

export const s_invoices_from_invoice: z.ZodType<t_invoices_from_invoice> =
  z.object({
    action: z.coerce.string(),
    invoice: z.union([z.coerce.string(), z.lazy(() => s_invoice)]),
  })

export const s_invoice_transfer_data: z.ZodType<t_invoice_transfer_data> =
  z.object({
    amount: z.coerce.number().optional().nullable(),
    destination: z.union([z.coerce.string(), z.lazy(() => s_account)]),
  })

export const s_issuing_cardholder_individual: z.ZodType<t_issuing_cardholder_individual> =
  z.object({
    card_issuing: s_issuing_cardholder_card_issuing.nullable(),
    dob: s_issuing_cardholder_individual_dob.nullable(),
    first_name: z.coerce.string().optional().nullable(),
    last_name: z.coerce.string().optional().nullable(),
    verification: z.lazy(() => s_issuing_cardholder_verification).nullable(),
  })

export const s_issuing_dispute_evidence: z.ZodType<t_issuing_dispute_evidence> =
  z.object({
    canceled: z.lazy(() => s_issuing_dispute_canceled_evidence),
    duplicate: z.lazy(() => s_issuing_dispute_duplicate_evidence),
    fraudulent: z.lazy(() => s_issuing_dispute_fraudulent_evidence),
    merchandise_not_as_described: z.lazy(
      () => s_issuing_dispute_merchandise_not_as_described_evidence
    ),
    not_received: z.lazy(() => s_issuing_dispute_not_received_evidence),
    other: z.lazy(() => s_issuing_dispute_other_evidence),
    reason: z.enum([
      "canceled",
      "duplicate",
      "fraudulent",
      "merchandise_not_as_described",
      "not_received",
      "other",
      "service_not_as_described",
    ]),
    service_not_as_described: z.lazy(
      () => s_issuing_dispute_service_not_as_described_evidence
    ),
  })

export const s_transfer_data: z.ZodType<t_transfer_data> = z.object({
  amount: z.coerce.number().optional(),
  destination: z.union([z.coerce.string(), z.lazy(() => s_account)]),
})

export const s_payment_links_resource_invoice_creation: z.ZodType<t_payment_links_resource_invoice_creation> =
  z.object({
    enabled: z.coerce.boolean(),
    invoice_data: z
      .lazy(() => s_payment_links_resource_invoice_settings)
      .nullable(),
  })

export const s_payment_links_resource_transfer_data: z.ZodType<t_payment_links_resource_transfer_data> =
  z.object({
    amount: z.coerce.number().optional().nullable(),
    destination: z.union([z.coerce.string(), z.lazy(() => s_account)]),
  })

export const s_quotes_resource_computed: z.ZodType<t_quotes_resource_computed> =
  z.object({
    recurring: z.lazy(() => s_quotes_resource_recurring).nullable(),
    upfront: z.lazy(() => s_quotes_resource_upfront),
  })

export const s_quotes_resource_from_quote: z.ZodType<t_quotes_resource_from_quote> =
  z.object({
    is_revision: z.coerce.boolean(),
    quote: z.union([z.coerce.string(), z.lazy(() => s_quote)]),
  })

export const s_quotes_resource_total_details: z.ZodType<t_quotes_resource_total_details> =
  z.object({
    amount_discount: z.coerce.number(),
    amount_shipping: z.coerce.number().optional().nullable(),
    amount_tax: z.coerce.number(),
    breakdown: z.lazy(() => s_quotes_resource_total_details_resource_breakdown),
  })

export const s_quotes_resource_transfer_data: z.ZodType<t_quotes_resource_transfer_data> =
  z.object({
    amount: z.coerce.number().optional().nullable(),
    amount_percent: z.coerce.number().optional().nullable(),
    destination: z.union([z.coerce.string(), z.lazy(() => s_account)]),
  })

export const s_setup_attempt_payment_method_details: z.ZodType<t_setup_attempt_payment_method_details> =
  z.object({
    acss_debit: s_setup_attempt_payment_method_details_acss_debit,
    au_becs_debit: s_setup_attempt_payment_method_details_au_becs_debit,
    bacs_debit: s_setup_attempt_payment_method_details_bacs_debit,
    bancontact: z.lazy(() => s_setup_attempt_payment_method_details_bancontact),
    blik: s_setup_attempt_payment_method_details_blik,
    boleto: s_setup_attempt_payment_method_details_boleto,
    card: s_setup_attempt_payment_method_details_card,
    card_present: z.lazy(
      () => s_setup_attempt_payment_method_details_card_present
    ),
    cashapp: s_setup_attempt_payment_method_details_cashapp,
    ideal: z.lazy(() => s_setup_attempt_payment_method_details_ideal),
    klarna: s_setup_attempt_payment_method_details_klarna,
    link: s_setup_attempt_payment_method_details_link,
    sepa_debit: s_setup_attempt_payment_method_details_sepa_debit,
    sofort: z.lazy(() => s_setup_attempt_payment_method_details_sofort),
    type: z.coerce.string(),
    us_bank_account: s_setup_attempt_payment_method_details_us_bank_account,
  })

export const s_subscription_schedules_resource_default_settings: z.ZodType<t_subscription_schedules_resource_default_settings> =
  z.object({
    application_fee_percent: z.coerce.number().optional().nullable(),
    automatic_tax:
      s_subscription_schedules_resource_default_settings_automatic_tax,
    billing_cycle_anchor: z.enum(["automatic", "phase_start"]),
    billing_thresholds: s_subscription_billing_thresholds.nullable(),
    collection_method: z
      .enum(["charge_automatically", "send_invoice"])
      .optional()
      .nullable(),
    default_payment_method: z
      .union([z.coerce.string(), z.lazy(() => s_payment_method)])
      .nullable(),
    description: z.coerce.string().optional().nullable(),
    invoice_settings:
      s_invoice_setting_subscription_schedule_setting.nullable(),
    on_behalf_of: z
      .union([z.coerce.string(), z.lazy(() => s_account)])
      .nullable(),
    transfer_data: z.lazy(() => s_subscription_transfer_data).nullable(),
  })

export const s_subscription_schedule_phase_configuration: z.ZodType<t_subscription_schedule_phase_configuration> =
  z.object({
    add_invoice_items: z.array(
      z.lazy(() => s_subscription_schedule_add_invoice_item)
    ),
    application_fee_percent: z.coerce.number().optional().nullable(),
    automatic_tax: s_schedules_phase_automatic_tax,
    billing_cycle_anchor: z
      .enum(["automatic", "phase_start"])
      .optional()
      .nullable(),
    billing_thresholds: s_subscription_billing_thresholds.nullable(),
    collection_method: z
      .enum(["charge_automatically", "send_invoice"])
      .optional()
      .nullable(),
    coupon: z.union([z.coerce.string(), s_coupon, s_deleted_coupon]).nullable(),
    currency: z.coerce.string(),
    default_payment_method: z
      .union([z.coerce.string(), z.lazy(() => s_payment_method)])
      .nullable(),
    default_tax_rates: z.array(s_tax_rate).optional().nullable(),
    description: z.coerce.string().optional().nullable(),
    end_date: z.coerce.number(),
    invoice_settings: s_invoice_setting_phase_setting.nullable(),
    items: z.array(z.lazy(() => s_subscription_schedule_configuration_item)),
    metadata: z.object({}).optional().nullable(),
    on_behalf_of: z
      .union([z.coerce.string(), z.lazy(() => s_account)])
      .nullable(),
    proration_behavior: z.enum(["always_invoice", "create_prorations", "none"]),
    start_date: z.coerce.number(),
    transfer_data: z.lazy(() => s_subscription_transfer_data).nullable(),
    trial_end: z.coerce.number().optional().nullable(),
  })

export const s_terminal_configuration_configuration_resource_device_type_specific_config: z.ZodType<t_terminal_configuration_configuration_resource_device_type_specific_config> =
  z.object({ splashscreen: z.union([z.coerce.string(), z.lazy(() => s_file)]) })

export const s_terminal_reader_reader_resource_reader_action: z.ZodType<t_terminal_reader_reader_resource_reader_action> =
  z.object({
    failure_code: z.coerce.string().optional().nullable(),
    failure_message: z.coerce.string().optional().nullable(),
    process_payment_intent: z.lazy(
      () => s_terminal_reader_reader_resource_process_payment_intent_action
    ),
    process_setup_intent: z.lazy(
      () => s_terminal_reader_reader_resource_process_setup_intent_action
    ),
    refund_payment: z.lazy(
      () => s_terminal_reader_reader_resource_refund_payment_action
    ),
    set_reader_display:
      s_terminal_reader_reader_resource_set_reader_display_action,
    status: z.enum(["failed", "in_progress", "succeeded"]),
    type: z.enum([
      "process_payment_intent",
      "process_setup_intent",
      "refund_payment",
      "set_reader_display",
    ]),
  })

export const s_treasury_outbound_payments_resource_returned_status: z.ZodType<t_treasury_outbound_payments_resource_returned_status> =
  z.object({
    code: z.enum([
      "account_closed",
      "account_frozen",
      "bank_account_restricted",
      "bank_ownership_changed",
      "declined",
      "incorrect_account_holder_name",
      "invalid_account_number",
      "invalid_currency",
      "no_account",
      "other",
    ]),
    transaction: z.union([
      z.coerce.string(),
      z.lazy(() => s_treasury_transaction),
    ]),
  })

export const s_treasury_outbound_transfers_resource_returned_details: z.ZodType<t_treasury_outbound_transfers_resource_returned_details> =
  z.object({
    code: z.enum([
      "account_closed",
      "account_frozen",
      "bank_account_restricted",
      "bank_ownership_changed",
      "declined",
      "incorrect_account_holder_name",
      "invalid_account_number",
      "invalid_currency",
      "no_account",
      "other",
    ]),
    transaction: z.union([
      z.coerce.string(),
      z.lazy(() => s_treasury_transaction),
    ]),
  })

export const s_treasury_received_credits_resource_linked_flows: z.ZodType<t_treasury_received_credits_resource_linked_flows> =
  z.object({
    credit_reversal: z.coerce.string().optional().nullable(),
    issuing_authorization: z.coerce.string().optional().nullable(),
    issuing_transaction: z.coerce.string().optional().nullable(),
    source_flow: z.coerce.string().optional().nullable(),
    source_flow_details: z
      .lazy(() => s_treasury_received_credits_resource_source_flows_details)
      .nullable(),
    source_flow_type: z.coerce.string().optional().nullable(),
  })

export const s_treasury_transactions_resource_flow_details: z.ZodType<t_treasury_transactions_resource_flow_details> =
  z.object({
    credit_reversal: z.lazy(() => s_treasury_credit_reversal),
    debit_reversal: z.lazy(() => s_treasury_debit_reversal),
    inbound_transfer: z.lazy(() => s_treasury_inbound_transfer),
    issuing_authorization: z.lazy(() => s_issuing_authorization),
    outbound_payment: z.lazy(() => s_treasury_outbound_payment),
    outbound_transfer: z.lazy(() => s_treasury_outbound_transfer),
    received_credit: z.lazy(() => s_treasury_received_credit),
    received_debit: z.lazy(() => s_treasury_received_debit),
    type: z.enum([
      "credit_reversal",
      "debit_reversal",
      "inbound_transfer",
      "issuing_authorization",
      "other",
      "outbound_payment",
      "outbound_transfer",
      "received_credit",
      "received_debit",
    ]),
  })

export const s_legal_entity_company_verification: z.ZodType<t_legal_entity_company_verification> =
  z.object({
    document: z.lazy(() => s_legal_entity_company_verification_document),
  })

export const s_account_branding_settings: z.ZodType<t_account_branding_settings> =
  z.object({
    icon: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
    logo: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
    primary_color: z.coerce.string().optional().nullable(),
    secondary_color: z.coerce.string().optional().nullable(),
  })

export const s_legal_entity_person_verification_document: z.ZodType<t_legal_entity_person_verification_document> =
  z.object({
    back: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
    details: z.coerce.string().optional().nullable(),
    details_code: z.coerce.string().optional().nullable(),
    front: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
  })

export const s_payment_method_details_bancontact: z.ZodType<t_payment_method_details_bancontact> =
  z.object({
    bank_code: z.coerce.string().optional().nullable(),
    bank_name: z.coerce.string().optional().nullable(),
    bic: z.coerce.string().optional().nullable(),
    generated_sepa_debit: z
      .union([z.coerce.string(), z.lazy(() => s_payment_method)])
      .nullable(),
    generated_sepa_debit_mandate: z
      .union([z.coerce.string(), z.lazy(() => s_mandate)])
      .nullable(),
    iban_last4: z.coerce.string().optional().nullable(),
    preferred_language: z.enum(["de", "en", "fr", "nl"]).optional().nullable(),
    verified_name: z.coerce.string().optional().nullable(),
  })

export const s_payment_method_details_ideal: z.ZodType<t_payment_method_details_ideal> =
  z.object({
    bank: z
      .enum([
        "abn_amro",
        "asn_bank",
        "bunq",
        "handelsbanken",
        "ing",
        "knab",
        "moneyou",
        "rabobank",
        "regiobank",
        "revolut",
        "sns_bank",
        "triodos_bank",
        "van_lanschot",
        "yoursafe",
      ])
      .optional()
      .nullable(),
    bic: z
      .enum([
        "ABNANL2A",
        "ASNBNL21",
        "BITSNL2A",
        "BUNQNL2A",
        "FVLBNL22",
        "HANDNL2A",
        "INGBNL2A",
        "KNABNL2H",
        "MOYONL21",
        "RABONL2U",
        "RBRBNL21",
        "REVOIE23",
        "REVOLT21",
        "SNSBNL2A",
        "TRIONL2U",
      ])
      .optional()
      .nullable(),
    generated_sepa_debit: z
      .union([z.coerce.string(), z.lazy(() => s_payment_method)])
      .nullable(),
    generated_sepa_debit_mandate: z
      .union([z.coerce.string(), z.lazy(() => s_mandate)])
      .nullable(),
    iban_last4: z.coerce.string().optional().nullable(),
    verified_name: z.coerce.string().optional().nullable(),
  })

export const s_payment_method_details_sofort: z.ZodType<t_payment_method_details_sofort> =
  z.object({
    bank_code: z.coerce.string().optional().nullable(),
    bank_name: z.coerce.string().optional().nullable(),
    bic: z.coerce.string().optional().nullable(),
    country: z.coerce.string().optional().nullable(),
    generated_sepa_debit: z
      .union([z.coerce.string(), z.lazy(() => s_payment_method)])
      .nullable(),
    generated_sepa_debit_mandate: z
      .union([z.coerce.string(), z.lazy(() => s_mandate)])
      .nullable(),
    iban_last4: z.coerce.string().optional().nullable(),
    preferred_language: z
      .enum(["de", "en", "es", "fr", "it", "nl", "pl"])
      .optional()
      .nullable(),
    verified_name: z.coerce.string().optional().nullable(),
  })

export const s_payment_pages_checkout_session_invoice_settings: z.ZodType<t_payment_pages_checkout_session_invoice_settings> =
  z.object({
    account_tax_ids: z
      .array(
        z.union([z.coerce.string(), z.lazy(() => s_tax_id), s_deleted_tax_id])
      )
      .optional()
      .nullable(),
    custom_fields: z
      .array(s_invoice_setting_custom_field)
      .optional()
      .nullable(),
    description: z.coerce.string().optional().nullable(),
    footer: z.coerce.string().optional().nullable(),
    metadata: z.object({}).optional().nullable(),
    rendering_options: s_invoice_setting_rendering_options.nullable(),
  })

export const s_payment_pages_checkout_session_total_details_resource_breakdown: z.ZodType<t_payment_pages_checkout_session_total_details_resource_breakdown> =
  z.object({
    discounts: z.array(z.lazy(() => s_line_items_discount_amount)),
    taxes: z.array(s_line_items_tax_amount),
  })

export const s_payment_method_card_generated_card: z.ZodType<t_payment_method_card_generated_card> =
  z.object({
    charge: z.coerce.string().optional().nullable(),
    payment_method_details:
      s_card_generated_from_payment_method_details.nullable(),
    setup_attempt: z
      .union([z.coerce.string(), z.lazy(() => s_setup_attempt)])
      .nullable(),
  })

export const s_sepa_debit_generated_from: z.ZodType<t_sepa_debit_generated_from> =
  z.object({
    charge: z.union([z.coerce.string(), z.lazy(() => s_charge)]).nullable(),
    setup_attempt: z
      .union([z.coerce.string(), z.lazy(() => s_setup_attempt)])
      .nullable(),
  })

export const s_issuing_cardholder_verification: z.ZodType<t_issuing_cardholder_verification> =
  z.object({
    document: z.lazy(() => s_issuing_cardholder_id_document).nullable(),
  })

export const s_issuing_dispute_canceled_evidence: z.ZodType<t_issuing_dispute_canceled_evidence> =
  z.object({
    additional_documentation: z
      .union([z.coerce.string(), z.lazy(() => s_file)])
      .nullable(),
    canceled_at: z.coerce.number().optional().nullable(),
    cancellation_policy_provided: z.coerce.boolean().optional().nullable(),
    cancellation_reason: z.coerce.string().optional().nullable(),
    expected_at: z.coerce.number().optional().nullable(),
    explanation: z.coerce.string().optional().nullable(),
    product_description: z.coerce.string().optional().nullable(),
    product_type: z.enum(["merchandise", "service"]).optional().nullable(),
    return_status: z
      .enum(["merchant_rejected", "successful"])
      .optional()
      .nullable(),
    returned_at: z.coerce.number().optional().nullable(),
  })

export const s_issuing_dispute_duplicate_evidence: z.ZodType<t_issuing_dispute_duplicate_evidence> =
  z.object({
    additional_documentation: z
      .union([z.coerce.string(), z.lazy(() => s_file)])
      .nullable(),
    card_statement: z
      .union([z.coerce.string(), z.lazy(() => s_file)])
      .nullable(),
    cash_receipt: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
    check_image: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
    explanation: z.coerce.string().optional().nullable(),
    original_transaction: z.coerce.string().optional().nullable(),
  })

export const s_issuing_dispute_fraudulent_evidence: z.ZodType<t_issuing_dispute_fraudulent_evidence> =
  z.object({
    additional_documentation: z
      .union([z.coerce.string(), z.lazy(() => s_file)])
      .nullable(),
    explanation: z.coerce.string().optional().nullable(),
  })

export const s_issuing_dispute_merchandise_not_as_described_evidence: z.ZodType<t_issuing_dispute_merchandise_not_as_described_evidence> =
  z.object({
    additional_documentation: z
      .union([z.coerce.string(), z.lazy(() => s_file)])
      .nullable(),
    explanation: z.coerce.string().optional().nullable(),
    received_at: z.coerce.number().optional().nullable(),
    return_description: z.coerce.string().optional().nullable(),
    return_status: z
      .enum(["merchant_rejected", "successful"])
      .optional()
      .nullable(),
    returned_at: z.coerce.number().optional().nullable(),
  })

export const s_issuing_dispute_not_received_evidence: z.ZodType<t_issuing_dispute_not_received_evidence> =
  z.object({
    additional_documentation: z
      .union([z.coerce.string(), z.lazy(() => s_file)])
      .nullable(),
    expected_at: z.coerce.number().optional().nullable(),
    explanation: z.coerce.string().optional().nullable(),
    product_description: z.coerce.string().optional().nullable(),
    product_type: z.enum(["merchandise", "service"]).optional().nullable(),
  })

export const s_issuing_dispute_other_evidence: z.ZodType<t_issuing_dispute_other_evidence> =
  z.object({
    additional_documentation: z
      .union([z.coerce.string(), z.lazy(() => s_file)])
      .nullable(),
    explanation: z.coerce.string().optional().nullable(),
    product_description: z.coerce.string().optional().nullable(),
    product_type: z.enum(["merchandise", "service"]).optional().nullable(),
  })

export const s_issuing_dispute_service_not_as_described_evidence: z.ZodType<t_issuing_dispute_service_not_as_described_evidence> =
  z.object({
    additional_documentation: z
      .union([z.coerce.string(), z.lazy(() => s_file)])
      .nullable(),
    canceled_at: z.coerce.number().optional().nullable(),
    cancellation_reason: z.coerce.string().optional().nullable(),
    explanation: z.coerce.string().optional().nullable(),
    received_at: z.coerce.number().optional().nullable(),
  })

export const s_payment_links_resource_invoice_settings: z.ZodType<t_payment_links_resource_invoice_settings> =
  z.object({
    account_tax_ids: z
      .array(
        z.union([z.coerce.string(), z.lazy(() => s_tax_id), s_deleted_tax_id])
      )
      .optional()
      .nullable(),
    custom_fields: z
      .array(s_invoice_setting_custom_field)
      .optional()
      .nullable(),
    description: z.coerce.string().optional().nullable(),
    footer: z.coerce.string().optional().nullable(),
    metadata: z.object({}).optional().nullable(),
    rendering_options: s_invoice_setting_rendering_options.nullable(),
  })

export const s_quotes_resource_recurring: z.ZodType<t_quotes_resource_recurring> =
  z.object({
    amount_subtotal: z.coerce.number(),
    amount_total: z.coerce.number(),
    interval: z.enum(["day", "month", "week", "year"]),
    interval_count: z.coerce.number(),
    total_details: z.lazy(() => s_quotes_resource_total_details),
  })

export const s_quotes_resource_upfront: z.ZodType<t_quotes_resource_upfront> =
  z.object({
    amount_subtotal: z.coerce.number(),
    amount_total: z.coerce.number(),
    line_items: z
      .object({
        data: z.array(z.lazy(() => s_item)),
        has_more: z.coerce.boolean(),
        object: z.enum(["list"]),
        url: z.coerce.string(),
      })
      .optional(),
    total_details: z.lazy(() => s_quotes_resource_total_details),
  })

export const s_quotes_resource_total_details_resource_breakdown: z.ZodType<t_quotes_resource_total_details_resource_breakdown> =
  z.object({
    discounts: z.array(z.lazy(() => s_line_items_discount_amount)),
    taxes: z.array(s_line_items_tax_amount),
  })

export const s_setup_attempt_payment_method_details_bancontact: z.ZodType<t_setup_attempt_payment_method_details_bancontact> =
  z.object({
    bank_code: z.coerce.string().optional().nullable(),
    bank_name: z.coerce.string().optional().nullable(),
    bic: z.coerce.string().optional().nullable(),
    generated_sepa_debit: z
      .union([z.coerce.string(), z.lazy(() => s_payment_method)])
      .nullable(),
    generated_sepa_debit_mandate: z
      .union([z.coerce.string(), z.lazy(() => s_mandate)])
      .nullable(),
    iban_last4: z.coerce.string().optional().nullable(),
    preferred_language: z.enum(["de", "en", "fr", "nl"]).optional().nullable(),
    verified_name: z.coerce.string().optional().nullable(),
  })

export const s_setup_attempt_payment_method_details_card_present: z.ZodType<t_setup_attempt_payment_method_details_card_present> =
  z.object({
    generated_card: z
      .union([z.coerce.string(), z.lazy(() => s_payment_method)])
      .nullable(),
  })

export const s_setup_attempt_payment_method_details_ideal: z.ZodType<t_setup_attempt_payment_method_details_ideal> =
  z.object({
    bank: z
      .enum([
        "abn_amro",
        "asn_bank",
        "bunq",
        "handelsbanken",
        "ing",
        "knab",
        "moneyou",
        "rabobank",
        "regiobank",
        "revolut",
        "sns_bank",
        "triodos_bank",
        "van_lanschot",
        "yoursafe",
      ])
      .optional()
      .nullable(),
    bic: z
      .enum([
        "ABNANL2A",
        "ASNBNL21",
        "BITSNL2A",
        "BUNQNL2A",
        "FVLBNL22",
        "HANDNL2A",
        "INGBNL2A",
        "KNABNL2H",
        "MOYONL21",
        "RABONL2U",
        "RBRBNL21",
        "REVOIE23",
        "REVOLT21",
        "SNSBNL2A",
        "TRIONL2U",
      ])
      .optional()
      .nullable(),
    generated_sepa_debit: z
      .union([z.coerce.string(), z.lazy(() => s_payment_method)])
      .nullable(),
    generated_sepa_debit_mandate: z
      .union([z.coerce.string(), z.lazy(() => s_mandate)])
      .nullable(),
    iban_last4: z.coerce.string().optional().nullable(),
    verified_name: z.coerce.string().optional().nullable(),
  })

export const s_setup_attempt_payment_method_details_sofort: z.ZodType<t_setup_attempt_payment_method_details_sofort> =
  z.object({
    bank_code: z.coerce.string().optional().nullable(),
    bank_name: z.coerce.string().optional().nullable(),
    bic: z.coerce.string().optional().nullable(),
    generated_sepa_debit: z
      .union([z.coerce.string(), z.lazy(() => s_payment_method)])
      .nullable(),
    generated_sepa_debit_mandate: z
      .union([z.coerce.string(), z.lazy(() => s_mandate)])
      .nullable(),
    iban_last4: z.coerce.string().optional().nullable(),
    preferred_language: z.enum(["de", "en", "fr", "nl"]).optional().nullable(),
    verified_name: z.coerce.string().optional().nullable(),
  })

export const s_subscription_schedule_add_invoice_item: z.ZodType<t_subscription_schedule_add_invoice_item> =
  z.object({
    price: z.union([z.coerce.string(), z.lazy(() => s_price), s_deleted_price]),
    quantity: z.coerce.number().optional().nullable(),
    tax_rates: z.array(s_tax_rate).optional().nullable(),
  })

export const s_subscription_schedule_configuration_item: z.ZodType<t_subscription_schedule_configuration_item> =
  z.object({
    billing_thresholds: s_subscription_item_billing_thresholds.nullable(),
    metadata: z.object({}).optional().nullable(),
    price: z.union([z.coerce.string(), z.lazy(() => s_price), s_deleted_price]),
    quantity: z.coerce.number().optional(),
    tax_rates: z.array(s_tax_rate).optional().nullable(),
  })

export const s_terminal_reader_reader_resource_process_payment_intent_action: z.ZodType<t_terminal_reader_reader_resource_process_payment_intent_action> =
  z.object({
    payment_intent: z.union([
      z.coerce.string(),
      z.lazy(() => s_payment_intent),
    ]),
    process_config: s_terminal_reader_reader_resource_process_config,
  })

export const s_terminal_reader_reader_resource_process_setup_intent_action: z.ZodType<t_terminal_reader_reader_resource_process_setup_intent_action> =
  z.object({
    generated_card: z.coerce.string().optional(),
    setup_intent: z.union([z.coerce.string(), z.lazy(() => s_setup_intent)]),
  })

export const s_terminal_reader_reader_resource_refund_payment_action: z.ZodType<t_terminal_reader_reader_resource_refund_payment_action> =
  z.object({
    amount: z.coerce.number().optional(),
    charge: z.union([z.coerce.string(), z.lazy(() => s_charge)]),
    metadata: z.object({}).optional(),
    payment_intent: z.union([
      z.coerce.string(),
      z.lazy(() => s_payment_intent),
    ]),
    reason: z
      .enum(["duplicate", "fraudulent", "requested_by_customer"])
      .optional(),
    refund: z.union([z.coerce.string(), z.lazy(() => s_refund)]),
    refund_application_fee: z.coerce.boolean().optional(),
    reverse_transfer: z.coerce.boolean().optional(),
  })

export const s_treasury_received_credits_resource_source_flows_details: z.ZodType<t_treasury_received_credits_resource_source_flows_details> =
  z.object({
    credit_reversal: z.lazy(() => s_treasury_credit_reversal),
    outbound_payment: z.lazy(() => s_treasury_outbound_payment),
    payout: z.lazy(() => s_payout),
    type: z.enum(["credit_reversal", "other", "outbound_payment", "payout"]),
  })

export const s_legal_entity_company_verification_document: z.ZodType<t_legal_entity_company_verification_document> =
  z.object({
    back: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
    details: z.coerce.string().optional().nullable(),
    details_code: z.coerce.string().optional().nullable(),
    front: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
  })

export const s_issuing_cardholder_id_document: z.ZodType<t_issuing_cardholder_id_document> =
  z.object({
    back: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
    front: z.union([z.coerce.string(), z.lazy(() => s_file)]).nullable(),
  })
