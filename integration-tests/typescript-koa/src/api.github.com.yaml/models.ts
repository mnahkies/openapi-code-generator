/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

export type EmptyObject = { [key: string]: never }

export type t_actions_billing_usage = {
  included_minutes: number
  minutes_used_breakdown: {
    MACOS?: number
    UBUNTU?: number
    WINDOWS?: number
    macos_12_core?: number
    total?: number
    ubuntu_16_core?: number
    ubuntu_32_core?: number
    ubuntu_4_core?: number
    ubuntu_64_core?: number
    ubuntu_8_core?: number
    windows_16_core?: number
    windows_32_core?: number
    windows_4_core?: number
    windows_64_core?: number
    windows_8_core?: number
  }
  total_minutes_used: number
  total_paid_minutes_used: number
}

export type t_actions_cache_list = {
  actions_caches: {
    created_at?: string
    id?: number
    key?: string
    last_accessed_at?: string
    ref?: string
    size_in_bytes?: number
    version?: string
  }[]
  total_count: number
}

export type t_actions_cache_usage_by_repository = {
  active_caches_count: number
  active_caches_size_in_bytes: number
  full_name: string
}

export type t_actions_cache_usage_org_enterprise = {
  total_active_caches_count: number
  total_active_caches_size_in_bytes: number
}

export type t_actions_can_approve_pull_request_reviews = boolean

export type t_actions_default_workflow_permissions = "read" | "write"

export type t_actions_enabled = boolean

export type t_actions_get_default_workflow_permissions = {
  can_approve_pull_request_reviews: t_actions_can_approve_pull_request_reviews
  default_workflow_permissions: t_actions_default_workflow_permissions
}

export type t_actions_organization_permissions = {
  allowed_actions?: t_allowed_actions
  enabled_repositories: t_enabled_repositories
  selected_actions_url?: t_selected_actions_url
  selected_repositories_url?: string
}

export type t_actions_public_key = {
  created_at?: string
  id?: number
  key: string
  key_id: string
  title?: string
  url?: string
}

export type t_actions_repository_permissions = {
  allowed_actions?: t_allowed_actions
  enabled: t_actions_enabled
  selected_actions_url?: t_selected_actions_url
}

export type t_actions_secret = {
  created_at: string
  name: string
  updated_at: string
}

export type t_actions_variable = {
  created_at: string
  name: string
  updated_at: string
  value: string
}

export type t_actions_workflow_access_to_repository = {
  access_level: "none" | "user" | "organization"
}

export type t_actor = {
  avatar_url: string
  display_login?: string
  gravatar_id: string | null
  id: number
  login: string
  url: string
}

export type t_added_to_project_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_nullable_integration
  project_card?: {
    column_name: string
    id: number
    previous_column_name?: string
    project_id: number
    project_url: string
    url: string
  }
  url: string
}

export type t_alert_auto_dismissed_at = string | null

export type t_alert_created_at = string

export type t_alert_dismissed_at = string | null

export type t_alert_fixed_at = string | null

export type t_alert_html_url = string

export type t_alert_instances_url = string

export type t_alert_number = number

export type t_alert_updated_at = string

export type t_alert_url = string

export type t_allowed_actions = "all" | "local_only" | "selected"

export type t_api_overview = {
  actions?: string[]
  api?: string[]
  dependabot?: string[]
  git?: string[]
  hooks?: string[]
  importer?: string[]
  packages?: string[]
  pages?: string[]
  ssh_key_fingerprints?: {
    SHA256_DSA?: string
    SHA256_ECDSA?: string
    SHA256_ED25519?: string
    SHA256_RSA?: string
  }
  ssh_keys?: string[]
  verifiable_password_authentication: boolean
  web?: string[]
}

export type t_app_permissions = {
  actions?: "read" | "write"
  administration?: "read" | "write"
  checks?: "read" | "write"
  contents?: "read" | "write"
  deployments?: "read" | "write"
  environments?: "read" | "write"
  issues?: "read" | "write"
  members?: "read" | "write"
  metadata?: "read" | "write"
  organization_administration?: "read" | "write"
  organization_announcement_banners?: "read" | "write"
  organization_custom_roles?: "read" | "write"
  organization_hooks?: "read" | "write"
  organization_packages?: "read" | "write"
  organization_personal_access_token_requests?: "read" | "write"
  organization_personal_access_tokens?: "read" | "write"
  organization_plan?: "read"
  organization_projects?: "read" | "write" | "admin"
  organization_secrets?: "read" | "write"
  organization_self_hosted_runners?: "read" | "write"
  organization_user_blocking?: "read" | "write"
  packages?: "read" | "write"
  pages?: "read" | "write"
  pull_requests?: "read" | "write"
  repository_hooks?: "read" | "write"
  repository_projects?: "read" | "write" | "admin"
  secret_scanning_alerts?: "read" | "write"
  secrets?: "read" | "write"
  security_events?: "read" | "write"
  single_file?: "read" | "write"
  statuses?: "read" | "write"
  team_discussions?: "read" | "write"
  vulnerability_alerts?: "read" | "write"
  workflows?: "write"
}

export type t_artifact = {
  archive_download_url: string
  created_at: string | null
  expired: boolean
  expires_at: string | null
  id: number
  name: string
  node_id: string
  size_in_bytes: number
  updated_at: string | null
  url: string
  workflow_run?: {
    head_branch?: string
    head_repository_id?: number
    head_sha?: string
    id?: number
    repository_id?: number
  } | null
}

export type t_assigned_issue_event = {
  actor: t_simple_user
  assignee: t_simple_user
  assigner: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_integration
  url: string
}

export type t_authentication_token = {
  expires_at: string
  permissions?: EmptyObject
  repositories?: t_repository[]
  repository_selection?: "all" | "selected"
  single_file?: string | null
  token: string
}

export type t_author_association =
  | "COLLABORATOR"
  | "CONTRIBUTOR"
  | "FIRST_TIMER"
  | "FIRST_TIME_CONTRIBUTOR"
  | "MANNEQUIN"
  | "MEMBER"
  | "NONE"
  | "OWNER"

export type t_authorization = {
  app: {
    client_id: string
    name: string
    url: string
  }
  created_at: string
  expires_at: string | null
  fingerprint: string | null
  hashed_token: string | null
  id: number
  installation?: t_nullable_scoped_installation
  note: string | null
  note_url: string | null
  scopes: string[] | null
  token: string
  token_last_eight: string | null
  updated_at: string
  url: string
  user?: t_nullable_simple_user
}

export type t_auto_merge = {
  commit_message: string
  commit_title: string
  enabled_by: t_simple_user
  merge_method: "merge" | "squash" | "rebase"
} | null

export type t_autolink = {
  id: number
  is_alphanumeric: boolean
  key_prefix: string
  url_template: string
}

export type t_base_gist = {
  comments: number
  comments_url: string
  commits_url: string
  created_at: string
  description: string | null
  files: {
    [key: string]: {
      filename?: string
      language?: string
      raw_url?: string
      size?: number
      type?: string
    }
  }
  forks?: EmptyObject[]
  forks_url: string
  git_pull_url: string
  git_push_url: string
  history?: EmptyObject[]
  html_url: string
  id: string
  node_id: string
  owner?: t_simple_user
  public: boolean
  truncated?: boolean
  updated_at: string
  url: string
  user: t_nullable_simple_user
}

export type t_basic_error = {
  documentation_url?: string
  message?: string
  status?: string
  url?: string
}

export type t_blob = {
  content: string
  encoding: string
  highlighted_content?: string
  node_id: string
  sha: string
  size: number | null
  url: string
}

export type t_branch_protection = {
  allow_deletions?: {
    enabled?: boolean
  }
  allow_force_pushes?: {
    enabled?: boolean
  }
  allow_fork_syncing?: {
    enabled?: boolean
  }
  block_creations?: {
    enabled?: boolean
  }
  enabled?: boolean
  enforce_admins?: t_protected_branch_admin_enforced
  lock_branch?: {
    enabled?: boolean
  }
  name?: string
  protection_url?: string
  required_conversation_resolution?: {
    enabled?: boolean
  }
  required_linear_history?: {
    enabled?: boolean
  }
  required_pull_request_reviews?: t_protected_branch_pull_request_review
  required_signatures?: {
    enabled: boolean
    url: string
  }
  required_status_checks?: t_protected_branch_required_status_check
  restrictions?: t_branch_restriction_policy
  url?: string
}

export type t_branch_restriction_policy = {
  apps: {
    created_at?: string
    description?: string
    events?: string[]
    external_url?: string
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    owner?: {
      avatar_url?: string
      description?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      hooks_url?: string
      html_url?: string
      id?: number
      issues_url?: string
      login?: string
      members_url?: string
      node_id?: string
      organizations_url?: string
      public_members_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    permissions?: {
      contents?: string
      issues?: string
      metadata?: string
      single_file?: string
    }
    slug?: string
    updated_at?: string
  }[]
  apps_url: string
  teams: {
    description?: string | null
    html_url?: string
    id?: number
    members_url?: string
    name?: string
    node_id?: string
    notification_setting?: string
    parent?: string | null
    permission?: string
    privacy?: string
    repositories_url?: string
    slug?: string
    url?: string
  }[]
  teams_url: string
  url: string
  users: {
    avatar_url?: string
    events_url?: string
    followers_url?: string
    following_url?: string
    gists_url?: string
    gravatar_id?: string
    html_url?: string
    id?: number
    login?: string
    node_id?: string
    organizations_url?: string
    received_events_url?: string
    repos_url?: string
    site_admin?: boolean
    starred_url?: string
    subscriptions_url?: string
    type?: string
    url?: string
  }[]
  users_url: string
}

export type t_branch_short = {
  commit: {
    sha: string
    url: string
  }
  name: string
  protected: boolean
}

export type t_branch_with_protection = {
  _links: {
    html: string
    self: string
  }
  commit: t_commit
  name: string
  pattern?: string
  protected: boolean
  protection: t_branch_protection
  protection_url: string
  required_approving_review_count?: number
}

export type t_check_annotation = {
  annotation_level: string | null
  blob_href: string
  end_column: number | null
  end_line: number
  message: string | null
  path: string
  raw_details: string | null
  start_column: number | null
  start_line: number
  title: string | null
}

export type t_check_run = {
  app: t_nullable_integration
  check_suite: {
    id: number
  } | null
  completed_at: string | null
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | null
  deployment?: t_deployment_simple
  details_url: string | null
  external_id: string | null
  head_sha: string
  html_url: string | null
  id: number
  name: string
  node_id: string
  output: {
    annotations_count: number
    annotations_url: string
    summary: string | null
    text: string | null
    title: string | null
  }
  pull_requests: t_pull_request_minimal[]
  started_at: string | null
  status: "queued" | "in_progress" | "completed"
  url: string
}

export type t_check_suite = {
  after: string | null
  app: t_nullable_integration
  before: string | null
  check_runs_url: string
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | "startup_failure"
    | "stale"
    | "null"
    | null
  created_at: string | null
  head_branch: string | null
  head_commit: t_simple_commit
  head_sha: string
  id: number
  latest_check_runs_count: number
  node_id: string
  pull_requests: t_pull_request_minimal[] | null
  repository: t_minimal_repository
  rerequestable?: boolean
  runs_rerequestable?: boolean
  status: "queued" | "in_progress" | "completed" | null
  updated_at: string | null
  url: string | null
}

export type t_check_suite_preference = {
  preferences: {
    auto_trigger_checks?: {
      app_id: number
      setting: boolean
    }[]
  }
  repository: t_minimal_repository
}

export type t_clone_traffic = {
  clones: t_traffic[]
  count: number
  uniques: number
}

export type t_code_frequency_stat = number[]

export type t_code_of_conduct = {
  body?: string
  html_url: string | null
  key: string
  name: string
  url: string
}

export type t_code_of_conduct_simple = {
  html_url: string | null
  key: string
  name: string
  url: string
}

export type t_code_scanning_alert = {
  created_at: t_alert_created_at
  dismissed_at: t_alert_dismissed_at
  dismissed_by: t_nullable_simple_user
  dismissed_comment?: t_code_scanning_alert_dismissed_comment
  dismissed_reason: t_code_scanning_alert_dismissed_reason
  fixed_at?: t_alert_fixed_at
  html_url: t_alert_html_url
  instances_url: t_alert_instances_url
  most_recent_instance: t_code_scanning_alert_instance
  number: t_alert_number
  rule: t_code_scanning_alert_rule
  state: t_code_scanning_alert_state
  tool: t_code_scanning_analysis_tool
  updated_at?: t_alert_updated_at
  url: t_alert_url
}

export type t_code_scanning_alert_classification =
  | "source"
  | "generated"
  | "test"
  | "library"
  | null

export type t_code_scanning_alert_dismissed_comment = string | null

export type t_code_scanning_alert_dismissed_reason =
  | "null"
  | "false positive"
  | "won't fix"
  | "used in tests"
  | null

export type t_code_scanning_alert_environment = string

export type t_code_scanning_alert_instance = {
  analysis_key?: t_code_scanning_analysis_analysis_key
  category?: t_code_scanning_analysis_category
  classifications?: t_code_scanning_alert_classification[]
  commit_sha?: string
  environment?: t_code_scanning_alert_environment
  html_url?: string
  location?: t_code_scanning_alert_location
  message?: {
    text?: string
  }
  ref?: t_code_scanning_ref
  state?: t_code_scanning_alert_state
}

export type t_code_scanning_alert_items = {
  created_at: t_alert_created_at
  dismissed_at: t_alert_dismissed_at
  dismissed_by: t_nullable_simple_user
  dismissed_comment?: t_code_scanning_alert_dismissed_comment
  dismissed_reason: t_code_scanning_alert_dismissed_reason
  fixed_at?: t_alert_fixed_at
  html_url: t_alert_html_url
  instances_url: t_alert_instances_url
  most_recent_instance: t_code_scanning_alert_instance
  number: t_alert_number
  rule: t_code_scanning_alert_rule_summary
  state: t_code_scanning_alert_state
  tool: t_code_scanning_analysis_tool
  updated_at?: t_alert_updated_at
  url: t_alert_url
}

export type t_code_scanning_alert_location = {
  end_column?: number
  end_line?: number
  path?: string
  start_column?: number
  start_line?: number
}

export type t_code_scanning_alert_rule = {
  description?: string
  full_description?: string
  help?: string | null
  help_uri?: string | null
  id?: string | null
  name?: string
  security_severity_level?: "low" | "medium" | "high" | "critical" | null
  severity?: "none" | "note" | "warning" | "error" | null
  tags?: string[] | null
}

export type t_code_scanning_alert_rule_summary = {
  description?: string
  id?: string | null
  name?: string
  severity?: "none" | "note" | "warning" | "error" | null
  tags?: string[] | null
}

export type t_code_scanning_alert_set_state = "open" | "dismissed"

export type t_code_scanning_alert_severity =
  | "critical"
  | "high"
  | "medium"
  | "low"
  | "warning"
  | "note"
  | "error"

export type t_code_scanning_alert_state =
  | "open"
  | "closed"
  | "dismissed"
  | "fixed"

export type t_code_scanning_analysis = {
  analysis_key: t_code_scanning_analysis_analysis_key
  category?: t_code_scanning_analysis_category
  commit_sha: t_code_scanning_analysis_commit_sha
  created_at: t_code_scanning_analysis_created_at
  deletable: boolean
  environment: t_code_scanning_analysis_environment
  error: string
  id: number
  ref: t_code_scanning_ref
  results_count: number
  rules_count: number
  sarif_id: t_code_scanning_analysis_sarif_id
  tool: t_code_scanning_analysis_tool
  url: t_code_scanning_analysis_url
  warning: string
}

export type t_code_scanning_analysis_analysis_key = string

export type t_code_scanning_analysis_category = string

export type t_code_scanning_analysis_commit_sha = string

export type t_code_scanning_analysis_created_at = string

export type t_code_scanning_analysis_deletion = {
  readonly confirm_delete_url: string | null
  readonly next_analysis_url: string | null
}

export type t_code_scanning_analysis_environment = string

export type t_code_scanning_analysis_sarif_file = string

export type t_code_scanning_analysis_sarif_id = string

export type t_code_scanning_analysis_tool = {
  guid?: t_code_scanning_analysis_tool_guid
  name?: t_code_scanning_analysis_tool_name
  version?: t_code_scanning_analysis_tool_version
}

export type t_code_scanning_analysis_tool_guid = string | null

export type t_code_scanning_analysis_tool_name = string

export type t_code_scanning_analysis_tool_version = string | null

export type t_code_scanning_analysis_url = string

export type t_code_scanning_codeql_database = {
  content_type: string
  created_at: string
  id: number
  language: string
  name: string
  size: number
  updated_at: string
  uploader: t_simple_user
  url: string
}

export type t_code_scanning_default_setup = {
  languages?: (
    | "c"
    | "cpp"
    | "csharp"
    | "go"
    | "java"
    | "javascript"
    | "kotlin"
    | "python"
    | "ruby"
    | "typescript"
  )[]
  query_suite?: "default" | "extended"
  state?: "configured" | "not-configured"
  updated_at?: string | null
}

export type t_code_scanning_default_setup_update_response = {
  run_id?: number
  run_url?: string
}

export type t_code_scanning_organization_alert_items = {
  created_at: t_alert_created_at
  dismissed_at: t_alert_dismissed_at
  dismissed_by: t_nullable_simple_user
  dismissed_comment?: t_code_scanning_alert_dismissed_comment
  dismissed_reason: t_code_scanning_alert_dismissed_reason
  fixed_at?: t_alert_fixed_at
  html_url: t_alert_html_url
  instances_url: t_alert_instances_url
  most_recent_instance: t_code_scanning_alert_instance
  number: t_alert_number
  repository: t_simple_repository
  rule: t_code_scanning_alert_rule
  state: t_code_scanning_alert_state
  tool: t_code_scanning_analysis_tool
  updated_at?: t_alert_updated_at
  url: t_alert_url
}

export type t_code_scanning_ref = string

export type t_code_scanning_sarifs_receipt = {
  id?: t_code_scanning_analysis_sarif_id
  readonly url?: string
}

export type t_code_scanning_sarifs_status = {
  readonly analyses_url?: string | null
  readonly errors?: string[] | null
  processing_status?: "pending" | "complete" | "failed"
}

export type t_code_search_result_item = {
  file_size?: number
  git_url: string
  html_url: string
  language?: string | null
  last_modified_at?: string
  line_numbers?: string[]
  name: string
  path: string
  repository: t_minimal_repository
  score: number
  sha: string
  text_matches?: t_search_result_text_matches
  url: string
}

export type t_codeowners_errors = {
  errors: {
    column: number
    kind: string
    line: number
    message: string
    path: string
    source?: string
    suggestion?: string | null
  }[]
}

export type t_codespace = {
  billable_owner: t_simple_user
  created_at: string
  devcontainer_path?: string | null
  display_name?: string | null
  environment_id: string | null
  git_status: {
    ahead?: number
    behind?: number
    has_uncommitted_changes?: boolean
    has_unpushed_changes?: boolean
    ref?: string
  }
  id: number
  idle_timeout_minutes: number | null
  idle_timeout_notice?: string | null
  last_known_stop_notice?: string | null
  last_used_at: string
  location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2"
  machine: t_nullable_codespace_machine
  machines_url: string
  name: string
  owner: t_simple_user
  pending_operation?: boolean | null
  pending_operation_disabled_reason?: string | null
  prebuild: boolean | null
  publish_url?: string | null
  pulls_url: string | null
  recent_folders: string[]
  repository: t_minimal_repository
  retention_expires_at?: string | null
  retention_period_minutes?: number | null
  runtime_constraints?: {
    allowed_port_privacy_settings?: string[] | null
  }
  start_url: string
  state:
    | "Unknown"
    | "Created"
    | "Queued"
    | "Provisioning"
    | "Available"
    | "Awaiting"
    | "Unavailable"
    | "Deleted"
    | "Moved"
    | "Shutdown"
    | "Archived"
    | "Starting"
    | "ShuttingDown"
    | "Failed"
    | "Exporting"
    | "Updating"
    | "Rebuilding"
  stop_url: string
  updated_at: string
  url: string
  web_url: string
}

export type t_codespace_export_details = {
  branch?: string | null
  completed_at?: string | null
  export_url?: string
  html_url?: string | null
  id?: string
  sha?: string | null
  state?: string | null
}

export type t_codespace_machine = {
  cpus: number
  display_name: string
  memory_in_bytes: number
  name: string
  operating_system: string
  prebuild_availability: "none" | "ready" | "in_progress" | null
  storage_in_bytes: number
}

export type t_codespace_with_full_repository = {
  billable_owner: t_simple_user
  created_at: string
  devcontainer_path?: string | null
  display_name?: string | null
  environment_id: string | null
  git_status: {
    ahead?: number
    behind?: number
    has_uncommitted_changes?: boolean
    has_unpushed_changes?: boolean
    ref?: string
  }
  id: number
  idle_timeout_minutes: number | null
  idle_timeout_notice?: string | null
  last_used_at: string
  location: "EastUs" | "SouthEastAsia" | "WestEurope" | "WestUs2"
  machine: t_nullable_codespace_machine
  machines_url: string
  name: string
  owner: t_simple_user
  pending_operation?: boolean | null
  pending_operation_disabled_reason?: string | null
  prebuild: boolean | null
  publish_url?: string | null
  pulls_url: string | null
  recent_folders: string[]
  repository: t_full_repository
  retention_expires_at?: string | null
  retention_period_minutes?: number | null
  runtime_constraints?: {
    allowed_port_privacy_settings?: string[] | null
  }
  start_url: string
  state:
    | "Unknown"
    | "Created"
    | "Queued"
    | "Provisioning"
    | "Available"
    | "Awaiting"
    | "Unavailable"
    | "Deleted"
    | "Moved"
    | "Shutdown"
    | "Archived"
    | "Starting"
    | "ShuttingDown"
    | "Failed"
    | "Exporting"
    | "Updating"
    | "Rebuilding"
  stop_url: string
  updated_at: string
  url: string
  web_url: string
}

export type t_codespaces_org_secret = {
  created_at: string
  name: string
  selected_repositories_url?: string
  updated_at: string
  visibility: "all" | "private" | "selected"
}

export type t_codespaces_public_key = {
  created_at?: string
  id?: number
  key: string
  key_id: string
  title?: string
  url?: string
}

export type t_codespaces_secret = {
  created_at: string
  name: string
  selected_repositories_url: string
  updated_at: string
  visibility: "all" | "private" | "selected"
}

export type t_codespaces_user_public_key = {
  key: string
  key_id: string
}

export type t_collaborator = {
  avatar_url: string
  email?: string | null
  events_url: string
  followers_url: string
  following_url: string
  gists_url: string
  gravatar_id: string | null
  html_url: string
  id: number
  login: string
  name?: string | null
  node_id: string
  organizations_url: string
  permissions?: {
    admin: boolean
    maintain?: boolean
    pull: boolean
    push: boolean
    triage?: boolean
  }
  received_events_url: string
  repos_url: string
  role_name: string
  site_admin: boolean
  starred_url: string
  subscriptions_url: string
  type: string
  url: string
}

export type t_combined_billing_usage = {
  days_left_in_billing_cycle: number
  estimated_paid_storage_for_month: number
  estimated_storage_for_month: number
}

export type t_combined_commit_status = {
  commit_url: string
  repository: t_minimal_repository
  sha: string
  state: string
  statuses: t_simple_commit_status[]
  total_count: number
  url: string
}

export type t_commit = {
  author: t_nullable_simple_user
  comments_url: string
  commit: {
    author: t_nullable_git_user
    comment_count: number
    committer: t_nullable_git_user
    message: string
    tree: {
      sha: string
      url: string
    }
    url: string
    verification?: t_verification
  }
  committer: t_nullable_simple_user
  files?: t_diff_entry[]
  html_url: string
  node_id: string
  parents: {
    html_url?: string
    sha: string
    url: string
  }[]
  sha: string
  stats?: {
    additions?: number
    deletions?: number
    total?: number
  }
  url: string
}

export type t_commit_activity = {
  days: number[]
  total: number
  week: number
}

export type t_commit_comment = {
  author_association: t_author_association
  body: string
  commit_id: string
  created_at: string
  html_url: string
  id: number
  line: number | null
  node_id: string
  path: string | null
  position: number | null
  reactions?: t_reaction_rollup
  updated_at: string
  url: string
  user: t_nullable_simple_user
}

export type t_commit_comparison = {
  ahead_by: number
  base_commit: t_commit
  behind_by: number
  commits: t_commit[]
  diff_url: string
  files?: t_diff_entry[]
  html_url: string
  merge_base_commit: t_commit
  patch_url: string
  permalink_url: string
  status: "diverged" | "ahead" | "behind" | "identical"
  total_commits: number
  url: string
}

export type t_commit_search_result_item = {
  author: t_nullable_simple_user
  comments_url: string
  commit: {
    author: {
      date: string
      email: string
      name: string
    }
    comment_count: number
    committer: t_nullable_git_user
    message: string
    tree: {
      sha: string
      url: string
    }
    url: string
    verification?: t_verification
  }
  committer: t_nullable_git_user
  html_url: string
  node_id: string
  parents: {
    html_url?: string
    sha?: string
    url?: string
  }[]
  repository: t_minimal_repository
  score: number
  sha: string
  text_matches?: t_search_result_text_matches
  url: string
}

export type t_community_profile = {
  content_reports_enabled?: boolean
  description: string | null
  documentation: string | null
  files: {
    code_of_conduct: t_nullable_code_of_conduct_simple
    code_of_conduct_file: t_nullable_community_health_file
    contributing: t_nullable_community_health_file
    issue_template: t_nullable_community_health_file
    license: t_nullable_license_simple
    pull_request_template: t_nullable_community_health_file
    readme: t_nullable_community_health_file
  }
  health_percentage: number
  updated_at: string | null
}

export type t_content_directory = {
  _links: {
    git: string | null
    html: string | null
    self: string
  }
  content?: string
  download_url: string | null
  git_url: string | null
  html_url: string | null
  name: string
  path: string
  sha: string
  size: number
  type: "dir" | "file" | "submodule" | "symlink"
  url: string
}[]

export type t_content_file = {
  _links: {
    git: string | null
    html: string | null
    self: string
  }
  content: string
  download_url: string | null
  encoding: string
  git_url: string | null
  html_url: string | null
  name: string
  path: string
  sha: string
  size: number
  submodule_git_url?: string
  target?: string
  type: "file"
  url: string
}

export type t_content_submodule = {
  _links: {
    git: string | null
    html: string | null
    self: string
  }
  download_url: string | null
  git_url: string | null
  html_url: string | null
  name: string
  path: string
  sha: string
  size: number
  submodule_git_url: string
  type: "submodule"
  url: string
}

export type t_content_symlink = {
  _links: {
    git: string | null
    html: string | null
    self: string
  }
  download_url: string | null
  git_url: string | null
  html_url: string | null
  name: string
  path: string
  sha: string
  size: number
  target: string
  type: "symlink"
  url: string
}

export type t_content_traffic = {
  count: number
  path: string
  title: string
  uniques: number
}

export type t_contributor = {
  avatar_url?: string
  contributions: number
  email?: string
  events_url?: string
  followers_url?: string
  following_url?: string
  gists_url?: string
  gravatar_id?: string | null
  html_url?: string
  id?: number
  login?: string
  name?: string
  node_id?: string
  organizations_url?: string
  received_events_url?: string
  repos_url?: string
  site_admin?: boolean
  starred_url?: string
  subscriptions_url?: string
  type: string
  url?: string
}

export type t_contributor_activity = {
  author: t_nullable_simple_user
  total: number
  weeks: {
    a?: number
    c?: number
    d?: number
    w?: number
  }[]
}

export type t_converted_note_to_issue_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_integration
  project_card?: {
    column_name: string
    id: number
    previous_column_name?: string
    project_id: number
    project_url: string
    url: string
  }
  url: string
}

export type t_custom_deployment_rule_app = {
  id: number
  integration_url: string
  node_id: string
  slug: string
}

export type t_demilestoned_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  milestone: {
    title: string
  }
  node_id: string
  performed_via_github_app: t_nullable_integration
  url: string
}

export type t_dependabot_alert = {
  auto_dismissed_at?: t_alert_auto_dismissed_at
  created_at: t_alert_created_at
  readonly dependency: {
    readonly manifest_path?: string
    package?: t_dependabot_alert_package
    readonly scope?: "development" | "runtime" | null
  }
  dismissed_at: t_alert_dismissed_at
  dismissed_by: t_nullable_simple_user
  dismissed_comment: string | null
  dismissed_reason:
    | "fix_started"
    | "inaccurate"
    | "no_bandwidth"
    | "not_used"
    | "tolerable_risk"
    | null
  fixed_at: t_alert_fixed_at
  html_url: t_alert_html_url
  number: t_alert_number
  security_advisory: t_dependabot_alert_security_advisory
  security_vulnerability: t_dependabot_alert_security_vulnerability
  readonly state: "auto_dismissed" | "dismissed" | "fixed" | "open"
  updated_at: t_alert_updated_at
  url: t_alert_url
}

export type t_dependabot_alert_package = {
  readonly ecosystem: string
  readonly name: string
}

export type t_dependabot_alert_security_advisory = {
  readonly cve_id: string | null
  readonly cvss: {
    readonly score: number
    readonly vector_string: string | null
  }
  readonly cwes: {
    readonly cwe_id: string
    readonly name: string
  }[]
  readonly description: string
  readonly ghsa_id: string
  readonly identifiers: {
    readonly type: "CVE" | "GHSA"
    readonly value: string
  }[]
  readonly published_at: string
  readonly references: {
    readonly url: string
  }[]
  readonly severity: "low" | "medium" | "high" | "critical"
  readonly summary: string
  readonly updated_at: string
  readonly vulnerabilities: t_dependabot_alert_security_vulnerability[]
  readonly withdrawn_at: string | null
}

export type t_dependabot_alert_security_vulnerability = {
  readonly first_patched_version: {
    readonly identifier: string
  } | null
  package: t_dependabot_alert_package
  readonly severity: "low" | "medium" | "high" | "critical"
  readonly vulnerable_version_range: string
}

export type t_dependabot_alert_with_repository = {
  auto_dismissed_at?: t_alert_auto_dismissed_at
  created_at: t_alert_created_at
  readonly dependency: {
    readonly manifest_path?: string
    package?: t_dependabot_alert_package
    readonly scope?: "development" | "runtime" | null
  }
  dismissed_at: t_alert_dismissed_at
  dismissed_by: t_nullable_simple_user
  dismissed_comment: string | null
  dismissed_reason:
    | "fix_started"
    | "inaccurate"
    | "no_bandwidth"
    | "not_used"
    | "tolerable_risk"
    | null
  fixed_at: t_alert_fixed_at
  html_url: t_alert_html_url
  number: t_alert_number
  repository: t_simple_repository
  security_advisory: t_dependabot_alert_security_advisory
  security_vulnerability: t_dependabot_alert_security_vulnerability
  readonly state: "auto_dismissed" | "dismissed" | "fixed" | "open"
  updated_at: t_alert_updated_at
  url: t_alert_url
}

export type t_dependabot_public_key = {
  key: string
  key_id: string
}

export type t_dependabot_secret = {
  created_at: string
  name: string
  updated_at: string
}

export type t_dependency = {
  dependencies?: string[]
  metadata?: t_metadata
  package_url?: string
  relationship?: "direct" | "indirect"
  scope?: "runtime" | "development"
}

export type t_dependency_graph_diff = {
  change_type: "added" | "removed"
  ecosystem: string
  license: string | null
  manifest: string
  name: string
  package_url: string | null
  scope: "unknown" | "runtime" | "development"
  source_repository_url: string | null
  version: string
  vulnerabilities: {
    advisory_ghsa_id: string
    advisory_summary: string
    advisory_url: string
    severity: string
  }[]
}[]

export type t_dependency_graph_spdx_sbom = {
  sbom: {
    SPDXID: string
    creationInfo: {
      created: string
      creators: string[]
    }
    dataLicense: string
    documentDescribes: string[]
    documentNamespace: string
    name: string
    packages: {
      SPDXID?: string
      downloadLocation?: string
      externalRefs?: {
        referenceCategory: string
        referenceLocator: string
        referenceType: string
      }[]
      filesAnalyzed?: boolean
      licenseConcluded?: string
      licenseDeclared?: string
      name?: string
      supplier?: string
      versionInfo?: string
    }[]
    spdxVersion: string
  }
}

export type t_deploy_key = {
  added_by?: string | null
  created_at: string
  id: number
  key: string
  last_used?: string | null
  read_only: boolean
  title: string
  url: string
  verified: boolean
}

export type t_deployment = {
  created_at: string
  creator: t_nullable_simple_user
  description: string | null
  environment: string
  id: number
  node_id: string
  original_environment?: string
  payload:
    | {
        [key: string]: unknown
      }
    | string
  performed_via_github_app?: t_nullable_integration
  production_environment?: boolean
  ref: string
  repository_url: string
  sha: string
  statuses_url: string
  task: string
  transient_environment?: boolean
  updated_at: string
  url: string
}

export type t_deployment_branch_policy = {
  id?: number
  name?: string
  node_id?: string
}

export type t_deployment_branch_policy_settings = {
  custom_branch_policies: boolean
  protected_branches: boolean
} | null

export type t_deployment_protection_rule = {
  app: t_custom_deployment_rule_app
  enabled: boolean
  id: number
  node_id: string
}

export type t_deployment_reviewer_type = "User" | "Team"

export type t_deployment_simple = {
  created_at: string
  description: string | null
  environment: string
  id: number
  node_id: string
  original_environment?: string
  performed_via_github_app?: t_nullable_integration
  production_environment?: boolean
  repository_url: string
  statuses_url: string
  task: string
  transient_environment?: boolean
  updated_at: string
  url: string
}

export type t_deployment_status = {
  created_at: string
  creator: t_nullable_simple_user
  deployment_url: string
  description: string
  environment?: string
  environment_url?: string
  id: number
  log_url?: string
  node_id: string
  performed_via_github_app?: t_nullable_integration
  repository_url: string
  state:
    | "error"
    | "failure"
    | "inactive"
    | "pending"
    | "success"
    | "queued"
    | "in_progress"
  target_url: string
  updated_at: string
  url: string
}

export type t_diff_entry = {
  additions: number
  blob_url: string
  changes: number
  contents_url: string
  deletions: number
  filename: string
  patch?: string
  previous_filename?: string
  raw_url: string
  sha: string
  status:
    | "added"
    | "removed"
    | "modified"
    | "renamed"
    | "copied"
    | "changed"
    | "unchanged"
}

export type t_email = {
  email: string
  primary: boolean
  verified: boolean
  visibility: string | null
}

export type t_empty_object = EmptyObject

export type t_enabled_repositories = "all" | "none" | "selected"

export type t_enterprise = {
  avatar_url: string
  created_at: string | null
  description?: string | null
  html_url: string
  id: number
  name: string
  node_id: string
  slug: string
  updated_at: string | null
  website_url?: string | null
}

export type t_environment = {
  created_at: string
  deployment_branch_policy?: t_deployment_branch_policy_settings
  html_url: string
  id: number
  name: string
  node_id: string
  protection_rules?: (
    | {
        id: number
        node_id: string
        type: string
        wait_timer?: t_wait_timer
      }
    | {
        id: number
        node_id: string
        reviewers?: {
          reviewer?: t_simple_user | t_team
          type?: t_deployment_reviewer_type
        }[]
        type: string
      }
    | {
        id: number
        node_id: string
        type: string
      }
  )[]
  updated_at: string
  url: string
}

export type t_environment_approvals = {
  comment: string
  environments: {
    created_at?: string
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    updated_at?: string
    url?: string
  }[]
  state: "approved" | "rejected" | "pending"
  user: t_simple_user
}

export type t_event = {
  actor: t_actor
  created_at: string | null
  id: string
  org?: t_actor
  payload: {
    action?: string
    comment?: t_issue_comment
    issue?: t_issue
    pages?: {
      action?: string
      html_url?: string
      page_name?: string
      sha?: string
      summary?: string | null
      title?: string
    }[]
  }
  public: boolean
  repo: {
    id: number
    name: string
    url: string
  }
  type: string | null
}

export type t_feed = {
  _links: {
    current_user?: t_link_with_type
    current_user_actor?: t_link_with_type
    current_user_organization?: t_link_with_type
    current_user_organizations?: t_link_with_type[]
    current_user_public?: t_link_with_type
    repository_discussions?: t_link_with_type
    repository_discussions_category?: t_link_with_type
    security_advisories?: t_link_with_type
    timeline: t_link_with_type
    user: t_link_with_type
  }
  current_user_actor_url?: string
  current_user_organization_url?: string
  current_user_organization_urls?: string[]
  current_user_public_url?: string
  current_user_url?: string
  repository_discussions_category_url?: string
  repository_discussions_url?: string
  security_advisories_url?: string
  timeline_url: string
  user_url: string
}

export type t_file_commit = {
  commit: {
    author?: {
      date?: string
      email?: string
      name?: string
    }
    committer?: {
      date?: string
      email?: string
      name?: string
    }
    html_url?: string
    message?: string
    node_id?: string
    parents?: {
      html_url?: string
      sha?: string
      url?: string
    }[]
    sha?: string
    tree?: {
      sha?: string
      url?: string
    }
    url?: string
    verification?: {
      payload?: string | null
      reason?: string
      signature?: string | null
      verified?: boolean
    }
  }
  content: {
    _links?: {
      git?: string
      html?: string
      self?: string
    }
    download_url?: string
    git_url?: string
    html_url?: string
    name?: string
    path?: string
    sha?: string
    size?: number
    type?: string
    url?: string
  } | null
}

export type t_full_repository = {
  allow_auto_merge?: boolean
  allow_forking?: boolean
  allow_merge_commit?: boolean
  allow_rebase_merge?: boolean
  allow_squash_merge?: boolean
  allow_update_branch?: boolean
  anonymous_access_enabled?: boolean
  archive_url: string
  archived: boolean
  assignees_url: string
  blobs_url: string
  branches_url: string
  clone_url: string
  code_of_conduct?: t_code_of_conduct_simple
  collaborators_url: string
  comments_url: string
  commits_url: string
  compare_url: string
  contents_url: string
  contributors_url: string
  created_at: string
  default_branch: string
  delete_branch_on_merge?: boolean
  deployments_url: string
  description: string | null
  disabled: boolean
  downloads_url: string
  events_url: string
  fork: boolean
  forks: number
  forks_count: number
  forks_url: string
  full_name: string
  git_commits_url: string
  git_refs_url: string
  git_tags_url: string
  git_url: string
  has_discussions: boolean
  has_downloads: boolean
  has_issues: boolean
  has_pages: boolean
  has_projects: boolean
  has_wiki: boolean
  homepage: string | null
  hooks_url: string
  html_url: string
  id: number
  is_template?: boolean
  issue_comment_url: string
  issue_events_url: string
  issues_url: string
  keys_url: string
  labels_url: string
  language: string | null
  languages_url: string
  license: t_nullable_license_simple
  master_branch?: string
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
  merges_url: string
  milestones_url: string
  mirror_url: string | null
  name: string
  network_count: number
  node_id: string
  notifications_url: string
  open_issues: number
  open_issues_count: number
  organization?: t_nullable_simple_user
  owner: t_simple_user
  parent?: t_repository
  permissions?: {
    admin: boolean
    maintain?: boolean
    pull: boolean
    push: boolean
    triage?: boolean
  }
  private: boolean
  pulls_url: string
  pushed_at: string
  releases_url: string
  security_and_analysis?: t_security_and_analysis
  size: number
  source?: t_repository
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
  ssh_url: string
  stargazers_count: number
  stargazers_url: string
  statuses_url: string
  subscribers_count: number
  subscribers_url: string
  subscription_url: string
  svn_url: string
  tags_url: string
  teams_url: string
  temp_clone_token?: string | null
  template_repository?: t_nullable_repository
  topics?: string[]
  trees_url: string
  updated_at: string
  url: string
  use_squash_pr_title_as_default?: boolean
  visibility?: string
  watchers: number
  watchers_count: number
  web_commit_signoff_required?: boolean
}

export type t_gist_comment = {
  author_association: t_author_association
  body: string
  created_at: string
  id: number
  node_id: string
  updated_at: string
  url: string
  user: t_nullable_simple_user
}

export type t_gist_commit = {
  change_status: {
    additions?: number
    deletions?: number
    total?: number
  }
  committed_at: string
  url: string
  user: t_nullable_simple_user
  version: string
}

export type t_gist_history = {
  change_status?: {
    additions?: number
    deletions?: number
    total?: number
  }
  committed_at?: string
  url?: string
  user?: t_nullable_simple_user
  version?: string
}

export type t_gist_simple = {
  comments?: number
  comments_url?: string
  commits_url?: string
  created_at?: string
  description?: string | null
  files?: {
    [key: string]: {
      content?: string
      filename?: string
      language?: string
      raw_url?: string
      size?: number
      truncated?: boolean
      type?: string
    } | null
  }
  fork_of?: {
    comments: number
    comments_url: string
    commits_url: string
    created_at: string
    description: string | null
    files: {
      [key: string]: {
        filename?: string
        language?: string
        raw_url?: string
        size?: number
        type?: string
      }
    }
    forks?: EmptyObject[]
    forks_url: string
    git_pull_url: string
    git_push_url: string
    history?: EmptyObject[]
    html_url: string
    id: string
    node_id: string
    owner?: t_nullable_simple_user
    public: boolean
    truncated?: boolean
    updated_at: string
    url: string
    user: t_nullable_simple_user
  } | null
  forks?:
    | {
        created_at?: string
        id?: string
        updated_at?: string
        url?: string
        user?: t_public_user
      }[]
    | null
  forks_url?: string
  git_pull_url?: string
  git_push_url?: string
  history?: t_gist_history[] | null
  html_url?: string
  id?: string
  node_id?: string
  owner?: t_simple_user
  public?: boolean
  truncated?: boolean
  updated_at?: string
  url?: string
  user?: string | null
}

export type t_git_commit = {
  author: {
    date: string
    email: string
    name: string
  }
  committer: {
    date: string
    email: string
    name: string
  }
  html_url: string
  message: string
  node_id: string
  parents: {
    html_url: string
    sha: string
    url: string
  }[]
  sha: string
  tree: {
    sha: string
    url: string
  }
  url: string
  verification: {
    payload: string | null
    reason: string
    signature: string | null
    verified: boolean
  }
}

export type t_git_ref = {
  node_id: string
  object: {
    sha: string
    type: string
    url: string
  }
  ref: string
  url: string
}

export type t_git_tag = {
  message: string
  node_id: string
  object: {
    sha: string
    type: string
    url: string
  }
  sha: string
  tag: string
  tagger: {
    date: string
    email: string
    name: string
  }
  url: string
  verification?: t_verification
}

export type t_git_tree = {
  sha: string
  tree: {
    mode?: string
    path?: string
    sha?: string
    size?: number
    type?: string
    url?: string
  }[]
  truncated: boolean
  url: string
}

export type t_gitignore_template = {
  name: string
  source: string
}

export type t_gpg_key = {
  can_certify: boolean
  can_encrypt_comms: boolean
  can_encrypt_storage: boolean
  can_sign: boolean
  created_at: string
  emails: {
    email?: string
    verified?: boolean
  }[]
  expires_at: string | null
  id: number
  key_id: string
  name?: string | null
  primary_key_id: number | null
  public_key: string
  raw_key: string | null
  revoked: boolean
  subkeys: {
    can_certify?: boolean
    can_encrypt_comms?: boolean
    can_encrypt_storage?: boolean
    can_sign?: boolean
    created_at?: string
    emails?: {
      email?: string
      verified?: boolean
    }[]
    expires_at?: string | null
    id?: number
    key_id?: string
    primary_key_id?: number
    public_key?: string
    raw_key?: string | null
    revoked?: boolean
    subkeys?: EmptyObject[]
  }[]
}

export type t_hook = {
  active: boolean
  config: {
    content_type?: t_webhook_config_content_type
    digest?: string
    email?: string
    insecure_ssl?: t_webhook_config_insecure_ssl
    password?: string
    room?: string
    secret?: t_webhook_config_secret
    subdomain?: string
    token?: string
    url?: t_webhook_config_url
  }
  created_at: string
  deliveries_url?: string
  events: string[]
  id: number
  last_response: t_hook_response
  name: string
  ping_url: string
  test_url: string
  type: string
  updated_at: string
  url: string
}

export type t_hook_delivery = {
  action: string | null
  delivered_at: string
  duration: number
  event: string
  guid: string
  id: number
  installation_id: number | null
  redelivery: boolean
  repository_id: number | null
  request: {
    headers: {
      [key: string]: unknown
    } | null
    payload: {
      [key: string]: unknown
    } | null
  }
  response: {
    headers: {
      [key: string]: unknown
    } | null
    payload: string | null
  }
  status: string
  status_code: number
  url?: string
}

export type t_hook_delivery_item = {
  action: string | null
  delivered_at: string
  duration: number
  event: string
  guid: string
  id: number
  installation_id: number | null
  redelivery: boolean
  repository_id: number | null
  status: string
  status_code: number
}

export type t_hook_response = {
  code: number | null
  message: string | null
  status: string | null
}

export type t_hovercard = {
  contexts: {
    message: string
    octicon: string
  }[]
}

export type t_import = {
  authors_count?: number | null
  authors_url: string
  commit_count?: number | null
  error_message?: string | null
  failed_step?: string | null
  has_large_files?: boolean
  html_url: string
  import_percent?: number | null
  large_files_count?: number
  large_files_size?: number
  message?: string
  project_choices?: {
    human_name?: string
    tfvc_project?: string
    vcs?: string
  }[]
  push_percent?: number | null
  repository_url: string
  status:
    | "auth"
    | "error"
    | "none"
    | "detecting"
    | "choose"
    | "auth_failed"
    | "importing"
    | "mapping"
    | "waiting_to_push"
    | "pushing"
    | "complete"
    | "setup"
    | "unknown"
    | "detection_found_multiple"
    | "detection_found_nothing"
    | "detection_needs_auth"
  status_text?: string | null
  svc_root?: string
  svn_root?: string
  tfvc_project?: string
  url: string
  use_lfs?: boolean
  vcs: string | null
  vcs_url: string
}

export type t_installation = {
  access_tokens_url: string
  account: t_simple_user | t_enterprise | null
  app_id: number
  app_slug: string
  contact_email?: string | null
  created_at: string
  events: string[]
  has_multiple_single_files?: boolean
  html_url: string
  id: number
  permissions: t_app_permissions
  repositories_url: string
  repository_selection: "all" | "selected"
  single_file_name: string | null
  single_file_paths?: string[]
  suspended_at: string | null
  suspended_by: t_nullable_simple_user
  target_id: number
  target_type: string
  updated_at: string
}

export type t_installation_token = {
  expires_at: string
  has_multiple_single_files?: boolean
  permissions?: t_app_permissions
  repositories?: t_repository[]
  repository_selection?: "all" | "selected"
  single_file?: string
  single_file_paths?: string[]
  token: string
}

export type t_integration = {
  client_id?: string
  client_secret?: string
  created_at: string
  description: string | null
  events: string[]
  external_url: string
  html_url: string
  id: number
  installations_count?: number
  name: string
  node_id: string
  owner: t_nullable_simple_user
  pem?: string
  permissions:
    | {
        checks?: string
        contents?: string
        deployments?: string
        issues?: string
        metadata?: string
      }
    | {
        [key: string]: string
      }
  slug?: string
  updated_at: string
  webhook_secret?: string | null
}

export type t_integration_installation_request = {
  account: t_simple_user | t_enterprise
  created_at: string
  id: number
  node_id?: string
  requester: t_simple_user
}

export type t_interaction_expiry =
  | "one_day"
  | "three_days"
  | "one_week"
  | "one_month"
  | "six_months"

export type t_interaction_group =
  | "existing_users"
  | "contributors_only"
  | "collaborators_only"

export type t_interaction_limit_response = {
  expires_at: string
  limit: t_interaction_group
  origin: string
}

export type t_issue = {
  active_lock_reason?: string | null
  assignee: t_nullable_simple_user
  assignees?: t_simple_user[] | null
  author_association: t_author_association
  body?: string | null
  body_html?: string
  body_text?: string
  closed_at: string | null
  closed_by?: t_nullable_simple_user
  comments: number
  comments_url: string
  created_at: string
  draft?: boolean
  events_url: string
  html_url: string
  id: number
  labels: (
    | string
    | {
        color?: string | null
        default?: boolean
        description?: string | null
        id?: number
        name?: string
        node_id?: string
        url?: string
      }
  )[]
  labels_url: string
  locked: boolean
  milestone: t_nullable_milestone
  node_id: string
  number: number
  performed_via_github_app?: t_nullable_integration
  pull_request?: {
    diff_url: string | null
    html_url: string | null
    merged_at?: string | null
    patch_url: string | null
    url: string | null
  }
  reactions?: t_reaction_rollup
  repository?: t_repository
  repository_url: string
  state: string
  state_reason?: "completed" | "reopened" | "not_planned" | null
  timeline_url?: string
  title: string
  updated_at: string
  url: string
  user: t_nullable_simple_user
}

export type t_issue_comment = {
  author_association: t_author_association
  body?: string
  body_html?: string
  body_text?: string
  created_at: string
  html_url: string
  id: number
  issue_url: string
  node_id: string
  performed_via_github_app?: t_nullable_integration
  reactions?: t_reaction_rollup
  updated_at: string
  url: string
  user: t_nullable_simple_user
}

export type t_issue_event = {
  actor: t_nullable_simple_user
  assignee?: t_nullable_simple_user
  assigner?: t_nullable_simple_user
  author_association?: t_author_association
  commit_id: string | null
  commit_url: string | null
  created_at: string
  dismissed_review?: t_issue_event_dismissed_review
  event: string
  id: number
  issue?: t_nullable_issue
  label?: t_issue_event_label
  lock_reason?: string | null
  milestone?: t_issue_event_milestone
  node_id: string
  performed_via_github_app?: t_nullable_integration
  project_card?: t_issue_event_project_card
  rename?: t_issue_event_rename
  requested_reviewer?: t_nullable_simple_user
  requested_team?: t_team
  review_requester?: t_nullable_simple_user
  url: string
}

export type t_issue_event_dismissed_review = {
  dismissal_commit_id?: string | null
  dismissal_message: string | null
  review_id: number
  state: string
}

export type t_issue_event_for_issue =
  | t_labeled_issue_event
  | t_unlabeled_issue_event
  | t_assigned_issue_event
  | t_unassigned_issue_event
  | t_milestoned_issue_event
  | t_demilestoned_issue_event
  | t_renamed_issue_event
  | t_review_requested_issue_event
  | t_review_request_removed_issue_event
  | t_review_dismissed_issue_event
  | t_locked_issue_event
  | t_added_to_project_issue_event
  | t_moved_column_in_project_issue_event
  | t_removed_from_project_issue_event
  | t_converted_note_to_issue_issue_event

export type t_issue_event_label = {
  color: string | null
  name: string | null
}

export type t_issue_event_milestone = {
  title: string
}

export type t_issue_event_project_card = {
  column_name: string
  id: number
  previous_column_name?: string
  project_id: number
  project_url: string
  url: string
}

export type t_issue_event_rename = {
  from: string
  to: string
}

export type t_issue_search_result_item = {
  active_lock_reason?: string | null
  assignee: t_nullable_simple_user
  assignees?: t_simple_user[] | null
  author_association: t_author_association
  body?: string
  body_html?: string
  body_text?: string
  closed_at: string | null
  comments: number
  comments_url: string
  created_at: string
  draft?: boolean
  events_url: string
  html_url: string
  id: number
  labels: {
    color?: string
    default?: boolean
    description?: string | null
    id?: number
    name?: string
    node_id?: string
    url?: string
  }[]
  labels_url: string
  locked: boolean
  milestone: t_nullable_milestone
  node_id: string
  number: number
  performed_via_github_app?: t_nullable_integration
  pull_request?: {
    diff_url: string | null
    html_url: string | null
    merged_at?: string | null
    patch_url: string | null
    url: string | null
  }
  reactions?: t_reaction_rollup
  repository?: t_repository
  repository_url: string
  score: number
  state: string
  state_reason?: string | null
  text_matches?: t_search_result_text_matches
  timeline_url?: string
  title: string
  updated_at: string
  url: string
  user: t_nullable_simple_user
}

export type t_job = {
  check_run_url: string
  completed_at: string | null
  conclusion:
    | "success"
    | "failure"
    | "neutral"
    | "cancelled"
    | "skipped"
    | "timed_out"
    | "action_required"
    | null
  created_at: string
  head_branch: string | null
  head_sha: string
  html_url: string | null
  id: number
  labels: string[]
  name: string
  node_id: string
  run_attempt?: number
  run_id: number
  run_url: string
  runner_group_id: number | null
  runner_group_name: string | null
  runner_id: number | null
  runner_name: string | null
  started_at: string
  status: "queued" | "in_progress" | "completed"
  steps?: {
    completed_at?: string | null
    conclusion: string | null
    name: string
    number: number
    started_at?: string | null
    status: "queued" | "in_progress" | "completed"
  }[]
  url: string
  workflow_name: string | null
}

export type t_key = {
  created_at: string
  id: number
  key: string
  read_only: boolean
  title: string
  url: string
  verified: boolean
}

export type t_key_simple = {
  id: number
  key: string
}

export type t_label = {
  color: string
  default: boolean
  description: string | null
  id: number
  name: string
  node_id: string
  url: string
}

export type t_label_search_result_item = {
  color: string
  default: boolean
  description: string | null
  id: number
  name: string
  node_id: string
  score: number
  text_matches?: t_search_result_text_matches
  url: string
}

export type t_labeled_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  label: {
    color: string
    name: string
  }
  node_id: string
  performed_via_github_app: t_nullable_integration
  url: string
}

export type t_language = {
  [key: string]: number
}

export type t_license = {
  body: string
  conditions: string[]
  description: string
  featured: boolean
  html_url: string
  implementation: string
  key: string
  limitations: string[]
  name: string
  node_id: string
  permissions: string[]
  spdx_id: string | null
  url: string | null
}

export type t_license_content = {
  _links: {
    git: string | null
    html: string | null
    self: string
  }
  content: string
  download_url: string | null
  encoding: string
  git_url: string | null
  html_url: string | null
  license: t_nullable_license_simple
  name: string
  path: string
  sha: string
  size: number
  type: string
  url: string
}

export type t_license_simple = {
  html_url?: string
  key: string
  name: string
  node_id: string
  spdx_id: string | null
  url: string | null
}

export type t_link = {
  href: string
}

export type t_link_with_type = {
  href: string
  type: string
}

export type t_locked_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  lock_reason: string | null
  node_id: string
  performed_via_github_app: t_nullable_integration
  url: string
}

export type t_manifest = {
  file?: {
    source_location?: string
  }
  metadata?: t_metadata
  name: string
  resolved?: {
    [key: string]: t_dependency
  }
}

export type t_marketplace_account = {
  email?: string | null
  id: number
  login: string
  node_id?: string
  organization_billing_email?: string | null
  type: string
  url: string
}

export type t_marketplace_listing_plan = {
  accounts_url: string
  bullets: string[]
  description: string
  has_free_trial: boolean
  id: number
  monthly_price_in_cents: number
  name: string
  number: number
  price_model: "FREE" | "FLAT_RATE" | "PER_UNIT"
  state: string
  unit_name: string | null
  url: string
  yearly_price_in_cents: number
}

export type t_marketplace_purchase = {
  email?: string | null
  id: number
  login: string
  marketplace_pending_change?: {
    effective_date?: string
    id?: number
    is_installed?: boolean
    plan?: t_marketplace_listing_plan
    unit_count?: number | null
  } | null
  marketplace_purchase: {
    billing_cycle?: string
    free_trial_ends_on?: string | null
    is_installed?: boolean
    next_billing_date?: string | null
    on_free_trial?: boolean
    plan?: t_marketplace_listing_plan
    unit_count?: number | null
    updated_at?: string
  }
  organization_billing_email?: string
  type: string
  url: string
}

export type t_merged_upstream = {
  base_branch?: string
  merge_type?: "merge" | "fast-forward" | "none"
  message?: string
}

export type t_metadata = {
  [key: string]: string | number | boolean | null
}

export type t_migration = {
  archive_url?: string
  created_at: string
  exclude?: string[]
  exclude_attachments: boolean
  exclude_git_data: boolean
  exclude_metadata: boolean
  exclude_owner_projects: boolean
  exclude_releases: boolean
  guid: string
  id: number
  lock_repositories: boolean
  node_id: string
  org_metadata_only: boolean
  owner: t_nullable_simple_user
  repositories: t_repository[]
  state: string
  updated_at: string
  url: string
}

export type t_milestone = {
  closed_at: string | null
  closed_issues: number
  created_at: string
  creator: t_nullable_simple_user
  description: string | null
  due_on: string | null
  html_url: string
  id: number
  labels_url: string
  node_id: string
  number: number
  open_issues: number
  state: "open" | "closed"
  title: string
  updated_at: string
  url: string
}

export type t_milestoned_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  milestone: {
    title: string
  }
  node_id: string
  performed_via_github_app: t_nullable_integration
  url: string
}

export type t_minimal_repository = {
  allow_forking?: boolean
  archive_url: string
  archived?: boolean
  assignees_url: string
  blobs_url: string
  branches_url: string
  clone_url?: string
  code_of_conduct?: t_code_of_conduct
  collaborators_url: string
  comments_url: string
  commits_url: string
  compare_url: string
  contents_url: string
  contributors_url: string
  created_at?: string | null
  default_branch?: string
  delete_branch_on_merge?: boolean
  deployments_url: string
  description: string | null
  disabled?: boolean
  downloads_url: string
  events_url: string
  fork: boolean
  forks?: number
  forks_count?: number
  forks_url: string
  full_name: string
  git_commits_url: string
  git_refs_url: string
  git_tags_url: string
  git_url?: string
  has_discussions?: boolean
  has_downloads?: boolean
  has_issues?: boolean
  has_pages?: boolean
  has_projects?: boolean
  has_wiki?: boolean
  homepage?: string | null
  hooks_url: string
  html_url: string
  id: number
  is_template?: boolean
  issue_comment_url: string
  issue_events_url: string
  issues_url: string
  keys_url: string
  labels_url: string
  language?: string | null
  languages_url: string
  license?: {
    key?: string
    name?: string
    node_id?: string
    spdx_id?: string
    url?: string
  } | null
  merges_url: string
  milestones_url: string
  mirror_url?: string | null
  name: string
  network_count?: number
  node_id: string
  notifications_url: string
  open_issues?: number
  open_issues_count?: number
  owner: t_simple_user
  permissions?: {
    admin?: boolean
    maintain?: boolean
    pull?: boolean
    push?: boolean
    triage?: boolean
  }
  private: boolean
  pulls_url: string
  pushed_at?: string | null
  releases_url: string
  role_name?: string
  security_and_analysis?: t_security_and_analysis
  size?: number
  ssh_url?: string
  stargazers_count?: number
  stargazers_url: string
  statuses_url: string
  subscribers_count?: number
  subscribers_url: string
  subscription_url: string
  svn_url?: string
  tags_url: string
  teams_url: string
  temp_clone_token?: string
  topics?: string[]
  trees_url: string
  updated_at?: string | null
  url: string
  visibility?: string
  watchers?: number
  watchers_count?: number
  web_commit_signoff_required?: boolean
}

export type t_moved_column_in_project_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_nullable_integration
  project_card?: {
    column_name: string
    id: number
    previous_column_name?: string
    project_id: number
    project_url: string
    url: string
  }
  url: string
}

export type t_nullable_alert_updated_at = string | null

export type t_nullable_code_of_conduct_simple = {
  html_url: string | null
  key: string
  name: string
  url: string
} | null

export type t_nullable_codespace_machine = {
  cpus: number
  display_name: string
  memory_in_bytes: number
  name: string
  operating_system: string
  prebuild_availability: "none" | "ready" | "in_progress" | null
  storage_in_bytes: number
} | null

export type t_nullable_collaborator = {
  avatar_url: string
  email?: string | null
  events_url: string
  followers_url: string
  following_url: string
  gists_url: string
  gravatar_id: string | null
  html_url: string
  id: number
  login: string
  name?: string | null
  node_id: string
  organizations_url: string
  permissions?: {
    admin: boolean
    maintain?: boolean
    pull: boolean
    push: boolean
    triage?: boolean
  }
  received_events_url: string
  repos_url: string
  role_name: string
  site_admin: boolean
  starred_url: string
  subscriptions_url: string
  type: string
  url: string
} | null

export type t_nullable_community_health_file = {
  html_url: string
  url: string
} | null

export type t_nullable_git_user = {
  date?: string
  email?: string
  name?: string
} | null

export type t_nullable_integration = {
  client_id?: string
  client_secret?: string
  created_at: string
  description: string | null
  events: string[]
  external_url: string
  html_url: string
  id: number
  installations_count?: number
  name: string
  node_id: string
  owner: t_nullable_simple_user
  pem?: string
  permissions:
    | {
        checks?: string
        contents?: string
        deployments?: string
        issues?: string
        metadata?: string
      }
    | {
        [key: string]: string
      }
  slug?: string
  updated_at: string
  webhook_secret?: string | null
} | null

export type t_nullable_issue = {
  active_lock_reason?: string | null
  assignee: t_nullable_simple_user
  assignees?: t_simple_user[] | null
  author_association: t_author_association
  body?: string | null
  body_html?: string
  body_text?: string
  closed_at: string | null
  closed_by?: t_nullable_simple_user
  comments: number
  comments_url: string
  created_at: string
  draft?: boolean
  events_url: string
  html_url: string
  id: number
  labels: (
    | string
    | {
        color?: string | null
        default?: boolean
        description?: string | null
        id?: number
        name?: string
        node_id?: string
        url?: string
      }
  )[]
  labels_url: string
  locked: boolean
  milestone: t_nullable_milestone
  node_id: string
  number: number
  performed_via_github_app?: t_nullable_integration
  pull_request?: {
    diff_url: string | null
    html_url: string | null
    merged_at?: string | null
    patch_url: string | null
    url: string | null
  }
  reactions?: t_reaction_rollup
  repository?: t_repository
  repository_url: string
  state: string
  state_reason?: "completed" | "reopened" | "not_planned" | null
  timeline_url?: string
  title: string
  updated_at: string
  url: string
  user: t_nullable_simple_user
} | null

export type t_nullable_license_simple = {
  html_url?: string
  key: string
  name: string
  node_id: string
  spdx_id: string | null
  url: string | null
} | null

export type t_nullable_milestone = {
  closed_at: string | null
  closed_issues: number
  created_at: string
  creator: t_nullable_simple_user
  description: string | null
  due_on: string | null
  html_url: string
  id: number
  labels_url: string
  node_id: string
  number: number
  open_issues: number
  state: "open" | "closed"
  title: string
  updated_at: string
  url: string
} | null

export type t_nullable_minimal_repository = {
  allow_forking?: boolean
  archive_url: string
  archived?: boolean
  assignees_url: string
  blobs_url: string
  branches_url: string
  clone_url?: string
  code_of_conduct?: t_code_of_conduct
  collaborators_url: string
  comments_url: string
  commits_url: string
  compare_url: string
  contents_url: string
  contributors_url: string
  created_at?: string | null
  default_branch?: string
  delete_branch_on_merge?: boolean
  deployments_url: string
  description: string | null
  disabled?: boolean
  downloads_url: string
  events_url: string
  fork: boolean
  forks?: number
  forks_count?: number
  forks_url: string
  full_name: string
  git_commits_url: string
  git_refs_url: string
  git_tags_url: string
  git_url?: string
  has_discussions?: boolean
  has_downloads?: boolean
  has_issues?: boolean
  has_pages?: boolean
  has_projects?: boolean
  has_wiki?: boolean
  homepage?: string | null
  hooks_url: string
  html_url: string
  id: number
  is_template?: boolean
  issue_comment_url: string
  issue_events_url: string
  issues_url: string
  keys_url: string
  labels_url: string
  language?: string | null
  languages_url: string
  license?: {
    key?: string
    name?: string
    node_id?: string
    spdx_id?: string
    url?: string
  } | null
  merges_url: string
  milestones_url: string
  mirror_url?: string | null
  name: string
  network_count?: number
  node_id: string
  notifications_url: string
  open_issues?: number
  open_issues_count?: number
  owner: t_simple_user
  permissions?: {
    admin?: boolean
    maintain?: boolean
    pull?: boolean
    push?: boolean
    triage?: boolean
  }
  private: boolean
  pulls_url: string
  pushed_at?: string | null
  releases_url: string
  role_name?: string
  security_and_analysis?: t_security_and_analysis
  size?: number
  ssh_url?: string
  stargazers_count?: number
  stargazers_url: string
  statuses_url: string
  subscribers_count?: number
  subscribers_url: string
  subscription_url: string
  svn_url?: string
  tags_url: string
  teams_url: string
  temp_clone_token?: string
  topics?: string[]
  trees_url: string
  updated_at?: string | null
  url: string
  visibility?: string
  watchers?: number
  watchers_count?: number
  web_commit_signoff_required?: boolean
} | null

export type t_nullable_repository = {
  allow_auto_merge?: boolean
  allow_forking?: boolean
  allow_merge_commit?: boolean
  allow_rebase_merge?: boolean
  allow_squash_merge?: boolean
  allow_update_branch?: boolean
  anonymous_access_enabled?: boolean
  archive_url: string
  archived: boolean
  assignees_url: string
  blobs_url: string
  branches_url: string
  clone_url: string
  collaborators_url: string
  comments_url: string
  commits_url: string
  compare_url: string
  contents_url: string
  contributors_url: string
  created_at: string | null
  default_branch: string
  delete_branch_on_merge?: boolean
  deployments_url: string
  description: string | null
  disabled: boolean
  downloads_url: string
  events_url: string
  fork: boolean
  forks: number
  forks_count: number
  forks_url: string
  full_name: string
  git_commits_url: string
  git_refs_url: string
  git_tags_url: string
  git_url: string
  has_discussions?: boolean
  has_downloads: boolean
  has_issues: boolean
  has_pages: boolean
  has_projects: boolean
  has_wiki: boolean
  homepage: string | null
  hooks_url: string
  html_url: string
  id: number
  is_template?: boolean
  issue_comment_url: string
  issue_events_url: string
  issues_url: string
  keys_url: string
  labels_url: string
  language: string | null
  languages_url: string
  license: t_nullable_license_simple
  master_branch?: string
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
  merges_url: string
  milestones_url: string
  mirror_url: string | null
  name: string
  network_count?: number
  node_id: string
  notifications_url: string
  open_issues: number
  open_issues_count: number
  organization?: t_nullable_simple_user
  owner: t_simple_user
  permissions?: {
    admin: boolean
    maintain?: boolean
    pull: boolean
    push: boolean
    triage?: boolean
  }
  private: boolean
  pulls_url: string
  pushed_at: string | null
  releases_url: string
  size: number
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
  ssh_url: string
  stargazers_count: number
  stargazers_url: string
  starred_at?: string
  statuses_url: string
  subscribers_count?: number
  subscribers_url: string
  subscription_url: string
  svn_url: string
  tags_url: string
  teams_url: string
  temp_clone_token?: string
  template_repository?: {
    allow_auto_merge?: boolean
    allow_merge_commit?: boolean
    allow_rebase_merge?: boolean
    allow_squash_merge?: boolean
    allow_update_branch?: boolean
    archive_url?: string
    archived?: boolean
    assignees_url?: string
    blobs_url?: string
    branches_url?: string
    clone_url?: string
    collaborators_url?: string
    comments_url?: string
    commits_url?: string
    compare_url?: string
    contents_url?: string
    contributors_url?: string
    created_at?: string
    default_branch?: string
    delete_branch_on_merge?: boolean
    deployments_url?: string
    description?: string
    disabled?: boolean
    downloads_url?: string
    events_url?: string
    fork?: boolean
    forks_count?: number
    forks_url?: string
    full_name?: string
    git_commits_url?: string
    git_refs_url?: string
    git_tags_url?: string
    git_url?: string
    has_downloads?: boolean
    has_issues?: boolean
    has_pages?: boolean
    has_projects?: boolean
    has_wiki?: boolean
    homepage?: string
    hooks_url?: string
    html_url?: string
    id?: number
    is_template?: boolean
    issue_comment_url?: string
    issue_events_url?: string
    issues_url?: string
    keys_url?: string
    labels_url?: string
    language?: string
    languages_url?: string
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
    merges_url?: string
    milestones_url?: string
    mirror_url?: string
    name?: string
    network_count?: number
    node_id?: string
    notifications_url?: string
    open_issues_count?: number
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    permissions?: {
      admin?: boolean
      maintain?: boolean
      pull?: boolean
      push?: boolean
      triage?: boolean
    }
    private?: boolean
    pulls_url?: string
    pushed_at?: string
    releases_url?: string
    size?: number
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
    ssh_url?: string
    stargazers_count?: number
    stargazers_url?: string
    statuses_url?: string
    subscribers_count?: number
    subscribers_url?: string
    subscription_url?: string
    svn_url?: string
    tags_url?: string
    teams_url?: string
    temp_clone_token?: string
    topics?: string[]
    trees_url?: string
    updated_at?: string
    url?: string
    use_squash_pr_title_as_default?: boolean
    visibility?: string
    watchers_count?: number
  } | null
  topics?: string[]
  trees_url: string
  updated_at: string | null
  url: string
  use_squash_pr_title_as_default?: boolean
  visibility?: string
  watchers: number
  watchers_count: number
  web_commit_signoff_required?: boolean
} | null

export type t_nullable_scoped_installation = {
  account: t_simple_user
  has_multiple_single_files?: boolean
  permissions: t_app_permissions
  repositories_url: string
  repository_selection: "all" | "selected"
  single_file_name: string | null
  single_file_paths?: string[]
} | null

export type t_nullable_simple_commit = {
  author: {
    email: string
    name: string
  } | null
  committer: {
    email: string
    name: string
  } | null
  id: string
  message: string
  timestamp: string
  tree_id: string
} | null

export type t_nullable_simple_user = {
  avatar_url: string
  email?: string | null
  events_url: string
  followers_url: string
  following_url: string
  gists_url: string
  gravatar_id: string | null
  html_url: string
  id: number
  login: string
  name?: string | null
  node_id: string
  organizations_url: string
  received_events_url: string
  repos_url: string
  site_admin: boolean
  starred_at?: string
  starred_url: string
  subscriptions_url: string
  type: string
  url: string
} | null

export type t_nullable_team_simple = {
  description: string | null
  html_url: string
  id: number
  ldap_dn?: string
  members_url: string
  name: string
  node_id: string
  notification_setting?: string
  permission: string
  privacy?: string
  repositories_url: string
  slug: string
  url: string
} | null

export type t_oidc_custom_sub = {
  include_claim_keys: string[]
}

export type t_oidc_custom_sub_repo = {
  include_claim_keys?: string[]
  use_default: boolean
}

export type t_org_hook = {
  active: boolean
  config: {
    content_type?: string
    insecure_ssl?: string
    secret?: string
    url?: string
  }
  created_at: string
  deliveries_url?: string
  events: string[]
  id: number
  name: string
  ping_url: string
  type: string
  updated_at: string
  url: string
}

export type t_org_membership = {
  organization: t_organization_simple
  organization_url: string
  permissions?: {
    can_create_repository: boolean
  }
  role: "admin" | "member" | "billing_manager"
  state: "active" | "pending"
  url: string
  user: t_nullable_simple_user
}

export type t_org_ruleset_conditions = t_repository_ruleset_conditions &
  t_repository_ruleset_conditions_repository_name_target

export type t_organization_actions_secret = {
  created_at: string
  name: string
  selected_repositories_url?: string
  updated_at: string
  visibility: "all" | "private" | "selected"
}

export type t_organization_actions_variable = {
  created_at: string
  name: string
  selected_repositories_url?: string
  updated_at: string
  value: string
  visibility: "all" | "private" | "selected"
}

export type t_organization_dependabot_secret = {
  created_at: string
  name: string
  selected_repositories_url?: string
  updated_at: string
  visibility: "all" | "private" | "selected"
}

export type t_organization_full = {
  advanced_security_enabled_for_new_repositories?: boolean
  avatar_url: string
  billing_email?: string | null
  blog?: string
  collaborators?: number | null
  company?: string
  created_at: string
  default_repository_permission?: string | null
  dependabot_alerts_enabled_for_new_repositories?: boolean
  dependabot_security_updates_enabled_for_new_repositories?: boolean
  dependency_graph_enabled_for_new_repositories?: boolean
  description: string | null
  disk_usage?: number | null
  email?: string
  events_url: string
  followers: number
  following: number
  has_organization_projects: boolean
  has_repository_projects: boolean
  hooks_url: string
  html_url: string
  id: number
  is_verified?: boolean
  issues_url: string
  location?: string
  login: string
  members_allowed_repository_creation_type?: string
  members_can_create_internal_repositories?: boolean
  members_can_create_pages?: boolean
  members_can_create_private_pages?: boolean
  members_can_create_private_repositories?: boolean
  members_can_create_public_pages?: boolean
  members_can_create_public_repositories?: boolean
  members_can_create_repositories?: boolean | null
  members_can_fork_private_repositories?: boolean | null
  members_url: string
  name?: string
  node_id: string
  owned_private_repos?: number
  plan?: {
    filled_seats?: number
    name: string
    private_repos: number
    seats?: number
    space: number
  }
  private_gists?: number | null
  public_gists: number
  public_members_url: string
  public_repos: number
  repos_url: string
  secret_scanning_enabled_for_new_repositories?: boolean
  secret_scanning_push_protection_custom_link?: string | null
  secret_scanning_push_protection_custom_link_enabled?: boolean
  secret_scanning_push_protection_enabled_for_new_repositories?: boolean
  total_private_repos?: number
  twitter_username?: string | null
  two_factor_requirement_enabled?: boolean | null
  type: string
  updated_at: string
  url: string
  web_commit_signoff_required?: boolean
}

export type t_organization_invitation = {
  created_at: string
  email: string | null
  failed_at?: string | null
  failed_reason?: string | null
  id: number
  invitation_source?: string
  invitation_teams_url: string
  inviter: t_simple_user
  login: string | null
  node_id: string
  role: string
  team_count: number
}

export type t_organization_programmatic_access_grant = {
  access_granted_at: string
  id: number
  owner: t_simple_user
  permissions: {
    organization?: {
      [key: string]: string
    }
    other?: {
      [key: string]: string
    }
    repository?: {
      [key: string]: string
    }
  }
  repositories_url: string
  repository_selection: "none" | "all" | "subset"
  token_expired: boolean
  token_expires_at: string | null
  token_last_used_at: string | null
}

export type t_organization_programmatic_access_grant_request = {
  created_at: string
  id: number
  owner: t_simple_user
  permissions: {
    organization?: {
      [key: string]: string
    }
    other?: {
      [key: string]: string
    }
    repository?: {
      [key: string]: string
    }
  }
  reason: string | null
  repositories_url: string
  repository_selection: "none" | "all" | "subset"
  token_expired: boolean
  token_expires_at: string | null
  token_last_used_at: string | null
}

export type t_organization_secret_scanning_alert = {
  created_at?: t_alert_created_at
  html_url?: t_alert_html_url
  locations_url?: string
  number?: t_alert_number
  push_protection_bypassed?: boolean | null
  push_protection_bypassed_at?: string | null
  push_protection_bypassed_by?: t_nullable_simple_user
  repository?: t_simple_repository
  resolution?: t_secret_scanning_alert_resolution
  resolution_comment?: string | null
  resolved_at?: string | null
  resolved_by?: t_nullable_simple_user
  secret?: string
  secret_type?: string
  secret_type_display_name?: string
  state?: t_secret_scanning_alert_state
  updated_at?: t_nullable_alert_updated_at
  url?: t_alert_url
}

export type t_organization_simple = {
  avatar_url: string
  description: string | null
  events_url: string
  hooks_url: string
  id: number
  issues_url: string
  login: string
  members_url: string
  node_id: string
  public_members_url: string
  repos_url: string
  url: string
}

export type t_package = {
  created_at: string
  html_url: string
  id: number
  name: string
  owner?: t_nullable_simple_user
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  repository?: t_nullable_minimal_repository
  updated_at: string
  url: string
  version_count: number
  visibility: "private" | "public"
}

export type t_package_version = {
  created_at: string
  deleted_at?: string
  description?: string
  html_url?: string
  id: number
  license?: string
  metadata?: {
    container?: {
      tags: string[]
    }
    docker?: {
      tag?: string[]
    }
    package_type:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container"
  }
  name: string
  package_html_url: string
  updated_at: string
  url: string
}

export type t_packages_billing_usage = {
  included_gigabytes_bandwidth: number
  total_gigabytes_bandwidth_used: number
  total_paid_gigabytes_bandwidth_used: number
}

export type t_page = {
  build_type?: "legacy" | "workflow" | null
  cname: string | null
  custom_404: boolean
  html_url?: string
  https_certificate?: t_pages_https_certificate
  https_enforced?: boolean
  pending_domain_unverified_at?: string | null
  protected_domain_state?: "pending" | "verified" | "unverified" | null
  public: boolean
  source?: t_pages_source_hash
  status: "built" | "building" | "errored" | null
  url: string
}

export type t_page_build = {
  commit: string
  created_at: string
  duration: number
  error: {
    message: string | null
  }
  pusher: t_nullable_simple_user
  status: string
  updated_at: string
  url: string
}

export type t_page_build_status = {
  status: string
  url: string
}

export type t_page_deployment = {
  page_url: string
  preview_url?: string
  status_url: string
}

export type t_pages_health_check = {
  alt_domain?: {
    caa_error?: string | null
    dns_resolves?: boolean
    enforces_https?: boolean
    has_cname_record?: boolean | null
    has_mx_records_present?: boolean | null
    host?: string
    https_error?: string | null
    is_a_record?: boolean | null
    is_apex_domain?: boolean
    is_cloudflare_ip?: boolean | null
    is_cname_to_fastly?: boolean | null
    is_cname_to_github_user_domain?: boolean | null
    is_cname_to_pages_dot_github_dot_com?: boolean | null
    is_fastly_ip?: boolean | null
    is_https_eligible?: boolean | null
    is_non_github_pages_ip_present?: boolean | null
    is_old_ip_address?: boolean | null
    is_pages_domain?: boolean
    is_pointed_to_github_pages_ip?: boolean | null
    is_proxied?: boolean | null
    is_served_by_pages?: boolean | null
    is_valid?: boolean
    is_valid_domain?: boolean
    nameservers?: string
    reason?: string | null
    responds_to_https?: boolean
    should_be_a_record?: boolean | null
    uri?: string
  } | null
  domain?: {
    caa_error?: string | null
    dns_resolves?: boolean
    enforces_https?: boolean
    has_cname_record?: boolean | null
    has_mx_records_present?: boolean | null
    host?: string
    https_error?: string | null
    is_a_record?: boolean | null
    is_apex_domain?: boolean
    is_cloudflare_ip?: boolean | null
    is_cname_to_fastly?: boolean | null
    is_cname_to_github_user_domain?: boolean | null
    is_cname_to_pages_dot_github_dot_com?: boolean | null
    is_fastly_ip?: boolean | null
    is_https_eligible?: boolean | null
    is_non_github_pages_ip_present?: boolean | null
    is_old_ip_address?: boolean | null
    is_pages_domain?: boolean
    is_pointed_to_github_pages_ip?: boolean | null
    is_proxied?: boolean | null
    is_served_by_pages?: boolean | null
    is_valid?: boolean
    is_valid_domain?: boolean
    nameservers?: string
    reason?: string | null
    responds_to_https?: boolean
    should_be_a_record?: boolean | null
    uri?: string
  }
}

export type t_pages_https_certificate = {
  description: string
  domains: string[]
  expires_at?: string
  state:
    | "new"
    | "authorization_created"
    | "authorization_pending"
    | "authorized"
    | "authorization_revoked"
    | "issued"
    | "uploaded"
    | "approved"
    | "errored"
    | "bad_authz"
    | "destroy_pending"
    | "dns_changed"
}

export type t_pages_source_hash = {
  branch: string
  path: string
}

export type t_participation_stats = {
  all: number[]
  owner: number[]
}

export type t_pending_deployment = {
  current_user_can_approve: boolean
  environment: {
    html_url?: string
    id?: number
    name?: string
    node_id?: string
    url?: string
  }
  reviewers: {
    reviewer?: t_simple_user | t_team
    type?: t_deployment_reviewer_type
  }[]
  wait_timer: number
  wait_timer_started_at: string | null
}

export type t_porter_author = {
  email: string
  id: number
  import_url: string
  name: string
  remote_id: string
  remote_name: string
  url: string
}

export type t_porter_large_file = {
  oid: string
  path: string
  ref_name: string
  size: number
}

export type t_private_user = {
  avatar_url: string
  bio: string | null
  blog: string | null
  business_plus?: boolean
  collaborators: number
  company: string | null
  created_at: string
  disk_usage: number
  email: string | null
  events_url: string
  followers: number
  followers_url: string
  following: number
  following_url: string
  gists_url: string
  gravatar_id: string | null
  hireable: boolean | null
  html_url: string
  id: number
  ldap_dn?: string
  location: string | null
  login: string
  name: string | null
  node_id: string
  organizations_url: string
  owned_private_repos: number
  plan?: {
    collaborators: number
    name: string
    private_repos: number
    space: number
  }
  private_gists: number
  public_gists: number
  public_repos: number
  received_events_url: string
  repos_url: string
  site_admin: boolean
  starred_url: string
  subscriptions_url: string
  suspended_at?: string | null
  total_private_repos: number
  twitter_username?: string | null
  two_factor_authentication: boolean
  type: string
  updated_at: string
  url: string
}

export type t_project = {
  body: string | null
  columns_url: string
  created_at: string
  creator: t_nullable_simple_user
  html_url: string
  id: number
  name: string
  node_id: string
  number: number
  organization_permission?: "read" | "write" | "admin" | "none"
  owner_url: string
  private?: boolean
  state: string
  updated_at: string
  url: string
}

export type t_project_card = {
  archived?: boolean
  column_name?: string
  column_url: string
  content_url?: string
  created_at: string
  creator: t_nullable_simple_user
  id: number
  node_id: string
  note: string | null
  project_id?: string
  project_url: string
  updated_at: string
  url: string
}

export type t_project_collaborator_permission = {
  permission: string
  user: t_nullable_simple_user
}

export type t_project_column = {
  cards_url: string
  created_at: string
  id: number
  name: string
  node_id: string
  project_url: string
  updated_at: string
  url: string
}

export type t_protected_branch = {
  allow_deletions?: {
    enabled: boolean
  }
  allow_force_pushes?: {
    enabled: boolean
  }
  allow_fork_syncing?: {
    enabled?: boolean
  }
  block_creations?: {
    enabled: boolean
  }
  enforce_admins?: {
    enabled: boolean
    url: string
  }
  lock_branch?: {
    enabled?: boolean
  }
  required_conversation_resolution?: {
    enabled?: boolean
  }
  required_linear_history?: {
    enabled: boolean
  }
  required_pull_request_reviews?: {
    bypass_pull_request_allowances?: {
      apps?: t_integration[]
      teams: t_team[]
      users: t_simple_user[]
    }
    dismiss_stale_reviews?: boolean
    dismissal_restrictions?: {
      apps?: t_integration[]
      teams: t_team[]
      teams_url: string
      url: string
      users: t_simple_user[]
      users_url: string
    }
    require_code_owner_reviews?: boolean
    require_last_push_approval?: boolean
    required_approving_review_count?: number
    url: string
  }
  required_signatures?: {
    enabled: boolean
    url: string
  }
  required_status_checks?: t_status_check_policy
  restrictions?: t_branch_restriction_policy
  url: string
}

export type t_protected_branch_admin_enforced = {
  enabled: boolean
  url: string
}

export type t_protected_branch_pull_request_review = {
  bypass_pull_request_allowances?: {
    apps?: t_integration[]
    teams?: t_team[]
    users?: t_simple_user[]
  }
  dismiss_stale_reviews: boolean
  dismissal_restrictions?: {
    apps?: t_integration[]
    teams?: t_team[]
    teams_url?: string
    url?: string
    users?: t_simple_user[]
    users_url?: string
  }
  require_code_owner_reviews: boolean
  require_last_push_approval?: boolean
  required_approving_review_count?: number
  url?: string
}

export type t_protected_branch_required_status_check = {
  checks: {
    app_id: number | null
    context: string
  }[]
  contexts: string[]
  contexts_url?: string
  enforcement_level?: string
  strict?: boolean
  url?: string
}

export type t_public_user = {
  avatar_url: string
  bio: string | null
  blog: string | null
  collaborators?: number
  company: string | null
  created_at: string
  disk_usage?: number
  email: string | null
  events_url: string
  followers: number
  followers_url: string
  following: number
  following_url: string
  gists_url: string
  gravatar_id: string | null
  hireable: boolean | null
  html_url: string
  id: number
  location: string | null
  login: string
  name: string | null
  node_id: string
  organizations_url: string
  owned_private_repos?: number
  plan?: {
    collaborators: number
    name: string
    private_repos: number
    space: number
  }
  private_gists?: number
  public_gists: number
  public_repos: number
  received_events_url: string
  repos_url: string
  site_admin: boolean
  starred_url: string
  subscriptions_url: string
  suspended_at?: string | null
  total_private_repos?: number
  twitter_username?: string | null
  type: string
  updated_at: string
  url: string
}

export type t_pull_request = {
  _links: {
    comments: t_link
    commits: t_link
    html: t_link
    issue: t_link
    review_comment: t_link
    review_comments: t_link
    self: t_link
    statuses: t_link
  }
  active_lock_reason?: string | null
  additions: number
  assignee: t_nullable_simple_user
  assignees?: t_simple_user[] | null
  author_association: t_author_association
  auto_merge: t_auto_merge
  base: {
    label: string
    ref: string
    repo: {
      allow_forking?: boolean
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url: string
      archived: boolean
      assignees_url: string
      blobs_url: string
      branches_url: string
      clone_url: string
      collaborators_url: string
      comments_url: string
      commits_url: string
      compare_url: string
      contents_url: string
      contributors_url: string
      created_at: string
      default_branch: string
      deployments_url: string
      description: string | null
      disabled: boolean
      downloads_url: string
      events_url: string
      fork: boolean
      forks: number
      forks_count: number
      forks_url: string
      full_name: string
      git_commits_url: string
      git_refs_url: string
      git_tags_url: string
      git_url: string
      has_discussions: boolean
      has_downloads: boolean
      has_issues: boolean
      has_pages: boolean
      has_projects: boolean
      has_wiki: boolean
      homepage: string | null
      hooks_url: string
      html_url: string
      id: number
      is_template?: boolean
      issue_comment_url: string
      issue_events_url: string
      issues_url: string
      keys_url: string
      labels_url: string
      language: string | null
      languages_url: string
      license: t_nullable_license_simple
      master_branch?: string
      merges_url: string
      milestones_url: string
      mirror_url: string | null
      name: string
      node_id: string
      notifications_url: string
      open_issues: number
      open_issues_count: number
      owner: {
        avatar_url: string
        events_url: string
        followers_url: string
        following_url: string
        gists_url: string
        gravatar_id: string | null
        html_url: string
        id: number
        login: string
        node_id: string
        organizations_url: string
        received_events_url: string
        repos_url: string
        site_admin: boolean
        starred_url: string
        subscriptions_url: string
        type: string
        url: string
      }
      permissions?: {
        admin: boolean
        maintain?: boolean
        pull: boolean
        push: boolean
        triage?: boolean
      }
      private: boolean
      pulls_url: string
      pushed_at: string
      releases_url: string
      size: number
      ssh_url: string
      stargazers_count: number
      stargazers_url: string
      statuses_url: string
      subscribers_url: string
      subscription_url: string
      svn_url: string
      tags_url: string
      teams_url: string
      temp_clone_token?: string
      topics?: string[]
      trees_url: string
      updated_at: string
      url: string
      visibility?: string
      watchers: number
      watchers_count: number
      web_commit_signoff_required?: boolean
    }
    sha: string
    user: {
      avatar_url: string
      events_url: string
      followers_url: string
      following_url: string
      gists_url: string
      gravatar_id: string | null
      html_url: string
      id: number
      login: string
      node_id: string
      organizations_url: string
      received_events_url: string
      repos_url: string
      site_admin: boolean
      starred_url: string
      subscriptions_url: string
      type: string
      url: string
    }
  }
  body: string | null
  changed_files: number
  closed_at: string | null
  comments: number
  comments_url: string
  commits: number
  commits_url: string
  created_at: string
  deletions: number
  diff_url: string
  draft?: boolean
  head: {
    label: string
    ref: string
    repo: {
      allow_forking?: boolean
      allow_merge_commit?: boolean
      allow_rebase_merge?: boolean
      allow_squash_merge?: boolean
      archive_url: string
      archived: boolean
      assignees_url: string
      blobs_url: string
      branches_url: string
      clone_url: string
      collaborators_url: string
      comments_url: string
      commits_url: string
      compare_url: string
      contents_url: string
      contributors_url: string
      created_at: string
      default_branch: string
      deployments_url: string
      description: string | null
      disabled: boolean
      downloads_url: string
      events_url: string
      fork: boolean
      forks: number
      forks_count: number
      forks_url: string
      full_name: string
      git_commits_url: string
      git_refs_url: string
      git_tags_url: string
      git_url: string
      has_discussions: boolean
      has_downloads: boolean
      has_issues: boolean
      has_pages: boolean
      has_projects: boolean
      has_wiki: boolean
      homepage: string | null
      hooks_url: string
      html_url: string
      id: number
      is_template?: boolean
      issue_comment_url: string
      issue_events_url: string
      issues_url: string
      keys_url: string
      labels_url: string
      language: string | null
      languages_url: string
      license: {
        key: string
        name: string
        node_id: string
        spdx_id: string | null
        url: string | null
      } | null
      master_branch?: string
      merges_url: string
      milestones_url: string
      mirror_url: string | null
      name: string
      node_id: string
      notifications_url: string
      open_issues: number
      open_issues_count: number
      owner: {
        avatar_url: string
        events_url: string
        followers_url: string
        following_url: string
        gists_url: string
        gravatar_id: string | null
        html_url: string
        id: number
        login: string
        node_id: string
        organizations_url: string
        received_events_url: string
        repos_url: string
        site_admin: boolean
        starred_url: string
        subscriptions_url: string
        type: string
        url: string
      }
      permissions?: {
        admin: boolean
        maintain?: boolean
        pull: boolean
        push: boolean
        triage?: boolean
      }
      private: boolean
      pulls_url: string
      pushed_at: string
      releases_url: string
      size: number
      ssh_url: string
      stargazers_count: number
      stargazers_url: string
      statuses_url: string
      subscribers_url: string
      subscription_url: string
      svn_url: string
      tags_url: string
      teams_url: string
      temp_clone_token?: string
      topics?: string[]
      trees_url: string
      updated_at: string
      url: string
      visibility?: string
      watchers: number
      watchers_count: number
      web_commit_signoff_required?: boolean
    } | null
    sha: string
    user: {
      avatar_url: string
      events_url: string
      followers_url: string
      following_url: string
      gists_url: string
      gravatar_id: string | null
      html_url: string
      id: number
      login: string
      node_id: string
      organizations_url: string
      received_events_url: string
      repos_url: string
      site_admin: boolean
      starred_url: string
      subscriptions_url: string
      type: string
      url: string
    }
  }
  html_url: string
  id: number
  issue_url: string
  labels: {
    color: string
    default: boolean
    description: string | null
    id: number
    name: string
    node_id: string
    url: string
  }[]
  locked: boolean
  maintainer_can_modify: boolean
  merge_commit_sha: string | null
  mergeable: boolean | null
  mergeable_state: string
  merged: boolean
  merged_at: string | null
  merged_by: t_nullable_simple_user
  milestone: t_nullable_milestone
  node_id: string
  number: number
  patch_url: string
  rebaseable?: boolean | null
  requested_reviewers?: t_simple_user[] | null
  requested_teams?: t_team_simple[] | null
  review_comment_url: string
  review_comments: number
  review_comments_url: string
  state: "open" | "closed"
  statuses_url: string
  title: string
  updated_at: string
  url: string
  user: t_simple_user
}

export type t_pull_request_merge_result = {
  merged: boolean
  message: string
  sha: string
}

export type t_pull_request_minimal = {
  base: {
    ref: string
    repo: {
      id: number
      name: string
      url: string
    }
    sha: string
  }
  head: {
    ref: string
    repo: {
      id: number
      name: string
      url: string
    }
    sha: string
  }
  id: number
  number: number
  url: string
}

export type t_pull_request_review = {
  _links: {
    html: {
      href: string
    }
    pull_request: {
      href: string
    }
  }
  author_association: t_author_association
  body: string
  body_html?: string
  body_text?: string
  commit_id: string | null
  html_url: string
  id: number
  node_id: string
  pull_request_url: string
  state: string
  submitted_at?: string
  user: t_nullable_simple_user
}

export type t_pull_request_review_comment = {
  _links: {
    html: {
      href: string
    }
    pull_request: {
      href: string
    }
    self: {
      href: string
    }
  }
  author_association: t_author_association
  body: string
  body_html?: string
  body_text?: string
  commit_id: string
  created_at: string
  diff_hunk: string
  html_url: string
  id: number
  in_reply_to_id?: number
  line?: number
  node_id: string
  original_commit_id: string
  original_line?: number
  original_position?: number
  original_start_line?: number | null
  path: string
  position?: number
  pull_request_review_id: number | null
  pull_request_url: string
  reactions?: t_reaction_rollup
  side?: "LEFT" | "RIGHT"
  start_line?: number | null
  start_side?: "LEFT" | "RIGHT" | null
  subject_type?: "line" | "file"
  updated_at: string
  url: string
  user: t_simple_user
}

export type t_pull_request_review_request = {
  teams: t_team[]
  users: t_simple_user[]
}

export type t_pull_request_simple = {
  _links: {
    comments: t_link
    commits: t_link
    html: t_link
    issue: t_link
    review_comment: t_link
    review_comments: t_link
    self: t_link
    statuses: t_link
  }
  active_lock_reason?: string | null
  assignee: t_nullable_simple_user
  assignees?: t_simple_user[] | null
  author_association: t_author_association
  auto_merge: t_auto_merge
  base: {
    label: string
    ref: string
    repo: t_repository
    sha: string
    user: t_nullable_simple_user
  }
  body: string | null
  closed_at: string | null
  comments_url: string
  commits_url: string
  created_at: string
  diff_url: string
  draft?: boolean
  head: {
    label: string
    ref: string
    repo: t_repository
    sha: string
    user: t_nullable_simple_user
  }
  html_url: string
  id: number
  issue_url: string
  labels: {
    color: string
    default: boolean
    description: string
    id: number
    name: string
    node_id: string
    url: string
  }[]
  locked: boolean
  merge_commit_sha: string | null
  merged_at: string | null
  milestone: t_nullable_milestone
  node_id: string
  number: number
  patch_url: string
  requested_reviewers?: t_simple_user[] | null
  requested_teams?: t_team[] | null
  review_comment_url: string
  review_comments_url: string
  state: string
  statuses_url: string
  title: string
  updated_at: string
  url: string
  user: t_nullable_simple_user
}

export type t_rate_limit = {
  limit: number
  remaining: number
  reset: number
  used: number
}

export type t_rate_limit_overview = {
  rate: t_rate_limit
  resources: {
    actions_runner_registration?: t_rate_limit
    code_scanning_upload?: t_rate_limit
    core: t_rate_limit
    dependency_snapshots?: t_rate_limit
    graphql?: t_rate_limit
    integration_manifest?: t_rate_limit
    scim?: t_rate_limit
    search: t_rate_limit
    source_import?: t_rate_limit
  }
}

export type t_reaction = {
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
  created_at: string
  id: number
  node_id: string
  user: t_nullable_simple_user
}

export type t_reaction_rollup = {
  "+1": number
  "-1": number
  confused: number
  eyes: number
  heart: number
  hooray: number
  laugh: number
  rocket: number
  total_count: number
  url: string
}

export type t_referenced_workflow = {
  path: string
  ref?: string
  sha: string
}

export type t_referrer_traffic = {
  count: number
  referrer: string
  uniques: number
}

export type t_release = {
  assets: t_release_asset[]
  assets_url: string
  author: t_simple_user
  body?: string | null
  body_html?: string
  body_text?: string
  created_at: string
  discussion_url?: string
  draft: boolean
  html_url: string
  id: number
  mentions_count?: number
  name: string | null
  node_id: string
  prerelease: boolean
  published_at: string | null
  reactions?: t_reaction_rollup
  tag_name: string
  tarball_url: string | null
  target_commitish: string
  upload_url: string
  url: string
  zipball_url: string | null
}

export type t_release_asset = {
  browser_download_url: string
  content_type: string
  created_at: string
  download_count: number
  id: number
  label: string | null
  name: string
  node_id: string
  size: number
  state: "uploaded" | "open"
  updated_at: string
  uploader: t_nullable_simple_user
  url: string
}

export type t_release_notes_content = {
  body: string
  name: string
}

export type t_removed_from_project_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_nullable_integration
  project_card?: {
    column_name: string
    id: number
    previous_column_name?: string
    project_id: number
    project_url: string
    url: string
  }
  url: string
}

export type t_renamed_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_nullable_integration
  rename: {
    from: string
    to: string
  }
  url: string
}

export type t_repo_codespaces_secret = {
  created_at: string
  name: string
  updated_at: string
}

export type t_repo_required_workflow = {
  badge_url: string
  created_at: string
  html_url: string
  id: number
  name: string
  node_id: string
  path: string
  source_repository: t_minimal_repository
  state: "active" | "deleted"
  updated_at: string
  url: string
}

export type t_repo_search_result_item = {
  allow_auto_merge?: boolean
  allow_forking?: boolean
  allow_merge_commit?: boolean
  allow_rebase_merge?: boolean
  allow_squash_merge?: boolean
  archive_url: string
  archived: boolean
  assignees_url: string
  blobs_url: string
  branches_url: string
  clone_url: string
  collaborators_url: string
  comments_url: string
  commits_url: string
  compare_url: string
  contents_url: string
  contributors_url: string
  created_at: string
  default_branch: string
  delete_branch_on_merge?: boolean
  deployments_url: string
  description: string | null
  disabled: boolean
  downloads_url: string
  events_url: string
  fork: boolean
  forks: number
  forks_count: number
  forks_url: string
  full_name: string
  git_commits_url: string
  git_refs_url: string
  git_tags_url: string
  git_url: string
  has_discussions?: boolean
  has_downloads: boolean
  has_issues: boolean
  has_pages: boolean
  has_projects: boolean
  has_wiki: boolean
  homepage: string | null
  hooks_url: string
  html_url: string
  id: number
  is_template?: boolean
  issue_comment_url: string
  issue_events_url: string
  issues_url: string
  keys_url: string
  labels_url: string
  language: string | null
  languages_url: string
  license: t_nullable_license_simple
  master_branch?: string
  merges_url: string
  milestones_url: string
  mirror_url: string | null
  name: string
  node_id: string
  notifications_url: string
  open_issues: number
  open_issues_count: number
  owner: t_nullable_simple_user
  permissions?: {
    admin: boolean
    maintain?: boolean
    pull: boolean
    push: boolean
    triage?: boolean
  }
  private: boolean
  pulls_url: string
  pushed_at: string
  releases_url: string
  score: number
  size: number
  ssh_url: string
  stargazers_count: number
  stargazers_url: string
  statuses_url: string
  subscribers_url: string
  subscription_url: string
  svn_url: string
  tags_url: string
  teams_url: string
  temp_clone_token?: string
  text_matches?: t_search_result_text_matches
  topics?: string[]
  trees_url: string
  updated_at: string
  url: string
  visibility?: string
  watchers: number
  watchers_count: number
  web_commit_signoff_required?: boolean
}

export type t_repository = {
  allow_auto_merge?: boolean
  allow_forking?: boolean
  allow_merge_commit?: boolean
  allow_rebase_merge?: boolean
  allow_squash_merge?: boolean
  allow_update_branch?: boolean
  anonymous_access_enabled?: boolean
  archive_url: string
  archived: boolean
  assignees_url: string
  blobs_url: string
  branches_url: string
  clone_url: string
  collaborators_url: string
  comments_url: string
  commits_url: string
  compare_url: string
  contents_url: string
  contributors_url: string
  created_at: string | null
  default_branch: string
  delete_branch_on_merge?: boolean
  deployments_url: string
  description: string | null
  disabled: boolean
  downloads_url: string
  events_url: string
  fork: boolean
  forks: number
  forks_count: number
  forks_url: string
  full_name: string
  git_commits_url: string
  git_refs_url: string
  git_tags_url: string
  git_url: string
  has_discussions?: boolean
  has_downloads: boolean
  has_issues: boolean
  has_pages: boolean
  has_projects: boolean
  has_wiki: boolean
  homepage: string | null
  hooks_url: string
  html_url: string
  id: number
  is_template?: boolean
  issue_comment_url: string
  issue_events_url: string
  issues_url: string
  keys_url: string
  labels_url: string
  language: string | null
  languages_url: string
  license: t_nullable_license_simple
  master_branch?: string
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
  merges_url: string
  milestones_url: string
  mirror_url: string | null
  name: string
  network_count?: number
  node_id: string
  notifications_url: string
  open_issues: number
  open_issues_count: number
  organization?: t_nullable_simple_user
  owner: t_simple_user
  permissions?: {
    admin: boolean
    maintain?: boolean
    pull: boolean
    push: boolean
    triage?: boolean
  }
  private: boolean
  pulls_url: string
  pushed_at: string | null
  releases_url: string
  size: number
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
  ssh_url: string
  stargazers_count: number
  stargazers_url: string
  starred_at?: string
  statuses_url: string
  subscribers_count?: number
  subscribers_url: string
  subscription_url: string
  svn_url: string
  tags_url: string
  teams_url: string
  temp_clone_token?: string
  template_repository?: {
    allow_auto_merge?: boolean
    allow_merge_commit?: boolean
    allow_rebase_merge?: boolean
    allow_squash_merge?: boolean
    allow_update_branch?: boolean
    archive_url?: string
    archived?: boolean
    assignees_url?: string
    blobs_url?: string
    branches_url?: string
    clone_url?: string
    collaborators_url?: string
    comments_url?: string
    commits_url?: string
    compare_url?: string
    contents_url?: string
    contributors_url?: string
    created_at?: string
    default_branch?: string
    delete_branch_on_merge?: boolean
    deployments_url?: string
    description?: string
    disabled?: boolean
    downloads_url?: string
    events_url?: string
    fork?: boolean
    forks_count?: number
    forks_url?: string
    full_name?: string
    git_commits_url?: string
    git_refs_url?: string
    git_tags_url?: string
    git_url?: string
    has_downloads?: boolean
    has_issues?: boolean
    has_pages?: boolean
    has_projects?: boolean
    has_wiki?: boolean
    homepage?: string
    hooks_url?: string
    html_url?: string
    id?: number
    is_template?: boolean
    issue_comment_url?: string
    issue_events_url?: string
    issues_url?: string
    keys_url?: string
    labels_url?: string
    language?: string
    languages_url?: string
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
    merges_url?: string
    milestones_url?: string
    mirror_url?: string
    name?: string
    network_count?: number
    node_id?: string
    notifications_url?: string
    open_issues_count?: number
    owner?: {
      avatar_url?: string
      events_url?: string
      followers_url?: string
      following_url?: string
      gists_url?: string
      gravatar_id?: string
      html_url?: string
      id?: number
      login?: string
      node_id?: string
      organizations_url?: string
      received_events_url?: string
      repos_url?: string
      site_admin?: boolean
      starred_url?: string
      subscriptions_url?: string
      type?: string
      url?: string
    }
    permissions?: {
      admin?: boolean
      maintain?: boolean
      pull?: boolean
      push?: boolean
      triage?: boolean
    }
    private?: boolean
    pulls_url?: string
    pushed_at?: string
    releases_url?: string
    size?: number
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
    ssh_url?: string
    stargazers_count?: number
    stargazers_url?: string
    statuses_url?: string
    subscribers_count?: number
    subscribers_url?: string
    subscription_url?: string
    svn_url?: string
    tags_url?: string
    teams_url?: string
    temp_clone_token?: string
    topics?: string[]
    trees_url?: string
    updated_at?: string
    url?: string
    use_squash_pr_title_as_default?: boolean
    visibility?: string
    watchers_count?: number
  } | null
  topics?: string[]
  trees_url: string
  updated_at: string | null
  url: string
  use_squash_pr_title_as_default?: boolean
  visibility?: string
  watchers: number
  watchers_count: number
  web_commit_signoff_required?: boolean
}

export type t_repository_advisory = {
  readonly author: t_simple_user | null
  readonly closed_at: string | null
  readonly created_at: string | null
  credits:
    | {
        login?: string
        type?: t_repository_advisory_credit_types
      }[]
    | null
  readonly credits_detailed: t_repository_advisory_credit[] | null
  cve_id: string | null
  cvss: {
    readonly score: number | null
    vector_string: string | null
  } | null
  cwe_ids: string[] | null
  readonly cwes:
    | {
        cwe_id: string
        readonly name: string
      }[]
    | null
  description: string | null
  readonly ghsa_id: string
  readonly html_url: string
  readonly identifiers: {
    type: "CVE" | "GHSA"
    value: string
  }[]
  readonly published_at: string | null
  readonly publisher: t_simple_user | null
  severity: "critical" | "high" | "medium" | "low" | null
  state: "published" | "closed" | "withdrawn" | "draft" | "triage"
  readonly submission: {
    readonly accepted: boolean
  } | null
  summary: string
  readonly updated_at: string | null
  url: string
  vulnerabilities: t_repository_advisory_vulnerability[] | null
  readonly withdrawn_at: string | null
}

export type t_repository_advisory_credit = {
  state: "accepted" | "declined" | "pending"
  type: t_repository_advisory_credit_types
  user: t_simple_user
}

export type t_repository_advisory_credit_types =
  | "analyst"
  | "finder"
  | "reporter"
  | "coordinator"
  | "remediation_developer"
  | "remediation_reviewer"
  | "remediation_verifier"
  | "tool"
  | "sponsor"
  | "other"

export type t_repository_advisory_ecosystems =
  | "rubygems"
  | "npm"
  | "pip"
  | "maven"
  | "nuget"
  | "composer"
  | "go"
  | "rust"
  | "erlang"
  | "actions"
  | "pub"
  | "other"

export type t_repository_advisory_vulnerability = {
  package: {
    ecosystem: t_repository_advisory_ecosystems
    name: string | null
  } | null
  patched_versions: string | null
  vulnerable_functions: string[] | null
  vulnerable_version_range: string | null
}

export type t_repository_collaborator_permission = {
  permission: string
  role_name: string
  user: t_nullable_collaborator
}

export type t_repository_invitation = {
  created_at: string
  expired?: boolean
  html_url: string
  id: number
  invitee: t_nullable_simple_user
  inviter: t_nullable_simple_user
  node_id: string
  permissions: "read" | "write" | "admin" | "triage" | "maintain"
  repository: t_minimal_repository
  url: string
}

export type t_repository_rule =
  | t_repository_rule_creation
  | t_repository_rule_update
  | t_repository_rule_deletion
  | t_repository_rule_required_linear_history
  | t_repository_rule_required_deployments
  | t_repository_rule_required_signatures
  | t_repository_rule_pull_request
  | t_repository_rule_required_status_checks
  | t_repository_rule_non_fast_forward
  | t_repository_rule_commit_message_pattern
  | t_repository_rule_commit_author_email_pattern
  | t_repository_rule_committer_email_pattern
  | t_repository_rule_branch_name_pattern
  | t_repository_rule_tag_name_pattern

export type t_repository_rule_branch_name_pattern = {
  parameters?: {
    name?: string
    negate?: boolean
    operator: "starts_with" | "ends_with" | "contains" | "regex"
    pattern: string
  }
  type: "branch_name_pattern"
}

export type t_repository_rule_commit_author_email_pattern = {
  parameters?: {
    name?: string
    negate?: boolean
    operator: "starts_with" | "ends_with" | "contains" | "regex"
    pattern: string
  }
  type: "commit_author_email_pattern"
}

export type t_repository_rule_commit_message_pattern = {
  parameters?: {
    name?: string
    negate?: boolean
    operator: "starts_with" | "ends_with" | "contains" | "regex"
    pattern: string
  }
  type: "commit_message_pattern"
}

export type t_repository_rule_committer_email_pattern = {
  parameters?: {
    name?: string
    negate?: boolean
    operator: "starts_with" | "ends_with" | "contains" | "regex"
    pattern: string
  }
  type: "committer_email_pattern"
}

export type t_repository_rule_creation = {
  type: "creation"
}

export type t_repository_rule_deletion = {
  type: "deletion"
}

export type t_repository_rule_enforcement = "disabled" | "active" | "evaluate"

export type t_repository_rule_non_fast_forward = {
  type: "non_fast_forward"
}

export type t_repository_rule_params_status_check_configuration = {
  context: string
  integration_id?: number
}

export type t_repository_rule_pull_request = {
  parameters?: {
    dismiss_stale_reviews_on_push: boolean
    require_code_owner_review: boolean
    require_last_push_approval: boolean
    required_approving_review_count: number
    required_review_thread_resolution: boolean
  }
  type: "pull_request"
}

export type t_repository_rule_required_deployments = {
  parameters?: {
    required_deployment_environments: string[]
  }
  type: "required_deployments"
}

export type t_repository_rule_required_linear_history = {
  type: "required_linear_history"
}

export type t_repository_rule_required_signatures = {
  type: "required_signatures"
}

export type t_repository_rule_required_status_checks = {
  parameters?: {
    required_status_checks: t_repository_rule_params_status_check_configuration[]
    strict_required_status_checks_policy: boolean
  }
  type: "required_status_checks"
}

export type t_repository_rule_tag_name_pattern = {
  parameters?: {
    name?: string
    negate?: boolean
    operator: "starts_with" | "ends_with" | "contains" | "regex"
    pattern: string
  }
  type: "tag_name_pattern"
}

export type t_repository_rule_update = {
  parameters?: {
    update_allows_fetch_and_merge: boolean
  }
  type: "update"
}

export type t_repository_ruleset = {
  _links?: {
    self?: {
      href?: string
    }
  }
  bypass_actors?: t_repository_ruleset_bypass_actor[]
  bypass_mode?: "none" | "repository" | "organization"
  conditions?: t_repository_ruleset_conditions | t_org_ruleset_conditions
  enforcement: t_repository_rule_enforcement
  id: number
  name: string
  node_id?: string
  rules?: t_repository_rule[]
  source: string
  source_type?: "Repository" | "Organization"
  target?: "branch" | "tag"
}

export type t_repository_ruleset_bypass_actor = {
  actor_id?: number
  actor_type?: "Team" | "Integration"
}

export type t_repository_ruleset_conditions = {
  ref_name?: {
    exclude?: string[]
    include?: string[]
  }
}

export type t_repository_ruleset_conditions_repository_name_target = {
  repository_name?: {
    exclude?: string[]
    include?: string[]
    protected?: boolean
  }
}

export type t_repository_subscription = {
  created_at: string
  ignored: boolean
  reason: string | null
  repository_url: string
  subscribed: boolean
  url: string
}

export type t_required_workflow = {
  created_at: string
  id: number
  name: string
  path: string
  ref: string
  repository: t_minimal_repository
  scope: "all" | "selected"
  selected_repositories_url?: string
  state: "active" | "deleted"
  updated_at: string
}

export type t_review_comment = {
  _links: {
    html: t_link
    pull_request: t_link
    self: t_link
  }
  author_association: t_author_association
  body: string
  body_html?: string
  body_text?: string
  commit_id: string
  created_at: string
  diff_hunk: string
  html_url: string
  id: number
  in_reply_to_id?: number
  line?: number
  node_id: string
  original_commit_id: string
  original_line?: number
  original_position: number
  original_start_line?: number | null
  path: string
  position: number | null
  pull_request_review_id: number | null
  pull_request_url: string
  reactions?: t_reaction_rollup
  side?: "LEFT" | "RIGHT"
  start_line?: number | null
  start_side?: "LEFT" | "RIGHT" | null
  updated_at: string
  url: string
  user: t_nullable_simple_user
}

export type t_review_custom_gates_comment_required = {
  comment: string
  environment_name: string
}

export type t_review_custom_gates_state_required = {
  comment?: string
  environment_name: string
  state: "approved" | "rejected"
}

export type t_review_dismissed_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  dismissed_review: {
    dismissal_commit_id?: string
    dismissal_message: string | null
    review_id: number
    state: string
  }
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_nullable_integration
  url: string
}

export type t_review_request_removed_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_nullable_integration
  requested_reviewer?: t_simple_user
  requested_team?: t_team
  review_requester: t_simple_user
  url: string
}

export type t_review_requested_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_nullable_integration
  requested_reviewer?: t_simple_user
  requested_team?: t_team
  review_requester: t_simple_user
  url: string
}

export type t_root = {
  authorizations_url: string
  code_search_url: string
  commit_search_url: string
  current_user_authorizations_html_url: string
  current_user_repositories_url: string
  current_user_url: string
  emails_url: string
  emojis_url: string
  events_url: string
  feeds_url: string
  followers_url: string
  following_url: string
  gists_url: string
  hub_url: string
  issue_search_url: string
  issues_url: string
  keys_url: string
  label_search_url: string
  notifications_url: string
  organization_repositories_url: string
  organization_teams_url: string
  organization_url: string
  public_gists_url: string
  rate_limit_url: string
  repository_search_url: string
  repository_url: string
  starred_gists_url: string
  starred_url: string
  topic_search_url?: string
  user_organizations_url: string
  user_repositories_url: string
  user_search_url: string
  user_url: string
}

export type t_runner = {
  busy: boolean
  id: number
  labels: t_runner_label[]
  name: string
  os: string
  runner_group_id?: number
  status: string
}

export type t_runner_application = {
  architecture: string
  download_url: string
  filename: string
  os: string
  sha256_checksum?: string
  temp_download_token?: string
}

export type t_runner_label = {
  id?: number
  name: string
  type?: "read-only" | "custom"
}

export type t_scim_error = {
  detail?: string | null
  documentation_url?: string | null
  message?: string | null
  schemas?: string[]
  scimType?: string | null
  status?: number
}

export type t_search_result_text_matches = {
  fragment?: string
  matches?: {
    indices?: number[]
    text?: string
  }[]
  object_type?: string | null
  object_url?: string
  property?: string
}[]

export type t_secret_scanning_alert = {
  created_at?: t_alert_created_at
  html_url?: t_alert_html_url
  locations_url?: string
  number?: t_alert_number
  push_protection_bypassed?: boolean | null
  push_protection_bypassed_at?: string | null
  push_protection_bypassed_by?: t_nullable_simple_user
  resolution?: t_secret_scanning_alert_resolution
  resolution_comment?: string | null
  resolved_at?: string | null
  resolved_by?: t_nullable_simple_user
  secret?: string
  secret_type?: string
  secret_type_display_name?: string
  state?: t_secret_scanning_alert_state
  updated_at?: t_nullable_alert_updated_at
  url?: t_alert_url
}

export type t_secret_scanning_alert_resolution =
  | "false_positive"
  | "wont_fix"
  | "revoked"
  | "used_in_tests"
  | null

export type t_secret_scanning_alert_resolution_comment = string | null

export type t_secret_scanning_alert_state = "open" | "resolved"

export type t_secret_scanning_location = {
  details:
    | t_secret_scanning_location_commit
    | t_secret_scanning_location_issue_title
    | t_secret_scanning_location_issue_body
    | t_secret_scanning_location_issue_comment
  type: "commit" | "issue_title" | "issue_body" | "issue_comment"
}

export type t_secret_scanning_location_commit = {
  blob_sha: string
  blob_url: string
  commit_sha: string
  commit_url: string
  end_column: number
  end_line: number
  path: string
  start_column: number
  start_line: number
}

export type t_secret_scanning_location_issue_body = {
  issue_body_url: string
}

export type t_secret_scanning_location_issue_comment = {
  issue_comment_url: string
}

export type t_secret_scanning_location_issue_title = {
  issue_title_url: string
}

export type t_security_and_analysis = {
  advanced_security?: {
    status?: "enabled" | "disabled"
  }
  secret_scanning?: {
    status?: "enabled" | "disabled"
  }
  secret_scanning_push_protection?: {
    status?: "enabled" | "disabled"
  }
} | null

export type t_selected_actions = {
  github_owned_allowed?: boolean
  patterns_allowed?: string[]
  verified_allowed?: boolean
}

export type t_selected_actions_url = string

export type t_short_blob = {
  sha: string
  url: string
}

export type t_short_branch = {
  commit: {
    sha: string
    url: string
  }
  name: string
  protected: boolean
  protection?: t_branch_protection
  protection_url?: string
}

export type t_simple_commit = {
  author: {
    email: string
    name: string
  } | null
  committer: {
    email: string
    name: string
  } | null
  id: string
  message: string
  timestamp: string
  tree_id: string
}

export type t_simple_commit_status = {
  avatar_url: string | null
  context: string
  created_at: string
  description: string | null
  id: number
  node_id: string
  required?: boolean | null
  state: string
  target_url: string | null
  updated_at: string
  url: string
}

export type t_simple_repository = {
  archive_url: string
  assignees_url: string
  blobs_url: string
  branches_url: string
  collaborators_url: string
  comments_url: string
  commits_url: string
  compare_url: string
  contents_url: string
  contributors_url: string
  deployments_url: string
  description: string | null
  downloads_url: string
  events_url: string
  fork: boolean
  forks_url: string
  full_name: string
  git_commits_url: string
  git_refs_url: string
  git_tags_url: string
  hooks_url: string
  html_url: string
  id: number
  issue_comment_url: string
  issue_events_url: string
  issues_url: string
  keys_url: string
  labels_url: string
  languages_url: string
  merges_url: string
  milestones_url: string
  name: string
  node_id: string
  notifications_url: string
  owner: t_simple_user
  private: boolean
  pulls_url: string
  releases_url: string
  stargazers_url: string
  statuses_url: string
  subscribers_url: string
  subscription_url: string
  tags_url: string
  teams_url: string
  trees_url: string
  url: string
}

export type t_simple_user = {
  avatar_url: string
  email?: string | null
  events_url: string
  followers_url: string
  following_url: string
  gists_url: string
  gravatar_id: string | null
  html_url: string
  id: number
  login: string
  name?: string | null
  node_id: string
  organizations_url: string
  received_events_url: string
  repos_url: string
  site_admin: boolean
  starred_at?: string
  starred_url: string
  subscriptions_url: string
  type: string
  url: string
}

export type t_social_account = {
  provider: string
  url: string
}

export type t_ssh_signing_key = {
  created_at: string
  id: number
  key: string
  title: string
}

export type t_stargazer = {
  starred_at: string
  user: t_nullable_simple_user
}

export type t_starred_repository = {
  repo: t_repository
  starred_at: string
}

export type t_state_change_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_nullable_integration
  state_reason?: string | null
  url: string
}

export type t_status = {
  avatar_url: string | null
  context: string
  created_at: string
  creator: t_nullable_simple_user
  description: string | null
  id: number
  node_id: string
  state: string
  target_url: string | null
  updated_at: string
  url: string
}

export type t_status_check_policy = {
  checks: {
    app_id: number | null
    context: string
  }[]
  contexts: string[]
  contexts_url: string
  strict: boolean
  url: string
}

export type t_tag = {
  commit: {
    sha: string
    url: string
  }
  name: string
  node_id: string
  tarball_url: string
  zipball_url: string
}

export type t_tag_protection = {
  created_at?: string
  enabled?: boolean
  id?: number
  pattern: string
  updated_at?: string
}

export type t_team = {
  description: string | null
  html_url: string
  id: number
  members_url: string
  name: string
  node_id: string
  notification_setting?: string
  parent: t_nullable_team_simple
  permission: string
  permissions?: {
    admin: boolean
    maintain: boolean
    pull: boolean
    push: boolean
    triage: boolean
  }
  privacy?: string
  repositories_url: string
  slug: string
  url: string
}

export type t_team_discussion = {
  author: t_nullable_simple_user
  body: string
  body_html: string
  body_version: string
  comments_count: number
  comments_url: string
  created_at: string
  html_url: string
  last_edited_at: string | null
  node_id: string
  number: number
  pinned: boolean
  private: boolean
  reactions?: t_reaction_rollup
  team_url: string
  title: string
  updated_at: string
  url: string
}

export type t_team_discussion_comment = {
  author: t_nullable_simple_user
  body: string
  body_html: string
  body_version: string
  created_at: string
  discussion_url: string
  html_url: string
  last_edited_at: string | null
  node_id: string
  number: number
  reactions?: t_reaction_rollup
  updated_at: string
  url: string
}

export type t_team_full = {
  created_at: string
  description: string | null
  html_url: string
  id: number
  ldap_dn?: string
  members_count: number
  members_url: string
  name: string
  node_id: string
  notification_setting?: "notifications_enabled" | "notifications_disabled"
  organization: t_team_organization
  parent?: t_nullable_team_simple
  permission: string
  privacy?: "closed" | "secret"
  repos_count: number
  repositories_url: string
  slug: string
  updated_at: string
  url: string
}

export type t_team_membership = {
  role: "member" | "maintainer"
  state: "active" | "pending"
  url: string
}

export type t_team_organization = {
  avatar_url: string
  billing_email?: string | null
  blog?: string
  collaborators?: number | null
  company?: string
  created_at: string
  default_repository_permission?: string | null
  description: string | null
  disk_usage?: number | null
  email?: string
  events_url: string
  followers: number
  following: number
  has_organization_projects: boolean
  has_repository_projects: boolean
  hooks_url: string
  html_url: string
  id: number
  is_verified?: boolean
  issues_url: string
  location?: string
  login: string
  members_allowed_repository_creation_type?: string
  members_can_create_internal_repositories?: boolean
  members_can_create_pages?: boolean
  members_can_create_private_pages?: boolean
  members_can_create_private_repositories?: boolean
  members_can_create_public_pages?: boolean
  members_can_create_public_repositories?: boolean
  members_can_create_repositories?: boolean | null
  members_can_fork_private_repositories?: boolean | null
  members_url: string
  name?: string
  node_id: string
  owned_private_repos?: number
  plan?: {
    filled_seats?: number
    name: string
    private_repos: number
    seats?: number
    space: number
  }
  private_gists?: number | null
  public_gists: number
  public_members_url: string
  public_repos: number
  repos_url: string
  total_private_repos?: number
  twitter_username?: string | null
  two_factor_requirement_enabled?: boolean | null
  type: string
  updated_at: string
  url: string
  web_commit_signoff_required?: boolean
}

export type t_team_project = {
  body: string | null
  columns_url: string
  created_at: string
  creator: t_simple_user
  html_url: string
  id: number
  name: string
  node_id: string
  number: number
  organization_permission?: string
  owner_url: string
  permissions: {
    admin: boolean
    read: boolean
    write: boolean
  }
  private?: boolean
  state: string
  updated_at: string
  url: string
}

export type t_team_repository = {
  allow_auto_merge?: boolean
  allow_forking?: boolean
  allow_merge_commit?: boolean
  allow_rebase_merge?: boolean
  allow_squash_merge?: boolean
  archive_url: string
  archived: boolean
  assignees_url: string
  blobs_url: string
  branches_url: string
  clone_url: string
  collaborators_url: string
  comments_url: string
  commits_url: string
  compare_url: string
  contents_url: string
  contributors_url: string
  created_at: string | null
  default_branch: string
  delete_branch_on_merge?: boolean
  deployments_url: string
  description: string | null
  disabled: boolean
  downloads_url: string
  events_url: string
  fork: boolean
  forks: number
  forks_count: number
  forks_url: string
  full_name: string
  git_commits_url: string
  git_refs_url: string
  git_tags_url: string
  git_url: string
  has_downloads: boolean
  has_issues: boolean
  has_pages: boolean
  has_projects: boolean
  has_wiki: boolean
  homepage: string | null
  hooks_url: string
  html_url: string
  id: number
  is_template?: boolean
  issue_comment_url: string
  issue_events_url: string
  issues_url: string
  keys_url: string
  labels_url: string
  language: string | null
  languages_url: string
  license: t_nullable_license_simple
  master_branch?: string
  merges_url: string
  milestones_url: string
  mirror_url: string | null
  name: string
  network_count?: number
  node_id: string
  notifications_url: string
  open_issues: number
  open_issues_count: number
  owner: t_nullable_simple_user
  permissions?: {
    admin: boolean
    maintain?: boolean
    pull: boolean
    push: boolean
    triage?: boolean
  }
  private: boolean
  pulls_url: string
  pushed_at: string | null
  releases_url: string
  role_name?: string
  size: number
  ssh_url: string
  stargazers_count: number
  stargazers_url: string
  statuses_url: string
  subscribers_count?: number
  subscribers_url: string
  subscription_url: string
  svn_url: string
  tags_url: string
  teams_url: string
  temp_clone_token?: string
  template_repository?: t_nullable_repository
  topics?: string[]
  trees_url: string
  updated_at: string | null
  url: string
  visibility?: string
  watchers: number
  watchers_count: number
  web_commit_signoff_required?: boolean
}

export type t_team_simple = {
  description: string | null
  html_url: string
  id: number
  ldap_dn?: string
  members_url: string
  name: string
  node_id: string
  notification_setting?: string
  permission: string
  privacy?: string
  repositories_url: string
  slug: string
  url: string
}

export type t_thread = {
  id: string
  last_read_at: string | null
  reason: string
  repository: t_minimal_repository
  subject: {
    latest_comment_url: string
    title: string
    type: string
    url: string
  }
  subscription_url: string
  unread: boolean
  updated_at: string
  url: string
}

export type t_thread_subscription = {
  created_at: string | null
  ignored: boolean
  reason: string | null
  repository_url?: string
  subscribed: boolean
  thread_url?: string
  url: string
}

export type t_timeline_assigned_issue_event = {
  actor: t_simple_user
  assignee: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_nullable_integration
  url: string
}

export type t_timeline_comment_event = {
  actor: t_simple_user
  author_association: t_author_association
  body?: string
  body_html?: string
  body_text?: string
  created_at: string
  event: string
  html_url: string
  id: number
  issue_url: string
  node_id: string
  performed_via_github_app?: t_nullable_integration
  reactions?: t_reaction_rollup
  updated_at: string
  url: string
  user: t_simple_user
}

export type t_timeline_commit_commented_event = {
  comments?: t_commit_comment[]
  commit_id?: string
  event?: string
  node_id?: string
}

export type t_timeline_committed_event = {
  author: {
    date: string
    email: string
    name: string
  }
  committer: {
    date: string
    email: string
    name: string
  }
  event?: string
  html_url: string
  message: string
  node_id: string
  parents: {
    html_url: string
    sha: string
    url: string
  }[]
  sha: string
  tree: {
    sha: string
    url: string
  }
  url: string
  verification: {
    payload: string | null
    reason: string
    signature: string | null
    verified: boolean
  }
}

export type t_timeline_cross_referenced_event = {
  actor?: t_simple_user
  created_at: string
  event: string
  source: {
    issue?: t_issue
    type?: string
  }
  updated_at: string
}

export type t_timeline_issue_events =
  | t_labeled_issue_event
  | t_unlabeled_issue_event
  | t_milestoned_issue_event
  | t_demilestoned_issue_event
  | t_renamed_issue_event
  | t_review_requested_issue_event
  | t_review_request_removed_issue_event
  | t_review_dismissed_issue_event
  | t_locked_issue_event
  | t_added_to_project_issue_event
  | t_moved_column_in_project_issue_event
  | t_removed_from_project_issue_event
  | t_converted_note_to_issue_issue_event
  | t_timeline_comment_event
  | t_timeline_cross_referenced_event
  | t_timeline_committed_event
  | t_timeline_reviewed_event
  | t_timeline_line_commented_event
  | t_timeline_commit_commented_event
  | t_timeline_assigned_issue_event
  | t_timeline_unassigned_issue_event
  | t_state_change_issue_event

export type t_timeline_line_commented_event = {
  comments?: t_pull_request_review_comment[]
  event?: string
  node_id?: string
}

export type t_timeline_reviewed_event = {
  _links: {
    html: {
      href: string
    }
    pull_request: {
      href: string
    }
  }
  author_association: t_author_association
  body: string | null
  body_html?: string
  body_text?: string
  commit_id: string
  event: string
  html_url: string
  id: number
  node_id: string
  pull_request_url: string
  state: string
  submitted_at?: string
  user: t_simple_user
}

export type t_timeline_unassigned_issue_event = {
  actor: t_simple_user
  assignee: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_nullable_integration
  url: string
}

export type t_topic = {
  names: string[]
}

export type t_topic_search_result_item = {
  aliases?:
    | {
        topic_relation?: {
          id?: number
          name?: string
          relation_type?: string
          topic_id?: number
        }
      }[]
    | null
  created_at: string
  created_by: string | null
  curated: boolean
  description: string | null
  display_name: string | null
  featured: boolean
  logo_url?: string | null
  name: string
  related?:
    | {
        topic_relation?: {
          id?: number
          name?: string
          relation_type?: string
          topic_id?: number
        }
      }[]
    | null
  released: string | null
  repository_count?: number | null
  score: number
  short_description: string | null
  text_matches?: t_search_result_text_matches
  updated_at: string
}

export type t_traffic = {
  count: number
  timestamp: string
  uniques: number
}

export type t_unassigned_issue_event = {
  actor: t_simple_user
  assignee: t_simple_user
  assigner: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  node_id: string
  performed_via_github_app: t_nullable_integration
  url: string
}

export type t_unlabeled_issue_event = {
  actor: t_simple_user
  commit_id: string | null
  commit_url: string | null
  created_at: string
  event: string
  id: number
  label: {
    color: string
    name: string
  }
  node_id: string
  performed_via_github_app: t_nullable_integration
  url: string
}

export type t_user_marketplace_purchase = {
  account: t_marketplace_account
  billing_cycle: string
  free_trial_ends_on: string | null
  next_billing_date: string | null
  on_free_trial: boolean
  plan: t_marketplace_listing_plan
  unit_count: number | null
  updated_at: string | null
}

export type t_user_search_result_item = {
  avatar_url: string
  bio?: string | null
  blog?: string | null
  company?: string | null
  created_at?: string
  email?: string | null
  events_url: string
  followers?: number
  followers_url: string
  following?: number
  following_url: string
  gists_url: string
  gravatar_id: string | null
  hireable?: boolean | null
  html_url: string
  id: number
  location?: string | null
  login: string
  name?: string | null
  node_id: string
  organizations_url: string
  public_gists?: number
  public_repos?: number
  received_events_url: string
  repos_url: string
  score: number
  site_admin: boolean
  starred_url: string
  subscriptions_url: string
  suspended_at?: string | null
  text_matches?: t_search_result_text_matches
  type: string
  updated_at?: string
  url: string
}

export type t_validation_error = {
  documentation_url: string
  errors?: {
    code: string
    field?: string
    index?: number
    message?: string
    resource?: string
    value?: string | null | number | string[]
  }[]
  message: string
}

export type t_validation_error_simple = {
  documentation_url: string
  errors?: string[]
  message: string
}

export type t_verification = {
  payload: string | null
  reason: string
  signature: string | null
  verified: boolean
}

export type t_view_traffic = {
  count: number
  uniques: number
  views: t_traffic[]
}

export type t_wait_timer = number

export type t_webhook_config = {
  content_type?: t_webhook_config_content_type
  insecure_ssl?: t_webhook_config_insecure_ssl
  secret?: t_webhook_config_secret
  url?: t_webhook_config_url
}

export type t_webhook_config_content_type = string

export type t_webhook_config_insecure_ssl = string | number

export type t_webhook_config_secret = string

export type t_webhook_config_url = string

export type t_workflow = {
  badge_url: string
  created_at: string
  deleted_at?: string
  html_url: string
  id: number
  name: string
  node_id: string
  path: string
  state:
    | "active"
    | "deleted"
    | "disabled_fork"
    | "disabled_inactivity"
    | "disabled_manually"
  updated_at: string
  url: string
}

export type t_workflow_run = {
  actor?: t_simple_user
  artifacts_url: string
  cancel_url: string
  check_suite_id?: number
  check_suite_node_id?: string
  check_suite_url: string
  conclusion: string | null
  created_at: string
  display_title: string
  event: string
  head_branch: string | null
  head_commit: t_nullable_simple_commit
  head_repository: t_minimal_repository
  head_repository_id?: number
  head_sha: string
  html_url: string
  id: number
  jobs_url: string
  logs_url: string
  name?: string | null
  node_id: string
  path: string
  previous_attempt_url?: string | null
  pull_requests: t_pull_request_minimal[] | null
  referenced_workflows?: t_referenced_workflow[] | null
  repository: t_minimal_repository
  rerun_url: string
  run_attempt?: number
  run_number: number
  run_started_at?: string
  status: string | null
  triggering_actor?: t_simple_user
  updated_at: string
  url: string
  workflow_id: number
  workflow_url: string
}

export type t_workflow_run_usage = {
  billable: {
    MACOS?: {
      job_runs?: {
        duration_ms: number
        job_id: number
      }[]
      jobs: number
      total_ms: number
    }
    UBUNTU?: {
      job_runs?: {
        duration_ms: number
        job_id: number
      }[]
      jobs: number
      total_ms: number
    }
    WINDOWS?: {
      job_runs?: {
        duration_ms: number
        job_id: number
      }[]
      jobs: number
      total_ms: number
    }
  }
  run_duration_ms?: number
}

export type t_workflow_usage = {
  billable: {
    MACOS?: {
      total_ms?: number
    }
    UBUNTU?: {
      total_ms?: number
    }
    WINDOWS?: {
      total_ms?: number
    }
  }
}

export type t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema = {
  labels: string[]
}

export type t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema = {
  org: string
  runner_id: number
}

export type t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema = {
  labels: string[]
}

export type t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema = {
  owner: string
  repo: string
  runner_id: number
}

export type t_ActionsAddSelectedRepoToOrgSecretParamSchema = {
  org: string
  repository_id: number
  secret_name: string
}

export type t_ActionsAddSelectedRepoToOrgVariableParamSchema = {
  name: string
  org: string
  repository_id: number
}

export type t_ActionsAddSelectedRepoToRequiredWorkflowParamSchema = {
  org: string
  repository_id: number
  required_workflow_id: number
}

export type t_ActionsApproveWorkflowRunParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsCancelWorkflowRunParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsCreateEnvironmentVariableBodySchema = {
  name: string
  value: string
}

export type t_ActionsCreateEnvironmentVariableParamSchema = {
  environment_name: string
  repository_id: number
}

export type t_ActionsCreateOrUpdateEnvironmentSecretBodySchema = {
  encrypted_value: string
  key_id: string
}

export type t_ActionsCreateOrUpdateEnvironmentSecretParamSchema = {
  environment_name: string
  repository_id: number
  secret_name: string
}

export type t_ActionsCreateOrUpdateOrgSecretBodySchema = {
  encrypted_value?: string
  key_id?: string
  selected_repository_ids?: number[]
  visibility: "all" | "private" | "selected"
}

export type t_ActionsCreateOrUpdateOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_ActionsCreateOrUpdateRepoSecretBodySchema = {
  encrypted_value?: string
  key_id?: string
}

export type t_ActionsCreateOrUpdateRepoSecretParamSchema = {
  owner: string
  repo: string
  secret_name: string
}

export type t_ActionsCreateOrgVariableBodySchema = {
  name: string
  selected_repository_ids?: number[]
  value: string
  visibility: "all" | "private" | "selected"
}

export type t_ActionsCreateOrgVariableParamSchema = {
  org: string
}

export type t_ActionsCreateRegistrationTokenForOrgParamSchema = {
  org: string
}

export type t_ActionsCreateRegistrationTokenForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsCreateRemoveTokenForOrgParamSchema = {
  org: string
}

export type t_ActionsCreateRemoveTokenForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsCreateRepoVariableBodySchema = {
  name: string
  value: string
}

export type t_ActionsCreateRepoVariableParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsCreateRequiredWorkflowBodySchema = {
  repository_id: string
  scope?: "selected" | "all"
  selected_repository_ids?: number[]
  workflow_file_path: string
}

export type t_ActionsCreateRequiredWorkflowParamSchema = {
  org: string
}

export type t_ActionsCreateWorkflowDispatchBodySchema = {
  inputs?: {
    [key: string]: unknown
  }
  ref: string
}

export type t_ActionsCreateWorkflowDispatchParamSchema = {
  owner: string
  repo: string
  workflow_id: number | string
}

export type t_ActionsDeleteActionsCacheByIdParamSchema = {
  cache_id: number
  owner: string
  repo: string
}

export type t_ActionsDeleteActionsCacheByKeyParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsDeleteActionsCacheByKeyQuerySchema = {
  key: string
  ref?: string
}

export type t_ActionsDeleteArtifactParamSchema = {
  artifact_id: number
  owner: string
  repo: string
}

export type t_ActionsDeleteEnvironmentSecretParamSchema = {
  environment_name: string
  repository_id: number
  secret_name: string
}

export type t_ActionsDeleteEnvironmentVariableParamSchema = {
  environment_name: string
  name: string
  repository_id: number
}

export type t_ActionsDeleteOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_ActionsDeleteOrgVariableParamSchema = {
  name: string
  org: string
}

export type t_ActionsDeleteRepoSecretParamSchema = {
  owner: string
  repo: string
  secret_name: string
}

export type t_ActionsDeleteRepoVariableParamSchema = {
  name: string
  owner: string
  repo: string
}

export type t_ActionsDeleteRequiredWorkflowParamSchema = {
  org: string
  required_workflow_id: number
}

export type t_ActionsDeleteSelfHostedRunnerFromOrgParamSchema = {
  org: string
  runner_id: number
}

export type t_ActionsDeleteSelfHostedRunnerFromRepoParamSchema = {
  owner: string
  repo: string
  runner_id: number
}

export type t_ActionsDeleteWorkflowRunParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsDeleteWorkflowRunLogsParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema =
  {
    org: string
    repository_id: number
  }

export type t_ActionsDisableWorkflowParamSchema = {
  owner: string
  repo: string
  workflow_id: number | string
}

export type t_ActionsDownloadArtifactParamSchema = {
  archive_format: string
  artifact_id: number
  owner: string
  repo: string
}

export type t_ActionsDownloadJobLogsForWorkflowRunParamSchema = {
  job_id: number
  owner: string
  repo: string
}

export type t_ActionsDownloadWorkflowRunAttemptLogsParamSchema = {
  attempt_number: number
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsDownloadWorkflowRunLogsParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema =
  {
    org: string
    repository_id: number
  }

export type t_ActionsEnableWorkflowParamSchema = {
  owner: string
  repo: string
  workflow_id: number | string
}

export type t_ActionsGetActionsCacheListParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsGetActionsCacheListQuerySchema = {
  direction?: "asc" | "desc"
  key?: string
  page?: number
  per_page?: number
  ref?: string
  sort?: "created_at" | "last_accessed_at" | "size_in_bytes"
}

export type t_ActionsGetActionsCacheUsageParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsGetActionsCacheUsageByRepoForOrgParamSchema = {
  org: string
}

export type t_ActionsGetActionsCacheUsageByRepoForOrgQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsGetActionsCacheUsageForOrgParamSchema = {
  org: string
}

export type t_ActionsGetAllowedActionsOrganizationParamSchema = {
  org: string
}

export type t_ActionsGetAllowedActionsRepositoryParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsGetArtifactParamSchema = {
  artifact_id: number
  owner: string
  repo: string
}

export type t_ActionsGetCustomOidcSubClaimForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsGetEnvironmentPublicKeyParamSchema = {
  environment_name: string
  repository_id: number
}

export type t_ActionsGetEnvironmentSecretParamSchema = {
  environment_name: string
  repository_id: number
  secret_name: string
}

export type t_ActionsGetEnvironmentVariableParamSchema = {
  environment_name: string
  name: string
  repository_id: number
}

export type t_ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema =
  {
    org: string
  }

export type t_ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema =
  {
    owner: string
    repo: string
  }

export type t_ActionsGetGithubActionsPermissionsOrganizationParamSchema = {
  org: string
}

export type t_ActionsGetGithubActionsPermissionsRepositoryParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsGetJobForWorkflowRunParamSchema = {
  job_id: number
  owner: string
  repo: string
}

export type t_ActionsGetOrgPublicKeyParamSchema = {
  org: string
}

export type t_ActionsGetOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_ActionsGetOrgVariableParamSchema = {
  name: string
  org: string
}

export type t_ActionsGetPendingDeploymentsForRunParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsGetRepoPublicKeyParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsGetRepoRequiredWorkflowParamSchema = {
  org: string
  repo: string
  required_workflow_id_for_repo: number
}

export type t_ActionsGetRepoRequiredWorkflowUsageParamSchema = {
  org: string
  repo: string
  required_workflow_id_for_repo: number
}

export type t_ActionsGetRepoSecretParamSchema = {
  owner: string
  repo: string
  secret_name: string
}

export type t_ActionsGetRepoVariableParamSchema = {
  name: string
  owner: string
  repo: string
}

export type t_ActionsGetRequiredWorkflowParamSchema = {
  org: string
  required_workflow_id: number
}

export type t_ActionsGetReviewsForRunParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsGetSelfHostedRunnerForOrgParamSchema = {
  org: string
  runner_id: number
}

export type t_ActionsGetSelfHostedRunnerForRepoParamSchema = {
  owner: string
  repo: string
  runner_id: number
}

export type t_ActionsGetWorkflowParamSchema = {
  owner: string
  repo: string
  workflow_id: number | string
}

export type t_ActionsGetWorkflowAccessToRepositoryParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsGetWorkflowRunParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsGetWorkflowRunQuerySchema = {
  exclude_pull_requests?: boolean
}

export type t_ActionsGetWorkflowRunAttemptParamSchema = {
  attempt_number: number
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsGetWorkflowRunAttemptQuerySchema = {
  exclude_pull_requests?: boolean
}

export type t_ActionsGetWorkflowRunUsageParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsGetWorkflowUsageParamSchema = {
  owner: string
  repo: string
  workflow_id: number | string
}

export type t_ActionsListArtifactsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsListArtifactsForRepoQuerySchema = {
  name?: string
  page?: number
  per_page?: number
}

export type t_ActionsListEnvironmentSecretsParamSchema = {
  environment_name: string
  repository_id: number
}

export type t_ActionsListEnvironmentSecretsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListEnvironmentVariablesParamSchema = {
  environment_name: string
  repository_id: number
}

export type t_ActionsListEnvironmentVariablesQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListJobsForWorkflowRunParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsListJobsForWorkflowRunQuerySchema = {
  filter?: "latest" | "all"
  page?: number
  per_page?: number
}

export type t_ActionsListJobsForWorkflowRunAttemptParamSchema = {
  attempt_number: number
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsListJobsForWorkflowRunAttemptQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListLabelsForSelfHostedRunnerForOrgParamSchema = {
  org: string
  runner_id: number
}

export type t_ActionsListLabelsForSelfHostedRunnerForRepoParamSchema = {
  owner: string
  repo: string
  runner_id: number
}

export type t_ActionsListOrgSecretsParamSchema = {
  org: string
}

export type t_ActionsListOrgSecretsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListOrgVariablesParamSchema = {
  org: string
}

export type t_ActionsListOrgVariablesQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListRepoOrganizationSecretsParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsListRepoOrganizationSecretsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListRepoOrganizationVariablesParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsListRepoOrganizationVariablesQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListRepoRequiredWorkflowsParamSchema = {
  org: string
  repo: string
}

export type t_ActionsListRepoRequiredWorkflowsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListRepoSecretsParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsListRepoSecretsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListRepoVariablesParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsListRepoVariablesQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListRepoWorkflowsParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsListRepoWorkflowsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListRequiredWorkflowRunsParamSchema = {
  owner: string
  repo: string
  required_workflow_id_for_repo: number
}

export type t_ActionsListRequiredWorkflowRunsQuerySchema = {
  actor?: string
  branch?: string
  check_suite_id?: number
  created?: string
  event?: string
  exclude_pull_requests?: boolean
  head_sha?: string
  page?: number
  per_page?: number
  status?:
    | "completed"
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "skipped"
    | "stale"
    | "success"
    | "timed_out"
    | "in_progress"
    | "queued"
    | "requested"
    | "waiting"
    | "pending"
}

export type t_ActionsListRequiredWorkflowsParamSchema = {
  org: string
}

export type t_ActionsListRequiredWorkflowsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListRunnerApplicationsForOrgParamSchema = {
  org: string
}

export type t_ActionsListRunnerApplicationsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsListSelectedReposForOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_ActionsListSelectedReposForOrgSecretQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListSelectedReposForOrgVariableParamSchema = {
  name: string
  org: string
}

export type t_ActionsListSelectedReposForOrgVariableQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema =
  {
    org: string
  }

export type t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema =
  {
    page?: number
    per_page?: number
  }

export type t_ActionsListSelectedRepositoriesRequiredWorkflowParamSchema = {
  org: string
  required_workflow_id: number
}

export type t_ActionsListSelfHostedRunnersForOrgParamSchema = {
  org: string
}

export type t_ActionsListSelfHostedRunnersForOrgQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListSelfHostedRunnersForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsListSelfHostedRunnersForRepoQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListWorkflowRunArtifactsParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsListWorkflowRunArtifactsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActionsListWorkflowRunsParamSchema = {
  owner: string
  repo: string
  workflow_id: number | string
}

export type t_ActionsListWorkflowRunsQuerySchema = {
  actor?: string
  branch?: string
  check_suite_id?: number
  created?: string
  event?: string
  exclude_pull_requests?: boolean
  head_sha?: string
  page?: number
  per_page?: number
  status?:
    | "completed"
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "skipped"
    | "stale"
    | "success"
    | "timed_out"
    | "in_progress"
    | "queued"
    | "requested"
    | "waiting"
    | "pending"
}

export type t_ActionsListWorkflowRunsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsListWorkflowRunsForRepoQuerySchema = {
  actor?: string
  branch?: string
  check_suite_id?: number
  created?: string
  event?: string
  exclude_pull_requests?: boolean
  head_sha?: string
  page?: number
  per_page?: number
  status?:
    | "completed"
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "skipped"
    | "stale"
    | "success"
    | "timed_out"
    | "in_progress"
    | "queued"
    | "requested"
    | "waiting"
    | "pending"
}

export type t_ActionsReRunJobForWorkflowRunBodySchema = {
  enable_debug_logging?: boolean
} | null

export type t_ActionsReRunJobForWorkflowRunParamSchema = {
  job_id: number
  owner: string
  repo: string
}

export type t_ActionsReRunWorkflowBodySchema = {
  enable_debug_logging?: boolean
} | null

export type t_ActionsReRunWorkflowParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsReRunWorkflowFailedJobsBodySchema = {
  enable_debug_logging?: boolean
} | null

export type t_ActionsReRunWorkflowFailedJobsParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema =
  {
    org: string
    runner_id: number
  }

export type t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema =
  {
    owner: string
    repo: string
    runner_id: number
  }

export type t_ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema = {
  name: string
  org: string
  runner_id: number
}

export type t_ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema = {
  name: string
  owner: string
  repo: string
  runner_id: number
}

export type t_ActionsRemoveSelectedRepoFromOrgSecretParamSchema = {
  org: string
  repository_id: number
  secret_name: string
}

export type t_ActionsRemoveSelectedRepoFromOrgVariableParamSchema = {
  name: string
  org: string
  repository_id: number
}

export type t_ActionsRemoveSelectedRepoFromRequiredWorkflowParamSchema = {
  org: string
  repository_id: number
  required_workflow_id: number
}

export type t_ActionsReviewCustomGatesForRunBodySchema =
  | t_review_custom_gates_comment_required
  | t_review_custom_gates_state_required

export type t_ActionsReviewCustomGatesForRunParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsReviewPendingDeploymentsForRunBodySchema = {
  comment: string
  environment_ids: number[]
  state: "approved" | "rejected"
}

export type t_ActionsReviewPendingDeploymentsForRunParamSchema = {
  owner: string
  repo: string
  run_id: number
}

export type t_ActionsSetAllowedActionsOrganizationBodySchema = {
  github_owned_allowed?: boolean
  patterns_allowed?: string[]
  verified_allowed?: boolean
}

export type t_ActionsSetAllowedActionsOrganizationParamSchema = {
  org: string
}

export type t_ActionsSetAllowedActionsRepositoryBodySchema = {
  github_owned_allowed?: boolean
  patterns_allowed?: string[]
  verified_allowed?: boolean
}

export type t_ActionsSetAllowedActionsRepositoryParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema = {
  labels: string[]
}

export type t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema = {
  org: string
  runner_id: number
}

export type t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema = {
  labels: string[]
}

export type t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema = {
  owner: string
  repo: string
  runner_id: number
}

export type t_ActionsSetCustomOidcSubClaimForRepoBodySchema = {
  include_claim_keys?: string[]
  use_default: boolean
}

export type t_ActionsSetCustomOidcSubClaimForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema =
  {
    can_approve_pull_request_reviews?: t_actions_can_approve_pull_request_reviews
    default_workflow_permissions?: t_actions_default_workflow_permissions
  }

export type t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema =
  {
    org: string
  }

export type t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema =
  {
    can_approve_pull_request_reviews?: t_actions_can_approve_pull_request_reviews
    default_workflow_permissions?: t_actions_default_workflow_permissions
  }

export type t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema =
  {
    owner: string
    repo: string
  }

export type t_ActionsSetGithubActionsPermissionsOrganizationBodySchema = {
  allowed_actions?: t_allowed_actions
  enabled_repositories: t_enabled_repositories
}

export type t_ActionsSetGithubActionsPermissionsOrganizationParamSchema = {
  org: string
}

export type t_ActionsSetGithubActionsPermissionsRepositoryBodySchema = {
  allowed_actions?: t_allowed_actions
  enabled: t_actions_enabled
}

export type t_ActionsSetGithubActionsPermissionsRepositoryParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsSetSelectedReposForOrgSecretBodySchema = {
  selected_repository_ids: number[]
}

export type t_ActionsSetSelectedReposForOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_ActionsSetSelectedReposForOrgVariableBodySchema = {
  selected_repository_ids: number[]
}

export type t_ActionsSetSelectedReposForOrgVariableParamSchema = {
  name: string
  org: string
}

export type t_ActionsSetSelectedReposToRequiredWorkflowBodySchema = {
  selected_repository_ids: number[]
}

export type t_ActionsSetSelectedReposToRequiredWorkflowParamSchema = {
  org: string
  required_workflow_id: number
}

export type t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema =
  {
    selected_repository_ids: number[]
  }

export type t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema =
  {
    org: string
  }

export type t_ActionsSetWorkflowAccessToRepositoryBodySchema = {
  access_level: "none" | "user" | "organization"
}

export type t_ActionsSetWorkflowAccessToRepositoryParamSchema = {
  owner: string
  repo: string
}

export type t_ActionsUpdateEnvironmentVariableBodySchema = {
  name?: string
  value?: string
}

export type t_ActionsUpdateEnvironmentVariableParamSchema = {
  environment_name: string
  name: string
  repository_id: number
}

export type t_ActionsUpdateOrgVariableBodySchema = {
  name?: string
  selected_repository_ids?: number[]
  value?: string
  visibility?: "all" | "private" | "selected"
}

export type t_ActionsUpdateOrgVariableParamSchema = {
  name: string
  org: string
}

export type t_ActionsUpdateRepoVariableBodySchema = {
  name?: string
  value?: string
}

export type t_ActionsUpdateRepoVariableParamSchema = {
  name: string
  owner: string
  repo: string
}

export type t_ActionsUpdateRequiredWorkflowBodySchema = {
  repository_id?: string
  scope?: "selected" | "all"
  selected_repository_ids?: number[]
  workflow_file_path?: string
}

export type t_ActionsUpdateRequiredWorkflowParamSchema = {
  org: string
  required_workflow_id: number
}

export type t_ActivityCheckRepoIsStarredByAuthenticatedUserParamSchema = {
  owner: string
  repo: string
}

export type t_ActivityDeleteRepoSubscriptionParamSchema = {
  owner: string
  repo: string
}

export type t_ActivityDeleteThreadSubscriptionParamSchema = {
  thread_id: number
}

export type t_ActivityGetRepoSubscriptionParamSchema = {
  owner: string
  repo: string
}

export type t_ActivityGetThreadParamSchema = {
  thread_id: number
}

export type t_ActivityGetThreadSubscriptionForAuthenticatedUserParamSchema = {
  thread_id: number
}

export type t_ActivityListEventsForAuthenticatedUserParamSchema = {
  username: string
}

export type t_ActivityListEventsForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListNotificationsForAuthenticatedUserQuerySchema = {
  all?: boolean
  before?: string
  page?: number
  participating?: boolean
  per_page?: number
  since?: string
}

export type t_ActivityListOrgEventsForAuthenticatedUserParamSchema = {
  org: string
  username: string
}

export type t_ActivityListOrgEventsForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListPublicEventsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListPublicEventsForRepoNetworkParamSchema = {
  owner: string
  repo: string
}

export type t_ActivityListPublicEventsForRepoNetworkQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListPublicEventsForUserParamSchema = {
  username: string
}

export type t_ActivityListPublicEventsForUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListPublicOrgEventsParamSchema = {
  org: string
}

export type t_ActivityListPublicOrgEventsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListReceivedEventsForUserParamSchema = {
  username: string
}

export type t_ActivityListReceivedEventsForUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListReceivedPublicEventsForUserParamSchema = {
  username: string
}

export type t_ActivityListReceivedPublicEventsForUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListRepoEventsParamSchema = {
  owner: string
  repo: string
}

export type t_ActivityListRepoEventsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListRepoNotificationsForAuthenticatedUserParamSchema = {
  owner: string
  repo: string
}

export type t_ActivityListRepoNotificationsForAuthenticatedUserQuerySchema = {
  all?: boolean
  before?: string
  page?: number
  participating?: boolean
  per_page?: number
  since?: string
}

export type t_ActivityListReposStarredByAuthenticatedUserQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  sort?: "created" | "updated"
}

export type t_ActivityListReposStarredByUserParamSchema = {
  username: string
}

export type t_ActivityListReposStarredByUserQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  sort?: "created" | "updated"
}

export type t_ActivityListReposWatchedByUserParamSchema = {
  username: string
}

export type t_ActivityListReposWatchedByUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListStargazersForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ActivityListStargazersForRepoQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListWatchedReposForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityListWatchersForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ActivityListWatchersForRepoQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ActivityMarkNotificationsAsReadBodySchema = {
  last_read_at?: string
  read?: boolean
}

export type t_ActivityMarkRepoNotificationsAsReadBodySchema = {
  last_read_at?: string
}

export type t_ActivityMarkRepoNotificationsAsReadParamSchema = {
  owner: string
  repo: string
}

export type t_ActivityMarkThreadAsReadParamSchema = {
  thread_id: number
}

export type t_ActivitySetRepoSubscriptionBodySchema = {
  ignored?: boolean
  subscribed?: boolean
}

export type t_ActivitySetRepoSubscriptionParamSchema = {
  owner: string
  repo: string
}

export type t_ActivitySetThreadSubscriptionBodySchema = {
  ignored?: boolean
}

export type t_ActivitySetThreadSubscriptionParamSchema = {
  thread_id: number
}

export type t_ActivityStarRepoForAuthenticatedUserParamSchema = {
  owner: string
  repo: string
}

export type t_ActivityUnstarRepoForAuthenticatedUserParamSchema = {
  owner: string
  repo: string
}

export type t_AppsAddRepoToInstallationForAuthenticatedUserParamSchema = {
  installation_id: number
  repository_id: number
}

export type t_AppsCheckTokenBodySchema = {
  access_token: string
}

export type t_AppsCheckTokenParamSchema = {
  client_id: string
}

export type t_AppsCreateFromManifestParamSchema = {
  code: string
}

export type t_AppsCreateInstallationAccessTokenBodySchema = {
  permissions?: t_app_permissions
  repositories?: string[]
  repository_ids?: number[]
}

export type t_AppsCreateInstallationAccessTokenParamSchema = {
  installation_id: number
}

export type t_AppsDeleteAuthorizationBodySchema = {
  access_token: string
}

export type t_AppsDeleteAuthorizationParamSchema = {
  client_id: string
}

export type t_AppsDeleteInstallationParamSchema = {
  installation_id: number
}

export type t_AppsDeleteTokenBodySchema = {
  access_token: string
}

export type t_AppsDeleteTokenParamSchema = {
  client_id: string
}

export type t_AppsGetBySlugParamSchema = {
  app_slug: string
}

export type t_AppsGetInstallationParamSchema = {
  installation_id: number
}

export type t_AppsGetOrgInstallationParamSchema = {
  org: string
}

export type t_AppsGetRepoInstallationParamSchema = {
  owner: string
  repo: string
}

export type t_AppsGetSubscriptionPlanForAccountParamSchema = {
  account_id: number
}

export type t_AppsGetSubscriptionPlanForAccountStubbedParamSchema = {
  account_id: number
}

export type t_AppsGetUserInstallationParamSchema = {
  username: string
}

export type t_AppsGetWebhookDeliveryParamSchema = {
  delivery_id: number
}

export type t_AppsListAccountsForPlanParamSchema = {
  plan_id: number
}

export type t_AppsListAccountsForPlanQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  sort?: "created" | "updated"
}

export type t_AppsListAccountsForPlanStubbedParamSchema = {
  plan_id: number
}

export type t_AppsListAccountsForPlanStubbedQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  sort?: "created" | "updated"
}

export type t_AppsListInstallationReposForAuthenticatedUserParamSchema = {
  installation_id: number
}

export type t_AppsListInstallationReposForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_AppsListInstallationRequestsForAuthenticatedAppQuerySchema = {
  page?: number
  per_page?: number
}

export type t_AppsListInstallationsQuerySchema = {
  outdated?: string
  page?: number
  per_page?: number
  since?: string
}

export type t_AppsListInstallationsForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_AppsListPlansQuerySchema = {
  page?: number
  per_page?: number
}

export type t_AppsListPlansStubbedQuerySchema = {
  page?: number
  per_page?: number
}

export type t_AppsListReposAccessibleToInstallationQuerySchema = {
  page?: number
  per_page?: number
}

export type t_AppsListSubscriptionsForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_AppsListSubscriptionsForAuthenticatedUserStubbedQuerySchema = {
  page?: number
  per_page?: number
}

export type t_AppsListWebhookDeliveriesQuerySchema = {
  cursor?: string
  per_page?: number
  redelivery?: boolean
}

export type t_AppsRedeliverWebhookDeliveryParamSchema = {
  delivery_id: number
}

export type t_AppsRemoveRepoFromInstallationForAuthenticatedUserParamSchema = {
  installation_id: number
  repository_id: number
}

export type t_AppsResetTokenBodySchema = {
  access_token: string
}

export type t_AppsResetTokenParamSchema = {
  client_id: string
}

export type t_AppsScopeTokenBodySchema = {
  access_token: string
  permissions?: t_app_permissions
  repositories?: string[]
  repository_ids?: number[]
  target?: string
  target_id?: number
}

export type t_AppsScopeTokenParamSchema = {
  client_id: string
}

export type t_AppsSuspendInstallationParamSchema = {
  installation_id: number
}

export type t_AppsUnsuspendInstallationParamSchema = {
  installation_id: number
}

export type t_AppsUpdateWebhookConfigForAppBodySchema = {
  content_type?: t_webhook_config_content_type
  insecure_ssl?: t_webhook_config_insecure_ssl
  secret?: t_webhook_config_secret
  url?: t_webhook_config_url
}

export type t_BillingGetGithubActionsBillingOrgParamSchema = {
  org: string
}

export type t_BillingGetGithubActionsBillingUserParamSchema = {
  username: string
}

export type t_BillingGetGithubPackagesBillingOrgParamSchema = {
  org: string
}

export type t_BillingGetGithubPackagesBillingUserParamSchema = {
  username: string
}

export type t_BillingGetSharedStorageBillingOrgParamSchema = {
  org: string
}

export type t_BillingGetSharedStorageBillingUserParamSchema = {
  username: string
}

export type t_ChecksCreateBodySchema =
  | {
      status: EmptyObject
    }
  | {
      [key: string]: unknown
    }
  | {
      status?: EmptyObject
    }

export type t_ChecksCreateParamSchema = {
  owner: string
  repo: string
}

export type t_ChecksCreateSuiteBodySchema = {
  head_sha: string
}

export type t_ChecksCreateSuiteParamSchema = {
  owner: string
  repo: string
}

export type t_ChecksGetParamSchema = {
  check_run_id: number
  owner: string
  repo: string
}

export type t_ChecksGetSuiteParamSchema = {
  check_suite_id: number
  owner: string
  repo: string
}

export type t_ChecksListAnnotationsParamSchema = {
  check_run_id: number
  owner: string
  repo: string
}

export type t_ChecksListAnnotationsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ChecksListForRefParamSchema = {
  owner: string
  ref: string
  repo: string
}

export type t_ChecksListForRefQuerySchema = {
  app_id?: number
  check_name?: string
  filter?: "latest" | "all"
  page?: number
  per_page?: number
  status?: "queued" | "in_progress" | "completed"
}

export type t_ChecksListForSuiteParamSchema = {
  check_suite_id: number
  owner: string
  repo: string
}

export type t_ChecksListForSuiteQuerySchema = {
  check_name?: string
  filter?: "latest" | "all"
  page?: number
  per_page?: number
  status?: "queued" | "in_progress" | "completed"
}

export type t_ChecksListSuitesForRefParamSchema = {
  owner: string
  ref: string
  repo: string
}

export type t_ChecksListSuitesForRefQuerySchema = {
  app_id?: number
  check_name?: string
  page?: number
  per_page?: number
}

export type t_ChecksRerequestRunParamSchema = {
  check_run_id: number
  owner: string
  repo: string
}

export type t_ChecksRerequestSuiteParamSchema = {
  check_suite_id: number
  owner: string
  repo: string
}

export type t_ChecksSetSuitesPreferencesBodySchema = {
  auto_trigger_checks?: {
    app_id: number
    setting: boolean
  }[]
}

export type t_ChecksSetSuitesPreferencesParamSchema = {
  owner: string
  repo: string
}

export type t_ChecksUpdateBodySchema = {
  actions?: {
    description: string
    identifier: string
    label: string
  }[]
  completed_at?: string
  conclusion?:
    | "action_required"
    | "cancelled"
    | "failure"
    | "neutral"
    | "success"
    | "skipped"
    | "stale"
    | "timed_out"
  details_url?: string
  external_id?: string
  name?: string
  output?: {
    annotations?: {
      annotation_level: "notice" | "warning" | "failure"
      end_column?: number
      end_line: number
      message: string
      path: string
      raw_details?: string
      start_column?: number
      start_line: number
      title?: string
    }[]
    images?: {
      alt: string
      caption?: string
      image_url: string
    }[]
    summary: string
    text?: string
    title?: string
  }
  started_at?: string
  status?: "queued" | "in_progress" | "completed"
}

export type t_ChecksUpdateParamSchema = {
  check_run_id: number
  owner: string
  repo: string
}

export type t_CodeScanningDeleteAnalysisParamSchema = {
  analysis_id: number
  owner: string
  repo: string
}

export type t_CodeScanningDeleteAnalysisQuerySchema = {
  confirm_delete?: string | null
}

export type t_CodeScanningGetAlertParamSchema = {
  alert_number: t_alert_number
  owner: string
  repo: string
}

export type t_CodeScanningGetAnalysisParamSchema = {
  analysis_id: number
  owner: string
  repo: string
}

export type t_CodeScanningGetCodeqlDatabaseParamSchema = {
  language: string
  owner: string
  repo: string
}

export type t_CodeScanningGetDefaultSetupParamSchema = {
  owner: string
  repo: string
}

export type t_CodeScanningGetSarifParamSchema = {
  owner: string
  repo: string
  sarif_id: string
}

export type t_CodeScanningListAlertInstancesParamSchema = {
  alert_number: t_alert_number
  owner: string
  repo: string
}

export type t_CodeScanningListAlertInstancesQuerySchema = {
  page?: number
  per_page?: number
  ref?: t_code_scanning_ref
}

export type t_CodeScanningListAlertsForOrgParamSchema = {
  org: string
}

export type t_CodeScanningListAlertsForOrgQuerySchema = {
  after?: string
  before?: string
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  severity?: t_code_scanning_alert_severity
  sort?: "created" | "updated"
  state?: t_code_scanning_alert_state
  tool_guid?: t_code_scanning_analysis_tool_guid
  tool_name?: t_code_scanning_analysis_tool_name
}

export type t_CodeScanningListAlertsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_CodeScanningListAlertsForRepoQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  ref?: t_code_scanning_ref
  severity?: t_code_scanning_alert_severity
  sort?: "created" | "updated"
  state?: t_code_scanning_alert_state
  tool_guid?: t_code_scanning_analysis_tool_guid
  tool_name?: t_code_scanning_analysis_tool_name
}

export type t_CodeScanningListCodeqlDatabasesParamSchema = {
  owner: string
  repo: string
}

export type t_CodeScanningListRecentAnalysesParamSchema = {
  owner: string
  repo: string
}

export type t_CodeScanningListRecentAnalysesQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  ref?: t_code_scanning_ref
  sarif_id?: t_code_scanning_analysis_sarif_id
  sort?: "created"
  tool_guid?: t_code_scanning_analysis_tool_guid
  tool_name?: t_code_scanning_analysis_tool_name
}

export type t_CodeScanningUpdateAlertBodySchema = {
  dismissed_comment?: t_code_scanning_alert_dismissed_comment
  dismissed_reason?: t_code_scanning_alert_dismissed_reason
  state: t_code_scanning_alert_set_state
}

export type t_CodeScanningUpdateAlertParamSchema = {
  alert_number: t_alert_number
  owner: string
  repo: string
}

export type t_CodeScanningUpdateDefaultSetupBodySchema = {
  query_suite?: "default" | "extended"
  state: "configured" | "not-configured"
}

export type t_CodeScanningUpdateDefaultSetupParamSchema = {
  owner: string
  repo: string
}

export type t_CodeScanningUploadSarifBodySchema = {
  checkout_uri?: string
  commit_sha: t_code_scanning_analysis_commit_sha
  ref: t_code_scanning_ref
  sarif: t_code_scanning_analysis_sarif_file
  started_at?: string
  tool_name?: string
  validate?: boolean
}

export type t_CodeScanningUploadSarifParamSchema = {
  owner: string
  repo: string
}

export type t_CodesOfConductGetConductCodeParamSchema = {
  key: string
}

export type t_CodespacesAddRepositoryForSecretForAuthenticatedUserParamSchema =
  {
    repository_id: number
    secret_name: string
  }

export type t_CodespacesAddSelectedRepoToOrgSecretParamSchema = {
  org: string
  repository_id: number
  secret_name: string
}

export type t_CodespacesCodespaceMachinesForAuthenticatedUserParamSchema = {
  codespace_name: string
}

export type t_CodespacesCreateForAuthenticatedUserBodySchema =
  | {
      client_ip?: string
      devcontainer_path?: string
      display_name?: string
      idle_timeout_minutes?: number
      location?: string
      machine?: string
      multi_repo_permissions_opt_out?: boolean
      ref?: string
      repository_id: number
      retention_period_minutes?: number
      working_directory?: string
    }
  | {
      devcontainer_path?: string
      idle_timeout_minutes?: number
      location?: string
      machine?: string
      pull_request: {
        pull_request_number: number
        repository_id: number
      }
      working_directory?: string
    }

export type t_CodespacesCreateOrUpdateOrgSecretBodySchema = {
  encrypted_value?: string
  key_id?: string
  selected_repository_ids?: number[]
  visibility: "all" | "private" | "selected"
}

export type t_CodespacesCreateOrUpdateOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_CodespacesCreateOrUpdateRepoSecretBodySchema = {
  encrypted_value?: string
  key_id?: string
}

export type t_CodespacesCreateOrUpdateRepoSecretParamSchema = {
  owner: string
  repo: string
  secret_name: string
}

export type t_CodespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema = {
  encrypted_value?: string
  key_id: string
  selected_repository_ids?: (number | string)[]
}

export type t_CodespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema = {
  secret_name: string
}

export type t_CodespacesCreateWithPrForAuthenticatedUserBodySchema = {
  client_ip?: string
  devcontainer_path?: string
  display_name?: string
  idle_timeout_minutes?: number
  location?: string
  machine?: string
  multi_repo_permissions_opt_out?: boolean
  retention_period_minutes?: number
  working_directory?: string
} | null

export type t_CodespacesCreateWithPrForAuthenticatedUserParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_CodespacesCreateWithRepoForAuthenticatedUserBodySchema = {
  client_ip?: string
  devcontainer_path?: string
  display_name?: string
  idle_timeout_minutes?: number
  location?: string
  machine?: string
  multi_repo_permissions_opt_out?: boolean
  ref?: string
  retention_period_minutes?: number
  working_directory?: string
} | null

export type t_CodespacesCreateWithRepoForAuthenticatedUserParamSchema = {
  owner: string
  repo: string
}

export type t_CodespacesDeleteCodespacesBillingUsersBodySchema = {
  selected_usernames: string[]
}

export type t_CodespacesDeleteCodespacesBillingUsersParamSchema = {
  org: string
}

export type t_CodespacesDeleteForAuthenticatedUserParamSchema = {
  codespace_name: string
}

export type t_CodespacesDeleteFromOrganizationParamSchema = {
  codespace_name: string
  org: string
  username: string
}

export type t_CodespacesDeleteOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_CodespacesDeleteRepoSecretParamSchema = {
  owner: string
  repo: string
  secret_name: string
}

export type t_CodespacesDeleteSecretForAuthenticatedUserParamSchema = {
  secret_name: string
}

export type t_CodespacesExportForAuthenticatedUserParamSchema = {
  codespace_name: string
}

export type t_CodespacesGetCodespacesForUserInOrgParamSchema = {
  org: string
  username: string
}

export type t_CodespacesGetCodespacesForUserInOrgQuerySchema = {
  page?: number
  per_page?: number
}

export type t_CodespacesGetExportDetailsForAuthenticatedUserParamSchema = {
  codespace_name: string
  export_id: string
}

export type t_CodespacesGetForAuthenticatedUserParamSchema = {
  codespace_name: string
}

export type t_CodespacesGetOrgPublicKeyParamSchema = {
  org: string
}

export type t_CodespacesGetOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_CodespacesGetRepoPublicKeyParamSchema = {
  owner: string
  repo: string
}

export type t_CodespacesGetRepoSecretParamSchema = {
  owner: string
  repo: string
  secret_name: string
}

export type t_CodespacesGetSecretForAuthenticatedUserParamSchema = {
  secret_name: string
}

export type t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema =
  {
    owner: string
    repo: string
  }

export type t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema =
  {
    page?: number
    per_page?: number
  }

export type t_CodespacesListForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
  repository_id?: number
}

export type t_CodespacesListInOrganizationParamSchema = {
  org: string
}

export type t_CodespacesListInOrganizationQuerySchema = {
  page?: number
  per_page?: number
}

export type t_CodespacesListInRepositoryForAuthenticatedUserParamSchema = {
  owner: string
  repo: string
}

export type t_CodespacesListInRepositoryForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_CodespacesListOrgSecretsParamSchema = {
  org: string
}

export type t_CodespacesListOrgSecretsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_CodespacesListRepoSecretsParamSchema = {
  owner: string
  repo: string
}

export type t_CodespacesListRepoSecretsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_CodespacesListRepositoriesForSecretForAuthenticatedUserParamSchema =
  {
    secret_name: string
  }

export type t_CodespacesListSecretsForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_CodespacesListSelectedReposForOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_CodespacesListSelectedReposForOrgSecretQuerySchema = {
  page?: number
  per_page?: number
}

export type t_CodespacesPreFlightWithRepoForAuthenticatedUserParamSchema = {
  owner: string
  repo: string
}

export type t_CodespacesPreFlightWithRepoForAuthenticatedUserQuerySchema = {
  client_ip?: string
  ref?: string
}

export type t_CodespacesPublishForAuthenticatedUserBodySchema = {
  name?: string
  private?: boolean
}

export type t_CodespacesPublishForAuthenticatedUserParamSchema = {
  codespace_name: string
}

export type t_CodespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema =
  {
    repository_id: number
    secret_name: string
  }

export type t_CodespacesRemoveSelectedRepoFromOrgSecretParamSchema = {
  org: string
  repository_id: number
  secret_name: string
}

export type t_CodespacesRepoMachinesForAuthenticatedUserParamSchema = {
  owner: string
  repo: string
}

export type t_CodespacesRepoMachinesForAuthenticatedUserQuerySchema = {
  client_ip?: string
  location?: string
}

export type t_CodespacesSetCodespacesBillingBodySchema = {
  selected_usernames?: string[]
  visibility:
    | "disabled"
    | "selected_members"
    | "all_members"
    | "all_members_and_outside_collaborators"
}

export type t_CodespacesSetCodespacesBillingParamSchema = {
  org: string
}

export type t_CodespacesSetCodespacesBillingUsersBodySchema = {
  selected_usernames: string[]
}

export type t_CodespacesSetCodespacesBillingUsersParamSchema = {
  org: string
}

export type t_CodespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema =
  {
    selected_repository_ids: number[]
  }

export type t_CodespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema =
  {
    secret_name: string
  }

export type t_CodespacesSetSelectedReposForOrgSecretBodySchema = {
  selected_repository_ids: number[]
}

export type t_CodespacesSetSelectedReposForOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_CodespacesStartForAuthenticatedUserParamSchema = {
  codespace_name: string
}

export type t_CodespacesStopForAuthenticatedUserParamSchema = {
  codespace_name: string
}

export type t_CodespacesStopInOrganizationParamSchema = {
  codespace_name: string
  org: string
  username: string
}

export type t_CodespacesUpdateForAuthenticatedUserBodySchema = {
  display_name?: string
  machine?: string
  recent_folders?: string[]
}

export type t_CodespacesUpdateForAuthenticatedUserParamSchema = {
  codespace_name: string
}

export type t_DependabotAddSelectedRepoToOrgSecretParamSchema = {
  org: string
  repository_id: number
  secret_name: string
}

export type t_DependabotCreateOrUpdateOrgSecretBodySchema = {
  encrypted_value?: string
  key_id?: string
  selected_repository_ids?: string[]
  visibility: "all" | "private" | "selected"
}

export type t_DependabotCreateOrUpdateOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_DependabotCreateOrUpdateRepoSecretBodySchema = {
  encrypted_value?: string
  key_id?: string
}

export type t_DependabotCreateOrUpdateRepoSecretParamSchema = {
  owner: string
  repo: string
  secret_name: string
}

export type t_DependabotDeleteOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_DependabotDeleteRepoSecretParamSchema = {
  owner: string
  repo: string
  secret_name: string
}

export type t_DependabotGetAlertParamSchema = {
  alert_number: t_alert_number
  owner: string
  repo: string
}

export type t_DependabotGetOrgPublicKeyParamSchema = {
  org: string
}

export type t_DependabotGetOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_DependabotGetRepoPublicKeyParamSchema = {
  owner: string
  repo: string
}

export type t_DependabotGetRepoSecretParamSchema = {
  owner: string
  repo: string
  secret_name: string
}

export type t_DependabotListAlertsForEnterpriseParamSchema = {
  enterprise: string
}

export type t_DependabotListAlertsForEnterpriseQuerySchema = {
  after?: string
  before?: string
  direction?: "asc" | "desc"
  ecosystem?: string
  first?: number
  last?: number
  package?: string
  per_page?: number
  scope?: "development" | "runtime"
  severity?: string
  sort?: "created" | "updated"
  state?: string
}

export type t_DependabotListAlertsForOrgParamSchema = {
  org: string
}

export type t_DependabotListAlertsForOrgQuerySchema = {
  after?: string
  before?: string
  direction?: "asc" | "desc"
  ecosystem?: string
  first?: number
  last?: number
  package?: string
  per_page?: number
  scope?: "development" | "runtime"
  severity?: string
  sort?: "created" | "updated"
  state?: string
}

export type t_DependabotListAlertsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_DependabotListAlertsForRepoQuerySchema = {
  after?: string
  before?: string
  direction?: "asc" | "desc"
  ecosystem?: string
  first?: number
  last?: number
  manifest?: string
  package?: string
  page?: number
  per_page?: number
  scope?: "development" | "runtime"
  severity?: string
  sort?: "created" | "updated"
  state?: string
}

export type t_DependabotListOrgSecretsParamSchema = {
  org: string
}

export type t_DependabotListOrgSecretsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_DependabotListRepoSecretsParamSchema = {
  owner: string
  repo: string
}

export type t_DependabotListRepoSecretsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_DependabotListSelectedReposForOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_DependabotListSelectedReposForOrgSecretQuerySchema = {
  page?: number
  per_page?: number
}

export type t_DependabotRemoveSelectedRepoFromOrgSecretParamSchema = {
  org: string
  repository_id: number
  secret_name: string
}

export type t_DependabotSetSelectedReposForOrgSecretBodySchema = {
  selected_repository_ids: number[]
}

export type t_DependabotSetSelectedReposForOrgSecretParamSchema = {
  org: string
  secret_name: string
}

export type t_DependabotUpdateAlertBodySchema = {
  dismissed_comment?: string
  dismissed_reason?:
    | "fix_started"
    | "inaccurate"
    | "no_bandwidth"
    | "not_used"
    | "tolerable_risk"
  state: "dismissed" | "open"
}

export type t_DependabotUpdateAlertParamSchema = {
  alert_number: t_alert_number
  owner: string
  repo: string
}

export type t_DependencyGraphCreateRepositorySnapshotBodySchema = {
  detector: {
    name: string
    url: string
    version: string
  }
  job: {
    correlator: string
    html_url?: string
    id: string
  }
  manifests?: {
    [key: string]: t_manifest
  }
  metadata?: t_metadata
  ref: string
  scanned: string
  sha: string
  version: number
}

export type t_DependencyGraphCreateRepositorySnapshotParamSchema = {
  owner: string
  repo: string
}

export type t_DependencyGraphDiffRangeParamSchema = {
  basehead: string
  owner: string
  repo: string
}

export type t_DependencyGraphDiffRangeQuerySchema = {
  name?: string
}

export type t_DependencyGraphExportSbomParamSchema = {
  owner: string
  repo: string
}

export type t_GistsCheckIsStarredParamSchema = {
  gist_id: string
}

export type t_GistsCreateBodySchema = {
  description?: string
  files: {
    [key: string]: {
      content: string
    }
  }
  public?: boolean | "true" | "false"
}

export type t_GistsCreateCommentBodySchema = {
  body: string
}

export type t_GistsCreateCommentParamSchema = {
  gist_id: string
}

export type t_GistsDeleteParamSchema = {
  gist_id: string
}

export type t_GistsDeleteCommentParamSchema = {
  comment_id: number
  gist_id: string
}

export type t_GistsForkParamSchema = {
  gist_id: string
}

export type t_GistsGetParamSchema = {
  gist_id: string
}

export type t_GistsGetCommentParamSchema = {
  comment_id: number
  gist_id: string
}

export type t_GistsGetRevisionParamSchema = {
  gist_id: string
  sha: string
}

export type t_GistsListQuerySchema = {
  page?: number
  per_page?: number
  since?: string
}

export type t_GistsListCommentsParamSchema = {
  gist_id: string
}

export type t_GistsListCommentsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_GistsListCommitsParamSchema = {
  gist_id: string
}

export type t_GistsListCommitsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_GistsListForUserParamSchema = {
  username: string
}

export type t_GistsListForUserQuerySchema = {
  page?: number
  per_page?: number
  since?: string
}

export type t_GistsListForksParamSchema = {
  gist_id: string
}

export type t_GistsListForksQuerySchema = {
  page?: number
  per_page?: number
}

export type t_GistsListPublicQuerySchema = {
  page?: number
  per_page?: number
  since?: string
}

export type t_GistsListStarredQuerySchema = {
  page?: number
  per_page?: number
  since?: string
}

export type t_GistsStarParamSchema = {
  gist_id: string
}

export type t_GistsUnstarParamSchema = {
  gist_id: string
}

export type t_GistsUpdateBodySchema = {
  description?: string
  files?: {
    [key: string]: EmptyObject | null
  }
} | null

export type t_GistsUpdateParamSchema = {
  gist_id: string
}

export type t_GistsUpdateCommentBodySchema = {
  body: string
}

export type t_GistsUpdateCommentParamSchema = {
  comment_id: number
  gist_id: string
}

export type t_GitCreateBlobBodySchema = {
  content: string
  encoding?: string
}

export type t_GitCreateBlobParamSchema = {
  owner: string
  repo: string
}

export type t_GitCreateCommitBodySchema = {
  author?: {
    date?: string
    email: string
    name: string
  }
  committer?: {
    date?: string
    email?: string
    name?: string
  }
  message: string
  parents?: string[]
  signature?: string
  tree: string
}

export type t_GitCreateCommitParamSchema = {
  owner: string
  repo: string
}

export type t_GitCreateRefBodySchema = {
  key?: string
  ref: string
  sha: string
}

export type t_GitCreateRefParamSchema = {
  owner: string
  repo: string
}

export type t_GitCreateTagBodySchema = {
  message: string
  object: string
  tag: string
  tagger?: {
    date?: string
    email: string
    name: string
  }
  type: "commit" | "tree" | "blob"
}

export type t_GitCreateTagParamSchema = {
  owner: string
  repo: string
}

export type t_GitCreateTreeBodySchema = {
  base_tree?: string
  tree: {
    content?: string
    mode?: "100644" | "100755" | "040000" | "160000" | "120000"
    path?: string
    sha?: string | null
    type?: "blob" | "tree" | "commit"
  }[]
}

export type t_GitCreateTreeParamSchema = {
  owner: string
  repo: string
}

export type t_GitDeleteRefParamSchema = {
  owner: string
  ref: string
  repo: string
}

export type t_GitGetBlobParamSchema = {
  file_sha: string
  owner: string
  repo: string
}

export type t_GitGetCommitParamSchema = {
  commit_sha: string
  owner: string
  repo: string
}

export type t_GitGetRefParamSchema = {
  owner: string
  ref: string
  repo: string
}

export type t_GitGetTagParamSchema = {
  owner: string
  repo: string
  tag_sha: string
}

export type t_GitGetTreeParamSchema = {
  owner: string
  repo: string
  tree_sha: string
}

export type t_GitGetTreeQuerySchema = {
  recursive?: string
}

export type t_GitListMatchingRefsParamSchema = {
  owner: string
  ref: string
  repo: string
}

export type t_GitUpdateRefBodySchema = {
  force?: boolean
  sha: string
}

export type t_GitUpdateRefParamSchema = {
  owner: string
  ref: string
  repo: string
}

export type t_GitignoreGetTemplateParamSchema = {
  name: string
}

export type t_InteractionsGetRestrictionsForOrgParamSchema = {
  org: string
}

export type t_InteractionsGetRestrictionsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_InteractionsRemoveRestrictionsForOrgParamSchema = {
  org: string
}

export type t_InteractionsRemoveRestrictionsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_InteractionsSetRestrictionsForAuthenticatedUserBodySchema = {
  expiry?: t_interaction_expiry
  limit: t_interaction_group
}

export type t_InteractionsSetRestrictionsForOrgBodySchema = {
  expiry?: t_interaction_expiry
  limit: t_interaction_group
}

export type t_InteractionsSetRestrictionsForOrgParamSchema = {
  org: string
}

export type t_InteractionsSetRestrictionsForRepoBodySchema = {
  expiry?: t_interaction_expiry
  limit: t_interaction_group
}

export type t_InteractionsSetRestrictionsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_IssuesAddAssigneesBodySchema = {
  assignees?: string[]
}

export type t_IssuesAddAssigneesParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesAddLabelsBodySchema =
  | {
      labels?: string[]
    }
  | string[]
  | {
      labels?: {
        name: string
      }[]
    }
  | {
      name: string
    }[]
  | string

export type t_IssuesAddLabelsParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesCheckUserCanBeAssignedParamSchema = {
  assignee: string
  owner: string
  repo: string
}

export type t_IssuesCheckUserCanBeAssignedToIssueParamSchema = {
  assignee: string
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesCreateBodySchema = {
  assignee?: string | null
  assignees?: string[]
  body?: string
  labels?: (
    | string
    | {
        color?: string | null
        description?: string | null
        id?: number
        name?: string
      }
  )[]
  milestone?: string | number | null
  title: string | number
}

export type t_IssuesCreateParamSchema = {
  owner: string
  repo: string
}

export type t_IssuesCreateCommentBodySchema = {
  body: string
}

export type t_IssuesCreateCommentParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesCreateLabelBodySchema = {
  color?: string
  description?: string
  name: string
}

export type t_IssuesCreateLabelParamSchema = {
  owner: string
  repo: string
}

export type t_IssuesCreateMilestoneBodySchema = {
  description?: string
  due_on?: string
  state?: "open" | "closed"
  title: string
}

export type t_IssuesCreateMilestoneParamSchema = {
  owner: string
  repo: string
}

export type t_IssuesDeleteCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_IssuesDeleteLabelParamSchema = {
  name: string
  owner: string
  repo: string
}

export type t_IssuesDeleteMilestoneParamSchema = {
  milestone_number: number
  owner: string
  repo: string
}

export type t_IssuesGetParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesGetCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_IssuesGetEventParamSchema = {
  event_id: number
  owner: string
  repo: string
}

export type t_IssuesGetLabelParamSchema = {
  name: string
  owner: string
  repo: string
}

export type t_IssuesGetMilestoneParamSchema = {
  milestone_number: number
  owner: string
  repo: string
}

export type t_IssuesListQuerySchema = {
  collab?: boolean
  direction?: "asc" | "desc"
  filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all"
  labels?: string
  orgs?: boolean
  owned?: boolean
  page?: number
  per_page?: number
  pulls?: boolean
  since?: string
  sort?: "created" | "updated" | "comments"
  state?: "open" | "closed" | "all"
}

export type t_IssuesListAssigneesParamSchema = {
  owner: string
  repo: string
}

export type t_IssuesListAssigneesQuerySchema = {
  page?: number
  per_page?: number
}

export type t_IssuesListCommentsParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesListCommentsQuerySchema = {
  page?: number
  per_page?: number
  since?: string
}

export type t_IssuesListCommentsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_IssuesListCommentsForRepoQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  since?: string
  sort?: "created" | "updated"
}

export type t_IssuesListEventsParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesListEventsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_IssuesListEventsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_IssuesListEventsForRepoQuerySchema = {
  page?: number
  per_page?: number
}

export type t_IssuesListEventsForTimelineParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesListEventsForTimelineQuerySchema = {
  page?: number
  per_page?: number
}

export type t_IssuesListForAuthenticatedUserQuerySchema = {
  direction?: "asc" | "desc"
  filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all"
  labels?: string
  page?: number
  per_page?: number
  since?: string
  sort?: "created" | "updated" | "comments"
  state?: "open" | "closed" | "all"
}

export type t_IssuesListForOrgParamSchema = {
  org: string
}

export type t_IssuesListForOrgQuerySchema = {
  direction?: "asc" | "desc"
  filter?: "assigned" | "created" | "mentioned" | "subscribed" | "repos" | "all"
  labels?: string
  page?: number
  per_page?: number
  since?: string
  sort?: "created" | "updated" | "comments"
  state?: "open" | "closed" | "all"
}

export type t_IssuesListForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_IssuesListForRepoQuerySchema = {
  assignee?: string
  creator?: string
  direction?: "asc" | "desc"
  labels?: string
  mentioned?: string
  milestone?: string
  page?: number
  per_page?: number
  since?: string
  sort?: "created" | "updated" | "comments"
  state?: "open" | "closed" | "all"
}

export type t_IssuesListLabelsForMilestoneParamSchema = {
  milestone_number: number
  owner: string
  repo: string
}

export type t_IssuesListLabelsForMilestoneQuerySchema = {
  page?: number
  per_page?: number
}

export type t_IssuesListLabelsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_IssuesListLabelsForRepoQuerySchema = {
  page?: number
  per_page?: number
}

export type t_IssuesListLabelsOnIssueParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesListLabelsOnIssueQuerySchema = {
  page?: number
  per_page?: number
}

export type t_IssuesListMilestonesParamSchema = {
  owner: string
  repo: string
}

export type t_IssuesListMilestonesQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  sort?: "due_on" | "completeness"
  state?: "open" | "closed" | "all"
}

export type t_IssuesLockBodySchema = {
  lock_reason?: "off-topic" | "too heated" | "resolved" | "spam"
} | null

export type t_IssuesLockParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesRemoveAllLabelsParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesRemoveAssigneesBodySchema = {
  assignees?: string[]
}

export type t_IssuesRemoveAssigneesParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesRemoveLabelParamSchema = {
  issue_number: number
  name: string
  owner: string
  repo: string
}

export type t_IssuesSetLabelsBodySchema =
  | {
      labels?: string[]
    }
  | string[]
  | {
      labels?: {
        name: string
      }[]
    }
  | {
      name: string
    }[]
  | string

export type t_IssuesSetLabelsParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesUnlockParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesUpdateBodySchema = {
  assignee?: string | null
  assignees?: string[]
  body?: string | null
  labels?: (
    | string
    | {
        color?: string | null
        description?: string | null
        id?: number
        name?: string
      }
  )[]
  milestone?: string | number | null
  state?: "open" | "closed"
  state_reason?: "completed" | "not_planned" | "reopened" | null
  title?: string | number | null
}

export type t_IssuesUpdateParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_IssuesUpdateCommentBodySchema = {
  body: string
}

export type t_IssuesUpdateCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_IssuesUpdateLabelBodySchema = {
  color?: string
  description?: string
  new_name?: string
}

export type t_IssuesUpdateLabelParamSchema = {
  name: string
  owner: string
  repo: string
}

export type t_IssuesUpdateMilestoneBodySchema = {
  description?: string
  due_on?: string
  state?: "open" | "closed"
  title?: string
}

export type t_IssuesUpdateMilestoneParamSchema = {
  milestone_number: number
  owner: string
  repo: string
}

export type t_LicensesGetParamSchema = {
  license: string
}

export type t_LicensesGetAllCommonlyUsedQuerySchema = {
  featured?: boolean
  page?: number
  per_page?: number
}

export type t_LicensesGetForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_MarkdownRenderBodySchema = {
  context?: string
  mode?: "markdown" | "gfm"
  text: string
}

export type t_MarkdownRenderRawBodySchema = string

export type t_MetaGetOctocatQuerySchema = {
  s?: string
}

export type t_MigrationsCancelImportParamSchema = {
  owner: string
  repo: string
}

export type t_MigrationsDeleteArchiveForAuthenticatedUserParamSchema = {
  migration_id: number
}

export type t_MigrationsDeleteArchiveForOrgParamSchema = {
  migration_id: number
  org: string
}

export type t_MigrationsDownloadArchiveForOrgParamSchema = {
  migration_id: number
  org: string
}

export type t_MigrationsGetArchiveForAuthenticatedUserParamSchema = {
  migration_id: number
}

export type t_MigrationsGetCommitAuthorsParamSchema = {
  owner: string
  repo: string
}

export type t_MigrationsGetCommitAuthorsQuerySchema = {
  since?: number
}

export type t_MigrationsGetImportStatusParamSchema = {
  owner: string
  repo: string
}

export type t_MigrationsGetLargeFilesParamSchema = {
  owner: string
  repo: string
}

export type t_MigrationsGetStatusForAuthenticatedUserParamSchema = {
  migration_id: number
}

export type t_MigrationsGetStatusForAuthenticatedUserQuerySchema = {
  exclude?: string[]
}

export type t_MigrationsGetStatusForOrgParamSchema = {
  migration_id: number
  org: string
}

export type t_MigrationsGetStatusForOrgQuerySchema = {
  exclude?: "repositories"[]
}

export type t_MigrationsListForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_MigrationsListForOrgParamSchema = {
  org: string
}

export type t_MigrationsListForOrgQuerySchema = {
  exclude?: "repositories"[]
  page?: number
  per_page?: number
}

export type t_MigrationsListReposForAuthenticatedUserParamSchema = {
  migration_id: number
}

export type t_MigrationsListReposForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_MigrationsListReposForOrgParamSchema = {
  migration_id: number
  org: string
}

export type t_MigrationsListReposForOrgQuerySchema = {
  page?: number
  per_page?: number
}

export type t_MigrationsMapCommitAuthorBodySchema = {
  email?: string
  name?: string
}

export type t_MigrationsMapCommitAuthorParamSchema = {
  author_id: number
  owner: string
  repo: string
}

export type t_MigrationsSetLfsPreferenceBodySchema = {
  use_lfs: "opt_in" | "opt_out"
}

export type t_MigrationsSetLfsPreferenceParamSchema = {
  owner: string
  repo: string
}

export type t_MigrationsStartForAuthenticatedUserBodySchema = {
  exclude?: "repositories"[]
  exclude_attachments?: boolean
  exclude_git_data?: boolean
  exclude_metadata?: boolean
  exclude_owner_projects?: boolean
  exclude_releases?: boolean
  lock_repositories?: boolean
  org_metadata_only?: boolean
  repositories: string[]
}

export type t_MigrationsStartForOrgBodySchema = {
  exclude?: "repositories"[]
  exclude_attachments?: boolean
  exclude_git_data?: boolean
  exclude_metadata?: boolean
  exclude_owner_projects?: boolean
  exclude_releases?: boolean
  lock_repositories?: boolean
  org_metadata_only?: boolean
  repositories: string[]
}

export type t_MigrationsStartForOrgParamSchema = {
  org: string
}

export type t_MigrationsStartImportBodySchema = {
  tfvc_project?: string
  vcs?: "subversion" | "git" | "mercurial" | "tfvc"
  vcs_password?: string
  vcs_url: string
  vcs_username?: string
}

export type t_MigrationsStartImportParamSchema = {
  owner: string
  repo: string
}

export type t_MigrationsUnlockRepoForAuthenticatedUserParamSchema = {
  migration_id: number
  repo_name: string
}

export type t_MigrationsUnlockRepoForOrgParamSchema = {
  migration_id: number
  org: string
  repo_name: string
}

export type t_MigrationsUpdateImportBodySchema = {
  tfvc_project?: string
  vcs?: "subversion" | "tfvc" | "git" | "mercurial"
  vcs_password?: string
  vcs_username?: string
} | null

export type t_MigrationsUpdateImportParamSchema = {
  owner: string
  repo: string
}

export type t_OidcGetOidcCustomSubTemplateForOrgParamSchema = {
  org: string
}

export type t_OidcUpdateOidcCustomSubTemplateForOrgBodySchema = {
  include_claim_keys: string[]
}

export type t_OidcUpdateOidcCustomSubTemplateForOrgParamSchema = {
  org: string
}

export type t_OrgsAddSecurityManagerTeamParamSchema = {
  org: string
  team_slug: string
}

export type t_OrgsBlockUserParamSchema = {
  org: string
  username: string
}

export type t_OrgsCancelInvitationParamSchema = {
  invitation_id: number
  org: string
}

export type t_OrgsCheckBlockedUserParamSchema = {
  org: string
  username: string
}

export type t_OrgsCheckMembershipForUserParamSchema = {
  org: string
  username: string
}

export type t_OrgsCheckPublicMembershipForUserParamSchema = {
  org: string
  username: string
}

export type t_OrgsConvertMemberToOutsideCollaboratorBodySchema = {
  async?: boolean
}

export type t_OrgsConvertMemberToOutsideCollaboratorParamSchema = {
  org: string
  username: string
}

export type t_OrgsCreateInvitationBodySchema = {
  email?: string
  invitee_id?: number
  role?: "admin" | "direct_member" | "billing_manager"
  team_ids?: number[]
}

export type t_OrgsCreateInvitationParamSchema = {
  org: string
}

export type t_OrgsCreateWebhookBodySchema = {
  active?: boolean
  config: {
    content_type?: t_webhook_config_content_type
    insecure_ssl?: t_webhook_config_insecure_ssl
    password?: string
    secret?: t_webhook_config_secret
    url: t_webhook_config_url
    username?: string
  }
  events?: string[]
  name: string
}

export type t_OrgsCreateWebhookParamSchema = {
  org: string
}

export type t_OrgsDeleteParamSchema = {
  org: string
}

export type t_OrgsDeleteWebhookParamSchema = {
  hook_id: number
  org: string
}

export type t_OrgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema = {
  enablement: "enable_all" | "disable_all"
  org: string
  security_product:
    | "dependency_graph"
    | "dependabot_alerts"
    | "dependabot_security_updates"
    | "advanced_security"
    | "code_scanning_default_setup"
    | "secret_scanning"
    | "secret_scanning_push_protection"
}

export type t_OrgsGetParamSchema = {
  org: string
}

export type t_OrgsGetMembershipForAuthenticatedUserParamSchema = {
  org: string
}

export type t_OrgsGetMembershipForUserParamSchema = {
  org: string
  username: string
}

export type t_OrgsGetWebhookParamSchema = {
  hook_id: number
  org: string
}

export type t_OrgsGetWebhookConfigForOrgParamSchema = {
  hook_id: number
  org: string
}

export type t_OrgsGetWebhookDeliveryParamSchema = {
  delivery_id: number
  hook_id: number
  org: string
}

export type t_OrgsListQuerySchema = {
  per_page?: number
  since?: number
}

export type t_OrgsListAppInstallationsParamSchema = {
  org: string
}

export type t_OrgsListAppInstallationsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_OrgsListBlockedUsersParamSchema = {
  org: string
}

export type t_OrgsListBlockedUsersQuerySchema = {
  page?: number
  per_page?: number
}

export type t_OrgsListFailedInvitationsParamSchema = {
  org: string
}

export type t_OrgsListFailedInvitationsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_OrgsListForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_OrgsListForUserParamSchema = {
  username: string
}

export type t_OrgsListForUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_OrgsListInvitationTeamsParamSchema = {
  invitation_id: number
  org: string
}

export type t_OrgsListInvitationTeamsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_OrgsListMembersParamSchema = {
  org: string
}

export type t_OrgsListMembersQuerySchema = {
  filter?: "2fa_disabled" | "all"
  page?: number
  per_page?: number
  role?: "all" | "admin" | "member"
}

export type t_OrgsListMembershipsForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
  state?: "active" | "pending"
}

export type t_OrgsListOutsideCollaboratorsParamSchema = {
  org: string
}

export type t_OrgsListOutsideCollaboratorsQuerySchema = {
  filter?: "2fa_disabled" | "all"
  page?: number
  per_page?: number
}

export type t_OrgsListPatGrantRepositoriesParamSchema = {
  org: string
  pat_id: number
}

export type t_OrgsListPatGrantRepositoriesQuerySchema = {
  page?: number
  per_page?: number
}

export type t_OrgsListPatGrantRequestRepositoriesParamSchema = {
  org: string
  pat_request_id: number
}

export type t_OrgsListPatGrantRequestRepositoriesQuerySchema = {
  page?: number
  per_page?: number
}

export type t_OrgsListPatGrantRequestsParamSchema = {
  org: string
}

export type t_OrgsListPatGrantRequestsQuerySchema = {
  direction?: "asc" | "desc"
  last_used_after?: string
  last_used_before?: string
  owner?: string[]
  page?: number
  per_page?: number
  permission?: string
  repository?: string
  sort?: "created_at"
}

export type t_OrgsListPatGrantsParamSchema = {
  org: string
}

export type t_OrgsListPatGrantsQuerySchema = {
  direction?: "asc" | "desc"
  last_used_after?: string
  last_used_before?: string
  owner?: string[]
  page?: number
  per_page?: number
  permission?: string
  repository?: string
  sort?: "created_at"
}

export type t_OrgsListPendingInvitationsParamSchema = {
  org: string
}

export type t_OrgsListPendingInvitationsQuerySchema = {
  invitation_source?: "all" | "member" | "scim"
  page?: number
  per_page?: number
  role?:
    | "all"
    | "admin"
    | "direct_member"
    | "billing_manager"
    | "hiring_manager"
}

export type t_OrgsListPublicMembersParamSchema = {
  org: string
}

export type t_OrgsListPublicMembersQuerySchema = {
  page?: number
  per_page?: number
}

export type t_OrgsListSecurityManagerTeamsParamSchema = {
  org: string
}

export type t_OrgsListWebhookDeliveriesParamSchema = {
  hook_id: number
  org: string
}

export type t_OrgsListWebhookDeliveriesQuerySchema = {
  cursor?: string
  per_page?: number
  redelivery?: boolean
}

export type t_OrgsListWebhooksParamSchema = {
  org: string
}

export type t_OrgsListWebhooksQuerySchema = {
  page?: number
  per_page?: number
}

export type t_OrgsPingWebhookParamSchema = {
  hook_id: number
  org: string
}

export type t_OrgsRedeliverWebhookDeliveryParamSchema = {
  delivery_id: number
  hook_id: number
  org: string
}

export type t_OrgsRemoveMemberParamSchema = {
  org: string
  username: string
}

export type t_OrgsRemoveMembershipForUserParamSchema = {
  org: string
  username: string
}

export type t_OrgsRemoveOutsideCollaboratorParamSchema = {
  org: string
  username: string
}

export type t_OrgsRemovePublicMembershipForAuthenticatedUserParamSchema = {
  org: string
  username: string
}

export type t_OrgsRemoveSecurityManagerTeamParamSchema = {
  org: string
  team_slug: string
}

export type t_OrgsReviewPatGrantRequestBodySchema = {
  action: "approve" | "deny"
  reason?: string | null
}

export type t_OrgsReviewPatGrantRequestParamSchema = {
  org: string
  pat_request_id: number
}

export type t_OrgsReviewPatGrantRequestsInBulkBodySchema = {
  action: "approve" | "deny"
  pat_request_ids?: number[]
  reason?: string | null
}

export type t_OrgsReviewPatGrantRequestsInBulkParamSchema = {
  org: string
}

export type t_OrgsSetMembershipForUserBodySchema = {
  role?: "admin" | "member"
}

export type t_OrgsSetMembershipForUserParamSchema = {
  org: string
  username: string
}

export type t_OrgsSetPublicMembershipForAuthenticatedUserParamSchema = {
  org: string
  username: string
}

export type t_OrgsUnblockUserParamSchema = {
  org: string
  username: string
}

export type t_OrgsUpdateBodySchema = {
  advanced_security_enabled_for_new_repositories?: boolean
  billing_email?: string
  blog?: string
  company?: string
  default_repository_permission?: "read" | "write" | "admin" | "none"
  dependabot_alerts_enabled_for_new_repositories?: boolean
  dependabot_security_updates_enabled_for_new_repositories?: boolean
  dependency_graph_enabled_for_new_repositories?: boolean
  description?: string
  email?: string
  has_organization_projects?: boolean
  has_repository_projects?: boolean
  location?: string
  members_allowed_repository_creation_type?: "all" | "private" | "none"
  members_can_create_internal_repositories?: boolean
  members_can_create_pages?: boolean
  members_can_create_private_pages?: boolean
  members_can_create_private_repositories?: boolean
  members_can_create_public_pages?: boolean
  members_can_create_public_repositories?: boolean
  members_can_create_repositories?: boolean
  members_can_fork_private_repositories?: boolean
  name?: string
  secret_scanning_enabled_for_new_repositories?: boolean
  secret_scanning_push_protection_custom_link?: string
  secret_scanning_push_protection_custom_link_enabled?: boolean
  secret_scanning_push_protection_enabled_for_new_repositories?: boolean
  twitter_username?: string
  web_commit_signoff_required?: boolean
}

export type t_OrgsUpdateParamSchema = {
  org: string
}

export type t_OrgsUpdateMembershipForAuthenticatedUserBodySchema = {
  state: "active"
}

export type t_OrgsUpdateMembershipForAuthenticatedUserParamSchema = {
  org: string
}

export type t_OrgsUpdatePatAccessBodySchema = {
  action: "revoke"
}

export type t_OrgsUpdatePatAccessParamSchema = {
  org: string
  pat_id: number
}

export type t_OrgsUpdatePatAccessesBodySchema = {
  action: "revoke"
  pat_ids: number[]
}

export type t_OrgsUpdatePatAccessesParamSchema = {
  org: string
}

export type t_OrgsUpdateWebhookBodySchema = {
  active?: boolean
  config?: {
    content_type?: t_webhook_config_content_type
    insecure_ssl?: t_webhook_config_insecure_ssl
    secret?: t_webhook_config_secret
    url: t_webhook_config_url
  }
  events?: string[]
  name?: string
}

export type t_OrgsUpdateWebhookParamSchema = {
  hook_id: number
  org: string
}

export type t_OrgsUpdateWebhookConfigForOrgBodySchema = {
  content_type?: t_webhook_config_content_type
  insecure_ssl?: t_webhook_config_insecure_ssl
  secret?: t_webhook_config_secret
  url?: t_webhook_config_url
}

export type t_OrgsUpdateWebhookConfigForOrgParamSchema = {
  hook_id: number
  org: string
}

export type t_PackagesDeletePackageForAuthenticatedUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
}

export type t_PackagesDeletePackageForOrgParamSchema = {
  org: string
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
}

export type t_PackagesDeletePackageForUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  username: string
}

export type t_PackagesDeletePackageVersionForAuthenticatedUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  package_version_id: number
}

export type t_PackagesDeletePackageVersionForOrgParamSchema = {
  org: string
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  package_version_id: number
}

export type t_PackagesDeletePackageVersionForUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  package_version_id: number
  username: string
}

export type t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema =
  {
    package_name: string
    package_type:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container"
  }

export type t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema =
  {
    page?: number
    per_page?: number
    state?: "active" | "deleted"
  }

export type t_PackagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema = {
  org: string
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
}

export type t_PackagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema = {
  page?: number
  per_page?: number
  state?: "active" | "deleted"
}

export type t_PackagesGetAllPackageVersionsForPackageOwnedByUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  username: string
}

export type t_PackagesGetPackageForAuthenticatedUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
}

export type t_PackagesGetPackageForOrganizationParamSchema = {
  org: string
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
}

export type t_PackagesGetPackageForUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  username: string
}

export type t_PackagesGetPackageVersionForAuthenticatedUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  package_version_id: number
}

export type t_PackagesGetPackageVersionForOrganizationParamSchema = {
  org: string
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  package_version_id: number
}

export type t_PackagesGetPackageVersionForUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  package_version_id: number
  username: string
}

export type t_PackagesListDockerMigrationConflictingPackagesForOrganizationParamSchema =
  {
    org: string
  }

export type t_PackagesListDockerMigrationConflictingPackagesForUserParamSchema =
  {
    username: string
  }

export type t_PackagesListPackagesForAuthenticatedUserQuerySchema = {
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  page?: number
  per_page?: number
  visibility?: "public" | "private" | "internal"
}

export type t_PackagesListPackagesForOrganizationParamSchema = {
  org: string
}

export type t_PackagesListPackagesForOrganizationQuerySchema = {
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  page?: number
  per_page?: number
  visibility?: "public" | "private" | "internal"
}

export type t_PackagesListPackagesForUserParamSchema = {
  username: string
}

export type t_PackagesListPackagesForUserQuerySchema = {
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  page?: number
  per_page?: number
  visibility?: "public" | "private" | "internal"
}

export type t_PackagesRestorePackageForAuthenticatedUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
}

export type t_PackagesRestorePackageForAuthenticatedUserQuerySchema = {
  token?: string
}

export type t_PackagesRestorePackageForOrgParamSchema = {
  org: string
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
}

export type t_PackagesRestorePackageForOrgQuerySchema = {
  token?: string
}

export type t_PackagesRestorePackageForUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  username: string
}

export type t_PackagesRestorePackageForUserQuerySchema = {
  token?: string
}

export type t_PackagesRestorePackageVersionForAuthenticatedUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  package_version_id: number
}

export type t_PackagesRestorePackageVersionForOrgParamSchema = {
  org: string
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  package_version_id: number
}

export type t_PackagesRestorePackageVersionForUserParamSchema = {
  package_name: string
  package_type: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container"
  package_version_id: number
  username: string
}

export type t_ProjectsAddCollaboratorBodySchema = {
  permission?: "read" | "write" | "admin"
} | null

export type t_ProjectsAddCollaboratorParamSchema = {
  project_id: number
  username: string
}

export type t_ProjectsCreateCardBodySchema =
  | {
      note: string | null
    }
  | {
      content_id: number
      content_type: string
    }

export type t_ProjectsCreateCardParamSchema = {
  column_id: number
}

export type t_ProjectsCreateColumnBodySchema = {
  name: string
}

export type t_ProjectsCreateColumnParamSchema = {
  project_id: number
}

export type t_ProjectsCreateForAuthenticatedUserBodySchema = {
  body?: string | null
  name: string
}

export type t_ProjectsCreateForOrgBodySchema = {
  body?: string
  name: string
}

export type t_ProjectsCreateForOrgParamSchema = {
  org: string
}

export type t_ProjectsCreateForRepoBodySchema = {
  body?: string
  name: string
}

export type t_ProjectsCreateForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ProjectsDeleteParamSchema = {
  project_id: number
}

export type t_ProjectsDeleteCardParamSchema = {
  card_id: number
}

export type t_ProjectsDeleteColumnParamSchema = {
  column_id: number
}

export type t_ProjectsGetParamSchema = {
  project_id: number
}

export type t_ProjectsGetCardParamSchema = {
  card_id: number
}

export type t_ProjectsGetColumnParamSchema = {
  column_id: number
}

export type t_ProjectsGetPermissionForUserParamSchema = {
  project_id: number
  username: string
}

export type t_ProjectsListCardsParamSchema = {
  column_id: number
}

export type t_ProjectsListCardsQuerySchema = {
  archived_state?: "all" | "archived" | "not_archived"
  page?: number
  per_page?: number
}

export type t_ProjectsListCollaboratorsParamSchema = {
  project_id: number
}

export type t_ProjectsListCollaboratorsQuerySchema = {
  affiliation?: "outside" | "direct" | "all"
  page?: number
  per_page?: number
}

export type t_ProjectsListColumnsParamSchema = {
  project_id: number
}

export type t_ProjectsListColumnsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ProjectsListForOrgParamSchema = {
  org: string
}

export type t_ProjectsListForOrgQuerySchema = {
  page?: number
  per_page?: number
  state?: "open" | "closed" | "all"
}

export type t_ProjectsListForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ProjectsListForRepoQuerySchema = {
  page?: number
  per_page?: number
  state?: "open" | "closed" | "all"
}

export type t_ProjectsListForUserParamSchema = {
  username: string
}

export type t_ProjectsListForUserQuerySchema = {
  page?: number
  per_page?: number
  state?: "open" | "closed" | "all"
}

export type t_ProjectsMoveCardBodySchema = {
  column_id?: number
  position: string
}

export type t_ProjectsMoveCardParamSchema = {
  card_id: number
}

export type t_ProjectsMoveColumnBodySchema = {
  position: string
}

export type t_ProjectsMoveColumnParamSchema = {
  column_id: number
}

export type t_ProjectsRemoveCollaboratorParamSchema = {
  project_id: number
  username: string
}

export type t_ProjectsUpdateBodySchema = {
  body?: string | null
  name?: string
  organization_permission?: "read" | "write" | "admin" | "none"
  private?: boolean
  state?: string
}

export type t_ProjectsUpdateParamSchema = {
  project_id: number
}

export type t_ProjectsUpdateCardBodySchema = {
  archived?: boolean
  note?: string | null
}

export type t_ProjectsUpdateCardParamSchema = {
  card_id: number
}

export type t_ProjectsUpdateColumnBodySchema = {
  name: string
}

export type t_ProjectsUpdateColumnParamSchema = {
  column_id: number
}

export type t_PullsCheckIfMergedParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsCreateBodySchema = {
  base: string
  body?: string
  draft?: boolean
  head: string
  head_repo?: string
  issue?: number
  maintainer_can_modify?: boolean
  title?: string
}

export type t_PullsCreateParamSchema = {
  owner: string
  repo: string
}

export type t_PullsCreateReplyForReviewCommentBodySchema = {
  body: string
}

export type t_PullsCreateReplyForReviewCommentParamSchema = {
  comment_id: number
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsCreateReviewBodySchema = {
  body?: string
  comments?: {
    body: string
    line?: number
    path: string
    position?: number
    side?: string
    start_line?: number
    start_side?: string
  }[]
  commit_id?: string
  event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
}

export type t_PullsCreateReviewParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsCreateReviewCommentBodySchema = {
  body: string
  commit_id: string
  in_reply_to?: number
  line: number
  path: string
  position?: number
  side?: "LEFT" | "RIGHT"
  start_line?: number
  start_side?: "LEFT" | "RIGHT" | "side"
  subject_type?: "LINE" | "FILE"
}

export type t_PullsCreateReviewCommentParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsDeletePendingReviewParamSchema = {
  owner: string
  pull_number: number
  repo: string
  review_id: number
}

export type t_PullsDeleteReviewCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_PullsDismissReviewBodySchema = {
  event?: "DISMISS"
  message: string
}

export type t_PullsDismissReviewParamSchema = {
  owner: string
  pull_number: number
  repo: string
  review_id: number
}

export type t_PullsGetParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsGetReviewParamSchema = {
  owner: string
  pull_number: number
  repo: string
  review_id: number
}

export type t_PullsGetReviewCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_PullsListParamSchema = {
  owner: string
  repo: string
}

export type t_PullsListQuerySchema = {
  base?: string
  direction?: "asc" | "desc"
  head?: string
  page?: number
  per_page?: number
  sort?: "created" | "updated" | "popularity" | "long-running"
  state?: "open" | "closed" | "all"
}

export type t_PullsListCommentsForReviewParamSchema = {
  owner: string
  pull_number: number
  repo: string
  review_id: number
}

export type t_PullsListCommentsForReviewQuerySchema = {
  page?: number
  per_page?: number
}

export type t_PullsListCommitsParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsListCommitsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_PullsListFilesParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsListFilesQuerySchema = {
  page?: number
  per_page?: number
}

export type t_PullsListRequestedReviewersParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsListReviewCommentsParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsListReviewCommentsQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  since?: string
  sort?: "created" | "updated"
}

export type t_PullsListReviewCommentsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_PullsListReviewCommentsForRepoQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  since?: string
  sort?: "created" | "updated" | "created_at"
}

export type t_PullsListReviewsParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsListReviewsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_PullsMergeBodySchema = {
  commit_message?: string
  commit_title?: string
  merge_method?: "merge" | "squash" | "rebase"
  sha?: string
} | null

export type t_PullsMergeParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsRemoveRequestedReviewersBodySchema = {
  reviewers: string[]
  team_reviewers?: string[]
}

export type t_PullsRemoveRequestedReviewersParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsRequestReviewersBodySchema = {
  reviewers?: string[]
  team_reviewers?: string[]
}

export type t_PullsRequestReviewersParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsSubmitReviewBodySchema = {
  body?: string
  event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT"
}

export type t_PullsSubmitReviewParamSchema = {
  owner: string
  pull_number: number
  repo: string
  review_id: number
}

export type t_PullsUpdateBodySchema = {
  base?: string
  body?: string
  maintainer_can_modify?: boolean
  state?: "open" | "closed"
  title?: string
}

export type t_PullsUpdateParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsUpdateBranchBodySchema = {
  expected_head_sha?: string
} | null

export type t_PullsUpdateBranchParamSchema = {
  owner: string
  pull_number: number
  repo: string
}

export type t_PullsUpdateReviewBodySchema = {
  body: string
}

export type t_PullsUpdateReviewParamSchema = {
  owner: string
  pull_number: number
  repo: string
  review_id: number
}

export type t_PullsUpdateReviewCommentBodySchema = {
  body: string
}

export type t_PullsUpdateReviewCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_ReactionsCreateForCommitCommentBodySchema = {
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
}

export type t_ReactionsCreateForCommitCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_ReactionsCreateForIssueBodySchema = {
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
}

export type t_ReactionsCreateForIssueParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_ReactionsCreateForIssueCommentBodySchema = {
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
}

export type t_ReactionsCreateForIssueCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_ReactionsCreateForPullRequestReviewCommentBodySchema = {
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
}

export type t_ReactionsCreateForPullRequestReviewCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_ReactionsCreateForReleaseBodySchema = {
  content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes"
}

export type t_ReactionsCreateForReleaseParamSchema = {
  owner: string
  release_id: number
  repo: string
}

export type t_ReactionsCreateForTeamDiscussionCommentInOrgBodySchema = {
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
}

export type t_ReactionsCreateForTeamDiscussionCommentInOrgParamSchema = {
  comment_number: number
  discussion_number: number
  org: string
  team_slug: string
}

export type t_ReactionsCreateForTeamDiscussionCommentLegacyBodySchema = {
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
}

export type t_ReactionsCreateForTeamDiscussionCommentLegacyParamSchema = {
  comment_number: number
  discussion_number: number
  team_id: number
}

export type t_ReactionsCreateForTeamDiscussionInOrgBodySchema = {
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
}

export type t_ReactionsCreateForTeamDiscussionInOrgParamSchema = {
  discussion_number: number
  org: string
  team_slug: string
}

export type t_ReactionsCreateForTeamDiscussionLegacyBodySchema = {
  content:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
}

export type t_ReactionsCreateForTeamDiscussionLegacyParamSchema = {
  discussion_number: number
  team_id: number
}

export type t_ReactionsDeleteForCommitCommentParamSchema = {
  comment_id: number
  owner: string
  reaction_id: number
  repo: string
}

export type t_ReactionsDeleteForIssueParamSchema = {
  issue_number: number
  owner: string
  reaction_id: number
  repo: string
}

export type t_ReactionsDeleteForIssueCommentParamSchema = {
  comment_id: number
  owner: string
  reaction_id: number
  repo: string
}

export type t_ReactionsDeleteForPullRequestCommentParamSchema = {
  comment_id: number
  owner: string
  reaction_id: number
  repo: string
}

export type t_ReactionsDeleteForReleaseParamSchema = {
  owner: string
  reaction_id: number
  release_id: number
  repo: string
}

export type t_ReactionsDeleteForTeamDiscussionParamSchema = {
  discussion_number: number
  org: string
  reaction_id: number
  team_slug: string
}

export type t_ReactionsDeleteForTeamDiscussionCommentParamSchema = {
  comment_number: number
  discussion_number: number
  org: string
  reaction_id: number
  team_slug: string
}

export type t_ReactionsListForCommitCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_ReactionsListForCommitCommentQuerySchema = {
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
  page?: number
  per_page?: number
}

export type t_ReactionsListForIssueParamSchema = {
  issue_number: number
  owner: string
  repo: string
}

export type t_ReactionsListForIssueQuerySchema = {
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
  page?: number
  per_page?: number
}

export type t_ReactionsListForIssueCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_ReactionsListForIssueCommentQuerySchema = {
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
  page?: number
  per_page?: number
}

export type t_ReactionsListForPullRequestReviewCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_ReactionsListForPullRequestReviewCommentQuerySchema = {
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
  page?: number
  per_page?: number
}

export type t_ReactionsListForReleaseParamSchema = {
  owner: string
  release_id: number
  repo: string
}

export type t_ReactionsListForReleaseQuerySchema = {
  content?: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes"
  page?: number
  per_page?: number
}

export type t_ReactionsListForTeamDiscussionCommentInOrgParamSchema = {
  comment_number: number
  discussion_number: number
  org: string
  team_slug: string
}

export type t_ReactionsListForTeamDiscussionCommentInOrgQuerySchema = {
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
  page?: number
  per_page?: number
}

export type t_ReactionsListForTeamDiscussionCommentLegacyParamSchema = {
  comment_number: number
  discussion_number: number
  team_id: number
}

export type t_ReactionsListForTeamDiscussionCommentLegacyQuerySchema = {
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
  page?: number
  per_page?: number
}

export type t_ReactionsListForTeamDiscussionInOrgParamSchema = {
  discussion_number: number
  org: string
  team_slug: string
}

export type t_ReactionsListForTeamDiscussionInOrgQuerySchema = {
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
  page?: number
  per_page?: number
}

export type t_ReactionsListForTeamDiscussionLegacyParamSchema = {
  discussion_number: number
  team_id: number
}

export type t_ReactionsListForTeamDiscussionLegacyQuerySchema = {
  content?:
    | "+1"
    | "-1"
    | "laugh"
    | "confused"
    | "heart"
    | "hooray"
    | "rocket"
    | "eyes"
  page?: number
  per_page?: number
}

export type t_ReposAcceptInvitationForAuthenticatedUserParamSchema = {
  invitation_id: number
}

export type t_ReposAddAppAccessRestrictionsBodySchema =
  | {
      apps: string[]
    }
  | string[]

export type t_ReposAddAppAccessRestrictionsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposAddCollaboratorBodySchema = {
  permission?: string
}

export type t_ReposAddCollaboratorParamSchema = {
  owner: string
  repo: string
  username: string
}

export type t_ReposAddStatusCheckContextsBodySchema =
  | {
      contexts: string[]
    }
  | string[]

export type t_ReposAddStatusCheckContextsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposAddTeamAccessRestrictionsBodySchema =
  | {
      teams: string[]
    }
  | string[]

export type t_ReposAddTeamAccessRestrictionsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposAddUserAccessRestrictionsBodySchema =
  | {
      users: string[]
    }
  | string[]

export type t_ReposAddUserAccessRestrictionsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposCheckCollaboratorParamSchema = {
  owner: string
  repo: string
  username: string
}

export type t_ReposCheckVulnerabilityAlertsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCodeownersErrorsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCodeownersErrorsQuerySchema = {
  ref?: string
}

export type t_ReposCompareCommitsParamSchema = {
  basehead: string
  owner: string
  repo: string
}

export type t_ReposCompareCommitsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposCreateAutolinkBodySchema = {
  is_alphanumeric?: boolean
  key_prefix: string
  url_template: string
}

export type t_ReposCreateAutolinkParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCreateCommitCommentBodySchema = {
  body: string
  line?: number
  path?: string
  position?: number
}

export type t_ReposCreateCommitCommentParamSchema = {
  commit_sha: string
  owner: string
  repo: string
}

export type t_ReposCreateCommitSignatureProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposCreateCommitStatusBodySchema = {
  context?: string
  description?: string | null
  state: "error" | "failure" | "pending" | "success"
  target_url?: string | null
}

export type t_ReposCreateCommitStatusParamSchema = {
  owner: string
  repo: string
  sha: string
}

export type t_ReposCreateDeployKeyBodySchema = {
  key: string
  read_only?: boolean
  title?: string
}

export type t_ReposCreateDeployKeyParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCreateDeploymentBodySchema = {
  auto_merge?: boolean
  description?: string | null
  environment?: string
  payload?:
    | {
        [key: string]: unknown
      }
    | string
  production_environment?: boolean
  ref: string
  required_contexts?: string[]
  task?: string
  transient_environment?: boolean
}

export type t_ReposCreateDeploymentParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCreateDeploymentBranchPolicyBodySchema = {
  name: string
}

export type t_ReposCreateDeploymentBranchPolicyParamSchema = {
  environment_name: string
  owner: string
  repo: string
}

export type t_ReposCreateDeploymentProtectionRuleBodySchema = {
  integration_id?: number
}

export type t_ReposCreateDeploymentProtectionRuleParamSchema = {
  environment_name: string
  owner: string
  repo: string
}

export type t_ReposCreateDeploymentStatusBodySchema = {
  auto_inactive?: boolean
  description?: string
  environment?: "production" | "staging" | "qa"
  environment_url?: string
  log_url?: string
  state:
    | "error"
    | "failure"
    | "inactive"
    | "in_progress"
    | "queued"
    | "pending"
    | "success"
  target_url?: string
}

export type t_ReposCreateDeploymentStatusParamSchema = {
  deployment_id: number
  owner: string
  repo: string
}

export type t_ReposCreateDispatchEventBodySchema = {
  client_payload?: {
    [key: string]: unknown
  }
  event_type: string
}

export type t_ReposCreateDispatchEventParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCreateForAuthenticatedUserBodySchema = {
  allow_auto_merge?: boolean
  allow_merge_commit?: boolean
  allow_rebase_merge?: boolean
  allow_squash_merge?: boolean
  auto_init?: boolean
  delete_branch_on_merge?: boolean
  description?: string
  gitignore_template?: string
  has_discussions?: boolean
  has_downloads?: boolean
  has_issues?: boolean
  has_projects?: boolean
  has_wiki?: boolean
  homepage?: string
  is_template?: boolean
  license_template?: string
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
  name: string
  private?: boolean
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
  team_id?: number
}

export type t_ReposCreateForkBodySchema = {
  default_branch_only?: boolean
  name?: string
  organization?: string
} | null

export type t_ReposCreateForkParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCreateInOrgBodySchema = {
  allow_auto_merge?: boolean
  allow_merge_commit?: boolean
  allow_rebase_merge?: boolean
  allow_squash_merge?: boolean
  auto_init?: boolean
  delete_branch_on_merge?: boolean
  description?: string
  gitignore_template?: string
  has_downloads?: boolean
  has_issues?: boolean
  has_projects?: boolean
  has_wiki?: boolean
  homepage?: string
  is_template?: boolean
  license_template?: string
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
  name: string
  private?: boolean
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
  team_id?: number
  use_squash_pr_title_as_default?: boolean
  visibility?: "public" | "private"
}

export type t_ReposCreateInOrgParamSchema = {
  org: string
}

export type t_ReposCreateOrUpdateEnvironmentBodySchema = {
  deployment_branch_policy?: t_deployment_branch_policy_settings
  reviewers?:
    | {
        id?: number
        type?: t_deployment_reviewer_type
      }[]
    | null
  wait_timer?: t_wait_timer
} | null

export type t_ReposCreateOrUpdateEnvironmentParamSchema = {
  environment_name: string
  owner: string
  repo: string
}

export type t_ReposCreateOrUpdateFileContentsBodySchema = {
  author?: {
    date?: string
    email: string
    name: string
  }
  branch?: string
  committer?: {
    date?: string
    email: string
    name: string
  }
  content: string
  message: string
  sha?: string
}

export type t_ReposCreateOrUpdateFileContentsParamSchema = {
  owner: string
  path: string
  repo: string
}

export type t_ReposCreateOrgRulesetBodySchema = {
  bypass_actors?: t_repository_ruleset_bypass_actor[]
  conditions?: t_org_ruleset_conditions
  enforcement: t_repository_rule_enforcement
  name: string
  rules?: t_repository_rule[]
  target?: "branch" | "tag"
}

export type t_ReposCreateOrgRulesetParamSchema = {
  org: string
}

export type t_ReposCreatePagesDeploymentBodySchema = {
  artifact_url: string
  environment?: string
  oidc_token: string
  pages_build_version: string
}

export type t_ReposCreatePagesDeploymentParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCreatePagesSiteBodySchema = {
  build_type?: "legacy" | "workflow"
  source?: {
    branch: string
    path?: "/" | "/docs"
  }
} | null

export type t_ReposCreatePagesSiteParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCreateReleaseBodySchema = {
  body?: string
  discussion_category_name?: string
  draft?: boolean
  generate_release_notes?: boolean
  make_latest?: "true" | "false" | "legacy"
  name?: string
  prerelease?: boolean
  tag_name: string
  target_commitish?: string
}

export type t_ReposCreateReleaseParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCreateRepoRulesetBodySchema = {
  bypass_actors?: t_repository_ruleset_bypass_actor[]
  bypass_mode?: "none" | "repository" | "organization"
  conditions?: t_repository_ruleset_conditions
  enforcement: t_repository_rule_enforcement
  name: string
  rules?: t_repository_rule[]
  target?: "branch" | "tag"
}

export type t_ReposCreateRepoRulesetParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCreateTagProtectionBodySchema = {
  pattern: string
}

export type t_ReposCreateTagProtectionParamSchema = {
  owner: string
  repo: string
}

export type t_ReposCreateUsingTemplateBodySchema = {
  description?: string
  include_all_branches?: boolean
  name: string
  owner?: string
  private?: boolean
}

export type t_ReposCreateUsingTemplateParamSchema = {
  template_owner: string
  template_repo: string
}

export type t_ReposCreateWebhookBodySchema = {
  active?: boolean
  config?: {
    content_type?: t_webhook_config_content_type
    digest?: string
    insecure_ssl?: t_webhook_config_insecure_ssl
    secret?: t_webhook_config_secret
    token?: string
    url?: t_webhook_config_url
  }
  events?: string[]
  name?: string
} | null

export type t_ReposCreateWebhookParamSchema = {
  owner: string
  repo: string
}

export type t_ReposDeclineInvitationForAuthenticatedUserParamSchema = {
  invitation_id: number
}

export type t_ReposDeleteParamSchema = {
  owner: string
  repo: string
}

export type t_ReposDeleteAccessRestrictionsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposDeleteAdminBranchProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposDeleteAnEnvironmentParamSchema = {
  environment_name: string
  owner: string
  repo: string
}

export type t_ReposDeleteAutolinkParamSchema = {
  autolink_id: number
  owner: string
  repo: string
}

export type t_ReposDeleteBranchProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposDeleteCommitCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_ReposDeleteCommitSignatureProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposDeleteDeployKeyParamSchema = {
  key_id: number
  owner: string
  repo: string
}

export type t_ReposDeleteDeploymentParamSchema = {
  deployment_id: number
  owner: string
  repo: string
}

export type t_ReposDeleteDeploymentBranchPolicyParamSchema = {
  branch_policy_id: number
  environment_name: string
  owner: string
  repo: string
}

export type t_ReposDeleteFileBodySchema = {
  author?: {
    email?: string
    name?: string
  }
  branch?: string
  committer?: {
    email?: string
    name?: string
  }
  message: string
  sha: string
}

export type t_ReposDeleteFileParamSchema = {
  owner: string
  path: string
  repo: string
}

export type t_ReposDeleteInvitationParamSchema = {
  invitation_id: number
  owner: string
  repo: string
}

export type t_ReposDeleteOrgRulesetParamSchema = {
  org: string
  ruleset_id: number
}

export type t_ReposDeletePagesSiteParamSchema = {
  owner: string
  repo: string
}

export type t_ReposDeletePullRequestReviewProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposDeleteReleaseParamSchema = {
  owner: string
  release_id: number
  repo: string
}

export type t_ReposDeleteReleaseAssetParamSchema = {
  asset_id: number
  owner: string
  repo: string
}

export type t_ReposDeleteRepoRulesetParamSchema = {
  owner: string
  repo: string
  ruleset_id: number
}

export type t_ReposDeleteTagProtectionParamSchema = {
  owner: string
  repo: string
  tag_protection_id: number
}

export type t_ReposDeleteWebhookParamSchema = {
  hook_id: number
  owner: string
  repo: string
}

export type t_ReposDisableAutomatedSecurityFixesParamSchema = {
  owner: string
  repo: string
}

export type t_ReposDisableDeploymentProtectionRuleParamSchema = {
  environment_name: string
  owner: string
  protection_rule_id: number
  repo: string
}

export type t_ReposDisableLfsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ReposDisableVulnerabilityAlertsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposDownloadTarballArchiveParamSchema = {
  owner: string
  ref: string
  repo: string
}

export type t_ReposDownloadZipballArchiveParamSchema = {
  owner: string
  ref: string
  repo: string
}

export type t_ReposEnableAutomatedSecurityFixesParamSchema = {
  owner: string
  repo: string
}

export type t_ReposEnableLfsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ReposEnableVulnerabilityAlertsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGenerateReleaseNotesBodySchema = {
  configuration_file_path?: string
  previous_tag_name?: string
  tag_name: string
  target_commitish?: string
}

export type t_ReposGenerateReleaseNotesParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetAccessRestrictionsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetAdminBranchProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetAllDeploymentProtectionRulesParamSchema = {
  environment_name: string
  owner: string
  repo: string
}

export type t_ReposGetAllEnvironmentsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetAllEnvironmentsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposGetAllStatusCheckContextsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetAllTopicsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetAllTopicsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposGetAppsWithAccessToProtectedBranchParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetAutolinkParamSchema = {
  autolink_id: number
  owner: string
  repo: string
}

export type t_ReposGetBranchParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetBranchProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetBranchRulesParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetClonesParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetClonesQuerySchema = {
  per?: "day" | "week"
}

export type t_ReposGetCodeFrequencyStatsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetCollaboratorPermissionLevelParamSchema = {
  owner: string
  repo: string
  username: string
}

export type t_ReposGetCombinedStatusForRefParamSchema = {
  owner: string
  ref: string
  repo: string
}

export type t_ReposGetCombinedStatusForRefQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposGetCommitParamSchema = {
  owner: string
  ref: string
  repo: string
}

export type t_ReposGetCommitQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposGetCommitActivityStatsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetCommitCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_ReposGetCommitSignatureProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetCommunityProfileMetricsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetContentParamSchema = {
  owner: string
  path: string
  repo: string
}

export type t_ReposGetContentQuerySchema = {
  ref?: string
}

export type t_ReposGetContributorsStatsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetCustomDeploymentProtectionRuleParamSchema = {
  environment_name: string
  owner: string
  protection_rule_id: number
  repo: string
}

export type t_ReposGetDeployKeyParamSchema = {
  key_id: number
  owner: string
  repo: string
}

export type t_ReposGetDeploymentParamSchema = {
  deployment_id: number
  owner: string
  repo: string
}

export type t_ReposGetDeploymentBranchPolicyParamSchema = {
  branch_policy_id: number
  environment_name: string
  owner: string
  repo: string
}

export type t_ReposGetDeploymentStatusParamSchema = {
  deployment_id: number
  owner: string
  repo: string
  status_id: number
}

export type t_ReposGetEnvironmentParamSchema = {
  environment_name: string
  owner: string
  repo: string
}

export type t_ReposGetLatestPagesBuildParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetLatestReleaseParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetOrgRulesetParamSchema = {
  org: string
  ruleset_id: number
}

export type t_ReposGetOrgRulesetsParamSchema = {
  org: string
}

export type t_ReposGetPagesParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetPagesBuildParamSchema = {
  build_id: number
  owner: string
  repo: string
}

export type t_ReposGetPagesHealthCheckParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetParticipationStatsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetPullRequestReviewProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetPunchCardStatsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetReadmeParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetReadmeQuerySchema = {
  ref?: string
}

export type t_ReposGetReadmeInDirectoryParamSchema = {
  dir: string
  owner: string
  repo: string
}

export type t_ReposGetReadmeInDirectoryQuerySchema = {
  ref?: string
}

export type t_ReposGetReleaseParamSchema = {
  owner: string
  release_id: number
  repo: string
}

export type t_ReposGetReleaseAssetParamSchema = {
  asset_id: number
  owner: string
  repo: string
}

export type t_ReposGetReleaseByTagParamSchema = {
  owner: string
  repo: string
  tag: string
}

export type t_ReposGetRepoRulesetParamSchema = {
  owner: string
  repo: string
  ruleset_id: number
}

export type t_ReposGetRepoRulesetQuerySchema = {
  includes_parents?: boolean
}

export type t_ReposGetRepoRulesetsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetRepoRulesetsQuerySchema = {
  includes_parents?: boolean
}

export type t_ReposGetStatusChecksProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetTeamsWithAccessToProtectedBranchParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetTopPathsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetTopReferrersParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetUsersWithAccessToProtectedBranchParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposGetViewsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposGetViewsQuerySchema = {
  per?: "day" | "week"
}

export type t_ReposGetWebhookParamSchema = {
  hook_id: number
  owner: string
  repo: string
}

export type t_ReposGetWebhookConfigForRepoParamSchema = {
  hook_id: number
  owner: string
  repo: string
}

export type t_ReposGetWebhookDeliveryParamSchema = {
  delivery_id: number
  hook_id: number
  owner: string
  repo: string
}

export type t_ReposListAutolinksParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListAutolinksQuerySchema = {
  page?: number
}

export type t_ReposListBranchesParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListBranchesQuerySchema = {
  page?: number
  per_page?: number
  protected?: boolean
}

export type t_ReposListBranchesForHeadCommitParamSchema = {
  commit_sha: string
  owner: string
  repo: string
}

export type t_ReposListCollaboratorsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListCollaboratorsQuerySchema = {
  affiliation?: "outside" | "direct" | "all"
  page?: number
  per_page?: number
  permission?: "pull" | "triage" | "push" | "maintain" | "admin"
}

export type t_ReposListCommentsForCommitParamSchema = {
  commit_sha: string
  owner: string
  repo: string
}

export type t_ReposListCommentsForCommitQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListCommitCommentsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListCommitCommentsForRepoQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListCommitStatusesForRefParamSchema = {
  owner: string
  ref: string
  repo: string
}

export type t_ReposListCommitStatusesForRefQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListCommitsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListCommitsQuerySchema = {
  author?: string
  committer?: string
  page?: number
  path?: string
  per_page?: number
  sha?: string
  since?: string
  until?: string
}

export type t_ReposListContributorsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListContributorsQuerySchema = {
  anon?: string
  page?: number
  per_page?: number
}

export type t_ReposListCustomDeploymentRuleIntegrationsParamSchema = {
  environment_name: string
  owner: string
  repo: string
}

export type t_ReposListCustomDeploymentRuleIntegrationsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListDeployKeysParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListDeployKeysQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListDeploymentBranchPoliciesParamSchema = {
  environment_name: string
  owner: string
  repo: string
}

export type t_ReposListDeploymentBranchPoliciesQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListDeploymentStatusesParamSchema = {
  deployment_id: number
  owner: string
  repo: string
}

export type t_ReposListDeploymentStatusesQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListDeploymentsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListDeploymentsQuerySchema = {
  environment?: string | null
  page?: number
  per_page?: number
  ref?: string
  sha?: string
  task?: string
}

export type t_ReposListForAuthenticatedUserQuerySchema = {
  affiliation?: string
  before?: string
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  since?: string
  sort?: "created" | "updated" | "pushed" | "full_name"
  type?: "all" | "owner" | "public" | "private" | "member"
  visibility?: "all" | "public" | "private"
}

export type t_ReposListForOrgParamSchema = {
  org: string
}

export type t_ReposListForOrgQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  sort?: "created" | "updated" | "pushed" | "full_name"
  type?: "all" | "public" | "private" | "forks" | "sources" | "member"
}

export type t_ReposListForUserParamSchema = {
  username: string
}

export type t_ReposListForUserQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  sort?: "created" | "updated" | "pushed" | "full_name"
  type?: "all" | "owner" | "member"
}

export type t_ReposListForksParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListForksQuerySchema = {
  page?: number
  per_page?: number
  sort?: "newest" | "oldest" | "stargazers" | "watchers"
}

export type t_ReposListInvitationsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListInvitationsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListInvitationsForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListLanguagesParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListPagesBuildsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListPagesBuildsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListPublicQuerySchema = {
  since?: number
}

export type t_ReposListPullRequestsAssociatedWithCommitParamSchema = {
  commit_sha: string
  owner: string
  repo: string
}

export type t_ReposListPullRequestsAssociatedWithCommitQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListReleaseAssetsParamSchema = {
  owner: string
  release_id: number
  repo: string
}

export type t_ReposListReleaseAssetsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListReleasesParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListReleasesQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListTagProtectionParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListTagsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListTagsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListTeamsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListTeamsQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposListWebhookDeliveriesParamSchema = {
  hook_id: number
  owner: string
  repo: string
}

export type t_ReposListWebhookDeliveriesQuerySchema = {
  cursor?: string
  per_page?: number
  redelivery?: boolean
}

export type t_ReposListWebhooksParamSchema = {
  owner: string
  repo: string
}

export type t_ReposListWebhooksQuerySchema = {
  page?: number
  per_page?: number
}

export type t_ReposMergeBodySchema = {
  base: string
  commit_message?: string
  head: string
}

export type t_ReposMergeParamSchema = {
  owner: string
  repo: string
}

export type t_ReposMergeUpstreamBodySchema = {
  branch: string
}

export type t_ReposMergeUpstreamParamSchema = {
  owner: string
  repo: string
}

export type t_ReposPingWebhookParamSchema = {
  hook_id: number
  owner: string
  repo: string
}

export type t_ReposRedeliverWebhookDeliveryParamSchema = {
  delivery_id: number
  hook_id: number
  owner: string
  repo: string
}

export type t_ReposRemoveAppAccessRestrictionsBodySchema =
  | {
      apps: string[]
    }
  | string[]

export type t_ReposRemoveAppAccessRestrictionsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposRemoveCollaboratorParamSchema = {
  owner: string
  repo: string
  username: string
}

export type t_ReposRemoveStatusCheckContextsBodySchema =
  | {
      contexts: string[]
    }
  | string[]

export type t_ReposRemoveStatusCheckContextsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposRemoveStatusCheckProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposRemoveTeamAccessRestrictionsBodySchema =
  | {
      teams: string[]
    }
  | string[]

export type t_ReposRemoveTeamAccessRestrictionsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposRemoveUserAccessRestrictionsBodySchema =
  | {
      users: string[]
    }
  | string[]

export type t_ReposRemoveUserAccessRestrictionsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposRenameBranchBodySchema = {
  new_name: string
}

export type t_ReposRenameBranchParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposReplaceAllTopicsBodySchema = {
  names: string[]
}

export type t_ReposReplaceAllTopicsParamSchema = {
  owner: string
  repo: string
}

export type t_ReposRequestPagesBuildParamSchema = {
  owner: string
  repo: string
}

export type t_ReposSetAdminBranchProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposSetAppAccessRestrictionsBodySchema =
  | {
      apps: string[]
    }
  | string[]

export type t_ReposSetAppAccessRestrictionsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposSetStatusCheckContextsBodySchema =
  | {
      contexts: string[]
    }
  | string[]

export type t_ReposSetStatusCheckContextsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposSetTeamAccessRestrictionsBodySchema =
  | {
      teams: string[]
    }
  | string[]

export type t_ReposSetTeamAccessRestrictionsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposSetUserAccessRestrictionsBodySchema =
  | {
      users: string[]
    }
  | string[]

export type t_ReposSetUserAccessRestrictionsParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposTestPushWebhookParamSchema = {
  hook_id: number
  owner: string
  repo: string
}

export type t_ReposTransferBodySchema = {
  new_name?: string
  new_owner: string
  team_ids?: number[]
}

export type t_ReposTransferParamSchema = {
  owner: string
  repo: string
}

export type t_ReposUpdateBodySchema = {
  allow_auto_merge?: boolean
  allow_forking?: boolean
  allow_merge_commit?: boolean
  allow_rebase_merge?: boolean
  allow_squash_merge?: boolean
  allow_update_branch?: boolean
  archived?: boolean
  default_branch?: string
  delete_branch_on_merge?: boolean
  description?: string
  has_issues?: boolean
  has_projects?: boolean
  has_wiki?: boolean
  homepage?: string
  is_template?: boolean
  merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK"
  merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE"
  name?: string
  private?: boolean
  security_and_analysis?: {
    advanced_security?: {
      status?: string
    }
    secret_scanning?: {
      status?: string
    }
    secret_scanning_push_protection?: {
      status?: string
    }
  } | null
  squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK"
  squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE"
  use_squash_pr_title_as_default?: boolean
  visibility?: "public" | "private"
  web_commit_signoff_required?: boolean
}

export type t_ReposUpdateParamSchema = {
  owner: string
  repo: string
}

export type t_ReposUpdateBranchProtectionBodySchema = {
  allow_deletions?: boolean
  allow_force_pushes?: boolean | null
  allow_fork_syncing?: boolean
  block_creations?: boolean
  enforce_admins: boolean | null
  lock_branch?: boolean
  required_conversation_resolution?: boolean
  required_linear_history?: boolean
  required_pull_request_reviews: {
    bypass_pull_request_allowances?: {
      apps?: string[]
      teams?: string[]
      users?: string[]
    }
    dismiss_stale_reviews?: boolean
    dismissal_restrictions?: {
      apps?: string[]
      teams?: string[]
      users?: string[]
    }
    require_code_owner_reviews?: boolean
    require_last_push_approval?: boolean
    required_approving_review_count?: number
  } | null
  required_status_checks: {
    checks?: {
      app_id?: number
      context: string
    }[]
    contexts: string[]
    strict: boolean
  } | null
  restrictions: {
    apps?: string[]
    teams: string[]
    users: string[]
  } | null
}

export type t_ReposUpdateBranchProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposUpdateCommitCommentBodySchema = {
  body: string
}

export type t_ReposUpdateCommitCommentParamSchema = {
  comment_id: number
  owner: string
  repo: string
}

export type t_ReposUpdateDeploymentBranchPolicyBodySchema = {
  name: string
}

export type t_ReposUpdateDeploymentBranchPolicyParamSchema = {
  branch_policy_id: number
  environment_name: string
  owner: string
  repo: string
}

export type t_ReposUpdateInformationAboutPagesSiteBodySchema = {
  build_type?: "legacy" | "workflow"
  cname?: string | null
  https_enforced?: boolean
  source?:
    | "gh-pages"
    | "master"
    | "master /docs"
    | {
        branch: string
        path: "/" | "/docs"
      }
}

export type t_ReposUpdateInformationAboutPagesSiteParamSchema = {
  owner: string
  repo: string
}

export type t_ReposUpdateInvitationBodySchema = {
  permissions?: "read" | "write" | "maintain" | "triage" | "admin"
}

export type t_ReposUpdateInvitationParamSchema = {
  invitation_id: number
  owner: string
  repo: string
}

export type t_ReposUpdateOrgRulesetBodySchema = {
  bypass_actors?: t_repository_ruleset_bypass_actor[]
  conditions?: t_org_ruleset_conditions
  enforcement?: t_repository_rule_enforcement
  name?: string
  rules?: t_repository_rule[]
  target?: "branch" | "tag"
}

export type t_ReposUpdateOrgRulesetParamSchema = {
  org: string
  ruleset_id: number
}

export type t_ReposUpdatePullRequestReviewProtectionBodySchema = {
  bypass_pull_request_allowances?: {
    apps?: string[]
    teams?: string[]
    users?: string[]
  }
  dismiss_stale_reviews?: boolean
  dismissal_restrictions?: {
    apps?: string[]
    teams?: string[]
    users?: string[]
  }
  require_code_owner_reviews?: boolean
  require_last_push_approval?: boolean
  required_approving_review_count?: number
}

export type t_ReposUpdatePullRequestReviewProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposUpdateReleaseBodySchema = {
  body?: string
  discussion_category_name?: string
  draft?: boolean
  make_latest?: "true" | "false" | "legacy"
  name?: string
  prerelease?: boolean
  tag_name?: string
  target_commitish?: string
}

export type t_ReposUpdateReleaseParamSchema = {
  owner: string
  release_id: number
  repo: string
}

export type t_ReposUpdateReleaseAssetBodySchema = {
  label?: string
  name?: string
  state?: string
}

export type t_ReposUpdateReleaseAssetParamSchema = {
  asset_id: number
  owner: string
  repo: string
}

export type t_ReposUpdateRepoRulesetBodySchema = {
  bypass_actors?: t_repository_ruleset_bypass_actor[]
  bypass_mode?: "none" | "repository" | "organization"
  conditions?: t_repository_ruleset_conditions
  enforcement?: t_repository_rule_enforcement
  name?: string
  rules?: t_repository_rule[]
  target?: "branch" | "tag"
}

export type t_ReposUpdateRepoRulesetParamSchema = {
  owner: string
  repo: string
  ruleset_id: number
}

export type t_ReposUpdateStatusCheckProtectionBodySchema = {
  checks?: {
    app_id?: number
    context: string
  }[]
  contexts?: string[]
  strict?: boolean
}

export type t_ReposUpdateStatusCheckProtectionParamSchema = {
  branch: string
  owner: string
  repo: string
}

export type t_ReposUpdateWebhookBodySchema = {
  active?: boolean
  add_events?: string[]
  config?: {
    address?: string
    content_type?: t_webhook_config_content_type
    insecure_ssl?: t_webhook_config_insecure_ssl
    room?: string
    secret?: t_webhook_config_secret
    url: t_webhook_config_url
  }
  events?: string[]
  remove_events?: string[]
}

export type t_ReposUpdateWebhookParamSchema = {
  hook_id: number
  owner: string
  repo: string
}

export type t_ReposUpdateWebhookConfigForRepoBodySchema = {
  content_type?: t_webhook_config_content_type
  insecure_ssl?: t_webhook_config_insecure_ssl
  secret?: t_webhook_config_secret
  url?: t_webhook_config_url
}

export type t_ReposUpdateWebhookConfigForRepoParamSchema = {
  hook_id: number
  owner: string
  repo: string
}

export type t_ReposUploadReleaseAssetBodySchema = string

export type t_ReposUploadReleaseAssetParamSchema = {
  owner: string
  release_id: number
  repo: string
}

export type t_ReposUploadReleaseAssetQuerySchema = {
  label?: string
  name: string
}

export type t_SearchCodeQuerySchema = {
  order?: "desc" | "asc"
  page?: number
  per_page?: number
  q: string
  sort?: "indexed"
}

export type t_SearchCommitsQuerySchema = {
  order?: "desc" | "asc"
  page?: number
  per_page?: number
  q: string
  sort?: "author-date" | "committer-date"
}

export type t_SearchIssuesAndPullRequestsQuerySchema = {
  order?: "desc" | "asc"
  page?: number
  per_page?: number
  q: string
  sort?:
    | "comments"
    | "reactions"
    | "reactions-+1"
    | "reactions--1"
    | "reactions-smile"
    | "reactions-thinking_face"
    | "reactions-heart"
    | "reactions-tada"
    | "interactions"
    | "created"
    | "updated"
}

export type t_SearchLabelsQuerySchema = {
  order?: "desc" | "asc"
  page?: number
  per_page?: number
  q: string
  repository_id: number
  sort?: "created" | "updated"
}

export type t_SearchReposQuerySchema = {
  order?: "desc" | "asc"
  page?: number
  per_page?: number
  q: string
  sort?: "stars" | "forks" | "help-wanted-issues" | "updated"
}

export type t_SearchTopicsQuerySchema = {
  page?: number
  per_page?: number
  q: string
}

export type t_SearchUsersQuerySchema = {
  order?: "desc" | "asc"
  page?: number
  per_page?: number
  q: string
  sort?: "followers" | "repositories" | "joined"
}

export type t_SecretScanningGetAlertParamSchema = {
  alert_number: t_alert_number
  owner: string
  repo: string
}

export type t_SecretScanningListAlertsForEnterpriseParamSchema = {
  enterprise: string
}

export type t_SecretScanningListAlertsForEnterpriseQuerySchema = {
  after?: string
  before?: string
  direction?: "asc" | "desc"
  per_page?: number
  resolution?: string
  secret_type?: string
  sort?: "created" | "updated"
  state?: "open" | "resolved"
}

export type t_SecretScanningListAlertsForOrgParamSchema = {
  org: string
}

export type t_SecretScanningListAlertsForOrgQuerySchema = {
  after?: string
  before?: string
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  resolution?: string
  secret_type?: string
  sort?: "created" | "updated"
  state?: "open" | "resolved"
}

export type t_SecretScanningListAlertsForRepoParamSchema = {
  owner: string
  repo: string
}

export type t_SecretScanningListAlertsForRepoQuerySchema = {
  after?: string
  before?: string
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  resolution?: string
  secret_type?: string
  sort?: "created" | "updated"
  state?: "open" | "resolved"
}

export type t_SecretScanningListLocationsForAlertParamSchema = {
  alert_number: t_alert_number
  owner: string
  repo: string
}

export type t_SecretScanningListLocationsForAlertQuerySchema = {
  page?: number
  per_page?: number
}

export type t_SecretScanningUpdateAlertBodySchema = {
  resolution?: t_secret_scanning_alert_resolution
  resolution_comment?: t_secret_scanning_alert_resolution_comment
  state: t_secret_scanning_alert_state
}

export type t_SecretScanningUpdateAlertParamSchema = {
  alert_number: t_alert_number
  owner: string
  repo: string
}

export type t_SecurityAdvisoriesCreatePrivateVulnerabilityReportBodySchema = {
  cvss_vector_string?: string | null
  cwe_ids?: string[] | null
  description: string
  severity?: "critical" | "high" | "medium" | "low" | null
  summary: string
  vulnerabilities?:
    | {
        package: {
          ecosystem: t_repository_advisory_ecosystems
          name?: string | null
        }
        patched_versions?: string | null
        vulnerable_functions?: string[] | null
        vulnerable_version_range?: string | null
      }[]
    | null
}

export type t_SecurityAdvisoriesCreatePrivateVulnerabilityReportParamSchema = {
  owner: string
  repo: string
}

export type t_SecurityAdvisoriesCreateRepositoryAdvisoryBodySchema = {
  credits?:
    | {
        login: string
        type: t_repository_advisory_credit_types
      }[]
    | null
  cve_id?: string | null
  cvss_vector_string?: string | null
  cwe_ids?: string[] | null
  description: string
  severity?: "critical" | "high" | "medium" | "low" | null
  summary: string
  vulnerabilities: {
    package: {
      ecosystem: t_repository_advisory_ecosystems
      name?: string | null
    }
    patched_versions?: string | null
    vulnerable_functions?: string[] | null
    vulnerable_version_range?: string | null
  }[]
}

export type t_SecurityAdvisoriesCreateRepositoryAdvisoryParamSchema = {
  owner: string
  repo: string
}

export type t_SecurityAdvisoriesGetRepositoryAdvisoryParamSchema = {
  ghsa_id: string
  owner: string
  repo: string
}

export type t_SecurityAdvisoriesListRepositoryAdvisoriesParamSchema = {
  owner: string
  repo: string
}

export type t_SecurityAdvisoriesListRepositoryAdvisoriesQuerySchema = {
  after?: string
  before?: string
  direction?: "asc" | "desc"
  per_page?: number
  sort?: "created" | "updated" | "published"
  state?: "triage" | "draft" | "published" | "closed"
}

export type t_SecurityAdvisoriesUpdateRepositoryAdvisoryBodySchema = {
  credits?:
    | {
        login: string
        type: t_repository_advisory_credit_types
      }[]
    | null
  cve_id?: string | null
  cvss_vector_string?: string | null
  cwe_ids?: string[] | null
  description?: string
  severity?: "critical" | "high" | "medium" | "low" | null
  state?: "published" | "closed" | "draft"
  summary?: string
  vulnerabilities?: {
    package: {
      ecosystem: t_repository_advisory_ecosystems
      name?: string | null
    }
    patched_versions?: string | null
    vulnerable_functions?: string[] | null
    vulnerable_version_range?: string | null
  }[]
}

export type t_SecurityAdvisoriesUpdateRepositoryAdvisoryParamSchema = {
  ghsa_id: string
  owner: string
  repo: string
}

export type t_TeamsAddMemberLegacyParamSchema = {
  team_id: number
  username: string
}

export type t_TeamsAddOrUpdateMembershipForUserInOrgBodySchema = {
  role?: "member" | "maintainer"
}

export type t_TeamsAddOrUpdateMembershipForUserInOrgParamSchema = {
  org: string
  team_slug: string
  username: string
}

export type t_TeamsAddOrUpdateMembershipForUserLegacyBodySchema = {
  role?: "member" | "maintainer"
}

export type t_TeamsAddOrUpdateMembershipForUserLegacyParamSchema = {
  team_id: number
  username: string
}

export type t_TeamsAddOrUpdateProjectPermissionsInOrgBodySchema = {
  permission?: "read" | "write" | "admin"
} | null

export type t_TeamsAddOrUpdateProjectPermissionsInOrgParamSchema = {
  org: string
  project_id: number
  team_slug: string
}

export type t_TeamsAddOrUpdateProjectPermissionsLegacyBodySchema = {
  permission?: "read" | "write" | "admin"
}

export type t_TeamsAddOrUpdateProjectPermissionsLegacyParamSchema = {
  project_id: number
  team_id: number
}

export type t_TeamsAddOrUpdateRepoPermissionsInOrgBodySchema = {
  permission?: string
}

export type t_TeamsAddOrUpdateRepoPermissionsInOrgParamSchema = {
  org: string
  owner: string
  repo: string
  team_slug: string
}

export type t_TeamsAddOrUpdateRepoPermissionsLegacyBodySchema = {
  permission?: "pull" | "push" | "admin"
}

export type t_TeamsAddOrUpdateRepoPermissionsLegacyParamSchema = {
  owner: string
  repo: string
  team_id: number
}

export type t_TeamsCheckPermissionsForProjectInOrgParamSchema = {
  org: string
  project_id: number
  team_slug: string
}

export type t_TeamsCheckPermissionsForProjectLegacyParamSchema = {
  project_id: number
  team_id: number
}

export type t_TeamsCheckPermissionsForRepoInOrgParamSchema = {
  org: string
  owner: string
  repo: string
  team_slug: string
}

export type t_TeamsCheckPermissionsForRepoLegacyParamSchema = {
  owner: string
  repo: string
  team_id: number
}

export type t_TeamsCreateBodySchema = {
  description?: string
  maintainers?: string[]
  name: string
  notification_setting?: "notifications_enabled" | "notifications_disabled"
  parent_team_id?: number
  permission?: "pull" | "push"
  privacy?: "secret" | "closed"
  repo_names?: string[]
}

export type t_TeamsCreateParamSchema = {
  org: string
}

export type t_TeamsCreateDiscussionCommentInOrgBodySchema = {
  body: string
}

export type t_TeamsCreateDiscussionCommentInOrgParamSchema = {
  discussion_number: number
  org: string
  team_slug: string
}

export type t_TeamsCreateDiscussionCommentLegacyBodySchema = {
  body: string
}

export type t_TeamsCreateDiscussionCommentLegacyParamSchema = {
  discussion_number: number
  team_id: number
}

export type t_TeamsCreateDiscussionInOrgBodySchema = {
  body: string
  private?: boolean
  title: string
}

export type t_TeamsCreateDiscussionInOrgParamSchema = {
  org: string
  team_slug: string
}

export type t_TeamsCreateDiscussionLegacyBodySchema = {
  body: string
  private?: boolean
  title: string
}

export type t_TeamsCreateDiscussionLegacyParamSchema = {
  team_id: number
}

export type t_TeamsDeleteDiscussionCommentInOrgParamSchema = {
  comment_number: number
  discussion_number: number
  org: string
  team_slug: string
}

export type t_TeamsDeleteDiscussionCommentLegacyParamSchema = {
  comment_number: number
  discussion_number: number
  team_id: number
}

export type t_TeamsDeleteDiscussionInOrgParamSchema = {
  discussion_number: number
  org: string
  team_slug: string
}

export type t_TeamsDeleteDiscussionLegacyParamSchema = {
  discussion_number: number
  team_id: number
}

export type t_TeamsDeleteInOrgParamSchema = {
  org: string
  team_slug: string
}

export type t_TeamsDeleteLegacyParamSchema = {
  team_id: number
}

export type t_TeamsGetByNameParamSchema = {
  org: string
  team_slug: string
}

export type t_TeamsGetDiscussionCommentInOrgParamSchema = {
  comment_number: number
  discussion_number: number
  org: string
  team_slug: string
}

export type t_TeamsGetDiscussionCommentLegacyParamSchema = {
  comment_number: number
  discussion_number: number
  team_id: number
}

export type t_TeamsGetDiscussionInOrgParamSchema = {
  discussion_number: number
  org: string
  team_slug: string
}

export type t_TeamsGetDiscussionLegacyParamSchema = {
  discussion_number: number
  team_id: number
}

export type t_TeamsGetLegacyParamSchema = {
  team_id: number
}

export type t_TeamsGetMemberLegacyParamSchema = {
  team_id: number
  username: string
}

export type t_TeamsGetMembershipForUserInOrgParamSchema = {
  org: string
  team_slug: string
  username: string
}

export type t_TeamsGetMembershipForUserLegacyParamSchema = {
  team_id: number
  username: string
}

export type t_TeamsListParamSchema = {
  org: string
}

export type t_TeamsListQuerySchema = {
  page?: number
  per_page?: number
}

export type t_TeamsListChildInOrgParamSchema = {
  org: string
  team_slug: string
}

export type t_TeamsListChildInOrgQuerySchema = {
  page?: number
  per_page?: number
}

export type t_TeamsListChildLegacyParamSchema = {
  team_id: number
}

export type t_TeamsListChildLegacyQuerySchema = {
  page?: number
  per_page?: number
}

export type t_TeamsListDiscussionCommentsInOrgParamSchema = {
  discussion_number: number
  org: string
  team_slug: string
}

export type t_TeamsListDiscussionCommentsInOrgQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
}

export type t_TeamsListDiscussionCommentsLegacyParamSchema = {
  discussion_number: number
  team_id: number
}

export type t_TeamsListDiscussionCommentsLegacyQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
}

export type t_TeamsListDiscussionsInOrgParamSchema = {
  org: string
  team_slug: string
}

export type t_TeamsListDiscussionsInOrgQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
  pinned?: string
}

export type t_TeamsListDiscussionsLegacyParamSchema = {
  team_id: number
}

export type t_TeamsListDiscussionsLegacyQuerySchema = {
  direction?: "asc" | "desc"
  page?: number
  per_page?: number
}

export type t_TeamsListForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_TeamsListMembersInOrgParamSchema = {
  org: string
  team_slug: string
}

export type t_TeamsListMembersInOrgQuerySchema = {
  page?: number
  per_page?: number
  role?: "member" | "maintainer" | "all"
}

export type t_TeamsListMembersLegacyParamSchema = {
  team_id: number
}

export type t_TeamsListMembersLegacyQuerySchema = {
  page?: number
  per_page?: number
  role?: "member" | "maintainer" | "all"
}

export type t_TeamsListPendingInvitationsInOrgParamSchema = {
  org: string
  team_slug: string
}

export type t_TeamsListPendingInvitationsInOrgQuerySchema = {
  page?: number
  per_page?: number
}

export type t_TeamsListPendingInvitationsLegacyParamSchema = {
  team_id: number
}

export type t_TeamsListPendingInvitationsLegacyQuerySchema = {
  page?: number
  per_page?: number
}

export type t_TeamsListProjectsInOrgParamSchema = {
  org: string
  team_slug: string
}

export type t_TeamsListProjectsInOrgQuerySchema = {
  page?: number
  per_page?: number
}

export type t_TeamsListProjectsLegacyParamSchema = {
  team_id: number
}

export type t_TeamsListProjectsLegacyQuerySchema = {
  page?: number
  per_page?: number
}

export type t_TeamsListReposInOrgParamSchema = {
  org: string
  team_slug: string
}

export type t_TeamsListReposInOrgQuerySchema = {
  page?: number
  per_page?: number
}

export type t_TeamsListReposLegacyParamSchema = {
  team_id: number
}

export type t_TeamsListReposLegacyQuerySchema = {
  page?: number
  per_page?: number
}

export type t_TeamsRemoveMemberLegacyParamSchema = {
  team_id: number
  username: string
}

export type t_TeamsRemoveMembershipForUserInOrgParamSchema = {
  org: string
  team_slug: string
  username: string
}

export type t_TeamsRemoveMembershipForUserLegacyParamSchema = {
  team_id: number
  username: string
}

export type t_TeamsRemoveProjectInOrgParamSchema = {
  org: string
  project_id: number
  team_slug: string
}

export type t_TeamsRemoveProjectLegacyParamSchema = {
  project_id: number
  team_id: number
}

export type t_TeamsRemoveRepoInOrgParamSchema = {
  org: string
  owner: string
  repo: string
  team_slug: string
}

export type t_TeamsRemoveRepoLegacyParamSchema = {
  owner: string
  repo: string
  team_id: number
}

export type t_TeamsUpdateDiscussionCommentInOrgBodySchema = {
  body: string
}

export type t_TeamsUpdateDiscussionCommentInOrgParamSchema = {
  comment_number: number
  discussion_number: number
  org: string
  team_slug: string
}

export type t_TeamsUpdateDiscussionCommentLegacyBodySchema = {
  body: string
}

export type t_TeamsUpdateDiscussionCommentLegacyParamSchema = {
  comment_number: number
  discussion_number: number
  team_id: number
}

export type t_TeamsUpdateDiscussionInOrgBodySchema = {
  body?: string
  title?: string
}

export type t_TeamsUpdateDiscussionInOrgParamSchema = {
  discussion_number: number
  org: string
  team_slug: string
}

export type t_TeamsUpdateDiscussionLegacyBodySchema = {
  body?: string
  title?: string
}

export type t_TeamsUpdateDiscussionLegacyParamSchema = {
  discussion_number: number
  team_id: number
}

export type t_TeamsUpdateInOrgBodySchema = {
  description?: string
  name?: string
  notification_setting?: "notifications_enabled" | "notifications_disabled"
  parent_team_id?: number | null
  permission?: "pull" | "push" | "admin"
  privacy?: "secret" | "closed"
}

export type t_TeamsUpdateInOrgParamSchema = {
  org: string
  team_slug: string
}

export type t_TeamsUpdateLegacyBodySchema = {
  description?: string
  name: string
  notification_setting?: "notifications_enabled" | "notifications_disabled"
  parent_team_id?: number | null
  permission?: "pull" | "push" | "admin"
  privacy?: "secret" | "closed"
}

export type t_TeamsUpdateLegacyParamSchema = {
  team_id: number
}

export type t_UsersAddEmailForAuthenticatedUserBodySchema =
  | {
      emails: string[]
    }
  | string[]
  | string

export type t_UsersAddSocialAccountForAuthenticatedUserBodySchema = {
  account_urls: string[]
}

export type t_UsersBlockParamSchema = {
  username: string
}

export type t_UsersCheckBlockedParamSchema = {
  username: string
}

export type t_UsersCheckFollowingForUserParamSchema = {
  target_user: string
  username: string
}

export type t_UsersCheckPersonIsFollowedByAuthenticatedParamSchema = {
  username: string
}

export type t_UsersCreateGpgKeyForAuthenticatedUserBodySchema = {
  armored_public_key: string
  name?: string
}

export type t_UsersCreatePublicSshKeyForAuthenticatedUserBodySchema = {
  key: string
  title?: string
}

export type t_UsersCreateSshSigningKeyForAuthenticatedUserBodySchema = {
  key: string
  title?: string
}

export type t_UsersDeleteEmailForAuthenticatedUserBodySchema =
  | {
      emails: string[]
    }
  | string[]
  | string

export type t_UsersDeleteGpgKeyForAuthenticatedUserParamSchema = {
  gpg_key_id: number
}

export type t_UsersDeletePublicSshKeyForAuthenticatedUserParamSchema = {
  key_id: number
}

export type t_UsersDeleteSocialAccountForAuthenticatedUserBodySchema = {
  account_urls: string[]
}

export type t_UsersDeleteSshSigningKeyForAuthenticatedUserParamSchema = {
  ssh_signing_key_id: number
}

export type t_UsersFollowParamSchema = {
  username: string
}

export type t_UsersGetByUsernameParamSchema = {
  username: string
}

export type t_UsersGetContextForUserParamSchema = {
  username: string
}

export type t_UsersGetContextForUserQuerySchema = {
  subject_id?: string
  subject_type?: "organization" | "repository" | "issue" | "pull_request"
}

export type t_UsersGetGpgKeyForAuthenticatedUserParamSchema = {
  gpg_key_id: number
}

export type t_UsersGetPublicSshKeyForAuthenticatedUserParamSchema = {
  key_id: number
}

export type t_UsersGetSshSigningKeyForAuthenticatedUserParamSchema = {
  ssh_signing_key_id: number
}

export type t_UsersListQuerySchema = {
  per_page?: number
  since?: number
}

export type t_UsersListBlockedByAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListEmailsForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListFollowedByAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListFollowersForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListFollowersForUserParamSchema = {
  username: string
}

export type t_UsersListFollowersForUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListFollowingForUserParamSchema = {
  username: string
}

export type t_UsersListFollowingForUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListGpgKeysForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListGpgKeysForUserParamSchema = {
  username: string
}

export type t_UsersListGpgKeysForUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListPublicEmailsForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListPublicKeysForUserParamSchema = {
  username: string
}

export type t_UsersListPublicKeysForUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListPublicSshKeysForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListSocialAccountsForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListSocialAccountsForUserParamSchema = {
  username: string
}

export type t_UsersListSocialAccountsForUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListSshSigningKeysForAuthenticatedUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersListSshSigningKeysForUserParamSchema = {
  username: string
}

export type t_UsersListSshSigningKeysForUserQuerySchema = {
  page?: number
  per_page?: number
}

export type t_UsersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema = {
  visibility: "public" | "private"
}

export type t_UsersUnblockParamSchema = {
  username: string
}

export type t_UsersUnfollowParamSchema = {
  username: string
}

export type t_UsersUpdateAuthenticatedBodySchema = {
  bio?: string
  blog?: string
  company?: string
  email?: string
  hireable?: boolean
  location?: string
  name?: string
  twitter_username?: string | null
}
