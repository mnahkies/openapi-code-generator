/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import { z } from "zod"

export const s_actions_billing_usage = z.object({
  total_minutes_used: z.coerce.number(),
  total_paid_minutes_used: z.coerce.number(),
  included_minutes: z.coerce.number(),
  minutes_used_breakdown: z.object({
    UBUNTU: z.coerce.number().optional(),
    MACOS: z.coerce.number().optional(),
    WINDOWS: z.coerce.number().optional(),
    ubuntu_4_core: z.coerce.number().optional(),
    ubuntu_8_core: z.coerce.number().optional(),
    ubuntu_16_core: z.coerce.number().optional(),
    ubuntu_32_core: z.coerce.number().optional(),
    ubuntu_64_core: z.coerce.number().optional(),
    windows_4_core: z.coerce.number().optional(),
    windows_8_core: z.coerce.number().optional(),
    windows_16_core: z.coerce.number().optional(),
    windows_32_core: z.coerce.number().optional(),
    windows_64_core: z.coerce.number().optional(),
    macos_12_core: z.coerce.number().optional(),
    total: z.coerce.number().optional(),
  }),
})

export const s_actions_cache_list = z.object({
  total_count: z.coerce.number(),
  actions_caches: z.array(
    z.object({
      id: z.coerce.number().optional(),
      ref: z.coerce.string().optional(),
      key: z.coerce.string().optional(),
      version: z.coerce.string().optional(),
      last_accessed_at: z.coerce.string().datetime({ offset: true }).optional(),
      created_at: z.coerce.string().datetime({ offset: true }).optional(),
      size_in_bytes: z.coerce.number().optional(),
    })
  ),
})

export const s_actions_cache_usage_by_repository = z.object({
  full_name: z.coerce.string(),
  active_caches_size_in_bytes: z.coerce.number(),
  active_caches_count: z.coerce.number(),
})

export const s_actions_cache_usage_org_enterprise = z.object({
  total_active_caches_count: z.coerce.number(),
  total_active_caches_size_in_bytes: z.coerce.number(),
})

export const s_actions_get_default_workflow_permissions = z.object({
  default_workflow_permissions: z.enum(["read", "write"]),
  can_approve_pull_request_reviews: z.coerce.boolean(),
})

export const s_actions_organization_permissions = z.object({
  enabled_repositories: z.enum(["all", "none", "selected"]),
  selected_repositories_url: z.coerce.string().optional(),
  allowed_actions: z.enum(["all", "local_only", "selected"]).optional(),
  selected_actions_url: z.coerce.string().optional(),
})

export const s_actions_public_key = z.object({
  key_id: z.coerce.string(),
  key: z.coerce.string(),
  id: z.coerce.number().optional(),
  url: z.coerce.string().optional(),
  title: z.coerce.string().optional(),
  created_at: z.coerce.string().optional(),
})

export const s_actions_repository_permissions = z.object({
  enabled: z.coerce.boolean(),
  allowed_actions: z.enum(["all", "local_only", "selected"]).optional(),
  selected_actions_url: z.coerce.string().optional(),
})

export const s_actions_secret = z.object({
  name: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
})

export const s_actions_set_default_workflow_permissions = z.object({
  default_workflow_permissions: z.enum(["read", "write"]).optional(),
  can_approve_pull_request_reviews: z.coerce.boolean().optional(),
})

export const s_actions_variable = z.object({
  name: z.coerce.string(),
  value: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
})

export const s_actions_workflow_access_to_repository = z.object({
  access_level: z.enum(["none", "user", "organization", "enterprise"]),
})

export const s_api_overview = z.object({
  verifiable_password_authentication: z.coerce.boolean(),
  ssh_key_fingerprints: z
    .object({
      SHA256_RSA: z.coerce.string().optional(),
      SHA256_DSA: z.coerce.string().optional(),
      SHA256_ECDSA: z.coerce.string().optional(),
      SHA256_ED25519: z.coerce.string().optional(),
    })
    .optional(),
  ssh_keys: z.array(z.coerce.string()).optional(),
  hooks: z.array(z.coerce.string()).optional(),
  web: z.array(z.coerce.string()).optional(),
  api: z.array(z.coerce.string()).optional(),
  git: z.array(z.coerce.string()).optional(),
  packages: z.array(z.coerce.string()).optional(),
  pages: z.array(z.coerce.string()).optional(),
  importer: z.array(z.coerce.string()).optional(),
  actions: z.array(z.coerce.string()).optional(),
  dependabot: z.array(z.coerce.string()).optional(),
})

export const s_artifact = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  size_in_bytes: z.coerce.number(),
  url: z.coerce.string(),
  archive_download_url: z.coerce.string(),
  expired: z.coerce.boolean(),
  created_at: z.coerce.string().datetime({ offset: true }),
  expires_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  workflow_run: z
    .object({
      id: z.coerce.number().optional(),
      repository_id: z.coerce.number().optional(),
      head_repository_id: z.coerce.number().optional(),
      head_branch: z.coerce.string().optional(),
      head_sha: z.coerce.string().optional(),
    })
    .optional(),
})

export const s_authentication_token = z.object({
  token: z.coerce.string(),
  expires_at: z.coerce.string().datetime({ offset: true }),
  permissions: z.object({}).optional(),
  repositories: z
    .array(
      z.object({
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        name: z.coerce.string(),
        full_name: z.coerce.string(),
        license: z.object({
          key: z.coerce.string(),
          name: z.coerce.string(),
          url: z.coerce.string(),
          spdx_id: z.coerce.string(),
          node_id: z.coerce.string(),
          html_url: z.coerce.string().optional(),
        }),
        organization: z
          .object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          })
          .optional(),
        forks: z.coerce.number(),
        permissions: z
          .object({
            admin: z.coerce.boolean(),
            pull: z.coerce.boolean(),
            triage: z.coerce.boolean().optional(),
            push: z.coerce.boolean(),
            maintain: z.coerce.boolean().optional(),
          })
          .optional(),
        owner: z.object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        }),
        private: z.coerce.boolean(),
        html_url: z.coerce.string(),
        description: z.coerce.string(),
        fork: z.coerce.boolean(),
        url: z.coerce.string(),
        archive_url: z.coerce.string(),
        assignees_url: z.coerce.string(),
        blobs_url: z.coerce.string(),
        branches_url: z.coerce.string(),
        collaborators_url: z.coerce.string(),
        comments_url: z.coerce.string(),
        commits_url: z.coerce.string(),
        compare_url: z.coerce.string(),
        contents_url: z.coerce.string(),
        contributors_url: z.coerce.string(),
        deployments_url: z.coerce.string(),
        downloads_url: z.coerce.string(),
        events_url: z.coerce.string(),
        forks_url: z.coerce.string(),
        git_commits_url: z.coerce.string(),
        git_refs_url: z.coerce.string(),
        git_tags_url: z.coerce.string(),
        git_url: z.coerce.string(),
        issue_comment_url: z.coerce.string(),
        issue_events_url: z.coerce.string(),
        issues_url: z.coerce.string(),
        keys_url: z.coerce.string(),
        labels_url: z.coerce.string(),
        languages_url: z.coerce.string(),
        merges_url: z.coerce.string(),
        milestones_url: z.coerce.string(),
        notifications_url: z.coerce.string(),
        pulls_url: z.coerce.string(),
        releases_url: z.coerce.string(),
        ssh_url: z.coerce.string(),
        stargazers_url: z.coerce.string(),
        statuses_url: z.coerce.string(),
        subscribers_url: z.coerce.string(),
        subscription_url: z.coerce.string(),
        tags_url: z.coerce.string(),
        teams_url: z.coerce.string(),
        trees_url: z.coerce.string(),
        clone_url: z.coerce.string(),
        mirror_url: z.coerce.string(),
        hooks_url: z.coerce.string(),
        svn_url: z.coerce.string(),
        homepage: z.coerce.string(),
        language: z.coerce.string(),
        forks_count: z.coerce.number(),
        stargazers_count: z.coerce.number(),
        watchers_count: z.coerce.number(),
        size: z.coerce.number(),
        default_branch: z.coerce.string(),
        open_issues_count: z.coerce.number(),
        is_template: z.coerce.boolean().optional(),
        topics: z.array(z.coerce.string()).optional(),
        has_issues: z.coerce.boolean(),
        has_projects: z.coerce.boolean(),
        has_wiki: z.coerce.boolean(),
        has_pages: z.coerce.boolean(),
        has_downloads: z.coerce.boolean(),
        has_discussions: z.coerce.boolean().optional(),
        archived: z.coerce.boolean(),
        disabled: z.coerce.boolean(),
        visibility: z.coerce.string().optional(),
        pushed_at: z.coerce.string().datetime({ offset: true }),
        created_at: z.coerce.string().datetime({ offset: true }),
        updated_at: z.coerce.string().datetime({ offset: true }),
        allow_rebase_merge: z.coerce.boolean().optional(),
        template_repository: z
          .object({
            id: z.coerce.number().optional(),
            node_id: z.coerce.string().optional(),
            name: z.coerce.string().optional(),
            full_name: z.coerce.string().optional(),
            owner: z
              .object({
                login: z.coerce.string().optional(),
                id: z.coerce.number().optional(),
                node_id: z.coerce.string().optional(),
                avatar_url: z.coerce.string().optional(),
                gravatar_id: z.coerce.string().optional(),
                url: z.coerce.string().optional(),
                html_url: z.coerce.string().optional(),
                followers_url: z.coerce.string().optional(),
                following_url: z.coerce.string().optional(),
                gists_url: z.coerce.string().optional(),
                starred_url: z.coerce.string().optional(),
                subscriptions_url: z.coerce.string().optional(),
                organizations_url: z.coerce.string().optional(),
                repos_url: z.coerce.string().optional(),
                events_url: z.coerce.string().optional(),
                received_events_url: z.coerce.string().optional(),
                type: z.coerce.string().optional(),
                site_admin: z.coerce.boolean().optional(),
              })
              .optional(),
            private: z.coerce.boolean().optional(),
            html_url: z.coerce.string().optional(),
            description: z.coerce.string().optional(),
            fork: z.coerce.boolean().optional(),
            url: z.coerce.string().optional(),
            archive_url: z.coerce.string().optional(),
            assignees_url: z.coerce.string().optional(),
            blobs_url: z.coerce.string().optional(),
            branches_url: z.coerce.string().optional(),
            collaborators_url: z.coerce.string().optional(),
            comments_url: z.coerce.string().optional(),
            commits_url: z.coerce.string().optional(),
            compare_url: z.coerce.string().optional(),
            contents_url: z.coerce.string().optional(),
            contributors_url: z.coerce.string().optional(),
            deployments_url: z.coerce.string().optional(),
            downloads_url: z.coerce.string().optional(),
            events_url: z.coerce.string().optional(),
            forks_url: z.coerce.string().optional(),
            git_commits_url: z.coerce.string().optional(),
            git_refs_url: z.coerce.string().optional(),
            git_tags_url: z.coerce.string().optional(),
            git_url: z.coerce.string().optional(),
            issue_comment_url: z.coerce.string().optional(),
            issue_events_url: z.coerce.string().optional(),
            issues_url: z.coerce.string().optional(),
            keys_url: z.coerce.string().optional(),
            labels_url: z.coerce.string().optional(),
            languages_url: z.coerce.string().optional(),
            merges_url: z.coerce.string().optional(),
            milestones_url: z.coerce.string().optional(),
            notifications_url: z.coerce.string().optional(),
            pulls_url: z.coerce.string().optional(),
            releases_url: z.coerce.string().optional(),
            ssh_url: z.coerce.string().optional(),
            stargazers_url: z.coerce.string().optional(),
            statuses_url: z.coerce.string().optional(),
            subscribers_url: z.coerce.string().optional(),
            subscription_url: z.coerce.string().optional(),
            tags_url: z.coerce.string().optional(),
            teams_url: z.coerce.string().optional(),
            trees_url: z.coerce.string().optional(),
            clone_url: z.coerce.string().optional(),
            mirror_url: z.coerce.string().optional(),
            hooks_url: z.coerce.string().optional(),
            svn_url: z.coerce.string().optional(),
            homepage: z.coerce.string().optional(),
            language: z.coerce.string().optional(),
            forks_count: z.coerce.number().optional(),
            stargazers_count: z.coerce.number().optional(),
            watchers_count: z.coerce.number().optional(),
            size: z.coerce.number().optional(),
            default_branch: z.coerce.string().optional(),
            open_issues_count: z.coerce.number().optional(),
            is_template: z.coerce.boolean().optional(),
            topics: z.array(z.coerce.string()).optional(),
            has_issues: z.coerce.boolean().optional(),
            has_projects: z.coerce.boolean().optional(),
            has_wiki: z.coerce.boolean().optional(),
            has_pages: z.coerce.boolean().optional(),
            has_downloads: z.coerce.boolean().optional(),
            archived: z.coerce.boolean().optional(),
            disabled: z.coerce.boolean().optional(),
            visibility: z.coerce.string().optional(),
            pushed_at: z.coerce.string().optional(),
            created_at: z.coerce.string().optional(),
            updated_at: z.coerce.string().optional(),
            permissions: z
              .object({
                admin: z.coerce.boolean().optional(),
                maintain: z.coerce.boolean().optional(),
                push: z.coerce.boolean().optional(),
                triage: z.coerce.boolean().optional(),
                pull: z.coerce.boolean().optional(),
              })
              .optional(),
            allow_rebase_merge: z.coerce.boolean().optional(),
            temp_clone_token: z.coerce.string().optional(),
            allow_squash_merge: z.coerce.boolean().optional(),
            allow_auto_merge: z.coerce.boolean().optional(),
            delete_branch_on_merge: z.coerce.boolean().optional(),
            allow_update_branch: z.coerce.boolean().optional(),
            use_squash_pr_title_as_default: z.coerce.boolean().optional(),
            squash_merge_commit_title: z
              .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
              .optional(),
            squash_merge_commit_message: z
              .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
              .optional(),
            merge_commit_title: z
              .enum(["PR_TITLE", "MERGE_MESSAGE"])
              .optional(),
            merge_commit_message: z
              .enum(["PR_BODY", "PR_TITLE", "BLANK"])
              .optional(),
            allow_merge_commit: z.coerce.boolean().optional(),
            subscribers_count: z.coerce.number().optional(),
            network_count: z.coerce.number().optional(),
          })
          .optional(),
        temp_clone_token: z.coerce.string().optional(),
        allow_squash_merge: z.coerce.boolean().optional(),
        allow_auto_merge: z.coerce.boolean().optional(),
        delete_branch_on_merge: z.coerce.boolean().optional(),
        allow_update_branch: z.coerce.boolean().optional(),
        use_squash_pr_title_as_default: z.coerce.boolean().optional(),
        squash_merge_commit_title: z
          .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
          .optional(),
        squash_merge_commit_message: z
          .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
          .optional(),
        merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
        merge_commit_message: z
          .enum(["PR_BODY", "PR_TITLE", "BLANK"])
          .optional(),
        allow_merge_commit: z.coerce.boolean().optional(),
        allow_forking: z.coerce.boolean().optional(),
        web_commit_signoff_required: z.coerce.boolean().optional(),
        subscribers_count: z.coerce.number().optional(),
        network_count: z.coerce.number().optional(),
        open_issues: z.coerce.number(),
        watchers: z.coerce.number(),
        master_branch: z.coerce.string().optional(),
        starred_at: z.coerce.string().optional(),
        anonymous_access_enabled: z.coerce.boolean().optional(),
      })
    )
    .optional(),
  single_file: z.coerce.string().optional(),
  repository_selection: z.enum(["all", "selected"]).optional(),
})

export const s_authorization = z.object({
  id: z.coerce.number(),
  url: z.coerce.string(),
  scopes: z.array(z.coerce.string()),
  token: z.coerce.string(),
  token_last_eight: z.coerce.string(),
  hashed_token: z.coerce.string(),
  app: z.object({
    client_id: z.coerce.string(),
    name: z.coerce.string(),
    url: z.coerce.string(),
  }),
  note: z.coerce.string(),
  note_url: z.coerce.string(),
  updated_at: z.coerce.string().datetime({ offset: true }),
  created_at: z.coerce.string().datetime({ offset: true }),
  fingerprint: z.coerce.string(),
  user: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  installation: z
    .object({
      permissions: z.object({
        actions: z.enum(["read", "write"]).optional(),
        administration: z.enum(["read", "write"]).optional(),
        checks: z.enum(["read", "write"]).optional(),
        contents: z.enum(["read", "write"]).optional(),
        deployments: z.enum(["read", "write"]).optional(),
        environments: z.enum(["read", "write"]).optional(),
        issues: z.enum(["read", "write"]).optional(),
        metadata: z.enum(["read", "write"]).optional(),
        packages: z.enum(["read", "write"]).optional(),
        pages: z.enum(["read", "write"]).optional(),
        pull_requests: z.enum(["read", "write"]).optional(),
        repository_announcement_banners: z.enum(["read", "write"]).optional(),
        repository_hooks: z.enum(["read", "write"]).optional(),
        repository_projects: z.enum(["read", "write", "admin"]).optional(),
        secret_scanning_alerts: z.enum(["read", "write"]).optional(),
        secrets: z.enum(["read", "write"]).optional(),
        security_events: z.enum(["read", "write"]).optional(),
        single_file: z.enum(["read", "write"]).optional(),
        statuses: z.enum(["read", "write"]).optional(),
        vulnerability_alerts: z.enum(["read", "write"]).optional(),
        workflows: z.enum(["write"]).optional(),
        members: z.enum(["read", "write"]).optional(),
        organization_administration: z.enum(["read", "write"]).optional(),
        organization_custom_roles: z.enum(["read", "write"]).optional(),
        organization_announcement_banners: z.enum(["read", "write"]).optional(),
        organization_hooks: z.enum(["read", "write"]).optional(),
        organization_plan: z.enum(["read"]).optional(),
        organization_projects: z.enum(["read", "write", "admin"]).optional(),
        organization_packages: z.enum(["read", "write"]).optional(),
        organization_secrets: z.enum(["read", "write"]).optional(),
        organization_self_hosted_runners: z.enum(["read", "write"]).optional(),
        organization_user_blocking: z.enum(["read", "write"]).optional(),
        team_discussions: z.enum(["read", "write"]).optional(),
      }),
      repository_selection: z.enum(["all", "selected"]),
      single_file_name: z.coerce.string(),
      has_multiple_single_files: z.coerce.boolean().optional(),
      single_file_paths: z.array(z.coerce.string()).optional(),
      repositories_url: z.coerce.string(),
      account: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
    })
    .optional(),
  expires_at: z.coerce.string().datetime({ offset: true }),
})

export const s_autolink = z.object({
  id: z.coerce.number(),
  key_prefix: z.coerce.string(),
  url_template: z.coerce.string(),
  is_alphanumeric: z.coerce.boolean(),
})

export const s_base_gist = z.object({
  url: z.coerce.string(),
  forks_url: z.coerce.string(),
  commits_url: z.coerce.string(),
  id: z.coerce.string(),
  node_id: z.coerce.string(),
  git_pull_url: z.coerce.string(),
  git_push_url: z.coerce.string(),
  html_url: z.coerce.string(),
  files: z.object({}),
  public: z.coerce.boolean(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  description: z.coerce.string(),
  comments: z.coerce.number(),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  comments_url: z.coerce.string(),
  owner: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  truncated: z.coerce.boolean().optional(),
  forks: z.array(z.object({})).optional(),
  history: z.array(z.object({})).optional(),
})

export const s_basic_error = z.object({
  message: z.coerce.string().optional(),
  documentation_url: z.coerce.string().optional(),
  url: z.coerce.string().optional(),
  status: z.coerce.string().optional(),
})

export const s_blob = z.object({
  content: z.coerce.string(),
  encoding: z.coerce.string(),
  url: z.coerce.string(),
  sha: z.coerce.string(),
  size: z.coerce.number(),
  node_id: z.coerce.string(),
  highlighted_content: z.coerce.string().optional(),
})

export const s_branch_protection = z.object({
  url: z.coerce.string().optional(),
  enabled: z.coerce.boolean().optional(),
  required_status_checks: z
    .object({
      url: z.coerce.string().optional(),
      enforcement_level: z.coerce.string().optional(),
      contexts: z.array(z.coerce.string()),
      checks: z.array(
        z.object({ context: z.coerce.string(), app_id: z.coerce.number() })
      ),
      contexts_url: z.coerce.string().optional(),
      strict: z.coerce.boolean().optional(),
    })
    .optional(),
  enforce_admins: z
    .object({ url: z.coerce.string(), enabled: z.coerce.boolean() })
    .optional(),
  required_pull_request_reviews: z
    .object({
      url: z.coerce.string().optional(),
      dismissal_restrictions: z
        .object({
          users: z
            .array(
              z.object({
                name: z.coerce.string().optional(),
                email: z.coerce.string().optional(),
                login: z.coerce.string(),
                id: z.coerce.number(),
                node_id: z.coerce.string(),
                avatar_url: z.coerce.string(),
                gravatar_id: z.coerce.string(),
                url: z.coerce.string(),
                html_url: z.coerce.string(),
                followers_url: z.coerce.string(),
                following_url: z.coerce.string(),
                gists_url: z.coerce.string(),
                starred_url: z.coerce.string(),
                subscriptions_url: z.coerce.string(),
                organizations_url: z.coerce.string(),
                repos_url: z.coerce.string(),
                events_url: z.coerce.string(),
                received_events_url: z.coerce.string(),
                type: z.coerce.string(),
                site_admin: z.coerce.boolean(),
                starred_at: z.coerce.string().optional(),
              })
            )
            .optional(),
          teams: z
            .array(
              z.object({
                id: z.coerce.number(),
                node_id: z.coerce.string(),
                name: z.coerce.string(),
                slug: z.coerce.string(),
                description: z.coerce.string(),
                privacy: z.coerce.string().optional(),
                permission: z.coerce.string(),
                permissions: z
                  .object({
                    pull: z.coerce.boolean(),
                    triage: z.coerce.boolean(),
                    push: z.coerce.boolean(),
                    maintain: z.coerce.boolean(),
                    admin: z.coerce.boolean(),
                  })
                  .optional(),
                url: z.coerce.string(),
                html_url: z.coerce.string(),
                members_url: z.coerce.string(),
                repositories_url: z.coerce.string(),
                parent: z.object({
                  id: z.coerce.number(),
                  node_id: z.coerce.string(),
                  url: z.coerce.string(),
                  members_url: z.coerce.string(),
                  name: z.coerce.string(),
                  description: z.coerce.string(),
                  permission: z.coerce.string(),
                  privacy: z.coerce.string().optional(),
                  html_url: z.coerce.string(),
                  repositories_url: z.coerce.string(),
                  slug: z.coerce.string(),
                  ldap_dn: z.coerce.string().optional(),
                }),
              })
            )
            .optional(),
          apps: z
            .array(
              z.object({
                id: z.coerce.number(),
                slug: z.coerce.string().optional(),
                node_id: z.coerce.string(),
                owner: z.object({
                  name: z.coerce.string().optional(),
                  email: z.coerce.string().optional(),
                  login: z.coerce.string(),
                  id: z.coerce.number(),
                  node_id: z.coerce.string(),
                  avatar_url: z.coerce.string(),
                  gravatar_id: z.coerce.string(),
                  url: z.coerce.string(),
                  html_url: z.coerce.string(),
                  followers_url: z.coerce.string(),
                  following_url: z.coerce.string(),
                  gists_url: z.coerce.string(),
                  starred_url: z.coerce.string(),
                  subscriptions_url: z.coerce.string(),
                  organizations_url: z.coerce.string(),
                  repos_url: z.coerce.string(),
                  events_url: z.coerce.string(),
                  received_events_url: z.coerce.string(),
                  type: z.coerce.string(),
                  site_admin: z.coerce.boolean(),
                  starred_at: z.coerce.string().optional(),
                }),
                name: z.coerce.string(),
                description: z.coerce.string(),
                external_url: z.coerce.string(),
                html_url: z.coerce.string(),
                created_at: z.coerce.string().datetime({ offset: true }),
                updated_at: z.coerce.string().datetime({ offset: true }),
                permissions: z.object({
                  issues: z.coerce.string().optional(),
                  checks: z.coerce.string().optional(),
                  metadata: z.coerce.string().optional(),
                  contents: z.coerce.string().optional(),
                  deployments: z.coerce.string().optional(),
                }),
                events: z.array(z.coerce.string()),
                installations_count: z.coerce.number().optional(),
                client_id: z.coerce.string().optional(),
                client_secret: z.coerce.string().optional(),
                webhook_secret: z.coerce.string().optional(),
                pem: z.coerce.string().optional(),
              })
            )
            .optional(),
          url: z.coerce.string().optional(),
          users_url: z.coerce.string().optional(),
          teams_url: z.coerce.string().optional(),
        })
        .optional(),
      bypass_pull_request_allowances: z
        .object({
          users: z
            .array(
              z.object({
                name: z.coerce.string().optional(),
                email: z.coerce.string().optional(),
                login: z.coerce.string(),
                id: z.coerce.number(),
                node_id: z.coerce.string(),
                avatar_url: z.coerce.string(),
                gravatar_id: z.coerce.string(),
                url: z.coerce.string(),
                html_url: z.coerce.string(),
                followers_url: z.coerce.string(),
                following_url: z.coerce.string(),
                gists_url: z.coerce.string(),
                starred_url: z.coerce.string(),
                subscriptions_url: z.coerce.string(),
                organizations_url: z.coerce.string(),
                repos_url: z.coerce.string(),
                events_url: z.coerce.string(),
                received_events_url: z.coerce.string(),
                type: z.coerce.string(),
                site_admin: z.coerce.boolean(),
                starred_at: z.coerce.string().optional(),
              })
            )
            .optional(),
          teams: z
            .array(
              z.object({
                id: z.coerce.number(),
                node_id: z.coerce.string(),
                name: z.coerce.string(),
                slug: z.coerce.string(),
                description: z.coerce.string(),
                privacy: z.coerce.string().optional(),
                permission: z.coerce.string(),
                permissions: z
                  .object({
                    pull: z.coerce.boolean(),
                    triage: z.coerce.boolean(),
                    push: z.coerce.boolean(),
                    maintain: z.coerce.boolean(),
                    admin: z.coerce.boolean(),
                  })
                  .optional(),
                url: z.coerce.string(),
                html_url: z.coerce.string(),
                members_url: z.coerce.string(),
                repositories_url: z.coerce.string(),
                parent: z.object({
                  id: z.coerce.number(),
                  node_id: z.coerce.string(),
                  url: z.coerce.string(),
                  members_url: z.coerce.string(),
                  name: z.coerce.string(),
                  description: z.coerce.string(),
                  permission: z.coerce.string(),
                  privacy: z.coerce.string().optional(),
                  html_url: z.coerce.string(),
                  repositories_url: z.coerce.string(),
                  slug: z.coerce.string(),
                  ldap_dn: z.coerce.string().optional(),
                }),
              })
            )
            .optional(),
          apps: z
            .array(
              z.object({
                id: z.coerce.number(),
                slug: z.coerce.string().optional(),
                node_id: z.coerce.string(),
                owner: z.object({
                  name: z.coerce.string().optional(),
                  email: z.coerce.string().optional(),
                  login: z.coerce.string(),
                  id: z.coerce.number(),
                  node_id: z.coerce.string(),
                  avatar_url: z.coerce.string(),
                  gravatar_id: z.coerce.string(),
                  url: z.coerce.string(),
                  html_url: z.coerce.string(),
                  followers_url: z.coerce.string(),
                  following_url: z.coerce.string(),
                  gists_url: z.coerce.string(),
                  starred_url: z.coerce.string(),
                  subscriptions_url: z.coerce.string(),
                  organizations_url: z.coerce.string(),
                  repos_url: z.coerce.string(),
                  events_url: z.coerce.string(),
                  received_events_url: z.coerce.string(),
                  type: z.coerce.string(),
                  site_admin: z.coerce.boolean(),
                  starred_at: z.coerce.string().optional(),
                }),
                name: z.coerce.string(),
                description: z.coerce.string(),
                external_url: z.coerce.string(),
                html_url: z.coerce.string(),
                created_at: z.coerce.string().datetime({ offset: true }),
                updated_at: z.coerce.string().datetime({ offset: true }),
                permissions: z.object({
                  issues: z.coerce.string().optional(),
                  checks: z.coerce.string().optional(),
                  metadata: z.coerce.string().optional(),
                  contents: z.coerce.string().optional(),
                  deployments: z.coerce.string().optional(),
                }),
                events: z.array(z.coerce.string()),
                installations_count: z.coerce.number().optional(),
                client_id: z.coerce.string().optional(),
                client_secret: z.coerce.string().optional(),
                webhook_secret: z.coerce.string().optional(),
                pem: z.coerce.string().optional(),
              })
            )
            .optional(),
        })
        .optional(),
      dismiss_stale_reviews: z.coerce.boolean(),
      require_code_owner_reviews: z.coerce.boolean(),
      required_approving_review_count: z.coerce.number().optional(),
      require_last_push_approval: z.coerce.boolean().optional(),
    })
    .optional(),
  restrictions: z
    .object({
      url: z.coerce.string(),
      users_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      apps_url: z.coerce.string(),
      users: z.array(
        z.object({
          login: z.coerce.string().optional(),
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          avatar_url: z.coerce.string().optional(),
          gravatar_id: z.coerce.string().optional(),
          url: z.coerce.string().optional(),
          html_url: z.coerce.string().optional(),
          followers_url: z.coerce.string().optional(),
          following_url: z.coerce.string().optional(),
          gists_url: z.coerce.string().optional(),
          starred_url: z.coerce.string().optional(),
          subscriptions_url: z.coerce.string().optional(),
          organizations_url: z.coerce.string().optional(),
          repos_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          received_events_url: z.coerce.string().optional(),
          type: z.coerce.string().optional(),
          site_admin: z.coerce.boolean().optional(),
        })
      ),
      teams: z.array(
        z.object({
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          url: z.coerce.string().optional(),
          html_url: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          slug: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          privacy: z.coerce.string().optional(),
          permission: z.coerce.string().optional(),
          members_url: z.coerce.string().optional(),
          repositories_url: z.coerce.string().optional(),
          parent: z.coerce.string().optional(),
        })
      ),
      apps: z.array(
        z.object({
          id: z.coerce.number().optional(),
          slug: z.coerce.string().optional(),
          node_id: z.coerce.string().optional(),
          owner: z
            .object({
              login: z.coerce.string().optional(),
              id: z.coerce.number().optional(),
              node_id: z.coerce.string().optional(),
              url: z.coerce.string().optional(),
              repos_url: z.coerce.string().optional(),
              events_url: z.coerce.string().optional(),
              hooks_url: z.coerce.string().optional(),
              issues_url: z.coerce.string().optional(),
              members_url: z.coerce.string().optional(),
              public_members_url: z.coerce.string().optional(),
              avatar_url: z.coerce.string().optional(),
              description: z.coerce.string().optional(),
              gravatar_id: z.coerce.string().optional(),
              html_url: z.coerce.string().optional(),
              followers_url: z.coerce.string().optional(),
              following_url: z.coerce.string().optional(),
              gists_url: z.coerce.string().optional(),
              starred_url: z.coerce.string().optional(),
              subscriptions_url: z.coerce.string().optional(),
              organizations_url: z.coerce.string().optional(),
              received_events_url: z.coerce.string().optional(),
              type: z.coerce.string().optional(),
              site_admin: z.coerce.boolean().optional(),
            })
            .optional(),
          name: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          external_url: z.coerce.string().optional(),
          html_url: z.coerce.string().optional(),
          created_at: z.coerce.string().optional(),
          updated_at: z.coerce.string().optional(),
          permissions: z
            .object({
              metadata: z.coerce.string().optional(),
              contents: z.coerce.string().optional(),
              issues: z.coerce.string().optional(),
              single_file: z.coerce.string().optional(),
            })
            .optional(),
          events: z.array(z.coerce.string()).optional(),
        })
      ),
    })
    .optional(),
  required_linear_history: z
    .object({ enabled: z.coerce.boolean().optional() })
    .optional(),
  allow_force_pushes: z
    .object({ enabled: z.coerce.boolean().optional() })
    .optional(),
  allow_deletions: z
    .object({ enabled: z.coerce.boolean().optional() })
    .optional(),
  block_creations: z
    .object({ enabled: z.coerce.boolean().optional() })
    .optional(),
  required_conversation_resolution: z
    .object({ enabled: z.coerce.boolean().optional() })
    .optional(),
  name: z.coerce.string().optional(),
  protection_url: z.coerce.string().optional(),
  required_signatures: z
    .object({ url: z.coerce.string(), enabled: z.coerce.boolean() })
    .optional(),
  lock_branch: z.object({ enabled: z.coerce.boolean().optional() }).optional(),
  allow_fork_syncing: z
    .object({ enabled: z.coerce.boolean().optional() })
    .optional(),
})

export const s_branch_restriction_policy = z.object({
  url: z.coerce.string(),
  users_url: z.coerce.string(),
  teams_url: z.coerce.string(),
  apps_url: z.coerce.string(),
  users: z.array(
    z.object({
      login: z.coerce.string().optional(),
      id: z.coerce.number().optional(),
      node_id: z.coerce.string().optional(),
      avatar_url: z.coerce.string().optional(),
      gravatar_id: z.coerce.string().optional(),
      url: z.coerce.string().optional(),
      html_url: z.coerce.string().optional(),
      followers_url: z.coerce.string().optional(),
      following_url: z.coerce.string().optional(),
      gists_url: z.coerce.string().optional(),
      starred_url: z.coerce.string().optional(),
      subscriptions_url: z.coerce.string().optional(),
      organizations_url: z.coerce.string().optional(),
      repos_url: z.coerce.string().optional(),
      events_url: z.coerce.string().optional(),
      received_events_url: z.coerce.string().optional(),
      type: z.coerce.string().optional(),
      site_admin: z.coerce.boolean().optional(),
    })
  ),
  teams: z.array(
    z.object({
      id: z.coerce.number().optional(),
      node_id: z.coerce.string().optional(),
      url: z.coerce.string().optional(),
      html_url: z.coerce.string().optional(),
      name: z.coerce.string().optional(),
      slug: z.coerce.string().optional(),
      description: z.coerce.string().optional(),
      privacy: z.coerce.string().optional(),
      permission: z.coerce.string().optional(),
      members_url: z.coerce.string().optional(),
      repositories_url: z.coerce.string().optional(),
      parent: z.coerce.string().optional(),
    })
  ),
  apps: z.array(
    z.object({
      id: z.coerce.number().optional(),
      slug: z.coerce.string().optional(),
      node_id: z.coerce.string().optional(),
      owner: z
        .object({
          login: z.coerce.string().optional(),
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          url: z.coerce.string().optional(),
          repos_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          hooks_url: z.coerce.string().optional(),
          issues_url: z.coerce.string().optional(),
          members_url: z.coerce.string().optional(),
          public_members_url: z.coerce.string().optional(),
          avatar_url: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          gravatar_id: z.coerce.string().optional(),
          html_url: z.coerce.string().optional(),
          followers_url: z.coerce.string().optional(),
          following_url: z.coerce.string().optional(),
          gists_url: z.coerce.string().optional(),
          starred_url: z.coerce.string().optional(),
          subscriptions_url: z.coerce.string().optional(),
          organizations_url: z.coerce.string().optional(),
          received_events_url: z.coerce.string().optional(),
          type: z.coerce.string().optional(),
          site_admin: z.coerce.boolean().optional(),
        })
        .optional(),
      name: z.coerce.string().optional(),
      description: z.coerce.string().optional(),
      external_url: z.coerce.string().optional(),
      html_url: z.coerce.string().optional(),
      created_at: z.coerce.string().optional(),
      updated_at: z.coerce.string().optional(),
      permissions: z
        .object({
          metadata: z.coerce.string().optional(),
          contents: z.coerce.string().optional(),
          issues: z.coerce.string().optional(),
          single_file: z.coerce.string().optional(),
        })
        .optional(),
      events: z.array(z.coerce.string()).optional(),
    })
  ),
})

export const s_branch_with_protection = z.object({
  name: z.coerce.string(),
  commit: z.object({
    url: z.coerce.string(),
    sha: z.coerce.string(),
    node_id: z.coerce.string(),
    html_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commit: z.object({
      url: z.coerce.string(),
      author: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        date: z.coerce.string().optional(),
      }),
      committer: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        date: z.coerce.string().optional(),
      }),
      message: z.coerce.string(),
      comment_count: z.coerce.number(),
      tree: z.object({ sha: z.coerce.string(), url: z.coerce.string() }),
      verification: z
        .object({
          verified: z.coerce.boolean(),
          reason: z.coerce.string(),
          payload: z.coerce.string(),
          signature: z.coerce.string(),
        })
        .optional(),
    }),
    author: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    committer: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    parents: z.array(
      z.object({
        sha: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      })
    ),
    stats: z
      .object({
        additions: z.coerce.number().optional(),
        deletions: z.coerce.number().optional(),
        total: z.coerce.number().optional(),
      })
      .optional(),
    files: z
      .array(
        z.object({
          sha: z.coerce.string(),
          filename: z.coerce.string(),
          status: z.enum([
            "added",
            "removed",
            "modified",
            "renamed",
            "copied",
            "changed",
            "unchanged",
          ]),
          additions: z.coerce.number(),
          deletions: z.coerce.number(),
          changes: z.coerce.number(),
          blob_url: z.coerce.string(),
          raw_url: z.coerce.string(),
          contents_url: z.coerce.string(),
          patch: z.coerce.string().optional(),
          previous_filename: z.coerce.string().optional(),
        })
      )
      .optional(),
  }),
  _links: z.object({ html: z.coerce.string(), self: z.coerce.string() }),
  protected: z.coerce.boolean(),
  protection: z.object({
    url: z.coerce.string().optional(),
    enabled: z.coerce.boolean().optional(),
    required_status_checks: z
      .object({
        url: z.coerce.string().optional(),
        enforcement_level: z.coerce.string().optional(),
        contexts: z.array(z.coerce.string()),
        checks: z.array(
          z.object({ context: z.coerce.string(), app_id: z.coerce.number() })
        ),
        contexts_url: z.coerce.string().optional(),
        strict: z.coerce.boolean().optional(),
      })
      .optional(),
    enforce_admins: z
      .object({ url: z.coerce.string(), enabled: z.coerce.boolean() })
      .optional(),
    required_pull_request_reviews: z
      .object({
        url: z.coerce.string().optional(),
        dismissal_restrictions: z
          .object({
            users: z
              .array(
                z.object({
                  name: z.coerce.string().optional(),
                  email: z.coerce.string().optional(),
                  login: z.coerce.string(),
                  id: z.coerce.number(),
                  node_id: z.coerce.string(),
                  avatar_url: z.coerce.string(),
                  gravatar_id: z.coerce.string(),
                  url: z.coerce.string(),
                  html_url: z.coerce.string(),
                  followers_url: z.coerce.string(),
                  following_url: z.coerce.string(),
                  gists_url: z.coerce.string(),
                  starred_url: z.coerce.string(),
                  subscriptions_url: z.coerce.string(),
                  organizations_url: z.coerce.string(),
                  repos_url: z.coerce.string(),
                  events_url: z.coerce.string(),
                  received_events_url: z.coerce.string(),
                  type: z.coerce.string(),
                  site_admin: z.coerce.boolean(),
                  starred_at: z.coerce.string().optional(),
                })
              )
              .optional(),
            teams: z
              .array(
                z.object({
                  id: z.coerce.number(),
                  node_id: z.coerce.string(),
                  name: z.coerce.string(),
                  slug: z.coerce.string(),
                  description: z.coerce.string(),
                  privacy: z.coerce.string().optional(),
                  permission: z.coerce.string(),
                  permissions: z
                    .object({
                      pull: z.coerce.boolean(),
                      triage: z.coerce.boolean(),
                      push: z.coerce.boolean(),
                      maintain: z.coerce.boolean(),
                      admin: z.coerce.boolean(),
                    })
                    .optional(),
                  url: z.coerce.string(),
                  html_url: z.coerce.string(),
                  members_url: z.coerce.string(),
                  repositories_url: z.coerce.string(),
                  parent: z.object({
                    id: z.coerce.number(),
                    node_id: z.coerce.string(),
                    url: z.coerce.string(),
                    members_url: z.coerce.string(),
                    name: z.coerce.string(),
                    description: z.coerce.string(),
                    permission: z.coerce.string(),
                    privacy: z.coerce.string().optional(),
                    html_url: z.coerce.string(),
                    repositories_url: z.coerce.string(),
                    slug: z.coerce.string(),
                    ldap_dn: z.coerce.string().optional(),
                  }),
                })
              )
              .optional(),
            apps: z
              .array(
                z.object({
                  id: z.coerce.number(),
                  slug: z.coerce.string().optional(),
                  node_id: z.coerce.string(),
                  owner: z.object({
                    name: z.coerce.string().optional(),
                    email: z.coerce.string().optional(),
                    login: z.coerce.string(),
                    id: z.coerce.number(),
                    node_id: z.coerce.string(),
                    avatar_url: z.coerce.string(),
                    gravatar_id: z.coerce.string(),
                    url: z.coerce.string(),
                    html_url: z.coerce.string(),
                    followers_url: z.coerce.string(),
                    following_url: z.coerce.string(),
                    gists_url: z.coerce.string(),
                    starred_url: z.coerce.string(),
                    subscriptions_url: z.coerce.string(),
                    organizations_url: z.coerce.string(),
                    repos_url: z.coerce.string(),
                    events_url: z.coerce.string(),
                    received_events_url: z.coerce.string(),
                    type: z.coerce.string(),
                    site_admin: z.coerce.boolean(),
                    starred_at: z.coerce.string().optional(),
                  }),
                  name: z.coerce.string(),
                  description: z.coerce.string(),
                  external_url: z.coerce.string(),
                  html_url: z.coerce.string(),
                  created_at: z.coerce.string().datetime({ offset: true }),
                  updated_at: z.coerce.string().datetime({ offset: true }),
                  permissions: z.object({
                    issues: z.coerce.string().optional(),
                    checks: z.coerce.string().optional(),
                    metadata: z.coerce.string().optional(),
                    contents: z.coerce.string().optional(),
                    deployments: z.coerce.string().optional(),
                  }),
                  events: z.array(z.coerce.string()),
                  installations_count: z.coerce.number().optional(),
                  client_id: z.coerce.string().optional(),
                  client_secret: z.coerce.string().optional(),
                  webhook_secret: z.coerce.string().optional(),
                  pem: z.coerce.string().optional(),
                })
              )
              .optional(),
            url: z.coerce.string().optional(),
            users_url: z.coerce.string().optional(),
            teams_url: z.coerce.string().optional(),
          })
          .optional(),
        bypass_pull_request_allowances: z
          .object({
            users: z
              .array(
                z.object({
                  name: z.coerce.string().optional(),
                  email: z.coerce.string().optional(),
                  login: z.coerce.string(),
                  id: z.coerce.number(),
                  node_id: z.coerce.string(),
                  avatar_url: z.coerce.string(),
                  gravatar_id: z.coerce.string(),
                  url: z.coerce.string(),
                  html_url: z.coerce.string(),
                  followers_url: z.coerce.string(),
                  following_url: z.coerce.string(),
                  gists_url: z.coerce.string(),
                  starred_url: z.coerce.string(),
                  subscriptions_url: z.coerce.string(),
                  organizations_url: z.coerce.string(),
                  repos_url: z.coerce.string(),
                  events_url: z.coerce.string(),
                  received_events_url: z.coerce.string(),
                  type: z.coerce.string(),
                  site_admin: z.coerce.boolean(),
                  starred_at: z.coerce.string().optional(),
                })
              )
              .optional(),
            teams: z
              .array(
                z.object({
                  id: z.coerce.number(),
                  node_id: z.coerce.string(),
                  name: z.coerce.string(),
                  slug: z.coerce.string(),
                  description: z.coerce.string(),
                  privacy: z.coerce.string().optional(),
                  permission: z.coerce.string(),
                  permissions: z
                    .object({
                      pull: z.coerce.boolean(),
                      triage: z.coerce.boolean(),
                      push: z.coerce.boolean(),
                      maintain: z.coerce.boolean(),
                      admin: z.coerce.boolean(),
                    })
                    .optional(),
                  url: z.coerce.string(),
                  html_url: z.coerce.string(),
                  members_url: z.coerce.string(),
                  repositories_url: z.coerce.string(),
                  parent: z.object({
                    id: z.coerce.number(),
                    node_id: z.coerce.string(),
                    url: z.coerce.string(),
                    members_url: z.coerce.string(),
                    name: z.coerce.string(),
                    description: z.coerce.string(),
                    permission: z.coerce.string(),
                    privacy: z.coerce.string().optional(),
                    html_url: z.coerce.string(),
                    repositories_url: z.coerce.string(),
                    slug: z.coerce.string(),
                    ldap_dn: z.coerce.string().optional(),
                  }),
                })
              )
              .optional(),
            apps: z
              .array(
                z.object({
                  id: z.coerce.number(),
                  slug: z.coerce.string().optional(),
                  node_id: z.coerce.string(),
                  owner: z.object({
                    name: z.coerce.string().optional(),
                    email: z.coerce.string().optional(),
                    login: z.coerce.string(),
                    id: z.coerce.number(),
                    node_id: z.coerce.string(),
                    avatar_url: z.coerce.string(),
                    gravatar_id: z.coerce.string(),
                    url: z.coerce.string(),
                    html_url: z.coerce.string(),
                    followers_url: z.coerce.string(),
                    following_url: z.coerce.string(),
                    gists_url: z.coerce.string(),
                    starred_url: z.coerce.string(),
                    subscriptions_url: z.coerce.string(),
                    organizations_url: z.coerce.string(),
                    repos_url: z.coerce.string(),
                    events_url: z.coerce.string(),
                    received_events_url: z.coerce.string(),
                    type: z.coerce.string(),
                    site_admin: z.coerce.boolean(),
                    starred_at: z.coerce.string().optional(),
                  }),
                  name: z.coerce.string(),
                  description: z.coerce.string(),
                  external_url: z.coerce.string(),
                  html_url: z.coerce.string(),
                  created_at: z.coerce.string().datetime({ offset: true }),
                  updated_at: z.coerce.string().datetime({ offset: true }),
                  permissions: z.object({
                    issues: z.coerce.string().optional(),
                    checks: z.coerce.string().optional(),
                    metadata: z.coerce.string().optional(),
                    contents: z.coerce.string().optional(),
                    deployments: z.coerce.string().optional(),
                  }),
                  events: z.array(z.coerce.string()),
                  installations_count: z.coerce.number().optional(),
                  client_id: z.coerce.string().optional(),
                  client_secret: z.coerce.string().optional(),
                  webhook_secret: z.coerce.string().optional(),
                  pem: z.coerce.string().optional(),
                })
              )
              .optional(),
          })
          .optional(),
        dismiss_stale_reviews: z.coerce.boolean(),
        require_code_owner_reviews: z.coerce.boolean(),
        required_approving_review_count: z.coerce.number().optional(),
        require_last_push_approval: z.coerce.boolean().optional(),
      })
      .optional(),
    restrictions: z
      .object({
        url: z.coerce.string(),
        users_url: z.coerce.string(),
        teams_url: z.coerce.string(),
        apps_url: z.coerce.string(),
        users: z.array(
          z.object({
            login: z.coerce.string().optional(),
            id: z.coerce.number().optional(),
            node_id: z.coerce.string().optional(),
            avatar_url: z.coerce.string().optional(),
            gravatar_id: z.coerce.string().optional(),
            url: z.coerce.string().optional(),
            html_url: z.coerce.string().optional(),
            followers_url: z.coerce.string().optional(),
            following_url: z.coerce.string().optional(),
            gists_url: z.coerce.string().optional(),
            starred_url: z.coerce.string().optional(),
            subscriptions_url: z.coerce.string().optional(),
            organizations_url: z.coerce.string().optional(),
            repos_url: z.coerce.string().optional(),
            events_url: z.coerce.string().optional(),
            received_events_url: z.coerce.string().optional(),
            type: z.coerce.string().optional(),
            site_admin: z.coerce.boolean().optional(),
          })
        ),
        teams: z.array(
          z.object({
            id: z.coerce.number().optional(),
            node_id: z.coerce.string().optional(),
            url: z.coerce.string().optional(),
            html_url: z.coerce.string().optional(),
            name: z.coerce.string().optional(),
            slug: z.coerce.string().optional(),
            description: z.coerce.string().optional(),
            privacy: z.coerce.string().optional(),
            permission: z.coerce.string().optional(),
            members_url: z.coerce.string().optional(),
            repositories_url: z.coerce.string().optional(),
            parent: z.coerce.string().optional(),
          })
        ),
        apps: z.array(
          z.object({
            id: z.coerce.number().optional(),
            slug: z.coerce.string().optional(),
            node_id: z.coerce.string().optional(),
            owner: z
              .object({
                login: z.coerce.string().optional(),
                id: z.coerce.number().optional(),
                node_id: z.coerce.string().optional(),
                url: z.coerce.string().optional(),
                repos_url: z.coerce.string().optional(),
                events_url: z.coerce.string().optional(),
                hooks_url: z.coerce.string().optional(),
                issues_url: z.coerce.string().optional(),
                members_url: z.coerce.string().optional(),
                public_members_url: z.coerce.string().optional(),
                avatar_url: z.coerce.string().optional(),
                description: z.coerce.string().optional(),
                gravatar_id: z.coerce.string().optional(),
                html_url: z.coerce.string().optional(),
                followers_url: z.coerce.string().optional(),
                following_url: z.coerce.string().optional(),
                gists_url: z.coerce.string().optional(),
                starred_url: z.coerce.string().optional(),
                subscriptions_url: z.coerce.string().optional(),
                organizations_url: z.coerce.string().optional(),
                received_events_url: z.coerce.string().optional(),
                type: z.coerce.string().optional(),
                site_admin: z.coerce.boolean().optional(),
              })
              .optional(),
            name: z.coerce.string().optional(),
            description: z.coerce.string().optional(),
            external_url: z.coerce.string().optional(),
            html_url: z.coerce.string().optional(),
            created_at: z.coerce.string().optional(),
            updated_at: z.coerce.string().optional(),
            permissions: z
              .object({
                metadata: z.coerce.string().optional(),
                contents: z.coerce.string().optional(),
                issues: z.coerce.string().optional(),
                single_file: z.coerce.string().optional(),
              })
              .optional(),
            events: z.array(z.coerce.string()).optional(),
          })
        ),
      })
      .optional(),
    required_linear_history: z
      .object({ enabled: z.coerce.boolean().optional() })
      .optional(),
    allow_force_pushes: z
      .object({ enabled: z.coerce.boolean().optional() })
      .optional(),
    allow_deletions: z
      .object({ enabled: z.coerce.boolean().optional() })
      .optional(),
    block_creations: z
      .object({ enabled: z.coerce.boolean().optional() })
      .optional(),
    required_conversation_resolution: z
      .object({ enabled: z.coerce.boolean().optional() })
      .optional(),
    name: z.coerce.string().optional(),
    protection_url: z.coerce.string().optional(),
    required_signatures: z
      .object({ url: z.coerce.string(), enabled: z.coerce.boolean() })
      .optional(),
    lock_branch: z
      .object({ enabled: z.coerce.boolean().optional() })
      .optional(),
    allow_fork_syncing: z
      .object({ enabled: z.coerce.boolean().optional() })
      .optional(),
  }),
  protection_url: z.coerce.string(),
  pattern: z.coerce.string().optional(),
  required_approving_review_count: z.coerce.number().optional(),
})

export const s_check_run = z.object({
  id: z.coerce.number(),
  head_sha: z.coerce.string(),
  node_id: z.coerce.string(),
  external_id: z.coerce.string(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  details_url: z.coerce.string(),
  status: z.enum(["queued", "in_progress", "completed"]),
  conclusion: z.enum([
    "success",
    "failure",
    "neutral",
    "cancelled",
    "skipped",
    "timed_out",
    "action_required",
  ]),
  started_at: z.coerce.string().datetime({ offset: true }),
  completed_at: z.coerce.string().datetime({ offset: true }),
  output: z.object({
    title: z.coerce.string(),
    summary: z.coerce.string(),
    text: z.coerce.string(),
    annotations_count: z.coerce.number(),
    annotations_url: z.coerce.string(),
  }),
  name: z.coerce.string(),
  check_suite: z.object({ id: z.coerce.number() }),
  app: z.object({
    id: z.coerce.number(),
    slug: z.coerce.string().optional(),
    node_id: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    name: z.coerce.string(),
    description: z.coerce.string(),
    external_url: z.coerce.string(),
    html_url: z.coerce.string(),
    created_at: z.coerce.string().datetime({ offset: true }),
    updated_at: z.coerce.string().datetime({ offset: true }),
    permissions: z.object({
      issues: z.coerce.string().optional(),
      checks: z.coerce.string().optional(),
      metadata: z.coerce.string().optional(),
      contents: z.coerce.string().optional(),
      deployments: z.coerce.string().optional(),
    }),
    events: z.array(z.coerce.string()),
    installations_count: z.coerce.number().optional(),
    client_id: z.coerce.string().optional(),
    client_secret: z.coerce.string().optional(),
    webhook_secret: z.coerce.string().optional(),
    pem: z.coerce.string().optional(),
  }),
  pull_requests: z.array(
    z.object({
      id: z.coerce.number(),
      number: z.coerce.number(),
      url: z.coerce.string(),
      head: z.object({
        ref: z.coerce.string(),
        sha: z.coerce.string(),
        repo: z.object({
          id: z.coerce.number(),
          url: z.coerce.string(),
          name: z.coerce.string(),
        }),
      }),
      base: z.object({
        ref: z.coerce.string(),
        sha: z.coerce.string(),
        repo: z.object({
          id: z.coerce.number(),
          url: z.coerce.string(),
          name: z.coerce.string(),
        }),
      }),
    })
  ),
  deployment: z
    .object({
      url: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      task: z.coerce.string(),
      original_environment: z.coerce.string().optional(),
      environment: z.coerce.string(),
      description: z.coerce.string(),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      statuses_url: z.coerce.string(),
      repository_url: z.coerce.string(),
      transient_environment: z.coerce.boolean().optional(),
      production_environment: z.coerce.boolean().optional(),
      performed_via_github_app: z
        .object({
          id: z.coerce.number(),
          slug: z.coerce.string().optional(),
          node_id: z.coerce.string(),
          owner: z.object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          }),
          name: z.coerce.string(),
          description: z.coerce.string(),
          external_url: z.coerce.string(),
          html_url: z.coerce.string(),
          created_at: z.coerce.string().datetime({ offset: true }),
          updated_at: z.coerce.string().datetime({ offset: true }),
          permissions: z.object({
            issues: z.coerce.string().optional(),
            checks: z.coerce.string().optional(),
            metadata: z.coerce.string().optional(),
            contents: z.coerce.string().optional(),
            deployments: z.coerce.string().optional(),
          }),
          events: z.array(z.coerce.string()),
          installations_count: z.coerce.number().optional(),
          client_id: z.coerce.string().optional(),
          client_secret: z.coerce.string().optional(),
          webhook_secret: z.coerce.string().optional(),
          pem: z.coerce.string().optional(),
        })
        .optional(),
    })
    .optional(),
})

export const s_check_suite = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  head_branch: z.coerce.string(),
  head_sha: z.coerce.string(),
  status: z.enum(["queued", "in_progress", "completed"]),
  conclusion: z.enum([
    "success",
    "failure",
    "neutral",
    "cancelled",
    "skipped",
    "timed_out",
    "action_required",
    "startup_failure",
    "stale",
    "null",
  ]),
  url: z.coerce.string(),
  before: z.coerce.string(),
  after: z.coerce.string(),
  pull_requests: z.array(
    z.object({
      id: z.coerce.number(),
      number: z.coerce.number(),
      url: z.coerce.string(),
      head: z.object({
        ref: z.coerce.string(),
        sha: z.coerce.string(),
        repo: z.object({
          id: z.coerce.number(),
          url: z.coerce.string(),
          name: z.coerce.string(),
        }),
      }),
      base: z.object({
        ref: z.coerce.string(),
        sha: z.coerce.string(),
        repo: z.object({
          id: z.coerce.number(),
          url: z.coerce.string(),
          name: z.coerce.string(),
        }),
      }),
    })
  ),
  app: z.object({
    id: z.coerce.number(),
    slug: z.coerce.string().optional(),
    node_id: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    name: z.coerce.string(),
    description: z.coerce.string(),
    external_url: z.coerce.string(),
    html_url: z.coerce.string(),
    created_at: z.coerce.string().datetime({ offset: true }),
    updated_at: z.coerce.string().datetime({ offset: true }),
    permissions: z.object({
      issues: z.coerce.string().optional(),
      checks: z.coerce.string().optional(),
      metadata: z.coerce.string().optional(),
      contents: z.coerce.string().optional(),
      deployments: z.coerce.string().optional(),
    }),
    events: z.array(z.coerce.string()),
    installations_count: z.coerce.number().optional(),
    client_id: z.coerce.string().optional(),
    client_secret: z.coerce.string().optional(),
    webhook_secret: z.coerce.string().optional(),
    pem: z.coerce.string().optional(),
  }),
  repository: z.object({
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    name: z.coerce.string(),
    full_name: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    private: z.coerce.boolean(),
    html_url: z.coerce.string(),
    description: z.coerce.string(),
    fork: z.coerce.boolean(),
    url: z.coerce.string(),
    archive_url: z.coerce.string(),
    assignees_url: z.coerce.string(),
    blobs_url: z.coerce.string(),
    branches_url: z.coerce.string(),
    collaborators_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commits_url: z.coerce.string(),
    compare_url: z.coerce.string(),
    contents_url: z.coerce.string(),
    contributors_url: z.coerce.string(),
    deployments_url: z.coerce.string(),
    downloads_url: z.coerce.string(),
    events_url: z.coerce.string(),
    forks_url: z.coerce.string(),
    git_commits_url: z.coerce.string(),
    git_refs_url: z.coerce.string(),
    git_tags_url: z.coerce.string(),
    git_url: z.coerce.string().optional(),
    issue_comment_url: z.coerce.string(),
    issue_events_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    keys_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    languages_url: z.coerce.string(),
    merges_url: z.coerce.string(),
    milestones_url: z.coerce.string(),
    notifications_url: z.coerce.string(),
    pulls_url: z.coerce.string(),
    releases_url: z.coerce.string(),
    ssh_url: z.coerce.string().optional(),
    stargazers_url: z.coerce.string(),
    statuses_url: z.coerce.string(),
    subscribers_url: z.coerce.string(),
    subscription_url: z.coerce.string(),
    tags_url: z.coerce.string(),
    teams_url: z.coerce.string(),
    trees_url: z.coerce.string(),
    clone_url: z.coerce.string().optional(),
    mirror_url: z.coerce.string().optional(),
    hooks_url: z.coerce.string(),
    svn_url: z.coerce.string().optional(),
    homepage: z.coerce.string().optional(),
    language: z.coerce.string().optional(),
    forks_count: z.coerce.number().optional(),
    stargazers_count: z.coerce.number().optional(),
    watchers_count: z.coerce.number().optional(),
    size: z.coerce.number().optional(),
    default_branch: z.coerce.string().optional(),
    open_issues_count: z.coerce.number().optional(),
    is_template: z.coerce.boolean().optional(),
    topics: z.array(z.coerce.string()).optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_pages: z.coerce.boolean().optional(),
    has_downloads: z.coerce.boolean().optional(),
    has_discussions: z.coerce.boolean().optional(),
    archived: z.coerce.boolean().optional(),
    disabled: z.coerce.boolean().optional(),
    visibility: z.coerce.string().optional(),
    pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
    created_at: z.coerce.string().datetime({ offset: true }).optional(),
    updated_at: z.coerce.string().datetime({ offset: true }).optional(),
    permissions: z
      .object({
        admin: z.coerce.boolean().optional(),
        maintain: z.coerce.boolean().optional(),
        push: z.coerce.boolean().optional(),
        triage: z.coerce.boolean().optional(),
        pull: z.coerce.boolean().optional(),
      })
      .optional(),
    role_name: z.coerce.string().optional(),
    temp_clone_token: z.coerce.string().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    subscribers_count: z.coerce.number().optional(),
    network_count: z.coerce.number().optional(),
    code_of_conduct: z
      .object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        body: z.coerce.string().optional(),
        html_url: z.coerce.string(),
      })
      .optional(),
    license: z
      .object({
        key: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        spdx_id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        node_id: z.coerce.string().optional(),
      })
      .optional(),
    forks: z.coerce.number().optional(),
    open_issues: z.coerce.number().optional(),
    watchers: z.coerce.number().optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
      })
      .optional(),
  }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  head_commit: z.object({
    id: z.coerce.string(),
    tree_id: z.coerce.string(),
    message: z.coerce.string(),
    timestamp: z.coerce.string().datetime({ offset: true }),
    author: z.object({ name: z.coerce.string(), email: z.coerce.string() }),
    committer: z.object({ name: z.coerce.string(), email: z.coerce.string() }),
  }),
  latest_check_runs_count: z.coerce.number(),
  check_runs_url: z.coerce.string(),
  rerequestable: z.coerce.boolean().optional(),
  runs_rerequestable: z.coerce.boolean().optional(),
})

export const s_check_suite_preference = z.object({
  preferences: z.object({
    auto_trigger_checks: z
      .array(
        z.object({ app_id: z.coerce.number(), setting: z.coerce.boolean() })
      )
      .optional(),
  }),
  repository: z.object({
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    name: z.coerce.string(),
    full_name: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    private: z.coerce.boolean(),
    html_url: z.coerce.string(),
    description: z.coerce.string(),
    fork: z.coerce.boolean(),
    url: z.coerce.string(),
    archive_url: z.coerce.string(),
    assignees_url: z.coerce.string(),
    blobs_url: z.coerce.string(),
    branches_url: z.coerce.string(),
    collaborators_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commits_url: z.coerce.string(),
    compare_url: z.coerce.string(),
    contents_url: z.coerce.string(),
    contributors_url: z.coerce.string(),
    deployments_url: z.coerce.string(),
    downloads_url: z.coerce.string(),
    events_url: z.coerce.string(),
    forks_url: z.coerce.string(),
    git_commits_url: z.coerce.string(),
    git_refs_url: z.coerce.string(),
    git_tags_url: z.coerce.string(),
    git_url: z.coerce.string().optional(),
    issue_comment_url: z.coerce.string(),
    issue_events_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    keys_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    languages_url: z.coerce.string(),
    merges_url: z.coerce.string(),
    milestones_url: z.coerce.string(),
    notifications_url: z.coerce.string(),
    pulls_url: z.coerce.string(),
    releases_url: z.coerce.string(),
    ssh_url: z.coerce.string().optional(),
    stargazers_url: z.coerce.string(),
    statuses_url: z.coerce.string(),
    subscribers_url: z.coerce.string(),
    subscription_url: z.coerce.string(),
    tags_url: z.coerce.string(),
    teams_url: z.coerce.string(),
    trees_url: z.coerce.string(),
    clone_url: z.coerce.string().optional(),
    mirror_url: z.coerce.string().optional(),
    hooks_url: z.coerce.string(),
    svn_url: z.coerce.string().optional(),
    homepage: z.coerce.string().optional(),
    language: z.coerce.string().optional(),
    forks_count: z.coerce.number().optional(),
    stargazers_count: z.coerce.number().optional(),
    watchers_count: z.coerce.number().optional(),
    size: z.coerce.number().optional(),
    default_branch: z.coerce.string().optional(),
    open_issues_count: z.coerce.number().optional(),
    is_template: z.coerce.boolean().optional(),
    topics: z.array(z.coerce.string()).optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_pages: z.coerce.boolean().optional(),
    has_downloads: z.coerce.boolean().optional(),
    has_discussions: z.coerce.boolean().optional(),
    archived: z.coerce.boolean().optional(),
    disabled: z.coerce.boolean().optional(),
    visibility: z.coerce.string().optional(),
    pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
    created_at: z.coerce.string().datetime({ offset: true }).optional(),
    updated_at: z.coerce.string().datetime({ offset: true }).optional(),
    permissions: z
      .object({
        admin: z.coerce.boolean().optional(),
        maintain: z.coerce.boolean().optional(),
        push: z.coerce.boolean().optional(),
        triage: z.coerce.boolean().optional(),
        pull: z.coerce.boolean().optional(),
      })
      .optional(),
    role_name: z.coerce.string().optional(),
    temp_clone_token: z.coerce.string().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    subscribers_count: z.coerce.number().optional(),
    network_count: z.coerce.number().optional(),
    code_of_conduct: z
      .object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        body: z.coerce.string().optional(),
        html_url: z.coerce.string(),
      })
      .optional(),
    license: z
      .object({
        key: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        spdx_id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        node_id: z.coerce.string().optional(),
      })
      .optional(),
    forks: z.coerce.number().optional(),
    open_issues: z.coerce.number().optional(),
    watchers: z.coerce.number().optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
      })
      .optional(),
  }),
})

export const s_clone_traffic = z.object({
  count: z.coerce.number(),
  uniques: z.coerce.number(),
  clones: z.array(
    z.object({
      timestamp: z.coerce.string().datetime({ offset: true }),
      uniques: z.coerce.number(),
      count: z.coerce.number(),
    })
  ),
})

export const s_code_of_conduct = z.object({
  key: z.coerce.string(),
  name: z.coerce.string(),
  url: z.coerce.string(),
  body: z.coerce.string().optional(),
  html_url: z.coerce.string(),
})

export const s_code_scanning_alert = z.object({
  number: z.coerce.number(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }).optional(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  instances_url: z.coerce.string(),
  state: z.enum(["open", "closed", "dismissed", "fixed"]),
  fixed_at: z.coerce.string().datetime({ offset: true }).optional(),
  dismissed_by: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  dismissed_at: z.coerce.string().datetime({ offset: true }),
  dismissed_reason: z.enum([
    "null",
    "false positive",
    "won't fix",
    "used in tests",
  ]),
  dismissed_comment: z.coerce.string().optional(),
  rule: z.object({
    id: z.coerce.string().optional(),
    name: z.coerce.string().optional(),
    severity: z.enum(["none", "note", "warning", "error"]).optional(),
    security_severity_level: z
      .enum(["low", "medium", "high", "critical"])
      .optional(),
    description: z.coerce.string().optional(),
    full_description: z.coerce.string().optional(),
    tags: z.array(z.coerce.string()).optional(),
    help: z.coerce.string().optional(),
    help_uri: z.coerce.string().optional(),
  }),
  tool: z.object({
    name: z.coerce.string().optional(),
    version: z.coerce.string().optional(),
    guid: z.coerce.string().optional(),
  }),
  most_recent_instance: z.object({
    ref: z.coerce.string().optional(),
    analysis_key: z.coerce.string().optional(),
    environment: z.coerce.string().optional(),
    category: z.coerce.string().optional(),
    state: z.enum(["open", "closed", "dismissed", "fixed"]).optional(),
    commit_sha: z.coerce.string().optional(),
    message: z.object({ text: z.coerce.string().optional() }).optional(),
    location: z
      .object({
        path: z.coerce.string().optional(),
        start_line: z.coerce.number().optional(),
        end_line: z.coerce.number().optional(),
        start_column: z.coerce.number().optional(),
        end_column: z.coerce.number().optional(),
      })
      .optional(),
    html_url: z.coerce.string().optional(),
    classifications: z
      .array(z.enum(["source", "generated", "test", "library"]))
      .optional(),
  }),
})

export const s_code_scanning_analysis_deletion = z.object({
  next_analysis_url: z.coerce.string(),
  confirm_delete_url: z.coerce.string(),
})

export const s_code_scanning_codeql_database = z.object({
  id: z.coerce.number(),
  name: z.coerce.string(),
  language: z.coerce.string(),
  uploader: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  content_type: z.coerce.string(),
  size: z.coerce.number(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  url: z.coerce.string(),
})

export const s_code_scanning_sarifs_receipt = z.object({
  id: z.coerce.string().optional(),
  url: z.coerce.string().optional(),
})

export const s_code_scanning_sarifs_status = z.object({
  processing_status: z.enum(["pending", "complete", "failed"]).optional(),
  analyses_url: z.coerce.string().optional(),
  errors: z.array(z.coerce.string()).optional(),
})

export const s_codeowners_errors = z.object({
  errors: z.array(
    z.object({
      line: z.coerce.number(),
      column: z.coerce.number(),
      source: z.coerce.string().optional(),
      kind: z.coerce.string(),
      suggestion: z.coerce.string().optional(),
      message: z.coerce.string(),
      path: z.coerce.string(),
    })
  ),
})

export const s_codespace = z.object({
  id: z.coerce.number(),
  name: z.coerce.string(),
  display_name: z.coerce.string().optional(),
  environment_id: z.coerce.string(),
  owner: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  billable_owner: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  repository: z.object({
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    name: z.coerce.string(),
    full_name: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    private: z.coerce.boolean(),
    html_url: z.coerce.string(),
    description: z.coerce.string(),
    fork: z.coerce.boolean(),
    url: z.coerce.string(),
    archive_url: z.coerce.string(),
    assignees_url: z.coerce.string(),
    blobs_url: z.coerce.string(),
    branches_url: z.coerce.string(),
    collaborators_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commits_url: z.coerce.string(),
    compare_url: z.coerce.string(),
    contents_url: z.coerce.string(),
    contributors_url: z.coerce.string(),
    deployments_url: z.coerce.string(),
    downloads_url: z.coerce.string(),
    events_url: z.coerce.string(),
    forks_url: z.coerce.string(),
    git_commits_url: z.coerce.string(),
    git_refs_url: z.coerce.string(),
    git_tags_url: z.coerce.string(),
    git_url: z.coerce.string().optional(),
    issue_comment_url: z.coerce.string(),
    issue_events_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    keys_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    languages_url: z.coerce.string(),
    merges_url: z.coerce.string(),
    milestones_url: z.coerce.string(),
    notifications_url: z.coerce.string(),
    pulls_url: z.coerce.string(),
    releases_url: z.coerce.string(),
    ssh_url: z.coerce.string().optional(),
    stargazers_url: z.coerce.string(),
    statuses_url: z.coerce.string(),
    subscribers_url: z.coerce.string(),
    subscription_url: z.coerce.string(),
    tags_url: z.coerce.string(),
    teams_url: z.coerce.string(),
    trees_url: z.coerce.string(),
    clone_url: z.coerce.string().optional(),
    mirror_url: z.coerce.string().optional(),
    hooks_url: z.coerce.string(),
    svn_url: z.coerce.string().optional(),
    homepage: z.coerce.string().optional(),
    language: z.coerce.string().optional(),
    forks_count: z.coerce.number().optional(),
    stargazers_count: z.coerce.number().optional(),
    watchers_count: z.coerce.number().optional(),
    size: z.coerce.number().optional(),
    default_branch: z.coerce.string().optional(),
    open_issues_count: z.coerce.number().optional(),
    is_template: z.coerce.boolean().optional(),
    topics: z.array(z.coerce.string()).optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_pages: z.coerce.boolean().optional(),
    has_downloads: z.coerce.boolean().optional(),
    has_discussions: z.coerce.boolean().optional(),
    archived: z.coerce.boolean().optional(),
    disabled: z.coerce.boolean().optional(),
    visibility: z.coerce.string().optional(),
    pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
    created_at: z.coerce.string().datetime({ offset: true }).optional(),
    updated_at: z.coerce.string().datetime({ offset: true }).optional(),
    permissions: z
      .object({
        admin: z.coerce.boolean().optional(),
        maintain: z.coerce.boolean().optional(),
        push: z.coerce.boolean().optional(),
        triage: z.coerce.boolean().optional(),
        pull: z.coerce.boolean().optional(),
      })
      .optional(),
    role_name: z.coerce.string().optional(),
    temp_clone_token: z.coerce.string().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    subscribers_count: z.coerce.number().optional(),
    network_count: z.coerce.number().optional(),
    code_of_conduct: z
      .object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        body: z.coerce.string().optional(),
        html_url: z.coerce.string(),
      })
      .optional(),
    license: z
      .object({
        key: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        spdx_id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        node_id: z.coerce.string().optional(),
      })
      .optional(),
    forks: z.coerce.number().optional(),
    open_issues: z.coerce.number().optional(),
    watchers: z.coerce.number().optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
      })
      .optional(),
  }),
  machine: z.object({
    name: z.coerce.string(),
    display_name: z.coerce.string(),
    operating_system: z.coerce.string(),
    storage_in_bytes: z.coerce.number(),
    memory_in_bytes: z.coerce.number(),
    cpus: z.coerce.number(),
    prebuild_availability: z.enum(["none", "ready", "in_progress"]),
  }),
  devcontainer_path: z.coerce.string().optional(),
  prebuild: z.coerce.boolean(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  last_used_at: z.coerce.string().datetime({ offset: true }),
  state: z.enum([
    "Unknown",
    "Created",
    "Queued",
    "Provisioning",
    "Available",
    "Awaiting",
    "Unavailable",
    "Deleted",
    "Moved",
    "Shutdown",
    "Archived",
    "Starting",
    "ShuttingDown",
    "Failed",
    "Exporting",
    "Updating",
    "Rebuilding",
  ]),
  url: z.coerce.string(),
  git_status: z.object({
    ahead: z.coerce.number().optional(),
    behind: z.coerce.number().optional(),
    has_unpushed_changes: z.coerce.boolean().optional(),
    has_uncommitted_changes: z.coerce.boolean().optional(),
    ref: z.coerce.string().optional(),
  }),
  location: z.enum(["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"]),
  idle_timeout_minutes: z.coerce.number(),
  web_url: z.coerce.string(),
  machines_url: z.coerce.string(),
  start_url: z.coerce.string(),
  stop_url: z.coerce.string(),
  publish_url: z.coerce.string().optional(),
  pulls_url: z.coerce.string(),
  recent_folders: z.array(z.coerce.string()),
  runtime_constraints: z
    .object({
      allowed_port_privacy_settings: z.array(z.coerce.string()).optional(),
    })
    .optional(),
  pending_operation: z.coerce.boolean().optional(),
  pending_operation_disabled_reason: z.coerce.string().optional(),
  idle_timeout_notice: z.coerce.string().optional(),
  retention_period_minutes: z.coerce.number().optional(),
  retention_expires_at: z.coerce.string().datetime({ offset: true }).optional(),
  last_known_stop_notice: z.coerce.string().optional(),
})

export const s_codespace_export_details = z.object({
  state: z.coerce.string().optional(),
  completed_at: z.coerce.string().datetime({ offset: true }).optional(),
  branch: z.coerce.string().optional(),
  sha: z.coerce.string().optional(),
  id: z.coerce.string().optional(),
  export_url: z.coerce.string().optional(),
  html_url: z.coerce.string().optional(),
})

export const s_codespace_with_full_repository = z.object({
  id: z.coerce.number(),
  name: z.coerce.string(),
  display_name: z.coerce.string().optional(),
  environment_id: z.coerce.string(),
  owner: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  billable_owner: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  repository: z.object({
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    name: z.coerce.string(),
    full_name: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    private: z.coerce.boolean(),
    html_url: z.coerce.string(),
    description: z.coerce.string(),
    fork: z.coerce.boolean(),
    url: z.coerce.string(),
    archive_url: z.coerce.string(),
    assignees_url: z.coerce.string(),
    blobs_url: z.coerce.string(),
    branches_url: z.coerce.string(),
    collaborators_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commits_url: z.coerce.string(),
    compare_url: z.coerce.string(),
    contents_url: z.coerce.string(),
    contributors_url: z.coerce.string(),
    deployments_url: z.coerce.string(),
    downloads_url: z.coerce.string(),
    events_url: z.coerce.string(),
    forks_url: z.coerce.string(),
    git_commits_url: z.coerce.string(),
    git_refs_url: z.coerce.string(),
    git_tags_url: z.coerce.string(),
    git_url: z.coerce.string(),
    issue_comment_url: z.coerce.string(),
    issue_events_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    keys_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    languages_url: z.coerce.string(),
    merges_url: z.coerce.string(),
    milestones_url: z.coerce.string(),
    notifications_url: z.coerce.string(),
    pulls_url: z.coerce.string(),
    releases_url: z.coerce.string(),
    ssh_url: z.coerce.string(),
    stargazers_url: z.coerce.string(),
    statuses_url: z.coerce.string(),
    subscribers_url: z.coerce.string(),
    subscription_url: z.coerce.string(),
    tags_url: z.coerce.string(),
    teams_url: z.coerce.string(),
    trees_url: z.coerce.string(),
    clone_url: z.coerce.string(),
    mirror_url: z.coerce.string(),
    hooks_url: z.coerce.string(),
    svn_url: z.coerce.string(),
    homepage: z.coerce.string(),
    language: z.coerce.string(),
    forks_count: z.coerce.number(),
    stargazers_count: z.coerce.number(),
    watchers_count: z.coerce.number(),
    size: z.coerce.number(),
    default_branch: z.coerce.string(),
    open_issues_count: z.coerce.number(),
    is_template: z.coerce.boolean().optional(),
    topics: z.array(z.coerce.string()).optional(),
    has_issues: z.coerce.boolean(),
    has_projects: z.coerce.boolean(),
    has_wiki: z.coerce.boolean(),
    has_pages: z.coerce.boolean(),
    has_downloads: z.coerce.boolean(),
    has_discussions: z.coerce.boolean(),
    archived: z.coerce.boolean(),
    disabled: z.coerce.boolean(),
    visibility: z.coerce.string().optional(),
    pushed_at: z.coerce.string().datetime({ offset: true }),
    created_at: z.coerce.string().datetime({ offset: true }),
    updated_at: z.coerce.string().datetime({ offset: true }),
    permissions: z
      .object({
        admin: z.coerce.boolean(),
        maintain: z.coerce.boolean().optional(),
        push: z.coerce.boolean(),
        triage: z.coerce.boolean().optional(),
        pull: z.coerce.boolean(),
      })
      .optional(),
    allow_rebase_merge: z.coerce.boolean().optional(),
    template_repository: z
      .object({
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        name: z.coerce.string(),
        full_name: z.coerce.string(),
        license: z.object({
          key: z.coerce.string(),
          name: z.coerce.string(),
          url: z.coerce.string(),
          spdx_id: z.coerce.string(),
          node_id: z.coerce.string(),
          html_url: z.coerce.string().optional(),
        }),
        organization: z
          .object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          })
          .optional(),
        forks: z.coerce.number(),
        permissions: z
          .object({
            admin: z.coerce.boolean(),
            pull: z.coerce.boolean(),
            triage: z.coerce.boolean().optional(),
            push: z.coerce.boolean(),
            maintain: z.coerce.boolean().optional(),
          })
          .optional(),
        owner: z.object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        }),
        private: z.coerce.boolean(),
        html_url: z.coerce.string(),
        description: z.coerce.string(),
        fork: z.coerce.boolean(),
        url: z.coerce.string(),
        archive_url: z.coerce.string(),
        assignees_url: z.coerce.string(),
        blobs_url: z.coerce.string(),
        branches_url: z.coerce.string(),
        collaborators_url: z.coerce.string(),
        comments_url: z.coerce.string(),
        commits_url: z.coerce.string(),
        compare_url: z.coerce.string(),
        contents_url: z.coerce.string(),
        contributors_url: z.coerce.string(),
        deployments_url: z.coerce.string(),
        downloads_url: z.coerce.string(),
        events_url: z.coerce.string(),
        forks_url: z.coerce.string(),
        git_commits_url: z.coerce.string(),
        git_refs_url: z.coerce.string(),
        git_tags_url: z.coerce.string(),
        git_url: z.coerce.string(),
        issue_comment_url: z.coerce.string(),
        issue_events_url: z.coerce.string(),
        issues_url: z.coerce.string(),
        keys_url: z.coerce.string(),
        labels_url: z.coerce.string(),
        languages_url: z.coerce.string(),
        merges_url: z.coerce.string(),
        milestones_url: z.coerce.string(),
        notifications_url: z.coerce.string(),
        pulls_url: z.coerce.string(),
        releases_url: z.coerce.string(),
        ssh_url: z.coerce.string(),
        stargazers_url: z.coerce.string(),
        statuses_url: z.coerce.string(),
        subscribers_url: z.coerce.string(),
        subscription_url: z.coerce.string(),
        tags_url: z.coerce.string(),
        teams_url: z.coerce.string(),
        trees_url: z.coerce.string(),
        clone_url: z.coerce.string(),
        mirror_url: z.coerce.string(),
        hooks_url: z.coerce.string(),
        svn_url: z.coerce.string(),
        homepage: z.coerce.string(),
        language: z.coerce.string(),
        forks_count: z.coerce.number(),
        stargazers_count: z.coerce.number(),
        watchers_count: z.coerce.number(),
        size: z.coerce.number(),
        default_branch: z.coerce.string(),
        open_issues_count: z.coerce.number(),
        is_template: z.coerce.boolean().optional(),
        topics: z.array(z.coerce.string()).optional(),
        has_issues: z.coerce.boolean(),
        has_projects: z.coerce.boolean(),
        has_wiki: z.coerce.boolean(),
        has_pages: z.coerce.boolean(),
        has_downloads: z.coerce.boolean(),
        has_discussions: z.coerce.boolean().optional(),
        archived: z.coerce.boolean(),
        disabled: z.coerce.boolean(),
        visibility: z.coerce.string().optional(),
        pushed_at: z.coerce.string().datetime({ offset: true }),
        created_at: z.coerce.string().datetime({ offset: true }),
        updated_at: z.coerce.string().datetime({ offset: true }),
        allow_rebase_merge: z.coerce.boolean().optional(),
        template_repository: z
          .object({
            id: z.coerce.number().optional(),
            node_id: z.coerce.string().optional(),
            name: z.coerce.string().optional(),
            full_name: z.coerce.string().optional(),
            owner: z
              .object({
                login: z.coerce.string().optional(),
                id: z.coerce.number().optional(),
                node_id: z.coerce.string().optional(),
                avatar_url: z.coerce.string().optional(),
                gravatar_id: z.coerce.string().optional(),
                url: z.coerce.string().optional(),
                html_url: z.coerce.string().optional(),
                followers_url: z.coerce.string().optional(),
                following_url: z.coerce.string().optional(),
                gists_url: z.coerce.string().optional(),
                starred_url: z.coerce.string().optional(),
                subscriptions_url: z.coerce.string().optional(),
                organizations_url: z.coerce.string().optional(),
                repos_url: z.coerce.string().optional(),
                events_url: z.coerce.string().optional(),
                received_events_url: z.coerce.string().optional(),
                type: z.coerce.string().optional(),
                site_admin: z.coerce.boolean().optional(),
              })
              .optional(),
            private: z.coerce.boolean().optional(),
            html_url: z.coerce.string().optional(),
            description: z.coerce.string().optional(),
            fork: z.coerce.boolean().optional(),
            url: z.coerce.string().optional(),
            archive_url: z.coerce.string().optional(),
            assignees_url: z.coerce.string().optional(),
            blobs_url: z.coerce.string().optional(),
            branches_url: z.coerce.string().optional(),
            collaborators_url: z.coerce.string().optional(),
            comments_url: z.coerce.string().optional(),
            commits_url: z.coerce.string().optional(),
            compare_url: z.coerce.string().optional(),
            contents_url: z.coerce.string().optional(),
            contributors_url: z.coerce.string().optional(),
            deployments_url: z.coerce.string().optional(),
            downloads_url: z.coerce.string().optional(),
            events_url: z.coerce.string().optional(),
            forks_url: z.coerce.string().optional(),
            git_commits_url: z.coerce.string().optional(),
            git_refs_url: z.coerce.string().optional(),
            git_tags_url: z.coerce.string().optional(),
            git_url: z.coerce.string().optional(),
            issue_comment_url: z.coerce.string().optional(),
            issue_events_url: z.coerce.string().optional(),
            issues_url: z.coerce.string().optional(),
            keys_url: z.coerce.string().optional(),
            labels_url: z.coerce.string().optional(),
            languages_url: z.coerce.string().optional(),
            merges_url: z.coerce.string().optional(),
            milestones_url: z.coerce.string().optional(),
            notifications_url: z.coerce.string().optional(),
            pulls_url: z.coerce.string().optional(),
            releases_url: z.coerce.string().optional(),
            ssh_url: z.coerce.string().optional(),
            stargazers_url: z.coerce.string().optional(),
            statuses_url: z.coerce.string().optional(),
            subscribers_url: z.coerce.string().optional(),
            subscription_url: z.coerce.string().optional(),
            tags_url: z.coerce.string().optional(),
            teams_url: z.coerce.string().optional(),
            trees_url: z.coerce.string().optional(),
            clone_url: z.coerce.string().optional(),
            mirror_url: z.coerce.string().optional(),
            hooks_url: z.coerce.string().optional(),
            svn_url: z.coerce.string().optional(),
            homepage: z.coerce.string().optional(),
            language: z.coerce.string().optional(),
            forks_count: z.coerce.number().optional(),
            stargazers_count: z.coerce.number().optional(),
            watchers_count: z.coerce.number().optional(),
            size: z.coerce.number().optional(),
            default_branch: z.coerce.string().optional(),
            open_issues_count: z.coerce.number().optional(),
            is_template: z.coerce.boolean().optional(),
            topics: z.array(z.coerce.string()).optional(),
            has_issues: z.coerce.boolean().optional(),
            has_projects: z.coerce.boolean().optional(),
            has_wiki: z.coerce.boolean().optional(),
            has_pages: z.coerce.boolean().optional(),
            has_downloads: z.coerce.boolean().optional(),
            archived: z.coerce.boolean().optional(),
            disabled: z.coerce.boolean().optional(),
            visibility: z.coerce.string().optional(),
            pushed_at: z.coerce.string().optional(),
            created_at: z.coerce.string().optional(),
            updated_at: z.coerce.string().optional(),
            permissions: z
              .object({
                admin: z.coerce.boolean().optional(),
                maintain: z.coerce.boolean().optional(),
                push: z.coerce.boolean().optional(),
                triage: z.coerce.boolean().optional(),
                pull: z.coerce.boolean().optional(),
              })
              .optional(),
            allow_rebase_merge: z.coerce.boolean().optional(),
            temp_clone_token: z.coerce.string().optional(),
            allow_squash_merge: z.coerce.boolean().optional(),
            allow_auto_merge: z.coerce.boolean().optional(),
            delete_branch_on_merge: z.coerce.boolean().optional(),
            allow_update_branch: z.coerce.boolean().optional(),
            use_squash_pr_title_as_default: z.coerce.boolean().optional(),
            squash_merge_commit_title: z
              .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
              .optional(),
            squash_merge_commit_message: z
              .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
              .optional(),
            merge_commit_title: z
              .enum(["PR_TITLE", "MERGE_MESSAGE"])
              .optional(),
            merge_commit_message: z
              .enum(["PR_BODY", "PR_TITLE", "BLANK"])
              .optional(),
            allow_merge_commit: z.coerce.boolean().optional(),
            subscribers_count: z.coerce.number().optional(),
            network_count: z.coerce.number().optional(),
          })
          .optional(),
        temp_clone_token: z.coerce.string().optional(),
        allow_squash_merge: z.coerce.boolean().optional(),
        allow_auto_merge: z.coerce.boolean().optional(),
        delete_branch_on_merge: z.coerce.boolean().optional(),
        allow_update_branch: z.coerce.boolean().optional(),
        use_squash_pr_title_as_default: z.coerce.boolean().optional(),
        squash_merge_commit_title: z
          .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
          .optional(),
        squash_merge_commit_message: z
          .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
          .optional(),
        merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
        merge_commit_message: z
          .enum(["PR_BODY", "PR_TITLE", "BLANK"])
          .optional(),
        allow_merge_commit: z.coerce.boolean().optional(),
        allow_forking: z.coerce.boolean().optional(),
        web_commit_signoff_required: z.coerce.boolean().optional(),
        subscribers_count: z.coerce.number().optional(),
        network_count: z.coerce.number().optional(),
        open_issues: z.coerce.number(),
        watchers: z.coerce.number(),
        master_branch: z.coerce.string().optional(),
        starred_at: z.coerce.string().optional(),
        anonymous_access_enabled: z.coerce.boolean().optional(),
      })
      .optional(),
    temp_clone_token: z.coerce.string().optional(),
    allow_squash_merge: z.coerce.boolean().optional(),
    allow_auto_merge: z.coerce.boolean().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    allow_merge_commit: z.coerce.boolean().optional(),
    allow_update_branch: z.coerce.boolean().optional(),
    use_squash_pr_title_as_default: z.coerce.boolean().optional(),
    squash_merge_commit_title: z
      .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
      .optional(),
    squash_merge_commit_message: z
      .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
      .optional(),
    merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
    merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    subscribers_count: z.coerce.number(),
    network_count: z.coerce.number(),
    license: z.object({
      key: z.coerce.string(),
      name: z.coerce.string(),
      url: z.coerce.string(),
      spdx_id: z.coerce.string(),
      node_id: z.coerce.string(),
      html_url: z.coerce.string().optional(),
    }),
    organization: z
      .object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      })
      .optional(),
    parent: z
      .object({
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        name: z.coerce.string(),
        full_name: z.coerce.string(),
        license: z.object({
          key: z.coerce.string(),
          name: z.coerce.string(),
          url: z.coerce.string(),
          spdx_id: z.coerce.string(),
          node_id: z.coerce.string(),
          html_url: z.coerce.string().optional(),
        }),
        organization: z
          .object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          })
          .optional(),
        forks: z.coerce.number(),
        permissions: z
          .object({
            admin: z.coerce.boolean(),
            pull: z.coerce.boolean(),
            triage: z.coerce.boolean().optional(),
            push: z.coerce.boolean(),
            maintain: z.coerce.boolean().optional(),
          })
          .optional(),
        owner: z.object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        }),
        private: z.coerce.boolean(),
        html_url: z.coerce.string(),
        description: z.coerce.string(),
        fork: z.coerce.boolean(),
        url: z.coerce.string(),
        archive_url: z.coerce.string(),
        assignees_url: z.coerce.string(),
        blobs_url: z.coerce.string(),
        branches_url: z.coerce.string(),
        collaborators_url: z.coerce.string(),
        comments_url: z.coerce.string(),
        commits_url: z.coerce.string(),
        compare_url: z.coerce.string(),
        contents_url: z.coerce.string(),
        contributors_url: z.coerce.string(),
        deployments_url: z.coerce.string(),
        downloads_url: z.coerce.string(),
        events_url: z.coerce.string(),
        forks_url: z.coerce.string(),
        git_commits_url: z.coerce.string(),
        git_refs_url: z.coerce.string(),
        git_tags_url: z.coerce.string(),
        git_url: z.coerce.string(),
        issue_comment_url: z.coerce.string(),
        issue_events_url: z.coerce.string(),
        issues_url: z.coerce.string(),
        keys_url: z.coerce.string(),
        labels_url: z.coerce.string(),
        languages_url: z.coerce.string(),
        merges_url: z.coerce.string(),
        milestones_url: z.coerce.string(),
        notifications_url: z.coerce.string(),
        pulls_url: z.coerce.string(),
        releases_url: z.coerce.string(),
        ssh_url: z.coerce.string(),
        stargazers_url: z.coerce.string(),
        statuses_url: z.coerce.string(),
        subscribers_url: z.coerce.string(),
        subscription_url: z.coerce.string(),
        tags_url: z.coerce.string(),
        teams_url: z.coerce.string(),
        trees_url: z.coerce.string(),
        clone_url: z.coerce.string(),
        mirror_url: z.coerce.string(),
        hooks_url: z.coerce.string(),
        svn_url: z.coerce.string(),
        homepage: z.coerce.string(),
        language: z.coerce.string(),
        forks_count: z.coerce.number(),
        stargazers_count: z.coerce.number(),
        watchers_count: z.coerce.number(),
        size: z.coerce.number(),
        default_branch: z.coerce.string(),
        open_issues_count: z.coerce.number(),
        is_template: z.coerce.boolean().optional(),
        topics: z.array(z.coerce.string()).optional(),
        has_issues: z.coerce.boolean(),
        has_projects: z.coerce.boolean(),
        has_wiki: z.coerce.boolean(),
        has_pages: z.coerce.boolean(),
        has_downloads: z.coerce.boolean(),
        has_discussions: z.coerce.boolean().optional(),
        archived: z.coerce.boolean(),
        disabled: z.coerce.boolean(),
        visibility: z.coerce.string().optional(),
        pushed_at: z.coerce.string().datetime({ offset: true }),
        created_at: z.coerce.string().datetime({ offset: true }),
        updated_at: z.coerce.string().datetime({ offset: true }),
        allow_rebase_merge: z.coerce.boolean().optional(),
        template_repository: z
          .object({
            id: z.coerce.number().optional(),
            node_id: z.coerce.string().optional(),
            name: z.coerce.string().optional(),
            full_name: z.coerce.string().optional(),
            owner: z
              .object({
                login: z.coerce.string().optional(),
                id: z.coerce.number().optional(),
                node_id: z.coerce.string().optional(),
                avatar_url: z.coerce.string().optional(),
                gravatar_id: z.coerce.string().optional(),
                url: z.coerce.string().optional(),
                html_url: z.coerce.string().optional(),
                followers_url: z.coerce.string().optional(),
                following_url: z.coerce.string().optional(),
                gists_url: z.coerce.string().optional(),
                starred_url: z.coerce.string().optional(),
                subscriptions_url: z.coerce.string().optional(),
                organizations_url: z.coerce.string().optional(),
                repos_url: z.coerce.string().optional(),
                events_url: z.coerce.string().optional(),
                received_events_url: z.coerce.string().optional(),
                type: z.coerce.string().optional(),
                site_admin: z.coerce.boolean().optional(),
              })
              .optional(),
            private: z.coerce.boolean().optional(),
            html_url: z.coerce.string().optional(),
            description: z.coerce.string().optional(),
            fork: z.coerce.boolean().optional(),
            url: z.coerce.string().optional(),
            archive_url: z.coerce.string().optional(),
            assignees_url: z.coerce.string().optional(),
            blobs_url: z.coerce.string().optional(),
            branches_url: z.coerce.string().optional(),
            collaborators_url: z.coerce.string().optional(),
            comments_url: z.coerce.string().optional(),
            commits_url: z.coerce.string().optional(),
            compare_url: z.coerce.string().optional(),
            contents_url: z.coerce.string().optional(),
            contributors_url: z.coerce.string().optional(),
            deployments_url: z.coerce.string().optional(),
            downloads_url: z.coerce.string().optional(),
            events_url: z.coerce.string().optional(),
            forks_url: z.coerce.string().optional(),
            git_commits_url: z.coerce.string().optional(),
            git_refs_url: z.coerce.string().optional(),
            git_tags_url: z.coerce.string().optional(),
            git_url: z.coerce.string().optional(),
            issue_comment_url: z.coerce.string().optional(),
            issue_events_url: z.coerce.string().optional(),
            issues_url: z.coerce.string().optional(),
            keys_url: z.coerce.string().optional(),
            labels_url: z.coerce.string().optional(),
            languages_url: z.coerce.string().optional(),
            merges_url: z.coerce.string().optional(),
            milestones_url: z.coerce.string().optional(),
            notifications_url: z.coerce.string().optional(),
            pulls_url: z.coerce.string().optional(),
            releases_url: z.coerce.string().optional(),
            ssh_url: z.coerce.string().optional(),
            stargazers_url: z.coerce.string().optional(),
            statuses_url: z.coerce.string().optional(),
            subscribers_url: z.coerce.string().optional(),
            subscription_url: z.coerce.string().optional(),
            tags_url: z.coerce.string().optional(),
            teams_url: z.coerce.string().optional(),
            trees_url: z.coerce.string().optional(),
            clone_url: z.coerce.string().optional(),
            mirror_url: z.coerce.string().optional(),
            hooks_url: z.coerce.string().optional(),
            svn_url: z.coerce.string().optional(),
            homepage: z.coerce.string().optional(),
            language: z.coerce.string().optional(),
            forks_count: z.coerce.number().optional(),
            stargazers_count: z.coerce.number().optional(),
            watchers_count: z.coerce.number().optional(),
            size: z.coerce.number().optional(),
            default_branch: z.coerce.string().optional(),
            open_issues_count: z.coerce.number().optional(),
            is_template: z.coerce.boolean().optional(),
            topics: z.array(z.coerce.string()).optional(),
            has_issues: z.coerce.boolean().optional(),
            has_projects: z.coerce.boolean().optional(),
            has_wiki: z.coerce.boolean().optional(),
            has_pages: z.coerce.boolean().optional(),
            has_downloads: z.coerce.boolean().optional(),
            archived: z.coerce.boolean().optional(),
            disabled: z.coerce.boolean().optional(),
            visibility: z.coerce.string().optional(),
            pushed_at: z.coerce.string().optional(),
            created_at: z.coerce.string().optional(),
            updated_at: z.coerce.string().optional(),
            permissions: z
              .object({
                admin: z.coerce.boolean().optional(),
                maintain: z.coerce.boolean().optional(),
                push: z.coerce.boolean().optional(),
                triage: z.coerce.boolean().optional(),
                pull: z.coerce.boolean().optional(),
              })
              .optional(),
            allow_rebase_merge: z.coerce.boolean().optional(),
            temp_clone_token: z.coerce.string().optional(),
            allow_squash_merge: z.coerce.boolean().optional(),
            allow_auto_merge: z.coerce.boolean().optional(),
            delete_branch_on_merge: z.coerce.boolean().optional(),
            allow_update_branch: z.coerce.boolean().optional(),
            use_squash_pr_title_as_default: z.coerce.boolean().optional(),
            squash_merge_commit_title: z
              .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
              .optional(),
            squash_merge_commit_message: z
              .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
              .optional(),
            merge_commit_title: z
              .enum(["PR_TITLE", "MERGE_MESSAGE"])
              .optional(),
            merge_commit_message: z
              .enum(["PR_BODY", "PR_TITLE", "BLANK"])
              .optional(),
            allow_merge_commit: z.coerce.boolean().optional(),
            subscribers_count: z.coerce.number().optional(),
            network_count: z.coerce.number().optional(),
          })
          .optional(),
        temp_clone_token: z.coerce.string().optional(),
        allow_squash_merge: z.coerce.boolean().optional(),
        allow_auto_merge: z.coerce.boolean().optional(),
        delete_branch_on_merge: z.coerce.boolean().optional(),
        allow_update_branch: z.coerce.boolean().optional(),
        use_squash_pr_title_as_default: z.coerce.boolean().optional(),
        squash_merge_commit_title: z
          .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
          .optional(),
        squash_merge_commit_message: z
          .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
          .optional(),
        merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
        merge_commit_message: z
          .enum(["PR_BODY", "PR_TITLE", "BLANK"])
          .optional(),
        allow_merge_commit: z.coerce.boolean().optional(),
        allow_forking: z.coerce.boolean().optional(),
        web_commit_signoff_required: z.coerce.boolean().optional(),
        subscribers_count: z.coerce.number().optional(),
        network_count: z.coerce.number().optional(),
        open_issues: z.coerce.number(),
        watchers: z.coerce.number(),
        master_branch: z.coerce.string().optional(),
        starred_at: z.coerce.string().optional(),
        anonymous_access_enabled: z.coerce.boolean().optional(),
      })
      .optional(),
    source: z
      .object({
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        name: z.coerce.string(),
        full_name: z.coerce.string(),
        license: z.object({
          key: z.coerce.string(),
          name: z.coerce.string(),
          url: z.coerce.string(),
          spdx_id: z.coerce.string(),
          node_id: z.coerce.string(),
          html_url: z.coerce.string().optional(),
        }),
        organization: z
          .object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          })
          .optional(),
        forks: z.coerce.number(),
        permissions: z
          .object({
            admin: z.coerce.boolean(),
            pull: z.coerce.boolean(),
            triage: z.coerce.boolean().optional(),
            push: z.coerce.boolean(),
            maintain: z.coerce.boolean().optional(),
          })
          .optional(),
        owner: z.object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        }),
        private: z.coerce.boolean(),
        html_url: z.coerce.string(),
        description: z.coerce.string(),
        fork: z.coerce.boolean(),
        url: z.coerce.string(),
        archive_url: z.coerce.string(),
        assignees_url: z.coerce.string(),
        blobs_url: z.coerce.string(),
        branches_url: z.coerce.string(),
        collaborators_url: z.coerce.string(),
        comments_url: z.coerce.string(),
        commits_url: z.coerce.string(),
        compare_url: z.coerce.string(),
        contents_url: z.coerce.string(),
        contributors_url: z.coerce.string(),
        deployments_url: z.coerce.string(),
        downloads_url: z.coerce.string(),
        events_url: z.coerce.string(),
        forks_url: z.coerce.string(),
        git_commits_url: z.coerce.string(),
        git_refs_url: z.coerce.string(),
        git_tags_url: z.coerce.string(),
        git_url: z.coerce.string(),
        issue_comment_url: z.coerce.string(),
        issue_events_url: z.coerce.string(),
        issues_url: z.coerce.string(),
        keys_url: z.coerce.string(),
        labels_url: z.coerce.string(),
        languages_url: z.coerce.string(),
        merges_url: z.coerce.string(),
        milestones_url: z.coerce.string(),
        notifications_url: z.coerce.string(),
        pulls_url: z.coerce.string(),
        releases_url: z.coerce.string(),
        ssh_url: z.coerce.string(),
        stargazers_url: z.coerce.string(),
        statuses_url: z.coerce.string(),
        subscribers_url: z.coerce.string(),
        subscription_url: z.coerce.string(),
        tags_url: z.coerce.string(),
        teams_url: z.coerce.string(),
        trees_url: z.coerce.string(),
        clone_url: z.coerce.string(),
        mirror_url: z.coerce.string(),
        hooks_url: z.coerce.string(),
        svn_url: z.coerce.string(),
        homepage: z.coerce.string(),
        language: z.coerce.string(),
        forks_count: z.coerce.number(),
        stargazers_count: z.coerce.number(),
        watchers_count: z.coerce.number(),
        size: z.coerce.number(),
        default_branch: z.coerce.string(),
        open_issues_count: z.coerce.number(),
        is_template: z.coerce.boolean().optional(),
        topics: z.array(z.coerce.string()).optional(),
        has_issues: z.coerce.boolean(),
        has_projects: z.coerce.boolean(),
        has_wiki: z.coerce.boolean(),
        has_pages: z.coerce.boolean(),
        has_downloads: z.coerce.boolean(),
        has_discussions: z.coerce.boolean().optional(),
        archived: z.coerce.boolean(),
        disabled: z.coerce.boolean(),
        visibility: z.coerce.string().optional(),
        pushed_at: z.coerce.string().datetime({ offset: true }),
        created_at: z.coerce.string().datetime({ offset: true }),
        updated_at: z.coerce.string().datetime({ offset: true }),
        allow_rebase_merge: z.coerce.boolean().optional(),
        template_repository: z
          .object({
            id: z.coerce.number().optional(),
            node_id: z.coerce.string().optional(),
            name: z.coerce.string().optional(),
            full_name: z.coerce.string().optional(),
            owner: z
              .object({
                login: z.coerce.string().optional(),
                id: z.coerce.number().optional(),
                node_id: z.coerce.string().optional(),
                avatar_url: z.coerce.string().optional(),
                gravatar_id: z.coerce.string().optional(),
                url: z.coerce.string().optional(),
                html_url: z.coerce.string().optional(),
                followers_url: z.coerce.string().optional(),
                following_url: z.coerce.string().optional(),
                gists_url: z.coerce.string().optional(),
                starred_url: z.coerce.string().optional(),
                subscriptions_url: z.coerce.string().optional(),
                organizations_url: z.coerce.string().optional(),
                repos_url: z.coerce.string().optional(),
                events_url: z.coerce.string().optional(),
                received_events_url: z.coerce.string().optional(),
                type: z.coerce.string().optional(),
                site_admin: z.coerce.boolean().optional(),
              })
              .optional(),
            private: z.coerce.boolean().optional(),
            html_url: z.coerce.string().optional(),
            description: z.coerce.string().optional(),
            fork: z.coerce.boolean().optional(),
            url: z.coerce.string().optional(),
            archive_url: z.coerce.string().optional(),
            assignees_url: z.coerce.string().optional(),
            blobs_url: z.coerce.string().optional(),
            branches_url: z.coerce.string().optional(),
            collaborators_url: z.coerce.string().optional(),
            comments_url: z.coerce.string().optional(),
            commits_url: z.coerce.string().optional(),
            compare_url: z.coerce.string().optional(),
            contents_url: z.coerce.string().optional(),
            contributors_url: z.coerce.string().optional(),
            deployments_url: z.coerce.string().optional(),
            downloads_url: z.coerce.string().optional(),
            events_url: z.coerce.string().optional(),
            forks_url: z.coerce.string().optional(),
            git_commits_url: z.coerce.string().optional(),
            git_refs_url: z.coerce.string().optional(),
            git_tags_url: z.coerce.string().optional(),
            git_url: z.coerce.string().optional(),
            issue_comment_url: z.coerce.string().optional(),
            issue_events_url: z.coerce.string().optional(),
            issues_url: z.coerce.string().optional(),
            keys_url: z.coerce.string().optional(),
            labels_url: z.coerce.string().optional(),
            languages_url: z.coerce.string().optional(),
            merges_url: z.coerce.string().optional(),
            milestones_url: z.coerce.string().optional(),
            notifications_url: z.coerce.string().optional(),
            pulls_url: z.coerce.string().optional(),
            releases_url: z.coerce.string().optional(),
            ssh_url: z.coerce.string().optional(),
            stargazers_url: z.coerce.string().optional(),
            statuses_url: z.coerce.string().optional(),
            subscribers_url: z.coerce.string().optional(),
            subscription_url: z.coerce.string().optional(),
            tags_url: z.coerce.string().optional(),
            teams_url: z.coerce.string().optional(),
            trees_url: z.coerce.string().optional(),
            clone_url: z.coerce.string().optional(),
            mirror_url: z.coerce.string().optional(),
            hooks_url: z.coerce.string().optional(),
            svn_url: z.coerce.string().optional(),
            homepage: z.coerce.string().optional(),
            language: z.coerce.string().optional(),
            forks_count: z.coerce.number().optional(),
            stargazers_count: z.coerce.number().optional(),
            watchers_count: z.coerce.number().optional(),
            size: z.coerce.number().optional(),
            default_branch: z.coerce.string().optional(),
            open_issues_count: z.coerce.number().optional(),
            is_template: z.coerce.boolean().optional(),
            topics: z.array(z.coerce.string()).optional(),
            has_issues: z.coerce.boolean().optional(),
            has_projects: z.coerce.boolean().optional(),
            has_wiki: z.coerce.boolean().optional(),
            has_pages: z.coerce.boolean().optional(),
            has_downloads: z.coerce.boolean().optional(),
            archived: z.coerce.boolean().optional(),
            disabled: z.coerce.boolean().optional(),
            visibility: z.coerce.string().optional(),
            pushed_at: z.coerce.string().optional(),
            created_at: z.coerce.string().optional(),
            updated_at: z.coerce.string().optional(),
            permissions: z
              .object({
                admin: z.coerce.boolean().optional(),
                maintain: z.coerce.boolean().optional(),
                push: z.coerce.boolean().optional(),
                triage: z.coerce.boolean().optional(),
                pull: z.coerce.boolean().optional(),
              })
              .optional(),
            allow_rebase_merge: z.coerce.boolean().optional(),
            temp_clone_token: z.coerce.string().optional(),
            allow_squash_merge: z.coerce.boolean().optional(),
            allow_auto_merge: z.coerce.boolean().optional(),
            delete_branch_on_merge: z.coerce.boolean().optional(),
            allow_update_branch: z.coerce.boolean().optional(),
            use_squash_pr_title_as_default: z.coerce.boolean().optional(),
            squash_merge_commit_title: z
              .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
              .optional(),
            squash_merge_commit_message: z
              .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
              .optional(),
            merge_commit_title: z
              .enum(["PR_TITLE", "MERGE_MESSAGE"])
              .optional(),
            merge_commit_message: z
              .enum(["PR_BODY", "PR_TITLE", "BLANK"])
              .optional(),
            allow_merge_commit: z.coerce.boolean().optional(),
            subscribers_count: z.coerce.number().optional(),
            network_count: z.coerce.number().optional(),
          })
          .optional(),
        temp_clone_token: z.coerce.string().optional(),
        allow_squash_merge: z.coerce.boolean().optional(),
        allow_auto_merge: z.coerce.boolean().optional(),
        delete_branch_on_merge: z.coerce.boolean().optional(),
        allow_update_branch: z.coerce.boolean().optional(),
        use_squash_pr_title_as_default: z.coerce.boolean().optional(),
        squash_merge_commit_title: z
          .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
          .optional(),
        squash_merge_commit_message: z
          .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
          .optional(),
        merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
        merge_commit_message: z
          .enum(["PR_BODY", "PR_TITLE", "BLANK"])
          .optional(),
        allow_merge_commit: z.coerce.boolean().optional(),
        allow_forking: z.coerce.boolean().optional(),
        web_commit_signoff_required: z.coerce.boolean().optional(),
        subscribers_count: z.coerce.number().optional(),
        network_count: z.coerce.number().optional(),
        open_issues: z.coerce.number(),
        watchers: z.coerce.number(),
        master_branch: z.coerce.string().optional(),
        starred_at: z.coerce.string().optional(),
        anonymous_access_enabled: z.coerce.boolean().optional(),
      })
      .optional(),
    forks: z.coerce.number(),
    master_branch: z.coerce.string().optional(),
    open_issues: z.coerce.number(),
    watchers: z.coerce.number(),
    anonymous_access_enabled: z.coerce.boolean().optional(),
    code_of_conduct: z
      .object({
        url: z.coerce.string(),
        key: z.coerce.string(),
        name: z.coerce.string(),
        html_url: z.coerce.string(),
      })
      .optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
      })
      .optional(),
  }),
  machine: z.object({
    name: z.coerce.string(),
    display_name: z.coerce.string(),
    operating_system: z.coerce.string(),
    storage_in_bytes: z.coerce.number(),
    memory_in_bytes: z.coerce.number(),
    cpus: z.coerce.number(),
    prebuild_availability: z.enum(["none", "ready", "in_progress"]),
  }),
  devcontainer_path: z.coerce.string().optional(),
  prebuild: z.coerce.boolean(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  last_used_at: z.coerce.string().datetime({ offset: true }),
  state: z.enum([
    "Unknown",
    "Created",
    "Queued",
    "Provisioning",
    "Available",
    "Awaiting",
    "Unavailable",
    "Deleted",
    "Moved",
    "Shutdown",
    "Archived",
    "Starting",
    "ShuttingDown",
    "Failed",
    "Exporting",
    "Updating",
    "Rebuilding",
  ]),
  url: z.coerce.string(),
  git_status: z.object({
    ahead: z.coerce.number().optional(),
    behind: z.coerce.number().optional(),
    has_unpushed_changes: z.coerce.boolean().optional(),
    has_uncommitted_changes: z.coerce.boolean().optional(),
    ref: z.coerce.string().optional(),
  }),
  location: z.enum(["EastUs", "SouthEastAsia", "WestEurope", "WestUs2"]),
  idle_timeout_minutes: z.coerce.number(),
  web_url: z.coerce.string(),
  machines_url: z.coerce.string(),
  start_url: z.coerce.string(),
  stop_url: z.coerce.string(),
  publish_url: z.coerce.string().optional(),
  pulls_url: z.coerce.string(),
  recent_folders: z.array(z.coerce.string()),
  runtime_constraints: z
    .object({
      allowed_port_privacy_settings: z.array(z.coerce.string()).optional(),
    })
    .optional(),
  pending_operation: z.coerce.boolean().optional(),
  pending_operation_disabled_reason: z.coerce.string().optional(),
  idle_timeout_notice: z.coerce.string().optional(),
  retention_period_minutes: z.coerce.number().optional(),
  retention_expires_at: z.coerce.string().datetime({ offset: true }).optional(),
})

export const s_codespaces_org_secret = z.object({
  name: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  visibility: z.enum(["all", "private", "selected"]),
  selected_repositories_url: z.coerce.string().optional(),
})

export const s_codespaces_public_key = z.object({
  key_id: z.coerce.string(),
  key: z.coerce.string(),
  id: z.coerce.number().optional(),
  url: z.coerce.string().optional(),
  title: z.coerce.string().optional(),
  created_at: z.coerce.string().optional(),
})

export const s_codespaces_secret = z.object({
  name: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  visibility: z.enum(["all", "private", "selected"]),
  selected_repositories_url: z.coerce.string(),
})

export const s_codespaces_user_public_key = z.object({
  key_id: z.coerce.string(),
  key: z.coerce.string(),
})

export const s_combined_billing_usage = z.object({
  days_left_in_billing_cycle: z.coerce.number(),
  estimated_paid_storage_for_month: z.coerce.number(),
  estimated_storage_for_month: z.coerce.number(),
})

export const s_combined_commit_status = z.object({
  state: z.coerce.string(),
  statuses: z.array(
    z.object({
      description: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      state: z.coerce.string(),
      context: z.coerce.string(),
      target_url: z.coerce.string(),
      required: z.coerce.boolean().optional(),
      avatar_url: z.coerce.string(),
      url: z.coerce.string(),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
    })
  ),
  sha: z.coerce.string(),
  total_count: z.coerce.number(),
  repository: z.object({
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    name: z.coerce.string(),
    full_name: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    private: z.coerce.boolean(),
    html_url: z.coerce.string(),
    description: z.coerce.string(),
    fork: z.coerce.boolean(),
    url: z.coerce.string(),
    archive_url: z.coerce.string(),
    assignees_url: z.coerce.string(),
    blobs_url: z.coerce.string(),
    branches_url: z.coerce.string(),
    collaborators_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commits_url: z.coerce.string(),
    compare_url: z.coerce.string(),
    contents_url: z.coerce.string(),
    contributors_url: z.coerce.string(),
    deployments_url: z.coerce.string(),
    downloads_url: z.coerce.string(),
    events_url: z.coerce.string(),
    forks_url: z.coerce.string(),
    git_commits_url: z.coerce.string(),
    git_refs_url: z.coerce.string(),
    git_tags_url: z.coerce.string(),
    git_url: z.coerce.string().optional(),
    issue_comment_url: z.coerce.string(),
    issue_events_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    keys_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    languages_url: z.coerce.string(),
    merges_url: z.coerce.string(),
    milestones_url: z.coerce.string(),
    notifications_url: z.coerce.string(),
    pulls_url: z.coerce.string(),
    releases_url: z.coerce.string(),
    ssh_url: z.coerce.string().optional(),
    stargazers_url: z.coerce.string(),
    statuses_url: z.coerce.string(),
    subscribers_url: z.coerce.string(),
    subscription_url: z.coerce.string(),
    tags_url: z.coerce.string(),
    teams_url: z.coerce.string(),
    trees_url: z.coerce.string(),
    clone_url: z.coerce.string().optional(),
    mirror_url: z.coerce.string().optional(),
    hooks_url: z.coerce.string(),
    svn_url: z.coerce.string().optional(),
    homepage: z.coerce.string().optional(),
    language: z.coerce.string().optional(),
    forks_count: z.coerce.number().optional(),
    stargazers_count: z.coerce.number().optional(),
    watchers_count: z.coerce.number().optional(),
    size: z.coerce.number().optional(),
    default_branch: z.coerce.string().optional(),
    open_issues_count: z.coerce.number().optional(),
    is_template: z.coerce.boolean().optional(),
    topics: z.array(z.coerce.string()).optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_pages: z.coerce.boolean().optional(),
    has_downloads: z.coerce.boolean().optional(),
    has_discussions: z.coerce.boolean().optional(),
    archived: z.coerce.boolean().optional(),
    disabled: z.coerce.boolean().optional(),
    visibility: z.coerce.string().optional(),
    pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
    created_at: z.coerce.string().datetime({ offset: true }).optional(),
    updated_at: z.coerce.string().datetime({ offset: true }).optional(),
    permissions: z
      .object({
        admin: z.coerce.boolean().optional(),
        maintain: z.coerce.boolean().optional(),
        push: z.coerce.boolean().optional(),
        triage: z.coerce.boolean().optional(),
        pull: z.coerce.boolean().optional(),
      })
      .optional(),
    role_name: z.coerce.string().optional(),
    temp_clone_token: z.coerce.string().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    subscribers_count: z.coerce.number().optional(),
    network_count: z.coerce.number().optional(),
    code_of_conduct: z
      .object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        body: z.coerce.string().optional(),
        html_url: z.coerce.string(),
      })
      .optional(),
    license: z
      .object({
        key: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        spdx_id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        node_id: z.coerce.string().optional(),
      })
      .optional(),
    forks: z.coerce.number().optional(),
    open_issues: z.coerce.number().optional(),
    watchers: z.coerce.number().optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
      })
      .optional(),
  }),
  commit_url: z.coerce.string(),
  url: z.coerce.string(),
})

export const s_commit = z.object({
  url: z.coerce.string(),
  sha: z.coerce.string(),
  node_id: z.coerce.string(),
  html_url: z.coerce.string(),
  comments_url: z.coerce.string(),
  commit: z.object({
    url: z.coerce.string(),
    author: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      date: z.coerce.string().optional(),
    }),
    committer: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      date: z.coerce.string().optional(),
    }),
    message: z.coerce.string(),
    comment_count: z.coerce.number(),
    tree: z.object({ sha: z.coerce.string(), url: z.coerce.string() }),
    verification: z
      .object({
        verified: z.coerce.boolean(),
        reason: z.coerce.string(),
        payload: z.coerce.string(),
        signature: z.coerce.string(),
      })
      .optional(),
  }),
  author: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  committer: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  parents: z.array(
    z.object({
      sha: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string().optional(),
    })
  ),
  stats: z
    .object({
      additions: z.coerce.number().optional(),
      deletions: z.coerce.number().optional(),
      total: z.coerce.number().optional(),
    })
    .optional(),
  files: z
    .array(
      z.object({
        sha: z.coerce.string(),
        filename: z.coerce.string(),
        status: z.enum([
          "added",
          "removed",
          "modified",
          "renamed",
          "copied",
          "changed",
          "unchanged",
        ]),
        additions: z.coerce.number(),
        deletions: z.coerce.number(),
        changes: z.coerce.number(),
        blob_url: z.coerce.string(),
        raw_url: z.coerce.string(),
        contents_url: z.coerce.string(),
        patch: z.coerce.string().optional(),
        previous_filename: z.coerce.string().optional(),
      })
    )
    .optional(),
})

export const s_commit_comment = z.object({
  html_url: z.coerce.string(),
  url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  body: z.coerce.string(),
  path: z.coerce.string(),
  position: z.coerce.number(),
  line: z.coerce.number(),
  commit_id: z.coerce.string(),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  author_association: z.enum([
    "COLLABORATOR",
    "CONTRIBUTOR",
    "FIRST_TIMER",
    "FIRST_TIME_CONTRIBUTOR",
    "MANNEQUIN",
    "MEMBER",
    "NONE",
    "OWNER",
  ]),
  reactions: z
    .object({
      url: z.coerce.string(),
      total_count: z.coerce.number(),
      "+1": z.coerce.number(),
      "-1": z.coerce.number(),
      laugh: z.coerce.number(),
      confused: z.coerce.number(),
      heart: z.coerce.number(),
      hooray: z.coerce.number(),
      eyes: z.coerce.number(),
      rocket: z.coerce.number(),
    })
    .optional(),
})

export const s_commit_comparison = z.object({
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  permalink_url: z.coerce.string(),
  diff_url: z.coerce.string(),
  patch_url: z.coerce.string(),
  base_commit: z.object({
    url: z.coerce.string(),
    sha: z.coerce.string(),
    node_id: z.coerce.string(),
    html_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commit: z.object({
      url: z.coerce.string(),
      author: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        date: z.coerce.string().optional(),
      }),
      committer: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        date: z.coerce.string().optional(),
      }),
      message: z.coerce.string(),
      comment_count: z.coerce.number(),
      tree: z.object({ sha: z.coerce.string(), url: z.coerce.string() }),
      verification: z
        .object({
          verified: z.coerce.boolean(),
          reason: z.coerce.string(),
          payload: z.coerce.string(),
          signature: z.coerce.string(),
        })
        .optional(),
    }),
    author: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    committer: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    parents: z.array(
      z.object({
        sha: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      })
    ),
    stats: z
      .object({
        additions: z.coerce.number().optional(),
        deletions: z.coerce.number().optional(),
        total: z.coerce.number().optional(),
      })
      .optional(),
    files: z
      .array(
        z.object({
          sha: z.coerce.string(),
          filename: z.coerce.string(),
          status: z.enum([
            "added",
            "removed",
            "modified",
            "renamed",
            "copied",
            "changed",
            "unchanged",
          ]),
          additions: z.coerce.number(),
          deletions: z.coerce.number(),
          changes: z.coerce.number(),
          blob_url: z.coerce.string(),
          raw_url: z.coerce.string(),
          contents_url: z.coerce.string(),
          patch: z.coerce.string().optional(),
          previous_filename: z.coerce.string().optional(),
        })
      )
      .optional(),
  }),
  merge_base_commit: z.object({
    url: z.coerce.string(),
    sha: z.coerce.string(),
    node_id: z.coerce.string(),
    html_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commit: z.object({
      url: z.coerce.string(),
      author: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        date: z.coerce.string().optional(),
      }),
      committer: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        date: z.coerce.string().optional(),
      }),
      message: z.coerce.string(),
      comment_count: z.coerce.number(),
      tree: z.object({ sha: z.coerce.string(), url: z.coerce.string() }),
      verification: z
        .object({
          verified: z.coerce.boolean(),
          reason: z.coerce.string(),
          payload: z.coerce.string(),
          signature: z.coerce.string(),
        })
        .optional(),
    }),
    author: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    committer: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    parents: z.array(
      z.object({
        sha: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      })
    ),
    stats: z
      .object({
        additions: z.coerce.number().optional(),
        deletions: z.coerce.number().optional(),
        total: z.coerce.number().optional(),
      })
      .optional(),
    files: z
      .array(
        z.object({
          sha: z.coerce.string(),
          filename: z.coerce.string(),
          status: z.enum([
            "added",
            "removed",
            "modified",
            "renamed",
            "copied",
            "changed",
            "unchanged",
          ]),
          additions: z.coerce.number(),
          deletions: z.coerce.number(),
          changes: z.coerce.number(),
          blob_url: z.coerce.string(),
          raw_url: z.coerce.string(),
          contents_url: z.coerce.string(),
          patch: z.coerce.string().optional(),
          previous_filename: z.coerce.string().optional(),
        })
      )
      .optional(),
  }),
  status: z.enum(["diverged", "ahead", "behind", "identical"]),
  ahead_by: z.coerce.number(),
  behind_by: z.coerce.number(),
  total_commits: z.coerce.number(),
  commits: z.array(
    z.object({
      url: z.coerce.string(),
      sha: z.coerce.string(),
      node_id: z.coerce.string(),
      html_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commit: z.object({
        url: z.coerce.string(),
        author: z.object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          date: z.coerce.string().optional(),
        }),
        committer: z.object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          date: z.coerce.string().optional(),
        }),
        message: z.coerce.string(),
        comment_count: z.coerce.number(),
        tree: z.object({ sha: z.coerce.string(), url: z.coerce.string() }),
        verification: z
          .object({
            verified: z.coerce.boolean(),
            reason: z.coerce.string(),
            payload: z.coerce.string(),
            signature: z.coerce.string(),
          })
          .optional(),
      }),
      author: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      committer: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      parents: z.array(
        z.object({
          sha: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string().optional(),
        })
      ),
      stats: z
        .object({
          additions: z.coerce.number().optional(),
          deletions: z.coerce.number().optional(),
          total: z.coerce.number().optional(),
        })
        .optional(),
      files: z
        .array(
          z.object({
            sha: z.coerce.string(),
            filename: z.coerce.string(),
            status: z.enum([
              "added",
              "removed",
              "modified",
              "renamed",
              "copied",
              "changed",
              "unchanged",
            ]),
            additions: z.coerce.number(),
            deletions: z.coerce.number(),
            changes: z.coerce.number(),
            blob_url: z.coerce.string(),
            raw_url: z.coerce.string(),
            contents_url: z.coerce.string(),
            patch: z.coerce.string().optional(),
            previous_filename: z.coerce.string().optional(),
          })
        )
        .optional(),
    })
  ),
  files: z
    .array(
      z.object({
        sha: z.coerce.string(),
        filename: z.coerce.string(),
        status: z.enum([
          "added",
          "removed",
          "modified",
          "renamed",
          "copied",
          "changed",
          "unchanged",
        ]),
        additions: z.coerce.number(),
        deletions: z.coerce.number(),
        changes: z.coerce.number(),
        blob_url: z.coerce.string(),
        raw_url: z.coerce.string(),
        contents_url: z.coerce.string(),
        patch: z.coerce.string().optional(),
        previous_filename: z.coerce.string().optional(),
      })
    )
    .optional(),
})

export const s_community_profile = z.object({
  health_percentage: z.coerce.number(),
  description: z.coerce.string(),
  documentation: z.coerce.string(),
  files: z.object({
    code_of_conduct: z.object({
      url: z.coerce.string(),
      key: z.coerce.string(),
      name: z.coerce.string(),
      html_url: z.coerce.string(),
    }),
    code_of_conduct_file: z.object({
      url: z.coerce.string(),
      html_url: z.coerce.string(),
    }),
    license: z.object({
      key: z.coerce.string(),
      name: z.coerce.string(),
      url: z.coerce.string(),
      spdx_id: z.coerce.string(),
      node_id: z.coerce.string(),
      html_url: z.coerce.string().optional(),
    }),
    contributing: z.object({
      url: z.coerce.string(),
      html_url: z.coerce.string(),
    }),
    readme: z.object({ url: z.coerce.string(), html_url: z.coerce.string() }),
    issue_template: z.object({
      url: z.coerce.string(),
      html_url: z.coerce.string(),
    }),
    pull_request_template: z.object({
      url: z.coerce.string(),
      html_url: z.coerce.string(),
    }),
  }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  content_reports_enabled: z.coerce.boolean().optional(),
})

export const s_content_directory = z.array(
  z.object({
    type: z.enum(["dir", "file", "submodule", "symlink"]),
    size: z.coerce.number(),
    name: z.coerce.string(),
    path: z.coerce.string(),
    content: z.coerce.string().optional(),
    sha: z.coerce.string(),
    url: z.coerce.string(),
    git_url: z.coerce.string(),
    html_url: z.coerce.string(),
    download_url: z.coerce.string(),
    _links: z.object({
      git: z.coerce.string(),
      html: z.coerce.string(),
      self: z.coerce.string(),
    }),
  })
)

export const s_content_file = z.object({
  type: z.enum(["file"]),
  encoding: z.coerce.string(),
  size: z.coerce.number(),
  name: z.coerce.string(),
  path: z.coerce.string(),
  content: z.coerce.string(),
  sha: z.coerce.string(),
  url: z.coerce.string(),
  git_url: z.coerce.string(),
  html_url: z.coerce.string(),
  download_url: z.coerce.string(),
  _links: z.object({
    git: z.coerce.string(),
    html: z.coerce.string(),
    self: z.coerce.string(),
  }),
  target: z.coerce.string().optional(),
  submodule_git_url: z.coerce.string().optional(),
})

export const s_content_submodule = z.object({
  type: z.enum(["submodule"]),
  submodule_git_url: z.coerce.string(),
  size: z.coerce.number(),
  name: z.coerce.string(),
  path: z.coerce.string(),
  sha: z.coerce.string(),
  url: z.coerce.string(),
  git_url: z.coerce.string(),
  html_url: z.coerce.string(),
  download_url: z.coerce.string(),
  _links: z.object({
    git: z.coerce.string(),
    html: z.coerce.string(),
    self: z.coerce.string(),
  }),
})

export const s_content_symlink = z.object({
  type: z.enum(["symlink"]),
  target: z.coerce.string(),
  size: z.coerce.number(),
  name: z.coerce.string(),
  path: z.coerce.string(),
  sha: z.coerce.string(),
  url: z.coerce.string(),
  git_url: z.coerce.string(),
  html_url: z.coerce.string(),
  download_url: z.coerce.string(),
  _links: z.object({
    git: z.coerce.string(),
    html: z.coerce.string(),
    self: z.coerce.string(),
  }),
})

export const s_dependabot_alert = z.object({
  number: z.coerce.number(),
  state: z.enum(["dismissed", "fixed", "open"]),
  dependency: z.object({
    package: z
      .object({ ecosystem: z.coerce.string(), name: z.coerce.string() })
      .optional(),
    manifest_path: z.coerce.string().optional(),
    scope: z.enum(["development", "runtime"]).optional(),
  }),
  security_advisory: z.object({
    ghsa_id: z.coerce.string(),
    cve_id: z.coerce.string(),
    summary: z.coerce.string(),
    description: z.coerce.string(),
    vulnerabilities: z.array(
      z.object({
        package: z.object({
          ecosystem: z.coerce.string(),
          name: z.coerce.string(),
        }),
        severity: z.enum(["low", "medium", "high", "critical"]),
        vulnerable_version_range: z.coerce.string(),
        first_patched_version: z.object({ identifier: z.coerce.string() }),
      })
    ),
    severity: z.enum(["low", "medium", "high", "critical"]),
    cvss: z.object({
      score: z.coerce.number(),
      vector_string: z.coerce.string(),
    }),
    cwes: z.array(
      z.object({ cwe_id: z.coerce.string(), name: z.coerce.string() })
    ),
    identifiers: z.array(
      z.object({ type: z.enum(["CVE", "GHSA"]), value: z.coerce.string() })
    ),
    references: z.array(z.object({ url: z.coerce.string() })),
    published_at: z.coerce.string().datetime({ offset: true }),
    updated_at: z.coerce.string().datetime({ offset: true }),
    withdrawn_at: z.coerce.string().datetime({ offset: true }),
  }),
  security_vulnerability: z.object({
    package: z.object({
      ecosystem: z.coerce.string(),
      name: z.coerce.string(),
    }),
    severity: z.enum(["low", "medium", "high", "critical"]),
    vulnerable_version_range: z.coerce.string(),
    first_patched_version: z.object({ identifier: z.coerce.string() }),
  }),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  dismissed_at: z.coerce.string().datetime({ offset: true }),
  dismissed_by: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  dismissed_reason: z.enum([
    "fix_started",
    "inaccurate",
    "no_bandwidth",
    "not_used",
    "tolerable_risk",
  ]),
  dismissed_comment: z.coerce.string(),
  fixed_at: z.coerce.string().datetime({ offset: true }),
})

export const s_dependabot_public_key = z.object({
  key_id: z.coerce.string(),
  key: z.coerce.string(),
})

export const s_dependabot_secret = z.object({
  name: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
})

export const s_dependency_graph_diff = z.array(
  z.object({
    change_type: z.enum(["added", "removed"]),
    manifest: z.coerce.string(),
    ecosystem: z.coerce.string(),
    name: z.coerce.string(),
    version: z.coerce.string(),
    package_url: z.coerce.string(),
    license: z.coerce.string(),
    source_repository_url: z.coerce.string(),
    vulnerabilities: z.array(
      z.object({
        severity: z.coerce.string(),
        advisory_ghsa_id: z.coerce.string(),
        advisory_summary: z.coerce.string(),
        advisory_url: z.coerce.string(),
      })
    ),
    scope: z.enum(["unknown", "runtime", "development"]),
  })
)

export const s_deploy_key = z.object({
  id: z.coerce.number(),
  key: z.coerce.string(),
  url: z.coerce.string(),
  title: z.coerce.string(),
  verified: z.coerce.boolean(),
  created_at: z.coerce.string(),
  read_only: z.coerce.boolean(),
  added_by: z.coerce.string().optional(),
  last_used: z.coerce.string().optional(),
})

export const s_deployment = z.object({
  url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  sha: z.coerce.string(),
  ref: z.coerce.string(),
  task: z.coerce.string(),
  payload: z.union([z.object({}), z.coerce.string()]),
  original_environment: z.coerce.string().optional(),
  environment: z.coerce.string(),
  description: z.coerce.string(),
  creator: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  statuses_url: z.coerce.string(),
  repository_url: z.coerce.string(),
  transient_environment: z.coerce.boolean().optional(),
  production_environment: z.coerce.boolean().optional(),
  performed_via_github_app: z
    .object({
      id: z.coerce.number(),
      slug: z.coerce.string().optional(),
      node_id: z.coerce.string(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      name: z.coerce.string(),
      description: z.coerce.string(),
      external_url: z.coerce.string(),
      html_url: z.coerce.string(),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      permissions: z.object({
        issues: z.coerce.string().optional(),
        checks: z.coerce.string().optional(),
        metadata: z.coerce.string().optional(),
        contents: z.coerce.string().optional(),
        deployments: z.coerce.string().optional(),
      }),
      events: z.array(z.coerce.string()),
      installations_count: z.coerce.number().optional(),
      client_id: z.coerce.string().optional(),
      client_secret: z.coerce.string().optional(),
      webhook_secret: z.coerce.string().optional(),
      pem: z.coerce.string().optional(),
    })
    .optional(),
})

export const s_deployment_branch_policy = z.object({
  id: z.coerce.number().optional(),
  node_id: z.coerce.string().optional(),
  name: z.coerce.string().optional(),
})

export const s_deployment_branch_policy_name_pattern = z.object({
  name: z.coerce.string(),
})

export const s_deployment_status = z.object({
  url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  state: z.enum([
    "error",
    "failure",
    "inactive",
    "pending",
    "success",
    "queued",
    "in_progress",
  ]),
  creator: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  description: z.coerce.string(),
  environment: z.coerce.string().optional(),
  target_url: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  deployment_url: z.coerce.string(),
  repository_url: z.coerce.string(),
  environment_url: z.coerce.string().optional(),
  log_url: z.coerce.string().optional(),
  performed_via_github_app: z
    .object({
      id: z.coerce.number(),
      slug: z.coerce.string().optional(),
      node_id: z.coerce.string(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      name: z.coerce.string(),
      description: z.coerce.string(),
      external_url: z.coerce.string(),
      html_url: z.coerce.string(),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      permissions: z.object({
        issues: z.coerce.string().optional(),
        checks: z.coerce.string().optional(),
        metadata: z.coerce.string().optional(),
        contents: z.coerce.string().optional(),
        deployments: z.coerce.string().optional(),
      }),
      events: z.array(z.coerce.string()),
      installations_count: z.coerce.number().optional(),
      client_id: z.coerce.string().optional(),
      client_secret: z.coerce.string().optional(),
      webhook_secret: z.coerce.string().optional(),
      pem: z.coerce.string().optional(),
    })
    .optional(),
})

export const s_empty_object = z.object({})

export const s_enterprise_security_analysis_settings = z.object({
  advanced_security_enabled_for_new_repositories: z.coerce.boolean(),
  secret_scanning_enabled_for_new_repositories: z.coerce.boolean(),
  secret_scanning_push_protection_enabled_for_new_repositories:
    z.coerce.boolean(),
  secret_scanning_push_protection_custom_link: z.coerce.string().optional(),
})

export const s_environment = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  protection_rules: z.array(z.object({})).optional(),
  deployment_branch_policy: z
    .object({
      protected_branches: z.coerce.boolean(),
      custom_branch_policies: z.coerce.boolean(),
    })
    .optional(),
})

export const s_feed = z.object({
  timeline_url: z.coerce.string(),
  user_url: z.coerce.string(),
  current_user_public_url: z.coerce.string().optional(),
  current_user_url: z.coerce.string().optional(),
  current_user_actor_url: z.coerce.string().optional(),
  current_user_organization_url: z.coerce.string().optional(),
  current_user_organization_urls: z.array(z.coerce.string()).optional(),
  security_advisories_url: z.coerce.string().optional(),
  repository_discussions_url: z.coerce.string().optional(),
  repository_discussions_category_url: z.coerce.string().optional(),
  _links: z.object({
    timeline: z.object({ href: z.coerce.string(), type: z.coerce.string() }),
    user: z.object({ href: z.coerce.string(), type: z.coerce.string() }),
    security_advisories: z
      .object({ href: z.coerce.string(), type: z.coerce.string() })
      .optional(),
    current_user: z
      .object({ href: z.coerce.string(), type: z.coerce.string() })
      .optional(),
    current_user_public: z
      .object({ href: z.coerce.string(), type: z.coerce.string() })
      .optional(),
    current_user_actor: z
      .object({ href: z.coerce.string(), type: z.coerce.string() })
      .optional(),
    current_user_organization: z
      .object({ href: z.coerce.string(), type: z.coerce.string() })
      .optional(),
    current_user_organizations: z
      .array(z.object({ href: z.coerce.string(), type: z.coerce.string() }))
      .optional(),
    repository_discussions: z
      .object({ href: z.coerce.string(), type: z.coerce.string() })
      .optional(),
    repository_discussions_category: z
      .object({ href: z.coerce.string(), type: z.coerce.string() })
      .optional(),
  }),
})

export const s_file_commit = z.object({
  content: z.object({
    name: z.coerce.string().optional(),
    path: z.coerce.string().optional(),
    sha: z.coerce.string().optional(),
    size: z.coerce.number().optional(),
    url: z.coerce.string().optional(),
    html_url: z.coerce.string().optional(),
    git_url: z.coerce.string().optional(),
    download_url: z.coerce.string().optional(),
    type: z.coerce.string().optional(),
    _links: z
      .object({
        self: z.coerce.string().optional(),
        git: z.coerce.string().optional(),
        html: z.coerce.string().optional(),
      })
      .optional(),
  }),
  commit: z.object({
    sha: z.coerce.string().optional(),
    node_id: z.coerce.string().optional(),
    url: z.coerce.string().optional(),
    html_url: z.coerce.string().optional(),
    author: z
      .object({
        date: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
      })
      .optional(),
    committer: z
      .object({
        date: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
      })
      .optional(),
    message: z.coerce.string().optional(),
    tree: z
      .object({
        url: z.coerce.string().optional(),
        sha: z.coerce.string().optional(),
      })
      .optional(),
    parents: z
      .array(
        z.object({
          url: z.coerce.string().optional(),
          html_url: z.coerce.string().optional(),
          sha: z.coerce.string().optional(),
        })
      )
      .optional(),
    verification: z
      .object({
        verified: z.coerce.boolean().optional(),
        reason: z.coerce.string().optional(),
        signature: z.coerce.string().optional(),
        payload: z.coerce.string().optional(),
      })
      .optional(),
  }),
})

export const s_full_repository = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  full_name: z.coerce.string(),
  owner: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  private: z.coerce.boolean(),
  html_url: z.coerce.string(),
  description: z.coerce.string(),
  fork: z.coerce.boolean(),
  url: z.coerce.string(),
  archive_url: z.coerce.string(),
  assignees_url: z.coerce.string(),
  blobs_url: z.coerce.string(),
  branches_url: z.coerce.string(),
  collaborators_url: z.coerce.string(),
  comments_url: z.coerce.string(),
  commits_url: z.coerce.string(),
  compare_url: z.coerce.string(),
  contents_url: z.coerce.string(),
  contributors_url: z.coerce.string(),
  deployments_url: z.coerce.string(),
  downloads_url: z.coerce.string(),
  events_url: z.coerce.string(),
  forks_url: z.coerce.string(),
  git_commits_url: z.coerce.string(),
  git_refs_url: z.coerce.string(),
  git_tags_url: z.coerce.string(),
  git_url: z.coerce.string(),
  issue_comment_url: z.coerce.string(),
  issue_events_url: z.coerce.string(),
  issues_url: z.coerce.string(),
  keys_url: z.coerce.string(),
  labels_url: z.coerce.string(),
  languages_url: z.coerce.string(),
  merges_url: z.coerce.string(),
  milestones_url: z.coerce.string(),
  notifications_url: z.coerce.string(),
  pulls_url: z.coerce.string(),
  releases_url: z.coerce.string(),
  ssh_url: z.coerce.string(),
  stargazers_url: z.coerce.string(),
  statuses_url: z.coerce.string(),
  subscribers_url: z.coerce.string(),
  subscription_url: z.coerce.string(),
  tags_url: z.coerce.string(),
  teams_url: z.coerce.string(),
  trees_url: z.coerce.string(),
  clone_url: z.coerce.string(),
  mirror_url: z.coerce.string(),
  hooks_url: z.coerce.string(),
  svn_url: z.coerce.string(),
  homepage: z.coerce.string(),
  language: z.coerce.string(),
  forks_count: z.coerce.number(),
  stargazers_count: z.coerce.number(),
  watchers_count: z.coerce.number(),
  size: z.coerce.number(),
  default_branch: z.coerce.string(),
  open_issues_count: z.coerce.number(),
  is_template: z.coerce.boolean().optional(),
  topics: z.array(z.coerce.string()).optional(),
  has_issues: z.coerce.boolean(),
  has_projects: z.coerce.boolean(),
  has_wiki: z.coerce.boolean(),
  has_pages: z.coerce.boolean(),
  has_downloads: z.coerce.boolean(),
  has_discussions: z.coerce.boolean(),
  archived: z.coerce.boolean(),
  disabled: z.coerce.boolean(),
  visibility: z.coerce.string().optional(),
  pushed_at: z.coerce.string().datetime({ offset: true }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  permissions: z
    .object({
      admin: z.coerce.boolean(),
      maintain: z.coerce.boolean().optional(),
      push: z.coerce.boolean(),
      triage: z.coerce.boolean().optional(),
      pull: z.coerce.boolean(),
    })
    .optional(),
  allow_rebase_merge: z.coerce.boolean().optional(),
  template_repository: z
    .object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      full_name: z.coerce.string(),
      license: z.object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        spdx_id: z.coerce.string(),
        node_id: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      }),
      organization: z
        .object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        })
        .optional(),
      forks: z.coerce.number(),
      permissions: z
        .object({
          admin: z.coerce.boolean(),
          pull: z.coerce.boolean(),
          triage: z.coerce.boolean().optional(),
          push: z.coerce.boolean(),
          maintain: z.coerce.boolean().optional(),
        })
        .optional(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      private: z.coerce.boolean(),
      html_url: z.coerce.string(),
      description: z.coerce.string(),
      fork: z.coerce.boolean(),
      url: z.coerce.string(),
      archive_url: z.coerce.string(),
      assignees_url: z.coerce.string(),
      blobs_url: z.coerce.string(),
      branches_url: z.coerce.string(),
      collaborators_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      compare_url: z.coerce.string(),
      contents_url: z.coerce.string(),
      contributors_url: z.coerce.string(),
      deployments_url: z.coerce.string(),
      downloads_url: z.coerce.string(),
      events_url: z.coerce.string(),
      forks_url: z.coerce.string(),
      git_commits_url: z.coerce.string(),
      git_refs_url: z.coerce.string(),
      git_tags_url: z.coerce.string(),
      git_url: z.coerce.string(),
      issue_comment_url: z.coerce.string(),
      issue_events_url: z.coerce.string(),
      issues_url: z.coerce.string(),
      keys_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      languages_url: z.coerce.string(),
      merges_url: z.coerce.string(),
      milestones_url: z.coerce.string(),
      notifications_url: z.coerce.string(),
      pulls_url: z.coerce.string(),
      releases_url: z.coerce.string(),
      ssh_url: z.coerce.string(),
      stargazers_url: z.coerce.string(),
      statuses_url: z.coerce.string(),
      subscribers_url: z.coerce.string(),
      subscription_url: z.coerce.string(),
      tags_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      trees_url: z.coerce.string(),
      clone_url: z.coerce.string(),
      mirror_url: z.coerce.string(),
      hooks_url: z.coerce.string(),
      svn_url: z.coerce.string(),
      homepage: z.coerce.string(),
      language: z.coerce.string(),
      forks_count: z.coerce.number(),
      stargazers_count: z.coerce.number(),
      watchers_count: z.coerce.number(),
      size: z.coerce.number(),
      default_branch: z.coerce.string(),
      open_issues_count: z.coerce.number(),
      is_template: z.coerce.boolean().optional(),
      topics: z.array(z.coerce.string()).optional(),
      has_issues: z.coerce.boolean(),
      has_projects: z.coerce.boolean(),
      has_wiki: z.coerce.boolean(),
      has_pages: z.coerce.boolean(),
      has_downloads: z.coerce.boolean(),
      has_discussions: z.coerce.boolean().optional(),
      archived: z.coerce.boolean(),
      disabled: z.coerce.boolean(),
      visibility: z.coerce.string().optional(),
      pushed_at: z.coerce.string().datetime({ offset: true }),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      allow_rebase_merge: z.coerce.boolean().optional(),
      template_repository: z
        .object({
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          full_name: z.coerce.string().optional(),
          owner: z
            .object({
              login: z.coerce.string().optional(),
              id: z.coerce.number().optional(),
              node_id: z.coerce.string().optional(),
              avatar_url: z.coerce.string().optional(),
              gravatar_id: z.coerce.string().optional(),
              url: z.coerce.string().optional(),
              html_url: z.coerce.string().optional(),
              followers_url: z.coerce.string().optional(),
              following_url: z.coerce.string().optional(),
              gists_url: z.coerce.string().optional(),
              starred_url: z.coerce.string().optional(),
              subscriptions_url: z.coerce.string().optional(),
              organizations_url: z.coerce.string().optional(),
              repos_url: z.coerce.string().optional(),
              events_url: z.coerce.string().optional(),
              received_events_url: z.coerce.string().optional(),
              type: z.coerce.string().optional(),
              site_admin: z.coerce.boolean().optional(),
            })
            .optional(),
          private: z.coerce.boolean().optional(),
          html_url: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          fork: z.coerce.boolean().optional(),
          url: z.coerce.string().optional(),
          archive_url: z.coerce.string().optional(),
          assignees_url: z.coerce.string().optional(),
          blobs_url: z.coerce.string().optional(),
          branches_url: z.coerce.string().optional(),
          collaborators_url: z.coerce.string().optional(),
          comments_url: z.coerce.string().optional(),
          commits_url: z.coerce.string().optional(),
          compare_url: z.coerce.string().optional(),
          contents_url: z.coerce.string().optional(),
          contributors_url: z.coerce.string().optional(),
          deployments_url: z.coerce.string().optional(),
          downloads_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          forks_url: z.coerce.string().optional(),
          git_commits_url: z.coerce.string().optional(),
          git_refs_url: z.coerce.string().optional(),
          git_tags_url: z.coerce.string().optional(),
          git_url: z.coerce.string().optional(),
          issue_comment_url: z.coerce.string().optional(),
          issue_events_url: z.coerce.string().optional(),
          issues_url: z.coerce.string().optional(),
          keys_url: z.coerce.string().optional(),
          labels_url: z.coerce.string().optional(),
          languages_url: z.coerce.string().optional(),
          merges_url: z.coerce.string().optional(),
          milestones_url: z.coerce.string().optional(),
          notifications_url: z.coerce.string().optional(),
          pulls_url: z.coerce.string().optional(),
          releases_url: z.coerce.string().optional(),
          ssh_url: z.coerce.string().optional(),
          stargazers_url: z.coerce.string().optional(),
          statuses_url: z.coerce.string().optional(),
          subscribers_url: z.coerce.string().optional(),
          subscription_url: z.coerce.string().optional(),
          tags_url: z.coerce.string().optional(),
          teams_url: z.coerce.string().optional(),
          trees_url: z.coerce.string().optional(),
          clone_url: z.coerce.string().optional(),
          mirror_url: z.coerce.string().optional(),
          hooks_url: z.coerce.string().optional(),
          svn_url: z.coerce.string().optional(),
          homepage: z.coerce.string().optional(),
          language: z.coerce.string().optional(),
          forks_count: z.coerce.number().optional(),
          stargazers_count: z.coerce.number().optional(),
          watchers_count: z.coerce.number().optional(),
          size: z.coerce.number().optional(),
          default_branch: z.coerce.string().optional(),
          open_issues_count: z.coerce.number().optional(),
          is_template: z.coerce.boolean().optional(),
          topics: z.array(z.coerce.string()).optional(),
          has_issues: z.coerce.boolean().optional(),
          has_projects: z.coerce.boolean().optional(),
          has_wiki: z.coerce.boolean().optional(),
          has_pages: z.coerce.boolean().optional(),
          has_downloads: z.coerce.boolean().optional(),
          archived: z.coerce.boolean().optional(),
          disabled: z.coerce.boolean().optional(),
          visibility: z.coerce.string().optional(),
          pushed_at: z.coerce.string().optional(),
          created_at: z.coerce.string().optional(),
          updated_at: z.coerce.string().optional(),
          permissions: z
            .object({
              admin: z.coerce.boolean().optional(),
              maintain: z.coerce.boolean().optional(),
              push: z.coerce.boolean().optional(),
              triage: z.coerce.boolean().optional(),
              pull: z.coerce.boolean().optional(),
            })
            .optional(),
          allow_rebase_merge: z.coerce.boolean().optional(),
          temp_clone_token: z.coerce.string().optional(),
          allow_squash_merge: z.coerce.boolean().optional(),
          allow_auto_merge: z.coerce.boolean().optional(),
          delete_branch_on_merge: z.coerce.boolean().optional(),
          allow_update_branch: z.coerce.boolean().optional(),
          use_squash_pr_title_as_default: z.coerce.boolean().optional(),
          squash_merge_commit_title: z
            .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
            .optional(),
          squash_merge_commit_message: z
            .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
            .optional(),
          merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
          merge_commit_message: z
            .enum(["PR_BODY", "PR_TITLE", "BLANK"])
            .optional(),
          allow_merge_commit: z.coerce.boolean().optional(),
          subscribers_count: z.coerce.number().optional(),
          network_count: z.coerce.number().optional(),
        })
        .optional(),
      temp_clone_token: z.coerce.string().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_auto_merge: z.coerce.boolean().optional(),
      delete_branch_on_merge: z.coerce.boolean().optional(),
      allow_update_branch: z.coerce.boolean().optional(),
      use_squash_pr_title_as_default: z.coerce.boolean().optional(),
      squash_merge_commit_title: z
        .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
        .optional(),
      squash_merge_commit_message: z
        .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
        .optional(),
      merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
      merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      allow_forking: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
      subscribers_count: z.coerce.number().optional(),
      network_count: z.coerce.number().optional(),
      open_issues: z.coerce.number(),
      watchers: z.coerce.number(),
      master_branch: z.coerce.string().optional(),
      starred_at: z.coerce.string().optional(),
      anonymous_access_enabled: z.coerce.boolean().optional(),
    })
    .optional(),
  temp_clone_token: z.coerce.string().optional(),
  allow_squash_merge: z.coerce.boolean().optional(),
  allow_auto_merge: z.coerce.boolean().optional(),
  delete_branch_on_merge: z.coerce.boolean().optional(),
  allow_merge_commit: z.coerce.boolean().optional(),
  allow_update_branch: z.coerce.boolean().optional(),
  use_squash_pr_title_as_default: z.coerce.boolean().optional(),
  squash_merge_commit_title: z
    .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
    .optional(),
  squash_merge_commit_message: z
    .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
    .optional(),
  merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
  merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
  allow_forking: z.coerce.boolean().optional(),
  web_commit_signoff_required: z.coerce.boolean().optional(),
  subscribers_count: z.coerce.number(),
  network_count: z.coerce.number(),
  license: z.object({
    key: z.coerce.string(),
    name: z.coerce.string(),
    url: z.coerce.string(),
    spdx_id: z.coerce.string(),
    node_id: z.coerce.string(),
    html_url: z.coerce.string().optional(),
  }),
  organization: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  parent: z
    .object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      full_name: z.coerce.string(),
      license: z.object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        spdx_id: z.coerce.string(),
        node_id: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      }),
      organization: z
        .object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        })
        .optional(),
      forks: z.coerce.number(),
      permissions: z
        .object({
          admin: z.coerce.boolean(),
          pull: z.coerce.boolean(),
          triage: z.coerce.boolean().optional(),
          push: z.coerce.boolean(),
          maintain: z.coerce.boolean().optional(),
        })
        .optional(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      private: z.coerce.boolean(),
      html_url: z.coerce.string(),
      description: z.coerce.string(),
      fork: z.coerce.boolean(),
      url: z.coerce.string(),
      archive_url: z.coerce.string(),
      assignees_url: z.coerce.string(),
      blobs_url: z.coerce.string(),
      branches_url: z.coerce.string(),
      collaborators_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      compare_url: z.coerce.string(),
      contents_url: z.coerce.string(),
      contributors_url: z.coerce.string(),
      deployments_url: z.coerce.string(),
      downloads_url: z.coerce.string(),
      events_url: z.coerce.string(),
      forks_url: z.coerce.string(),
      git_commits_url: z.coerce.string(),
      git_refs_url: z.coerce.string(),
      git_tags_url: z.coerce.string(),
      git_url: z.coerce.string(),
      issue_comment_url: z.coerce.string(),
      issue_events_url: z.coerce.string(),
      issues_url: z.coerce.string(),
      keys_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      languages_url: z.coerce.string(),
      merges_url: z.coerce.string(),
      milestones_url: z.coerce.string(),
      notifications_url: z.coerce.string(),
      pulls_url: z.coerce.string(),
      releases_url: z.coerce.string(),
      ssh_url: z.coerce.string(),
      stargazers_url: z.coerce.string(),
      statuses_url: z.coerce.string(),
      subscribers_url: z.coerce.string(),
      subscription_url: z.coerce.string(),
      tags_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      trees_url: z.coerce.string(),
      clone_url: z.coerce.string(),
      mirror_url: z.coerce.string(),
      hooks_url: z.coerce.string(),
      svn_url: z.coerce.string(),
      homepage: z.coerce.string(),
      language: z.coerce.string(),
      forks_count: z.coerce.number(),
      stargazers_count: z.coerce.number(),
      watchers_count: z.coerce.number(),
      size: z.coerce.number(),
      default_branch: z.coerce.string(),
      open_issues_count: z.coerce.number(),
      is_template: z.coerce.boolean().optional(),
      topics: z.array(z.coerce.string()).optional(),
      has_issues: z.coerce.boolean(),
      has_projects: z.coerce.boolean(),
      has_wiki: z.coerce.boolean(),
      has_pages: z.coerce.boolean(),
      has_downloads: z.coerce.boolean(),
      has_discussions: z.coerce.boolean().optional(),
      archived: z.coerce.boolean(),
      disabled: z.coerce.boolean(),
      visibility: z.coerce.string().optional(),
      pushed_at: z.coerce.string().datetime({ offset: true }),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      allow_rebase_merge: z.coerce.boolean().optional(),
      template_repository: z
        .object({
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          full_name: z.coerce.string().optional(),
          owner: z
            .object({
              login: z.coerce.string().optional(),
              id: z.coerce.number().optional(),
              node_id: z.coerce.string().optional(),
              avatar_url: z.coerce.string().optional(),
              gravatar_id: z.coerce.string().optional(),
              url: z.coerce.string().optional(),
              html_url: z.coerce.string().optional(),
              followers_url: z.coerce.string().optional(),
              following_url: z.coerce.string().optional(),
              gists_url: z.coerce.string().optional(),
              starred_url: z.coerce.string().optional(),
              subscriptions_url: z.coerce.string().optional(),
              organizations_url: z.coerce.string().optional(),
              repos_url: z.coerce.string().optional(),
              events_url: z.coerce.string().optional(),
              received_events_url: z.coerce.string().optional(),
              type: z.coerce.string().optional(),
              site_admin: z.coerce.boolean().optional(),
            })
            .optional(),
          private: z.coerce.boolean().optional(),
          html_url: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          fork: z.coerce.boolean().optional(),
          url: z.coerce.string().optional(),
          archive_url: z.coerce.string().optional(),
          assignees_url: z.coerce.string().optional(),
          blobs_url: z.coerce.string().optional(),
          branches_url: z.coerce.string().optional(),
          collaborators_url: z.coerce.string().optional(),
          comments_url: z.coerce.string().optional(),
          commits_url: z.coerce.string().optional(),
          compare_url: z.coerce.string().optional(),
          contents_url: z.coerce.string().optional(),
          contributors_url: z.coerce.string().optional(),
          deployments_url: z.coerce.string().optional(),
          downloads_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          forks_url: z.coerce.string().optional(),
          git_commits_url: z.coerce.string().optional(),
          git_refs_url: z.coerce.string().optional(),
          git_tags_url: z.coerce.string().optional(),
          git_url: z.coerce.string().optional(),
          issue_comment_url: z.coerce.string().optional(),
          issue_events_url: z.coerce.string().optional(),
          issues_url: z.coerce.string().optional(),
          keys_url: z.coerce.string().optional(),
          labels_url: z.coerce.string().optional(),
          languages_url: z.coerce.string().optional(),
          merges_url: z.coerce.string().optional(),
          milestones_url: z.coerce.string().optional(),
          notifications_url: z.coerce.string().optional(),
          pulls_url: z.coerce.string().optional(),
          releases_url: z.coerce.string().optional(),
          ssh_url: z.coerce.string().optional(),
          stargazers_url: z.coerce.string().optional(),
          statuses_url: z.coerce.string().optional(),
          subscribers_url: z.coerce.string().optional(),
          subscription_url: z.coerce.string().optional(),
          tags_url: z.coerce.string().optional(),
          teams_url: z.coerce.string().optional(),
          trees_url: z.coerce.string().optional(),
          clone_url: z.coerce.string().optional(),
          mirror_url: z.coerce.string().optional(),
          hooks_url: z.coerce.string().optional(),
          svn_url: z.coerce.string().optional(),
          homepage: z.coerce.string().optional(),
          language: z.coerce.string().optional(),
          forks_count: z.coerce.number().optional(),
          stargazers_count: z.coerce.number().optional(),
          watchers_count: z.coerce.number().optional(),
          size: z.coerce.number().optional(),
          default_branch: z.coerce.string().optional(),
          open_issues_count: z.coerce.number().optional(),
          is_template: z.coerce.boolean().optional(),
          topics: z.array(z.coerce.string()).optional(),
          has_issues: z.coerce.boolean().optional(),
          has_projects: z.coerce.boolean().optional(),
          has_wiki: z.coerce.boolean().optional(),
          has_pages: z.coerce.boolean().optional(),
          has_downloads: z.coerce.boolean().optional(),
          archived: z.coerce.boolean().optional(),
          disabled: z.coerce.boolean().optional(),
          visibility: z.coerce.string().optional(),
          pushed_at: z.coerce.string().optional(),
          created_at: z.coerce.string().optional(),
          updated_at: z.coerce.string().optional(),
          permissions: z
            .object({
              admin: z.coerce.boolean().optional(),
              maintain: z.coerce.boolean().optional(),
              push: z.coerce.boolean().optional(),
              triage: z.coerce.boolean().optional(),
              pull: z.coerce.boolean().optional(),
            })
            .optional(),
          allow_rebase_merge: z.coerce.boolean().optional(),
          temp_clone_token: z.coerce.string().optional(),
          allow_squash_merge: z.coerce.boolean().optional(),
          allow_auto_merge: z.coerce.boolean().optional(),
          delete_branch_on_merge: z.coerce.boolean().optional(),
          allow_update_branch: z.coerce.boolean().optional(),
          use_squash_pr_title_as_default: z.coerce.boolean().optional(),
          squash_merge_commit_title: z
            .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
            .optional(),
          squash_merge_commit_message: z
            .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
            .optional(),
          merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
          merge_commit_message: z
            .enum(["PR_BODY", "PR_TITLE", "BLANK"])
            .optional(),
          allow_merge_commit: z.coerce.boolean().optional(),
          subscribers_count: z.coerce.number().optional(),
          network_count: z.coerce.number().optional(),
        })
        .optional(),
      temp_clone_token: z.coerce.string().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_auto_merge: z.coerce.boolean().optional(),
      delete_branch_on_merge: z.coerce.boolean().optional(),
      allow_update_branch: z.coerce.boolean().optional(),
      use_squash_pr_title_as_default: z.coerce.boolean().optional(),
      squash_merge_commit_title: z
        .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
        .optional(),
      squash_merge_commit_message: z
        .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
        .optional(),
      merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
      merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      allow_forking: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
      subscribers_count: z.coerce.number().optional(),
      network_count: z.coerce.number().optional(),
      open_issues: z.coerce.number(),
      watchers: z.coerce.number(),
      master_branch: z.coerce.string().optional(),
      starred_at: z.coerce.string().optional(),
      anonymous_access_enabled: z.coerce.boolean().optional(),
    })
    .optional(),
  source: z
    .object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      full_name: z.coerce.string(),
      license: z.object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        spdx_id: z.coerce.string(),
        node_id: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      }),
      organization: z
        .object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        })
        .optional(),
      forks: z.coerce.number(),
      permissions: z
        .object({
          admin: z.coerce.boolean(),
          pull: z.coerce.boolean(),
          triage: z.coerce.boolean().optional(),
          push: z.coerce.boolean(),
          maintain: z.coerce.boolean().optional(),
        })
        .optional(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      private: z.coerce.boolean(),
      html_url: z.coerce.string(),
      description: z.coerce.string(),
      fork: z.coerce.boolean(),
      url: z.coerce.string(),
      archive_url: z.coerce.string(),
      assignees_url: z.coerce.string(),
      blobs_url: z.coerce.string(),
      branches_url: z.coerce.string(),
      collaborators_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      compare_url: z.coerce.string(),
      contents_url: z.coerce.string(),
      contributors_url: z.coerce.string(),
      deployments_url: z.coerce.string(),
      downloads_url: z.coerce.string(),
      events_url: z.coerce.string(),
      forks_url: z.coerce.string(),
      git_commits_url: z.coerce.string(),
      git_refs_url: z.coerce.string(),
      git_tags_url: z.coerce.string(),
      git_url: z.coerce.string(),
      issue_comment_url: z.coerce.string(),
      issue_events_url: z.coerce.string(),
      issues_url: z.coerce.string(),
      keys_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      languages_url: z.coerce.string(),
      merges_url: z.coerce.string(),
      milestones_url: z.coerce.string(),
      notifications_url: z.coerce.string(),
      pulls_url: z.coerce.string(),
      releases_url: z.coerce.string(),
      ssh_url: z.coerce.string(),
      stargazers_url: z.coerce.string(),
      statuses_url: z.coerce.string(),
      subscribers_url: z.coerce.string(),
      subscription_url: z.coerce.string(),
      tags_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      trees_url: z.coerce.string(),
      clone_url: z.coerce.string(),
      mirror_url: z.coerce.string(),
      hooks_url: z.coerce.string(),
      svn_url: z.coerce.string(),
      homepage: z.coerce.string(),
      language: z.coerce.string(),
      forks_count: z.coerce.number(),
      stargazers_count: z.coerce.number(),
      watchers_count: z.coerce.number(),
      size: z.coerce.number(),
      default_branch: z.coerce.string(),
      open_issues_count: z.coerce.number(),
      is_template: z.coerce.boolean().optional(),
      topics: z.array(z.coerce.string()).optional(),
      has_issues: z.coerce.boolean(),
      has_projects: z.coerce.boolean(),
      has_wiki: z.coerce.boolean(),
      has_pages: z.coerce.boolean(),
      has_downloads: z.coerce.boolean(),
      has_discussions: z.coerce.boolean().optional(),
      archived: z.coerce.boolean(),
      disabled: z.coerce.boolean(),
      visibility: z.coerce.string().optional(),
      pushed_at: z.coerce.string().datetime({ offset: true }),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      allow_rebase_merge: z.coerce.boolean().optional(),
      template_repository: z
        .object({
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          full_name: z.coerce.string().optional(),
          owner: z
            .object({
              login: z.coerce.string().optional(),
              id: z.coerce.number().optional(),
              node_id: z.coerce.string().optional(),
              avatar_url: z.coerce.string().optional(),
              gravatar_id: z.coerce.string().optional(),
              url: z.coerce.string().optional(),
              html_url: z.coerce.string().optional(),
              followers_url: z.coerce.string().optional(),
              following_url: z.coerce.string().optional(),
              gists_url: z.coerce.string().optional(),
              starred_url: z.coerce.string().optional(),
              subscriptions_url: z.coerce.string().optional(),
              organizations_url: z.coerce.string().optional(),
              repos_url: z.coerce.string().optional(),
              events_url: z.coerce.string().optional(),
              received_events_url: z.coerce.string().optional(),
              type: z.coerce.string().optional(),
              site_admin: z.coerce.boolean().optional(),
            })
            .optional(),
          private: z.coerce.boolean().optional(),
          html_url: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          fork: z.coerce.boolean().optional(),
          url: z.coerce.string().optional(),
          archive_url: z.coerce.string().optional(),
          assignees_url: z.coerce.string().optional(),
          blobs_url: z.coerce.string().optional(),
          branches_url: z.coerce.string().optional(),
          collaborators_url: z.coerce.string().optional(),
          comments_url: z.coerce.string().optional(),
          commits_url: z.coerce.string().optional(),
          compare_url: z.coerce.string().optional(),
          contents_url: z.coerce.string().optional(),
          contributors_url: z.coerce.string().optional(),
          deployments_url: z.coerce.string().optional(),
          downloads_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          forks_url: z.coerce.string().optional(),
          git_commits_url: z.coerce.string().optional(),
          git_refs_url: z.coerce.string().optional(),
          git_tags_url: z.coerce.string().optional(),
          git_url: z.coerce.string().optional(),
          issue_comment_url: z.coerce.string().optional(),
          issue_events_url: z.coerce.string().optional(),
          issues_url: z.coerce.string().optional(),
          keys_url: z.coerce.string().optional(),
          labels_url: z.coerce.string().optional(),
          languages_url: z.coerce.string().optional(),
          merges_url: z.coerce.string().optional(),
          milestones_url: z.coerce.string().optional(),
          notifications_url: z.coerce.string().optional(),
          pulls_url: z.coerce.string().optional(),
          releases_url: z.coerce.string().optional(),
          ssh_url: z.coerce.string().optional(),
          stargazers_url: z.coerce.string().optional(),
          statuses_url: z.coerce.string().optional(),
          subscribers_url: z.coerce.string().optional(),
          subscription_url: z.coerce.string().optional(),
          tags_url: z.coerce.string().optional(),
          teams_url: z.coerce.string().optional(),
          trees_url: z.coerce.string().optional(),
          clone_url: z.coerce.string().optional(),
          mirror_url: z.coerce.string().optional(),
          hooks_url: z.coerce.string().optional(),
          svn_url: z.coerce.string().optional(),
          homepage: z.coerce.string().optional(),
          language: z.coerce.string().optional(),
          forks_count: z.coerce.number().optional(),
          stargazers_count: z.coerce.number().optional(),
          watchers_count: z.coerce.number().optional(),
          size: z.coerce.number().optional(),
          default_branch: z.coerce.string().optional(),
          open_issues_count: z.coerce.number().optional(),
          is_template: z.coerce.boolean().optional(),
          topics: z.array(z.coerce.string()).optional(),
          has_issues: z.coerce.boolean().optional(),
          has_projects: z.coerce.boolean().optional(),
          has_wiki: z.coerce.boolean().optional(),
          has_pages: z.coerce.boolean().optional(),
          has_downloads: z.coerce.boolean().optional(),
          archived: z.coerce.boolean().optional(),
          disabled: z.coerce.boolean().optional(),
          visibility: z.coerce.string().optional(),
          pushed_at: z.coerce.string().optional(),
          created_at: z.coerce.string().optional(),
          updated_at: z.coerce.string().optional(),
          permissions: z
            .object({
              admin: z.coerce.boolean().optional(),
              maintain: z.coerce.boolean().optional(),
              push: z.coerce.boolean().optional(),
              triage: z.coerce.boolean().optional(),
              pull: z.coerce.boolean().optional(),
            })
            .optional(),
          allow_rebase_merge: z.coerce.boolean().optional(),
          temp_clone_token: z.coerce.string().optional(),
          allow_squash_merge: z.coerce.boolean().optional(),
          allow_auto_merge: z.coerce.boolean().optional(),
          delete_branch_on_merge: z.coerce.boolean().optional(),
          allow_update_branch: z.coerce.boolean().optional(),
          use_squash_pr_title_as_default: z.coerce.boolean().optional(),
          squash_merge_commit_title: z
            .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
            .optional(),
          squash_merge_commit_message: z
            .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
            .optional(),
          merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
          merge_commit_message: z
            .enum(["PR_BODY", "PR_TITLE", "BLANK"])
            .optional(),
          allow_merge_commit: z.coerce.boolean().optional(),
          subscribers_count: z.coerce.number().optional(),
          network_count: z.coerce.number().optional(),
        })
        .optional(),
      temp_clone_token: z.coerce.string().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_auto_merge: z.coerce.boolean().optional(),
      delete_branch_on_merge: z.coerce.boolean().optional(),
      allow_update_branch: z.coerce.boolean().optional(),
      use_squash_pr_title_as_default: z.coerce.boolean().optional(),
      squash_merge_commit_title: z
        .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
        .optional(),
      squash_merge_commit_message: z
        .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
        .optional(),
      merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
      merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      allow_forking: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
      subscribers_count: z.coerce.number().optional(),
      network_count: z.coerce.number().optional(),
      open_issues: z.coerce.number(),
      watchers: z.coerce.number(),
      master_branch: z.coerce.string().optional(),
      starred_at: z.coerce.string().optional(),
      anonymous_access_enabled: z.coerce.boolean().optional(),
    })
    .optional(),
  forks: z.coerce.number(),
  master_branch: z.coerce.string().optional(),
  open_issues: z.coerce.number(),
  watchers: z.coerce.number(),
  anonymous_access_enabled: z.coerce.boolean().optional(),
  code_of_conduct: z
    .object({
      url: z.coerce.string(),
      key: z.coerce.string(),
      name: z.coerce.string(),
      html_url: z.coerce.string(),
    })
    .optional(),
  security_and_analysis: z
    .object({
      advanced_security: z
        .object({ status: z.enum(["enabled", "disabled"]).optional() })
        .optional(),
      secret_scanning: z
        .object({ status: z.enum(["enabled", "disabled"]).optional() })
        .optional(),
      secret_scanning_push_protection: z
        .object({ status: z.enum(["enabled", "disabled"]).optional() })
        .optional(),
    })
    .optional(),
})

export const s_gist_comment = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  url: z.coerce.string(),
  body: z.coerce.string(),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  author_association: z.enum([
    "COLLABORATOR",
    "CONTRIBUTOR",
    "FIRST_TIMER",
    "FIRST_TIME_CONTRIBUTOR",
    "MANNEQUIN",
    "MEMBER",
    "NONE",
    "OWNER",
  ]),
})

export const s_gist_simple = z.object({
  forks: z
    .array(
      z.object({
        id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        user: z
          .object({
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            name: z.coerce.string(),
            company: z.coerce.string(),
            blog: z.coerce.string(),
            location: z.coerce.string(),
            email: z.coerce.string().email(),
            hireable: z.coerce.boolean(),
            bio: z.coerce.string(),
            twitter_username: z.coerce.string().optional(),
            public_repos: z.coerce.number(),
            public_gists: z.coerce.number(),
            followers: z.coerce.number(),
            following: z.coerce.number(),
            created_at: z.coerce.string().datetime({ offset: true }),
            updated_at: z.coerce.string().datetime({ offset: true }),
            plan: z
              .object({
                collaborators: z.coerce.number(),
                name: z.coerce.string(),
                space: z.coerce.number(),
                private_repos: z.coerce.number(),
              })
              .optional(),
            suspended_at: z.coerce
              .string()
              .datetime({ offset: true })
              .optional(),
            private_gists: z.coerce.number().optional(),
            total_private_repos: z.coerce.number().optional(),
            owned_private_repos: z.coerce.number().optional(),
            disk_usage: z.coerce.number().optional(),
            collaborators: z.coerce.number().optional(),
          })
          .optional(),
        created_at: z.coerce.string().datetime({ offset: true }).optional(),
        updated_at: z.coerce.string().datetime({ offset: true }).optional(),
      })
    )
    .optional(),
  history: z
    .array(
      z.object({
        user: z
          .object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          })
          .optional(),
        version: z.coerce.string().optional(),
        committed_at: z.coerce.string().datetime({ offset: true }).optional(),
        change_status: z
          .object({
            total: z.coerce.number().optional(),
            additions: z.coerce.number().optional(),
            deletions: z.coerce.number().optional(),
          })
          .optional(),
        url: z.coerce.string().optional(),
      })
    )
    .optional(),
  fork_of: z
    .object({
      url: z.coerce.string(),
      forks_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      id: z.coerce.string(),
      node_id: z.coerce.string(),
      git_pull_url: z.coerce.string(),
      git_push_url: z.coerce.string(),
      html_url: z.coerce.string(),
      files: z.object({}),
      public: z.coerce.boolean(),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      description: z.coerce.string(),
      comments: z.coerce.number(),
      user: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      comments_url: z.coerce.string(),
      owner: z
        .object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        })
        .optional(),
      truncated: z.coerce.boolean().optional(),
      forks: z.array(z.object({})).optional(),
      history: z.array(z.object({})).optional(),
    })
    .optional(),
  url: z.coerce.string().optional(),
  forks_url: z.coerce.string().optional(),
  commits_url: z.coerce.string().optional(),
  id: z.coerce.string().optional(),
  node_id: z.coerce.string().optional(),
  git_pull_url: z.coerce.string().optional(),
  git_push_url: z.coerce.string().optional(),
  html_url: z.coerce.string().optional(),
  files: z.object({}).optional(),
  public: z.coerce.boolean().optional(),
  created_at: z.coerce.string().optional(),
  updated_at: z.coerce.string().optional(),
  description: z.coerce.string().optional(),
  comments: z.coerce.number().optional(),
  user: z.coerce.string().optional(),
  comments_url: z.coerce.string().optional(),
  owner: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  truncated: z.coerce.boolean().optional(),
})

export const s_git_commit = z.object({
  sha: z.coerce.string(),
  node_id: z.coerce.string(),
  url: z.coerce.string(),
  author: z.object({
    date: z.coerce.string().datetime({ offset: true }),
    email: z.coerce.string(),
    name: z.coerce.string(),
  }),
  committer: z.object({
    date: z.coerce.string().datetime({ offset: true }),
    email: z.coerce.string(),
    name: z.coerce.string(),
  }),
  message: z.coerce.string(),
  tree: z.object({ sha: z.coerce.string(), url: z.coerce.string() }),
  parents: z.array(
    z.object({
      sha: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
    })
  ),
  verification: z.object({
    verified: z.coerce.boolean(),
    reason: z.coerce.string(),
    signature: z.coerce.string(),
    payload: z.coerce.string(),
  }),
  html_url: z.coerce.string(),
})

export const s_git_ref = z.object({
  ref: z.coerce.string(),
  node_id: z.coerce.string(),
  url: z.coerce.string(),
  object: z.object({
    type: z.coerce.string(),
    sha: z.coerce.string(),
    url: z.coerce.string(),
  }),
})

export const s_git_tag = z.object({
  node_id: z.coerce.string(),
  tag: z.coerce.string(),
  sha: z.coerce.string(),
  url: z.coerce.string(),
  message: z.coerce.string(),
  tagger: z.object({
    date: z.coerce.string(),
    email: z.coerce.string(),
    name: z.coerce.string(),
  }),
  object: z.object({
    sha: z.coerce.string(),
    type: z.coerce.string(),
    url: z.coerce.string(),
  }),
  verification: z
    .object({
      verified: z.coerce.boolean(),
      reason: z.coerce.string(),
      payload: z.coerce.string(),
      signature: z.coerce.string(),
    })
    .optional(),
})

export const s_git_tree = z.object({
  sha: z.coerce.string(),
  url: z.coerce.string(),
  truncated: z.coerce.boolean(),
  tree: z.array(
    z.object({
      path: z.coerce.string().optional(),
      mode: z.coerce.string().optional(),
      type: z.coerce.string().optional(),
      sha: z.coerce.string().optional(),
      size: z.coerce.number().optional(),
      url: z.coerce.string().optional(),
    })
  ),
})

export const s_gitignore_template = z.object({
  name: z.coerce.string(),
  source: z.coerce.string(),
})

export const s_gpg_key = z.object({
  id: z.coerce.number(),
  name: z.coerce.string().optional(),
  primary_key_id: z.coerce.number(),
  key_id: z.coerce.string(),
  public_key: z.coerce.string(),
  emails: z.array(
    z.object({
      email: z.coerce.string().optional(),
      verified: z.coerce.boolean().optional(),
    })
  ),
  subkeys: z.array(
    z.object({
      id: z.coerce.number().optional(),
      primary_key_id: z.coerce.number().optional(),
      key_id: z.coerce.string().optional(),
      public_key: z.coerce.string().optional(),
      emails: z.array(z.object({})).optional(),
      subkeys: z.array(z.object({})).optional(),
      can_sign: z.coerce.boolean().optional(),
      can_encrypt_comms: z.coerce.boolean().optional(),
      can_encrypt_storage: z.coerce.boolean().optional(),
      can_certify: z.coerce.boolean().optional(),
      created_at: z.coerce.string().optional(),
      expires_at: z.coerce.string().optional(),
      raw_key: z.coerce.string().optional(),
      revoked: z.coerce.boolean().optional(),
    })
  ),
  can_sign: z.coerce.boolean(),
  can_encrypt_comms: z.coerce.boolean(),
  can_encrypt_storage: z.coerce.boolean(),
  can_certify: z.coerce.boolean(),
  created_at: z.coerce.string().datetime({ offset: true }),
  expires_at: z.coerce.string().datetime({ offset: true }),
  revoked: z.coerce.boolean(),
  raw_key: z.coerce.string(),
})

export const s_hook = z.object({
  type: z.coerce.string(),
  id: z.coerce.number(),
  name: z.coerce.string(),
  active: z.coerce.boolean(),
  events: z.array(z.coerce.string()),
  config: z.object({
    email: z.coerce.string().optional(),
    password: z.coerce.string().optional(),
    room: z.coerce.string().optional(),
    subdomain: z.coerce.string().optional(),
    url: z.coerce.string().optional(),
    insecure_ssl: z.union([z.coerce.string(), z.coerce.number()]),
    content_type: z.coerce.string().optional(),
    digest: z.coerce.string().optional(),
    secret: z.coerce.string().optional(),
    token: z.coerce.string().optional(),
  }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  created_at: z.coerce.string().datetime({ offset: true }),
  url: z.coerce.string(),
  test_url: z.coerce.string(),
  ping_url: z.coerce.string(),
  deliveries_url: z.coerce.string().optional(),
  last_response: z.object({
    code: z.coerce.number(),
    status: z.coerce.string(),
    message: z.coerce.string(),
  }),
})

export const s_hook_delivery = z.object({
  id: z.coerce.number(),
  guid: z.coerce.string(),
  delivered_at: z.coerce.string().datetime({ offset: true }),
  redelivery: z.coerce.boolean(),
  duration: z.coerce.number(),
  status: z.coerce.string(),
  status_code: z.coerce.number(),
  event: z.coerce.string(),
  action: z.coerce.string(),
  installation_id: z.coerce.number(),
  repository_id: z.coerce.number(),
  url: z.coerce.string().optional(),
  request: z.object({ headers: z.object({}), payload: z.object({}) }),
  response: z.object({ headers: z.object({}), payload: z.coerce.string() }),
})

export const s_hovercard = z.object({
  contexts: z.array(
    z.object({ message: z.coerce.string(), octicon: z.coerce.string() })
  ),
})

export const s_import = z.object({
  vcs: z.coerce.string(),
  use_lfs: z.coerce.boolean().optional(),
  vcs_url: z.coerce.string(),
  svc_root: z.coerce.string().optional(),
  tfvc_project: z.coerce.string().optional(),
  status: z.enum([
    "auth",
    "error",
    "none",
    "detecting",
    "choose",
    "auth_failed",
    "importing",
    "mapping",
    "waiting_to_push",
    "pushing",
    "complete",
    "setup",
    "unknown",
    "detection_found_multiple",
    "detection_found_nothing",
    "detection_needs_auth",
  ]),
  status_text: z.coerce.string().optional(),
  failed_step: z.coerce.string().optional(),
  error_message: z.coerce.string().optional(),
  import_percent: z.coerce.number().optional(),
  commit_count: z.coerce.number().optional(),
  push_percent: z.coerce.number().optional(),
  has_large_files: z.coerce.boolean().optional(),
  large_files_size: z.coerce.number().optional(),
  large_files_count: z.coerce.number().optional(),
  project_choices: z
    .array(
      z.object({
        vcs: z.coerce.string().optional(),
        tfvc_project: z.coerce.string().optional(),
        human_name: z.coerce.string().optional(),
      })
    )
    .optional(),
  message: z.coerce.string().optional(),
  authors_count: z.coerce.number().optional(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  authors_url: z.coerce.string(),
  repository_url: z.coerce.string(),
  svn_root: z.coerce.string().optional(),
})

export const s_installation = z.object({
  id: z.coerce.number(),
  account: z.object({}),
  repository_selection: z.enum(["all", "selected"]),
  access_tokens_url: z.coerce.string(),
  repositories_url: z.coerce.string(),
  html_url: z.coerce.string(),
  app_id: z.coerce.number(),
  target_id: z.coerce.number(),
  target_type: z.coerce.string(),
  permissions: z.object({
    actions: z.enum(["read", "write"]).optional(),
    administration: z.enum(["read", "write"]).optional(),
    checks: z.enum(["read", "write"]).optional(),
    contents: z.enum(["read", "write"]).optional(),
    deployments: z.enum(["read", "write"]).optional(),
    environments: z.enum(["read", "write"]).optional(),
    issues: z.enum(["read", "write"]).optional(),
    metadata: z.enum(["read", "write"]).optional(),
    packages: z.enum(["read", "write"]).optional(),
    pages: z.enum(["read", "write"]).optional(),
    pull_requests: z.enum(["read", "write"]).optional(),
    repository_announcement_banners: z.enum(["read", "write"]).optional(),
    repository_hooks: z.enum(["read", "write"]).optional(),
    repository_projects: z.enum(["read", "write", "admin"]).optional(),
    secret_scanning_alerts: z.enum(["read", "write"]).optional(),
    secrets: z.enum(["read", "write"]).optional(),
    security_events: z.enum(["read", "write"]).optional(),
    single_file: z.enum(["read", "write"]).optional(),
    statuses: z.enum(["read", "write"]).optional(),
    vulnerability_alerts: z.enum(["read", "write"]).optional(),
    workflows: z.enum(["write"]).optional(),
    members: z.enum(["read", "write"]).optional(),
    organization_administration: z.enum(["read", "write"]).optional(),
    organization_custom_roles: z.enum(["read", "write"]).optional(),
    organization_announcement_banners: z.enum(["read", "write"]).optional(),
    organization_hooks: z.enum(["read", "write"]).optional(),
    organization_plan: z.enum(["read"]).optional(),
    organization_projects: z.enum(["read", "write", "admin"]).optional(),
    organization_packages: z.enum(["read", "write"]).optional(),
    organization_secrets: z.enum(["read", "write"]).optional(),
    organization_self_hosted_runners: z.enum(["read", "write"]).optional(),
    organization_user_blocking: z.enum(["read", "write"]).optional(),
    team_discussions: z.enum(["read", "write"]).optional(),
  }),
  events: z.array(z.coerce.string()),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  single_file_name: z.coerce.string(),
  has_multiple_single_files: z.coerce.boolean().optional(),
  single_file_paths: z.array(z.coerce.string()).optional(),
  app_slug: z.coerce.string(),
  suspended_by: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  suspended_at: z.coerce.string().datetime({ offset: true }),
  contact_email: z.coerce.string().optional(),
})

export const s_installation_token = z.object({
  token: z.coerce.string(),
  expires_at: z.coerce.string(),
  permissions: z
    .object({
      actions: z.enum(["read", "write"]).optional(),
      administration: z.enum(["read", "write"]).optional(),
      checks: z.enum(["read", "write"]).optional(),
      contents: z.enum(["read", "write"]).optional(),
      deployments: z.enum(["read", "write"]).optional(),
      environments: z.enum(["read", "write"]).optional(),
      issues: z.enum(["read", "write"]).optional(),
      metadata: z.enum(["read", "write"]).optional(),
      packages: z.enum(["read", "write"]).optional(),
      pages: z.enum(["read", "write"]).optional(),
      pull_requests: z.enum(["read", "write"]).optional(),
      repository_announcement_banners: z.enum(["read", "write"]).optional(),
      repository_hooks: z.enum(["read", "write"]).optional(),
      repository_projects: z.enum(["read", "write", "admin"]).optional(),
      secret_scanning_alerts: z.enum(["read", "write"]).optional(),
      secrets: z.enum(["read", "write"]).optional(),
      security_events: z.enum(["read", "write"]).optional(),
      single_file: z.enum(["read", "write"]).optional(),
      statuses: z.enum(["read", "write"]).optional(),
      vulnerability_alerts: z.enum(["read", "write"]).optional(),
      workflows: z.enum(["write"]).optional(),
      members: z.enum(["read", "write"]).optional(),
      organization_administration: z.enum(["read", "write"]).optional(),
      organization_custom_roles: z.enum(["read", "write"]).optional(),
      organization_announcement_banners: z.enum(["read", "write"]).optional(),
      organization_hooks: z.enum(["read", "write"]).optional(),
      organization_plan: z.enum(["read"]).optional(),
      organization_projects: z.enum(["read", "write", "admin"]).optional(),
      organization_packages: z.enum(["read", "write"]).optional(),
      organization_secrets: z.enum(["read", "write"]).optional(),
      organization_self_hosted_runners: z.enum(["read", "write"]).optional(),
      organization_user_blocking: z.enum(["read", "write"]).optional(),
      team_discussions: z.enum(["read", "write"]).optional(),
    })
    .optional(),
  repository_selection: z.enum(["all", "selected"]).optional(),
  repositories: z
    .array(
      z.object({
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        name: z.coerce.string(),
        full_name: z.coerce.string(),
        license: z.object({
          key: z.coerce.string(),
          name: z.coerce.string(),
          url: z.coerce.string(),
          spdx_id: z.coerce.string(),
          node_id: z.coerce.string(),
          html_url: z.coerce.string().optional(),
        }),
        organization: z
          .object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          })
          .optional(),
        forks: z.coerce.number(),
        permissions: z
          .object({
            admin: z.coerce.boolean(),
            pull: z.coerce.boolean(),
            triage: z.coerce.boolean().optional(),
            push: z.coerce.boolean(),
            maintain: z.coerce.boolean().optional(),
          })
          .optional(),
        owner: z.object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        }),
        private: z.coerce.boolean(),
        html_url: z.coerce.string(),
        description: z.coerce.string(),
        fork: z.coerce.boolean(),
        url: z.coerce.string(),
        archive_url: z.coerce.string(),
        assignees_url: z.coerce.string(),
        blobs_url: z.coerce.string(),
        branches_url: z.coerce.string(),
        collaborators_url: z.coerce.string(),
        comments_url: z.coerce.string(),
        commits_url: z.coerce.string(),
        compare_url: z.coerce.string(),
        contents_url: z.coerce.string(),
        contributors_url: z.coerce.string(),
        deployments_url: z.coerce.string(),
        downloads_url: z.coerce.string(),
        events_url: z.coerce.string(),
        forks_url: z.coerce.string(),
        git_commits_url: z.coerce.string(),
        git_refs_url: z.coerce.string(),
        git_tags_url: z.coerce.string(),
        git_url: z.coerce.string(),
        issue_comment_url: z.coerce.string(),
        issue_events_url: z.coerce.string(),
        issues_url: z.coerce.string(),
        keys_url: z.coerce.string(),
        labels_url: z.coerce.string(),
        languages_url: z.coerce.string(),
        merges_url: z.coerce.string(),
        milestones_url: z.coerce.string(),
        notifications_url: z.coerce.string(),
        pulls_url: z.coerce.string(),
        releases_url: z.coerce.string(),
        ssh_url: z.coerce.string(),
        stargazers_url: z.coerce.string(),
        statuses_url: z.coerce.string(),
        subscribers_url: z.coerce.string(),
        subscription_url: z.coerce.string(),
        tags_url: z.coerce.string(),
        teams_url: z.coerce.string(),
        trees_url: z.coerce.string(),
        clone_url: z.coerce.string(),
        mirror_url: z.coerce.string(),
        hooks_url: z.coerce.string(),
        svn_url: z.coerce.string(),
        homepage: z.coerce.string(),
        language: z.coerce.string(),
        forks_count: z.coerce.number(),
        stargazers_count: z.coerce.number(),
        watchers_count: z.coerce.number(),
        size: z.coerce.number(),
        default_branch: z.coerce.string(),
        open_issues_count: z.coerce.number(),
        is_template: z.coerce.boolean().optional(),
        topics: z.array(z.coerce.string()).optional(),
        has_issues: z.coerce.boolean(),
        has_projects: z.coerce.boolean(),
        has_wiki: z.coerce.boolean(),
        has_pages: z.coerce.boolean(),
        has_downloads: z.coerce.boolean(),
        has_discussions: z.coerce.boolean().optional(),
        archived: z.coerce.boolean(),
        disabled: z.coerce.boolean(),
        visibility: z.coerce.string().optional(),
        pushed_at: z.coerce.string().datetime({ offset: true }),
        created_at: z.coerce.string().datetime({ offset: true }),
        updated_at: z.coerce.string().datetime({ offset: true }),
        allow_rebase_merge: z.coerce.boolean().optional(),
        template_repository: z
          .object({
            id: z.coerce.number().optional(),
            node_id: z.coerce.string().optional(),
            name: z.coerce.string().optional(),
            full_name: z.coerce.string().optional(),
            owner: z
              .object({
                login: z.coerce.string().optional(),
                id: z.coerce.number().optional(),
                node_id: z.coerce.string().optional(),
                avatar_url: z.coerce.string().optional(),
                gravatar_id: z.coerce.string().optional(),
                url: z.coerce.string().optional(),
                html_url: z.coerce.string().optional(),
                followers_url: z.coerce.string().optional(),
                following_url: z.coerce.string().optional(),
                gists_url: z.coerce.string().optional(),
                starred_url: z.coerce.string().optional(),
                subscriptions_url: z.coerce.string().optional(),
                organizations_url: z.coerce.string().optional(),
                repos_url: z.coerce.string().optional(),
                events_url: z.coerce.string().optional(),
                received_events_url: z.coerce.string().optional(),
                type: z.coerce.string().optional(),
                site_admin: z.coerce.boolean().optional(),
              })
              .optional(),
            private: z.coerce.boolean().optional(),
            html_url: z.coerce.string().optional(),
            description: z.coerce.string().optional(),
            fork: z.coerce.boolean().optional(),
            url: z.coerce.string().optional(),
            archive_url: z.coerce.string().optional(),
            assignees_url: z.coerce.string().optional(),
            blobs_url: z.coerce.string().optional(),
            branches_url: z.coerce.string().optional(),
            collaborators_url: z.coerce.string().optional(),
            comments_url: z.coerce.string().optional(),
            commits_url: z.coerce.string().optional(),
            compare_url: z.coerce.string().optional(),
            contents_url: z.coerce.string().optional(),
            contributors_url: z.coerce.string().optional(),
            deployments_url: z.coerce.string().optional(),
            downloads_url: z.coerce.string().optional(),
            events_url: z.coerce.string().optional(),
            forks_url: z.coerce.string().optional(),
            git_commits_url: z.coerce.string().optional(),
            git_refs_url: z.coerce.string().optional(),
            git_tags_url: z.coerce.string().optional(),
            git_url: z.coerce.string().optional(),
            issue_comment_url: z.coerce.string().optional(),
            issue_events_url: z.coerce.string().optional(),
            issues_url: z.coerce.string().optional(),
            keys_url: z.coerce.string().optional(),
            labels_url: z.coerce.string().optional(),
            languages_url: z.coerce.string().optional(),
            merges_url: z.coerce.string().optional(),
            milestones_url: z.coerce.string().optional(),
            notifications_url: z.coerce.string().optional(),
            pulls_url: z.coerce.string().optional(),
            releases_url: z.coerce.string().optional(),
            ssh_url: z.coerce.string().optional(),
            stargazers_url: z.coerce.string().optional(),
            statuses_url: z.coerce.string().optional(),
            subscribers_url: z.coerce.string().optional(),
            subscription_url: z.coerce.string().optional(),
            tags_url: z.coerce.string().optional(),
            teams_url: z.coerce.string().optional(),
            trees_url: z.coerce.string().optional(),
            clone_url: z.coerce.string().optional(),
            mirror_url: z.coerce.string().optional(),
            hooks_url: z.coerce.string().optional(),
            svn_url: z.coerce.string().optional(),
            homepage: z.coerce.string().optional(),
            language: z.coerce.string().optional(),
            forks_count: z.coerce.number().optional(),
            stargazers_count: z.coerce.number().optional(),
            watchers_count: z.coerce.number().optional(),
            size: z.coerce.number().optional(),
            default_branch: z.coerce.string().optional(),
            open_issues_count: z.coerce.number().optional(),
            is_template: z.coerce.boolean().optional(),
            topics: z.array(z.coerce.string()).optional(),
            has_issues: z.coerce.boolean().optional(),
            has_projects: z.coerce.boolean().optional(),
            has_wiki: z.coerce.boolean().optional(),
            has_pages: z.coerce.boolean().optional(),
            has_downloads: z.coerce.boolean().optional(),
            archived: z.coerce.boolean().optional(),
            disabled: z.coerce.boolean().optional(),
            visibility: z.coerce.string().optional(),
            pushed_at: z.coerce.string().optional(),
            created_at: z.coerce.string().optional(),
            updated_at: z.coerce.string().optional(),
            permissions: z
              .object({
                admin: z.coerce.boolean().optional(),
                maintain: z.coerce.boolean().optional(),
                push: z.coerce.boolean().optional(),
                triage: z.coerce.boolean().optional(),
                pull: z.coerce.boolean().optional(),
              })
              .optional(),
            allow_rebase_merge: z.coerce.boolean().optional(),
            temp_clone_token: z.coerce.string().optional(),
            allow_squash_merge: z.coerce.boolean().optional(),
            allow_auto_merge: z.coerce.boolean().optional(),
            delete_branch_on_merge: z.coerce.boolean().optional(),
            allow_update_branch: z.coerce.boolean().optional(),
            use_squash_pr_title_as_default: z.coerce.boolean().optional(),
            squash_merge_commit_title: z
              .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
              .optional(),
            squash_merge_commit_message: z
              .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
              .optional(),
            merge_commit_title: z
              .enum(["PR_TITLE", "MERGE_MESSAGE"])
              .optional(),
            merge_commit_message: z
              .enum(["PR_BODY", "PR_TITLE", "BLANK"])
              .optional(),
            allow_merge_commit: z.coerce.boolean().optional(),
            subscribers_count: z.coerce.number().optional(),
            network_count: z.coerce.number().optional(),
          })
          .optional(),
        temp_clone_token: z.coerce.string().optional(),
        allow_squash_merge: z.coerce.boolean().optional(),
        allow_auto_merge: z.coerce.boolean().optional(),
        delete_branch_on_merge: z.coerce.boolean().optional(),
        allow_update_branch: z.coerce.boolean().optional(),
        use_squash_pr_title_as_default: z.coerce.boolean().optional(),
        squash_merge_commit_title: z
          .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
          .optional(),
        squash_merge_commit_message: z
          .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
          .optional(),
        merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
        merge_commit_message: z
          .enum(["PR_BODY", "PR_TITLE", "BLANK"])
          .optional(),
        allow_merge_commit: z.coerce.boolean().optional(),
        allow_forking: z.coerce.boolean().optional(),
        web_commit_signoff_required: z.coerce.boolean().optional(),
        subscribers_count: z.coerce.number().optional(),
        network_count: z.coerce.number().optional(),
        open_issues: z.coerce.number(),
        watchers: z.coerce.number(),
        master_branch: z.coerce.string().optional(),
        starred_at: z.coerce.string().optional(),
        anonymous_access_enabled: z.coerce.boolean().optional(),
      })
    )
    .optional(),
  single_file: z.coerce.string().optional(),
  has_multiple_single_files: z.coerce.boolean().optional(),
  single_file_paths: z.array(z.coerce.string()).optional(),
})

export const s_integration = z.object({
  id: z.coerce.number(),
  slug: z.coerce.string().optional(),
  node_id: z.coerce.string(),
  owner: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  name: z.coerce.string(),
  description: z.coerce.string(),
  external_url: z.coerce.string(),
  html_url: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  permissions: z.object({
    issues: z.coerce.string().optional(),
    checks: z.coerce.string().optional(),
    metadata: z.coerce.string().optional(),
    contents: z.coerce.string().optional(),
    deployments: z.coerce.string().optional(),
  }),
  events: z.array(z.coerce.string()),
  installations_count: z.coerce.number().optional(),
  client_id: z.coerce.string().optional(),
  client_secret: z.coerce.string().optional(),
  webhook_secret: z.coerce.string().optional(),
  pem: z.coerce.string().optional(),
})

export const s_interaction_limit = z.object({
  limit: z.enum(["existing_users", "contributors_only", "collaborators_only"]),
  expiry: z
    .enum(["one_day", "three_days", "one_week", "one_month", "six_months"])
    .optional(),
})

export const s_interaction_limit_response = z.object({
  limit: z.enum(["existing_users", "contributors_only", "collaborators_only"]),
  origin: z.coerce.string(),
  expires_at: z.coerce.string().datetime({ offset: true }),
})

export const s_issue = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  url: z.coerce.string(),
  repository_url: z.coerce.string(),
  labels_url: z.coerce.string(),
  comments_url: z.coerce.string(),
  events_url: z.coerce.string(),
  html_url: z.coerce.string(),
  number: z.coerce.number(),
  state: z.coerce.string(),
  state_reason: z.enum(["completed", "reopened", "not_planned"]).optional(),
  title: z.coerce.string(),
  body: z.coerce.string().optional(),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  labels: z.array(
    z.union([
      z.coerce.string(),
      z.object({
        id: z.coerce.number().optional(),
        node_id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        description: z.coerce.string().optional(),
        color: z.coerce.string().optional(),
        default: z.coerce.boolean().optional(),
      }),
    ])
  ),
  assignee: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  assignees: z
    .array(
      z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      })
    )
    .optional(),
  milestone: z.object({
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    number: z.coerce.number(),
    state: z.enum(["open", "closed"]),
    title: z.coerce.string(),
    description: z.coerce.string(),
    creator: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    open_issues: z.coerce.number(),
    closed_issues: z.coerce.number(),
    created_at: z.coerce.string().datetime({ offset: true }),
    updated_at: z.coerce.string().datetime({ offset: true }),
    closed_at: z.coerce.string().datetime({ offset: true }),
    due_on: z.coerce.string().datetime({ offset: true }),
  }),
  locked: z.coerce.boolean(),
  active_lock_reason: z.coerce.string().optional(),
  comments: z.coerce.number(),
  pull_request: z
    .object({
      merged_at: z.coerce.string().datetime({ offset: true }).optional(),
      diff_url: z.coerce.string(),
      html_url: z.coerce.string(),
      patch_url: z.coerce.string(),
      url: z.coerce.string(),
    })
    .optional(),
  closed_at: z.coerce.string().datetime({ offset: true }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  draft: z.coerce.boolean().optional(),
  closed_by: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  body_html: z.coerce.string().optional(),
  body_text: z.coerce.string().optional(),
  timeline_url: z.coerce.string().optional(),
  repository: z
    .object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      full_name: z.coerce.string(),
      license: z.object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        spdx_id: z.coerce.string(),
        node_id: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      }),
      organization: z
        .object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        })
        .optional(),
      forks: z.coerce.number(),
      permissions: z
        .object({
          admin: z.coerce.boolean(),
          pull: z.coerce.boolean(),
          triage: z.coerce.boolean().optional(),
          push: z.coerce.boolean(),
          maintain: z.coerce.boolean().optional(),
        })
        .optional(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      private: z.coerce.boolean(),
      html_url: z.coerce.string(),
      description: z.coerce.string(),
      fork: z.coerce.boolean(),
      url: z.coerce.string(),
      archive_url: z.coerce.string(),
      assignees_url: z.coerce.string(),
      blobs_url: z.coerce.string(),
      branches_url: z.coerce.string(),
      collaborators_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      compare_url: z.coerce.string(),
      contents_url: z.coerce.string(),
      contributors_url: z.coerce.string(),
      deployments_url: z.coerce.string(),
      downloads_url: z.coerce.string(),
      events_url: z.coerce.string(),
      forks_url: z.coerce.string(),
      git_commits_url: z.coerce.string(),
      git_refs_url: z.coerce.string(),
      git_tags_url: z.coerce.string(),
      git_url: z.coerce.string(),
      issue_comment_url: z.coerce.string(),
      issue_events_url: z.coerce.string(),
      issues_url: z.coerce.string(),
      keys_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      languages_url: z.coerce.string(),
      merges_url: z.coerce.string(),
      milestones_url: z.coerce.string(),
      notifications_url: z.coerce.string(),
      pulls_url: z.coerce.string(),
      releases_url: z.coerce.string(),
      ssh_url: z.coerce.string(),
      stargazers_url: z.coerce.string(),
      statuses_url: z.coerce.string(),
      subscribers_url: z.coerce.string(),
      subscription_url: z.coerce.string(),
      tags_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      trees_url: z.coerce.string(),
      clone_url: z.coerce.string(),
      mirror_url: z.coerce.string(),
      hooks_url: z.coerce.string(),
      svn_url: z.coerce.string(),
      homepage: z.coerce.string(),
      language: z.coerce.string(),
      forks_count: z.coerce.number(),
      stargazers_count: z.coerce.number(),
      watchers_count: z.coerce.number(),
      size: z.coerce.number(),
      default_branch: z.coerce.string(),
      open_issues_count: z.coerce.number(),
      is_template: z.coerce.boolean().optional(),
      topics: z.array(z.coerce.string()).optional(),
      has_issues: z.coerce.boolean(),
      has_projects: z.coerce.boolean(),
      has_wiki: z.coerce.boolean(),
      has_pages: z.coerce.boolean(),
      has_downloads: z.coerce.boolean(),
      has_discussions: z.coerce.boolean().optional(),
      archived: z.coerce.boolean(),
      disabled: z.coerce.boolean(),
      visibility: z.coerce.string().optional(),
      pushed_at: z.coerce.string().datetime({ offset: true }),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      allow_rebase_merge: z.coerce.boolean().optional(),
      template_repository: z
        .object({
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          full_name: z.coerce.string().optional(),
          owner: z
            .object({
              login: z.coerce.string().optional(),
              id: z.coerce.number().optional(),
              node_id: z.coerce.string().optional(),
              avatar_url: z.coerce.string().optional(),
              gravatar_id: z.coerce.string().optional(),
              url: z.coerce.string().optional(),
              html_url: z.coerce.string().optional(),
              followers_url: z.coerce.string().optional(),
              following_url: z.coerce.string().optional(),
              gists_url: z.coerce.string().optional(),
              starred_url: z.coerce.string().optional(),
              subscriptions_url: z.coerce.string().optional(),
              organizations_url: z.coerce.string().optional(),
              repos_url: z.coerce.string().optional(),
              events_url: z.coerce.string().optional(),
              received_events_url: z.coerce.string().optional(),
              type: z.coerce.string().optional(),
              site_admin: z.coerce.boolean().optional(),
            })
            .optional(),
          private: z.coerce.boolean().optional(),
          html_url: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          fork: z.coerce.boolean().optional(),
          url: z.coerce.string().optional(),
          archive_url: z.coerce.string().optional(),
          assignees_url: z.coerce.string().optional(),
          blobs_url: z.coerce.string().optional(),
          branches_url: z.coerce.string().optional(),
          collaborators_url: z.coerce.string().optional(),
          comments_url: z.coerce.string().optional(),
          commits_url: z.coerce.string().optional(),
          compare_url: z.coerce.string().optional(),
          contents_url: z.coerce.string().optional(),
          contributors_url: z.coerce.string().optional(),
          deployments_url: z.coerce.string().optional(),
          downloads_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          forks_url: z.coerce.string().optional(),
          git_commits_url: z.coerce.string().optional(),
          git_refs_url: z.coerce.string().optional(),
          git_tags_url: z.coerce.string().optional(),
          git_url: z.coerce.string().optional(),
          issue_comment_url: z.coerce.string().optional(),
          issue_events_url: z.coerce.string().optional(),
          issues_url: z.coerce.string().optional(),
          keys_url: z.coerce.string().optional(),
          labels_url: z.coerce.string().optional(),
          languages_url: z.coerce.string().optional(),
          merges_url: z.coerce.string().optional(),
          milestones_url: z.coerce.string().optional(),
          notifications_url: z.coerce.string().optional(),
          pulls_url: z.coerce.string().optional(),
          releases_url: z.coerce.string().optional(),
          ssh_url: z.coerce.string().optional(),
          stargazers_url: z.coerce.string().optional(),
          statuses_url: z.coerce.string().optional(),
          subscribers_url: z.coerce.string().optional(),
          subscription_url: z.coerce.string().optional(),
          tags_url: z.coerce.string().optional(),
          teams_url: z.coerce.string().optional(),
          trees_url: z.coerce.string().optional(),
          clone_url: z.coerce.string().optional(),
          mirror_url: z.coerce.string().optional(),
          hooks_url: z.coerce.string().optional(),
          svn_url: z.coerce.string().optional(),
          homepage: z.coerce.string().optional(),
          language: z.coerce.string().optional(),
          forks_count: z.coerce.number().optional(),
          stargazers_count: z.coerce.number().optional(),
          watchers_count: z.coerce.number().optional(),
          size: z.coerce.number().optional(),
          default_branch: z.coerce.string().optional(),
          open_issues_count: z.coerce.number().optional(),
          is_template: z.coerce.boolean().optional(),
          topics: z.array(z.coerce.string()).optional(),
          has_issues: z.coerce.boolean().optional(),
          has_projects: z.coerce.boolean().optional(),
          has_wiki: z.coerce.boolean().optional(),
          has_pages: z.coerce.boolean().optional(),
          has_downloads: z.coerce.boolean().optional(),
          archived: z.coerce.boolean().optional(),
          disabled: z.coerce.boolean().optional(),
          visibility: z.coerce.string().optional(),
          pushed_at: z.coerce.string().optional(),
          created_at: z.coerce.string().optional(),
          updated_at: z.coerce.string().optional(),
          permissions: z
            .object({
              admin: z.coerce.boolean().optional(),
              maintain: z.coerce.boolean().optional(),
              push: z.coerce.boolean().optional(),
              triage: z.coerce.boolean().optional(),
              pull: z.coerce.boolean().optional(),
            })
            .optional(),
          allow_rebase_merge: z.coerce.boolean().optional(),
          temp_clone_token: z.coerce.string().optional(),
          allow_squash_merge: z.coerce.boolean().optional(),
          allow_auto_merge: z.coerce.boolean().optional(),
          delete_branch_on_merge: z.coerce.boolean().optional(),
          allow_update_branch: z.coerce.boolean().optional(),
          use_squash_pr_title_as_default: z.coerce.boolean().optional(),
          squash_merge_commit_title: z
            .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
            .optional(),
          squash_merge_commit_message: z
            .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
            .optional(),
          merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
          merge_commit_message: z
            .enum(["PR_BODY", "PR_TITLE", "BLANK"])
            .optional(),
          allow_merge_commit: z.coerce.boolean().optional(),
          subscribers_count: z.coerce.number().optional(),
          network_count: z.coerce.number().optional(),
        })
        .optional(),
      temp_clone_token: z.coerce.string().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_auto_merge: z.coerce.boolean().optional(),
      delete_branch_on_merge: z.coerce.boolean().optional(),
      allow_update_branch: z.coerce.boolean().optional(),
      use_squash_pr_title_as_default: z.coerce.boolean().optional(),
      squash_merge_commit_title: z
        .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
        .optional(),
      squash_merge_commit_message: z
        .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
        .optional(),
      merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
      merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      allow_forking: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
      subscribers_count: z.coerce.number().optional(),
      network_count: z.coerce.number().optional(),
      open_issues: z.coerce.number(),
      watchers: z.coerce.number(),
      master_branch: z.coerce.string().optional(),
      starred_at: z.coerce.string().optional(),
      anonymous_access_enabled: z.coerce.boolean().optional(),
    })
    .optional(),
  performed_via_github_app: z
    .object({
      id: z.coerce.number(),
      slug: z.coerce.string().optional(),
      node_id: z.coerce.string(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      name: z.coerce.string(),
      description: z.coerce.string(),
      external_url: z.coerce.string(),
      html_url: z.coerce.string(),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      permissions: z.object({
        issues: z.coerce.string().optional(),
        checks: z.coerce.string().optional(),
        metadata: z.coerce.string().optional(),
        contents: z.coerce.string().optional(),
        deployments: z.coerce.string().optional(),
      }),
      events: z.array(z.coerce.string()),
      installations_count: z.coerce.number().optional(),
      client_id: z.coerce.string().optional(),
      client_secret: z.coerce.string().optional(),
      webhook_secret: z.coerce.string().optional(),
      pem: z.coerce.string().optional(),
    })
    .optional(),
  author_association: z.enum([
    "COLLABORATOR",
    "CONTRIBUTOR",
    "FIRST_TIMER",
    "FIRST_TIME_CONTRIBUTOR",
    "MANNEQUIN",
    "MEMBER",
    "NONE",
    "OWNER",
  ]),
  reactions: z
    .object({
      url: z.coerce.string(),
      total_count: z.coerce.number(),
      "+1": z.coerce.number(),
      "-1": z.coerce.number(),
      laugh: z.coerce.number(),
      confused: z.coerce.number(),
      heart: z.coerce.number(),
      hooray: z.coerce.number(),
      eyes: z.coerce.number(),
      rocket: z.coerce.number(),
    })
    .optional(),
})

export const s_issue_comment = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  url: z.coerce.string(),
  body: z.coerce.string().optional(),
  body_text: z.coerce.string().optional(),
  body_html: z.coerce.string().optional(),
  html_url: z.coerce.string(),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  issue_url: z.coerce.string(),
  author_association: z.enum([
    "COLLABORATOR",
    "CONTRIBUTOR",
    "FIRST_TIMER",
    "FIRST_TIME_CONTRIBUTOR",
    "MANNEQUIN",
    "MEMBER",
    "NONE",
    "OWNER",
  ]),
  performed_via_github_app: z
    .object({
      id: z.coerce.number(),
      slug: z.coerce.string().optional(),
      node_id: z.coerce.string(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      name: z.coerce.string(),
      description: z.coerce.string(),
      external_url: z.coerce.string(),
      html_url: z.coerce.string(),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      permissions: z.object({
        issues: z.coerce.string().optional(),
        checks: z.coerce.string().optional(),
        metadata: z.coerce.string().optional(),
        contents: z.coerce.string().optional(),
        deployments: z.coerce.string().optional(),
      }),
      events: z.array(z.coerce.string()),
      installations_count: z.coerce.number().optional(),
      client_id: z.coerce.string().optional(),
      client_secret: z.coerce.string().optional(),
      webhook_secret: z.coerce.string().optional(),
      pem: z.coerce.string().optional(),
    })
    .optional(),
  reactions: z
    .object({
      url: z.coerce.string(),
      total_count: z.coerce.number(),
      "+1": z.coerce.number(),
      "-1": z.coerce.number(),
      laugh: z.coerce.number(),
      confused: z.coerce.number(),
      heart: z.coerce.number(),
      hooray: z.coerce.number(),
      eyes: z.coerce.number(),
      rocket: z.coerce.number(),
    })
    .optional(),
})

export const s_issue_event = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  url: z.coerce.string(),
  actor: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  event: z.coerce.string(),
  commit_id: z.coerce.string(),
  commit_url: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  issue: z
    .object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      url: z.coerce.string(),
      repository_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      events_url: z.coerce.string(),
      html_url: z.coerce.string(),
      number: z.coerce.number(),
      state: z.coerce.string(),
      state_reason: z.enum(["completed", "reopened", "not_planned"]).optional(),
      title: z.coerce.string(),
      body: z.coerce.string().optional(),
      user: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      labels: z.array(
        z.union([
          z.coerce.string(),
          z.object({
            id: z.coerce.number().optional(),
            node_id: z.coerce.string().optional(),
            url: z.coerce.string().optional(),
            name: z.coerce.string().optional(),
            description: z.coerce.string().optional(),
            color: z.coerce.string().optional(),
            default: z.coerce.boolean().optional(),
          }),
        ])
      ),
      assignee: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      assignees: z
        .array(
          z.object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          })
        )
        .optional(),
      milestone: z.object({
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        labels_url: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        number: z.coerce.number(),
        state: z.enum(["open", "closed"]),
        title: z.coerce.string(),
        description: z.coerce.string(),
        creator: z.object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        }),
        open_issues: z.coerce.number(),
        closed_issues: z.coerce.number(),
        created_at: z.coerce.string().datetime({ offset: true }),
        updated_at: z.coerce.string().datetime({ offset: true }),
        closed_at: z.coerce.string().datetime({ offset: true }),
        due_on: z.coerce.string().datetime({ offset: true }),
      }),
      locked: z.coerce.boolean(),
      active_lock_reason: z.coerce.string().optional(),
      comments: z.coerce.number(),
      pull_request: z
        .object({
          merged_at: z.coerce.string().datetime({ offset: true }).optional(),
          diff_url: z.coerce.string(),
          html_url: z.coerce.string(),
          patch_url: z.coerce.string(),
          url: z.coerce.string(),
        })
        .optional(),
      closed_at: z.coerce.string().datetime({ offset: true }),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      draft: z.coerce.boolean().optional(),
      closed_by: z
        .object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        })
        .optional(),
      body_html: z.coerce.string().optional(),
      body_text: z.coerce.string().optional(),
      timeline_url: z.coerce.string().optional(),
      repository: z
        .object({
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          name: z.coerce.string(),
          full_name: z.coerce.string(),
          license: z.object({
            key: z.coerce.string(),
            name: z.coerce.string(),
            url: z.coerce.string(),
            spdx_id: z.coerce.string(),
            node_id: z.coerce.string(),
            html_url: z.coerce.string().optional(),
          }),
          organization: z
            .object({
              name: z.coerce.string().optional(),
              email: z.coerce.string().optional(),
              login: z.coerce.string(),
              id: z.coerce.number(),
              node_id: z.coerce.string(),
              avatar_url: z.coerce.string(),
              gravatar_id: z.coerce.string(),
              url: z.coerce.string(),
              html_url: z.coerce.string(),
              followers_url: z.coerce.string(),
              following_url: z.coerce.string(),
              gists_url: z.coerce.string(),
              starred_url: z.coerce.string(),
              subscriptions_url: z.coerce.string(),
              organizations_url: z.coerce.string(),
              repos_url: z.coerce.string(),
              events_url: z.coerce.string(),
              received_events_url: z.coerce.string(),
              type: z.coerce.string(),
              site_admin: z.coerce.boolean(),
              starred_at: z.coerce.string().optional(),
            })
            .optional(),
          forks: z.coerce.number(),
          permissions: z
            .object({
              admin: z.coerce.boolean(),
              pull: z.coerce.boolean(),
              triage: z.coerce.boolean().optional(),
              push: z.coerce.boolean(),
              maintain: z.coerce.boolean().optional(),
            })
            .optional(),
          owner: z.object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          }),
          private: z.coerce.boolean(),
          html_url: z.coerce.string(),
          description: z.coerce.string(),
          fork: z.coerce.boolean(),
          url: z.coerce.string(),
          archive_url: z.coerce.string(),
          assignees_url: z.coerce.string(),
          blobs_url: z.coerce.string(),
          branches_url: z.coerce.string(),
          collaborators_url: z.coerce.string(),
          comments_url: z.coerce.string(),
          commits_url: z.coerce.string(),
          compare_url: z.coerce.string(),
          contents_url: z.coerce.string(),
          contributors_url: z.coerce.string(),
          deployments_url: z.coerce.string(),
          downloads_url: z.coerce.string(),
          events_url: z.coerce.string(),
          forks_url: z.coerce.string(),
          git_commits_url: z.coerce.string(),
          git_refs_url: z.coerce.string(),
          git_tags_url: z.coerce.string(),
          git_url: z.coerce.string(),
          issue_comment_url: z.coerce.string(),
          issue_events_url: z.coerce.string(),
          issues_url: z.coerce.string(),
          keys_url: z.coerce.string(),
          labels_url: z.coerce.string(),
          languages_url: z.coerce.string(),
          merges_url: z.coerce.string(),
          milestones_url: z.coerce.string(),
          notifications_url: z.coerce.string(),
          pulls_url: z.coerce.string(),
          releases_url: z.coerce.string(),
          ssh_url: z.coerce.string(),
          stargazers_url: z.coerce.string(),
          statuses_url: z.coerce.string(),
          subscribers_url: z.coerce.string(),
          subscription_url: z.coerce.string(),
          tags_url: z.coerce.string(),
          teams_url: z.coerce.string(),
          trees_url: z.coerce.string(),
          clone_url: z.coerce.string(),
          mirror_url: z.coerce.string(),
          hooks_url: z.coerce.string(),
          svn_url: z.coerce.string(),
          homepage: z.coerce.string(),
          language: z.coerce.string(),
          forks_count: z.coerce.number(),
          stargazers_count: z.coerce.number(),
          watchers_count: z.coerce.number(),
          size: z.coerce.number(),
          default_branch: z.coerce.string(),
          open_issues_count: z.coerce.number(),
          is_template: z.coerce.boolean().optional(),
          topics: z.array(z.coerce.string()).optional(),
          has_issues: z.coerce.boolean(),
          has_projects: z.coerce.boolean(),
          has_wiki: z.coerce.boolean(),
          has_pages: z.coerce.boolean(),
          has_downloads: z.coerce.boolean(),
          has_discussions: z.coerce.boolean().optional(),
          archived: z.coerce.boolean(),
          disabled: z.coerce.boolean(),
          visibility: z.coerce.string().optional(),
          pushed_at: z.coerce.string().datetime({ offset: true }),
          created_at: z.coerce.string().datetime({ offset: true }),
          updated_at: z.coerce.string().datetime({ offset: true }),
          allow_rebase_merge: z.coerce.boolean().optional(),
          template_repository: z
            .object({
              id: z.coerce.number().optional(),
              node_id: z.coerce.string().optional(),
              name: z.coerce.string().optional(),
              full_name: z.coerce.string().optional(),
              owner: z
                .object({
                  login: z.coerce.string().optional(),
                  id: z.coerce.number().optional(),
                  node_id: z.coerce.string().optional(),
                  avatar_url: z.coerce.string().optional(),
                  gravatar_id: z.coerce.string().optional(),
                  url: z.coerce.string().optional(),
                  html_url: z.coerce.string().optional(),
                  followers_url: z.coerce.string().optional(),
                  following_url: z.coerce.string().optional(),
                  gists_url: z.coerce.string().optional(),
                  starred_url: z.coerce.string().optional(),
                  subscriptions_url: z.coerce.string().optional(),
                  organizations_url: z.coerce.string().optional(),
                  repos_url: z.coerce.string().optional(),
                  events_url: z.coerce.string().optional(),
                  received_events_url: z.coerce.string().optional(),
                  type: z.coerce.string().optional(),
                  site_admin: z.coerce.boolean().optional(),
                })
                .optional(),
              private: z.coerce.boolean().optional(),
              html_url: z.coerce.string().optional(),
              description: z.coerce.string().optional(),
              fork: z.coerce.boolean().optional(),
              url: z.coerce.string().optional(),
              archive_url: z.coerce.string().optional(),
              assignees_url: z.coerce.string().optional(),
              blobs_url: z.coerce.string().optional(),
              branches_url: z.coerce.string().optional(),
              collaborators_url: z.coerce.string().optional(),
              comments_url: z.coerce.string().optional(),
              commits_url: z.coerce.string().optional(),
              compare_url: z.coerce.string().optional(),
              contents_url: z.coerce.string().optional(),
              contributors_url: z.coerce.string().optional(),
              deployments_url: z.coerce.string().optional(),
              downloads_url: z.coerce.string().optional(),
              events_url: z.coerce.string().optional(),
              forks_url: z.coerce.string().optional(),
              git_commits_url: z.coerce.string().optional(),
              git_refs_url: z.coerce.string().optional(),
              git_tags_url: z.coerce.string().optional(),
              git_url: z.coerce.string().optional(),
              issue_comment_url: z.coerce.string().optional(),
              issue_events_url: z.coerce.string().optional(),
              issues_url: z.coerce.string().optional(),
              keys_url: z.coerce.string().optional(),
              labels_url: z.coerce.string().optional(),
              languages_url: z.coerce.string().optional(),
              merges_url: z.coerce.string().optional(),
              milestones_url: z.coerce.string().optional(),
              notifications_url: z.coerce.string().optional(),
              pulls_url: z.coerce.string().optional(),
              releases_url: z.coerce.string().optional(),
              ssh_url: z.coerce.string().optional(),
              stargazers_url: z.coerce.string().optional(),
              statuses_url: z.coerce.string().optional(),
              subscribers_url: z.coerce.string().optional(),
              subscription_url: z.coerce.string().optional(),
              tags_url: z.coerce.string().optional(),
              teams_url: z.coerce.string().optional(),
              trees_url: z.coerce.string().optional(),
              clone_url: z.coerce.string().optional(),
              mirror_url: z.coerce.string().optional(),
              hooks_url: z.coerce.string().optional(),
              svn_url: z.coerce.string().optional(),
              homepage: z.coerce.string().optional(),
              language: z.coerce.string().optional(),
              forks_count: z.coerce.number().optional(),
              stargazers_count: z.coerce.number().optional(),
              watchers_count: z.coerce.number().optional(),
              size: z.coerce.number().optional(),
              default_branch: z.coerce.string().optional(),
              open_issues_count: z.coerce.number().optional(),
              is_template: z.coerce.boolean().optional(),
              topics: z.array(z.coerce.string()).optional(),
              has_issues: z.coerce.boolean().optional(),
              has_projects: z.coerce.boolean().optional(),
              has_wiki: z.coerce.boolean().optional(),
              has_pages: z.coerce.boolean().optional(),
              has_downloads: z.coerce.boolean().optional(),
              archived: z.coerce.boolean().optional(),
              disabled: z.coerce.boolean().optional(),
              visibility: z.coerce.string().optional(),
              pushed_at: z.coerce.string().optional(),
              created_at: z.coerce.string().optional(),
              updated_at: z.coerce.string().optional(),
              permissions: z
                .object({
                  admin: z.coerce.boolean().optional(),
                  maintain: z.coerce.boolean().optional(),
                  push: z.coerce.boolean().optional(),
                  triage: z.coerce.boolean().optional(),
                  pull: z.coerce.boolean().optional(),
                })
                .optional(),
              allow_rebase_merge: z.coerce.boolean().optional(),
              temp_clone_token: z.coerce.string().optional(),
              allow_squash_merge: z.coerce.boolean().optional(),
              allow_auto_merge: z.coerce.boolean().optional(),
              delete_branch_on_merge: z.coerce.boolean().optional(),
              allow_update_branch: z.coerce.boolean().optional(),
              use_squash_pr_title_as_default: z.coerce.boolean().optional(),
              squash_merge_commit_title: z
                .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
                .optional(),
              squash_merge_commit_message: z
                .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
                .optional(),
              merge_commit_title: z
                .enum(["PR_TITLE", "MERGE_MESSAGE"])
                .optional(),
              merge_commit_message: z
                .enum(["PR_BODY", "PR_TITLE", "BLANK"])
                .optional(),
              allow_merge_commit: z.coerce.boolean().optional(),
              subscribers_count: z.coerce.number().optional(),
              network_count: z.coerce.number().optional(),
            })
            .optional(),
          temp_clone_token: z.coerce.string().optional(),
          allow_squash_merge: z.coerce.boolean().optional(),
          allow_auto_merge: z.coerce.boolean().optional(),
          delete_branch_on_merge: z.coerce.boolean().optional(),
          allow_update_branch: z.coerce.boolean().optional(),
          use_squash_pr_title_as_default: z.coerce.boolean().optional(),
          squash_merge_commit_title: z
            .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
            .optional(),
          squash_merge_commit_message: z
            .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
            .optional(),
          merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
          merge_commit_message: z
            .enum(["PR_BODY", "PR_TITLE", "BLANK"])
            .optional(),
          allow_merge_commit: z.coerce.boolean().optional(),
          allow_forking: z.coerce.boolean().optional(),
          web_commit_signoff_required: z.coerce.boolean().optional(),
          subscribers_count: z.coerce.number().optional(),
          network_count: z.coerce.number().optional(),
          open_issues: z.coerce.number(),
          watchers: z.coerce.number(),
          master_branch: z.coerce.string().optional(),
          starred_at: z.coerce.string().optional(),
          anonymous_access_enabled: z.coerce.boolean().optional(),
        })
        .optional(),
      performed_via_github_app: z
        .object({
          id: z.coerce.number(),
          slug: z.coerce.string().optional(),
          node_id: z.coerce.string(),
          owner: z.object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          }),
          name: z.coerce.string(),
          description: z.coerce.string(),
          external_url: z.coerce.string(),
          html_url: z.coerce.string(),
          created_at: z.coerce.string().datetime({ offset: true }),
          updated_at: z.coerce.string().datetime({ offset: true }),
          permissions: z.object({
            issues: z.coerce.string().optional(),
            checks: z.coerce.string().optional(),
            metadata: z.coerce.string().optional(),
            contents: z.coerce.string().optional(),
            deployments: z.coerce.string().optional(),
          }),
          events: z.array(z.coerce.string()),
          installations_count: z.coerce.number().optional(),
          client_id: z.coerce.string().optional(),
          client_secret: z.coerce.string().optional(),
          webhook_secret: z.coerce.string().optional(),
          pem: z.coerce.string().optional(),
        })
        .optional(),
      author_association: z.enum([
        "COLLABORATOR",
        "CONTRIBUTOR",
        "FIRST_TIMER",
        "FIRST_TIME_CONTRIBUTOR",
        "MANNEQUIN",
        "MEMBER",
        "NONE",
        "OWNER",
      ]),
      reactions: z
        .object({
          url: z.coerce.string(),
          total_count: z.coerce.number(),
          "+1": z.coerce.number(),
          "-1": z.coerce.number(),
          laugh: z.coerce.number(),
          confused: z.coerce.number(),
          heart: z.coerce.number(),
          hooray: z.coerce.number(),
          eyes: z.coerce.number(),
          rocket: z.coerce.number(),
        })
        .optional(),
    })
    .optional(),
  label: z
    .object({ name: z.coerce.string(), color: z.coerce.string() })
    .optional(),
  assignee: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  assigner: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  review_requester: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  requested_reviewer: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  requested_team: z
    .object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      slug: z.coerce.string(),
      description: z.coerce.string(),
      privacy: z.coerce.string().optional(),
      permission: z.coerce.string(),
      permissions: z
        .object({
          pull: z.coerce.boolean(),
          triage: z.coerce.boolean(),
          push: z.coerce.boolean(),
          maintain: z.coerce.boolean(),
          admin: z.coerce.boolean(),
        })
        .optional(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      members_url: z.coerce.string(),
      repositories_url: z.coerce.string(),
      parent: z.object({
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        url: z.coerce.string(),
        members_url: z.coerce.string(),
        name: z.coerce.string(),
        description: z.coerce.string(),
        permission: z.coerce.string(),
        privacy: z.coerce.string().optional(),
        html_url: z.coerce.string(),
        repositories_url: z.coerce.string(),
        slug: z.coerce.string(),
        ldap_dn: z.coerce.string().optional(),
      }),
    })
    .optional(),
  dismissed_review: z
    .object({
      state: z.coerce.string(),
      review_id: z.coerce.number(),
      dismissal_message: z.coerce.string(),
      dismissal_commit_id: z.coerce.string().optional(),
    })
    .optional(),
  milestone: z.object({ title: z.coerce.string() }).optional(),
  project_card: z
    .object({
      url: z.coerce.string(),
      id: z.coerce.number(),
      project_url: z.coerce.string(),
      project_id: z.coerce.number(),
      column_name: z.coerce.string(),
      previous_column_name: z.coerce.string().optional(),
    })
    .optional(),
  rename: z
    .object({ from: z.coerce.string(), to: z.coerce.string() })
    .optional(),
  author_association: z
    .enum([
      "COLLABORATOR",
      "CONTRIBUTOR",
      "FIRST_TIMER",
      "FIRST_TIME_CONTRIBUTOR",
      "MANNEQUIN",
      "MEMBER",
      "NONE",
      "OWNER",
    ])
    .optional(),
  lock_reason: z.coerce.string().optional(),
  performed_via_github_app: z
    .object({
      id: z.coerce.number(),
      slug: z.coerce.string().optional(),
      node_id: z.coerce.string(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      name: z.coerce.string(),
      description: z.coerce.string(),
      external_url: z.coerce.string(),
      html_url: z.coerce.string(),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      permissions: z.object({
        issues: z.coerce.string().optional(),
        checks: z.coerce.string().optional(),
        metadata: z.coerce.string().optional(),
        contents: z.coerce.string().optional(),
        deployments: z.coerce.string().optional(),
      }),
      events: z.array(z.coerce.string()),
      installations_count: z.coerce.number().optional(),
      client_id: z.coerce.string().optional(),
      client_secret: z.coerce.string().optional(),
      webhook_secret: z.coerce.string().optional(),
      pem: z.coerce.string().optional(),
    })
    .optional(),
})

export const s_job = z.object({
  id: z.coerce.number(),
  run_id: z.coerce.number(),
  run_url: z.coerce.string(),
  run_attempt: z.coerce.number().optional(),
  node_id: z.coerce.string(),
  head_sha: z.coerce.string(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  status: z.enum(["queued", "in_progress", "completed"]),
  conclusion: z.enum([
    "success",
    "failure",
    "neutral",
    "cancelled",
    "skipped",
    "timed_out",
    "action_required",
  ]),
  started_at: z.coerce.string().datetime({ offset: true }),
  completed_at: z.coerce.string().datetime({ offset: true }),
  name: z.coerce.string(),
  steps: z
    .array(
      z.object({
        status: z.enum(["queued", "in_progress", "completed"]),
        conclusion: z.coerce.string(),
        name: z.coerce.string(),
        number: z.coerce.number(),
        started_at: z.coerce.string().datetime({ offset: true }).optional(),
        completed_at: z.coerce.string().datetime({ offset: true }).optional(),
      })
    )
    .optional(),
  check_run_url: z.coerce.string(),
  labels: z.array(z.coerce.string()),
  runner_id: z.coerce.number(),
  runner_name: z.coerce.string(),
  runner_group_id: z.coerce.number(),
  runner_group_name: z.coerce.string(),
  workflow_name: z.coerce.string(),
  head_branch: z.coerce.string(),
})

export const s_key = z.object({
  key: z.coerce.string(),
  id: z.coerce.number(),
  url: z.coerce.string(),
  title: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  verified: z.coerce.boolean(),
  read_only: z.coerce.boolean(),
})

export const s_label = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  url: z.coerce.string(),
  name: z.coerce.string(),
  description: z.coerce.string(),
  color: z.coerce.string(),
  default: z.coerce.boolean(),
})

export const s_language = z.object({})

export const s_license = z.object({
  key: z.coerce.string(),
  name: z.coerce.string(),
  spdx_id: z.coerce.string(),
  url: z.coerce.string(),
  node_id: z.coerce.string(),
  html_url: z.coerce.string(),
  description: z.coerce.string(),
  implementation: z.coerce.string(),
  permissions: z.array(z.coerce.string()),
  conditions: z.array(z.coerce.string()),
  limitations: z.array(z.coerce.string()),
  body: z.coerce.string(),
  featured: z.coerce.boolean(),
})

export const s_license_content = z.object({
  name: z.coerce.string(),
  path: z.coerce.string(),
  sha: z.coerce.string(),
  size: z.coerce.number(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  git_url: z.coerce.string(),
  download_url: z.coerce.string(),
  type: z.coerce.string(),
  content: z.coerce.string(),
  encoding: z.coerce.string(),
  _links: z.object({
    git: z.coerce.string(),
    html: z.coerce.string(),
    self: z.coerce.string(),
  }),
  license: z.object({
    key: z.coerce.string(),
    name: z.coerce.string(),
    url: z.coerce.string(),
    spdx_id: z.coerce.string(),
    node_id: z.coerce.string(),
    html_url: z.coerce.string().optional(),
  }),
})

export const s_marketplace_purchase = z.object({
  url: z.coerce.string(),
  type: z.coerce.string(),
  id: z.coerce.number(),
  login: z.coerce.string(),
  organization_billing_email: z.coerce.string().optional(),
  email: z.coerce.string().optional(),
  marketplace_pending_change: z
    .object({
      is_installed: z.coerce.boolean().optional(),
      effective_date: z.coerce.string().optional(),
      unit_count: z.coerce.number().optional(),
      id: z.coerce.number().optional(),
      plan: z
        .object({
          url: z.coerce.string(),
          accounts_url: z.coerce.string(),
          id: z.coerce.number(),
          number: z.coerce.number(),
          name: z.coerce.string(),
          description: z.coerce.string(),
          monthly_price_in_cents: z.coerce.number(),
          yearly_price_in_cents: z.coerce.number(),
          price_model: z.enum(["FREE", "FLAT_RATE", "PER_UNIT"]),
          has_free_trial: z.coerce.boolean(),
          unit_name: z.coerce.string(),
          state: z.coerce.string(),
          bullets: z.array(z.coerce.string()),
        })
        .optional(),
    })
    .optional(),
  marketplace_purchase: z.object({
    billing_cycle: z.coerce.string().optional(),
    next_billing_date: z.coerce.string().optional(),
    is_installed: z.coerce.boolean().optional(),
    unit_count: z.coerce.number().optional(),
    on_free_trial: z.coerce.boolean().optional(),
    free_trial_ends_on: z.coerce.string().optional(),
    updated_at: z.coerce.string().optional(),
    plan: z
      .object({
        url: z.coerce.string(),
        accounts_url: z.coerce.string(),
        id: z.coerce.number(),
        number: z.coerce.number(),
        name: z.coerce.string(),
        description: z.coerce.string(),
        monthly_price_in_cents: z.coerce.number(),
        yearly_price_in_cents: z.coerce.number(),
        price_model: z.enum(["FREE", "FLAT_RATE", "PER_UNIT"]),
        has_free_trial: z.coerce.boolean(),
        unit_name: z.coerce.string(),
        state: z.coerce.string(),
        bullets: z.array(z.coerce.string()),
      })
      .optional(),
  }),
})

export const s_merged_upstream = z.object({
  message: z.coerce.string().optional(),
  merge_type: z.enum(["merge", "fast-forward", "none"]).optional(),
  base_branch: z.coerce.string().optional(),
})

export const s_migration = z.object({
  id: z.coerce.number(),
  owner: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  guid: z.coerce.string(),
  state: z.coerce.string(),
  lock_repositories: z.coerce.boolean(),
  exclude_metadata: z.coerce.boolean(),
  exclude_git_data: z.coerce.boolean(),
  exclude_attachments: z.coerce.boolean(),
  exclude_releases: z.coerce.boolean(),
  exclude_owner_projects: z.coerce.boolean(),
  org_metadata_only: z.coerce.boolean(),
  repositories: z.array(
    z.object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      full_name: z.coerce.string(),
      license: z.object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        spdx_id: z.coerce.string(),
        node_id: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      }),
      organization: z
        .object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        })
        .optional(),
      forks: z.coerce.number(),
      permissions: z
        .object({
          admin: z.coerce.boolean(),
          pull: z.coerce.boolean(),
          triage: z.coerce.boolean().optional(),
          push: z.coerce.boolean(),
          maintain: z.coerce.boolean().optional(),
        })
        .optional(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      private: z.coerce.boolean(),
      html_url: z.coerce.string(),
      description: z.coerce.string(),
      fork: z.coerce.boolean(),
      url: z.coerce.string(),
      archive_url: z.coerce.string(),
      assignees_url: z.coerce.string(),
      blobs_url: z.coerce.string(),
      branches_url: z.coerce.string(),
      collaborators_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      compare_url: z.coerce.string(),
      contents_url: z.coerce.string(),
      contributors_url: z.coerce.string(),
      deployments_url: z.coerce.string(),
      downloads_url: z.coerce.string(),
      events_url: z.coerce.string(),
      forks_url: z.coerce.string(),
      git_commits_url: z.coerce.string(),
      git_refs_url: z.coerce.string(),
      git_tags_url: z.coerce.string(),
      git_url: z.coerce.string(),
      issue_comment_url: z.coerce.string(),
      issue_events_url: z.coerce.string(),
      issues_url: z.coerce.string(),
      keys_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      languages_url: z.coerce.string(),
      merges_url: z.coerce.string(),
      milestones_url: z.coerce.string(),
      notifications_url: z.coerce.string(),
      pulls_url: z.coerce.string(),
      releases_url: z.coerce.string(),
      ssh_url: z.coerce.string(),
      stargazers_url: z.coerce.string(),
      statuses_url: z.coerce.string(),
      subscribers_url: z.coerce.string(),
      subscription_url: z.coerce.string(),
      tags_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      trees_url: z.coerce.string(),
      clone_url: z.coerce.string(),
      mirror_url: z.coerce.string(),
      hooks_url: z.coerce.string(),
      svn_url: z.coerce.string(),
      homepage: z.coerce.string(),
      language: z.coerce.string(),
      forks_count: z.coerce.number(),
      stargazers_count: z.coerce.number(),
      watchers_count: z.coerce.number(),
      size: z.coerce.number(),
      default_branch: z.coerce.string(),
      open_issues_count: z.coerce.number(),
      is_template: z.coerce.boolean().optional(),
      topics: z.array(z.coerce.string()).optional(),
      has_issues: z.coerce.boolean(),
      has_projects: z.coerce.boolean(),
      has_wiki: z.coerce.boolean(),
      has_pages: z.coerce.boolean(),
      has_downloads: z.coerce.boolean(),
      has_discussions: z.coerce.boolean().optional(),
      archived: z.coerce.boolean(),
      disabled: z.coerce.boolean(),
      visibility: z.coerce.string().optional(),
      pushed_at: z.coerce.string().datetime({ offset: true }),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      allow_rebase_merge: z.coerce.boolean().optional(),
      template_repository: z
        .object({
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          full_name: z.coerce.string().optional(),
          owner: z
            .object({
              login: z.coerce.string().optional(),
              id: z.coerce.number().optional(),
              node_id: z.coerce.string().optional(),
              avatar_url: z.coerce.string().optional(),
              gravatar_id: z.coerce.string().optional(),
              url: z.coerce.string().optional(),
              html_url: z.coerce.string().optional(),
              followers_url: z.coerce.string().optional(),
              following_url: z.coerce.string().optional(),
              gists_url: z.coerce.string().optional(),
              starred_url: z.coerce.string().optional(),
              subscriptions_url: z.coerce.string().optional(),
              organizations_url: z.coerce.string().optional(),
              repos_url: z.coerce.string().optional(),
              events_url: z.coerce.string().optional(),
              received_events_url: z.coerce.string().optional(),
              type: z.coerce.string().optional(),
              site_admin: z.coerce.boolean().optional(),
            })
            .optional(),
          private: z.coerce.boolean().optional(),
          html_url: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          fork: z.coerce.boolean().optional(),
          url: z.coerce.string().optional(),
          archive_url: z.coerce.string().optional(),
          assignees_url: z.coerce.string().optional(),
          blobs_url: z.coerce.string().optional(),
          branches_url: z.coerce.string().optional(),
          collaborators_url: z.coerce.string().optional(),
          comments_url: z.coerce.string().optional(),
          commits_url: z.coerce.string().optional(),
          compare_url: z.coerce.string().optional(),
          contents_url: z.coerce.string().optional(),
          contributors_url: z.coerce.string().optional(),
          deployments_url: z.coerce.string().optional(),
          downloads_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          forks_url: z.coerce.string().optional(),
          git_commits_url: z.coerce.string().optional(),
          git_refs_url: z.coerce.string().optional(),
          git_tags_url: z.coerce.string().optional(),
          git_url: z.coerce.string().optional(),
          issue_comment_url: z.coerce.string().optional(),
          issue_events_url: z.coerce.string().optional(),
          issues_url: z.coerce.string().optional(),
          keys_url: z.coerce.string().optional(),
          labels_url: z.coerce.string().optional(),
          languages_url: z.coerce.string().optional(),
          merges_url: z.coerce.string().optional(),
          milestones_url: z.coerce.string().optional(),
          notifications_url: z.coerce.string().optional(),
          pulls_url: z.coerce.string().optional(),
          releases_url: z.coerce.string().optional(),
          ssh_url: z.coerce.string().optional(),
          stargazers_url: z.coerce.string().optional(),
          statuses_url: z.coerce.string().optional(),
          subscribers_url: z.coerce.string().optional(),
          subscription_url: z.coerce.string().optional(),
          tags_url: z.coerce.string().optional(),
          teams_url: z.coerce.string().optional(),
          trees_url: z.coerce.string().optional(),
          clone_url: z.coerce.string().optional(),
          mirror_url: z.coerce.string().optional(),
          hooks_url: z.coerce.string().optional(),
          svn_url: z.coerce.string().optional(),
          homepage: z.coerce.string().optional(),
          language: z.coerce.string().optional(),
          forks_count: z.coerce.number().optional(),
          stargazers_count: z.coerce.number().optional(),
          watchers_count: z.coerce.number().optional(),
          size: z.coerce.number().optional(),
          default_branch: z.coerce.string().optional(),
          open_issues_count: z.coerce.number().optional(),
          is_template: z.coerce.boolean().optional(),
          topics: z.array(z.coerce.string()).optional(),
          has_issues: z.coerce.boolean().optional(),
          has_projects: z.coerce.boolean().optional(),
          has_wiki: z.coerce.boolean().optional(),
          has_pages: z.coerce.boolean().optional(),
          has_downloads: z.coerce.boolean().optional(),
          archived: z.coerce.boolean().optional(),
          disabled: z.coerce.boolean().optional(),
          visibility: z.coerce.string().optional(),
          pushed_at: z.coerce.string().optional(),
          created_at: z.coerce.string().optional(),
          updated_at: z.coerce.string().optional(),
          permissions: z
            .object({
              admin: z.coerce.boolean().optional(),
              maintain: z.coerce.boolean().optional(),
              push: z.coerce.boolean().optional(),
              triage: z.coerce.boolean().optional(),
              pull: z.coerce.boolean().optional(),
            })
            .optional(),
          allow_rebase_merge: z.coerce.boolean().optional(),
          temp_clone_token: z.coerce.string().optional(),
          allow_squash_merge: z.coerce.boolean().optional(),
          allow_auto_merge: z.coerce.boolean().optional(),
          delete_branch_on_merge: z.coerce.boolean().optional(),
          allow_update_branch: z.coerce.boolean().optional(),
          use_squash_pr_title_as_default: z.coerce.boolean().optional(),
          squash_merge_commit_title: z
            .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
            .optional(),
          squash_merge_commit_message: z
            .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
            .optional(),
          merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
          merge_commit_message: z
            .enum(["PR_BODY", "PR_TITLE", "BLANK"])
            .optional(),
          allow_merge_commit: z.coerce.boolean().optional(),
          subscribers_count: z.coerce.number().optional(),
          network_count: z.coerce.number().optional(),
        })
        .optional(),
      temp_clone_token: z.coerce.string().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_auto_merge: z.coerce.boolean().optional(),
      delete_branch_on_merge: z.coerce.boolean().optional(),
      allow_update_branch: z.coerce.boolean().optional(),
      use_squash_pr_title_as_default: z.coerce.boolean().optional(),
      squash_merge_commit_title: z
        .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
        .optional(),
      squash_merge_commit_message: z
        .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
        .optional(),
      merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
      merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      allow_forking: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
      subscribers_count: z.coerce.number().optional(),
      network_count: z.coerce.number().optional(),
      open_issues: z.coerce.number(),
      watchers: z.coerce.number(),
      master_branch: z.coerce.string().optional(),
      starred_at: z.coerce.string().optional(),
      anonymous_access_enabled: z.coerce.boolean().optional(),
    })
  ),
  url: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  node_id: z.coerce.string(),
  archive_url: z.coerce.string().optional(),
  exclude: z.array(z.object({})).optional(),
})

export const s_milestone = z.object({
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  labels_url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  number: z.coerce.number(),
  state: z.enum(["open", "closed"]),
  title: z.coerce.string(),
  description: z.coerce.string(),
  creator: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  open_issues: z.coerce.number(),
  closed_issues: z.coerce.number(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  closed_at: z.coerce.string().datetime({ offset: true }),
  due_on: z.coerce.string().datetime({ offset: true }),
})

export const s_minimal_repository = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  full_name: z.coerce.string(),
  owner: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  private: z.coerce.boolean(),
  html_url: z.coerce.string(),
  description: z.coerce.string(),
  fork: z.coerce.boolean(),
  url: z.coerce.string(),
  archive_url: z.coerce.string(),
  assignees_url: z.coerce.string(),
  blobs_url: z.coerce.string(),
  branches_url: z.coerce.string(),
  collaborators_url: z.coerce.string(),
  comments_url: z.coerce.string(),
  commits_url: z.coerce.string(),
  compare_url: z.coerce.string(),
  contents_url: z.coerce.string(),
  contributors_url: z.coerce.string(),
  deployments_url: z.coerce.string(),
  downloads_url: z.coerce.string(),
  events_url: z.coerce.string(),
  forks_url: z.coerce.string(),
  git_commits_url: z.coerce.string(),
  git_refs_url: z.coerce.string(),
  git_tags_url: z.coerce.string(),
  git_url: z.coerce.string().optional(),
  issue_comment_url: z.coerce.string(),
  issue_events_url: z.coerce.string(),
  issues_url: z.coerce.string(),
  keys_url: z.coerce.string(),
  labels_url: z.coerce.string(),
  languages_url: z.coerce.string(),
  merges_url: z.coerce.string(),
  milestones_url: z.coerce.string(),
  notifications_url: z.coerce.string(),
  pulls_url: z.coerce.string(),
  releases_url: z.coerce.string(),
  ssh_url: z.coerce.string().optional(),
  stargazers_url: z.coerce.string(),
  statuses_url: z.coerce.string(),
  subscribers_url: z.coerce.string(),
  subscription_url: z.coerce.string(),
  tags_url: z.coerce.string(),
  teams_url: z.coerce.string(),
  trees_url: z.coerce.string(),
  clone_url: z.coerce.string().optional(),
  mirror_url: z.coerce.string().optional(),
  hooks_url: z.coerce.string(),
  svn_url: z.coerce.string().optional(),
  homepage: z.coerce.string().optional(),
  language: z.coerce.string().optional(),
  forks_count: z.coerce.number().optional(),
  stargazers_count: z.coerce.number().optional(),
  watchers_count: z.coerce.number().optional(),
  size: z.coerce.number().optional(),
  default_branch: z.coerce.string().optional(),
  open_issues_count: z.coerce.number().optional(),
  is_template: z.coerce.boolean().optional(),
  topics: z.array(z.coerce.string()).optional(),
  has_issues: z.coerce.boolean().optional(),
  has_projects: z.coerce.boolean().optional(),
  has_wiki: z.coerce.boolean().optional(),
  has_pages: z.coerce.boolean().optional(),
  has_downloads: z.coerce.boolean().optional(),
  has_discussions: z.coerce.boolean().optional(),
  archived: z.coerce.boolean().optional(),
  disabled: z.coerce.boolean().optional(),
  visibility: z.coerce.string().optional(),
  pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
  created_at: z.coerce.string().datetime({ offset: true }).optional(),
  updated_at: z.coerce.string().datetime({ offset: true }).optional(),
  permissions: z
    .object({
      admin: z.coerce.boolean().optional(),
      maintain: z.coerce.boolean().optional(),
      push: z.coerce.boolean().optional(),
      triage: z.coerce.boolean().optional(),
      pull: z.coerce.boolean().optional(),
    })
    .optional(),
  role_name: z.coerce.string().optional(),
  temp_clone_token: z.coerce.string().optional(),
  delete_branch_on_merge: z.coerce.boolean().optional(),
  subscribers_count: z.coerce.number().optional(),
  network_count: z.coerce.number().optional(),
  code_of_conduct: z
    .object({
      key: z.coerce.string(),
      name: z.coerce.string(),
      url: z.coerce.string(),
      body: z.coerce.string().optional(),
      html_url: z.coerce.string(),
    })
    .optional(),
  license: z
    .object({
      key: z.coerce.string().optional(),
      name: z.coerce.string().optional(),
      spdx_id: z.coerce.string().optional(),
      url: z.coerce.string().optional(),
      node_id: z.coerce.string().optional(),
    })
    .optional(),
  forks: z.coerce.number().optional(),
  open_issues: z.coerce.number().optional(),
  watchers: z.coerce.number().optional(),
  allow_forking: z.coerce.boolean().optional(),
  web_commit_signoff_required: z.coerce.boolean().optional(),
  security_and_analysis: z
    .object({
      advanced_security: z
        .object({ status: z.enum(["enabled", "disabled"]).optional() })
        .optional(),
      secret_scanning: z
        .object({ status: z.enum(["enabled", "disabled"]).optional() })
        .optional(),
      secret_scanning_push_protection: z
        .object({ status: z.enum(["enabled", "disabled"]).optional() })
        .optional(),
    })
    .optional(),
})

export const s_oidc_custom_sub = z.object({
  include_claim_keys: z.array(z.coerce.string()),
})

export const s_oidc_custom_sub_repo = z.object({
  use_default: z.coerce.boolean(),
  include_claim_keys: z.array(z.coerce.string()).optional(),
})

export const s_org_hook = z.object({
  id: z.coerce.number(),
  url: z.coerce.string(),
  ping_url: z.coerce.string(),
  deliveries_url: z.coerce.string().optional(),
  name: z.coerce.string(),
  events: z.array(z.coerce.string()),
  active: z.coerce.boolean(),
  config: z.object({
    url: z.coerce.string().optional(),
    insecure_ssl: z.coerce.string().optional(),
    content_type: z.coerce.string().optional(),
    secret: z.coerce.string().optional(),
  }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  created_at: z.coerce.string().datetime({ offset: true }),
  type: z.coerce.string(),
})

export const s_org_membership = z.object({
  url: z.coerce.string(),
  state: z.enum(["active", "pending"]),
  role: z.enum(["admin", "member", "billing_manager"]),
  organization_url: z.coerce.string(),
  organization: z.object({
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    hooks_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    members_url: z.coerce.string(),
    public_members_url: z.coerce.string(),
    avatar_url: z.coerce.string(),
    description: z.coerce.string(),
  }),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  permissions: z
    .object({ can_create_repository: z.coerce.boolean() })
    .optional(),
})

export const s_organization_actions_secret = z.object({
  name: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  visibility: z.enum(["all", "private", "selected"]),
  selected_repositories_url: z.coerce.string().optional(),
})

export const s_organization_actions_variable = z.object({
  name: z.coerce.string(),
  value: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  visibility: z.enum(["all", "private", "selected"]),
  selected_repositories_url: z.coerce.string().optional(),
})

export const s_organization_dependabot_secret = z.object({
  name: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  visibility: z.enum(["all", "private", "selected"]),
  selected_repositories_url: z.coerce.string().optional(),
})

export const s_organization_full = z.object({
  login: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  url: z.coerce.string(),
  repos_url: z.coerce.string(),
  events_url: z.coerce.string(),
  hooks_url: z.coerce.string(),
  issues_url: z.coerce.string(),
  members_url: z.coerce.string(),
  public_members_url: z.coerce.string(),
  avatar_url: z.coerce.string(),
  description: z.coerce.string(),
  name: z.coerce.string().optional(),
  company: z.coerce.string().optional(),
  blog: z.coerce.string().optional(),
  location: z.coerce.string().optional(),
  email: z.coerce.string().email().optional(),
  twitter_username: z.coerce.string().optional(),
  is_verified: z.coerce.boolean().optional(),
  has_organization_projects: z.coerce.boolean(),
  has_repository_projects: z.coerce.boolean(),
  public_repos: z.coerce.number(),
  public_gists: z.coerce.number(),
  followers: z.coerce.number(),
  following: z.coerce.number(),
  html_url: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  type: z.coerce.string(),
  total_private_repos: z.coerce.number().optional(),
  owned_private_repos: z.coerce.number().optional(),
  private_gists: z.coerce.number().optional(),
  disk_usage: z.coerce.number().optional(),
  collaborators: z.coerce.number().optional(),
  billing_email: z.coerce.string().email().optional(),
  plan: z
    .object({
      name: z.coerce.string(),
      space: z.coerce.number(),
      private_repos: z.coerce.number(),
      filled_seats: z.coerce.number().optional(),
      seats: z.coerce.number().optional(),
    })
    .optional(),
  default_repository_permission: z.coerce.string().optional(),
  members_can_create_repositories: z.coerce.boolean().optional(),
  two_factor_requirement_enabled: z.coerce.boolean().optional(),
  members_allowed_repository_creation_type: z.coerce.string().optional(),
  members_can_create_public_repositories: z.coerce.boolean().optional(),
  members_can_create_private_repositories: z.coerce.boolean().optional(),
  members_can_create_internal_repositories: z.coerce.boolean().optional(),
  members_can_create_pages: z.coerce.boolean().optional(),
  members_can_create_public_pages: z.coerce.boolean().optional(),
  members_can_create_private_pages: z.coerce.boolean().optional(),
  members_can_fork_private_repositories: z.coerce.boolean().optional(),
  web_commit_signoff_required: z.coerce.boolean().optional(),
  updated_at: z.coerce.string().datetime({ offset: true }),
  advanced_security_enabled_for_new_repositories: z.coerce.boolean().optional(),
  dependabot_alerts_enabled_for_new_repositories: z.coerce.boolean().optional(),
  dependabot_security_updates_enabled_for_new_repositories: z.coerce
    .boolean()
    .optional(),
  dependency_graph_enabled_for_new_repositories: z.coerce.boolean().optional(),
  secret_scanning_enabled_for_new_repositories: z.coerce.boolean().optional(),
  secret_scanning_push_protection_enabled_for_new_repositories: z.coerce
    .boolean()
    .optional(),
  secret_scanning_push_protection_custom_link_enabled: z.coerce
    .boolean()
    .optional(),
  secret_scanning_push_protection_custom_link: z.coerce.string().optional(),
})

export const s_organization_invitation = z.object({
  id: z.coerce.number(),
  login: z.coerce.string(),
  email: z.coerce.string(),
  role: z.coerce.string(),
  created_at: z.coerce.string(),
  failed_at: z.coerce.string().optional(),
  failed_reason: z.coerce.string().optional(),
  inviter: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  team_count: z.coerce.number(),
  node_id: z.coerce.string(),
  invitation_teams_url: z.coerce.string(),
  invitation_source: z.coerce.string().optional(),
})

export const s_package = z.object({
  id: z.coerce.number(),
  name: z.coerce.string(),
  package_type: z.enum([
    "npm",
    "maven",
    "rubygems",
    "docker",
    "nuget",
    "container",
  ]),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  version_count: z.coerce.number(),
  visibility: z.enum(["private", "public"]),
  owner: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  repository: z
    .object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      full_name: z.coerce.string(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      private: z.coerce.boolean(),
      html_url: z.coerce.string(),
      description: z.coerce.string(),
      fork: z.coerce.boolean(),
      url: z.coerce.string(),
      archive_url: z.coerce.string(),
      assignees_url: z.coerce.string(),
      blobs_url: z.coerce.string(),
      branches_url: z.coerce.string(),
      collaborators_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      compare_url: z.coerce.string(),
      contents_url: z.coerce.string(),
      contributors_url: z.coerce.string(),
      deployments_url: z.coerce.string(),
      downloads_url: z.coerce.string(),
      events_url: z.coerce.string(),
      forks_url: z.coerce.string(),
      git_commits_url: z.coerce.string(),
      git_refs_url: z.coerce.string(),
      git_tags_url: z.coerce.string(),
      git_url: z.coerce.string().optional(),
      issue_comment_url: z.coerce.string(),
      issue_events_url: z.coerce.string(),
      issues_url: z.coerce.string(),
      keys_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      languages_url: z.coerce.string(),
      merges_url: z.coerce.string(),
      milestones_url: z.coerce.string(),
      notifications_url: z.coerce.string(),
      pulls_url: z.coerce.string(),
      releases_url: z.coerce.string(),
      ssh_url: z.coerce.string().optional(),
      stargazers_url: z.coerce.string(),
      statuses_url: z.coerce.string(),
      subscribers_url: z.coerce.string(),
      subscription_url: z.coerce.string(),
      tags_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      trees_url: z.coerce.string(),
      clone_url: z.coerce.string().optional(),
      mirror_url: z.coerce.string().optional(),
      hooks_url: z.coerce.string(),
      svn_url: z.coerce.string().optional(),
      homepage: z.coerce.string().optional(),
      language: z.coerce.string().optional(),
      forks_count: z.coerce.number().optional(),
      stargazers_count: z.coerce.number().optional(),
      watchers_count: z.coerce.number().optional(),
      size: z.coerce.number().optional(),
      default_branch: z.coerce.string().optional(),
      open_issues_count: z.coerce.number().optional(),
      is_template: z.coerce.boolean().optional(),
      topics: z.array(z.coerce.string()).optional(),
      has_issues: z.coerce.boolean().optional(),
      has_projects: z.coerce.boolean().optional(),
      has_wiki: z.coerce.boolean().optional(),
      has_pages: z.coerce.boolean().optional(),
      has_downloads: z.coerce.boolean().optional(),
      has_discussions: z.coerce.boolean().optional(),
      archived: z.coerce.boolean().optional(),
      disabled: z.coerce.boolean().optional(),
      visibility: z.coerce.string().optional(),
      pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
      created_at: z.coerce.string().datetime({ offset: true }).optional(),
      updated_at: z.coerce.string().datetime({ offset: true }).optional(),
      permissions: z
        .object({
          admin: z.coerce.boolean().optional(),
          maintain: z.coerce.boolean().optional(),
          push: z.coerce.boolean().optional(),
          triage: z.coerce.boolean().optional(),
          pull: z.coerce.boolean().optional(),
        })
        .optional(),
      role_name: z.coerce.string().optional(),
      temp_clone_token: z.coerce.string().optional(),
      delete_branch_on_merge: z.coerce.boolean().optional(),
      subscribers_count: z.coerce.number().optional(),
      network_count: z.coerce.number().optional(),
      code_of_conduct: z
        .object({
          key: z.coerce.string(),
          name: z.coerce.string(),
          url: z.coerce.string(),
          body: z.coerce.string().optional(),
          html_url: z.coerce.string(),
        })
        .optional(),
      license: z
        .object({
          key: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          spdx_id: z.coerce.string().optional(),
          url: z.coerce.string().optional(),
          node_id: z.coerce.string().optional(),
        })
        .optional(),
      forks: z.coerce.number().optional(),
      open_issues: z.coerce.number().optional(),
      watchers: z.coerce.number().optional(),
      allow_forking: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
      security_and_analysis: z
        .object({
          advanced_security: z
            .object({ status: z.enum(["enabled", "disabled"]).optional() })
            .optional(),
          secret_scanning: z
            .object({ status: z.enum(["enabled", "disabled"]).optional() })
            .optional(),
          secret_scanning_push_protection: z
            .object({ status: z.enum(["enabled", "disabled"]).optional() })
            .optional(),
        })
        .optional(),
    })
    .optional(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
})

export const s_package_version = z.object({
  id: z.coerce.number(),
  name: z.coerce.string(),
  url: z.coerce.string(),
  package_html_url: z.coerce.string(),
  html_url: z.coerce.string().optional(),
  license: z.coerce.string().optional(),
  description: z.coerce.string().optional(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  deleted_at: z.coerce.string().datetime({ offset: true }).optional(),
  metadata: z
    .object({
      package_type: z.enum([
        "npm",
        "maven",
        "rubygems",
        "docker",
        "nuget",
        "container",
      ]),
      container: z.object({ tags: z.array(z.coerce.string()) }).optional(),
      docker: z
        .object({ tag: z.array(z.coerce.string()).optional() })
        .optional(),
    })
    .optional(),
})

export const s_packages_billing_usage = z.object({
  total_gigabytes_bandwidth_used: z.coerce.number(),
  total_paid_gigabytes_bandwidth_used: z.coerce.number(),
  included_gigabytes_bandwidth: z.coerce.number(),
})

export const s_page = z.object({
  url: z.coerce.string(),
  status: z.enum(["built", "building", "errored"]),
  cname: z.coerce.string(),
  protected_domain_state: z
    .enum(["pending", "verified", "unverified"])
    .optional(),
  pending_domain_unverified_at: z.coerce
    .string()
    .datetime({ offset: true })
    .optional(),
  custom_404: z.coerce.boolean(),
  html_url: z.coerce.string().optional(),
  build_type: z.enum(["legacy", "workflow"]).optional(),
  source: z
    .object({ branch: z.coerce.string(), path: z.coerce.string() })
    .optional(),
  public: z.coerce.boolean(),
  https_certificate: z
    .object({
      state: z.enum([
        "new",
        "authorization_created",
        "authorization_pending",
        "authorized",
        "authorization_revoked",
        "issued",
        "uploaded",
        "approved",
        "errored",
        "bad_authz",
        "destroy_pending",
        "dns_changed",
      ]),
      description: z.coerce.string(),
      domains: z.array(z.coerce.string()),
      expires_at: z.coerce.string().optional(),
    })
    .optional(),
  https_enforced: z.coerce.boolean().optional(),
})

export const s_page_build = z.object({
  url: z.coerce.string(),
  status: z.coerce.string(),
  error: z.object({ message: z.coerce.string() }),
  pusher: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  commit: z.coerce.string(),
  duration: z.coerce.number(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
})

export const s_page_build_status = z.object({
  url: z.coerce.string(),
  status: z.coerce.string(),
})

export const s_page_deployment = z.object({
  status_url: z.coerce.string(),
  page_url: z.coerce.string(),
  preview_url: z.coerce.string().optional(),
})

export const s_pages_health_check = z.object({
  domain: z
    .object({
      host: z.coerce.string().optional(),
      uri: z.coerce.string().optional(),
      nameservers: z.coerce.string().optional(),
      dns_resolves: z.coerce.boolean().optional(),
      is_proxied: z.coerce.boolean().optional(),
      is_cloudflare_ip: z.coerce.boolean().optional(),
      is_fastly_ip: z.coerce.boolean().optional(),
      is_old_ip_address: z.coerce.boolean().optional(),
      is_a_record: z.coerce.boolean().optional(),
      has_cname_record: z.coerce.boolean().optional(),
      has_mx_records_present: z.coerce.boolean().optional(),
      is_valid_domain: z.coerce.boolean().optional(),
      is_apex_domain: z.coerce.boolean().optional(),
      should_be_a_record: z.coerce.boolean().optional(),
      is_cname_to_github_user_domain: z.coerce.boolean().optional(),
      is_cname_to_pages_dot_github_dot_com: z.coerce.boolean().optional(),
      is_cname_to_fastly: z.coerce.boolean().optional(),
      is_pointed_to_github_pages_ip: z.coerce.boolean().optional(),
      is_non_github_pages_ip_present: z.coerce.boolean().optional(),
      is_pages_domain: z.coerce.boolean().optional(),
      is_served_by_pages: z.coerce.boolean().optional(),
      is_valid: z.coerce.boolean().optional(),
      reason: z.coerce.string().optional(),
      responds_to_https: z.coerce.boolean().optional(),
      enforces_https: z.coerce.boolean().optional(),
      https_error: z.coerce.string().optional(),
      is_https_eligible: z.coerce.boolean().optional(),
      caa_error: z.coerce.string().optional(),
    })
    .optional(),
  alt_domain: z
    .object({
      host: z.coerce.string().optional(),
      uri: z.coerce.string().optional(),
      nameservers: z.coerce.string().optional(),
      dns_resolves: z.coerce.boolean().optional(),
      is_proxied: z.coerce.boolean().optional(),
      is_cloudflare_ip: z.coerce.boolean().optional(),
      is_fastly_ip: z.coerce.boolean().optional(),
      is_old_ip_address: z.coerce.boolean().optional(),
      is_a_record: z.coerce.boolean().optional(),
      has_cname_record: z.coerce.boolean().optional(),
      has_mx_records_present: z.coerce.boolean().optional(),
      is_valid_domain: z.coerce.boolean().optional(),
      is_apex_domain: z.coerce.boolean().optional(),
      should_be_a_record: z.coerce.boolean().optional(),
      is_cname_to_github_user_domain: z.coerce.boolean().optional(),
      is_cname_to_pages_dot_github_dot_com: z.coerce.boolean().optional(),
      is_cname_to_fastly: z.coerce.boolean().optional(),
      is_pointed_to_github_pages_ip: z.coerce.boolean().optional(),
      is_non_github_pages_ip_present: z.coerce.boolean().optional(),
      is_pages_domain: z.coerce.boolean().optional(),
      is_served_by_pages: z.coerce.boolean().optional(),
      is_valid: z.coerce.boolean().optional(),
      reason: z.coerce.string().optional(),
      responds_to_https: z.coerce.boolean().optional(),
      enforces_https: z.coerce.boolean().optional(),
      https_error: z.coerce.string().optional(),
      is_https_eligible: z.coerce.boolean().optional(),
      caa_error: z.coerce.string().optional(),
    })
    .optional(),
})

export const s_participation_stats = z.object({
  all: z.array(z.coerce.number()),
  owner: z.array(z.coerce.number()),
})

export const s_porter_author = z.object({
  id: z.coerce.number(),
  remote_id: z.coerce.string(),
  remote_name: z.coerce.string(),
  email: z.coerce.string(),
  name: z.coerce.string(),
  url: z.coerce.string(),
  import_url: z.coerce.string(),
})

export const s_private_user = z.object({
  login: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  avatar_url: z.coerce.string(),
  gravatar_id: z.coerce.string(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  followers_url: z.coerce.string(),
  following_url: z.coerce.string(),
  gists_url: z.coerce.string(),
  starred_url: z.coerce.string(),
  subscriptions_url: z.coerce.string(),
  organizations_url: z.coerce.string(),
  repos_url: z.coerce.string(),
  events_url: z.coerce.string(),
  received_events_url: z.coerce.string(),
  type: z.coerce.string(),
  site_admin: z.coerce.boolean(),
  name: z.coerce.string(),
  company: z.coerce.string(),
  blog: z.coerce.string(),
  location: z.coerce.string(),
  email: z.coerce.string().email(),
  hireable: z.coerce.boolean(),
  bio: z.coerce.string(),
  twitter_username: z.coerce.string().optional(),
  public_repos: z.coerce.number(),
  public_gists: z.coerce.number(),
  followers: z.coerce.number(),
  following: z.coerce.number(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  private_gists: z.coerce.number(),
  total_private_repos: z.coerce.number(),
  owned_private_repos: z.coerce.number(),
  disk_usage: z.coerce.number(),
  collaborators: z.coerce.number(),
  two_factor_authentication: z.coerce.boolean(),
  plan: z
    .object({
      collaborators: z.coerce.number(),
      name: z.coerce.string(),
      space: z.coerce.number(),
      private_repos: z.coerce.number(),
    })
    .optional(),
  suspended_at: z.coerce.string().datetime({ offset: true }).optional(),
  business_plus: z.coerce.boolean().optional(),
  ldap_dn: z.coerce.string().optional(),
})

export const s_project = z.object({
  owner_url: z.coerce.string(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  columns_url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  body: z.coerce.string(),
  number: z.coerce.number(),
  state: z.coerce.string(),
  creator: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  organization_permission: z
    .enum(["read", "write", "admin", "none"])
    .optional(),
  private: z.coerce.boolean().optional(),
})

export const s_project_card = z.object({
  url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  note: z.coerce.string(),
  creator: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  archived: z.coerce.boolean().optional(),
  column_name: z.coerce.string().optional(),
  project_id: z.coerce.string().optional(),
  column_url: z.coerce.string(),
  content_url: z.coerce.string().optional(),
  project_url: z.coerce.string(),
})

export const s_project_collaborator_permission = z.object({
  permission: z.coerce.string(),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
})

export const s_project_column = z.object({
  url: z.coerce.string(),
  project_url: z.coerce.string(),
  cards_url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
})

export const s_protected_branch = z.object({
  url: z.coerce.string(),
  required_status_checks: z
    .object({
      url: z.coerce.string(),
      strict: z.coerce.boolean(),
      contexts: z.array(z.coerce.string()),
      checks: z.array(
        z.object({ context: z.coerce.string(), app_id: z.coerce.number() })
      ),
      contexts_url: z.coerce.string(),
    })
    .optional(),
  required_pull_request_reviews: z
    .object({
      url: z.coerce.string(),
      dismiss_stale_reviews: z.coerce.boolean().optional(),
      require_code_owner_reviews: z.coerce.boolean().optional(),
      required_approving_review_count: z.coerce.number().optional(),
      require_last_push_approval: z.coerce.boolean().optional(),
      dismissal_restrictions: z
        .object({
          url: z.coerce.string(),
          users_url: z.coerce.string(),
          teams_url: z.coerce.string(),
          users: z.array(
            z.object({
              name: z.coerce.string().optional(),
              email: z.coerce.string().optional(),
              login: z.coerce.string(),
              id: z.coerce.number(),
              node_id: z.coerce.string(),
              avatar_url: z.coerce.string(),
              gravatar_id: z.coerce.string(),
              url: z.coerce.string(),
              html_url: z.coerce.string(),
              followers_url: z.coerce.string(),
              following_url: z.coerce.string(),
              gists_url: z.coerce.string(),
              starred_url: z.coerce.string(),
              subscriptions_url: z.coerce.string(),
              organizations_url: z.coerce.string(),
              repos_url: z.coerce.string(),
              events_url: z.coerce.string(),
              received_events_url: z.coerce.string(),
              type: z.coerce.string(),
              site_admin: z.coerce.boolean(),
              starred_at: z.coerce.string().optional(),
            })
          ),
          teams: z.array(
            z.object({
              id: z.coerce.number(),
              node_id: z.coerce.string(),
              name: z.coerce.string(),
              slug: z.coerce.string(),
              description: z.coerce.string(),
              privacy: z.coerce.string().optional(),
              permission: z.coerce.string(),
              permissions: z
                .object({
                  pull: z.coerce.boolean(),
                  triage: z.coerce.boolean(),
                  push: z.coerce.boolean(),
                  maintain: z.coerce.boolean(),
                  admin: z.coerce.boolean(),
                })
                .optional(),
              url: z.coerce.string(),
              html_url: z.coerce.string(),
              members_url: z.coerce.string(),
              repositories_url: z.coerce.string(),
              parent: z.object({
                id: z.coerce.number(),
                node_id: z.coerce.string(),
                url: z.coerce.string(),
                members_url: z.coerce.string(),
                name: z.coerce.string(),
                description: z.coerce.string(),
                permission: z.coerce.string(),
                privacy: z.coerce.string().optional(),
                html_url: z.coerce.string(),
                repositories_url: z.coerce.string(),
                slug: z.coerce.string(),
                ldap_dn: z.coerce.string().optional(),
              }),
            })
          ),
          apps: z
            .array(
              z.object({
                id: z.coerce.number(),
                slug: z.coerce.string().optional(),
                node_id: z.coerce.string(),
                owner: z.object({
                  name: z.coerce.string().optional(),
                  email: z.coerce.string().optional(),
                  login: z.coerce.string(),
                  id: z.coerce.number(),
                  node_id: z.coerce.string(),
                  avatar_url: z.coerce.string(),
                  gravatar_id: z.coerce.string(),
                  url: z.coerce.string(),
                  html_url: z.coerce.string(),
                  followers_url: z.coerce.string(),
                  following_url: z.coerce.string(),
                  gists_url: z.coerce.string(),
                  starred_url: z.coerce.string(),
                  subscriptions_url: z.coerce.string(),
                  organizations_url: z.coerce.string(),
                  repos_url: z.coerce.string(),
                  events_url: z.coerce.string(),
                  received_events_url: z.coerce.string(),
                  type: z.coerce.string(),
                  site_admin: z.coerce.boolean(),
                  starred_at: z.coerce.string().optional(),
                }),
                name: z.coerce.string(),
                description: z.coerce.string(),
                external_url: z.coerce.string(),
                html_url: z.coerce.string(),
                created_at: z.coerce.string().datetime({ offset: true }),
                updated_at: z.coerce.string().datetime({ offset: true }),
                permissions: z.object({
                  issues: z.coerce.string().optional(),
                  checks: z.coerce.string().optional(),
                  metadata: z.coerce.string().optional(),
                  contents: z.coerce.string().optional(),
                  deployments: z.coerce.string().optional(),
                }),
                events: z.array(z.coerce.string()),
                installations_count: z.coerce.number().optional(),
                client_id: z.coerce.string().optional(),
                client_secret: z.coerce.string().optional(),
                webhook_secret: z.coerce.string().optional(),
                pem: z.coerce.string().optional(),
              })
            )
            .optional(),
        })
        .optional(),
      bypass_pull_request_allowances: z
        .object({
          users: z.array(
            z.object({
              name: z.coerce.string().optional(),
              email: z.coerce.string().optional(),
              login: z.coerce.string(),
              id: z.coerce.number(),
              node_id: z.coerce.string(),
              avatar_url: z.coerce.string(),
              gravatar_id: z.coerce.string(),
              url: z.coerce.string(),
              html_url: z.coerce.string(),
              followers_url: z.coerce.string(),
              following_url: z.coerce.string(),
              gists_url: z.coerce.string(),
              starred_url: z.coerce.string(),
              subscriptions_url: z.coerce.string(),
              organizations_url: z.coerce.string(),
              repos_url: z.coerce.string(),
              events_url: z.coerce.string(),
              received_events_url: z.coerce.string(),
              type: z.coerce.string(),
              site_admin: z.coerce.boolean(),
              starred_at: z.coerce.string().optional(),
            })
          ),
          teams: z.array(
            z.object({
              id: z.coerce.number(),
              node_id: z.coerce.string(),
              name: z.coerce.string(),
              slug: z.coerce.string(),
              description: z.coerce.string(),
              privacy: z.coerce.string().optional(),
              permission: z.coerce.string(),
              permissions: z
                .object({
                  pull: z.coerce.boolean(),
                  triage: z.coerce.boolean(),
                  push: z.coerce.boolean(),
                  maintain: z.coerce.boolean(),
                  admin: z.coerce.boolean(),
                })
                .optional(),
              url: z.coerce.string(),
              html_url: z.coerce.string(),
              members_url: z.coerce.string(),
              repositories_url: z.coerce.string(),
              parent: z.object({
                id: z.coerce.number(),
                node_id: z.coerce.string(),
                url: z.coerce.string(),
                members_url: z.coerce.string(),
                name: z.coerce.string(),
                description: z.coerce.string(),
                permission: z.coerce.string(),
                privacy: z.coerce.string().optional(),
                html_url: z.coerce.string(),
                repositories_url: z.coerce.string(),
                slug: z.coerce.string(),
                ldap_dn: z.coerce.string().optional(),
              }),
            })
          ),
          apps: z
            .array(
              z.object({
                id: z.coerce.number(),
                slug: z.coerce.string().optional(),
                node_id: z.coerce.string(),
                owner: z.object({
                  name: z.coerce.string().optional(),
                  email: z.coerce.string().optional(),
                  login: z.coerce.string(),
                  id: z.coerce.number(),
                  node_id: z.coerce.string(),
                  avatar_url: z.coerce.string(),
                  gravatar_id: z.coerce.string(),
                  url: z.coerce.string(),
                  html_url: z.coerce.string(),
                  followers_url: z.coerce.string(),
                  following_url: z.coerce.string(),
                  gists_url: z.coerce.string(),
                  starred_url: z.coerce.string(),
                  subscriptions_url: z.coerce.string(),
                  organizations_url: z.coerce.string(),
                  repos_url: z.coerce.string(),
                  events_url: z.coerce.string(),
                  received_events_url: z.coerce.string(),
                  type: z.coerce.string(),
                  site_admin: z.coerce.boolean(),
                  starred_at: z.coerce.string().optional(),
                }),
                name: z.coerce.string(),
                description: z.coerce.string(),
                external_url: z.coerce.string(),
                html_url: z.coerce.string(),
                created_at: z.coerce.string().datetime({ offset: true }),
                updated_at: z.coerce.string().datetime({ offset: true }),
                permissions: z.object({
                  issues: z.coerce.string().optional(),
                  checks: z.coerce.string().optional(),
                  metadata: z.coerce.string().optional(),
                  contents: z.coerce.string().optional(),
                  deployments: z.coerce.string().optional(),
                }),
                events: z.array(z.coerce.string()),
                installations_count: z.coerce.number().optional(),
                client_id: z.coerce.string().optional(),
                client_secret: z.coerce.string().optional(),
                webhook_secret: z.coerce.string().optional(),
                pem: z.coerce.string().optional(),
              })
            )
            .optional(),
        })
        .optional(),
    })
    .optional(),
  required_signatures: z
    .object({ url: z.coerce.string(), enabled: z.coerce.boolean() })
    .optional(),
  enforce_admins: z
    .object({ url: z.coerce.string(), enabled: z.coerce.boolean() })
    .optional(),
  required_linear_history: z.object({ enabled: z.coerce.boolean() }).optional(),
  allow_force_pushes: z.object({ enabled: z.coerce.boolean() }).optional(),
  allow_deletions: z.object({ enabled: z.coerce.boolean() }).optional(),
  restrictions: z
    .object({
      url: z.coerce.string(),
      users_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      apps_url: z.coerce.string(),
      users: z.array(
        z.object({
          login: z.coerce.string().optional(),
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          avatar_url: z.coerce.string().optional(),
          gravatar_id: z.coerce.string().optional(),
          url: z.coerce.string().optional(),
          html_url: z.coerce.string().optional(),
          followers_url: z.coerce.string().optional(),
          following_url: z.coerce.string().optional(),
          gists_url: z.coerce.string().optional(),
          starred_url: z.coerce.string().optional(),
          subscriptions_url: z.coerce.string().optional(),
          organizations_url: z.coerce.string().optional(),
          repos_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          received_events_url: z.coerce.string().optional(),
          type: z.coerce.string().optional(),
          site_admin: z.coerce.boolean().optional(),
        })
      ),
      teams: z.array(
        z.object({
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          url: z.coerce.string().optional(),
          html_url: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          slug: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          privacy: z.coerce.string().optional(),
          permission: z.coerce.string().optional(),
          members_url: z.coerce.string().optional(),
          repositories_url: z.coerce.string().optional(),
          parent: z.coerce.string().optional(),
        })
      ),
      apps: z.array(
        z.object({
          id: z.coerce.number().optional(),
          slug: z.coerce.string().optional(),
          node_id: z.coerce.string().optional(),
          owner: z
            .object({
              login: z.coerce.string().optional(),
              id: z.coerce.number().optional(),
              node_id: z.coerce.string().optional(),
              url: z.coerce.string().optional(),
              repos_url: z.coerce.string().optional(),
              events_url: z.coerce.string().optional(),
              hooks_url: z.coerce.string().optional(),
              issues_url: z.coerce.string().optional(),
              members_url: z.coerce.string().optional(),
              public_members_url: z.coerce.string().optional(),
              avatar_url: z.coerce.string().optional(),
              description: z.coerce.string().optional(),
              gravatar_id: z.coerce.string().optional(),
              html_url: z.coerce.string().optional(),
              followers_url: z.coerce.string().optional(),
              following_url: z.coerce.string().optional(),
              gists_url: z.coerce.string().optional(),
              starred_url: z.coerce.string().optional(),
              subscriptions_url: z.coerce.string().optional(),
              organizations_url: z.coerce.string().optional(),
              received_events_url: z.coerce.string().optional(),
              type: z.coerce.string().optional(),
              site_admin: z.coerce.boolean().optional(),
            })
            .optional(),
          name: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          external_url: z.coerce.string().optional(),
          html_url: z.coerce.string().optional(),
          created_at: z.coerce.string().optional(),
          updated_at: z.coerce.string().optional(),
          permissions: z
            .object({
              metadata: z.coerce.string().optional(),
              contents: z.coerce.string().optional(),
              issues: z.coerce.string().optional(),
              single_file: z.coerce.string().optional(),
            })
            .optional(),
          events: z.array(z.coerce.string()).optional(),
        })
      ),
    })
    .optional(),
  required_conversation_resolution: z
    .object({ enabled: z.coerce.boolean().optional() })
    .optional(),
  block_creations: z.object({ enabled: z.coerce.boolean() }).optional(),
  lock_branch: z.object({ enabled: z.coerce.boolean().optional() }).optional(),
  allow_fork_syncing: z
    .object({ enabled: z.coerce.boolean().optional() })
    .optional(),
})

export const s_protected_branch_admin_enforced = z.object({
  url: z.coerce.string(),
  enabled: z.coerce.boolean(),
})

export const s_protected_branch_pull_request_review = z.object({
  url: z.coerce.string().optional(),
  dismissal_restrictions: z
    .object({
      users: z
        .array(
          z.object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          })
        )
        .optional(),
      teams: z
        .array(
          z.object({
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            name: z.coerce.string(),
            slug: z.coerce.string(),
            description: z.coerce.string(),
            privacy: z.coerce.string().optional(),
            permission: z.coerce.string(),
            permissions: z
              .object({
                pull: z.coerce.boolean(),
                triage: z.coerce.boolean(),
                push: z.coerce.boolean(),
                maintain: z.coerce.boolean(),
                admin: z.coerce.boolean(),
              })
              .optional(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            members_url: z.coerce.string(),
            repositories_url: z.coerce.string(),
            parent: z.object({
              id: z.coerce.number(),
              node_id: z.coerce.string(),
              url: z.coerce.string(),
              members_url: z.coerce.string(),
              name: z.coerce.string(),
              description: z.coerce.string(),
              permission: z.coerce.string(),
              privacy: z.coerce.string().optional(),
              html_url: z.coerce.string(),
              repositories_url: z.coerce.string(),
              slug: z.coerce.string(),
              ldap_dn: z.coerce.string().optional(),
            }),
          })
        )
        .optional(),
      apps: z
        .array(
          z.object({
            id: z.coerce.number(),
            slug: z.coerce.string().optional(),
            node_id: z.coerce.string(),
            owner: z.object({
              name: z.coerce.string().optional(),
              email: z.coerce.string().optional(),
              login: z.coerce.string(),
              id: z.coerce.number(),
              node_id: z.coerce.string(),
              avatar_url: z.coerce.string(),
              gravatar_id: z.coerce.string(),
              url: z.coerce.string(),
              html_url: z.coerce.string(),
              followers_url: z.coerce.string(),
              following_url: z.coerce.string(),
              gists_url: z.coerce.string(),
              starred_url: z.coerce.string(),
              subscriptions_url: z.coerce.string(),
              organizations_url: z.coerce.string(),
              repos_url: z.coerce.string(),
              events_url: z.coerce.string(),
              received_events_url: z.coerce.string(),
              type: z.coerce.string(),
              site_admin: z.coerce.boolean(),
              starred_at: z.coerce.string().optional(),
            }),
            name: z.coerce.string(),
            description: z.coerce.string(),
            external_url: z.coerce.string(),
            html_url: z.coerce.string(),
            created_at: z.coerce.string().datetime({ offset: true }),
            updated_at: z.coerce.string().datetime({ offset: true }),
            permissions: z.object({
              issues: z.coerce.string().optional(),
              checks: z.coerce.string().optional(),
              metadata: z.coerce.string().optional(),
              contents: z.coerce.string().optional(),
              deployments: z.coerce.string().optional(),
            }),
            events: z.array(z.coerce.string()),
            installations_count: z.coerce.number().optional(),
            client_id: z.coerce.string().optional(),
            client_secret: z.coerce.string().optional(),
            webhook_secret: z.coerce.string().optional(),
            pem: z.coerce.string().optional(),
          })
        )
        .optional(),
      url: z.coerce.string().optional(),
      users_url: z.coerce.string().optional(),
      teams_url: z.coerce.string().optional(),
    })
    .optional(),
  bypass_pull_request_allowances: z
    .object({
      users: z
        .array(
          z.object({
            name: z.coerce.string().optional(),
            email: z.coerce.string().optional(),
            login: z.coerce.string(),
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            avatar_url: z.coerce.string(),
            gravatar_id: z.coerce.string(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            followers_url: z.coerce.string(),
            following_url: z.coerce.string(),
            gists_url: z.coerce.string(),
            starred_url: z.coerce.string(),
            subscriptions_url: z.coerce.string(),
            organizations_url: z.coerce.string(),
            repos_url: z.coerce.string(),
            events_url: z.coerce.string(),
            received_events_url: z.coerce.string(),
            type: z.coerce.string(),
            site_admin: z.coerce.boolean(),
            starred_at: z.coerce.string().optional(),
          })
        )
        .optional(),
      teams: z
        .array(
          z.object({
            id: z.coerce.number(),
            node_id: z.coerce.string(),
            name: z.coerce.string(),
            slug: z.coerce.string(),
            description: z.coerce.string(),
            privacy: z.coerce.string().optional(),
            permission: z.coerce.string(),
            permissions: z
              .object({
                pull: z.coerce.boolean(),
                triage: z.coerce.boolean(),
                push: z.coerce.boolean(),
                maintain: z.coerce.boolean(),
                admin: z.coerce.boolean(),
              })
              .optional(),
            url: z.coerce.string(),
            html_url: z.coerce.string(),
            members_url: z.coerce.string(),
            repositories_url: z.coerce.string(),
            parent: z.object({
              id: z.coerce.number(),
              node_id: z.coerce.string(),
              url: z.coerce.string(),
              members_url: z.coerce.string(),
              name: z.coerce.string(),
              description: z.coerce.string(),
              permission: z.coerce.string(),
              privacy: z.coerce.string().optional(),
              html_url: z.coerce.string(),
              repositories_url: z.coerce.string(),
              slug: z.coerce.string(),
              ldap_dn: z.coerce.string().optional(),
            }),
          })
        )
        .optional(),
      apps: z
        .array(
          z.object({
            id: z.coerce.number(),
            slug: z.coerce.string().optional(),
            node_id: z.coerce.string(),
            owner: z.object({
              name: z.coerce.string().optional(),
              email: z.coerce.string().optional(),
              login: z.coerce.string(),
              id: z.coerce.number(),
              node_id: z.coerce.string(),
              avatar_url: z.coerce.string(),
              gravatar_id: z.coerce.string(),
              url: z.coerce.string(),
              html_url: z.coerce.string(),
              followers_url: z.coerce.string(),
              following_url: z.coerce.string(),
              gists_url: z.coerce.string(),
              starred_url: z.coerce.string(),
              subscriptions_url: z.coerce.string(),
              organizations_url: z.coerce.string(),
              repos_url: z.coerce.string(),
              events_url: z.coerce.string(),
              received_events_url: z.coerce.string(),
              type: z.coerce.string(),
              site_admin: z.coerce.boolean(),
              starred_at: z.coerce.string().optional(),
            }),
            name: z.coerce.string(),
            description: z.coerce.string(),
            external_url: z.coerce.string(),
            html_url: z.coerce.string(),
            created_at: z.coerce.string().datetime({ offset: true }),
            updated_at: z.coerce.string().datetime({ offset: true }),
            permissions: z.object({
              issues: z.coerce.string().optional(),
              checks: z.coerce.string().optional(),
              metadata: z.coerce.string().optional(),
              contents: z.coerce.string().optional(),
              deployments: z.coerce.string().optional(),
            }),
            events: z.array(z.coerce.string()),
            installations_count: z.coerce.number().optional(),
            client_id: z.coerce.string().optional(),
            client_secret: z.coerce.string().optional(),
            webhook_secret: z.coerce.string().optional(),
            pem: z.coerce.string().optional(),
          })
        )
        .optional(),
    })
    .optional(),
  dismiss_stale_reviews: z.coerce.boolean(),
  require_code_owner_reviews: z.coerce.boolean(),
  required_approving_review_count: z.coerce.number().optional(),
  require_last_push_approval: z.coerce.boolean().optional(),
})

export const s_public_user = z.object({
  login: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  avatar_url: z.coerce.string(),
  gravatar_id: z.coerce.string(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  followers_url: z.coerce.string(),
  following_url: z.coerce.string(),
  gists_url: z.coerce.string(),
  starred_url: z.coerce.string(),
  subscriptions_url: z.coerce.string(),
  organizations_url: z.coerce.string(),
  repos_url: z.coerce.string(),
  events_url: z.coerce.string(),
  received_events_url: z.coerce.string(),
  type: z.coerce.string(),
  site_admin: z.coerce.boolean(),
  name: z.coerce.string(),
  company: z.coerce.string(),
  blog: z.coerce.string(),
  location: z.coerce.string(),
  email: z.coerce.string().email(),
  hireable: z.coerce.boolean(),
  bio: z.coerce.string(),
  twitter_username: z.coerce.string().optional(),
  public_repos: z.coerce.number(),
  public_gists: z.coerce.number(),
  followers: z.coerce.number(),
  following: z.coerce.number(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  plan: z
    .object({
      collaborators: z.coerce.number(),
      name: z.coerce.string(),
      space: z.coerce.number(),
      private_repos: z.coerce.number(),
    })
    .optional(),
  suspended_at: z.coerce.string().datetime({ offset: true }).optional(),
  private_gists: z.coerce.number().optional(),
  total_private_repos: z.coerce.number().optional(),
  owned_private_repos: z.coerce.number().optional(),
  disk_usage: z.coerce.number().optional(),
  collaborators: z.coerce.number().optional(),
})

export const s_pull_request = z.object({
  url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  html_url: z.coerce.string(),
  diff_url: z.coerce.string(),
  patch_url: z.coerce.string(),
  issue_url: z.coerce.string(),
  commits_url: z.coerce.string(),
  review_comments_url: z.coerce.string(),
  review_comment_url: z.coerce.string(),
  comments_url: z.coerce.string(),
  statuses_url: z.coerce.string(),
  number: z.coerce.number(),
  state: z.enum(["open", "closed"]),
  locked: z.coerce.boolean(),
  title: z.coerce.string(),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  body: z.coerce.string(),
  labels: z.array(
    z.object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      url: z.coerce.string(),
      name: z.coerce.string(),
      description: z.coerce.string(),
      color: z.coerce.string(),
      default: z.coerce.boolean(),
    })
  ),
  milestone: z.object({
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    number: z.coerce.number(),
    state: z.enum(["open", "closed"]),
    title: z.coerce.string(),
    description: z.coerce.string(),
    creator: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    open_issues: z.coerce.number(),
    closed_issues: z.coerce.number(),
    created_at: z.coerce.string().datetime({ offset: true }),
    updated_at: z.coerce.string().datetime({ offset: true }),
    closed_at: z.coerce.string().datetime({ offset: true }),
    due_on: z.coerce.string().datetime({ offset: true }),
  }),
  active_lock_reason: z.coerce.string().optional(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  closed_at: z.coerce.string().datetime({ offset: true }),
  merged_at: z.coerce.string().datetime({ offset: true }),
  merge_commit_sha: z.coerce.string(),
  assignee: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  assignees: z
    .array(
      z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      })
    )
    .optional(),
  requested_reviewers: z
    .array(
      z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      })
    )
    .optional(),
  requested_teams: z
    .array(
      z.object({
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        url: z.coerce.string(),
        members_url: z.coerce.string(),
        name: z.coerce.string(),
        description: z.coerce.string(),
        permission: z.coerce.string(),
        privacy: z.coerce.string().optional(),
        html_url: z.coerce.string(),
        repositories_url: z.coerce.string(),
        slug: z.coerce.string(),
        ldap_dn: z.coerce.string().optional(),
      })
    )
    .optional(),
  head: z.object({
    label: z.coerce.string(),
    ref: z.coerce.string(),
    repo: z.object({
      archive_url: z.coerce.string(),
      assignees_url: z.coerce.string(),
      blobs_url: z.coerce.string(),
      branches_url: z.coerce.string(),
      collaborators_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      compare_url: z.coerce.string(),
      contents_url: z.coerce.string(),
      contributors_url: z.coerce.string(),
      deployments_url: z.coerce.string(),
      description: z.coerce.string(),
      downloads_url: z.coerce.string(),
      events_url: z.coerce.string(),
      fork: z.coerce.boolean(),
      forks_url: z.coerce.string(),
      full_name: z.coerce.string(),
      git_commits_url: z.coerce.string(),
      git_refs_url: z.coerce.string(),
      git_tags_url: z.coerce.string(),
      hooks_url: z.coerce.string(),
      html_url: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      issue_comment_url: z.coerce.string(),
      issue_events_url: z.coerce.string(),
      issues_url: z.coerce.string(),
      keys_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      languages_url: z.coerce.string(),
      merges_url: z.coerce.string(),
      milestones_url: z.coerce.string(),
      name: z.coerce.string(),
      notifications_url: z.coerce.string(),
      owner: z.object({
        avatar_url: z.coerce.string(),
        events_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        html_url: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        login: z.coerce.string(),
        organizations_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        type: z.coerce.string(),
        url: z.coerce.string(),
      }),
      private: z.coerce.boolean(),
      pulls_url: z.coerce.string(),
      releases_url: z.coerce.string(),
      stargazers_url: z.coerce.string(),
      statuses_url: z.coerce.string(),
      subscribers_url: z.coerce.string(),
      subscription_url: z.coerce.string(),
      tags_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      trees_url: z.coerce.string(),
      url: z.coerce.string(),
      clone_url: z.coerce.string(),
      default_branch: z.coerce.string(),
      forks: z.coerce.number(),
      forks_count: z.coerce.number(),
      git_url: z.coerce.string(),
      has_downloads: z.coerce.boolean(),
      has_issues: z.coerce.boolean(),
      has_projects: z.coerce.boolean(),
      has_wiki: z.coerce.boolean(),
      has_pages: z.coerce.boolean(),
      has_discussions: z.coerce.boolean(),
      homepage: z.coerce.string(),
      language: z.coerce.string(),
      master_branch: z.coerce.string().optional(),
      archived: z.coerce.boolean(),
      disabled: z.coerce.boolean(),
      visibility: z.coerce.string().optional(),
      mirror_url: z.coerce.string(),
      open_issues: z.coerce.number(),
      open_issues_count: z.coerce.number(),
      permissions: z
        .object({
          admin: z.coerce.boolean(),
          maintain: z.coerce.boolean().optional(),
          push: z.coerce.boolean(),
          triage: z.coerce.boolean().optional(),
          pull: z.coerce.boolean(),
        })
        .optional(),
      temp_clone_token: z.coerce.string().optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_rebase_merge: z.coerce.boolean().optional(),
      license: z.object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        spdx_id: z.coerce.string(),
        node_id: z.coerce.string(),
      }),
      pushed_at: z.coerce.string().datetime({ offset: true }),
      size: z.coerce.number(),
      ssh_url: z.coerce.string(),
      stargazers_count: z.coerce.number(),
      svn_url: z.coerce.string(),
      topics: z.array(z.coerce.string()).optional(),
      watchers: z.coerce.number(),
      watchers_count: z.coerce.number(),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      allow_forking: z.coerce.boolean().optional(),
      is_template: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
    }),
    sha: z.coerce.string(),
    user: z.object({
      avatar_url: z.coerce.string(),
      events_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      html_url: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      login: z.coerce.string(),
      organizations_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      type: z.coerce.string(),
      url: z.coerce.string(),
    }),
  }),
  base: z.object({
    label: z.coerce.string(),
    ref: z.coerce.string(),
    repo: z.object({
      archive_url: z.coerce.string(),
      assignees_url: z.coerce.string(),
      blobs_url: z.coerce.string(),
      branches_url: z.coerce.string(),
      collaborators_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      compare_url: z.coerce.string(),
      contents_url: z.coerce.string(),
      contributors_url: z.coerce.string(),
      deployments_url: z.coerce.string(),
      description: z.coerce.string(),
      downloads_url: z.coerce.string(),
      events_url: z.coerce.string(),
      fork: z.coerce.boolean(),
      forks_url: z.coerce.string(),
      full_name: z.coerce.string(),
      git_commits_url: z.coerce.string(),
      git_refs_url: z.coerce.string(),
      git_tags_url: z.coerce.string(),
      hooks_url: z.coerce.string(),
      html_url: z.coerce.string(),
      id: z.coerce.number(),
      is_template: z.coerce.boolean().optional(),
      node_id: z.coerce.string(),
      issue_comment_url: z.coerce.string(),
      issue_events_url: z.coerce.string(),
      issues_url: z.coerce.string(),
      keys_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      languages_url: z.coerce.string(),
      merges_url: z.coerce.string(),
      milestones_url: z.coerce.string(),
      name: z.coerce.string(),
      notifications_url: z.coerce.string(),
      owner: z.object({
        avatar_url: z.coerce.string(),
        events_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        html_url: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        login: z.coerce.string(),
        organizations_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        type: z.coerce.string(),
        url: z.coerce.string(),
      }),
      private: z.coerce.boolean(),
      pulls_url: z.coerce.string(),
      releases_url: z.coerce.string(),
      stargazers_url: z.coerce.string(),
      statuses_url: z.coerce.string(),
      subscribers_url: z.coerce.string(),
      subscription_url: z.coerce.string(),
      tags_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      trees_url: z.coerce.string(),
      url: z.coerce.string(),
      clone_url: z.coerce.string(),
      default_branch: z.coerce.string(),
      forks: z.coerce.number(),
      forks_count: z.coerce.number(),
      git_url: z.coerce.string(),
      has_downloads: z.coerce.boolean(),
      has_issues: z.coerce.boolean(),
      has_projects: z.coerce.boolean(),
      has_wiki: z.coerce.boolean(),
      has_pages: z.coerce.boolean(),
      has_discussions: z.coerce.boolean(),
      homepage: z.coerce.string(),
      language: z.coerce.string(),
      master_branch: z.coerce.string().optional(),
      archived: z.coerce.boolean(),
      disabled: z.coerce.boolean(),
      visibility: z.coerce.string().optional(),
      mirror_url: z.coerce.string(),
      open_issues: z.coerce.number(),
      open_issues_count: z.coerce.number(),
      permissions: z
        .object({
          admin: z.coerce.boolean(),
          maintain: z.coerce.boolean().optional(),
          push: z.coerce.boolean(),
          triage: z.coerce.boolean().optional(),
          pull: z.coerce.boolean(),
        })
        .optional(),
      temp_clone_token: z.coerce.string().optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_rebase_merge: z.coerce.boolean().optional(),
      license: z.object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        spdx_id: z.coerce.string(),
        node_id: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      }),
      pushed_at: z.coerce.string().datetime({ offset: true }),
      size: z.coerce.number(),
      ssh_url: z.coerce.string(),
      stargazers_count: z.coerce.number(),
      svn_url: z.coerce.string(),
      topics: z.array(z.coerce.string()).optional(),
      watchers: z.coerce.number(),
      watchers_count: z.coerce.number(),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      allow_forking: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
    }),
    sha: z.coerce.string(),
    user: z.object({
      avatar_url: z.coerce.string(),
      events_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      html_url: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      login: z.coerce.string(),
      organizations_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      type: z.coerce.string(),
      url: z.coerce.string(),
    }),
  }),
  _links: z.object({
    comments: z.object({ href: z.coerce.string() }),
    commits: z.object({ href: z.coerce.string() }),
    statuses: z.object({ href: z.coerce.string() }),
    html: z.object({ href: z.coerce.string() }),
    issue: z.object({ href: z.coerce.string() }),
    review_comments: z.object({ href: z.coerce.string() }),
    review_comment: z.object({ href: z.coerce.string() }),
    self: z.object({ href: z.coerce.string() }),
  }),
  author_association: z.enum([
    "COLLABORATOR",
    "CONTRIBUTOR",
    "FIRST_TIMER",
    "FIRST_TIME_CONTRIBUTOR",
    "MANNEQUIN",
    "MEMBER",
    "NONE",
    "OWNER",
  ]),
  auto_merge: z.object({
    enabled_by: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    merge_method: z.enum(["merge", "squash", "rebase"]),
    commit_title: z.coerce.string(),
    commit_message: z.coerce.string(),
  }),
  draft: z.coerce.boolean().optional(),
  merged: z.coerce.boolean(),
  mergeable: z.coerce.boolean(),
  rebaseable: z.coerce.boolean().optional(),
  mergeable_state: z.coerce.string(),
  merged_by: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  comments: z.coerce.number(),
  review_comments: z.coerce.number(),
  maintainer_can_modify: z.coerce.boolean(),
  commits: z.coerce.number(),
  additions: z.coerce.number(),
  deletions: z.coerce.number(),
  changed_files: z.coerce.number(),
})

export const s_pull_request_merge_result = z.object({
  sha: z.coerce.string(),
  merged: z.coerce.boolean(),
  message: z.coerce.string(),
})

export const s_pull_request_review = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  body: z.coerce.string(),
  state: z.coerce.string(),
  html_url: z.coerce.string(),
  pull_request_url: z.coerce.string(),
  _links: z.object({
    html: z.object({ href: z.coerce.string() }),
    pull_request: z.object({ href: z.coerce.string() }),
  }),
  submitted_at: z.coerce.string().datetime({ offset: true }).optional(),
  commit_id: z.coerce.string(),
  body_html: z.coerce.string().optional(),
  body_text: z.coerce.string().optional(),
  author_association: z.enum([
    "COLLABORATOR",
    "CONTRIBUTOR",
    "FIRST_TIMER",
    "FIRST_TIME_CONTRIBUTOR",
    "MANNEQUIN",
    "MEMBER",
    "NONE",
    "OWNER",
  ]),
})

export const s_pull_request_review_comment = z.object({
  url: z.coerce.string(),
  pull_request_review_id: z.coerce.number(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  diff_hunk: z.coerce.string(),
  path: z.coerce.string(),
  position: z.coerce.number(),
  original_position: z.coerce.number(),
  commit_id: z.coerce.string(),
  original_commit_id: z.coerce.string(),
  in_reply_to_id: z.coerce.number().optional(),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  body: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  html_url: z.coerce.string(),
  pull_request_url: z.coerce.string(),
  author_association: z.enum([
    "COLLABORATOR",
    "CONTRIBUTOR",
    "FIRST_TIMER",
    "FIRST_TIME_CONTRIBUTOR",
    "MANNEQUIN",
    "MEMBER",
    "NONE",
    "OWNER",
  ]),
  _links: z.object({
    self: z.object({ href: z.coerce.string() }),
    html: z.object({ href: z.coerce.string() }),
    pull_request: z.object({ href: z.coerce.string() }),
  }),
  start_line: z.coerce.number().optional(),
  original_start_line: z.coerce.number().optional(),
  start_side: z.enum(["LEFT", "RIGHT"]).optional(),
  line: z.coerce.number().optional(),
  original_line: z.coerce.number().optional(),
  side: z.enum(["LEFT", "RIGHT"]).optional(),
  reactions: z
    .object({
      url: z.coerce.string(),
      total_count: z.coerce.number(),
      "+1": z.coerce.number(),
      "-1": z.coerce.number(),
      laugh: z.coerce.number(),
      confused: z.coerce.number(),
      heart: z.coerce.number(),
      hooray: z.coerce.number(),
      eyes: z.coerce.number(),
      rocket: z.coerce.number(),
    })
    .optional(),
  body_html: z.coerce.string().optional(),
  body_text: z.coerce.string().optional(),
})

export const s_pull_request_review_request = z.object({
  users: z.array(
    z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
  ),
  teams: z.array(
    z.object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      slug: z.coerce.string(),
      description: z.coerce.string(),
      privacy: z.coerce.string().optional(),
      permission: z.coerce.string(),
      permissions: z
        .object({
          pull: z.coerce.boolean(),
          triage: z.coerce.boolean(),
          push: z.coerce.boolean(),
          maintain: z.coerce.boolean(),
          admin: z.coerce.boolean(),
        })
        .optional(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      members_url: z.coerce.string(),
      repositories_url: z.coerce.string(),
      parent: z.object({
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        url: z.coerce.string(),
        members_url: z.coerce.string(),
        name: z.coerce.string(),
        description: z.coerce.string(),
        permission: z.coerce.string(),
        privacy: z.coerce.string().optional(),
        html_url: z.coerce.string(),
        repositories_url: z.coerce.string(),
        slug: z.coerce.string(),
        ldap_dn: z.coerce.string().optional(),
      }),
    })
  ),
})

export const s_pull_request_simple = z.object({
  url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  html_url: z.coerce.string(),
  diff_url: z.coerce.string(),
  patch_url: z.coerce.string(),
  issue_url: z.coerce.string(),
  commits_url: z.coerce.string(),
  review_comments_url: z.coerce.string(),
  review_comment_url: z.coerce.string(),
  comments_url: z.coerce.string(),
  statuses_url: z.coerce.string(),
  number: z.coerce.number(),
  state: z.coerce.string(),
  locked: z.coerce.boolean(),
  title: z.coerce.string(),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  body: z.coerce.string(),
  labels: z.array(
    z.object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      url: z.coerce.string(),
      name: z.coerce.string(),
      description: z.coerce.string(),
      color: z.coerce.string(),
      default: z.coerce.boolean(),
    })
  ),
  milestone: z.object({
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    number: z.coerce.number(),
    state: z.enum(["open", "closed"]),
    title: z.coerce.string(),
    description: z.coerce.string(),
    creator: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    open_issues: z.coerce.number(),
    closed_issues: z.coerce.number(),
    created_at: z.coerce.string().datetime({ offset: true }),
    updated_at: z.coerce.string().datetime({ offset: true }),
    closed_at: z.coerce.string().datetime({ offset: true }),
    due_on: z.coerce.string().datetime({ offset: true }),
  }),
  active_lock_reason: z.coerce.string().optional(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  closed_at: z.coerce.string().datetime({ offset: true }),
  merged_at: z.coerce.string().datetime({ offset: true }),
  merge_commit_sha: z.coerce.string(),
  assignee: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  assignees: z
    .array(
      z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      })
    )
    .optional(),
  requested_reviewers: z
    .array(
      z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      })
    )
    .optional(),
  requested_teams: z
    .array(
      z.object({
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        name: z.coerce.string(),
        slug: z.coerce.string(),
        description: z.coerce.string(),
        privacy: z.coerce.string().optional(),
        permission: z.coerce.string(),
        permissions: z
          .object({
            pull: z.coerce.boolean(),
            triage: z.coerce.boolean(),
            push: z.coerce.boolean(),
            maintain: z.coerce.boolean(),
            admin: z.coerce.boolean(),
          })
          .optional(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        members_url: z.coerce.string(),
        repositories_url: z.coerce.string(),
        parent: z.object({
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          url: z.coerce.string(),
          members_url: z.coerce.string(),
          name: z.coerce.string(),
          description: z.coerce.string(),
          permission: z.coerce.string(),
          privacy: z.coerce.string().optional(),
          html_url: z.coerce.string(),
          repositories_url: z.coerce.string(),
          slug: z.coerce.string(),
          ldap_dn: z.coerce.string().optional(),
        }),
      })
    )
    .optional(),
  head: z.object({
    label: z.coerce.string(),
    ref: z.coerce.string(),
    repo: z.object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      full_name: z.coerce.string(),
      license: z.object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        spdx_id: z.coerce.string(),
        node_id: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      }),
      organization: z
        .object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        })
        .optional(),
      forks: z.coerce.number(),
      permissions: z
        .object({
          admin: z.coerce.boolean(),
          pull: z.coerce.boolean(),
          triage: z.coerce.boolean().optional(),
          push: z.coerce.boolean(),
          maintain: z.coerce.boolean().optional(),
        })
        .optional(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      private: z.coerce.boolean(),
      html_url: z.coerce.string(),
      description: z.coerce.string(),
      fork: z.coerce.boolean(),
      url: z.coerce.string(),
      archive_url: z.coerce.string(),
      assignees_url: z.coerce.string(),
      blobs_url: z.coerce.string(),
      branches_url: z.coerce.string(),
      collaborators_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      compare_url: z.coerce.string(),
      contents_url: z.coerce.string(),
      contributors_url: z.coerce.string(),
      deployments_url: z.coerce.string(),
      downloads_url: z.coerce.string(),
      events_url: z.coerce.string(),
      forks_url: z.coerce.string(),
      git_commits_url: z.coerce.string(),
      git_refs_url: z.coerce.string(),
      git_tags_url: z.coerce.string(),
      git_url: z.coerce.string(),
      issue_comment_url: z.coerce.string(),
      issue_events_url: z.coerce.string(),
      issues_url: z.coerce.string(),
      keys_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      languages_url: z.coerce.string(),
      merges_url: z.coerce.string(),
      milestones_url: z.coerce.string(),
      notifications_url: z.coerce.string(),
      pulls_url: z.coerce.string(),
      releases_url: z.coerce.string(),
      ssh_url: z.coerce.string(),
      stargazers_url: z.coerce.string(),
      statuses_url: z.coerce.string(),
      subscribers_url: z.coerce.string(),
      subscription_url: z.coerce.string(),
      tags_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      trees_url: z.coerce.string(),
      clone_url: z.coerce.string(),
      mirror_url: z.coerce.string(),
      hooks_url: z.coerce.string(),
      svn_url: z.coerce.string(),
      homepage: z.coerce.string(),
      language: z.coerce.string(),
      forks_count: z.coerce.number(),
      stargazers_count: z.coerce.number(),
      watchers_count: z.coerce.number(),
      size: z.coerce.number(),
      default_branch: z.coerce.string(),
      open_issues_count: z.coerce.number(),
      is_template: z.coerce.boolean().optional(),
      topics: z.array(z.coerce.string()).optional(),
      has_issues: z.coerce.boolean(),
      has_projects: z.coerce.boolean(),
      has_wiki: z.coerce.boolean(),
      has_pages: z.coerce.boolean(),
      has_downloads: z.coerce.boolean(),
      has_discussions: z.coerce.boolean().optional(),
      archived: z.coerce.boolean(),
      disabled: z.coerce.boolean(),
      visibility: z.coerce.string().optional(),
      pushed_at: z.coerce.string().datetime({ offset: true }),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      allow_rebase_merge: z.coerce.boolean().optional(),
      template_repository: z
        .object({
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          full_name: z.coerce.string().optional(),
          owner: z
            .object({
              login: z.coerce.string().optional(),
              id: z.coerce.number().optional(),
              node_id: z.coerce.string().optional(),
              avatar_url: z.coerce.string().optional(),
              gravatar_id: z.coerce.string().optional(),
              url: z.coerce.string().optional(),
              html_url: z.coerce.string().optional(),
              followers_url: z.coerce.string().optional(),
              following_url: z.coerce.string().optional(),
              gists_url: z.coerce.string().optional(),
              starred_url: z.coerce.string().optional(),
              subscriptions_url: z.coerce.string().optional(),
              organizations_url: z.coerce.string().optional(),
              repos_url: z.coerce.string().optional(),
              events_url: z.coerce.string().optional(),
              received_events_url: z.coerce.string().optional(),
              type: z.coerce.string().optional(),
              site_admin: z.coerce.boolean().optional(),
            })
            .optional(),
          private: z.coerce.boolean().optional(),
          html_url: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          fork: z.coerce.boolean().optional(),
          url: z.coerce.string().optional(),
          archive_url: z.coerce.string().optional(),
          assignees_url: z.coerce.string().optional(),
          blobs_url: z.coerce.string().optional(),
          branches_url: z.coerce.string().optional(),
          collaborators_url: z.coerce.string().optional(),
          comments_url: z.coerce.string().optional(),
          commits_url: z.coerce.string().optional(),
          compare_url: z.coerce.string().optional(),
          contents_url: z.coerce.string().optional(),
          contributors_url: z.coerce.string().optional(),
          deployments_url: z.coerce.string().optional(),
          downloads_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          forks_url: z.coerce.string().optional(),
          git_commits_url: z.coerce.string().optional(),
          git_refs_url: z.coerce.string().optional(),
          git_tags_url: z.coerce.string().optional(),
          git_url: z.coerce.string().optional(),
          issue_comment_url: z.coerce.string().optional(),
          issue_events_url: z.coerce.string().optional(),
          issues_url: z.coerce.string().optional(),
          keys_url: z.coerce.string().optional(),
          labels_url: z.coerce.string().optional(),
          languages_url: z.coerce.string().optional(),
          merges_url: z.coerce.string().optional(),
          milestones_url: z.coerce.string().optional(),
          notifications_url: z.coerce.string().optional(),
          pulls_url: z.coerce.string().optional(),
          releases_url: z.coerce.string().optional(),
          ssh_url: z.coerce.string().optional(),
          stargazers_url: z.coerce.string().optional(),
          statuses_url: z.coerce.string().optional(),
          subscribers_url: z.coerce.string().optional(),
          subscription_url: z.coerce.string().optional(),
          tags_url: z.coerce.string().optional(),
          teams_url: z.coerce.string().optional(),
          trees_url: z.coerce.string().optional(),
          clone_url: z.coerce.string().optional(),
          mirror_url: z.coerce.string().optional(),
          hooks_url: z.coerce.string().optional(),
          svn_url: z.coerce.string().optional(),
          homepage: z.coerce.string().optional(),
          language: z.coerce.string().optional(),
          forks_count: z.coerce.number().optional(),
          stargazers_count: z.coerce.number().optional(),
          watchers_count: z.coerce.number().optional(),
          size: z.coerce.number().optional(),
          default_branch: z.coerce.string().optional(),
          open_issues_count: z.coerce.number().optional(),
          is_template: z.coerce.boolean().optional(),
          topics: z.array(z.coerce.string()).optional(),
          has_issues: z.coerce.boolean().optional(),
          has_projects: z.coerce.boolean().optional(),
          has_wiki: z.coerce.boolean().optional(),
          has_pages: z.coerce.boolean().optional(),
          has_downloads: z.coerce.boolean().optional(),
          archived: z.coerce.boolean().optional(),
          disabled: z.coerce.boolean().optional(),
          visibility: z.coerce.string().optional(),
          pushed_at: z.coerce.string().optional(),
          created_at: z.coerce.string().optional(),
          updated_at: z.coerce.string().optional(),
          permissions: z
            .object({
              admin: z.coerce.boolean().optional(),
              maintain: z.coerce.boolean().optional(),
              push: z.coerce.boolean().optional(),
              triage: z.coerce.boolean().optional(),
              pull: z.coerce.boolean().optional(),
            })
            .optional(),
          allow_rebase_merge: z.coerce.boolean().optional(),
          temp_clone_token: z.coerce.string().optional(),
          allow_squash_merge: z.coerce.boolean().optional(),
          allow_auto_merge: z.coerce.boolean().optional(),
          delete_branch_on_merge: z.coerce.boolean().optional(),
          allow_update_branch: z.coerce.boolean().optional(),
          use_squash_pr_title_as_default: z.coerce.boolean().optional(),
          squash_merge_commit_title: z
            .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
            .optional(),
          squash_merge_commit_message: z
            .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
            .optional(),
          merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
          merge_commit_message: z
            .enum(["PR_BODY", "PR_TITLE", "BLANK"])
            .optional(),
          allow_merge_commit: z.coerce.boolean().optional(),
          subscribers_count: z.coerce.number().optional(),
          network_count: z.coerce.number().optional(),
        })
        .optional(),
      temp_clone_token: z.coerce.string().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_auto_merge: z.coerce.boolean().optional(),
      delete_branch_on_merge: z.coerce.boolean().optional(),
      allow_update_branch: z.coerce.boolean().optional(),
      use_squash_pr_title_as_default: z.coerce.boolean().optional(),
      squash_merge_commit_title: z
        .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
        .optional(),
      squash_merge_commit_message: z
        .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
        .optional(),
      merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
      merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      allow_forking: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
      subscribers_count: z.coerce.number().optional(),
      network_count: z.coerce.number().optional(),
      open_issues: z.coerce.number(),
      watchers: z.coerce.number(),
      master_branch: z.coerce.string().optional(),
      starred_at: z.coerce.string().optional(),
      anonymous_access_enabled: z.coerce.boolean().optional(),
    }),
    sha: z.coerce.string(),
    user: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
  }),
  base: z.object({
    label: z.coerce.string(),
    ref: z.coerce.string(),
    repo: z.object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      full_name: z.coerce.string(),
      license: z.object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        spdx_id: z.coerce.string(),
        node_id: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      }),
      organization: z
        .object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        })
        .optional(),
      forks: z.coerce.number(),
      permissions: z
        .object({
          admin: z.coerce.boolean(),
          pull: z.coerce.boolean(),
          triage: z.coerce.boolean().optional(),
          push: z.coerce.boolean(),
          maintain: z.coerce.boolean().optional(),
        })
        .optional(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      private: z.coerce.boolean(),
      html_url: z.coerce.string(),
      description: z.coerce.string(),
      fork: z.coerce.boolean(),
      url: z.coerce.string(),
      archive_url: z.coerce.string(),
      assignees_url: z.coerce.string(),
      blobs_url: z.coerce.string(),
      branches_url: z.coerce.string(),
      collaborators_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      compare_url: z.coerce.string(),
      contents_url: z.coerce.string(),
      contributors_url: z.coerce.string(),
      deployments_url: z.coerce.string(),
      downloads_url: z.coerce.string(),
      events_url: z.coerce.string(),
      forks_url: z.coerce.string(),
      git_commits_url: z.coerce.string(),
      git_refs_url: z.coerce.string(),
      git_tags_url: z.coerce.string(),
      git_url: z.coerce.string(),
      issue_comment_url: z.coerce.string(),
      issue_events_url: z.coerce.string(),
      issues_url: z.coerce.string(),
      keys_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      languages_url: z.coerce.string(),
      merges_url: z.coerce.string(),
      milestones_url: z.coerce.string(),
      notifications_url: z.coerce.string(),
      pulls_url: z.coerce.string(),
      releases_url: z.coerce.string(),
      ssh_url: z.coerce.string(),
      stargazers_url: z.coerce.string(),
      statuses_url: z.coerce.string(),
      subscribers_url: z.coerce.string(),
      subscription_url: z.coerce.string(),
      tags_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      trees_url: z.coerce.string(),
      clone_url: z.coerce.string(),
      mirror_url: z.coerce.string(),
      hooks_url: z.coerce.string(),
      svn_url: z.coerce.string(),
      homepage: z.coerce.string(),
      language: z.coerce.string(),
      forks_count: z.coerce.number(),
      stargazers_count: z.coerce.number(),
      watchers_count: z.coerce.number(),
      size: z.coerce.number(),
      default_branch: z.coerce.string(),
      open_issues_count: z.coerce.number(),
      is_template: z.coerce.boolean().optional(),
      topics: z.array(z.coerce.string()).optional(),
      has_issues: z.coerce.boolean(),
      has_projects: z.coerce.boolean(),
      has_wiki: z.coerce.boolean(),
      has_pages: z.coerce.boolean(),
      has_downloads: z.coerce.boolean(),
      has_discussions: z.coerce.boolean().optional(),
      archived: z.coerce.boolean(),
      disabled: z.coerce.boolean(),
      visibility: z.coerce.string().optional(),
      pushed_at: z.coerce.string().datetime({ offset: true }),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      allow_rebase_merge: z.coerce.boolean().optional(),
      template_repository: z
        .object({
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          full_name: z.coerce.string().optional(),
          owner: z
            .object({
              login: z.coerce.string().optional(),
              id: z.coerce.number().optional(),
              node_id: z.coerce.string().optional(),
              avatar_url: z.coerce.string().optional(),
              gravatar_id: z.coerce.string().optional(),
              url: z.coerce.string().optional(),
              html_url: z.coerce.string().optional(),
              followers_url: z.coerce.string().optional(),
              following_url: z.coerce.string().optional(),
              gists_url: z.coerce.string().optional(),
              starred_url: z.coerce.string().optional(),
              subscriptions_url: z.coerce.string().optional(),
              organizations_url: z.coerce.string().optional(),
              repos_url: z.coerce.string().optional(),
              events_url: z.coerce.string().optional(),
              received_events_url: z.coerce.string().optional(),
              type: z.coerce.string().optional(),
              site_admin: z.coerce.boolean().optional(),
            })
            .optional(),
          private: z.coerce.boolean().optional(),
          html_url: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          fork: z.coerce.boolean().optional(),
          url: z.coerce.string().optional(),
          archive_url: z.coerce.string().optional(),
          assignees_url: z.coerce.string().optional(),
          blobs_url: z.coerce.string().optional(),
          branches_url: z.coerce.string().optional(),
          collaborators_url: z.coerce.string().optional(),
          comments_url: z.coerce.string().optional(),
          commits_url: z.coerce.string().optional(),
          compare_url: z.coerce.string().optional(),
          contents_url: z.coerce.string().optional(),
          contributors_url: z.coerce.string().optional(),
          deployments_url: z.coerce.string().optional(),
          downloads_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          forks_url: z.coerce.string().optional(),
          git_commits_url: z.coerce.string().optional(),
          git_refs_url: z.coerce.string().optional(),
          git_tags_url: z.coerce.string().optional(),
          git_url: z.coerce.string().optional(),
          issue_comment_url: z.coerce.string().optional(),
          issue_events_url: z.coerce.string().optional(),
          issues_url: z.coerce.string().optional(),
          keys_url: z.coerce.string().optional(),
          labels_url: z.coerce.string().optional(),
          languages_url: z.coerce.string().optional(),
          merges_url: z.coerce.string().optional(),
          milestones_url: z.coerce.string().optional(),
          notifications_url: z.coerce.string().optional(),
          pulls_url: z.coerce.string().optional(),
          releases_url: z.coerce.string().optional(),
          ssh_url: z.coerce.string().optional(),
          stargazers_url: z.coerce.string().optional(),
          statuses_url: z.coerce.string().optional(),
          subscribers_url: z.coerce.string().optional(),
          subscription_url: z.coerce.string().optional(),
          tags_url: z.coerce.string().optional(),
          teams_url: z.coerce.string().optional(),
          trees_url: z.coerce.string().optional(),
          clone_url: z.coerce.string().optional(),
          mirror_url: z.coerce.string().optional(),
          hooks_url: z.coerce.string().optional(),
          svn_url: z.coerce.string().optional(),
          homepage: z.coerce.string().optional(),
          language: z.coerce.string().optional(),
          forks_count: z.coerce.number().optional(),
          stargazers_count: z.coerce.number().optional(),
          watchers_count: z.coerce.number().optional(),
          size: z.coerce.number().optional(),
          default_branch: z.coerce.string().optional(),
          open_issues_count: z.coerce.number().optional(),
          is_template: z.coerce.boolean().optional(),
          topics: z.array(z.coerce.string()).optional(),
          has_issues: z.coerce.boolean().optional(),
          has_projects: z.coerce.boolean().optional(),
          has_wiki: z.coerce.boolean().optional(),
          has_pages: z.coerce.boolean().optional(),
          has_downloads: z.coerce.boolean().optional(),
          archived: z.coerce.boolean().optional(),
          disabled: z.coerce.boolean().optional(),
          visibility: z.coerce.string().optional(),
          pushed_at: z.coerce.string().optional(),
          created_at: z.coerce.string().optional(),
          updated_at: z.coerce.string().optional(),
          permissions: z
            .object({
              admin: z.coerce.boolean().optional(),
              maintain: z.coerce.boolean().optional(),
              push: z.coerce.boolean().optional(),
              triage: z.coerce.boolean().optional(),
              pull: z.coerce.boolean().optional(),
            })
            .optional(),
          allow_rebase_merge: z.coerce.boolean().optional(),
          temp_clone_token: z.coerce.string().optional(),
          allow_squash_merge: z.coerce.boolean().optional(),
          allow_auto_merge: z.coerce.boolean().optional(),
          delete_branch_on_merge: z.coerce.boolean().optional(),
          allow_update_branch: z.coerce.boolean().optional(),
          use_squash_pr_title_as_default: z.coerce.boolean().optional(),
          squash_merge_commit_title: z
            .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
            .optional(),
          squash_merge_commit_message: z
            .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
            .optional(),
          merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
          merge_commit_message: z
            .enum(["PR_BODY", "PR_TITLE", "BLANK"])
            .optional(),
          allow_merge_commit: z.coerce.boolean().optional(),
          subscribers_count: z.coerce.number().optional(),
          network_count: z.coerce.number().optional(),
        })
        .optional(),
      temp_clone_token: z.coerce.string().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_auto_merge: z.coerce.boolean().optional(),
      delete_branch_on_merge: z.coerce.boolean().optional(),
      allow_update_branch: z.coerce.boolean().optional(),
      use_squash_pr_title_as_default: z.coerce.boolean().optional(),
      squash_merge_commit_title: z
        .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
        .optional(),
      squash_merge_commit_message: z
        .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
        .optional(),
      merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
      merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      allow_forking: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
      subscribers_count: z.coerce.number().optional(),
      network_count: z.coerce.number().optional(),
      open_issues: z.coerce.number(),
      watchers: z.coerce.number(),
      master_branch: z.coerce.string().optional(),
      starred_at: z.coerce.string().optional(),
      anonymous_access_enabled: z.coerce.boolean().optional(),
    }),
    sha: z.coerce.string(),
    user: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
  }),
  _links: z.object({
    comments: z.object({ href: z.coerce.string() }),
    commits: z.object({ href: z.coerce.string() }),
    statuses: z.object({ href: z.coerce.string() }),
    html: z.object({ href: z.coerce.string() }),
    issue: z.object({ href: z.coerce.string() }),
    review_comments: z.object({ href: z.coerce.string() }),
    review_comment: z.object({ href: z.coerce.string() }),
    self: z.object({ href: z.coerce.string() }),
  }),
  author_association: z.enum([
    "COLLABORATOR",
    "CONTRIBUTOR",
    "FIRST_TIMER",
    "FIRST_TIME_CONTRIBUTOR",
    "MANNEQUIN",
    "MEMBER",
    "NONE",
    "OWNER",
  ]),
  auto_merge: z.object({
    enabled_by: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    merge_method: z.enum(["merge", "squash", "rebase"]),
    commit_title: z.coerce.string(),
    commit_message: z.coerce.string(),
  }),
  draft: z.coerce.boolean().optional(),
})

export const s_rate_limit_overview = z.object({
  resources: z.object({
    core: z.object({
      limit: z.coerce.number(),
      remaining: z.coerce.number(),
      reset: z.coerce.number(),
      used: z.coerce.number(),
    }),
    graphql: z
      .object({
        limit: z.coerce.number(),
        remaining: z.coerce.number(),
        reset: z.coerce.number(),
        used: z.coerce.number(),
      })
      .optional(),
    search: z.object({
      limit: z.coerce.number(),
      remaining: z.coerce.number(),
      reset: z.coerce.number(),
      used: z.coerce.number(),
    }),
    source_import: z
      .object({
        limit: z.coerce.number(),
        remaining: z.coerce.number(),
        reset: z.coerce.number(),
        used: z.coerce.number(),
      })
      .optional(),
    integration_manifest: z
      .object({
        limit: z.coerce.number(),
        remaining: z.coerce.number(),
        reset: z.coerce.number(),
        used: z.coerce.number(),
      })
      .optional(),
    code_scanning_upload: z
      .object({
        limit: z.coerce.number(),
        remaining: z.coerce.number(),
        reset: z.coerce.number(),
        used: z.coerce.number(),
      })
      .optional(),
    actions_runner_registration: z
      .object({
        limit: z.coerce.number(),
        remaining: z.coerce.number(),
        reset: z.coerce.number(),
        used: z.coerce.number(),
      })
      .optional(),
    scim: z
      .object({
        limit: z.coerce.number(),
        remaining: z.coerce.number(),
        reset: z.coerce.number(),
        used: z.coerce.number(),
      })
      .optional(),
    dependency_snapshots: z
      .object({
        limit: z.coerce.number(),
        remaining: z.coerce.number(),
        reset: z.coerce.number(),
        used: z.coerce.number(),
      })
      .optional(),
  }),
  rate: z.object({
    limit: z.coerce.number(),
    remaining: z.coerce.number(),
    reset: z.coerce.number(),
    used: z.coerce.number(),
  }),
})

export const s_reaction = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  user: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  content: z.enum([
    "+1",
    "-1",
    "laugh",
    "confused",
    "heart",
    "hooray",
    "rocket",
    "eyes",
  ]),
  created_at: z.coerce.string().datetime({ offset: true }),
})

export const s_release = z.object({
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  assets_url: z.coerce.string(),
  upload_url: z.coerce.string(),
  tarball_url: z.coerce.string(),
  zipball_url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  tag_name: z.coerce.string(),
  target_commitish: z.coerce.string(),
  name: z.coerce.string(),
  body: z.coerce.string().optional(),
  draft: z.coerce.boolean(),
  prerelease: z.coerce.boolean(),
  created_at: z.coerce.string().datetime({ offset: true }),
  published_at: z.coerce.string().datetime({ offset: true }),
  author: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  assets: z.array(
    z.object({
      url: z.coerce.string(),
      browser_download_url: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      label: z.coerce.string(),
      state: z.enum(["uploaded", "open"]),
      content_type: z.coerce.string(),
      size: z.coerce.number(),
      download_count: z.coerce.number(),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      uploader: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
    })
  ),
  body_html: z.coerce.string().optional(),
  body_text: z.coerce.string().optional(),
  mentions_count: z.coerce.number().optional(),
  discussion_url: z.coerce.string().optional(),
  reactions: z
    .object({
      url: z.coerce.string(),
      total_count: z.coerce.number(),
      "+1": z.coerce.number(),
      "-1": z.coerce.number(),
      laugh: z.coerce.number(),
      confused: z.coerce.number(),
      heart: z.coerce.number(),
      hooray: z.coerce.number(),
      eyes: z.coerce.number(),
      rocket: z.coerce.number(),
    })
    .optional(),
})

export const s_release_asset = z.object({
  url: z.coerce.string(),
  browser_download_url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  label: z.coerce.string(),
  state: z.enum(["uploaded", "open"]),
  content_type: z.coerce.string(),
  size: z.coerce.number(),
  download_count: z.coerce.number(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  uploader: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
})

export const s_release_notes_content = z.object({
  name: z.coerce.string(),
  body: z.coerce.string(),
})

export const s_repo_codespaces_secret = z.object({
  name: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
})

export const s_repo_required_workflow = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  path: z.coerce.string(),
  state: z.enum(["active", "deleted"]),
  source_repository: z.object({
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    name: z.coerce.string(),
    full_name: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    private: z.coerce.boolean(),
    html_url: z.coerce.string(),
    description: z.coerce.string(),
    fork: z.coerce.boolean(),
    url: z.coerce.string(),
    archive_url: z.coerce.string(),
    assignees_url: z.coerce.string(),
    blobs_url: z.coerce.string(),
    branches_url: z.coerce.string(),
    collaborators_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commits_url: z.coerce.string(),
    compare_url: z.coerce.string(),
    contents_url: z.coerce.string(),
    contributors_url: z.coerce.string(),
    deployments_url: z.coerce.string(),
    downloads_url: z.coerce.string(),
    events_url: z.coerce.string(),
    forks_url: z.coerce.string(),
    git_commits_url: z.coerce.string(),
    git_refs_url: z.coerce.string(),
    git_tags_url: z.coerce.string(),
    git_url: z.coerce.string().optional(),
    issue_comment_url: z.coerce.string(),
    issue_events_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    keys_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    languages_url: z.coerce.string(),
    merges_url: z.coerce.string(),
    milestones_url: z.coerce.string(),
    notifications_url: z.coerce.string(),
    pulls_url: z.coerce.string(),
    releases_url: z.coerce.string(),
    ssh_url: z.coerce.string().optional(),
    stargazers_url: z.coerce.string(),
    statuses_url: z.coerce.string(),
    subscribers_url: z.coerce.string(),
    subscription_url: z.coerce.string(),
    tags_url: z.coerce.string(),
    teams_url: z.coerce.string(),
    trees_url: z.coerce.string(),
    clone_url: z.coerce.string().optional(),
    mirror_url: z.coerce.string().optional(),
    hooks_url: z.coerce.string(),
    svn_url: z.coerce.string().optional(),
    homepage: z.coerce.string().optional(),
    language: z.coerce.string().optional(),
    forks_count: z.coerce.number().optional(),
    stargazers_count: z.coerce.number().optional(),
    watchers_count: z.coerce.number().optional(),
    size: z.coerce.number().optional(),
    default_branch: z.coerce.string().optional(),
    open_issues_count: z.coerce.number().optional(),
    is_template: z.coerce.boolean().optional(),
    topics: z.array(z.coerce.string()).optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_pages: z.coerce.boolean().optional(),
    has_downloads: z.coerce.boolean().optional(),
    has_discussions: z.coerce.boolean().optional(),
    archived: z.coerce.boolean().optional(),
    disabled: z.coerce.boolean().optional(),
    visibility: z.coerce.string().optional(),
    pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
    created_at: z.coerce.string().datetime({ offset: true }).optional(),
    updated_at: z.coerce.string().datetime({ offset: true }).optional(),
    permissions: z
      .object({
        admin: z.coerce.boolean().optional(),
        maintain: z.coerce.boolean().optional(),
        push: z.coerce.boolean().optional(),
        triage: z.coerce.boolean().optional(),
        pull: z.coerce.boolean().optional(),
      })
      .optional(),
    role_name: z.coerce.string().optional(),
    temp_clone_token: z.coerce.string().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    subscribers_count: z.coerce.number().optional(),
    network_count: z.coerce.number().optional(),
    code_of_conduct: z
      .object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        body: z.coerce.string().optional(),
        html_url: z.coerce.string(),
      })
      .optional(),
    license: z
      .object({
        key: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        spdx_id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        node_id: z.coerce.string().optional(),
      })
      .optional(),
    forks: z.coerce.number().optional(),
    open_issues: z.coerce.number().optional(),
    watchers: z.coerce.number().optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
      })
      .optional(),
  }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  badge_url: z.coerce.string(),
})

export const s_repository = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  full_name: z.coerce.string(),
  license: z.object({
    key: z.coerce.string(),
    name: z.coerce.string(),
    url: z.coerce.string(),
    spdx_id: z.coerce.string(),
    node_id: z.coerce.string(),
    html_url: z.coerce.string().optional(),
  }),
  organization: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  forks: z.coerce.number(),
  permissions: z
    .object({
      admin: z.coerce.boolean(),
      pull: z.coerce.boolean(),
      triage: z.coerce.boolean().optional(),
      push: z.coerce.boolean(),
      maintain: z.coerce.boolean().optional(),
    })
    .optional(),
  owner: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  private: z.coerce.boolean(),
  html_url: z.coerce.string(),
  description: z.coerce.string(),
  fork: z.coerce.boolean(),
  url: z.coerce.string(),
  archive_url: z.coerce.string(),
  assignees_url: z.coerce.string(),
  blobs_url: z.coerce.string(),
  branches_url: z.coerce.string(),
  collaborators_url: z.coerce.string(),
  comments_url: z.coerce.string(),
  commits_url: z.coerce.string(),
  compare_url: z.coerce.string(),
  contents_url: z.coerce.string(),
  contributors_url: z.coerce.string(),
  deployments_url: z.coerce.string(),
  downloads_url: z.coerce.string(),
  events_url: z.coerce.string(),
  forks_url: z.coerce.string(),
  git_commits_url: z.coerce.string(),
  git_refs_url: z.coerce.string(),
  git_tags_url: z.coerce.string(),
  git_url: z.coerce.string(),
  issue_comment_url: z.coerce.string(),
  issue_events_url: z.coerce.string(),
  issues_url: z.coerce.string(),
  keys_url: z.coerce.string(),
  labels_url: z.coerce.string(),
  languages_url: z.coerce.string(),
  merges_url: z.coerce.string(),
  milestones_url: z.coerce.string(),
  notifications_url: z.coerce.string(),
  pulls_url: z.coerce.string(),
  releases_url: z.coerce.string(),
  ssh_url: z.coerce.string(),
  stargazers_url: z.coerce.string(),
  statuses_url: z.coerce.string(),
  subscribers_url: z.coerce.string(),
  subscription_url: z.coerce.string(),
  tags_url: z.coerce.string(),
  teams_url: z.coerce.string(),
  trees_url: z.coerce.string(),
  clone_url: z.coerce.string(),
  mirror_url: z.coerce.string(),
  hooks_url: z.coerce.string(),
  svn_url: z.coerce.string(),
  homepage: z.coerce.string(),
  language: z.coerce.string(),
  forks_count: z.coerce.number(),
  stargazers_count: z.coerce.number(),
  watchers_count: z.coerce.number(),
  size: z.coerce.number(),
  default_branch: z.coerce.string(),
  open_issues_count: z.coerce.number(),
  is_template: z.coerce.boolean().optional(),
  topics: z.array(z.coerce.string()).optional(),
  has_issues: z.coerce.boolean(),
  has_projects: z.coerce.boolean(),
  has_wiki: z.coerce.boolean(),
  has_pages: z.coerce.boolean(),
  has_downloads: z.coerce.boolean(),
  has_discussions: z.coerce.boolean().optional(),
  archived: z.coerce.boolean(),
  disabled: z.coerce.boolean(),
  visibility: z.coerce.string().optional(),
  pushed_at: z.coerce.string().datetime({ offset: true }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  allow_rebase_merge: z.coerce.boolean().optional(),
  template_repository: z
    .object({
      id: z.coerce.number().optional(),
      node_id: z.coerce.string().optional(),
      name: z.coerce.string().optional(),
      full_name: z.coerce.string().optional(),
      owner: z
        .object({
          login: z.coerce.string().optional(),
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          avatar_url: z.coerce.string().optional(),
          gravatar_id: z.coerce.string().optional(),
          url: z.coerce.string().optional(),
          html_url: z.coerce.string().optional(),
          followers_url: z.coerce.string().optional(),
          following_url: z.coerce.string().optional(),
          gists_url: z.coerce.string().optional(),
          starred_url: z.coerce.string().optional(),
          subscriptions_url: z.coerce.string().optional(),
          organizations_url: z.coerce.string().optional(),
          repos_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          received_events_url: z.coerce.string().optional(),
          type: z.coerce.string().optional(),
          site_admin: z.coerce.boolean().optional(),
        })
        .optional(),
      private: z.coerce.boolean().optional(),
      html_url: z.coerce.string().optional(),
      description: z.coerce.string().optional(),
      fork: z.coerce.boolean().optional(),
      url: z.coerce.string().optional(),
      archive_url: z.coerce.string().optional(),
      assignees_url: z.coerce.string().optional(),
      blobs_url: z.coerce.string().optional(),
      branches_url: z.coerce.string().optional(),
      collaborators_url: z.coerce.string().optional(),
      comments_url: z.coerce.string().optional(),
      commits_url: z.coerce.string().optional(),
      compare_url: z.coerce.string().optional(),
      contents_url: z.coerce.string().optional(),
      contributors_url: z.coerce.string().optional(),
      deployments_url: z.coerce.string().optional(),
      downloads_url: z.coerce.string().optional(),
      events_url: z.coerce.string().optional(),
      forks_url: z.coerce.string().optional(),
      git_commits_url: z.coerce.string().optional(),
      git_refs_url: z.coerce.string().optional(),
      git_tags_url: z.coerce.string().optional(),
      git_url: z.coerce.string().optional(),
      issue_comment_url: z.coerce.string().optional(),
      issue_events_url: z.coerce.string().optional(),
      issues_url: z.coerce.string().optional(),
      keys_url: z.coerce.string().optional(),
      labels_url: z.coerce.string().optional(),
      languages_url: z.coerce.string().optional(),
      merges_url: z.coerce.string().optional(),
      milestones_url: z.coerce.string().optional(),
      notifications_url: z.coerce.string().optional(),
      pulls_url: z.coerce.string().optional(),
      releases_url: z.coerce.string().optional(),
      ssh_url: z.coerce.string().optional(),
      stargazers_url: z.coerce.string().optional(),
      statuses_url: z.coerce.string().optional(),
      subscribers_url: z.coerce.string().optional(),
      subscription_url: z.coerce.string().optional(),
      tags_url: z.coerce.string().optional(),
      teams_url: z.coerce.string().optional(),
      trees_url: z.coerce.string().optional(),
      clone_url: z.coerce.string().optional(),
      mirror_url: z.coerce.string().optional(),
      hooks_url: z.coerce.string().optional(),
      svn_url: z.coerce.string().optional(),
      homepage: z.coerce.string().optional(),
      language: z.coerce.string().optional(),
      forks_count: z.coerce.number().optional(),
      stargazers_count: z.coerce.number().optional(),
      watchers_count: z.coerce.number().optional(),
      size: z.coerce.number().optional(),
      default_branch: z.coerce.string().optional(),
      open_issues_count: z.coerce.number().optional(),
      is_template: z.coerce.boolean().optional(),
      topics: z.array(z.coerce.string()).optional(),
      has_issues: z.coerce.boolean().optional(),
      has_projects: z.coerce.boolean().optional(),
      has_wiki: z.coerce.boolean().optional(),
      has_pages: z.coerce.boolean().optional(),
      has_downloads: z.coerce.boolean().optional(),
      archived: z.coerce.boolean().optional(),
      disabled: z.coerce.boolean().optional(),
      visibility: z.coerce.string().optional(),
      pushed_at: z.coerce.string().optional(),
      created_at: z.coerce.string().optional(),
      updated_at: z.coerce.string().optional(),
      permissions: z
        .object({
          admin: z.coerce.boolean().optional(),
          maintain: z.coerce.boolean().optional(),
          push: z.coerce.boolean().optional(),
          triage: z.coerce.boolean().optional(),
          pull: z.coerce.boolean().optional(),
        })
        .optional(),
      allow_rebase_merge: z.coerce.boolean().optional(),
      temp_clone_token: z.coerce.string().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_auto_merge: z.coerce.boolean().optional(),
      delete_branch_on_merge: z.coerce.boolean().optional(),
      allow_update_branch: z.coerce.boolean().optional(),
      use_squash_pr_title_as_default: z.coerce.boolean().optional(),
      squash_merge_commit_title: z
        .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
        .optional(),
      squash_merge_commit_message: z
        .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
        .optional(),
      merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
      merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      subscribers_count: z.coerce.number().optional(),
      network_count: z.coerce.number().optional(),
    })
    .optional(),
  temp_clone_token: z.coerce.string().optional(),
  allow_squash_merge: z.coerce.boolean().optional(),
  allow_auto_merge: z.coerce.boolean().optional(),
  delete_branch_on_merge: z.coerce.boolean().optional(),
  allow_update_branch: z.coerce.boolean().optional(),
  use_squash_pr_title_as_default: z.coerce.boolean().optional(),
  squash_merge_commit_title: z
    .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
    .optional(),
  squash_merge_commit_message: z
    .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
    .optional(),
  merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
  merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
  allow_merge_commit: z.coerce.boolean().optional(),
  allow_forking: z.coerce.boolean().optional(),
  web_commit_signoff_required: z.coerce.boolean().optional(),
  subscribers_count: z.coerce.number().optional(),
  network_count: z.coerce.number().optional(),
  open_issues: z.coerce.number(),
  watchers: z.coerce.number(),
  master_branch: z.coerce.string().optional(),
  starred_at: z.coerce.string().optional(),
  anonymous_access_enabled: z.coerce.boolean().optional(),
})

export const s_repository_collaborator_permission = z.object({
  permission: z.coerce.string(),
  role_name: z.coerce.string(),
  user: z.object({
    login: z.coerce.string(),
    id: z.coerce.number(),
    email: z.coerce.string().optional(),
    name: z.coerce.string().optional(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    permissions: z
      .object({
        pull: z.coerce.boolean(),
        triage: z.coerce.boolean().optional(),
        push: z.coerce.boolean(),
        maintain: z.coerce.boolean().optional(),
        admin: z.coerce.boolean(),
      })
      .optional(),
    role_name: z.coerce.string(),
  }),
})

export const s_repository_invitation = z.object({
  id: z.coerce.number(),
  repository: z.object({
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    name: z.coerce.string(),
    full_name: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    private: z.coerce.boolean(),
    html_url: z.coerce.string(),
    description: z.coerce.string(),
    fork: z.coerce.boolean(),
    url: z.coerce.string(),
    archive_url: z.coerce.string(),
    assignees_url: z.coerce.string(),
    blobs_url: z.coerce.string(),
    branches_url: z.coerce.string(),
    collaborators_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commits_url: z.coerce.string(),
    compare_url: z.coerce.string(),
    contents_url: z.coerce.string(),
    contributors_url: z.coerce.string(),
    deployments_url: z.coerce.string(),
    downloads_url: z.coerce.string(),
    events_url: z.coerce.string(),
    forks_url: z.coerce.string(),
    git_commits_url: z.coerce.string(),
    git_refs_url: z.coerce.string(),
    git_tags_url: z.coerce.string(),
    git_url: z.coerce.string().optional(),
    issue_comment_url: z.coerce.string(),
    issue_events_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    keys_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    languages_url: z.coerce.string(),
    merges_url: z.coerce.string(),
    milestones_url: z.coerce.string(),
    notifications_url: z.coerce.string(),
    pulls_url: z.coerce.string(),
    releases_url: z.coerce.string(),
    ssh_url: z.coerce.string().optional(),
    stargazers_url: z.coerce.string(),
    statuses_url: z.coerce.string(),
    subscribers_url: z.coerce.string(),
    subscription_url: z.coerce.string(),
    tags_url: z.coerce.string(),
    teams_url: z.coerce.string(),
    trees_url: z.coerce.string(),
    clone_url: z.coerce.string().optional(),
    mirror_url: z.coerce.string().optional(),
    hooks_url: z.coerce.string(),
    svn_url: z.coerce.string().optional(),
    homepage: z.coerce.string().optional(),
    language: z.coerce.string().optional(),
    forks_count: z.coerce.number().optional(),
    stargazers_count: z.coerce.number().optional(),
    watchers_count: z.coerce.number().optional(),
    size: z.coerce.number().optional(),
    default_branch: z.coerce.string().optional(),
    open_issues_count: z.coerce.number().optional(),
    is_template: z.coerce.boolean().optional(),
    topics: z.array(z.coerce.string()).optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_pages: z.coerce.boolean().optional(),
    has_downloads: z.coerce.boolean().optional(),
    has_discussions: z.coerce.boolean().optional(),
    archived: z.coerce.boolean().optional(),
    disabled: z.coerce.boolean().optional(),
    visibility: z.coerce.string().optional(),
    pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
    created_at: z.coerce.string().datetime({ offset: true }).optional(),
    updated_at: z.coerce.string().datetime({ offset: true }).optional(),
    permissions: z
      .object({
        admin: z.coerce.boolean().optional(),
        maintain: z.coerce.boolean().optional(),
        push: z.coerce.boolean().optional(),
        triage: z.coerce.boolean().optional(),
        pull: z.coerce.boolean().optional(),
      })
      .optional(),
    role_name: z.coerce.string().optional(),
    temp_clone_token: z.coerce.string().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    subscribers_count: z.coerce.number().optional(),
    network_count: z.coerce.number().optional(),
    code_of_conduct: z
      .object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        body: z.coerce.string().optional(),
        html_url: z.coerce.string(),
      })
      .optional(),
    license: z
      .object({
        key: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        spdx_id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        node_id: z.coerce.string().optional(),
      })
      .optional(),
    forks: z.coerce.number().optional(),
    open_issues: z.coerce.number().optional(),
    watchers: z.coerce.number().optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
      })
      .optional(),
  }),
  invitee: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  inviter: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  permissions: z.enum(["read", "write", "admin", "triage", "maintain"]),
  created_at: z.coerce.string().datetime({ offset: true }),
  expired: z.coerce.boolean().optional(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  node_id: z.coerce.string(),
})

export const s_repository_subscription = z.object({
  subscribed: z.coerce.boolean(),
  ignored: z.coerce.boolean(),
  reason: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  url: z.coerce.string(),
  repository_url: z.coerce.string(),
})

export const s_required_workflow = z.object({
  id: z.coerce.number(),
  name: z.coerce.string(),
  path: z.coerce.string(),
  scope: z.enum(["all", "selected"]),
  ref: z.coerce.string(),
  state: z.enum(["active", "deleted"]),
  selected_repositories_url: z.coerce.string().optional(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  repository: z.object({
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    name: z.coerce.string(),
    full_name: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    private: z.coerce.boolean(),
    html_url: z.coerce.string(),
    description: z.coerce.string(),
    fork: z.coerce.boolean(),
    url: z.coerce.string(),
    archive_url: z.coerce.string(),
    assignees_url: z.coerce.string(),
    blobs_url: z.coerce.string(),
    branches_url: z.coerce.string(),
    collaborators_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commits_url: z.coerce.string(),
    compare_url: z.coerce.string(),
    contents_url: z.coerce.string(),
    contributors_url: z.coerce.string(),
    deployments_url: z.coerce.string(),
    downloads_url: z.coerce.string(),
    events_url: z.coerce.string(),
    forks_url: z.coerce.string(),
    git_commits_url: z.coerce.string(),
    git_refs_url: z.coerce.string(),
    git_tags_url: z.coerce.string(),
    git_url: z.coerce.string().optional(),
    issue_comment_url: z.coerce.string(),
    issue_events_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    keys_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    languages_url: z.coerce.string(),
    merges_url: z.coerce.string(),
    milestones_url: z.coerce.string(),
    notifications_url: z.coerce.string(),
    pulls_url: z.coerce.string(),
    releases_url: z.coerce.string(),
    ssh_url: z.coerce.string().optional(),
    stargazers_url: z.coerce.string(),
    statuses_url: z.coerce.string(),
    subscribers_url: z.coerce.string(),
    subscription_url: z.coerce.string(),
    tags_url: z.coerce.string(),
    teams_url: z.coerce.string(),
    trees_url: z.coerce.string(),
    clone_url: z.coerce.string().optional(),
    mirror_url: z.coerce.string().optional(),
    hooks_url: z.coerce.string(),
    svn_url: z.coerce.string().optional(),
    homepage: z.coerce.string().optional(),
    language: z.coerce.string().optional(),
    forks_count: z.coerce.number().optional(),
    stargazers_count: z.coerce.number().optional(),
    watchers_count: z.coerce.number().optional(),
    size: z.coerce.number().optional(),
    default_branch: z.coerce.string().optional(),
    open_issues_count: z.coerce.number().optional(),
    is_template: z.coerce.boolean().optional(),
    topics: z.array(z.coerce.string()).optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_pages: z.coerce.boolean().optional(),
    has_downloads: z.coerce.boolean().optional(),
    has_discussions: z.coerce.boolean().optional(),
    archived: z.coerce.boolean().optional(),
    disabled: z.coerce.boolean().optional(),
    visibility: z.coerce.string().optional(),
    pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
    created_at: z.coerce.string().datetime({ offset: true }).optional(),
    updated_at: z.coerce.string().datetime({ offset: true }).optional(),
    permissions: z
      .object({
        admin: z.coerce.boolean().optional(),
        maintain: z.coerce.boolean().optional(),
        push: z.coerce.boolean().optional(),
        triage: z.coerce.boolean().optional(),
        pull: z.coerce.boolean().optional(),
      })
      .optional(),
    role_name: z.coerce.string().optional(),
    temp_clone_token: z.coerce.string().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    subscribers_count: z.coerce.number().optional(),
    network_count: z.coerce.number().optional(),
    code_of_conduct: z
      .object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        body: z.coerce.string().optional(),
        html_url: z.coerce.string(),
      })
      .optional(),
    license: z
      .object({
        key: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        spdx_id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        node_id: z.coerce.string().optional(),
      })
      .optional(),
    forks: z.coerce.number().optional(),
    open_issues: z.coerce.number().optional(),
    watchers: z.coerce.number().optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
      })
      .optional(),
  }),
})

export const s_root = z.object({
  current_user_url: z.coerce.string(),
  current_user_authorizations_html_url: z.coerce.string(),
  authorizations_url: z.coerce.string(),
  code_search_url: z.coerce.string(),
  commit_search_url: z.coerce.string(),
  emails_url: z.coerce.string(),
  emojis_url: z.coerce.string(),
  events_url: z.coerce.string(),
  feeds_url: z.coerce.string(),
  followers_url: z.coerce.string(),
  following_url: z.coerce.string(),
  gists_url: z.coerce.string(),
  hub_url: z.coerce.string(),
  issue_search_url: z.coerce.string(),
  issues_url: z.coerce.string(),
  keys_url: z.coerce.string(),
  label_search_url: z.coerce.string(),
  notifications_url: z.coerce.string(),
  organization_url: z.coerce.string(),
  organization_repositories_url: z.coerce.string(),
  organization_teams_url: z.coerce.string(),
  public_gists_url: z.coerce.string(),
  rate_limit_url: z.coerce.string(),
  repository_url: z.coerce.string(),
  repository_search_url: z.coerce.string(),
  current_user_repositories_url: z.coerce.string(),
  starred_url: z.coerce.string(),
  starred_gists_url: z.coerce.string(),
  topic_search_url: z.coerce.string().optional(),
  user_url: z.coerce.string(),
  user_organizations_url: z.coerce.string(),
  user_repositories_url: z.coerce.string(),
  user_search_url: z.coerce.string(),
})

export const s_runner = z.object({
  id: z.coerce.number(),
  name: z.coerce.string(),
  os: z.coerce.string(),
  status: z.coerce.string(),
  busy: z.coerce.boolean(),
  labels: z.array(
    z.object({
      id: z.coerce.number().optional(),
      name: z.coerce.string(),
      type: z.enum(["read-only", "custom"]).optional(),
    })
  ),
})

export const s_runner_groups_enterprise = z.object({
  id: z.coerce.number(),
  name: z.coerce.string(),
  visibility: z.coerce.string(),
  default: z.coerce.boolean(),
  selected_organizations_url: z.coerce.string().optional(),
  runners_url: z.coerce.string(),
  allows_public_repositories: z.coerce.boolean(),
  workflow_restrictions_read_only: z.coerce.boolean().optional(),
  restricted_to_workflows: z.coerce.boolean().optional(),
  selected_workflows: z.array(z.coerce.string()).optional(),
})

export const s_runner_groups_org = z.object({
  id: z.coerce.number(),
  name: z.coerce.string(),
  visibility: z.coerce.string(),
  default: z.coerce.boolean(),
  selected_repositories_url: z.coerce.string().optional(),
  runners_url: z.coerce.string(),
  inherited: z.coerce.boolean(),
  inherited_allows_public_repositories: z.coerce.boolean().optional(),
  allows_public_repositories: z.coerce.boolean(),
  workflow_restrictions_read_only: z.coerce.boolean().optional(),
  restricted_to_workflows: z.coerce.boolean().optional(),
  selected_workflows: z.array(z.coerce.string()).optional(),
})

export const s_scim_error = z.object({
  message: z.coerce.string().optional(),
  documentation_url: z.coerce.string().optional(),
  detail: z.coerce.string().optional(),
  status: z.coerce.number().optional(),
  scimType: z.coerce.string().optional(),
  schemas: z.array(z.coerce.string()).optional(),
})

export const s_secret_scanning_alert = z.object({
  number: z.coerce.number().optional(),
  created_at: z.coerce.string().datetime({ offset: true }).optional(),
  updated_at: z.coerce.string().datetime({ offset: true }).optional(),
  url: z.coerce.string().optional(),
  html_url: z.coerce.string().optional(),
  locations_url: z.coerce.string().optional(),
  state: z.enum(["open", "resolved"]).optional(),
  resolution: z
    .enum(["null", "false_positive", "wont_fix", "revoked", "used_in_tests"])
    .optional(),
  resolved_at: z.coerce.string().datetime({ offset: true }).optional(),
  resolved_by: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  resolution_comment: z.coerce.string().optional(),
  secret_type: z.coerce.string().optional(),
  secret_type_display_name: z.coerce.string().optional(),
  secret: z.coerce.string().optional(),
  push_protection_bypassed: z.coerce.boolean().optional(),
  push_protection_bypassed_by: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  push_protection_bypassed_at: z.coerce
    .string()
    .datetime({ offset: true })
    .optional(),
})

export const s_secret_scanning_location_commit = z.object({
  path: z.coerce.string(),
  start_line: z.coerce.number(),
  end_line: z.coerce.number(),
  start_column: z.coerce.number(),
  end_column: z.coerce.number(),
  blob_sha: z.coerce.string(),
  blob_url: z.coerce.string(),
  commit_sha: z.coerce.string(),
  commit_url: z.coerce.string(),
})

export const s_secret_scanning_location_issue_body = z.object({
  issue_body_url: z.coerce.string(),
})

export const s_secret_scanning_location_issue_comment = z.object({
  issue_comment_url: z.coerce.string(),
})

export const s_secret_scanning_location_issue_title = z.object({
  issue_title_url: z.coerce.string(),
})

export const s_selected_actions = z.object({
  github_owned_allowed: z.coerce.boolean().optional(),
  verified_allowed: z.coerce.boolean().optional(),
  patterns_allowed: z.array(z.coerce.string()).optional(),
})

export const s_short_blob = z.object({
  url: z.coerce.string(),
  sha: z.coerce.string(),
})

export const s_snapshot = z.object({
  version: z.coerce.number(),
  job: z.object({
    id: z.coerce.string(),
    correlator: z.coerce.string(),
    html_url: z.coerce.string().optional(),
  }),
  sha: z.coerce.string(),
  ref: z.coerce.string(),
  detector: z.object({
    name: z.coerce.string(),
    version: z.coerce.string(),
    url: z.coerce.string(),
  }),
  metadata: z.object({}).optional(),
  manifests: z.object({}).optional(),
  scanned: z.coerce.string().datetime({ offset: true }),
})

export const s_ssh_signing_key = z.object({
  key: z.coerce.string(),
  id: z.coerce.number(),
  title: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
})

export const s_status = z.object({
  url: z.coerce.string(),
  avatar_url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  state: z.coerce.string(),
  description: z.coerce.string(),
  target_url: z.coerce.string(),
  context: z.coerce.string(),
  created_at: z.coerce.string(),
  updated_at: z.coerce.string(),
  creator: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
})

export const s_status_check_policy = z.object({
  url: z.coerce.string(),
  strict: z.coerce.boolean(),
  contexts: z.array(z.coerce.string()),
  checks: z.array(
    z.object({ context: z.coerce.string(), app_id: z.coerce.number() })
  ),
  contexts_url: z.coerce.string(),
})

export const s_tag_protection = z.object({
  id: z.coerce.number().optional(),
  created_at: z.coerce.string().optional(),
  updated_at: z.coerce.string().optional(),
  enabled: z.coerce.boolean().optional(),
  pattern: z.coerce.string(),
})

export const s_team_discussion = z.object({
  author: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  body: z.coerce.string(),
  body_html: z.coerce.string(),
  body_version: z.coerce.string(),
  comments_count: z.coerce.number(),
  comments_url: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  last_edited_at: z.coerce.string().datetime({ offset: true }),
  html_url: z.coerce.string(),
  node_id: z.coerce.string(),
  number: z.coerce.number(),
  pinned: z.coerce.boolean(),
  private: z.coerce.boolean(),
  team_url: z.coerce.string(),
  title: z.coerce.string(),
  updated_at: z.coerce.string().datetime({ offset: true }),
  url: z.coerce.string(),
  reactions: z
    .object({
      url: z.coerce.string(),
      total_count: z.coerce.number(),
      "+1": z.coerce.number(),
      "-1": z.coerce.number(),
      laugh: z.coerce.number(),
      confused: z.coerce.number(),
      heart: z.coerce.number(),
      hooray: z.coerce.number(),
      eyes: z.coerce.number(),
      rocket: z.coerce.number(),
    })
    .optional(),
})

export const s_team_discussion_comment = z.object({
  author: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  body: z.coerce.string(),
  body_html: z.coerce.string(),
  body_version: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  last_edited_at: z.coerce.string().datetime({ offset: true }),
  discussion_url: z.coerce.string(),
  html_url: z.coerce.string(),
  node_id: z.coerce.string(),
  number: z.coerce.number(),
  updated_at: z.coerce.string().datetime({ offset: true }),
  url: z.coerce.string(),
  reactions: z
    .object({
      url: z.coerce.string(),
      total_count: z.coerce.number(),
      "+1": z.coerce.number(),
      "-1": z.coerce.number(),
      laugh: z.coerce.number(),
      confused: z.coerce.number(),
      heart: z.coerce.number(),
      hooray: z.coerce.number(),
      eyes: z.coerce.number(),
      rocket: z.coerce.number(),
    })
    .optional(),
})

export const s_team_full = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  name: z.coerce.string(),
  slug: z.coerce.string(),
  description: z.coerce.string(),
  privacy: z.enum(["closed", "secret"]).optional(),
  permission: z.coerce.string(),
  members_url: z.coerce.string(),
  repositories_url: z.coerce.string(),
  parent: z
    .object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      url: z.coerce.string(),
      members_url: z.coerce.string(),
      name: z.coerce.string(),
      description: z.coerce.string(),
      permission: z.coerce.string(),
      privacy: z.coerce.string().optional(),
      html_url: z.coerce.string(),
      repositories_url: z.coerce.string(),
      slug: z.coerce.string(),
      ldap_dn: z.coerce.string().optional(),
    })
    .optional(),
  members_count: z.coerce.number(),
  repos_count: z.coerce.number(),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  organization: z.object({
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    hooks_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    members_url: z.coerce.string(),
    public_members_url: z.coerce.string(),
    avatar_url: z.coerce.string(),
    description: z.coerce.string(),
    name: z.coerce.string().optional(),
    company: z.coerce.string().optional(),
    blog: z.coerce.string().optional(),
    location: z.coerce.string().optional(),
    email: z.coerce.string().email().optional(),
    twitter_username: z.coerce.string().optional(),
    is_verified: z.coerce.boolean().optional(),
    has_organization_projects: z.coerce.boolean(),
    has_repository_projects: z.coerce.boolean(),
    public_repos: z.coerce.number(),
    public_gists: z.coerce.number(),
    followers: z.coerce.number(),
    following: z.coerce.number(),
    html_url: z.coerce.string(),
    created_at: z.coerce.string().datetime({ offset: true }),
    type: z.coerce.string(),
    total_private_repos: z.coerce.number().optional(),
    owned_private_repos: z.coerce.number().optional(),
    private_gists: z.coerce.number().optional(),
    disk_usage: z.coerce.number().optional(),
    collaborators: z.coerce.number().optional(),
    billing_email: z.coerce.string().email().optional(),
    plan: z
      .object({
        name: z.coerce.string(),
        space: z.coerce.number(),
        private_repos: z.coerce.number(),
        filled_seats: z.coerce.number().optional(),
        seats: z.coerce.number().optional(),
      })
      .optional(),
    default_repository_permission: z.coerce.string().optional(),
    members_can_create_repositories: z.coerce.boolean().optional(),
    two_factor_requirement_enabled: z.coerce.boolean().optional(),
    members_allowed_repository_creation_type: z.coerce.string().optional(),
    members_can_create_public_repositories: z.coerce.boolean().optional(),
    members_can_create_private_repositories: z.coerce.boolean().optional(),
    members_can_create_internal_repositories: z.coerce.boolean().optional(),
    members_can_create_pages: z.coerce.boolean().optional(),
    members_can_create_public_pages: z.coerce.boolean().optional(),
    members_can_create_private_pages: z.coerce.boolean().optional(),
    members_can_fork_private_repositories: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    updated_at: z.coerce.string().datetime({ offset: true }),
  }),
  ldap_dn: z.coerce.string().optional(),
})

export const s_team_membership = z.object({
  url: z.coerce.string(),
  role: z.enum(["member", "maintainer"]),
  state: z.enum(["active", "pending"]),
})

export const s_team_project = z.object({
  owner_url: z.coerce.string(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  columns_url: z.coerce.string(),
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  body: z.coerce.string(),
  number: z.coerce.number(),
  state: z.coerce.string(),
  creator: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  created_at: z.coerce.string(),
  updated_at: z.coerce.string(),
  organization_permission: z.coerce.string().optional(),
  private: z.coerce.boolean().optional(),
  permissions: z.object({
    read: z.coerce.boolean(),
    write: z.coerce.boolean(),
    admin: z.coerce.boolean(),
  }),
})

export const s_team_repository = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  full_name: z.coerce.string(),
  license: z.object({
    key: z.coerce.string(),
    name: z.coerce.string(),
    url: z.coerce.string(),
    spdx_id: z.coerce.string(),
    node_id: z.coerce.string(),
    html_url: z.coerce.string().optional(),
  }),
  forks: z.coerce.number(),
  permissions: z
    .object({
      admin: z.coerce.boolean(),
      pull: z.coerce.boolean(),
      triage: z.coerce.boolean().optional(),
      push: z.coerce.boolean(),
      maintain: z.coerce.boolean().optional(),
    })
    .optional(),
  role_name: z.coerce.string().optional(),
  owner: z.object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    login: z.coerce.string(),
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    avatar_url: z.coerce.string(),
    gravatar_id: z.coerce.string(),
    url: z.coerce.string(),
    html_url: z.coerce.string(),
    followers_url: z.coerce.string(),
    following_url: z.coerce.string(),
    gists_url: z.coerce.string(),
    starred_url: z.coerce.string(),
    subscriptions_url: z.coerce.string(),
    organizations_url: z.coerce.string(),
    repos_url: z.coerce.string(),
    events_url: z.coerce.string(),
    received_events_url: z.coerce.string(),
    type: z.coerce.string(),
    site_admin: z.coerce.boolean(),
    starred_at: z.coerce.string().optional(),
  }),
  private: z.coerce.boolean(),
  html_url: z.coerce.string(),
  description: z.coerce.string(),
  fork: z.coerce.boolean(),
  url: z.coerce.string(),
  archive_url: z.coerce.string(),
  assignees_url: z.coerce.string(),
  blobs_url: z.coerce.string(),
  branches_url: z.coerce.string(),
  collaborators_url: z.coerce.string(),
  comments_url: z.coerce.string(),
  commits_url: z.coerce.string(),
  compare_url: z.coerce.string(),
  contents_url: z.coerce.string(),
  contributors_url: z.coerce.string(),
  deployments_url: z.coerce.string(),
  downloads_url: z.coerce.string(),
  events_url: z.coerce.string(),
  forks_url: z.coerce.string(),
  git_commits_url: z.coerce.string(),
  git_refs_url: z.coerce.string(),
  git_tags_url: z.coerce.string(),
  git_url: z.coerce.string(),
  issue_comment_url: z.coerce.string(),
  issue_events_url: z.coerce.string(),
  issues_url: z.coerce.string(),
  keys_url: z.coerce.string(),
  labels_url: z.coerce.string(),
  languages_url: z.coerce.string(),
  merges_url: z.coerce.string(),
  milestones_url: z.coerce.string(),
  notifications_url: z.coerce.string(),
  pulls_url: z.coerce.string(),
  releases_url: z.coerce.string(),
  ssh_url: z.coerce.string(),
  stargazers_url: z.coerce.string(),
  statuses_url: z.coerce.string(),
  subscribers_url: z.coerce.string(),
  subscription_url: z.coerce.string(),
  tags_url: z.coerce.string(),
  teams_url: z.coerce.string(),
  trees_url: z.coerce.string(),
  clone_url: z.coerce.string(),
  mirror_url: z.coerce.string(),
  hooks_url: z.coerce.string(),
  svn_url: z.coerce.string(),
  homepage: z.coerce.string(),
  language: z.coerce.string(),
  forks_count: z.coerce.number(),
  stargazers_count: z.coerce.number(),
  watchers_count: z.coerce.number(),
  size: z.coerce.number(),
  default_branch: z.coerce.string(),
  open_issues_count: z.coerce.number(),
  is_template: z.coerce.boolean().optional(),
  topics: z.array(z.coerce.string()).optional(),
  has_issues: z.coerce.boolean(),
  has_projects: z.coerce.boolean(),
  has_wiki: z.coerce.boolean(),
  has_pages: z.coerce.boolean(),
  has_downloads: z.coerce.boolean(),
  archived: z.coerce.boolean(),
  disabled: z.coerce.boolean(),
  visibility: z.coerce.string().optional(),
  pushed_at: z.coerce.string().datetime({ offset: true }),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  allow_rebase_merge: z.coerce.boolean().optional(),
  template_repository: z
    .object({
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      name: z.coerce.string(),
      full_name: z.coerce.string(),
      license: z.object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        spdx_id: z.coerce.string(),
        node_id: z.coerce.string(),
        html_url: z.coerce.string().optional(),
      }),
      organization: z
        .object({
          name: z.coerce.string().optional(),
          email: z.coerce.string().optional(),
          login: z.coerce.string(),
          id: z.coerce.number(),
          node_id: z.coerce.string(),
          avatar_url: z.coerce.string(),
          gravatar_id: z.coerce.string(),
          url: z.coerce.string(),
          html_url: z.coerce.string(),
          followers_url: z.coerce.string(),
          following_url: z.coerce.string(),
          gists_url: z.coerce.string(),
          starred_url: z.coerce.string(),
          subscriptions_url: z.coerce.string(),
          organizations_url: z.coerce.string(),
          repos_url: z.coerce.string(),
          events_url: z.coerce.string(),
          received_events_url: z.coerce.string(),
          type: z.coerce.string(),
          site_admin: z.coerce.boolean(),
          starred_at: z.coerce.string().optional(),
        })
        .optional(),
      forks: z.coerce.number(),
      permissions: z
        .object({
          admin: z.coerce.boolean(),
          pull: z.coerce.boolean(),
          triage: z.coerce.boolean().optional(),
          push: z.coerce.boolean(),
          maintain: z.coerce.boolean().optional(),
        })
        .optional(),
      owner: z.object({
        name: z.coerce.string().optional(),
        email: z.coerce.string().optional(),
        login: z.coerce.string(),
        id: z.coerce.number(),
        node_id: z.coerce.string(),
        avatar_url: z.coerce.string(),
        gravatar_id: z.coerce.string(),
        url: z.coerce.string(),
        html_url: z.coerce.string(),
        followers_url: z.coerce.string(),
        following_url: z.coerce.string(),
        gists_url: z.coerce.string(),
        starred_url: z.coerce.string(),
        subscriptions_url: z.coerce.string(),
        organizations_url: z.coerce.string(),
        repos_url: z.coerce.string(),
        events_url: z.coerce.string(),
        received_events_url: z.coerce.string(),
        type: z.coerce.string(),
        site_admin: z.coerce.boolean(),
        starred_at: z.coerce.string().optional(),
      }),
      private: z.coerce.boolean(),
      html_url: z.coerce.string(),
      description: z.coerce.string(),
      fork: z.coerce.boolean(),
      url: z.coerce.string(),
      archive_url: z.coerce.string(),
      assignees_url: z.coerce.string(),
      blobs_url: z.coerce.string(),
      branches_url: z.coerce.string(),
      collaborators_url: z.coerce.string(),
      comments_url: z.coerce.string(),
      commits_url: z.coerce.string(),
      compare_url: z.coerce.string(),
      contents_url: z.coerce.string(),
      contributors_url: z.coerce.string(),
      deployments_url: z.coerce.string(),
      downloads_url: z.coerce.string(),
      events_url: z.coerce.string(),
      forks_url: z.coerce.string(),
      git_commits_url: z.coerce.string(),
      git_refs_url: z.coerce.string(),
      git_tags_url: z.coerce.string(),
      git_url: z.coerce.string(),
      issue_comment_url: z.coerce.string(),
      issue_events_url: z.coerce.string(),
      issues_url: z.coerce.string(),
      keys_url: z.coerce.string(),
      labels_url: z.coerce.string(),
      languages_url: z.coerce.string(),
      merges_url: z.coerce.string(),
      milestones_url: z.coerce.string(),
      notifications_url: z.coerce.string(),
      pulls_url: z.coerce.string(),
      releases_url: z.coerce.string(),
      ssh_url: z.coerce.string(),
      stargazers_url: z.coerce.string(),
      statuses_url: z.coerce.string(),
      subscribers_url: z.coerce.string(),
      subscription_url: z.coerce.string(),
      tags_url: z.coerce.string(),
      teams_url: z.coerce.string(),
      trees_url: z.coerce.string(),
      clone_url: z.coerce.string(),
      mirror_url: z.coerce.string(),
      hooks_url: z.coerce.string(),
      svn_url: z.coerce.string(),
      homepage: z.coerce.string(),
      language: z.coerce.string(),
      forks_count: z.coerce.number(),
      stargazers_count: z.coerce.number(),
      watchers_count: z.coerce.number(),
      size: z.coerce.number(),
      default_branch: z.coerce.string(),
      open_issues_count: z.coerce.number(),
      is_template: z.coerce.boolean().optional(),
      topics: z.array(z.coerce.string()).optional(),
      has_issues: z.coerce.boolean(),
      has_projects: z.coerce.boolean(),
      has_wiki: z.coerce.boolean(),
      has_pages: z.coerce.boolean(),
      has_downloads: z.coerce.boolean(),
      has_discussions: z.coerce.boolean().optional(),
      archived: z.coerce.boolean(),
      disabled: z.coerce.boolean(),
      visibility: z.coerce.string().optional(),
      pushed_at: z.coerce.string().datetime({ offset: true }),
      created_at: z.coerce.string().datetime({ offset: true }),
      updated_at: z.coerce.string().datetime({ offset: true }),
      allow_rebase_merge: z.coerce.boolean().optional(),
      template_repository: z
        .object({
          id: z.coerce.number().optional(),
          node_id: z.coerce.string().optional(),
          name: z.coerce.string().optional(),
          full_name: z.coerce.string().optional(),
          owner: z
            .object({
              login: z.coerce.string().optional(),
              id: z.coerce.number().optional(),
              node_id: z.coerce.string().optional(),
              avatar_url: z.coerce.string().optional(),
              gravatar_id: z.coerce.string().optional(),
              url: z.coerce.string().optional(),
              html_url: z.coerce.string().optional(),
              followers_url: z.coerce.string().optional(),
              following_url: z.coerce.string().optional(),
              gists_url: z.coerce.string().optional(),
              starred_url: z.coerce.string().optional(),
              subscriptions_url: z.coerce.string().optional(),
              organizations_url: z.coerce.string().optional(),
              repos_url: z.coerce.string().optional(),
              events_url: z.coerce.string().optional(),
              received_events_url: z.coerce.string().optional(),
              type: z.coerce.string().optional(),
              site_admin: z.coerce.boolean().optional(),
            })
            .optional(),
          private: z.coerce.boolean().optional(),
          html_url: z.coerce.string().optional(),
          description: z.coerce.string().optional(),
          fork: z.coerce.boolean().optional(),
          url: z.coerce.string().optional(),
          archive_url: z.coerce.string().optional(),
          assignees_url: z.coerce.string().optional(),
          blobs_url: z.coerce.string().optional(),
          branches_url: z.coerce.string().optional(),
          collaborators_url: z.coerce.string().optional(),
          comments_url: z.coerce.string().optional(),
          commits_url: z.coerce.string().optional(),
          compare_url: z.coerce.string().optional(),
          contents_url: z.coerce.string().optional(),
          contributors_url: z.coerce.string().optional(),
          deployments_url: z.coerce.string().optional(),
          downloads_url: z.coerce.string().optional(),
          events_url: z.coerce.string().optional(),
          forks_url: z.coerce.string().optional(),
          git_commits_url: z.coerce.string().optional(),
          git_refs_url: z.coerce.string().optional(),
          git_tags_url: z.coerce.string().optional(),
          git_url: z.coerce.string().optional(),
          issue_comment_url: z.coerce.string().optional(),
          issue_events_url: z.coerce.string().optional(),
          issues_url: z.coerce.string().optional(),
          keys_url: z.coerce.string().optional(),
          labels_url: z.coerce.string().optional(),
          languages_url: z.coerce.string().optional(),
          merges_url: z.coerce.string().optional(),
          milestones_url: z.coerce.string().optional(),
          notifications_url: z.coerce.string().optional(),
          pulls_url: z.coerce.string().optional(),
          releases_url: z.coerce.string().optional(),
          ssh_url: z.coerce.string().optional(),
          stargazers_url: z.coerce.string().optional(),
          statuses_url: z.coerce.string().optional(),
          subscribers_url: z.coerce.string().optional(),
          subscription_url: z.coerce.string().optional(),
          tags_url: z.coerce.string().optional(),
          teams_url: z.coerce.string().optional(),
          trees_url: z.coerce.string().optional(),
          clone_url: z.coerce.string().optional(),
          mirror_url: z.coerce.string().optional(),
          hooks_url: z.coerce.string().optional(),
          svn_url: z.coerce.string().optional(),
          homepage: z.coerce.string().optional(),
          language: z.coerce.string().optional(),
          forks_count: z.coerce.number().optional(),
          stargazers_count: z.coerce.number().optional(),
          watchers_count: z.coerce.number().optional(),
          size: z.coerce.number().optional(),
          default_branch: z.coerce.string().optional(),
          open_issues_count: z.coerce.number().optional(),
          is_template: z.coerce.boolean().optional(),
          topics: z.array(z.coerce.string()).optional(),
          has_issues: z.coerce.boolean().optional(),
          has_projects: z.coerce.boolean().optional(),
          has_wiki: z.coerce.boolean().optional(),
          has_pages: z.coerce.boolean().optional(),
          has_downloads: z.coerce.boolean().optional(),
          archived: z.coerce.boolean().optional(),
          disabled: z.coerce.boolean().optional(),
          visibility: z.coerce.string().optional(),
          pushed_at: z.coerce.string().optional(),
          created_at: z.coerce.string().optional(),
          updated_at: z.coerce.string().optional(),
          permissions: z
            .object({
              admin: z.coerce.boolean().optional(),
              maintain: z.coerce.boolean().optional(),
              push: z.coerce.boolean().optional(),
              triage: z.coerce.boolean().optional(),
              pull: z.coerce.boolean().optional(),
            })
            .optional(),
          allow_rebase_merge: z.coerce.boolean().optional(),
          temp_clone_token: z.coerce.string().optional(),
          allow_squash_merge: z.coerce.boolean().optional(),
          allow_auto_merge: z.coerce.boolean().optional(),
          delete_branch_on_merge: z.coerce.boolean().optional(),
          allow_update_branch: z.coerce.boolean().optional(),
          use_squash_pr_title_as_default: z.coerce.boolean().optional(),
          squash_merge_commit_title: z
            .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
            .optional(),
          squash_merge_commit_message: z
            .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
            .optional(),
          merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
          merge_commit_message: z
            .enum(["PR_BODY", "PR_TITLE", "BLANK"])
            .optional(),
          allow_merge_commit: z.coerce.boolean().optional(),
          subscribers_count: z.coerce.number().optional(),
          network_count: z.coerce.number().optional(),
        })
        .optional(),
      temp_clone_token: z.coerce.string().optional(),
      allow_squash_merge: z.coerce.boolean().optional(),
      allow_auto_merge: z.coerce.boolean().optional(),
      delete_branch_on_merge: z.coerce.boolean().optional(),
      allow_update_branch: z.coerce.boolean().optional(),
      use_squash_pr_title_as_default: z.coerce.boolean().optional(),
      squash_merge_commit_title: z
        .enum(["PR_TITLE", "COMMIT_OR_PR_TITLE"])
        .optional(),
      squash_merge_commit_message: z
        .enum(["PR_BODY", "COMMIT_MESSAGES", "BLANK"])
        .optional(),
      merge_commit_title: z.enum(["PR_TITLE", "MERGE_MESSAGE"]).optional(),
      merge_commit_message: z.enum(["PR_BODY", "PR_TITLE", "BLANK"]).optional(),
      allow_merge_commit: z.coerce.boolean().optional(),
      allow_forking: z.coerce.boolean().optional(),
      web_commit_signoff_required: z.coerce.boolean().optional(),
      subscribers_count: z.coerce.number().optional(),
      network_count: z.coerce.number().optional(),
      open_issues: z.coerce.number(),
      watchers: z.coerce.number(),
      master_branch: z.coerce.string().optional(),
      starred_at: z.coerce.string().optional(),
      anonymous_access_enabled: z.coerce.boolean().optional(),
    })
    .optional(),
  temp_clone_token: z.coerce.string().optional(),
  allow_squash_merge: z.coerce.boolean().optional(),
  allow_auto_merge: z.coerce.boolean().optional(),
  delete_branch_on_merge: z.coerce.boolean().optional(),
  allow_merge_commit: z.coerce.boolean().optional(),
  allow_forking: z.coerce.boolean().optional(),
  web_commit_signoff_required: z.coerce.boolean().optional(),
  subscribers_count: z.coerce.number().optional(),
  network_count: z.coerce.number().optional(),
  open_issues: z.coerce.number(),
  watchers: z.coerce.number(),
  master_branch: z.coerce.string().optional(),
})

export const s_thread = z.object({
  id: z.coerce.string(),
  repository: z.object({
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    name: z.coerce.string(),
    full_name: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    private: z.coerce.boolean(),
    html_url: z.coerce.string(),
    description: z.coerce.string(),
    fork: z.coerce.boolean(),
    url: z.coerce.string(),
    archive_url: z.coerce.string(),
    assignees_url: z.coerce.string(),
    blobs_url: z.coerce.string(),
    branches_url: z.coerce.string(),
    collaborators_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commits_url: z.coerce.string(),
    compare_url: z.coerce.string(),
    contents_url: z.coerce.string(),
    contributors_url: z.coerce.string(),
    deployments_url: z.coerce.string(),
    downloads_url: z.coerce.string(),
    events_url: z.coerce.string(),
    forks_url: z.coerce.string(),
    git_commits_url: z.coerce.string(),
    git_refs_url: z.coerce.string(),
    git_tags_url: z.coerce.string(),
    git_url: z.coerce.string().optional(),
    issue_comment_url: z.coerce.string(),
    issue_events_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    keys_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    languages_url: z.coerce.string(),
    merges_url: z.coerce.string(),
    milestones_url: z.coerce.string(),
    notifications_url: z.coerce.string(),
    pulls_url: z.coerce.string(),
    releases_url: z.coerce.string(),
    ssh_url: z.coerce.string().optional(),
    stargazers_url: z.coerce.string(),
    statuses_url: z.coerce.string(),
    subscribers_url: z.coerce.string(),
    subscription_url: z.coerce.string(),
    tags_url: z.coerce.string(),
    teams_url: z.coerce.string(),
    trees_url: z.coerce.string(),
    clone_url: z.coerce.string().optional(),
    mirror_url: z.coerce.string().optional(),
    hooks_url: z.coerce.string(),
    svn_url: z.coerce.string().optional(),
    homepage: z.coerce.string().optional(),
    language: z.coerce.string().optional(),
    forks_count: z.coerce.number().optional(),
    stargazers_count: z.coerce.number().optional(),
    watchers_count: z.coerce.number().optional(),
    size: z.coerce.number().optional(),
    default_branch: z.coerce.string().optional(),
    open_issues_count: z.coerce.number().optional(),
    is_template: z.coerce.boolean().optional(),
    topics: z.array(z.coerce.string()).optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_pages: z.coerce.boolean().optional(),
    has_downloads: z.coerce.boolean().optional(),
    has_discussions: z.coerce.boolean().optional(),
    archived: z.coerce.boolean().optional(),
    disabled: z.coerce.boolean().optional(),
    visibility: z.coerce.string().optional(),
    pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
    created_at: z.coerce.string().datetime({ offset: true }).optional(),
    updated_at: z.coerce.string().datetime({ offset: true }).optional(),
    permissions: z
      .object({
        admin: z.coerce.boolean().optional(),
        maintain: z.coerce.boolean().optional(),
        push: z.coerce.boolean().optional(),
        triage: z.coerce.boolean().optional(),
        pull: z.coerce.boolean().optional(),
      })
      .optional(),
    role_name: z.coerce.string().optional(),
    temp_clone_token: z.coerce.string().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    subscribers_count: z.coerce.number().optional(),
    network_count: z.coerce.number().optional(),
    code_of_conduct: z
      .object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        body: z.coerce.string().optional(),
        html_url: z.coerce.string(),
      })
      .optional(),
    license: z
      .object({
        key: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        spdx_id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        node_id: z.coerce.string().optional(),
      })
      .optional(),
    forks: z.coerce.number().optional(),
    open_issues: z.coerce.number().optional(),
    watchers: z.coerce.number().optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
      })
      .optional(),
  }),
  subject: z.object({
    title: z.coerce.string(),
    url: z.coerce.string(),
    latest_comment_url: z.coerce.string(),
    type: z.coerce.string(),
  }),
  reason: z.coerce.string(),
  unread: z.coerce.boolean(),
  updated_at: z.coerce.string(),
  last_read_at: z.coerce.string(),
  url: z.coerce.string(),
  subscription_url: z.coerce.string(),
})

export const s_thread_subscription = z.object({
  subscribed: z.coerce.boolean(),
  ignored: z.coerce.boolean(),
  reason: z.coerce.string(),
  created_at: z.coerce.string().datetime({ offset: true }),
  url: z.coerce.string(),
  thread_url: z.coerce.string().optional(),
  repository_url: z.coerce.string().optional(),
})

export const s_topic = z.object({ names: z.array(z.coerce.string()) })

export const s_validation_error = z.object({
  message: z.coerce.string(),
  documentation_url: z.coerce.string(),
  errors: z
    .array(
      z.object({
        resource: z.coerce.string().optional(),
        field: z.coerce.string().optional(),
        message: z.coerce.string().optional(),
        code: z.coerce.string(),
        index: z.coerce.number().optional(),
        value: z.union([
          z.coerce.string(),
          z.coerce.number(),
          z.array(z.coerce.string()),
        ]),
      })
    )
    .optional(),
})

export const s_validation_error_simple = z.object({
  message: z.coerce.string(),
  documentation_url: z.coerce.string(),
  errors: z.array(z.coerce.string()).optional(),
})

export const s_view_traffic = z.object({
  count: z.coerce.number(),
  uniques: z.coerce.number(),
  views: z.array(
    z.object({
      timestamp: z.coerce.string().datetime({ offset: true }),
      uniques: z.coerce.number(),
      count: z.coerce.number(),
    })
  ),
})

export const s_webhook_config = z.object({
  url: z.coerce.string().optional(),
  content_type: z.coerce.string().optional(),
  secret: z.coerce.string().optional(),
  insecure_ssl: z.union([z.coerce.string(), z.coerce.number()]),
})

export const s_workflow = z.object({
  id: z.coerce.number(),
  node_id: z.coerce.string(),
  name: z.coerce.string(),
  path: z.coerce.string(),
  state: z.enum([
    "active",
    "deleted",
    "disabled_fork",
    "disabled_inactivity",
    "disabled_manually",
  ]),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  badge_url: z.coerce.string(),
  deleted_at: z.coerce.string().datetime({ offset: true }).optional(),
})

export const s_workflow_run = z.object({
  id: z.coerce.number(),
  name: z.coerce.string().optional(),
  node_id: z.coerce.string(),
  check_suite_id: z.coerce.number().optional(),
  check_suite_node_id: z.coerce.string().optional(),
  head_branch: z.coerce.string(),
  head_sha: z.coerce.string(),
  path: z.coerce.string(),
  run_number: z.coerce.number(),
  run_attempt: z.coerce.number().optional(),
  referenced_workflows: z
    .array(
      z.object({
        path: z.coerce.string(),
        sha: z.coerce.string(),
        ref: z.coerce.string().optional(),
      })
    )
    .optional(),
  event: z.coerce.string(),
  status: z.coerce.string(),
  conclusion: z.coerce.string(),
  workflow_id: z.coerce.number(),
  url: z.coerce.string(),
  html_url: z.coerce.string(),
  pull_requests: z.array(
    z.object({
      id: z.coerce.number(),
      number: z.coerce.number(),
      url: z.coerce.string(),
      head: z.object({
        ref: z.coerce.string(),
        sha: z.coerce.string(),
        repo: z.object({
          id: z.coerce.number(),
          url: z.coerce.string(),
          name: z.coerce.string(),
        }),
      }),
      base: z.object({
        ref: z.coerce.string(),
        sha: z.coerce.string(),
        repo: z.object({
          id: z.coerce.number(),
          url: z.coerce.string(),
          name: z.coerce.string(),
        }),
      }),
    })
  ),
  created_at: z.coerce.string().datetime({ offset: true }),
  updated_at: z.coerce.string().datetime({ offset: true }),
  actor: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  triggering_actor: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    })
    .optional(),
  run_started_at: z.coerce.string().datetime({ offset: true }).optional(),
  jobs_url: z.coerce.string(),
  logs_url: z.coerce.string(),
  check_suite_url: z.coerce.string(),
  artifacts_url: z.coerce.string(),
  cancel_url: z.coerce.string(),
  rerun_url: z.coerce.string(),
  previous_attempt_url: z.coerce.string().optional(),
  workflow_url: z.coerce.string(),
  head_commit: z.object({
    id: z.coerce.string(),
    tree_id: z.coerce.string(),
    message: z.coerce.string(),
    timestamp: z.coerce.string().datetime({ offset: true }),
    author: z.object({ name: z.coerce.string(), email: z.coerce.string() }),
    committer: z.object({ name: z.coerce.string(), email: z.coerce.string() }),
  }),
  repository: z.object({
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    name: z.coerce.string(),
    full_name: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    private: z.coerce.boolean(),
    html_url: z.coerce.string(),
    description: z.coerce.string(),
    fork: z.coerce.boolean(),
    url: z.coerce.string(),
    archive_url: z.coerce.string(),
    assignees_url: z.coerce.string(),
    blobs_url: z.coerce.string(),
    branches_url: z.coerce.string(),
    collaborators_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commits_url: z.coerce.string(),
    compare_url: z.coerce.string(),
    contents_url: z.coerce.string(),
    contributors_url: z.coerce.string(),
    deployments_url: z.coerce.string(),
    downloads_url: z.coerce.string(),
    events_url: z.coerce.string(),
    forks_url: z.coerce.string(),
    git_commits_url: z.coerce.string(),
    git_refs_url: z.coerce.string(),
    git_tags_url: z.coerce.string(),
    git_url: z.coerce.string().optional(),
    issue_comment_url: z.coerce.string(),
    issue_events_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    keys_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    languages_url: z.coerce.string(),
    merges_url: z.coerce.string(),
    milestones_url: z.coerce.string(),
    notifications_url: z.coerce.string(),
    pulls_url: z.coerce.string(),
    releases_url: z.coerce.string(),
    ssh_url: z.coerce.string().optional(),
    stargazers_url: z.coerce.string(),
    statuses_url: z.coerce.string(),
    subscribers_url: z.coerce.string(),
    subscription_url: z.coerce.string(),
    tags_url: z.coerce.string(),
    teams_url: z.coerce.string(),
    trees_url: z.coerce.string(),
    clone_url: z.coerce.string().optional(),
    mirror_url: z.coerce.string().optional(),
    hooks_url: z.coerce.string(),
    svn_url: z.coerce.string().optional(),
    homepage: z.coerce.string().optional(),
    language: z.coerce.string().optional(),
    forks_count: z.coerce.number().optional(),
    stargazers_count: z.coerce.number().optional(),
    watchers_count: z.coerce.number().optional(),
    size: z.coerce.number().optional(),
    default_branch: z.coerce.string().optional(),
    open_issues_count: z.coerce.number().optional(),
    is_template: z.coerce.boolean().optional(),
    topics: z.array(z.coerce.string()).optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_pages: z.coerce.boolean().optional(),
    has_downloads: z.coerce.boolean().optional(),
    has_discussions: z.coerce.boolean().optional(),
    archived: z.coerce.boolean().optional(),
    disabled: z.coerce.boolean().optional(),
    visibility: z.coerce.string().optional(),
    pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
    created_at: z.coerce.string().datetime({ offset: true }).optional(),
    updated_at: z.coerce.string().datetime({ offset: true }).optional(),
    permissions: z
      .object({
        admin: z.coerce.boolean().optional(),
        maintain: z.coerce.boolean().optional(),
        push: z.coerce.boolean().optional(),
        triage: z.coerce.boolean().optional(),
        pull: z.coerce.boolean().optional(),
      })
      .optional(),
    role_name: z.coerce.string().optional(),
    temp_clone_token: z.coerce.string().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    subscribers_count: z.coerce.number().optional(),
    network_count: z.coerce.number().optional(),
    code_of_conduct: z
      .object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        body: z.coerce.string().optional(),
        html_url: z.coerce.string(),
      })
      .optional(),
    license: z
      .object({
        key: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        spdx_id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        node_id: z.coerce.string().optional(),
      })
      .optional(),
    forks: z.coerce.number().optional(),
    open_issues: z.coerce.number().optional(),
    watchers: z.coerce.number().optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
      })
      .optional(),
  }),
  head_repository: z.object({
    id: z.coerce.number(),
    node_id: z.coerce.string(),
    name: z.coerce.string(),
    full_name: z.coerce.string(),
    owner: z.object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      login: z.coerce.string(),
      id: z.coerce.number(),
      node_id: z.coerce.string(),
      avatar_url: z.coerce.string(),
      gravatar_id: z.coerce.string(),
      url: z.coerce.string(),
      html_url: z.coerce.string(),
      followers_url: z.coerce.string(),
      following_url: z.coerce.string(),
      gists_url: z.coerce.string(),
      starred_url: z.coerce.string(),
      subscriptions_url: z.coerce.string(),
      organizations_url: z.coerce.string(),
      repos_url: z.coerce.string(),
      events_url: z.coerce.string(),
      received_events_url: z.coerce.string(),
      type: z.coerce.string(),
      site_admin: z.coerce.boolean(),
      starred_at: z.coerce.string().optional(),
    }),
    private: z.coerce.boolean(),
    html_url: z.coerce.string(),
    description: z.coerce.string(),
    fork: z.coerce.boolean(),
    url: z.coerce.string(),
    archive_url: z.coerce.string(),
    assignees_url: z.coerce.string(),
    blobs_url: z.coerce.string(),
    branches_url: z.coerce.string(),
    collaborators_url: z.coerce.string(),
    comments_url: z.coerce.string(),
    commits_url: z.coerce.string(),
    compare_url: z.coerce.string(),
    contents_url: z.coerce.string(),
    contributors_url: z.coerce.string(),
    deployments_url: z.coerce.string(),
    downloads_url: z.coerce.string(),
    events_url: z.coerce.string(),
    forks_url: z.coerce.string(),
    git_commits_url: z.coerce.string(),
    git_refs_url: z.coerce.string(),
    git_tags_url: z.coerce.string(),
    git_url: z.coerce.string().optional(),
    issue_comment_url: z.coerce.string(),
    issue_events_url: z.coerce.string(),
    issues_url: z.coerce.string(),
    keys_url: z.coerce.string(),
    labels_url: z.coerce.string(),
    languages_url: z.coerce.string(),
    merges_url: z.coerce.string(),
    milestones_url: z.coerce.string(),
    notifications_url: z.coerce.string(),
    pulls_url: z.coerce.string(),
    releases_url: z.coerce.string(),
    ssh_url: z.coerce.string().optional(),
    stargazers_url: z.coerce.string(),
    statuses_url: z.coerce.string(),
    subscribers_url: z.coerce.string(),
    subscription_url: z.coerce.string(),
    tags_url: z.coerce.string(),
    teams_url: z.coerce.string(),
    trees_url: z.coerce.string(),
    clone_url: z.coerce.string().optional(),
    mirror_url: z.coerce.string().optional(),
    hooks_url: z.coerce.string(),
    svn_url: z.coerce.string().optional(),
    homepage: z.coerce.string().optional(),
    language: z.coerce.string().optional(),
    forks_count: z.coerce.number().optional(),
    stargazers_count: z.coerce.number().optional(),
    watchers_count: z.coerce.number().optional(),
    size: z.coerce.number().optional(),
    default_branch: z.coerce.string().optional(),
    open_issues_count: z.coerce.number().optional(),
    is_template: z.coerce.boolean().optional(),
    topics: z.array(z.coerce.string()).optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    has_pages: z.coerce.boolean().optional(),
    has_downloads: z.coerce.boolean().optional(),
    has_discussions: z.coerce.boolean().optional(),
    archived: z.coerce.boolean().optional(),
    disabled: z.coerce.boolean().optional(),
    visibility: z.coerce.string().optional(),
    pushed_at: z.coerce.string().datetime({ offset: true }).optional(),
    created_at: z.coerce.string().datetime({ offset: true }).optional(),
    updated_at: z.coerce.string().datetime({ offset: true }).optional(),
    permissions: z
      .object({
        admin: z.coerce.boolean().optional(),
        maintain: z.coerce.boolean().optional(),
        push: z.coerce.boolean().optional(),
        triage: z.coerce.boolean().optional(),
        pull: z.coerce.boolean().optional(),
      })
      .optional(),
    role_name: z.coerce.string().optional(),
    temp_clone_token: z.coerce.string().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    subscribers_count: z.coerce.number().optional(),
    network_count: z.coerce.number().optional(),
    code_of_conduct: z
      .object({
        key: z.coerce.string(),
        name: z.coerce.string(),
        url: z.coerce.string(),
        body: z.coerce.string().optional(),
        html_url: z.coerce.string(),
      })
      .optional(),
    license: z
      .object({
        key: z.coerce.string().optional(),
        name: z.coerce.string().optional(),
        spdx_id: z.coerce.string().optional(),
        url: z.coerce.string().optional(),
        node_id: z.coerce.string().optional(),
      })
      .optional(),
    forks: z.coerce.number().optional(),
    open_issues: z.coerce.number().optional(),
    watchers: z.coerce.number().optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.enum(["enabled", "disabled"]).optional() })
          .optional(),
      })
      .optional(),
  }),
  head_repository_id: z.coerce.number().optional(),
  display_title: z.coerce.string(),
})

export const s_workflow_run_usage = z.object({
  billable: z.object({
    UBUNTU: z
      .object({
        total_ms: z.coerce.number(),
        jobs: z.coerce.number(),
        job_runs: z
          .array(
            z.object({
              job_id: z.coerce.number(),
              duration_ms: z.coerce.number(),
            })
          )
          .optional(),
      })
      .optional(),
    MACOS: z
      .object({
        total_ms: z.coerce.number(),
        jobs: z.coerce.number(),
        job_runs: z
          .array(
            z.object({
              job_id: z.coerce.number(),
              duration_ms: z.coerce.number(),
            })
          )
          .optional(),
      })
      .optional(),
    WINDOWS: z
      .object({
        total_ms: z.coerce.number(),
        jobs: z.coerce.number(),
        job_runs: z
          .array(
            z.object({
              job_id: z.coerce.number(),
              duration_ms: z.coerce.number(),
            })
          )
          .optional(),
      })
      .optional(),
  }),
  run_duration_ms: z.coerce.number().optional(),
})

export const s_workflow_usage = z.object({
  billable: z.object({
    UBUNTU: z.object({ total_ms: z.coerce.number().optional() }).optional(),
    MACOS: z.object({ total_ms: z.coerce.number().optional() }).optional(),
    WINDOWS: z.object({ total_ms: z.coerce.number().optional() }).optional(),
  }),
})
