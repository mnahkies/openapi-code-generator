/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import {
  t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema,
  t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema,
  t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema,
  t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema,
  t_ActionsAddSelectedRepoToOrgSecretParamSchema,
  t_ActionsAddSelectedRepoToOrgVariableParamSchema,
  t_ActionsAddSelectedRepoToRequiredWorkflowParamSchema,
  t_ActionsAddSelfHostedRunnerToGroupForOrgParamSchema,
  t_ActionsApproveWorkflowRunParamSchema,
  t_ActionsCancelWorkflowRunParamSchema,
  t_ActionsCreateEnvironmentVariableBodySchema,
  t_ActionsCreateEnvironmentVariableParamSchema,
  t_ActionsCreateOrUpdateEnvironmentSecretBodySchema,
  t_ActionsCreateOrUpdateEnvironmentSecretParamSchema,
  t_ActionsCreateOrUpdateOrgSecretBodySchema,
  t_ActionsCreateOrUpdateOrgSecretParamSchema,
  t_ActionsCreateOrUpdateRepoSecretBodySchema,
  t_ActionsCreateOrUpdateRepoSecretParamSchema,
  t_ActionsCreateOrgVariableBodySchema,
  t_ActionsCreateOrgVariableParamSchema,
  t_ActionsCreateRegistrationTokenForOrgParamSchema,
  t_ActionsCreateRegistrationTokenForRepoParamSchema,
  t_ActionsCreateRemoveTokenForOrgParamSchema,
  t_ActionsCreateRemoveTokenForRepoParamSchema,
  t_ActionsCreateRepoVariableBodySchema,
  t_ActionsCreateRepoVariableParamSchema,
  t_ActionsCreateRequiredWorkflowBodySchema,
  t_ActionsCreateRequiredWorkflowParamSchema,
  t_ActionsCreateSelfHostedRunnerGroupForOrgBodySchema,
  t_ActionsCreateSelfHostedRunnerGroupForOrgParamSchema,
  t_ActionsCreateWorkflowDispatchBodySchema,
  t_ActionsCreateWorkflowDispatchParamSchema,
  t_ActionsDeleteActionsCacheByIdParamSchema,
  t_ActionsDeleteActionsCacheByKeyParamSchema,
  t_ActionsDeleteActionsCacheByKeyQuerySchema,
  t_ActionsDeleteArtifactParamSchema,
  t_ActionsDeleteEnvironmentSecretParamSchema,
  t_ActionsDeleteEnvironmentVariableParamSchema,
  t_ActionsDeleteOrgSecretParamSchema,
  t_ActionsDeleteOrgVariableParamSchema,
  t_ActionsDeleteRepoSecretParamSchema,
  t_ActionsDeleteRepoVariableParamSchema,
  t_ActionsDeleteRequiredWorkflowParamSchema,
  t_ActionsDeleteSelfHostedRunnerFromOrgParamSchema,
  t_ActionsDeleteSelfHostedRunnerFromRepoParamSchema,
  t_ActionsDeleteSelfHostedRunnerGroupFromOrgParamSchema,
  t_ActionsDeleteWorkflowRunLogsParamSchema,
  t_ActionsDeleteWorkflowRunParamSchema,
  t_ActionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema,
  t_ActionsDisableWorkflowParamSchema,
  t_ActionsDownloadArtifactParamSchema,
  t_ActionsDownloadJobLogsForWorkflowRunParamSchema,
  t_ActionsDownloadWorkflowRunAttemptLogsParamSchema,
  t_ActionsDownloadWorkflowRunLogsParamSchema,
  t_ActionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema,
  t_ActionsEnableWorkflowParamSchema,
  t_ActionsGetActionsCacheListParamSchema,
  t_ActionsGetActionsCacheListQuerySchema,
  t_ActionsGetActionsCacheUsageByRepoForOrgParamSchema,
  t_ActionsGetActionsCacheUsageByRepoForOrgQuerySchema,
  t_ActionsGetActionsCacheUsageForOrgParamSchema,
  t_ActionsGetActionsCacheUsageParamSchema,
  t_ActionsGetAllowedActionsOrganizationParamSchema,
  t_ActionsGetAllowedActionsRepositoryParamSchema,
  t_ActionsGetArtifactParamSchema,
  t_ActionsGetCustomOidcSubClaimForRepoParamSchema,
  t_ActionsGetEnvironmentPublicKeyParamSchema,
  t_ActionsGetEnvironmentSecretParamSchema,
  t_ActionsGetEnvironmentVariableParamSchema,
  t_ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
  t_ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
  t_ActionsGetGithubActionsPermissionsOrganizationParamSchema,
  t_ActionsGetGithubActionsPermissionsRepositoryParamSchema,
  t_ActionsGetJobForWorkflowRunParamSchema,
  t_ActionsGetOrgPublicKeyParamSchema,
  t_ActionsGetOrgSecretParamSchema,
  t_ActionsGetOrgVariableParamSchema,
  t_ActionsGetPendingDeploymentsForRunParamSchema,
  t_ActionsGetRepoPublicKeyParamSchema,
  t_ActionsGetRepoRequiredWorkflowParamSchema,
  t_ActionsGetRepoRequiredWorkflowUsageParamSchema,
  t_ActionsGetRepoSecretParamSchema,
  t_ActionsGetRepoVariableParamSchema,
  t_ActionsGetRequiredWorkflowParamSchema,
  t_ActionsGetReviewsForRunParamSchema,
  t_ActionsGetSelfHostedRunnerForOrgParamSchema,
  t_ActionsGetSelfHostedRunnerForRepoParamSchema,
  t_ActionsGetSelfHostedRunnerGroupForOrgParamSchema,
  t_ActionsGetWorkflowAccessToRepositoryParamSchema,
  t_ActionsGetWorkflowParamSchema,
  t_ActionsGetWorkflowRunAttemptParamSchema,
  t_ActionsGetWorkflowRunAttemptQuerySchema,
  t_ActionsGetWorkflowRunParamSchema,
  t_ActionsGetWorkflowRunQuerySchema,
  t_ActionsGetWorkflowRunUsageParamSchema,
  t_ActionsGetWorkflowUsageParamSchema,
  t_ActionsListArtifactsForRepoParamSchema,
  t_ActionsListArtifactsForRepoQuerySchema,
  t_ActionsListEnvironmentSecretsParamSchema,
  t_ActionsListEnvironmentSecretsQuerySchema,
  t_ActionsListEnvironmentVariablesParamSchema,
  t_ActionsListEnvironmentVariablesQuerySchema,
  t_ActionsListJobsForWorkflowRunAttemptParamSchema,
  t_ActionsListJobsForWorkflowRunAttemptQuerySchema,
  t_ActionsListJobsForWorkflowRunParamSchema,
  t_ActionsListJobsForWorkflowRunQuerySchema,
  t_ActionsListLabelsForSelfHostedRunnerForOrgParamSchema,
  t_ActionsListLabelsForSelfHostedRunnerForRepoParamSchema,
  t_ActionsListOrgSecretsParamSchema,
  t_ActionsListOrgSecretsQuerySchema,
  t_ActionsListOrgVariablesParamSchema,
  t_ActionsListOrgVariablesQuerySchema,
  t_ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
  t_ActionsListRepoAccessToSelfHostedRunnerGroupInOrgQuerySchema,
  t_ActionsListRepoRequiredWorkflowsParamSchema,
  t_ActionsListRepoRequiredWorkflowsQuerySchema,
  t_ActionsListRepoSecretsParamSchema,
  t_ActionsListRepoSecretsQuerySchema,
  t_ActionsListRepoVariablesParamSchema,
  t_ActionsListRepoVariablesQuerySchema,
  t_ActionsListRepoWorkflowsParamSchema,
  t_ActionsListRepoWorkflowsQuerySchema,
  t_ActionsListRequiredWorkflowRunsParamSchema,
  t_ActionsListRequiredWorkflowRunsQuerySchema,
  t_ActionsListRequiredWorkflowsParamSchema,
  t_ActionsListRequiredWorkflowsQuerySchema,
  t_ActionsListRunnerApplicationsForOrgParamSchema,
  t_ActionsListRunnerApplicationsForRepoParamSchema,
  t_ActionsListSelectedReposForOrgSecretParamSchema,
  t_ActionsListSelectedReposForOrgSecretQuerySchema,
  t_ActionsListSelectedReposForOrgVariableParamSchema,
  t_ActionsListSelectedReposForOrgVariableQuerySchema,
  t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
  t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema,
  t_ActionsListSelectedRepositoriesRequiredWorkflowParamSchema,
  t_ActionsListSelfHostedRunnerGroupsForOrgParamSchema,
  t_ActionsListSelfHostedRunnerGroupsForOrgQuerySchema,
  t_ActionsListSelfHostedRunnersForOrgParamSchema,
  t_ActionsListSelfHostedRunnersForOrgQuerySchema,
  t_ActionsListSelfHostedRunnersForRepoParamSchema,
  t_ActionsListSelfHostedRunnersForRepoQuerySchema,
  t_ActionsListSelfHostedRunnersInGroupForOrgParamSchema,
  t_ActionsListSelfHostedRunnersInGroupForOrgQuerySchema,
  t_ActionsListWorkflowRunArtifactsParamSchema,
  t_ActionsListWorkflowRunArtifactsQuerySchema,
  t_ActionsListWorkflowRunsForRepoParamSchema,
  t_ActionsListWorkflowRunsForRepoQuerySchema,
  t_ActionsListWorkflowRunsParamSchema,
  t_ActionsListWorkflowRunsQuerySchema,
  t_ActionsReRunJobForWorkflowRunBodySchema,
  t_ActionsReRunJobForWorkflowRunParamSchema,
  t_ActionsReRunWorkflowBodySchema,
  t_ActionsReRunWorkflowFailedJobsBodySchema,
  t_ActionsReRunWorkflowFailedJobsParamSchema,
  t_ActionsReRunWorkflowParamSchema,
  t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema,
  t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema,
  t_ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema,
  t_ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema,
  t_ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
  t_ActionsRemoveSelectedRepoFromOrgSecretParamSchema,
  t_ActionsRemoveSelectedRepoFromOrgVariableParamSchema,
  t_ActionsRemoveSelectedRepoFromRequiredWorkflowParamSchema,
  t_ActionsRemoveSelfHostedRunnerFromGroupForOrgParamSchema,
  t_ActionsReviewPendingDeploymentsForRunBodySchema,
  t_ActionsReviewPendingDeploymentsForRunParamSchema,
  t_ActionsSetAllowedActionsOrganizationBodySchema,
  t_ActionsSetAllowedActionsOrganizationParamSchema,
  t_ActionsSetAllowedActionsRepositoryBodySchema,
  t_ActionsSetAllowedActionsRepositoryParamSchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema,
  t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema,
  t_ActionsSetCustomOidcSubClaimForRepoBodySchema,
  t_ActionsSetCustomOidcSubClaimForRepoParamSchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema,
  t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
  t_ActionsSetGithubActionsPermissionsOrganizationBodySchema,
  t_ActionsSetGithubActionsPermissionsOrganizationParamSchema,
  t_ActionsSetGithubActionsPermissionsRepositoryBodySchema,
  t_ActionsSetGithubActionsPermissionsRepositoryParamSchema,
  t_ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodySchema,
  t_ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
  t_ActionsSetSelectedReposForOrgSecretBodySchema,
  t_ActionsSetSelectedReposForOrgSecretParamSchema,
  t_ActionsSetSelectedReposForOrgVariableBodySchema,
  t_ActionsSetSelectedReposForOrgVariableParamSchema,
  t_ActionsSetSelectedReposToRequiredWorkflowBodySchema,
  t_ActionsSetSelectedReposToRequiredWorkflowParamSchema,
  t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema,
  t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
  t_ActionsSetSelfHostedRunnersInGroupForOrgBodySchema,
  t_ActionsSetSelfHostedRunnersInGroupForOrgParamSchema,
  t_ActionsSetWorkflowAccessToRepositoryBodySchema,
  t_ActionsSetWorkflowAccessToRepositoryParamSchema,
  t_ActionsUpdateEnvironmentVariableBodySchema,
  t_ActionsUpdateEnvironmentVariableParamSchema,
  t_ActionsUpdateOrgVariableBodySchema,
  t_ActionsUpdateOrgVariableParamSchema,
  t_ActionsUpdateRepoVariableBodySchema,
  t_ActionsUpdateRepoVariableParamSchema,
  t_ActionsUpdateRequiredWorkflowBodySchema,
  t_ActionsUpdateRequiredWorkflowParamSchema,
  t_ActionsUpdateSelfHostedRunnerGroupForOrgBodySchema,
  t_ActionsUpdateSelfHostedRunnerGroupForOrgParamSchema,
  t_ActivityCheckRepoIsStarredByAuthenticatedUserParamSchema,
  t_ActivityDeleteRepoSubscriptionParamSchema,
  t_ActivityDeleteThreadSubscriptionParamSchema,
  t_ActivityGetRepoSubscriptionParamSchema,
  t_ActivityGetThreadParamSchema,
  t_ActivityGetThreadSubscriptionForAuthenticatedUserParamSchema,
  t_ActivityListEventsForAuthenticatedUserParamSchema,
  t_ActivityListEventsForAuthenticatedUserQuerySchema,
  t_ActivityListNotificationsForAuthenticatedUserQuerySchema,
  t_ActivityListOrgEventsForAuthenticatedUserParamSchema,
  t_ActivityListOrgEventsForAuthenticatedUserQuerySchema,
  t_ActivityListPublicEventsForRepoNetworkParamSchema,
  t_ActivityListPublicEventsForRepoNetworkQuerySchema,
  t_ActivityListPublicEventsForUserParamSchema,
  t_ActivityListPublicEventsForUserQuerySchema,
  t_ActivityListPublicEventsQuerySchema,
  t_ActivityListPublicOrgEventsParamSchema,
  t_ActivityListPublicOrgEventsQuerySchema,
  t_ActivityListReceivedEventsForUserParamSchema,
  t_ActivityListReceivedEventsForUserQuerySchema,
  t_ActivityListReceivedPublicEventsForUserParamSchema,
  t_ActivityListReceivedPublicEventsForUserQuerySchema,
  t_ActivityListRepoEventsParamSchema,
  t_ActivityListRepoEventsQuerySchema,
  t_ActivityListRepoNotificationsForAuthenticatedUserParamSchema,
  t_ActivityListRepoNotificationsForAuthenticatedUserQuerySchema,
  t_ActivityListReposStarredByAuthenticatedUserQuerySchema,
  t_ActivityListReposStarredByUserParamSchema,
  t_ActivityListReposStarredByUserQuerySchema,
  t_ActivityListReposWatchedByUserParamSchema,
  t_ActivityListReposWatchedByUserQuerySchema,
  t_ActivityListStargazersForRepoParamSchema,
  t_ActivityListStargazersForRepoQuerySchema,
  t_ActivityListWatchedReposForAuthenticatedUserQuerySchema,
  t_ActivityListWatchersForRepoParamSchema,
  t_ActivityListWatchersForRepoQuerySchema,
  t_ActivityMarkNotificationsAsReadBodySchema,
  t_ActivityMarkRepoNotificationsAsReadBodySchema,
  t_ActivityMarkRepoNotificationsAsReadParamSchema,
  t_ActivityMarkThreadAsReadParamSchema,
  t_ActivitySetRepoSubscriptionBodySchema,
  t_ActivitySetRepoSubscriptionParamSchema,
  t_ActivitySetThreadSubscriptionBodySchema,
  t_ActivitySetThreadSubscriptionParamSchema,
  t_ActivityStarRepoForAuthenticatedUserParamSchema,
  t_ActivityUnstarRepoForAuthenticatedUserParamSchema,
  t_AppsAddRepoToInstallationForAuthenticatedUserParamSchema,
  t_AppsCheckTokenBodySchema,
  t_AppsCheckTokenParamSchema,
  t_AppsCreateFromManifestParamSchema,
  t_AppsCreateInstallationAccessTokenBodySchema,
  t_AppsCreateInstallationAccessTokenParamSchema,
  t_AppsDeleteAuthorizationBodySchema,
  t_AppsDeleteAuthorizationParamSchema,
  t_AppsDeleteInstallationParamSchema,
  t_AppsDeleteTokenBodySchema,
  t_AppsDeleteTokenParamSchema,
  t_AppsGetBySlugParamSchema,
  t_AppsGetInstallationParamSchema,
  t_AppsGetOrgInstallationParamSchema,
  t_AppsGetRepoInstallationParamSchema,
  t_AppsGetSubscriptionPlanForAccountParamSchema,
  t_AppsGetSubscriptionPlanForAccountStubbedParamSchema,
  t_AppsGetUserInstallationParamSchema,
  t_AppsGetWebhookDeliveryParamSchema,
  t_AppsListAccountsForPlanParamSchema,
  t_AppsListAccountsForPlanQuerySchema,
  t_AppsListAccountsForPlanStubbedParamSchema,
  t_AppsListAccountsForPlanStubbedQuerySchema,
  t_AppsListInstallationReposForAuthenticatedUserParamSchema,
  t_AppsListInstallationReposForAuthenticatedUserQuerySchema,
  t_AppsListInstallationsForAuthenticatedUserQuerySchema,
  t_AppsListInstallationsQuerySchema,
  t_AppsListPlansQuerySchema,
  t_AppsListPlansStubbedQuerySchema,
  t_AppsListReposAccessibleToInstallationQuerySchema,
  t_AppsListSubscriptionsForAuthenticatedUserQuerySchema,
  t_AppsListSubscriptionsForAuthenticatedUserStubbedQuerySchema,
  t_AppsListWebhookDeliveriesQuerySchema,
  t_AppsRedeliverWebhookDeliveryParamSchema,
  t_AppsRemoveRepoFromInstallationForAuthenticatedUserParamSchema,
  t_AppsResetTokenBodySchema,
  t_AppsResetTokenParamSchema,
  t_AppsScopeTokenBodySchema,
  t_AppsScopeTokenParamSchema,
  t_AppsSuspendInstallationParamSchema,
  t_AppsUnsuspendInstallationParamSchema,
  t_AppsUpdateWebhookConfigForAppBodySchema,
  t_BillingGetGithubActionsBillingOrgParamSchema,
  t_BillingGetGithubActionsBillingUserParamSchema,
  t_BillingGetGithubPackagesBillingOrgParamSchema,
  t_BillingGetGithubPackagesBillingUserParamSchema,
  t_BillingGetSharedStorageBillingOrgParamSchema,
  t_BillingGetSharedStorageBillingUserParamSchema,
  t_ChecksCreateBodySchema,
  t_ChecksCreateParamSchema,
  t_ChecksCreateSuiteBodySchema,
  t_ChecksCreateSuiteParamSchema,
  t_ChecksGetParamSchema,
  t_ChecksGetSuiteParamSchema,
  t_ChecksListAnnotationsParamSchema,
  t_ChecksListAnnotationsQuerySchema,
  t_ChecksListForRefParamSchema,
  t_ChecksListForRefQuerySchema,
  t_ChecksListForSuiteParamSchema,
  t_ChecksListForSuiteQuerySchema,
  t_ChecksListSuitesForRefParamSchema,
  t_ChecksListSuitesForRefQuerySchema,
  t_ChecksRerequestRunParamSchema,
  t_ChecksRerequestSuiteParamSchema,
  t_ChecksSetSuitesPreferencesBodySchema,
  t_ChecksSetSuitesPreferencesParamSchema,
  t_ChecksUpdateBodySchema,
  t_ChecksUpdateParamSchema,
  t_CodeScanningDeleteAnalysisParamSchema,
  t_CodeScanningDeleteAnalysisQuerySchema,
  t_CodeScanningGetAlertParamSchema,
  t_CodeScanningGetAnalysisParamSchema,
  t_CodeScanningGetCodeqlDatabaseParamSchema,
  t_CodeScanningGetSarifParamSchema,
  t_CodeScanningListAlertInstancesParamSchema,
  t_CodeScanningListAlertInstancesQuerySchema,
  t_CodeScanningListAlertsForOrgParamSchema,
  t_CodeScanningListAlertsForOrgQuerySchema,
  t_CodeScanningListAlertsForRepoParamSchema,
  t_CodeScanningListAlertsForRepoQuerySchema,
  t_CodeScanningListCodeqlDatabasesParamSchema,
  t_CodeScanningListRecentAnalysesParamSchema,
  t_CodeScanningListRecentAnalysesQuerySchema,
  t_CodeScanningUpdateAlertBodySchema,
  t_CodeScanningUpdateAlertParamSchema,
  t_CodeScanningUploadSarifBodySchema,
  t_CodeScanningUploadSarifParamSchema,
  t_CodesOfConductGetConductCodeParamSchema,
  t_CodespacesAddRepositoryForSecretForAuthenticatedUserParamSchema,
  t_CodespacesAddSelectedRepoToOrgSecretParamSchema,
  t_CodespacesCodespaceMachinesForAuthenticatedUserParamSchema,
  t_CodespacesCreateForAuthenticatedUserBodySchema,
  t_CodespacesCreateOrUpdateOrgSecretBodySchema,
  t_CodespacesCreateOrUpdateOrgSecretParamSchema,
  t_CodespacesCreateOrUpdateRepoSecretBodySchema,
  t_CodespacesCreateOrUpdateRepoSecretParamSchema,
  t_CodespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema,
  t_CodespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema,
  t_CodespacesCreateWithPrForAuthenticatedUserBodySchema,
  t_CodespacesCreateWithPrForAuthenticatedUserParamSchema,
  t_CodespacesCreateWithRepoForAuthenticatedUserBodySchema,
  t_CodespacesCreateWithRepoForAuthenticatedUserParamSchema,
  t_CodespacesDeleteForAuthenticatedUserParamSchema,
  t_CodespacesDeleteFromOrganizationParamSchema,
  t_CodespacesDeleteOrgSecretParamSchema,
  t_CodespacesDeleteRepoSecretParamSchema,
  t_CodespacesDeleteSecretForAuthenticatedUserParamSchema,
  t_CodespacesExportForAuthenticatedUserParamSchema,
  t_CodespacesGetCodespacesForUserInOrgParamSchema,
  t_CodespacesGetCodespacesForUserInOrgQuerySchema,
  t_CodespacesGetExportDetailsForAuthenticatedUserParamSchema,
  t_CodespacesGetForAuthenticatedUserParamSchema,
  t_CodespacesGetOrgPublicKeyParamSchema,
  t_CodespacesGetOrgSecretParamSchema,
  t_CodespacesGetRepoPublicKeyParamSchema,
  t_CodespacesGetRepoSecretParamSchema,
  t_CodespacesGetSecretForAuthenticatedUserParamSchema,
  t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema,
  t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema,
  t_CodespacesListForAuthenticatedUserQuerySchema,
  t_CodespacesListInOrganizationParamSchema,
  t_CodespacesListInOrganizationQuerySchema,
  t_CodespacesListInRepositoryForAuthenticatedUserParamSchema,
  t_CodespacesListInRepositoryForAuthenticatedUserQuerySchema,
  t_CodespacesListOrgSecretsParamSchema,
  t_CodespacesListOrgSecretsQuerySchema,
  t_CodespacesListRepoSecretsParamSchema,
  t_CodespacesListRepoSecretsQuerySchema,
  t_CodespacesListRepositoriesForSecretForAuthenticatedUserParamSchema,
  t_CodespacesListSecretsForAuthenticatedUserQuerySchema,
  t_CodespacesListSelectedReposForOrgSecretParamSchema,
  t_CodespacesListSelectedReposForOrgSecretQuerySchema,
  t_CodespacesPreFlightWithRepoForAuthenticatedUserParamSchema,
  t_CodespacesPreFlightWithRepoForAuthenticatedUserQuerySchema,
  t_CodespacesPublishForAuthenticatedUserBodySchema,
  t_CodespacesPublishForAuthenticatedUserParamSchema,
  t_CodespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema,
  t_CodespacesRemoveSelectedRepoFromOrgSecretParamSchema,
  t_CodespacesRepoMachinesForAuthenticatedUserParamSchema,
  t_CodespacesRepoMachinesForAuthenticatedUserQuerySchema,
  t_CodespacesSetCodespacesBillingBodySchema,
  t_CodespacesSetCodespacesBillingParamSchema,
  t_CodespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema,
  t_CodespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema,
  t_CodespacesSetSelectedReposForOrgSecretBodySchema,
  t_CodespacesSetSelectedReposForOrgSecretParamSchema,
  t_CodespacesStartForAuthenticatedUserParamSchema,
  t_CodespacesStopForAuthenticatedUserParamSchema,
  t_CodespacesStopInOrganizationParamSchema,
  t_CodespacesUpdateForAuthenticatedUserBodySchema,
  t_CodespacesUpdateForAuthenticatedUserParamSchema,
  t_DependabotAddSelectedRepoToOrgSecretParamSchema,
  t_DependabotCreateOrUpdateOrgSecretBodySchema,
  t_DependabotCreateOrUpdateOrgSecretParamSchema,
  t_DependabotCreateOrUpdateRepoSecretBodySchema,
  t_DependabotCreateOrUpdateRepoSecretParamSchema,
  t_DependabotDeleteOrgSecretParamSchema,
  t_DependabotDeleteRepoSecretParamSchema,
  t_DependabotGetAlertParamSchema,
  t_DependabotGetOrgPublicKeyParamSchema,
  t_DependabotGetOrgSecretParamSchema,
  t_DependabotGetRepoPublicKeyParamSchema,
  t_DependabotGetRepoSecretParamSchema,
  t_DependabotListAlertsForEnterpriseParamSchema,
  t_DependabotListAlertsForEnterpriseQuerySchema,
  t_DependabotListAlertsForOrgParamSchema,
  t_DependabotListAlertsForOrgQuerySchema,
  t_DependabotListAlertsForRepoParamSchema,
  t_DependabotListAlertsForRepoQuerySchema,
  t_DependabotListOrgSecretsParamSchema,
  t_DependabotListOrgSecretsQuerySchema,
  t_DependabotListRepoSecretsParamSchema,
  t_DependabotListRepoSecretsQuerySchema,
  t_DependabotListSelectedReposForOrgSecretParamSchema,
  t_DependabotListSelectedReposForOrgSecretQuerySchema,
  t_DependabotRemoveSelectedRepoFromOrgSecretParamSchema,
  t_DependabotSetSelectedReposForOrgSecretBodySchema,
  t_DependabotSetSelectedReposForOrgSecretParamSchema,
  t_DependabotUpdateAlertBodySchema,
  t_DependabotUpdateAlertParamSchema,
  t_DependencyGraphCreateRepositorySnapshotBodySchema,
  t_DependencyGraphCreateRepositorySnapshotParamSchema,
  t_DependencyGraphDiffRangeParamSchema,
  t_DependencyGraphDiffRangeQuerySchema,
  t_EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseBodySchema,
  t_EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseParamSchema,
  t_EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParamSchema,
  t_EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBodySchema,
  t_EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParamSchema,
  t_EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParamSchema,
  t_EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParamSchema,
  t_EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParamSchema,
  t_EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseParamSchema,
  t_EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParamSchema,
  t_EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQuerySchema,
  t_EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParamSchema,
  t_GistsCheckIsStarredParamSchema,
  t_GistsCreateBodySchema,
  t_GistsCreateCommentBodySchema,
  t_GistsCreateCommentParamSchema,
  t_GistsDeleteCommentParamSchema,
  t_GistsDeleteParamSchema,
  t_GistsForkParamSchema,
  t_GistsGetCommentParamSchema,
  t_GistsGetParamSchema,
  t_GistsGetRevisionParamSchema,
  t_GistsListCommentsParamSchema,
  t_GistsListCommentsQuerySchema,
  t_GistsListCommitsParamSchema,
  t_GistsListCommitsQuerySchema,
  t_GistsListForUserParamSchema,
  t_GistsListForUserQuerySchema,
  t_GistsListForksParamSchema,
  t_GistsListForksQuerySchema,
  t_GistsListPublicQuerySchema,
  t_GistsListQuerySchema,
  t_GistsListStarredQuerySchema,
  t_GistsStarParamSchema,
  t_GistsUnstarParamSchema,
  t_GistsUpdateBodySchema,
  t_GistsUpdateCommentBodySchema,
  t_GistsUpdateCommentParamSchema,
  t_GistsUpdateParamSchema,
  t_GitCreateBlobBodySchema,
  t_GitCreateBlobParamSchema,
  t_GitCreateCommitBodySchema,
  t_GitCreateCommitParamSchema,
  t_GitCreateRefBodySchema,
  t_GitCreateRefParamSchema,
  t_GitCreateTagBodySchema,
  t_GitCreateTagParamSchema,
  t_GitCreateTreeBodySchema,
  t_GitCreateTreeParamSchema,
  t_GitDeleteRefParamSchema,
  t_GitGetBlobParamSchema,
  t_GitGetCommitParamSchema,
  t_GitGetRefParamSchema,
  t_GitGetTagParamSchema,
  t_GitGetTreeParamSchema,
  t_GitGetTreeQuerySchema,
  t_GitListMatchingRefsParamSchema,
  t_GitUpdateRefBodySchema,
  t_GitUpdateRefParamSchema,
  t_GitignoreGetTemplateParamSchema,
  t_InteractionsGetRestrictionsForOrgParamSchema,
  t_InteractionsGetRestrictionsForRepoParamSchema,
  t_InteractionsRemoveRestrictionsForOrgParamSchema,
  t_InteractionsRemoveRestrictionsForRepoParamSchema,
  t_InteractionsSetRestrictionsForAuthenticatedUserBodySchema,
  t_InteractionsSetRestrictionsForOrgBodySchema,
  t_InteractionsSetRestrictionsForOrgParamSchema,
  t_InteractionsSetRestrictionsForRepoBodySchema,
  t_InteractionsSetRestrictionsForRepoParamSchema,
  t_IssuesAddAssigneesBodySchema,
  t_IssuesAddAssigneesParamSchema,
  t_IssuesAddLabelsBodySchema,
  t_IssuesAddLabelsParamSchema,
  t_IssuesCheckUserCanBeAssignedParamSchema,
  t_IssuesCheckUserCanBeAssignedToIssueParamSchema,
  t_IssuesCreateBodySchema,
  t_IssuesCreateCommentBodySchema,
  t_IssuesCreateCommentParamSchema,
  t_IssuesCreateLabelBodySchema,
  t_IssuesCreateLabelParamSchema,
  t_IssuesCreateMilestoneBodySchema,
  t_IssuesCreateMilestoneParamSchema,
  t_IssuesCreateParamSchema,
  t_IssuesDeleteCommentParamSchema,
  t_IssuesDeleteLabelParamSchema,
  t_IssuesDeleteMilestoneParamSchema,
  t_IssuesGetCommentParamSchema,
  t_IssuesGetEventParamSchema,
  t_IssuesGetLabelParamSchema,
  t_IssuesGetMilestoneParamSchema,
  t_IssuesGetParamSchema,
  t_IssuesListAssigneesParamSchema,
  t_IssuesListAssigneesQuerySchema,
  t_IssuesListCommentsForRepoParamSchema,
  t_IssuesListCommentsForRepoQuerySchema,
  t_IssuesListCommentsParamSchema,
  t_IssuesListCommentsQuerySchema,
  t_IssuesListEventsForRepoParamSchema,
  t_IssuesListEventsForRepoQuerySchema,
  t_IssuesListEventsForTimelineParamSchema,
  t_IssuesListEventsForTimelineQuerySchema,
  t_IssuesListEventsParamSchema,
  t_IssuesListEventsQuerySchema,
  t_IssuesListForAuthenticatedUserQuerySchema,
  t_IssuesListForOrgParamSchema,
  t_IssuesListForOrgQuerySchema,
  t_IssuesListForRepoParamSchema,
  t_IssuesListForRepoQuerySchema,
  t_IssuesListLabelsForMilestoneParamSchema,
  t_IssuesListLabelsForMilestoneQuerySchema,
  t_IssuesListLabelsForRepoParamSchema,
  t_IssuesListLabelsForRepoQuerySchema,
  t_IssuesListLabelsOnIssueParamSchema,
  t_IssuesListLabelsOnIssueQuerySchema,
  t_IssuesListMilestonesParamSchema,
  t_IssuesListMilestonesQuerySchema,
  t_IssuesListQuerySchema,
  t_IssuesLockBodySchema,
  t_IssuesLockParamSchema,
  t_IssuesRemoveAllLabelsParamSchema,
  t_IssuesRemoveAssigneesBodySchema,
  t_IssuesRemoveAssigneesParamSchema,
  t_IssuesRemoveLabelParamSchema,
  t_IssuesSetLabelsBodySchema,
  t_IssuesSetLabelsParamSchema,
  t_IssuesUnlockParamSchema,
  t_IssuesUpdateBodySchema,
  t_IssuesUpdateCommentBodySchema,
  t_IssuesUpdateCommentParamSchema,
  t_IssuesUpdateLabelBodySchema,
  t_IssuesUpdateLabelParamSchema,
  t_IssuesUpdateMilestoneBodySchema,
  t_IssuesUpdateMilestoneParamSchema,
  t_IssuesUpdateParamSchema,
  t_LicensesGetAllCommonlyUsedQuerySchema,
  t_LicensesGetForRepoParamSchema,
  t_LicensesGetParamSchema,
  t_MarkdownRenderBodySchema,
  t_MarkdownRenderRawBodySchema,
  t_MetaGetOctocatQuerySchema,
  t_MigrationsCancelImportParamSchema,
  t_MigrationsDeleteArchiveForAuthenticatedUserParamSchema,
  t_MigrationsDeleteArchiveForOrgParamSchema,
  t_MigrationsDownloadArchiveForOrgParamSchema,
  t_MigrationsGetArchiveForAuthenticatedUserParamSchema,
  t_MigrationsGetCommitAuthorsParamSchema,
  t_MigrationsGetCommitAuthorsQuerySchema,
  t_MigrationsGetImportStatusParamSchema,
  t_MigrationsGetLargeFilesParamSchema,
  t_MigrationsGetStatusForAuthenticatedUserParamSchema,
  t_MigrationsGetStatusForAuthenticatedUserQuerySchema,
  t_MigrationsGetStatusForOrgParamSchema,
  t_MigrationsGetStatusForOrgQuerySchema,
  t_MigrationsListForAuthenticatedUserQuerySchema,
  t_MigrationsListForOrgParamSchema,
  t_MigrationsListForOrgQuerySchema,
  t_MigrationsListReposForAuthenticatedUserParamSchema,
  t_MigrationsListReposForAuthenticatedUserQuerySchema,
  t_MigrationsListReposForOrgParamSchema,
  t_MigrationsListReposForOrgQuerySchema,
  t_MigrationsMapCommitAuthorBodySchema,
  t_MigrationsMapCommitAuthorParamSchema,
  t_MigrationsSetLfsPreferenceBodySchema,
  t_MigrationsSetLfsPreferenceParamSchema,
  t_MigrationsStartForAuthenticatedUserBodySchema,
  t_MigrationsStartForOrgBodySchema,
  t_MigrationsStartForOrgParamSchema,
  t_MigrationsStartImportBodySchema,
  t_MigrationsStartImportParamSchema,
  t_MigrationsUnlockRepoForAuthenticatedUserParamSchema,
  t_MigrationsUnlockRepoForOrgParamSchema,
  t_MigrationsUpdateImportBodySchema,
  t_MigrationsUpdateImportParamSchema,
  t_OidcGetOidcCustomSubTemplateForOrgParamSchema,
  t_OidcUpdateOidcCustomSubTemplateForOrgBodySchema,
  t_OidcUpdateOidcCustomSubTemplateForOrgParamSchema,
  t_OrgsAddSecurityManagerTeamParamSchema,
  t_OrgsBlockUserParamSchema,
  t_OrgsCancelInvitationParamSchema,
  t_OrgsCheckBlockedUserParamSchema,
  t_OrgsCheckMembershipForUserParamSchema,
  t_OrgsCheckPublicMembershipForUserParamSchema,
  t_OrgsConvertMemberToOutsideCollaboratorBodySchema,
  t_OrgsConvertMemberToOutsideCollaboratorParamSchema,
  t_OrgsCreateInvitationBodySchema,
  t_OrgsCreateInvitationParamSchema,
  t_OrgsCreateWebhookBodySchema,
  t_OrgsCreateWebhookParamSchema,
  t_OrgsDeleteWebhookParamSchema,
  t_OrgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema,
  t_OrgsGetMembershipForAuthenticatedUserParamSchema,
  t_OrgsGetMembershipForUserParamSchema,
  t_OrgsGetParamSchema,
  t_OrgsGetWebhookConfigForOrgParamSchema,
  t_OrgsGetWebhookDeliveryParamSchema,
  t_OrgsGetWebhookParamSchema,
  t_OrgsListAppInstallationsParamSchema,
  t_OrgsListAppInstallationsQuerySchema,
  t_OrgsListBlockedUsersParamSchema,
  t_OrgsListBlockedUsersQuerySchema,
  t_OrgsListFailedInvitationsParamSchema,
  t_OrgsListFailedInvitationsQuerySchema,
  t_OrgsListForAuthenticatedUserQuerySchema,
  t_OrgsListForUserParamSchema,
  t_OrgsListForUserQuerySchema,
  t_OrgsListInvitationTeamsParamSchema,
  t_OrgsListInvitationTeamsQuerySchema,
  t_OrgsListMembersParamSchema,
  t_OrgsListMembersQuerySchema,
  t_OrgsListMembershipsForAuthenticatedUserQuerySchema,
  t_OrgsListOutsideCollaboratorsParamSchema,
  t_OrgsListOutsideCollaboratorsQuerySchema,
  t_OrgsListPendingInvitationsParamSchema,
  t_OrgsListPendingInvitationsQuerySchema,
  t_OrgsListPublicMembersParamSchema,
  t_OrgsListPublicMembersQuerySchema,
  t_OrgsListQuerySchema,
  t_OrgsListSecurityManagerTeamsParamSchema,
  t_OrgsListWebhookDeliveriesParamSchema,
  t_OrgsListWebhookDeliveriesQuerySchema,
  t_OrgsListWebhooksParamSchema,
  t_OrgsListWebhooksQuerySchema,
  t_OrgsPingWebhookParamSchema,
  t_OrgsRedeliverWebhookDeliveryParamSchema,
  t_OrgsRemoveMemberParamSchema,
  t_OrgsRemoveMembershipForUserParamSchema,
  t_OrgsRemoveOutsideCollaboratorParamSchema,
  t_OrgsRemovePublicMembershipForAuthenticatedUserParamSchema,
  t_OrgsRemoveSecurityManagerTeamParamSchema,
  t_OrgsSetMembershipForUserBodySchema,
  t_OrgsSetMembershipForUserParamSchema,
  t_OrgsSetPublicMembershipForAuthenticatedUserParamSchema,
  t_OrgsUnblockUserParamSchema,
  t_OrgsUpdateBodySchema,
  t_OrgsUpdateMembershipForAuthenticatedUserBodySchema,
  t_OrgsUpdateMembershipForAuthenticatedUserParamSchema,
  t_OrgsUpdateParamSchema,
  t_OrgsUpdateWebhookBodySchema,
  t_OrgsUpdateWebhookConfigForOrgBodySchema,
  t_OrgsUpdateWebhookConfigForOrgParamSchema,
  t_OrgsUpdateWebhookParamSchema,
  t_PackagesDeletePackageForAuthenticatedUserParamSchema,
  t_PackagesDeletePackageForOrgParamSchema,
  t_PackagesDeletePackageForUserParamSchema,
  t_PackagesDeletePackageVersionForAuthenticatedUserParamSchema,
  t_PackagesDeletePackageVersionForOrgParamSchema,
  t_PackagesDeletePackageVersionForUserParamSchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema,
  t_PackagesGetAllPackageVersionsForPackageOwnedByUserParamSchema,
  t_PackagesGetPackageForAuthenticatedUserParamSchema,
  t_PackagesGetPackageForOrganizationParamSchema,
  t_PackagesGetPackageForUserParamSchema,
  t_PackagesGetPackageVersionForAuthenticatedUserParamSchema,
  t_PackagesGetPackageVersionForOrganizationParamSchema,
  t_PackagesGetPackageVersionForUserParamSchema,
  t_PackagesListPackagesForAuthenticatedUserQuerySchema,
  t_PackagesListPackagesForOrganizationParamSchema,
  t_PackagesListPackagesForOrganizationQuerySchema,
  t_PackagesListPackagesForUserParamSchema,
  t_PackagesListPackagesForUserQuerySchema,
  t_PackagesRestorePackageForAuthenticatedUserParamSchema,
  t_PackagesRestorePackageForAuthenticatedUserQuerySchema,
  t_PackagesRestorePackageForOrgParamSchema,
  t_PackagesRestorePackageForOrgQuerySchema,
  t_PackagesRestorePackageForUserParamSchema,
  t_PackagesRestorePackageForUserQuerySchema,
  t_PackagesRestorePackageVersionForAuthenticatedUserParamSchema,
  t_PackagesRestorePackageVersionForOrgParamSchema,
  t_PackagesRestorePackageVersionForUserParamSchema,
  t_ProjectsAddCollaboratorBodySchema,
  t_ProjectsAddCollaboratorParamSchema,
  t_ProjectsCreateCardBodySchema,
  t_ProjectsCreateCardParamSchema,
  t_ProjectsCreateColumnBodySchema,
  t_ProjectsCreateColumnParamSchema,
  t_ProjectsCreateForAuthenticatedUserBodySchema,
  t_ProjectsCreateForOrgBodySchema,
  t_ProjectsCreateForOrgParamSchema,
  t_ProjectsCreateForRepoBodySchema,
  t_ProjectsCreateForRepoParamSchema,
  t_ProjectsDeleteCardParamSchema,
  t_ProjectsDeleteColumnParamSchema,
  t_ProjectsDeleteParamSchema,
  t_ProjectsGetCardParamSchema,
  t_ProjectsGetColumnParamSchema,
  t_ProjectsGetParamSchema,
  t_ProjectsGetPermissionForUserParamSchema,
  t_ProjectsListCardsParamSchema,
  t_ProjectsListCardsQuerySchema,
  t_ProjectsListCollaboratorsParamSchema,
  t_ProjectsListCollaboratorsQuerySchema,
  t_ProjectsListColumnsParamSchema,
  t_ProjectsListColumnsQuerySchema,
  t_ProjectsListForOrgParamSchema,
  t_ProjectsListForOrgQuerySchema,
  t_ProjectsListForRepoParamSchema,
  t_ProjectsListForRepoQuerySchema,
  t_ProjectsListForUserParamSchema,
  t_ProjectsListForUserQuerySchema,
  t_ProjectsMoveCardBodySchema,
  t_ProjectsMoveCardParamSchema,
  t_ProjectsMoveColumnBodySchema,
  t_ProjectsMoveColumnParamSchema,
  t_ProjectsRemoveCollaboratorParamSchema,
  t_ProjectsUpdateBodySchema,
  t_ProjectsUpdateCardBodySchema,
  t_ProjectsUpdateCardParamSchema,
  t_ProjectsUpdateColumnBodySchema,
  t_ProjectsUpdateColumnParamSchema,
  t_ProjectsUpdateParamSchema,
  t_PullsCheckIfMergedParamSchema,
  t_PullsCreateBodySchema,
  t_PullsCreateParamSchema,
  t_PullsCreateReplyForReviewCommentBodySchema,
  t_PullsCreateReplyForReviewCommentParamSchema,
  t_PullsCreateReviewBodySchema,
  t_PullsCreateReviewCommentBodySchema,
  t_PullsCreateReviewCommentParamSchema,
  t_PullsCreateReviewParamSchema,
  t_PullsDeletePendingReviewParamSchema,
  t_PullsDeleteReviewCommentParamSchema,
  t_PullsDismissReviewBodySchema,
  t_PullsDismissReviewParamSchema,
  t_PullsGetParamSchema,
  t_PullsGetReviewCommentParamSchema,
  t_PullsGetReviewParamSchema,
  t_PullsListCommentsForReviewParamSchema,
  t_PullsListCommentsForReviewQuerySchema,
  t_PullsListCommitsParamSchema,
  t_PullsListCommitsQuerySchema,
  t_PullsListFilesParamSchema,
  t_PullsListFilesQuerySchema,
  t_PullsListParamSchema,
  t_PullsListQuerySchema,
  t_PullsListRequestedReviewersParamSchema,
  t_PullsListReviewCommentsForRepoParamSchema,
  t_PullsListReviewCommentsForRepoQuerySchema,
  t_PullsListReviewCommentsParamSchema,
  t_PullsListReviewCommentsQuerySchema,
  t_PullsListReviewsParamSchema,
  t_PullsListReviewsQuerySchema,
  t_PullsMergeBodySchema,
  t_PullsMergeParamSchema,
  t_PullsRemoveRequestedReviewersBodySchema,
  t_PullsRemoveRequestedReviewersParamSchema,
  t_PullsRequestReviewersBodySchema,
  t_PullsRequestReviewersParamSchema,
  t_PullsSubmitReviewBodySchema,
  t_PullsSubmitReviewParamSchema,
  t_PullsUpdateBodySchema,
  t_PullsUpdateBranchBodySchema,
  t_PullsUpdateBranchParamSchema,
  t_PullsUpdateParamSchema,
  t_PullsUpdateReviewBodySchema,
  t_PullsUpdateReviewCommentBodySchema,
  t_PullsUpdateReviewCommentParamSchema,
  t_PullsUpdateReviewParamSchema,
  t_ReactionsCreateForCommitCommentBodySchema,
  t_ReactionsCreateForCommitCommentParamSchema,
  t_ReactionsCreateForIssueBodySchema,
  t_ReactionsCreateForIssueCommentBodySchema,
  t_ReactionsCreateForIssueCommentParamSchema,
  t_ReactionsCreateForIssueParamSchema,
  t_ReactionsCreateForPullRequestReviewCommentBodySchema,
  t_ReactionsCreateForPullRequestReviewCommentParamSchema,
  t_ReactionsCreateForReleaseBodySchema,
  t_ReactionsCreateForReleaseParamSchema,
  t_ReactionsCreateForTeamDiscussionCommentInOrgBodySchema,
  t_ReactionsCreateForTeamDiscussionCommentInOrgParamSchema,
  t_ReactionsCreateForTeamDiscussionCommentLegacyBodySchema,
  t_ReactionsCreateForTeamDiscussionCommentLegacyParamSchema,
  t_ReactionsCreateForTeamDiscussionInOrgBodySchema,
  t_ReactionsCreateForTeamDiscussionInOrgParamSchema,
  t_ReactionsCreateForTeamDiscussionLegacyBodySchema,
  t_ReactionsCreateForTeamDiscussionLegacyParamSchema,
  t_ReactionsDeleteForCommitCommentParamSchema,
  t_ReactionsDeleteForIssueCommentParamSchema,
  t_ReactionsDeleteForIssueParamSchema,
  t_ReactionsDeleteForPullRequestCommentParamSchema,
  t_ReactionsDeleteForReleaseParamSchema,
  t_ReactionsDeleteForTeamDiscussionCommentParamSchema,
  t_ReactionsDeleteForTeamDiscussionParamSchema,
  t_ReactionsListForCommitCommentParamSchema,
  t_ReactionsListForCommitCommentQuerySchema,
  t_ReactionsListForIssueCommentParamSchema,
  t_ReactionsListForIssueCommentQuerySchema,
  t_ReactionsListForIssueParamSchema,
  t_ReactionsListForIssueQuerySchema,
  t_ReactionsListForPullRequestReviewCommentParamSchema,
  t_ReactionsListForPullRequestReviewCommentQuerySchema,
  t_ReactionsListForReleaseParamSchema,
  t_ReactionsListForReleaseQuerySchema,
  t_ReactionsListForTeamDiscussionCommentInOrgParamSchema,
  t_ReactionsListForTeamDiscussionCommentInOrgQuerySchema,
  t_ReactionsListForTeamDiscussionCommentLegacyParamSchema,
  t_ReactionsListForTeamDiscussionCommentLegacyQuerySchema,
  t_ReactionsListForTeamDiscussionInOrgParamSchema,
  t_ReactionsListForTeamDiscussionInOrgQuerySchema,
  t_ReactionsListForTeamDiscussionLegacyParamSchema,
  t_ReactionsListForTeamDiscussionLegacyQuerySchema,
  t_ReposAcceptInvitationForAuthenticatedUserParamSchema,
  t_ReposAddAppAccessRestrictionsBodySchema,
  t_ReposAddAppAccessRestrictionsParamSchema,
  t_ReposAddCollaboratorBodySchema,
  t_ReposAddCollaboratorParamSchema,
  t_ReposAddStatusCheckContextsBodySchema,
  t_ReposAddStatusCheckContextsParamSchema,
  t_ReposAddTeamAccessRestrictionsBodySchema,
  t_ReposAddTeamAccessRestrictionsParamSchema,
  t_ReposAddUserAccessRestrictionsBodySchema,
  t_ReposAddUserAccessRestrictionsParamSchema,
  t_ReposCheckCollaboratorParamSchema,
  t_ReposCheckVulnerabilityAlertsParamSchema,
  t_ReposCodeownersErrorsParamSchema,
  t_ReposCodeownersErrorsQuerySchema,
  t_ReposCompareCommitsParamSchema,
  t_ReposCompareCommitsQuerySchema,
  t_ReposCreateAutolinkBodySchema,
  t_ReposCreateAutolinkParamSchema,
  t_ReposCreateCommitCommentBodySchema,
  t_ReposCreateCommitCommentParamSchema,
  t_ReposCreateCommitSignatureProtectionParamSchema,
  t_ReposCreateCommitStatusBodySchema,
  t_ReposCreateCommitStatusParamSchema,
  t_ReposCreateDeployKeyBodySchema,
  t_ReposCreateDeployKeyParamSchema,
  t_ReposCreateDeploymentBodySchema,
  t_ReposCreateDeploymentBranchPolicyBodySchema,
  t_ReposCreateDeploymentBranchPolicyParamSchema,
  t_ReposCreateDeploymentParamSchema,
  t_ReposCreateDeploymentStatusBodySchema,
  t_ReposCreateDeploymentStatusParamSchema,
  t_ReposCreateDispatchEventBodySchema,
  t_ReposCreateDispatchEventParamSchema,
  t_ReposCreateForAuthenticatedUserBodySchema,
  t_ReposCreateForkBodySchema,
  t_ReposCreateForkParamSchema,
  t_ReposCreateInOrgBodySchema,
  t_ReposCreateInOrgParamSchema,
  t_ReposCreateOrUpdateEnvironmentBodySchema,
  t_ReposCreateOrUpdateEnvironmentParamSchema,
  t_ReposCreateOrUpdateFileContentsBodySchema,
  t_ReposCreateOrUpdateFileContentsParamSchema,
  t_ReposCreatePagesDeploymentBodySchema,
  t_ReposCreatePagesDeploymentParamSchema,
  t_ReposCreatePagesSiteBodySchema,
  t_ReposCreatePagesSiteParamSchema,
  t_ReposCreateReleaseBodySchema,
  t_ReposCreateReleaseParamSchema,
  t_ReposCreateTagProtectionBodySchema,
  t_ReposCreateTagProtectionParamSchema,
  t_ReposCreateUsingTemplateBodySchema,
  t_ReposCreateUsingTemplateParamSchema,
  t_ReposCreateWebhookBodySchema,
  t_ReposCreateWebhookParamSchema,
  t_ReposDeclineInvitationForAuthenticatedUserParamSchema,
  t_ReposDeleteAccessRestrictionsParamSchema,
  t_ReposDeleteAdminBranchProtectionParamSchema,
  t_ReposDeleteAnEnvironmentParamSchema,
  t_ReposDeleteAutolinkParamSchema,
  t_ReposDeleteBranchProtectionParamSchema,
  t_ReposDeleteCommitCommentParamSchema,
  t_ReposDeleteCommitSignatureProtectionParamSchema,
  t_ReposDeleteDeployKeyParamSchema,
  t_ReposDeleteDeploymentBranchPolicyParamSchema,
  t_ReposDeleteDeploymentParamSchema,
  t_ReposDeleteFileBodySchema,
  t_ReposDeleteFileParamSchema,
  t_ReposDeleteInvitationParamSchema,
  t_ReposDeletePagesSiteParamSchema,
  t_ReposDeleteParamSchema,
  t_ReposDeletePullRequestReviewProtectionParamSchema,
  t_ReposDeleteReleaseAssetParamSchema,
  t_ReposDeleteReleaseParamSchema,
  t_ReposDeleteTagProtectionParamSchema,
  t_ReposDeleteWebhookParamSchema,
  t_ReposDisableAutomatedSecurityFixesParamSchema,
  t_ReposDisableLfsForRepoParamSchema,
  t_ReposDisableVulnerabilityAlertsParamSchema,
  t_ReposDownloadTarballArchiveParamSchema,
  t_ReposDownloadZipballArchiveParamSchema,
  t_ReposEnableAutomatedSecurityFixesParamSchema,
  t_ReposEnableLfsForRepoParamSchema,
  t_ReposEnableVulnerabilityAlertsParamSchema,
  t_ReposGenerateReleaseNotesBodySchema,
  t_ReposGenerateReleaseNotesParamSchema,
  t_ReposGetAccessRestrictionsParamSchema,
  t_ReposGetAdminBranchProtectionParamSchema,
  t_ReposGetAllEnvironmentsParamSchema,
  t_ReposGetAllEnvironmentsQuerySchema,
  t_ReposGetAllStatusCheckContextsParamSchema,
  t_ReposGetAllTopicsParamSchema,
  t_ReposGetAllTopicsQuerySchema,
  t_ReposGetAppsWithAccessToProtectedBranchParamSchema,
  t_ReposGetAutolinkParamSchema,
  t_ReposGetBranchParamSchema,
  t_ReposGetBranchProtectionParamSchema,
  t_ReposGetClonesParamSchema,
  t_ReposGetClonesQuerySchema,
  t_ReposGetCodeFrequencyStatsParamSchema,
  t_ReposGetCollaboratorPermissionLevelParamSchema,
  t_ReposGetCombinedStatusForRefParamSchema,
  t_ReposGetCombinedStatusForRefQuerySchema,
  t_ReposGetCommitActivityStatsParamSchema,
  t_ReposGetCommitCommentParamSchema,
  t_ReposGetCommitParamSchema,
  t_ReposGetCommitQuerySchema,
  t_ReposGetCommitSignatureProtectionParamSchema,
  t_ReposGetCommunityProfileMetricsParamSchema,
  t_ReposGetContentParamSchema,
  t_ReposGetContentQuerySchema,
  t_ReposGetContributorsStatsParamSchema,
  t_ReposGetDeployKeyParamSchema,
  t_ReposGetDeploymentBranchPolicyParamSchema,
  t_ReposGetDeploymentParamSchema,
  t_ReposGetDeploymentStatusParamSchema,
  t_ReposGetEnvironmentParamSchema,
  t_ReposGetLatestPagesBuildParamSchema,
  t_ReposGetLatestReleaseParamSchema,
  t_ReposGetPagesBuildParamSchema,
  t_ReposGetPagesHealthCheckParamSchema,
  t_ReposGetPagesParamSchema,
  t_ReposGetParamSchema,
  t_ReposGetParticipationStatsParamSchema,
  t_ReposGetPullRequestReviewProtectionParamSchema,
  t_ReposGetPunchCardStatsParamSchema,
  t_ReposGetReadmeInDirectoryParamSchema,
  t_ReposGetReadmeInDirectoryQuerySchema,
  t_ReposGetReadmeParamSchema,
  t_ReposGetReadmeQuerySchema,
  t_ReposGetReleaseAssetParamSchema,
  t_ReposGetReleaseByTagParamSchema,
  t_ReposGetReleaseParamSchema,
  t_ReposGetStatusChecksProtectionParamSchema,
  t_ReposGetTeamsWithAccessToProtectedBranchParamSchema,
  t_ReposGetTopPathsParamSchema,
  t_ReposGetTopReferrersParamSchema,
  t_ReposGetUsersWithAccessToProtectedBranchParamSchema,
  t_ReposGetViewsParamSchema,
  t_ReposGetViewsQuerySchema,
  t_ReposGetWebhookConfigForRepoParamSchema,
  t_ReposGetWebhookDeliveryParamSchema,
  t_ReposGetWebhookParamSchema,
  t_ReposListAutolinksParamSchema,
  t_ReposListAutolinksQuerySchema,
  t_ReposListBranchesForHeadCommitParamSchema,
  t_ReposListBranchesParamSchema,
  t_ReposListBranchesQuerySchema,
  t_ReposListCollaboratorsParamSchema,
  t_ReposListCollaboratorsQuerySchema,
  t_ReposListCommentsForCommitParamSchema,
  t_ReposListCommentsForCommitQuerySchema,
  t_ReposListCommitCommentsForRepoParamSchema,
  t_ReposListCommitCommentsForRepoQuerySchema,
  t_ReposListCommitStatusesForRefParamSchema,
  t_ReposListCommitStatusesForRefQuerySchema,
  t_ReposListCommitsParamSchema,
  t_ReposListCommitsQuerySchema,
  t_ReposListContributorsParamSchema,
  t_ReposListContributorsQuerySchema,
  t_ReposListDeployKeysParamSchema,
  t_ReposListDeployKeysQuerySchema,
  t_ReposListDeploymentBranchPoliciesParamSchema,
  t_ReposListDeploymentBranchPoliciesQuerySchema,
  t_ReposListDeploymentStatusesParamSchema,
  t_ReposListDeploymentStatusesQuerySchema,
  t_ReposListDeploymentsParamSchema,
  t_ReposListDeploymentsQuerySchema,
  t_ReposListForAuthenticatedUserQuerySchema,
  t_ReposListForOrgParamSchema,
  t_ReposListForOrgQuerySchema,
  t_ReposListForUserParamSchema,
  t_ReposListForUserQuerySchema,
  t_ReposListForksParamSchema,
  t_ReposListForksQuerySchema,
  t_ReposListInvitationsForAuthenticatedUserQuerySchema,
  t_ReposListInvitationsParamSchema,
  t_ReposListInvitationsQuerySchema,
  t_ReposListLanguagesParamSchema,
  t_ReposListPagesBuildsParamSchema,
  t_ReposListPagesBuildsQuerySchema,
  t_ReposListPublicQuerySchema,
  t_ReposListPullRequestsAssociatedWithCommitParamSchema,
  t_ReposListPullRequestsAssociatedWithCommitQuerySchema,
  t_ReposListReleaseAssetsParamSchema,
  t_ReposListReleaseAssetsQuerySchema,
  t_ReposListReleasesParamSchema,
  t_ReposListReleasesQuerySchema,
  t_ReposListTagProtectionParamSchema,
  t_ReposListTagsParamSchema,
  t_ReposListTagsQuerySchema,
  t_ReposListTeamsParamSchema,
  t_ReposListTeamsQuerySchema,
  t_ReposListWebhookDeliveriesParamSchema,
  t_ReposListWebhookDeliveriesQuerySchema,
  t_ReposListWebhooksParamSchema,
  t_ReposListWebhooksQuerySchema,
  t_ReposMergeBodySchema,
  t_ReposMergeParamSchema,
  t_ReposMergeUpstreamBodySchema,
  t_ReposMergeUpstreamParamSchema,
  t_ReposPingWebhookParamSchema,
  t_ReposRedeliverWebhookDeliveryParamSchema,
  t_ReposRemoveAppAccessRestrictionsBodySchema,
  t_ReposRemoveAppAccessRestrictionsParamSchema,
  t_ReposRemoveCollaboratorParamSchema,
  t_ReposRemoveStatusCheckContextsBodySchema,
  t_ReposRemoveStatusCheckContextsParamSchema,
  t_ReposRemoveStatusCheckProtectionParamSchema,
  t_ReposRemoveTeamAccessRestrictionsBodySchema,
  t_ReposRemoveTeamAccessRestrictionsParamSchema,
  t_ReposRemoveUserAccessRestrictionsBodySchema,
  t_ReposRemoveUserAccessRestrictionsParamSchema,
  t_ReposRenameBranchBodySchema,
  t_ReposRenameBranchParamSchema,
  t_ReposReplaceAllTopicsBodySchema,
  t_ReposReplaceAllTopicsParamSchema,
  t_ReposRequestPagesBuildParamSchema,
  t_ReposSetAdminBranchProtectionParamSchema,
  t_ReposSetAppAccessRestrictionsBodySchema,
  t_ReposSetAppAccessRestrictionsParamSchema,
  t_ReposSetStatusCheckContextsBodySchema,
  t_ReposSetStatusCheckContextsParamSchema,
  t_ReposSetTeamAccessRestrictionsBodySchema,
  t_ReposSetTeamAccessRestrictionsParamSchema,
  t_ReposSetUserAccessRestrictionsBodySchema,
  t_ReposSetUserAccessRestrictionsParamSchema,
  t_ReposTestPushWebhookParamSchema,
  t_ReposTransferBodySchema,
  t_ReposTransferParamSchema,
  t_ReposUpdateBodySchema,
  t_ReposUpdateBranchProtectionBodySchema,
  t_ReposUpdateBranchProtectionParamSchema,
  t_ReposUpdateCommitCommentBodySchema,
  t_ReposUpdateCommitCommentParamSchema,
  t_ReposUpdateDeploymentBranchPolicyBodySchema,
  t_ReposUpdateDeploymentBranchPolicyParamSchema,
  t_ReposUpdateInformationAboutPagesSiteBodySchema,
  t_ReposUpdateInformationAboutPagesSiteParamSchema,
  t_ReposUpdateInvitationBodySchema,
  t_ReposUpdateInvitationParamSchema,
  t_ReposUpdateParamSchema,
  t_ReposUpdatePullRequestReviewProtectionBodySchema,
  t_ReposUpdatePullRequestReviewProtectionParamSchema,
  t_ReposUpdateReleaseAssetBodySchema,
  t_ReposUpdateReleaseAssetParamSchema,
  t_ReposUpdateReleaseBodySchema,
  t_ReposUpdateReleaseParamSchema,
  t_ReposUpdateStatusCheckProtectionBodySchema,
  t_ReposUpdateStatusCheckProtectionParamSchema,
  t_ReposUpdateWebhookBodySchema,
  t_ReposUpdateWebhookConfigForRepoBodySchema,
  t_ReposUpdateWebhookConfigForRepoParamSchema,
  t_ReposUpdateWebhookParamSchema,
  t_ReposUploadReleaseAssetBodySchema,
  t_ReposUploadReleaseAssetParamSchema,
  t_ReposUploadReleaseAssetQuerySchema,
  t_SearchCodeQuerySchema,
  t_SearchCommitsQuerySchema,
  t_SearchIssuesAndPullRequestsQuerySchema,
  t_SearchLabelsQuerySchema,
  t_SearchReposQuerySchema,
  t_SearchTopicsQuerySchema,
  t_SearchUsersQuerySchema,
  t_SecretScanningGetAlertParamSchema,
  t_SecretScanningGetSecurityAnalysisSettingsForEnterpriseParamSchema,
  t_SecretScanningListAlertsForEnterpriseParamSchema,
  t_SecretScanningListAlertsForEnterpriseQuerySchema,
  t_SecretScanningListAlertsForOrgParamSchema,
  t_SecretScanningListAlertsForOrgQuerySchema,
  t_SecretScanningListAlertsForRepoParamSchema,
  t_SecretScanningListAlertsForRepoQuerySchema,
  t_SecretScanningListLocationsForAlertParamSchema,
  t_SecretScanningListLocationsForAlertQuerySchema,
  t_SecretScanningPatchSecurityAnalysisSettingsForEnterpriseBodySchema,
  t_SecretScanningPatchSecurityAnalysisSettingsForEnterpriseParamSchema,
  t_SecretScanningPostSecurityProductEnablementForEnterpriseParamSchema,
  t_SecretScanningUpdateAlertBodySchema,
  t_SecretScanningUpdateAlertParamSchema,
  t_TeamsAddMemberLegacyParamSchema,
  t_TeamsAddOrUpdateMembershipForUserInOrgBodySchema,
  t_TeamsAddOrUpdateMembershipForUserInOrgParamSchema,
  t_TeamsAddOrUpdateMembershipForUserLegacyBodySchema,
  t_TeamsAddOrUpdateMembershipForUserLegacyParamSchema,
  t_TeamsAddOrUpdateProjectPermissionsInOrgBodySchema,
  t_TeamsAddOrUpdateProjectPermissionsInOrgParamSchema,
  t_TeamsAddOrUpdateProjectPermissionsLegacyBodySchema,
  t_TeamsAddOrUpdateProjectPermissionsLegacyParamSchema,
  t_TeamsAddOrUpdateRepoPermissionsInOrgBodySchema,
  t_TeamsAddOrUpdateRepoPermissionsInOrgParamSchema,
  t_TeamsAddOrUpdateRepoPermissionsLegacyBodySchema,
  t_TeamsAddOrUpdateRepoPermissionsLegacyParamSchema,
  t_TeamsCheckPermissionsForProjectInOrgParamSchema,
  t_TeamsCheckPermissionsForProjectLegacyParamSchema,
  t_TeamsCheckPermissionsForRepoInOrgParamSchema,
  t_TeamsCheckPermissionsForRepoLegacyParamSchema,
  t_TeamsCreateBodySchema,
  t_TeamsCreateDiscussionCommentInOrgBodySchema,
  t_TeamsCreateDiscussionCommentInOrgParamSchema,
  t_TeamsCreateDiscussionCommentLegacyBodySchema,
  t_TeamsCreateDiscussionCommentLegacyParamSchema,
  t_TeamsCreateDiscussionInOrgBodySchema,
  t_TeamsCreateDiscussionInOrgParamSchema,
  t_TeamsCreateDiscussionLegacyBodySchema,
  t_TeamsCreateDiscussionLegacyParamSchema,
  t_TeamsCreateParamSchema,
  t_TeamsDeleteDiscussionCommentInOrgParamSchema,
  t_TeamsDeleteDiscussionCommentLegacyParamSchema,
  t_TeamsDeleteDiscussionInOrgParamSchema,
  t_TeamsDeleteDiscussionLegacyParamSchema,
  t_TeamsDeleteInOrgParamSchema,
  t_TeamsDeleteLegacyParamSchema,
  t_TeamsGetByNameParamSchema,
  t_TeamsGetDiscussionCommentInOrgParamSchema,
  t_TeamsGetDiscussionCommentLegacyParamSchema,
  t_TeamsGetDiscussionInOrgParamSchema,
  t_TeamsGetDiscussionLegacyParamSchema,
  t_TeamsGetLegacyParamSchema,
  t_TeamsGetMemberLegacyParamSchema,
  t_TeamsGetMembershipForUserInOrgParamSchema,
  t_TeamsGetMembershipForUserLegacyParamSchema,
  t_TeamsListChildInOrgParamSchema,
  t_TeamsListChildInOrgQuerySchema,
  t_TeamsListChildLegacyParamSchema,
  t_TeamsListChildLegacyQuerySchema,
  t_TeamsListDiscussionCommentsInOrgParamSchema,
  t_TeamsListDiscussionCommentsInOrgQuerySchema,
  t_TeamsListDiscussionCommentsLegacyParamSchema,
  t_TeamsListDiscussionCommentsLegacyQuerySchema,
  t_TeamsListDiscussionsInOrgParamSchema,
  t_TeamsListDiscussionsInOrgQuerySchema,
  t_TeamsListDiscussionsLegacyParamSchema,
  t_TeamsListDiscussionsLegacyQuerySchema,
  t_TeamsListForAuthenticatedUserQuerySchema,
  t_TeamsListMembersInOrgParamSchema,
  t_TeamsListMembersInOrgQuerySchema,
  t_TeamsListMembersLegacyParamSchema,
  t_TeamsListMembersLegacyQuerySchema,
  t_TeamsListParamSchema,
  t_TeamsListPendingInvitationsInOrgParamSchema,
  t_TeamsListPendingInvitationsInOrgQuerySchema,
  t_TeamsListPendingInvitationsLegacyParamSchema,
  t_TeamsListPendingInvitationsLegacyQuerySchema,
  t_TeamsListProjectsInOrgParamSchema,
  t_TeamsListProjectsInOrgQuerySchema,
  t_TeamsListProjectsLegacyParamSchema,
  t_TeamsListProjectsLegacyQuerySchema,
  t_TeamsListQuerySchema,
  t_TeamsListReposInOrgParamSchema,
  t_TeamsListReposInOrgQuerySchema,
  t_TeamsListReposLegacyParamSchema,
  t_TeamsListReposLegacyQuerySchema,
  t_TeamsRemoveMemberLegacyParamSchema,
  t_TeamsRemoveMembershipForUserInOrgParamSchema,
  t_TeamsRemoveMembershipForUserLegacyParamSchema,
  t_TeamsRemoveProjectInOrgParamSchema,
  t_TeamsRemoveProjectLegacyParamSchema,
  t_TeamsRemoveRepoInOrgParamSchema,
  t_TeamsRemoveRepoLegacyParamSchema,
  t_TeamsUpdateDiscussionCommentInOrgBodySchema,
  t_TeamsUpdateDiscussionCommentInOrgParamSchema,
  t_TeamsUpdateDiscussionCommentLegacyBodySchema,
  t_TeamsUpdateDiscussionCommentLegacyParamSchema,
  t_TeamsUpdateDiscussionInOrgBodySchema,
  t_TeamsUpdateDiscussionInOrgParamSchema,
  t_TeamsUpdateDiscussionLegacyBodySchema,
  t_TeamsUpdateDiscussionLegacyParamSchema,
  t_TeamsUpdateInOrgBodySchema,
  t_TeamsUpdateInOrgParamSchema,
  t_TeamsUpdateLegacyBodySchema,
  t_TeamsUpdateLegacyParamSchema,
  t_UsersAddEmailForAuthenticatedUserBodySchema,
  t_UsersBlockParamSchema,
  t_UsersCheckBlockedParamSchema,
  t_UsersCheckFollowingForUserParamSchema,
  t_UsersCheckPersonIsFollowedByAuthenticatedParamSchema,
  t_UsersCreateGpgKeyForAuthenticatedUserBodySchema,
  t_UsersCreatePublicSshKeyForAuthenticatedUserBodySchema,
  t_UsersCreateSshSigningKeyForAuthenticatedUserBodySchema,
  t_UsersDeleteEmailForAuthenticatedUserBodySchema,
  t_UsersDeleteGpgKeyForAuthenticatedUserParamSchema,
  t_UsersDeletePublicSshKeyForAuthenticatedUserParamSchema,
  t_UsersDeleteSshSigningKeyForAuthenticatedUserParamSchema,
  t_UsersFollowParamSchema,
  t_UsersGetByUsernameParamSchema,
  t_UsersGetContextForUserParamSchema,
  t_UsersGetContextForUserQuerySchema,
  t_UsersGetGpgKeyForAuthenticatedUserParamSchema,
  t_UsersGetPublicSshKeyForAuthenticatedUserParamSchema,
  t_UsersGetSshSigningKeyForAuthenticatedUserParamSchema,
  t_UsersListBlockedByAuthenticatedUserQuerySchema,
  t_UsersListEmailsForAuthenticatedUserQuerySchema,
  t_UsersListFollowedByAuthenticatedUserQuerySchema,
  t_UsersListFollowersForAuthenticatedUserQuerySchema,
  t_UsersListFollowersForUserParamSchema,
  t_UsersListFollowersForUserQuerySchema,
  t_UsersListFollowingForUserParamSchema,
  t_UsersListFollowingForUserQuerySchema,
  t_UsersListGpgKeysForAuthenticatedUserQuerySchema,
  t_UsersListGpgKeysForUserParamSchema,
  t_UsersListGpgKeysForUserQuerySchema,
  t_UsersListPublicEmailsForAuthenticatedUserQuerySchema,
  t_UsersListPublicKeysForUserParamSchema,
  t_UsersListPublicKeysForUserQuerySchema,
  t_UsersListPublicSshKeysForAuthenticatedUserQuerySchema,
  t_UsersListQuerySchema,
  t_UsersListSshSigningKeysForAuthenticatedUserQuerySchema,
  t_UsersListSshSigningKeysForUserParamSchema,
  t_UsersListSshSigningKeysForUserQuerySchema,
  t_UsersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema,
  t_UsersUnblockParamSchema,
  t_UsersUnfollowParamSchema,
  t_UsersUpdateAuthenticatedBodySchema,
} from "./models"
import cors from "@koa/cors"
import KoaRouter from "@koa/router"
import Koa, { Context, Middleware, Next } from "koa"
import koaBody from "koa-body"
import { ZodSchema, z } from "zod"

//region safe-edit-region-header
//endregion safe-edit-region-header

function paramValidationFactory<Type>(
  schema: ZodSchema
): Middleware<{ params: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.safeParse(ctx.params)
    console.info(result)

    if (!result.success) {
      throw new Error("validation error")
    }

    ctx.state.params = result.data

    return next()
  }
}

function queryValidationFactory<Type>(
  schema: ZodSchema
): Middleware<{ query: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.safeParse(ctx.query)
    console.info(result)

    if (!result.success) {
      throw new Error("validation error")
    }

    ctx.state.query = result.data

    return next()
  }
}

function bodyValidationFactory<Type>(
  schema: ZodSchema
): Middleware<{ body: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.safeParse(ctx.request.body)
    console.info(result)

    if (!result.success) {
      throw new Error("validation error")
    }

    ctx.state.body = result.data

    return next()
  }
}

interface ValidatedCtx<Params, Query, Body> extends Context {
  state: { params: Params; query: Query; body: Body }
}

const PORT = 3000

// ApiClient
const server = new Koa()

server.use(cors())
server.use(koaBody())

const router = new KoaRouter()

router.get(
  "metaRoot",
  "/",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-metaRoot

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-metaRoot
  }
)

router.get(
  "appsGetAuthenticated",
  "/app",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-appsGetAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetAuthenticated
  }
)

const appsCreateFromManifestParamSchema = z.object({ code: z.coerce.string() })

router.post(
  "appsCreateFromManifest",
  "/app-manifests/:code/conversions",
  paramValidationFactory<t_AppsCreateFromManifestParamSchema>(
    appsCreateFromManifestParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_AppsCreateFromManifestParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsCreateFromManifest

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCreateFromManifest
  }
)

router.get(
  "appsGetWebhookConfigForApp",
  "/app/hook/config",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-appsGetWebhookConfigForApp

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetWebhookConfigForApp
  }
)

const appsUpdateWebhookConfigForAppBodySchema = z.object({
  url: z.coerce.string().optional(),
  content_type: z.coerce.string().optional(),
  secret: z.coerce.string().optional(),
  insecure_ssl: z.object({}).optional(),
})

router.patch(
  "appsUpdateWebhookConfigForApp",
  "/app/hook/config",
  bodyValidationFactory<t_AppsUpdateWebhookConfigForAppBodySchema>(
    appsUpdateWebhookConfigForAppBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, t_AppsUpdateWebhookConfigForAppBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-appsUpdateWebhookConfigForApp

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsUpdateWebhookConfigForApp
  }
)

const appsListWebhookDeliveriesQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  cursor: z.coerce.string().optional(),
  redelivery: z.coerce.boolean().optional(),
})

router.get(
  "appsListWebhookDeliveries",
  "/app/hook/deliveries",
  queryValidationFactory<t_AppsListWebhookDeliveriesQuerySchema>(
    appsListWebhookDeliveriesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_AppsListWebhookDeliveriesQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsListWebhookDeliveries

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListWebhookDeliveries
  }
)

const appsGetWebhookDeliveryParamSchema = z.object({
  delivery_id: z.coerce.number(),
})

router.get(
  "appsGetWebhookDelivery",
  "/app/hook/deliveries/:deliveryId",
  paramValidationFactory<t_AppsGetWebhookDeliveryParamSchema>(
    appsGetWebhookDeliveryParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_AppsGetWebhookDeliveryParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsGetWebhookDelivery

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetWebhookDelivery
  }
)

const appsRedeliverWebhookDeliveryParamSchema = z.object({
  delivery_id: z.coerce.number(),
})

router.post(
  "appsRedeliverWebhookDelivery",
  "/app/hook/deliveries/:deliveryId/attempts",
  paramValidationFactory<t_AppsRedeliverWebhookDeliveryParamSchema>(
    appsRedeliverWebhookDeliveryParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_AppsRedeliverWebhookDeliveryParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsRedeliverWebhookDelivery

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsRedeliverWebhookDelivery
  }
)

const appsListInstallationsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  since: z.coerce.string().optional(),
  outdated: z.coerce.string().optional(),
})

router.get(
  "appsListInstallations",
  "/app/installations",
  queryValidationFactory<t_AppsListInstallationsQuerySchema>(
    appsListInstallationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_AppsListInstallationsQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsListInstallations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListInstallations
  }
)

const appsGetInstallationParamSchema = z.object({
  installation_id: z.coerce.number(),
})

router.get(
  "appsGetInstallation",
  "/app/installations/:installationId",
  paramValidationFactory<t_AppsGetInstallationParamSchema>(
    appsGetInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_AppsGetInstallationParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsGetInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetInstallation
  }
)

const appsDeleteInstallationParamSchema = z.object({
  installation_id: z.coerce.number(),
})

router.delete(
  "appsDeleteInstallation",
  "/app/installations/:installationId",
  paramValidationFactory<t_AppsDeleteInstallationParamSchema>(
    appsDeleteInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_AppsDeleteInstallationParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsDeleteInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsDeleteInstallation
  }
)

const appsCreateInstallationAccessTokenParamSchema = z.object({
  installation_id: z.coerce.number(),
})

const appsCreateInstallationAccessTokenBodySchema = z
  .object({
    repositories: z.array(z.coerce.string().optional()).optional(),
    repository_ids: z.array(z.coerce.number().optional()).optional(),
    permissions: z
      .object({
        actions: z.coerce.string().optional(),
        administration: z.coerce.string().optional(),
        checks: z.coerce.string().optional(),
        contents: z.coerce.string().optional(),
        deployments: z.coerce.string().optional(),
        environments: z.coerce.string().optional(),
        issues: z.coerce.string().optional(),
        metadata: z.coerce.string().optional(),
        packages: z.coerce.string().optional(),
        pages: z.coerce.string().optional(),
        pull_requests: z.coerce.string().optional(),
        repository_announcement_banners: z.coerce.string().optional(),
        repository_hooks: z.coerce.string().optional(),
        repository_projects: z.coerce.string().optional(),
        secret_scanning_alerts: z.coerce.string().optional(),
        secrets: z.coerce.string().optional(),
        security_events: z.coerce.string().optional(),
        single_file: z.coerce.string().optional(),
        statuses: z.coerce.string().optional(),
        vulnerability_alerts: z.coerce.string().optional(),
        workflows: z.coerce.string().optional(),
        members: z.coerce.string().optional(),
        organization_administration: z.coerce.string().optional(),
        organization_custom_roles: z.coerce.string().optional(),
        organization_announcement_banners: z.coerce.string().optional(),
        organization_hooks: z.coerce.string().optional(),
        organization_plan: z.coerce.string().optional(),
        organization_projects: z.coerce.string().optional(),
        organization_packages: z.coerce.string().optional(),
        organization_secrets: z.coerce.string().optional(),
        organization_self_hosted_runners: z.coerce.string().optional(),
        organization_user_blocking: z.coerce.string().optional(),
        team_discussions: z.coerce.string().optional(),
      })
      .optional(),
  })
  .optional()

router.post(
  "appsCreateInstallationAccessToken",
  "/app/installations/:installationId/access_tokens",
  paramValidationFactory<t_AppsCreateInstallationAccessTokenParamSchema>(
    appsCreateInstallationAccessTokenParamSchema
  ),
  bodyValidationFactory<t_AppsCreateInstallationAccessTokenBodySchema>(
    appsCreateInstallationAccessTokenBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_AppsCreateInstallationAccessTokenParamSchema,
      void,
      t_AppsCreateInstallationAccessTokenBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsCreateInstallationAccessToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCreateInstallationAccessToken
  }
)

const appsSuspendInstallationParamSchema = z.object({
  installation_id: z.coerce.number(),
})

router.put(
  "appsSuspendInstallation",
  "/app/installations/:installationId/suspended",
  paramValidationFactory<t_AppsSuspendInstallationParamSchema>(
    appsSuspendInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_AppsSuspendInstallationParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsSuspendInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsSuspendInstallation
  }
)

const appsUnsuspendInstallationParamSchema = z.object({
  installation_id: z.coerce.number(),
})

router.delete(
  "appsUnsuspendInstallation",
  "/app/installations/:installationId/suspended",
  paramValidationFactory<t_AppsUnsuspendInstallationParamSchema>(
    appsUnsuspendInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_AppsUnsuspendInstallationParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsUnsuspendInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsUnsuspendInstallation
  }
)

const appsDeleteAuthorizationParamSchema = z.object({
  client_id: z.coerce.string(),
})

const appsDeleteAuthorizationBodySchema = z.object({
  access_token: z.coerce.string(),
})

router.delete(
  "appsDeleteAuthorization",
  "/applications/:clientId/grant",
  paramValidationFactory<t_AppsDeleteAuthorizationParamSchema>(
    appsDeleteAuthorizationParamSchema
  ),
  bodyValidationFactory<t_AppsDeleteAuthorizationBodySchema>(
    appsDeleteAuthorizationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_AppsDeleteAuthorizationParamSchema,
      void,
      t_AppsDeleteAuthorizationBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsDeleteAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsDeleteAuthorization
  }
)

const appsCheckTokenParamSchema = z.object({ client_id: z.coerce.string() })

const appsCheckTokenBodySchema = z.object({ access_token: z.coerce.string() })

router.post(
  "appsCheckToken",
  "/applications/:clientId/token",
  paramValidationFactory<t_AppsCheckTokenParamSchema>(
    appsCheckTokenParamSchema
  ),
  bodyValidationFactory<t_AppsCheckTokenBodySchema>(appsCheckTokenBodySchema),
  async (
    ctx: ValidatedCtx<
      t_AppsCheckTokenParamSchema,
      void,
      t_AppsCheckTokenBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsCheckToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCheckToken
  }
)

const appsResetTokenParamSchema = z.object({ client_id: z.coerce.string() })

const appsResetTokenBodySchema = z.object({ access_token: z.coerce.string() })

router.patch(
  "appsResetToken",
  "/applications/:clientId/token",
  paramValidationFactory<t_AppsResetTokenParamSchema>(
    appsResetTokenParamSchema
  ),
  bodyValidationFactory<t_AppsResetTokenBodySchema>(appsResetTokenBodySchema),
  async (
    ctx: ValidatedCtx<
      t_AppsResetTokenParamSchema,
      void,
      t_AppsResetTokenBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsResetToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsResetToken
  }
)

const appsDeleteTokenParamSchema = z.object({ client_id: z.coerce.string() })

const appsDeleteTokenBodySchema = z.object({ access_token: z.coerce.string() })

router.delete(
  "appsDeleteToken",
  "/applications/:clientId/token",
  paramValidationFactory<t_AppsDeleteTokenParamSchema>(
    appsDeleteTokenParamSchema
  ),
  bodyValidationFactory<t_AppsDeleteTokenBodySchema>(appsDeleteTokenBodySchema),
  async (
    ctx: ValidatedCtx<
      t_AppsDeleteTokenParamSchema,
      void,
      t_AppsDeleteTokenBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsDeleteToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsDeleteToken
  }
)

const appsScopeTokenParamSchema = z.object({ client_id: z.coerce.string() })

const appsScopeTokenBodySchema = z.object({
  access_token: z.coerce.string(),
  target: z.coerce.string().optional(),
  target_id: z.coerce.number().optional(),
  repositories: z.array(z.coerce.string().optional()).optional(),
  repository_ids: z.array(z.coerce.number().optional()).optional(),
  permissions: z
    .object({
      actions: z.coerce.string().optional(),
      administration: z.coerce.string().optional(),
      checks: z.coerce.string().optional(),
      contents: z.coerce.string().optional(),
      deployments: z.coerce.string().optional(),
      environments: z.coerce.string().optional(),
      issues: z.coerce.string().optional(),
      metadata: z.coerce.string().optional(),
      packages: z.coerce.string().optional(),
      pages: z.coerce.string().optional(),
      pull_requests: z.coerce.string().optional(),
      repository_announcement_banners: z.coerce.string().optional(),
      repository_hooks: z.coerce.string().optional(),
      repository_projects: z.coerce.string().optional(),
      secret_scanning_alerts: z.coerce.string().optional(),
      secrets: z.coerce.string().optional(),
      security_events: z.coerce.string().optional(),
      single_file: z.coerce.string().optional(),
      statuses: z.coerce.string().optional(),
      vulnerability_alerts: z.coerce.string().optional(),
      workflows: z.coerce.string().optional(),
      members: z.coerce.string().optional(),
      organization_administration: z.coerce.string().optional(),
      organization_custom_roles: z.coerce.string().optional(),
      organization_announcement_banners: z.coerce.string().optional(),
      organization_hooks: z.coerce.string().optional(),
      organization_plan: z.coerce.string().optional(),
      organization_projects: z.coerce.string().optional(),
      organization_packages: z.coerce.string().optional(),
      organization_secrets: z.coerce.string().optional(),
      organization_self_hosted_runners: z.coerce.string().optional(),
      organization_user_blocking: z.coerce.string().optional(),
      team_discussions: z.coerce.string().optional(),
    })
    .optional(),
})

router.post(
  "appsScopeToken",
  "/applications/:clientId/token/scoped",
  paramValidationFactory<t_AppsScopeTokenParamSchema>(
    appsScopeTokenParamSchema
  ),
  bodyValidationFactory<t_AppsScopeTokenBodySchema>(appsScopeTokenBodySchema),
  async (
    ctx: ValidatedCtx<
      t_AppsScopeTokenParamSchema,
      void,
      t_AppsScopeTokenBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsScopeToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsScopeToken
  }
)

const appsGetBySlugParamSchema = z.object({ app_slug: z.coerce.string() })

router.get(
  "appsGetBySlug",
  "/apps/:appSlug",
  paramValidationFactory<t_AppsGetBySlugParamSchema>(appsGetBySlugParamSchema),
  async (
    ctx: ValidatedCtx<t_AppsGetBySlugParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsGetBySlug

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetBySlug
  }
)

router.get(
  "codesOfConductGetAllCodesOfConduct",
  "/codes_of_conduct",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-codesOfConductGetAllCodesOfConduct

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codesOfConductGetAllCodesOfConduct
  }
)

const codesOfConductGetConductCodeParamSchema = z.object({
  key: z.coerce.string(),
})

router.get(
  "codesOfConductGetConductCode",
  "/codes_of_conduct/:key",
  paramValidationFactory<t_CodesOfConductGetConductCodeParamSchema>(
    codesOfConductGetConductCodeParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodesOfConductGetConductCodeParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codesOfConductGetConductCode

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codesOfConductGetConductCode
  }
)

router.get(
  "emojisGet",
  "/emojis",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-emojisGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-emojisGet
  }
)

const enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParamSchema =
  z.object({ enterprise: z.coerce.string(), org_id: z.coerce.number() })

router.put(
  "enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise",
  "/enterprises/:enterprise/actions/permissions/organizations/:orgId",
  paramValidationFactory<t_EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParamSchema>(
    enterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_EnterpriseAdminEnableSelectedOrganizationGithubActionsEnterpriseParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise
  }
)

const enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParamSchema =
  z.object({ enterprise: z.coerce.string() })

const enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQuerySchema =
  z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
    visible_to_organization: z.coerce.string().optional(),
  })

router.get(
  "enterpriseAdminListSelfHostedRunnerGroupsForEnterprise",
  "/enterprises/:enterprise/actions/runner-groups",
  paramValidationFactory<t_EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParamSchema>(
    enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParamSchema
  ),
  queryValidationFactory<t_EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQuerySchema>(
    enterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseParamSchema,
      t_EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-enterpriseAdminListSelfHostedRunnerGroupsForEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-enterpriseAdminListSelfHostedRunnerGroupsForEnterprise
  }
)

const enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParamSchema =
  z.object({ enterprise: z.coerce.string() })

const enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBodySchema =
  z.object({
    name: z.coerce.string(),
    visibility: z.coerce.string().optional(),
    selected_organization_ids: z.array(z.coerce.number().optional()).optional(),
    runners: z.array(z.coerce.number().optional()).optional(),
    allows_public_repositories: z.coerce.boolean().optional(),
    restricted_to_workflows: z.coerce.boolean().optional(),
    selected_workflows: z.array(z.coerce.string().optional()).optional(),
  })

router.post(
  "enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise",
  "/enterprises/:enterprise/actions/runner-groups",
  paramValidationFactory<t_EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParamSchema>(
    enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParamSchema
  ),
  bodyValidationFactory<t_EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBodySchema>(
    enterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseParamSchema,
      void,
      t_EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise
  }
)

const enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParamSchema =
  z.object({
    enterprise: z.coerce.string(),
    runner_group_id: z.coerce.number(),
  })

router.get(
  "enterpriseAdminGetSelfHostedRunnerGroupForEnterprise",
  "/enterprises/:enterprise/actions/runner-groups/:runnerGroupId",
  paramValidationFactory<t_EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParamSchema>(
    enterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_EnterpriseAdminGetSelfHostedRunnerGroupForEnterpriseParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-enterpriseAdminGetSelfHostedRunnerGroupForEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-enterpriseAdminGetSelfHostedRunnerGroupForEnterprise
  }
)

const enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParamSchema =
  z.object({
    enterprise: z.coerce.string(),
    runner_group_id: z.coerce.number(),
    org_id: z.coerce.number(),
  })

router.put(
  "enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise",
  "/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/organizations/:orgId",
  paramValidationFactory<t_EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParamSchema>(
    enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_EnterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterpriseParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise
  }
)

const enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParamSchema =
  z.object({
    enterprise: z.coerce.string(),
    runner_group_id: z.coerce.number(),
    runner_id: z.coerce.number(),
  })

router.delete(
  "enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise",
  "/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/runners/:runnerId",
  paramValidationFactory<t_EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParamSchema>(
    enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_EnterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterpriseParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise
  }
)

const enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParamSchema = z.object(
  { enterprise: z.coerce.string(), runner_id: z.coerce.number() }
)

router.delete(
  "enterpriseAdminDeleteSelfHostedRunnerFromEnterprise",
  "/enterprises/:enterprise/actions/runners/:runnerId",
  paramValidationFactory<t_EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParamSchema>(
    enterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_EnterpriseAdminDeleteSelfHostedRunnerFromEnterpriseParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-enterpriseAdminDeleteSelfHostedRunnerFromEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-enterpriseAdminDeleteSelfHostedRunnerFromEnterprise
  }
)

const enterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseParamSchema =
  z.object({ enterprise: z.coerce.string(), runner_id: z.coerce.number() })

router.get(
  "enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise",
  "/enterprises/:enterprise/actions/runners/:runnerId/labels",
  paramValidationFactory<t_EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseParamSchema>(
    enterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-enterpriseAdminListLabelsForSelfHostedRunnerForEnterprise
  }
)

const enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseParamSchema =
  z.object({ enterprise: z.coerce.string(), runner_id: z.coerce.number() })

const enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseBodySchema =
  z.object({ labels: z.array(z.coerce.string().optional()) })

router.post(
  "enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise",
  "/enterprises/:enterprise/actions/runners/:runnerId/labels",
  paramValidationFactory<t_EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseParamSchema>(
    enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseParamSchema
  ),
  bodyValidationFactory<t_EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseBodySchema>(
    enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseParamSchema,
      void,
      t_EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-enterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterprise
  }
)

const secretScanningGetSecurityAnalysisSettingsForEnterpriseParamSchema =
  z.object({ enterprise: z.coerce.string() })

router.get(
  "secretScanningGetSecurityAnalysisSettingsForEnterprise",
  "/enterprises/:enterprise/code_security_and_analysis",
  paramValidationFactory<t_SecretScanningGetSecurityAnalysisSettingsForEnterpriseParamSchema>(
    secretScanningGetSecurityAnalysisSettingsForEnterpriseParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_SecretScanningGetSecurityAnalysisSettingsForEnterpriseParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-secretScanningGetSecurityAnalysisSettingsForEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-secretScanningGetSecurityAnalysisSettingsForEnterprise
  }
)

const secretScanningPatchSecurityAnalysisSettingsForEnterpriseParamSchema =
  z.object({ enterprise: z.coerce.string() })

const secretScanningPatchSecurityAnalysisSettingsForEnterpriseBodySchema = z
  .object({
    advanced_security_enabled_for_new_repositories: z.coerce
      .boolean()
      .optional(),
    secret_scanning_enabled_for_new_repositories: z.coerce.boolean().optional(),
    secret_scanning_push_protection_enabled_for_new_repositories: z.coerce
      .boolean()
      .optional(),
    secret_scanning_push_protection_custom_link: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "secretScanningPatchSecurityAnalysisSettingsForEnterprise",
  "/enterprises/:enterprise/code_security_and_analysis",
  paramValidationFactory<t_SecretScanningPatchSecurityAnalysisSettingsForEnterpriseParamSchema>(
    secretScanningPatchSecurityAnalysisSettingsForEnterpriseParamSchema
  ),
  bodyValidationFactory<t_SecretScanningPatchSecurityAnalysisSettingsForEnterpriseBodySchema>(
    secretScanningPatchSecurityAnalysisSettingsForEnterpriseBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_SecretScanningPatchSecurityAnalysisSettingsForEnterpriseParamSchema,
      void,
      t_SecretScanningPatchSecurityAnalysisSettingsForEnterpriseBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-secretScanningPatchSecurityAnalysisSettingsForEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-secretScanningPatchSecurityAnalysisSettingsForEnterprise
  }
)

const dependabotListAlertsForEnterpriseParamSchema = z.object({
  enterprise: z.coerce.string(),
})

const dependabotListAlertsForEnterpriseQuerySchema = z.object({
  state: z.coerce.string().optional(),
  severity: z.coerce.string().optional(),
  ecosystem: z.coerce.string().optional(),
  package: z.coerce.string().optional(),
  scope: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  before: z.coerce.string().optional(),
  after: z.coerce.string().optional(),
  first: z.coerce.number().optional(),
  last: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "dependabotListAlertsForEnterprise",
  "/enterprises/:enterprise/dependabot/alerts",
  paramValidationFactory<t_DependabotListAlertsForEnterpriseParamSchema>(
    dependabotListAlertsForEnterpriseParamSchema
  ),
  queryValidationFactory<t_DependabotListAlertsForEnterpriseQuerySchema>(
    dependabotListAlertsForEnterpriseQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotListAlertsForEnterpriseParamSchema,
      t_DependabotListAlertsForEnterpriseQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotListAlertsForEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotListAlertsForEnterprise
  }
)

const secretScanningListAlertsForEnterpriseParamSchema = z.object({
  enterprise: z.coerce.string(),
})

const secretScanningListAlertsForEnterpriseQuerySchema = z.object({
  state: z.coerce.string().optional(),
  secret_type: z.coerce.string().optional(),
  resolution: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  before: z.coerce.string().optional(),
  after: z.coerce.string().optional(),
})

router.get(
  "secretScanningListAlertsForEnterprise",
  "/enterprises/:enterprise/secret-scanning/alerts",
  paramValidationFactory<t_SecretScanningListAlertsForEnterpriseParamSchema>(
    secretScanningListAlertsForEnterpriseParamSchema
  ),
  queryValidationFactory<t_SecretScanningListAlertsForEnterpriseQuerySchema>(
    secretScanningListAlertsForEnterpriseQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_SecretScanningListAlertsForEnterpriseParamSchema,
      t_SecretScanningListAlertsForEnterpriseQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-secretScanningListAlertsForEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-secretScanningListAlertsForEnterprise
  }
)

const secretScanningPostSecurityProductEnablementForEnterpriseParamSchema =
  z.object({
    enterprise: z.coerce.string(),
    security_product: z.coerce.string(),
    enablement: z.coerce.string(),
  })

router.post(
  "secretScanningPostSecurityProductEnablementForEnterprise",
  "/enterprises/:enterprise/:securityProduct/:enablement",
  paramValidationFactory<t_SecretScanningPostSecurityProductEnablementForEnterpriseParamSchema>(
    secretScanningPostSecurityProductEnablementForEnterpriseParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_SecretScanningPostSecurityProductEnablementForEnterpriseParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-secretScanningPostSecurityProductEnablementForEnterprise

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-secretScanningPostSecurityProductEnablementForEnterprise
  }
)

const activityListPublicEventsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListPublicEvents",
  "/events",
  queryValidationFactory<t_ActivityListPublicEventsQuerySchema>(
    activityListPublicEventsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_ActivityListPublicEventsQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-activityListPublicEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicEvents
  }
)

router.get(
  "activityGetFeeds",
  "/feeds",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-activityGetFeeds

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityGetFeeds
  }
)

const gistsListQuerySchema = z.object({
  since: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "gistsList",
  "/gists",
  queryValidationFactory<t_GistsListQuerySchema>(gistsListQuerySchema),
  async (ctx: ValidatedCtx<void, t_GistsListQuerySchema, void>, next: Next) => {
    //region safe-edit-region-gistsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsList
  }
)

const gistsCreateBodySchema = z.object({
  description: z.coerce.string().optional(),
  files: z.object({}),
  public: z.object({}).optional(),
})

router.post(
  "gistsCreate",
  "/gists",
  bodyValidationFactory<t_GistsCreateBodySchema>(gistsCreateBodySchema),
  async (
    ctx: ValidatedCtx<void, void, t_GistsCreateBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-gistsCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsCreate
  }
)

const gistsListPublicQuerySchema = z.object({
  since: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "gistsListPublic",
  "/gists/public",
  queryValidationFactory<t_GistsListPublicQuerySchema>(
    gistsListPublicQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_GistsListPublicQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-gistsListPublic

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListPublic
  }
)

const gistsListStarredQuerySchema = z.object({
  since: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "gistsListStarred",
  "/gists/starred",
  queryValidationFactory<t_GistsListStarredQuerySchema>(
    gistsListStarredQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_GistsListStarredQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-gistsListStarred

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListStarred
  }
)

const gistsGetParamSchema = z.object({ gist_id: z.coerce.string() })

router.get(
  "gistsGet",
  "/gists/:gistId",
  paramValidationFactory<t_GistsGetParamSchema>(gistsGetParamSchema),
  async (ctx: ValidatedCtx<t_GistsGetParamSchema, void, void>, next: Next) => {
    //region safe-edit-region-gistsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsGet
  }
)

const gistsUpdateParamSchema = z.object({ gist_id: z.coerce.string() })

const gistsUpdateBodySchema = z.object({
  description: z.coerce.string().optional(),
  files: z.object({}).optional(),
})

router.patch(
  "gistsUpdate",
  "/gists/:gistId",
  paramValidationFactory<t_GistsUpdateParamSchema>(gistsUpdateParamSchema),
  bodyValidationFactory<t_GistsUpdateBodySchema>(gistsUpdateBodySchema),
  async (
    ctx: ValidatedCtx<t_GistsUpdateParamSchema, void, t_GistsUpdateBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-gistsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsUpdate
  }
)

const gistsDeleteParamSchema = z.object({ gist_id: z.coerce.string() })

router.delete(
  "gistsDelete",
  "/gists/:gistId",
  paramValidationFactory<t_GistsDeleteParamSchema>(gistsDeleteParamSchema),
  async (
    ctx: ValidatedCtx<t_GistsDeleteParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-gistsDelete

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsDelete
  }
)

const gistsListCommentsParamSchema = z.object({ gist_id: z.coerce.string() })

const gistsListCommentsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "gistsListComments",
  "/gists/:gistId/comments",
  paramValidationFactory<t_GistsListCommentsParamSchema>(
    gistsListCommentsParamSchema
  ),
  queryValidationFactory<t_GistsListCommentsQuerySchema>(
    gistsListCommentsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_GistsListCommentsParamSchema,
      t_GistsListCommentsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-gistsListComments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListComments
  }
)

const gistsCreateCommentParamSchema = z.object({ gist_id: z.coerce.string() })

const gistsCreateCommentBodySchema = z.object({ body: z.coerce.string() })

router.post(
  "gistsCreateComment",
  "/gists/:gistId/comments",
  paramValidationFactory<t_GistsCreateCommentParamSchema>(
    gistsCreateCommentParamSchema
  ),
  bodyValidationFactory<t_GistsCreateCommentBodySchema>(
    gistsCreateCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_GistsCreateCommentParamSchema,
      void,
      t_GistsCreateCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-gistsCreateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsCreateComment
  }
)

const gistsGetCommentParamSchema = z.object({
  gist_id: z.coerce.string(),
  comment_id: z.coerce.number(),
})

router.get(
  "gistsGetComment",
  "/gists/:gistId/comments/:commentId",
  paramValidationFactory<t_GistsGetCommentParamSchema>(
    gistsGetCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_GistsGetCommentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-gistsGetComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsGetComment
  }
)

const gistsUpdateCommentParamSchema = z.object({
  gist_id: z.coerce.string(),
  comment_id: z.coerce.number(),
})

const gistsUpdateCommentBodySchema = z.object({ body: z.coerce.string() })

router.patch(
  "gistsUpdateComment",
  "/gists/:gistId/comments/:commentId",
  paramValidationFactory<t_GistsUpdateCommentParamSchema>(
    gistsUpdateCommentParamSchema
  ),
  bodyValidationFactory<t_GistsUpdateCommentBodySchema>(
    gistsUpdateCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_GistsUpdateCommentParamSchema,
      void,
      t_GistsUpdateCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-gistsUpdateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsUpdateComment
  }
)

const gistsDeleteCommentParamSchema = z.object({
  gist_id: z.coerce.string(),
  comment_id: z.coerce.number(),
})

router.delete(
  "gistsDeleteComment",
  "/gists/:gistId/comments/:commentId",
  paramValidationFactory<t_GistsDeleteCommentParamSchema>(
    gistsDeleteCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_GistsDeleteCommentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-gistsDeleteComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsDeleteComment
  }
)

const gistsListCommitsParamSchema = z.object({ gist_id: z.coerce.string() })

const gistsListCommitsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "gistsListCommits",
  "/gists/:gistId/commits",
  paramValidationFactory<t_GistsListCommitsParamSchema>(
    gistsListCommitsParamSchema
  ),
  queryValidationFactory<t_GistsListCommitsQuerySchema>(
    gistsListCommitsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_GistsListCommitsParamSchema,
      t_GistsListCommitsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-gistsListCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListCommits
  }
)

const gistsListForksParamSchema = z.object({ gist_id: z.coerce.string() })

const gistsListForksQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "gistsListForks",
  "/gists/:gistId/forks",
  paramValidationFactory<t_GistsListForksParamSchema>(
    gistsListForksParamSchema
  ),
  queryValidationFactory<t_GistsListForksQuerySchema>(
    gistsListForksQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_GistsListForksParamSchema,
      t_GistsListForksQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-gistsListForks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListForks
  }
)

const gistsForkParamSchema = z.object({ gist_id: z.coerce.string() })

router.post(
  "gistsFork",
  "/gists/:gistId/forks",
  paramValidationFactory<t_GistsForkParamSchema>(gistsForkParamSchema),
  async (ctx: ValidatedCtx<t_GistsForkParamSchema, void, void>, next: Next) => {
    //region safe-edit-region-gistsFork

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsFork
  }
)

const gistsCheckIsStarredParamSchema = z.object({ gist_id: z.coerce.string() })

router.get(
  "gistsCheckIsStarred",
  "/gists/:gistId/star",
  paramValidationFactory<t_GistsCheckIsStarredParamSchema>(
    gistsCheckIsStarredParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_GistsCheckIsStarredParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-gistsCheckIsStarred

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsCheckIsStarred
  }
)

const gistsStarParamSchema = z.object({ gist_id: z.coerce.string() })

router.put(
  "gistsStar",
  "/gists/:gistId/star",
  paramValidationFactory<t_GistsStarParamSchema>(gistsStarParamSchema),
  async (ctx: ValidatedCtx<t_GistsStarParamSchema, void, void>, next: Next) => {
    //region safe-edit-region-gistsStar

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsStar
  }
)

const gistsUnstarParamSchema = z.object({ gist_id: z.coerce.string() })

router.delete(
  "gistsUnstar",
  "/gists/:gistId/star",
  paramValidationFactory<t_GistsUnstarParamSchema>(gistsUnstarParamSchema),
  async (
    ctx: ValidatedCtx<t_GistsUnstarParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-gistsUnstar

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsUnstar
  }
)

const gistsGetRevisionParamSchema = z.object({
  gist_id: z.coerce.string(),
  sha: z.coerce.string(),
})

router.get(
  "gistsGetRevision",
  "/gists/:gistId/:sha",
  paramValidationFactory<t_GistsGetRevisionParamSchema>(
    gistsGetRevisionParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_GistsGetRevisionParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-gistsGetRevision

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsGetRevision
  }
)

router.get(
  "gitignoreGetAllTemplates",
  "/gitignore/templates",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-gitignoreGetAllTemplates

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitignoreGetAllTemplates
  }
)

const gitignoreGetTemplateParamSchema = z.object({ name: z.coerce.string() })

router.get(
  "gitignoreGetTemplate",
  "/gitignore/templates/:name",
  paramValidationFactory<t_GitignoreGetTemplateParamSchema>(
    gitignoreGetTemplateParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_GitignoreGetTemplateParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-gitignoreGetTemplate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitignoreGetTemplate
  }
)

const appsListReposAccessibleToInstallationQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "appsListReposAccessibleToInstallation",
  "/installation/repositories",
  queryValidationFactory<t_AppsListReposAccessibleToInstallationQuerySchema>(
    appsListReposAccessibleToInstallationQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_AppsListReposAccessibleToInstallationQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsListReposAccessibleToInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListReposAccessibleToInstallation
  }
)

router.delete(
  "appsRevokeInstallationAccessToken",
  "/installation/token",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-appsRevokeInstallationAccessToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsRevokeInstallationAccessToken
  }
)

const issuesListQuerySchema = z.object({
  filter: z.coerce.string().optional(),
  state: z.coerce.string().optional(),
  labels: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  since: z.coerce.string().optional(),
  collab: z.coerce.boolean().optional(),
  orgs: z.coerce.boolean().optional(),
  owned: z.coerce.boolean().optional(),
  pulls: z.coerce.boolean().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesList",
  "/issues",
  queryValidationFactory<t_IssuesListQuerySchema>(issuesListQuerySchema),
  async (
    ctx: ValidatedCtx<void, t_IssuesListQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesList
  }
)

const licensesGetAllCommonlyUsedQuerySchema = z.object({
  featured: z.coerce.boolean().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "licensesGetAllCommonlyUsed",
  "/licenses",
  queryValidationFactory<t_LicensesGetAllCommonlyUsedQuerySchema>(
    licensesGetAllCommonlyUsedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_LicensesGetAllCommonlyUsedQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-licensesGetAllCommonlyUsed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-licensesGetAllCommonlyUsed
  }
)

const licensesGetParamSchema = z.object({ license: z.coerce.string() })

router.get(
  "licensesGet",
  "/licenses/:license",
  paramValidationFactory<t_LicensesGetParamSchema>(licensesGetParamSchema),
  async (
    ctx: ValidatedCtx<t_LicensesGetParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-licensesGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-licensesGet
  }
)

const markdownRenderBodySchema = z.object({
  text: z.coerce.string(),
  mode: z.coerce.string().optional(),
  context: z.coerce.string().optional(),
})

router.post(
  "markdownRender",
  "/markdown",
  bodyValidationFactory<t_MarkdownRenderBodySchema>(markdownRenderBodySchema),
  async (
    ctx: ValidatedCtx<void, void, t_MarkdownRenderBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-markdownRender

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-markdownRender
  }
)

const markdownRenderRawBodySchema = z.coerce.string().optional()

router.post(
  "markdownRenderRaw",
  "/markdown/raw",
  bodyValidationFactory<t_MarkdownRenderRawBodySchema>(
    markdownRenderRawBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, t_MarkdownRenderRawBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-markdownRenderRaw

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-markdownRenderRaw
  }
)

const appsGetSubscriptionPlanForAccountParamSchema = z.object({
  account_id: z.coerce.number(),
})

router.get(
  "appsGetSubscriptionPlanForAccount",
  "/marketplace_listing/accounts/:accountId",
  paramValidationFactory<t_AppsGetSubscriptionPlanForAccountParamSchema>(
    appsGetSubscriptionPlanForAccountParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_AppsGetSubscriptionPlanForAccountParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsGetSubscriptionPlanForAccount

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetSubscriptionPlanForAccount
  }
)

const appsListPlansQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "appsListPlans",
  "/marketplace_listing/plans",
  queryValidationFactory<t_AppsListPlansQuerySchema>(appsListPlansQuerySchema),
  async (
    ctx: ValidatedCtx<void, t_AppsListPlansQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsListPlans

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListPlans
  }
)

const appsListAccountsForPlanParamSchema = z.object({
  plan_id: z.coerce.number(),
})

const appsListAccountsForPlanQuerySchema = z.object({
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "appsListAccountsForPlan",
  "/marketplace_listing/plans/:planId/accounts",
  paramValidationFactory<t_AppsListAccountsForPlanParamSchema>(
    appsListAccountsForPlanParamSchema
  ),
  queryValidationFactory<t_AppsListAccountsForPlanQuerySchema>(
    appsListAccountsForPlanQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_AppsListAccountsForPlanParamSchema,
      t_AppsListAccountsForPlanQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsListAccountsForPlan

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListAccountsForPlan
  }
)

const appsGetSubscriptionPlanForAccountStubbedParamSchema = z.object({
  account_id: z.coerce.number(),
})

router.get(
  "appsGetSubscriptionPlanForAccountStubbed",
  "/marketplace_listing/stubbed/accounts/:accountId",
  paramValidationFactory<t_AppsGetSubscriptionPlanForAccountStubbedParamSchema>(
    appsGetSubscriptionPlanForAccountStubbedParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_AppsGetSubscriptionPlanForAccountStubbedParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsGetSubscriptionPlanForAccountStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetSubscriptionPlanForAccountStubbed
  }
)

const appsListPlansStubbedQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "appsListPlansStubbed",
  "/marketplace_listing/stubbed/plans",
  queryValidationFactory<t_AppsListPlansStubbedQuerySchema>(
    appsListPlansStubbedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_AppsListPlansStubbedQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsListPlansStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListPlansStubbed
  }
)

const appsListAccountsForPlanStubbedParamSchema = z.object({
  plan_id: z.coerce.number(),
})

const appsListAccountsForPlanStubbedQuerySchema = z.object({
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "appsListAccountsForPlanStubbed",
  "/marketplace_listing/stubbed/plans/:planId/accounts",
  paramValidationFactory<t_AppsListAccountsForPlanStubbedParamSchema>(
    appsListAccountsForPlanStubbedParamSchema
  ),
  queryValidationFactory<t_AppsListAccountsForPlanStubbedQuerySchema>(
    appsListAccountsForPlanStubbedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_AppsListAccountsForPlanStubbedParamSchema,
      t_AppsListAccountsForPlanStubbedQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsListAccountsForPlanStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListAccountsForPlanStubbed
  }
)

router.get(
  "metaGet",
  "/meta",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-metaGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-metaGet
  }
)

const activityListPublicEventsForRepoNetworkParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const activityListPublicEventsForRepoNetworkQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListPublicEventsForRepoNetwork",
  "/networks/:owner/:repo/events",
  paramValidationFactory<t_ActivityListPublicEventsForRepoNetworkParamSchema>(
    activityListPublicEventsForRepoNetworkParamSchema
  ),
  queryValidationFactory<t_ActivityListPublicEventsForRepoNetworkQuerySchema>(
    activityListPublicEventsForRepoNetworkQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListPublicEventsForRepoNetworkParamSchema,
      t_ActivityListPublicEventsForRepoNetworkQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListPublicEventsForRepoNetwork

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicEventsForRepoNetwork
  }
)

const activityListNotificationsForAuthenticatedUserQuerySchema = z.object({
  all: z.coerce.boolean().optional(),
  participating: z.coerce.boolean().optional(),
  since: z.coerce.string().optional(),
  before: z.coerce.string().optional(),
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "activityListNotificationsForAuthenticatedUser",
  "/notifications",
  queryValidationFactory<t_ActivityListNotificationsForAuthenticatedUserQuerySchema>(
    activityListNotificationsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_ActivityListNotificationsForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListNotificationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListNotificationsForAuthenticatedUser
  }
)

const activityMarkNotificationsAsReadBodySchema = z
  .object({
    last_read_at: z.coerce.string().optional(),
    read: z.coerce.boolean().optional(),
  })
  .optional()

router.put(
  "activityMarkNotificationsAsRead",
  "/notifications",
  bodyValidationFactory<t_ActivityMarkNotificationsAsReadBodySchema>(
    activityMarkNotificationsAsReadBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, t_ActivityMarkNotificationsAsReadBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-activityMarkNotificationsAsRead

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityMarkNotificationsAsRead
  }
)

const activityGetThreadParamSchema = z.object({ thread_id: z.coerce.number() })

router.get(
  "activityGetThread",
  "/notifications/threads/:threadId",
  paramValidationFactory<t_ActivityGetThreadParamSchema>(
    activityGetThreadParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActivityGetThreadParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-activityGetThread

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityGetThread
  }
)

const activityMarkThreadAsReadParamSchema = z.object({
  thread_id: z.coerce.number(),
})

router.patch(
  "activityMarkThreadAsRead",
  "/notifications/threads/:threadId",
  paramValidationFactory<t_ActivityMarkThreadAsReadParamSchema>(
    activityMarkThreadAsReadParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActivityMarkThreadAsReadParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-activityMarkThreadAsRead

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityMarkThreadAsRead
  }
)

const activityGetThreadSubscriptionForAuthenticatedUserParamSchema = z.object({
  thread_id: z.coerce.number(),
})

router.get(
  "activityGetThreadSubscriptionForAuthenticatedUser",
  "/notifications/threads/:threadId/subscription",
  paramValidationFactory<t_ActivityGetThreadSubscriptionForAuthenticatedUserParamSchema>(
    activityGetThreadSubscriptionForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityGetThreadSubscriptionForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityGetThreadSubscriptionForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityGetThreadSubscriptionForAuthenticatedUser
  }
)

const activitySetThreadSubscriptionParamSchema = z.object({
  thread_id: z.coerce.number(),
})

const activitySetThreadSubscriptionBodySchema = z
  .object({ ignored: z.coerce.boolean().optional() })
  .optional()

router.put(
  "activitySetThreadSubscription",
  "/notifications/threads/:threadId/subscription",
  paramValidationFactory<t_ActivitySetThreadSubscriptionParamSchema>(
    activitySetThreadSubscriptionParamSchema
  ),
  bodyValidationFactory<t_ActivitySetThreadSubscriptionBodySchema>(
    activitySetThreadSubscriptionBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivitySetThreadSubscriptionParamSchema,
      void,
      t_ActivitySetThreadSubscriptionBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-activitySetThreadSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activitySetThreadSubscription
  }
)

const activityDeleteThreadSubscriptionParamSchema = z.object({
  thread_id: z.coerce.number(),
})

router.delete(
  "activityDeleteThreadSubscription",
  "/notifications/threads/:threadId/subscription",
  paramValidationFactory<t_ActivityDeleteThreadSubscriptionParamSchema>(
    activityDeleteThreadSubscriptionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityDeleteThreadSubscriptionParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityDeleteThreadSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityDeleteThreadSubscription
  }
)

const metaGetOctocatQuerySchema = z.object({ s: z.coerce.string().optional() })

router.get(
  "metaGetOctocat",
  "/octocat",
  queryValidationFactory<t_MetaGetOctocatQuerySchema>(
    metaGetOctocatQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_MetaGetOctocatQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-metaGetOctocat

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-metaGetOctocat
  }
)

const orgsListQuerySchema = z.object({
  since: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "orgsList",
  "/organizations",
  queryValidationFactory<t_OrgsListQuerySchema>(orgsListQuerySchema),
  async (ctx: ValidatedCtx<void, t_OrgsListQuerySchema, void>, next: Next) => {
    //region safe-edit-region-orgsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsList
  }
)

const orgsGetParamSchema = z.object({ org: z.coerce.string() })

router.get(
  "orgsGet",
  "/orgs/:org",
  paramValidationFactory<t_OrgsGetParamSchema>(orgsGetParamSchema),
  async (ctx: ValidatedCtx<t_OrgsGetParamSchema, void, void>, next: Next) => {
    //region safe-edit-region-orgsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGet
  }
)

const orgsUpdateParamSchema = z.object({ org: z.coerce.string() })

const orgsUpdateBodySchema = z
  .object({
    billing_email: z.coerce.string().optional(),
    company: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    twitter_username: z.coerce.string().optional(),
    location: z.coerce.string().optional(),
    name: z.coerce.string().optional(),
    description: z.coerce.string().optional(),
    has_organization_projects: z.coerce.boolean().optional(),
    has_repository_projects: z.coerce.boolean().optional(),
    default_repository_permission: z.coerce.string().optional(),
    members_can_create_repositories: z.coerce.boolean().optional(),
    members_can_create_internal_repositories: z.coerce.boolean().optional(),
    members_can_create_private_repositories: z.coerce.boolean().optional(),
    members_can_create_public_repositories: z.coerce.boolean().optional(),
    members_allowed_repository_creation_type: z.coerce.string().optional(),
    members_can_create_pages: z.coerce.boolean().optional(),
    members_can_create_public_pages: z.coerce.boolean().optional(),
    members_can_create_private_pages: z.coerce.boolean().optional(),
    members_can_fork_private_repositories: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
    blog: z.coerce.string().optional(),
    advanced_security_enabled_for_new_repositories: z.coerce
      .boolean()
      .optional(),
    dependabot_alerts_enabled_for_new_repositories: z.coerce
      .boolean()
      .optional(),
    dependabot_security_updates_enabled_for_new_repositories: z.coerce
      .boolean()
      .optional(),
    dependency_graph_enabled_for_new_repositories: z.coerce
      .boolean()
      .optional(),
    secret_scanning_enabled_for_new_repositories: z.coerce.boolean().optional(),
    secret_scanning_push_protection_enabled_for_new_repositories: z.coerce
      .boolean()
      .optional(),
    secret_scanning_push_protection_custom_link_enabled: z.coerce
      .boolean()
      .optional(),
    secret_scanning_push_protection_custom_link: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "orgsUpdate",
  "/orgs/:org",
  paramValidationFactory<t_OrgsUpdateParamSchema>(orgsUpdateParamSchema),
  bodyValidationFactory<t_OrgsUpdateBodySchema>(orgsUpdateBodySchema),
  async (
    ctx: ValidatedCtx<t_OrgsUpdateParamSchema, void, t_OrgsUpdateBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-orgsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUpdate
  }
)

const actionsGetActionsCacheUsageForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "actionsGetActionsCacheUsageForOrg",
  "/orgs/:org/actions/cache/usage",
  paramValidationFactory<t_ActionsGetActionsCacheUsageForOrgParamSchema>(
    actionsGetActionsCacheUsageForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetActionsCacheUsageForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetActionsCacheUsageForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetActionsCacheUsageForOrg
  }
)

const actionsGetActionsCacheUsageByRepoForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

const actionsGetActionsCacheUsageByRepoForOrgQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsGetActionsCacheUsageByRepoForOrg",
  "/orgs/:org/actions/cache/usage-by-repository",
  paramValidationFactory<t_ActionsGetActionsCacheUsageByRepoForOrgParamSchema>(
    actionsGetActionsCacheUsageByRepoForOrgParamSchema
  ),
  queryValidationFactory<t_ActionsGetActionsCacheUsageByRepoForOrgQuerySchema>(
    actionsGetActionsCacheUsageByRepoForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetActionsCacheUsageByRepoForOrgParamSchema,
      t_ActionsGetActionsCacheUsageByRepoForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetActionsCacheUsageByRepoForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetActionsCacheUsageByRepoForOrg
  }
)

const oidcGetOidcCustomSubTemplateForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "oidcGetOidcCustomSubTemplateForOrg",
  "/orgs/:org/actions/oidc/customization/sub",
  paramValidationFactory<t_OidcGetOidcCustomSubTemplateForOrgParamSchema>(
    oidcGetOidcCustomSubTemplateForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OidcGetOidcCustomSubTemplateForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-oidcGetOidcCustomSubTemplateForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oidcGetOidcCustomSubTemplateForOrg
  }
)

const oidcUpdateOidcCustomSubTemplateForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

const oidcUpdateOidcCustomSubTemplateForOrgBodySchema = z.object({
  include_claim_keys: z.array(z.coerce.string().optional()),
})

router.put(
  "oidcUpdateOidcCustomSubTemplateForOrg",
  "/orgs/:org/actions/oidc/customization/sub",
  paramValidationFactory<t_OidcUpdateOidcCustomSubTemplateForOrgParamSchema>(
    oidcUpdateOidcCustomSubTemplateForOrgParamSchema
  ),
  bodyValidationFactory<t_OidcUpdateOidcCustomSubTemplateForOrgBodySchema>(
    oidcUpdateOidcCustomSubTemplateForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OidcUpdateOidcCustomSubTemplateForOrgParamSchema,
      void,
      t_OidcUpdateOidcCustomSubTemplateForOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-oidcUpdateOidcCustomSubTemplateForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oidcUpdateOidcCustomSubTemplateForOrg
  }
)

const actionsGetGithubActionsPermissionsOrganizationParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "actionsGetGithubActionsPermissionsOrganization",
  "/orgs/:org/actions/permissions",
  paramValidationFactory<t_ActionsGetGithubActionsPermissionsOrganizationParamSchema>(
    actionsGetGithubActionsPermissionsOrganizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetGithubActionsPermissionsOrganizationParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetGithubActionsPermissionsOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetGithubActionsPermissionsOrganization
  }
)

const actionsSetGithubActionsPermissionsOrganizationParamSchema = z.object({
  org: z.coerce.string(),
})

const actionsSetGithubActionsPermissionsOrganizationBodySchema = z.object({
  enabled_repositories: z.coerce.string(),
  allowed_actions: z.coerce.string().optional(),
})

router.put(
  "actionsSetGithubActionsPermissionsOrganization",
  "/orgs/:org/actions/permissions",
  paramValidationFactory<t_ActionsSetGithubActionsPermissionsOrganizationParamSchema>(
    actionsSetGithubActionsPermissionsOrganizationParamSchema
  ),
  bodyValidationFactory<t_ActionsSetGithubActionsPermissionsOrganizationBodySchema>(
    actionsSetGithubActionsPermissionsOrganizationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetGithubActionsPermissionsOrganizationParamSchema,
      void,
      t_ActionsSetGithubActionsPermissionsOrganizationBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetGithubActionsPermissionsOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetGithubActionsPermissionsOrganization
  }
)

const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema =
  z.object({ org: z.coerce.string() })

const actionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema =
  z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

router.get(
  "actionsListSelectedRepositoriesEnabledGithubActionsOrganization",
  "/orgs/:org/actions/permissions/repositories",
  paramValidationFactory<t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema>(
    actionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema
  ),
  queryValidationFactory<t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema>(
    actionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
      t_ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListSelectedRepositoriesEnabledGithubActionsOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelectedRepositoriesEnabledGithubActionsOrganization
  }
)

const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema =
  z.object({ org: z.coerce.string() })

const actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema =
  z.object({ selected_repository_ids: z.array(z.coerce.number().optional()) })

router.put(
  "actionsSetSelectedRepositoriesEnabledGithubActionsOrganization",
  "/orgs/:org/actions/permissions/repositories",
  paramValidationFactory<t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema>(
    actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema
  ),
  bodyValidationFactory<t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema>(
    actionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationParamSchema,
      void,
      t_ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetSelectedRepositoriesEnabledGithubActionsOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetSelectedRepositoriesEnabledGithubActionsOrganization
  }
)

const actionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema =
  z.object({ org: z.coerce.string(), repository_id: z.coerce.number() })

router.put(
  "actionsEnableSelectedRepositoryGithubActionsOrganization",
  "/orgs/:org/actions/permissions/repositories/:repositoryId",
  paramValidationFactory<t_ActionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema>(
    actionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsEnableSelectedRepositoryGithubActionsOrganizationParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsEnableSelectedRepositoryGithubActionsOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsEnableSelectedRepositoryGithubActionsOrganization
  }
)

const actionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema =
  z.object({ org: z.coerce.string(), repository_id: z.coerce.number() })

router.delete(
  "actionsDisableSelectedRepositoryGithubActionsOrganization",
  "/orgs/:org/actions/permissions/repositories/:repositoryId",
  paramValidationFactory<t_ActionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema>(
    actionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsDisableSelectedRepositoryGithubActionsOrganizationParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsDisableSelectedRepositoryGithubActionsOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDisableSelectedRepositoryGithubActionsOrganization
  }
)

const actionsGetAllowedActionsOrganizationParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "actionsGetAllowedActionsOrganization",
  "/orgs/:org/actions/permissions/selected-actions",
  paramValidationFactory<t_ActionsGetAllowedActionsOrganizationParamSchema>(
    actionsGetAllowedActionsOrganizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetAllowedActionsOrganizationParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetAllowedActionsOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetAllowedActionsOrganization
  }
)

const actionsSetAllowedActionsOrganizationParamSchema = z.object({
  org: z.coerce.string(),
})

const actionsSetAllowedActionsOrganizationBodySchema = z
  .object({
    github_owned_allowed: z.coerce.boolean().optional(),
    verified_allowed: z.coerce.boolean().optional(),
    patterns_allowed: z.array(z.coerce.string().optional()).optional(),
  })
  .optional()

router.put(
  "actionsSetAllowedActionsOrganization",
  "/orgs/:org/actions/permissions/selected-actions",
  paramValidationFactory<t_ActionsSetAllowedActionsOrganizationParamSchema>(
    actionsSetAllowedActionsOrganizationParamSchema
  ),
  bodyValidationFactory<t_ActionsSetAllowedActionsOrganizationBodySchema>(
    actionsSetAllowedActionsOrganizationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetAllowedActionsOrganizationParamSchema,
      void,
      t_ActionsSetAllowedActionsOrganizationBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetAllowedActionsOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetAllowedActionsOrganization
  }
)

const actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema =
  z.object({ org: z.coerce.string() })

router.get(
  "actionsGetGithubActionsDefaultWorkflowPermissionsOrganization",
  "/orgs/:org/actions/permissions/workflow",
  paramValidationFactory<t_ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema>(
    actionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetGithubActionsDefaultWorkflowPermissionsOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetGithubActionsDefaultWorkflowPermissionsOrganization
  }
)

const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema =
  z.object({ org: z.coerce.string() })

const actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema =
  z
    .object({
      default_workflow_permissions: z.coerce.string().optional(),
      can_approve_pull_request_reviews: z.coerce.boolean().optional(),
    })
    .optional()

router.put(
  "actionsSetGithubActionsDefaultWorkflowPermissionsOrganization",
  "/orgs/:org/actions/permissions/workflow",
  paramValidationFactory<t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema>(
    actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema
  ),
  bodyValidationFactory<t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema>(
    actionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationParamSchema,
      void,
      t_ActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetGithubActionsDefaultWorkflowPermissionsOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetGithubActionsDefaultWorkflowPermissionsOrganization
  }
)

const actionsListRequiredWorkflowsParamSchema = z.object({
  org: z.coerce.string(),
})

const actionsListRequiredWorkflowsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListRequiredWorkflows",
  "/orgs/:org/actions/required_workflows",
  paramValidationFactory<t_ActionsListRequiredWorkflowsParamSchema>(
    actionsListRequiredWorkflowsParamSchema
  ),
  queryValidationFactory<t_ActionsListRequiredWorkflowsQuerySchema>(
    actionsListRequiredWorkflowsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListRequiredWorkflowsParamSchema,
      t_ActionsListRequiredWorkflowsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListRequiredWorkflows

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRequiredWorkflows
  }
)

const actionsCreateRequiredWorkflowParamSchema = z.object({
  org: z.coerce.string(),
})

const actionsCreateRequiredWorkflowBodySchema = z.object({
  workflow_file_path: z.coerce.string(),
  repository_id: z.coerce.string(),
  scope: z.coerce.string().optional(),
  selected_repository_ids: z.array(z.coerce.number().optional()).optional(),
})

router.post(
  "actionsCreateRequiredWorkflow",
  "/orgs/:org/actions/required_workflows",
  paramValidationFactory<t_ActionsCreateRequiredWorkflowParamSchema>(
    actionsCreateRequiredWorkflowParamSchema
  ),
  bodyValidationFactory<t_ActionsCreateRequiredWorkflowBodySchema>(
    actionsCreateRequiredWorkflowBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsCreateRequiredWorkflowParamSchema,
      void,
      t_ActionsCreateRequiredWorkflowBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateRequiredWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRequiredWorkflow
  }
)

const actionsGetRequiredWorkflowParamSchema = z.object({
  org: z.coerce.string(),
  required_workflow_id: z.coerce.number(),
})

router.get(
  "actionsGetRequiredWorkflow",
  "/orgs/:org/actions/required_workflows/:requiredWorkflowId",
  paramValidationFactory<t_ActionsGetRequiredWorkflowParamSchema>(
    actionsGetRequiredWorkflowParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetRequiredWorkflowParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetRequiredWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetRequiredWorkflow
  }
)

const actionsUpdateRequiredWorkflowParamSchema = z.object({
  org: z.coerce.string(),
  required_workflow_id: z.coerce.number(),
})

const actionsUpdateRequiredWorkflowBodySchema = z.object({
  workflow_file_path: z.coerce.string().optional(),
  repository_id: z.coerce.string().optional(),
  scope: z.coerce.string().optional(),
  selected_repository_ids: z.array(z.coerce.number().optional()).optional(),
})

router.patch(
  "actionsUpdateRequiredWorkflow",
  "/orgs/:org/actions/required_workflows/:requiredWorkflowId",
  paramValidationFactory<t_ActionsUpdateRequiredWorkflowParamSchema>(
    actionsUpdateRequiredWorkflowParamSchema
  ),
  bodyValidationFactory<t_ActionsUpdateRequiredWorkflowBodySchema>(
    actionsUpdateRequiredWorkflowBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsUpdateRequiredWorkflowParamSchema,
      void,
      t_ActionsUpdateRequiredWorkflowBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsUpdateRequiredWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsUpdateRequiredWorkflow
  }
)

const actionsDeleteRequiredWorkflowParamSchema = z.object({
  org: z.coerce.string(),
  required_workflow_id: z.coerce.number(),
})

router.delete(
  "actionsDeleteRequiredWorkflow",
  "/orgs/:org/actions/required_workflows/:requiredWorkflowId",
  paramValidationFactory<t_ActionsDeleteRequiredWorkflowParamSchema>(
    actionsDeleteRequiredWorkflowParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDeleteRequiredWorkflowParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteRequiredWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteRequiredWorkflow
  }
)

const actionsListSelectedRepositoriesRequiredWorkflowParamSchema = z.object({
  org: z.coerce.string(),
  required_workflow_id: z.coerce.number(),
})

router.get(
  "actionsListSelectedRepositoriesRequiredWorkflow",
  "/orgs/:org/actions/required_workflows/:requiredWorkflowId/repositories",
  paramValidationFactory<t_ActionsListSelectedRepositoriesRequiredWorkflowParamSchema>(
    actionsListSelectedRepositoriesRequiredWorkflowParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListSelectedRepositoriesRequiredWorkflowParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListSelectedRepositoriesRequiredWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelectedRepositoriesRequiredWorkflow
  }
)

const actionsSetSelectedReposToRequiredWorkflowParamSchema = z.object({
  org: z.coerce.string(),
  required_workflow_id: z.coerce.number(),
})

const actionsSetSelectedReposToRequiredWorkflowBodySchema = z.object({
  selected_repository_ids: z.array(z.coerce.number().optional()),
})

router.put(
  "actionsSetSelectedReposToRequiredWorkflow",
  "/orgs/:org/actions/required_workflows/:requiredWorkflowId/repositories",
  paramValidationFactory<t_ActionsSetSelectedReposToRequiredWorkflowParamSchema>(
    actionsSetSelectedReposToRequiredWorkflowParamSchema
  ),
  bodyValidationFactory<t_ActionsSetSelectedReposToRequiredWorkflowBodySchema>(
    actionsSetSelectedReposToRequiredWorkflowBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetSelectedReposToRequiredWorkflowParamSchema,
      void,
      t_ActionsSetSelectedReposToRequiredWorkflowBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetSelectedReposToRequiredWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetSelectedReposToRequiredWorkflow
  }
)

const actionsAddSelectedRepoToRequiredWorkflowParamSchema = z.object({
  org: z.coerce.string(),
  required_workflow_id: z.coerce.number(),
  repository_id: z.coerce.number(),
})

router.put(
  "actionsAddSelectedRepoToRequiredWorkflow",
  "/orgs/:org/actions/required_workflows/:requiredWorkflowId/repositories/:repositoryId",
  paramValidationFactory<t_ActionsAddSelectedRepoToRequiredWorkflowParamSchema>(
    actionsAddSelectedRepoToRequiredWorkflowParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsAddSelectedRepoToRequiredWorkflowParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsAddSelectedRepoToRequiredWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsAddSelectedRepoToRequiredWorkflow
  }
)

const actionsRemoveSelectedRepoFromRequiredWorkflowParamSchema = z.object({
  org: z.coerce.string(),
  required_workflow_id: z.coerce.number(),
  repository_id: z.coerce.number(),
})

router.delete(
  "actionsRemoveSelectedRepoFromRequiredWorkflow",
  "/orgs/:org/actions/required_workflows/:requiredWorkflowId/repositories/:repositoryId",
  paramValidationFactory<t_ActionsRemoveSelectedRepoFromRequiredWorkflowParamSchema>(
    actionsRemoveSelectedRepoFromRequiredWorkflowParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsRemoveSelectedRepoFromRequiredWorkflowParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsRemoveSelectedRepoFromRequiredWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsRemoveSelectedRepoFromRequiredWorkflow
  }
)

const actionsListSelfHostedRunnerGroupsForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

const actionsListSelfHostedRunnerGroupsForOrgQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  visible_to_repository: z.coerce.string().optional(),
})

router.get(
  "actionsListSelfHostedRunnerGroupsForOrg",
  "/orgs/:org/actions/runner-groups",
  paramValidationFactory<t_ActionsListSelfHostedRunnerGroupsForOrgParamSchema>(
    actionsListSelfHostedRunnerGroupsForOrgParamSchema
  ),
  queryValidationFactory<t_ActionsListSelfHostedRunnerGroupsForOrgQuerySchema>(
    actionsListSelfHostedRunnerGroupsForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListSelfHostedRunnerGroupsForOrgParamSchema,
      t_ActionsListSelfHostedRunnerGroupsForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListSelfHostedRunnerGroupsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelfHostedRunnerGroupsForOrg
  }
)

const actionsCreateSelfHostedRunnerGroupForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

const actionsCreateSelfHostedRunnerGroupForOrgBodySchema = z.object({
  name: z.coerce.string(),
  visibility: z.coerce.string().optional(),
  selected_repository_ids: z.array(z.coerce.number().optional()).optional(),
  runners: z.array(z.coerce.number().optional()).optional(),
  allows_public_repositories: z.coerce.boolean().optional(),
  restricted_to_workflows: z.coerce.boolean().optional(),
  selected_workflows: z.array(z.coerce.string().optional()).optional(),
})

router.post(
  "actionsCreateSelfHostedRunnerGroupForOrg",
  "/orgs/:org/actions/runner-groups",
  paramValidationFactory<t_ActionsCreateSelfHostedRunnerGroupForOrgParamSchema>(
    actionsCreateSelfHostedRunnerGroupForOrgParamSchema
  ),
  bodyValidationFactory<t_ActionsCreateSelfHostedRunnerGroupForOrgBodySchema>(
    actionsCreateSelfHostedRunnerGroupForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsCreateSelfHostedRunnerGroupForOrgParamSchema,
      void,
      t_ActionsCreateSelfHostedRunnerGroupForOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateSelfHostedRunnerGroupForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateSelfHostedRunnerGroupForOrg
  }
)

const actionsGetSelfHostedRunnerGroupForOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_group_id: z.coerce.number(),
})

router.get(
  "actionsGetSelfHostedRunnerGroupForOrg",
  "/orgs/:org/actions/runner-groups/:runnerGroupId",
  paramValidationFactory<t_ActionsGetSelfHostedRunnerGroupForOrgParamSchema>(
    actionsGetSelfHostedRunnerGroupForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetSelfHostedRunnerGroupForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetSelfHostedRunnerGroupForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetSelfHostedRunnerGroupForOrg
  }
)

const actionsUpdateSelfHostedRunnerGroupForOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_group_id: z.coerce.number(),
})

const actionsUpdateSelfHostedRunnerGroupForOrgBodySchema = z.object({
  name: z.coerce.string(),
  visibility: z.coerce.string().optional(),
  allows_public_repositories: z.coerce.boolean().optional(),
  restricted_to_workflows: z.coerce.boolean().optional(),
  selected_workflows: z.array(z.coerce.string().optional()).optional(),
})

router.patch(
  "actionsUpdateSelfHostedRunnerGroupForOrg",
  "/orgs/:org/actions/runner-groups/:runnerGroupId",
  paramValidationFactory<t_ActionsUpdateSelfHostedRunnerGroupForOrgParamSchema>(
    actionsUpdateSelfHostedRunnerGroupForOrgParamSchema
  ),
  bodyValidationFactory<t_ActionsUpdateSelfHostedRunnerGroupForOrgBodySchema>(
    actionsUpdateSelfHostedRunnerGroupForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsUpdateSelfHostedRunnerGroupForOrgParamSchema,
      void,
      t_ActionsUpdateSelfHostedRunnerGroupForOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsUpdateSelfHostedRunnerGroupForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsUpdateSelfHostedRunnerGroupForOrg
  }
)

const actionsDeleteSelfHostedRunnerGroupFromOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_group_id: z.coerce.number(),
})

router.delete(
  "actionsDeleteSelfHostedRunnerGroupFromOrg",
  "/orgs/:org/actions/runner-groups/:runnerGroupId",
  paramValidationFactory<t_ActionsDeleteSelfHostedRunnerGroupFromOrgParamSchema>(
    actionsDeleteSelfHostedRunnerGroupFromOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsDeleteSelfHostedRunnerGroupFromOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteSelfHostedRunnerGroupFromOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteSelfHostedRunnerGroupFromOrg
  }
)

const actionsListRepoAccessToSelfHostedRunnerGroupInOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_group_id: z.coerce.number(),
})

const actionsListRepoAccessToSelfHostedRunnerGroupInOrgQuerySchema = z.object({
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "actionsListRepoAccessToSelfHostedRunnerGroupInOrg",
  "/orgs/:org/actions/runner-groups/:runnerGroupId/repositories",
  paramValidationFactory<t_ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParamSchema>(
    actionsListRepoAccessToSelfHostedRunnerGroupInOrgParamSchema
  ),
  queryValidationFactory<t_ActionsListRepoAccessToSelfHostedRunnerGroupInOrgQuerySchema>(
    actionsListRepoAccessToSelfHostedRunnerGroupInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
      t_ActionsListRepoAccessToSelfHostedRunnerGroupInOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListRepoAccessToSelfHostedRunnerGroupInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRepoAccessToSelfHostedRunnerGroupInOrg
  }
)

const actionsSetRepoAccessToSelfHostedRunnerGroupInOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_group_id: z.coerce.number(),
})

const actionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodySchema = z.object({
  selected_repository_ids: z.array(z.coerce.number().optional()),
})

router.put(
  "actionsSetRepoAccessToSelfHostedRunnerGroupInOrg",
  "/orgs/:org/actions/runner-groups/:runnerGroupId/repositories",
  paramValidationFactory<t_ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParamSchema>(
    actionsSetRepoAccessToSelfHostedRunnerGroupInOrgParamSchema
  ),
  bodyValidationFactory<t_ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodySchema>(
    actionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
      void,
      t_ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetRepoAccessToSelfHostedRunnerGroupInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetRepoAccessToSelfHostedRunnerGroupInOrg
  }
)

const actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParamSchema = z.object(
  {
    org: z.coerce.string(),
    runner_group_id: z.coerce.number(),
    repository_id: z.coerce.number(),
  }
)

router.delete(
  "actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg",
  "/orgs/:org/actions/runner-groups/:runnerGroupId/repositories/:repositoryId",
  paramValidationFactory<t_ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParamSchema>(
    actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsRemoveRepoAccessToSelfHostedRunnerGroupInOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg
  }
)

const actionsListSelfHostedRunnersInGroupForOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_group_id: z.coerce.number(),
})

const actionsListSelfHostedRunnersInGroupForOrgQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListSelfHostedRunnersInGroupForOrg",
  "/orgs/:org/actions/runner-groups/:runnerGroupId/runners",
  paramValidationFactory<t_ActionsListSelfHostedRunnersInGroupForOrgParamSchema>(
    actionsListSelfHostedRunnersInGroupForOrgParamSchema
  ),
  queryValidationFactory<t_ActionsListSelfHostedRunnersInGroupForOrgQuerySchema>(
    actionsListSelfHostedRunnersInGroupForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListSelfHostedRunnersInGroupForOrgParamSchema,
      t_ActionsListSelfHostedRunnersInGroupForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListSelfHostedRunnersInGroupForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelfHostedRunnersInGroupForOrg
  }
)

const actionsSetSelfHostedRunnersInGroupForOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_group_id: z.coerce.number(),
})

const actionsSetSelfHostedRunnersInGroupForOrgBodySchema = z.object({
  runners: z.array(z.coerce.number().optional()),
})

router.put(
  "actionsSetSelfHostedRunnersInGroupForOrg",
  "/orgs/:org/actions/runner-groups/:runnerGroupId/runners",
  paramValidationFactory<t_ActionsSetSelfHostedRunnersInGroupForOrgParamSchema>(
    actionsSetSelfHostedRunnersInGroupForOrgParamSchema
  ),
  bodyValidationFactory<t_ActionsSetSelfHostedRunnersInGroupForOrgBodySchema>(
    actionsSetSelfHostedRunnersInGroupForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetSelfHostedRunnersInGroupForOrgParamSchema,
      void,
      t_ActionsSetSelfHostedRunnersInGroupForOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetSelfHostedRunnersInGroupForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetSelfHostedRunnersInGroupForOrg
  }
)

const actionsAddSelfHostedRunnerToGroupForOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_group_id: z.coerce.number(),
  runner_id: z.coerce.number(),
})

router.put(
  "actionsAddSelfHostedRunnerToGroupForOrg",
  "/orgs/:org/actions/runner-groups/:runnerGroupId/runners/:runnerId",
  paramValidationFactory<t_ActionsAddSelfHostedRunnerToGroupForOrgParamSchema>(
    actionsAddSelfHostedRunnerToGroupForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsAddSelfHostedRunnerToGroupForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsAddSelfHostedRunnerToGroupForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsAddSelfHostedRunnerToGroupForOrg
  }
)

const actionsRemoveSelfHostedRunnerFromGroupForOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_group_id: z.coerce.number(),
  runner_id: z.coerce.number(),
})

router.delete(
  "actionsRemoveSelfHostedRunnerFromGroupForOrg",
  "/orgs/:org/actions/runner-groups/:runnerGroupId/runners/:runnerId",
  paramValidationFactory<t_ActionsRemoveSelfHostedRunnerFromGroupForOrgParamSchema>(
    actionsRemoveSelfHostedRunnerFromGroupForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsRemoveSelfHostedRunnerFromGroupForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsRemoveSelfHostedRunnerFromGroupForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsRemoveSelfHostedRunnerFromGroupForOrg
  }
)

const actionsListSelfHostedRunnersForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

const actionsListSelfHostedRunnersForOrgQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListSelfHostedRunnersForOrg",
  "/orgs/:org/actions/runners",
  paramValidationFactory<t_ActionsListSelfHostedRunnersForOrgParamSchema>(
    actionsListSelfHostedRunnersForOrgParamSchema
  ),
  queryValidationFactory<t_ActionsListSelfHostedRunnersForOrgQuerySchema>(
    actionsListSelfHostedRunnersForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListSelfHostedRunnersForOrgParamSchema,
      t_ActionsListSelfHostedRunnersForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListSelfHostedRunnersForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelfHostedRunnersForOrg
  }
)

const actionsListRunnerApplicationsForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "actionsListRunnerApplicationsForOrg",
  "/orgs/:org/actions/runners/downloads",
  paramValidationFactory<t_ActionsListRunnerApplicationsForOrgParamSchema>(
    actionsListRunnerApplicationsForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListRunnerApplicationsForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListRunnerApplicationsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRunnerApplicationsForOrg
  }
)

const actionsCreateRegistrationTokenForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

router.post(
  "actionsCreateRegistrationTokenForOrg",
  "/orgs/:org/actions/runners/registration-token",
  paramValidationFactory<t_ActionsCreateRegistrationTokenForOrgParamSchema>(
    actionsCreateRegistrationTokenForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsCreateRegistrationTokenForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateRegistrationTokenForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRegistrationTokenForOrg
  }
)

const actionsCreateRemoveTokenForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

router.post(
  "actionsCreateRemoveTokenForOrg",
  "/orgs/:org/actions/runners/remove-token",
  paramValidationFactory<t_ActionsCreateRemoveTokenForOrgParamSchema>(
    actionsCreateRemoveTokenForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsCreateRemoveTokenForOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateRemoveTokenForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRemoveTokenForOrg
  }
)

const actionsGetSelfHostedRunnerForOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_id: z.coerce.number(),
})

router.get(
  "actionsGetSelfHostedRunnerForOrg",
  "/orgs/:org/actions/runners/:runnerId",
  paramValidationFactory<t_ActionsGetSelfHostedRunnerForOrgParamSchema>(
    actionsGetSelfHostedRunnerForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetSelfHostedRunnerForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetSelfHostedRunnerForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetSelfHostedRunnerForOrg
  }
)

const actionsDeleteSelfHostedRunnerFromOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_id: z.coerce.number(),
})

router.delete(
  "actionsDeleteSelfHostedRunnerFromOrg",
  "/orgs/:org/actions/runners/:runnerId",
  paramValidationFactory<t_ActionsDeleteSelfHostedRunnerFromOrgParamSchema>(
    actionsDeleteSelfHostedRunnerFromOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsDeleteSelfHostedRunnerFromOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteSelfHostedRunnerFromOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteSelfHostedRunnerFromOrg
  }
)

const actionsListLabelsForSelfHostedRunnerForOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_id: z.coerce.number(),
})

router.get(
  "actionsListLabelsForSelfHostedRunnerForOrg",
  "/orgs/:org/actions/runners/:runnerId/labels",
  paramValidationFactory<t_ActionsListLabelsForSelfHostedRunnerForOrgParamSchema>(
    actionsListLabelsForSelfHostedRunnerForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListLabelsForSelfHostedRunnerForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListLabelsForSelfHostedRunnerForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListLabelsForSelfHostedRunnerForOrg
  }
)

const actionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_id: z.coerce.number(),
})

const actionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema = z.object({
  labels: z.array(z.coerce.string().optional()),
})

router.post(
  "actionsAddCustomLabelsToSelfHostedRunnerForOrg",
  "/orgs/:org/actions/runners/:runnerId/labels",
  paramValidationFactory<t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema>(
    actionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema
  ),
  bodyValidationFactory<t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema>(
    actionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgParamSchema,
      void,
      t_ActionsAddCustomLabelsToSelfHostedRunnerForOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsAddCustomLabelsToSelfHostedRunnerForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsAddCustomLabelsToSelfHostedRunnerForOrg
  }
)

const actionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_id: z.coerce.number(),
})

const actionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema = z.object({
  labels: z.array(z.coerce.string().optional()),
})

router.put(
  "actionsSetCustomLabelsForSelfHostedRunnerForOrg",
  "/orgs/:org/actions/runners/:runnerId/labels",
  paramValidationFactory<t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema>(
    actionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema
  ),
  bodyValidationFactory<t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema>(
    actionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgParamSchema,
      void,
      t_ActionsSetCustomLabelsForSelfHostedRunnerForOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetCustomLabelsForSelfHostedRunnerForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetCustomLabelsForSelfHostedRunnerForOrg
  }
)

const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema =
  z.object({ org: z.coerce.string(), runner_id: z.coerce.number() })

router.delete(
  "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg",
  "/orgs/:org/actions/runners/:runnerId/labels",
  paramValidationFactory<t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema>(
    actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg
  }
)

const actionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema = z.object({
  org: z.coerce.string(),
  runner_id: z.coerce.number(),
  name: z.coerce.string(),
})

router.delete(
  "actionsRemoveCustomLabelFromSelfHostedRunnerForOrg",
  "/orgs/:org/actions/runners/:runnerId/labels/:name",
  paramValidationFactory<t_ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema>(
    actionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsRemoveCustomLabelFromSelfHostedRunnerForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsRemoveCustomLabelFromSelfHostedRunnerForOrg
  }
)

const actionsListOrgSecretsParamSchema = z.object({ org: z.coerce.string() })

const actionsListOrgSecretsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListOrgSecrets",
  "/orgs/:org/actions/secrets",
  paramValidationFactory<t_ActionsListOrgSecretsParamSchema>(
    actionsListOrgSecretsParamSchema
  ),
  queryValidationFactory<t_ActionsListOrgSecretsQuerySchema>(
    actionsListOrgSecretsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListOrgSecretsParamSchema,
      t_ActionsListOrgSecretsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListOrgSecrets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListOrgSecrets
  }
)

const actionsGetOrgPublicKeyParamSchema = z.object({ org: z.coerce.string() })

router.get(
  "actionsGetOrgPublicKey",
  "/orgs/:org/actions/secrets/public-key",
  paramValidationFactory<t_ActionsGetOrgPublicKeyParamSchema>(
    actionsGetOrgPublicKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetOrgPublicKeyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetOrgPublicKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetOrgPublicKey
  }
)

const actionsGetOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.get(
  "actionsGetOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  paramValidationFactory<t_ActionsGetOrgSecretParamSchema>(
    actionsGetOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetOrgSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetOrgSecret
  }
)

const actionsCreateOrUpdateOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const actionsCreateOrUpdateOrgSecretBodySchema = z.object({
  encrypted_value: z.coerce.string().optional(),
  key_id: z.coerce.string().optional(),
  visibility: z.coerce.string(),
  selected_repository_ids: z.array(z.coerce.number().optional()).optional(),
})

router.put(
  "actionsCreateOrUpdateOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  paramValidationFactory<t_ActionsCreateOrUpdateOrgSecretParamSchema>(
    actionsCreateOrUpdateOrgSecretParamSchema
  ),
  bodyValidationFactory<t_ActionsCreateOrUpdateOrgSecretBodySchema>(
    actionsCreateOrUpdateOrgSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsCreateOrUpdateOrgSecretParamSchema,
      void,
      t_ActionsCreateOrUpdateOrgSecretBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateOrUpdateOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateOrUpdateOrgSecret
  }
)

const actionsDeleteOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.delete(
  "actionsDeleteOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  paramValidationFactory<t_ActionsDeleteOrgSecretParamSchema>(
    actionsDeleteOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDeleteOrgSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteOrgSecret
  }
)

const actionsListSelectedReposForOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const actionsListSelectedReposForOrgSecretQuerySchema = z.object({
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "actionsListSelectedReposForOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories",
  paramValidationFactory<t_ActionsListSelectedReposForOrgSecretParamSchema>(
    actionsListSelectedReposForOrgSecretParamSchema
  ),
  queryValidationFactory<t_ActionsListSelectedReposForOrgSecretQuerySchema>(
    actionsListSelectedReposForOrgSecretQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListSelectedReposForOrgSecretParamSchema,
      t_ActionsListSelectedReposForOrgSecretQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListSelectedReposForOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelectedReposForOrgSecret
  }
)

const actionsSetSelectedReposForOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const actionsSetSelectedReposForOrgSecretBodySchema = z.object({
  selected_repository_ids: z.array(z.coerce.number().optional()),
})

router.put(
  "actionsSetSelectedReposForOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories",
  paramValidationFactory<t_ActionsSetSelectedReposForOrgSecretParamSchema>(
    actionsSetSelectedReposForOrgSecretParamSchema
  ),
  bodyValidationFactory<t_ActionsSetSelectedReposForOrgSecretBodySchema>(
    actionsSetSelectedReposForOrgSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetSelectedReposForOrgSecretParamSchema,
      void,
      t_ActionsSetSelectedReposForOrgSecretBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetSelectedReposForOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetSelectedReposForOrgSecret
  }
)

const actionsAddSelectedRepoToOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
  repository_id: z.coerce.number(),
})

router.put(
  "actionsAddSelectedRepoToOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<t_ActionsAddSelectedRepoToOrgSecretParamSchema>(
    actionsAddSelectedRepoToOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsAddSelectedRepoToOrgSecretParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsAddSelectedRepoToOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsAddSelectedRepoToOrgSecret
  }
)

const actionsRemoveSelectedRepoFromOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
  repository_id: z.coerce.number(),
})

router.delete(
  "actionsRemoveSelectedRepoFromOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<t_ActionsRemoveSelectedRepoFromOrgSecretParamSchema>(
    actionsRemoveSelectedRepoFromOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsRemoveSelectedRepoFromOrgSecretParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsRemoveSelectedRepoFromOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsRemoveSelectedRepoFromOrgSecret
  }
)

const actionsListOrgVariablesParamSchema = z.object({ org: z.coerce.string() })

const actionsListOrgVariablesQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListOrgVariables",
  "/orgs/:org/actions/variables",
  paramValidationFactory<t_ActionsListOrgVariablesParamSchema>(
    actionsListOrgVariablesParamSchema
  ),
  queryValidationFactory<t_ActionsListOrgVariablesQuerySchema>(
    actionsListOrgVariablesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListOrgVariablesParamSchema,
      t_ActionsListOrgVariablesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListOrgVariables

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListOrgVariables
  }
)

const actionsCreateOrgVariableParamSchema = z.object({ org: z.coerce.string() })

const actionsCreateOrgVariableBodySchema = z.object({
  name: z.coerce.string(),
  value: z.coerce.string(),
  visibility: z.coerce.string(),
  selected_repository_ids: z.array(z.coerce.number().optional()).optional(),
})

router.post(
  "actionsCreateOrgVariable",
  "/orgs/:org/actions/variables",
  paramValidationFactory<t_ActionsCreateOrgVariableParamSchema>(
    actionsCreateOrgVariableParamSchema
  ),
  bodyValidationFactory<t_ActionsCreateOrgVariableBodySchema>(
    actionsCreateOrgVariableBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsCreateOrgVariableParamSchema,
      void,
      t_ActionsCreateOrgVariableBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateOrgVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateOrgVariable
  }
)

const actionsGetOrgVariableParamSchema = z.object({
  org: z.coerce.string(),
  name: z.coerce.string(),
})

router.get(
  "actionsGetOrgVariable",
  "/orgs/:org/actions/variables/:name",
  paramValidationFactory<t_ActionsGetOrgVariableParamSchema>(
    actionsGetOrgVariableParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetOrgVariableParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetOrgVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetOrgVariable
  }
)

const actionsUpdateOrgVariableParamSchema = z.object({
  org: z.coerce.string(),
  name: z.coerce.string(),
})

const actionsUpdateOrgVariableBodySchema = z.object({
  name: z.coerce.string().optional(),
  value: z.coerce.string().optional(),
  visibility: z.coerce.string().optional(),
  selected_repository_ids: z.array(z.coerce.number().optional()).optional(),
})

router.patch(
  "actionsUpdateOrgVariable",
  "/orgs/:org/actions/variables/:name",
  paramValidationFactory<t_ActionsUpdateOrgVariableParamSchema>(
    actionsUpdateOrgVariableParamSchema
  ),
  bodyValidationFactory<t_ActionsUpdateOrgVariableBodySchema>(
    actionsUpdateOrgVariableBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsUpdateOrgVariableParamSchema,
      void,
      t_ActionsUpdateOrgVariableBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsUpdateOrgVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsUpdateOrgVariable
  }
)

const actionsDeleteOrgVariableParamSchema = z.object({
  org: z.coerce.string(),
  name: z.coerce.string(),
})

router.delete(
  "actionsDeleteOrgVariable",
  "/orgs/:org/actions/variables/:name",
  paramValidationFactory<t_ActionsDeleteOrgVariableParamSchema>(
    actionsDeleteOrgVariableParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDeleteOrgVariableParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteOrgVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteOrgVariable
  }
)

const actionsListSelectedReposForOrgVariableParamSchema = z.object({
  org: z.coerce.string(),
  name: z.coerce.string(),
})

const actionsListSelectedReposForOrgVariableQuerySchema = z.object({
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "actionsListSelectedReposForOrgVariable",
  "/orgs/:org/actions/variables/:name/repositories",
  paramValidationFactory<t_ActionsListSelectedReposForOrgVariableParamSchema>(
    actionsListSelectedReposForOrgVariableParamSchema
  ),
  queryValidationFactory<t_ActionsListSelectedReposForOrgVariableQuerySchema>(
    actionsListSelectedReposForOrgVariableQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListSelectedReposForOrgVariableParamSchema,
      t_ActionsListSelectedReposForOrgVariableQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListSelectedReposForOrgVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelectedReposForOrgVariable
  }
)

const actionsSetSelectedReposForOrgVariableParamSchema = z.object({
  org: z.coerce.string(),
  name: z.coerce.string(),
})

const actionsSetSelectedReposForOrgVariableBodySchema = z.object({
  selected_repository_ids: z.array(z.coerce.number().optional()),
})

router.put(
  "actionsSetSelectedReposForOrgVariable",
  "/orgs/:org/actions/variables/:name/repositories",
  paramValidationFactory<t_ActionsSetSelectedReposForOrgVariableParamSchema>(
    actionsSetSelectedReposForOrgVariableParamSchema
  ),
  bodyValidationFactory<t_ActionsSetSelectedReposForOrgVariableBodySchema>(
    actionsSetSelectedReposForOrgVariableBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetSelectedReposForOrgVariableParamSchema,
      void,
      t_ActionsSetSelectedReposForOrgVariableBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetSelectedReposForOrgVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetSelectedReposForOrgVariable
  }
)

const actionsAddSelectedRepoToOrgVariableParamSchema = z.object({
  org: z.coerce.string(),
  name: z.coerce.string(),
  repository_id: z.coerce.number(),
})

router.put(
  "actionsAddSelectedRepoToOrgVariable",
  "/orgs/:org/actions/variables/:name/repositories/:repositoryId",
  paramValidationFactory<t_ActionsAddSelectedRepoToOrgVariableParamSchema>(
    actionsAddSelectedRepoToOrgVariableParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsAddSelectedRepoToOrgVariableParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsAddSelectedRepoToOrgVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsAddSelectedRepoToOrgVariable
  }
)

const actionsRemoveSelectedRepoFromOrgVariableParamSchema = z.object({
  org: z.coerce.string(),
  name: z.coerce.string(),
  repository_id: z.coerce.number(),
})

router.delete(
  "actionsRemoveSelectedRepoFromOrgVariable",
  "/orgs/:org/actions/variables/:name/repositories/:repositoryId",
  paramValidationFactory<t_ActionsRemoveSelectedRepoFromOrgVariableParamSchema>(
    actionsRemoveSelectedRepoFromOrgVariableParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsRemoveSelectedRepoFromOrgVariableParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsRemoveSelectedRepoFromOrgVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsRemoveSelectedRepoFromOrgVariable
  }
)

const orgsListBlockedUsersParamSchema = z.object({ org: z.coerce.string() })

const orgsListBlockedUsersQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListBlockedUsers",
  "/orgs/:org/blocks",
  paramValidationFactory<t_OrgsListBlockedUsersParamSchema>(
    orgsListBlockedUsersParamSchema
  ),
  queryValidationFactory<t_OrgsListBlockedUsersQuerySchema>(
    orgsListBlockedUsersQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsListBlockedUsersParamSchema,
      t_OrgsListBlockedUsersQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListBlockedUsers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListBlockedUsers
  }
)

const orgsCheckBlockedUserParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

router.get(
  "orgsCheckBlockedUser",
  "/orgs/:org/blocks/:username",
  paramValidationFactory<t_OrgsCheckBlockedUserParamSchema>(
    orgsCheckBlockedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsCheckBlockedUserParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsCheckBlockedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCheckBlockedUser
  }
)

const orgsBlockUserParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

router.put(
  "orgsBlockUser",
  "/orgs/:org/blocks/:username",
  paramValidationFactory<t_OrgsBlockUserParamSchema>(orgsBlockUserParamSchema),
  async (
    ctx: ValidatedCtx<t_OrgsBlockUserParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsBlockUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsBlockUser
  }
)

const orgsUnblockUserParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

router.delete(
  "orgsUnblockUser",
  "/orgs/:org/blocks/:username",
  paramValidationFactory<t_OrgsUnblockUserParamSchema>(
    orgsUnblockUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsUnblockUserParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsUnblockUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUnblockUser
  }
)

const codeScanningListAlertsForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

const codeScanningListAlertsForOrgQuerySchema = z.object({
  tool_name: z.coerce.string().optional(),
  tool_guid: z.coerce.string().optional(),
  before: z.coerce.string().optional(),
  after: z.coerce.string().optional(),
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
  direction: z.coerce.string().optional(),
  state: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  severity: z.coerce.string().optional(),
})

router.get(
  "codeScanningListAlertsForOrg",
  "/orgs/:org/code-scanning/alerts",
  paramValidationFactory<t_CodeScanningListAlertsForOrgParamSchema>(
    codeScanningListAlertsForOrgParamSchema
  ),
  queryValidationFactory<t_CodeScanningListAlertsForOrgQuerySchema>(
    codeScanningListAlertsForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodeScanningListAlertsForOrgParamSchema,
      t_CodeScanningListAlertsForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningListAlertsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningListAlertsForOrg
  }
)

const codespacesListInOrganizationParamSchema = z.object({
  org: z.coerce.string(),
})

const codespacesListInOrganizationQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "codespacesListInOrganization",
  "/orgs/:org/codespaces",
  paramValidationFactory<t_CodespacesListInOrganizationParamSchema>(
    codespacesListInOrganizationParamSchema
  ),
  queryValidationFactory<t_CodespacesListInOrganizationQuerySchema>(
    codespacesListInOrganizationQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesListInOrganizationParamSchema,
      t_CodespacesListInOrganizationQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesListInOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesListInOrganization
  }
)

const codespacesSetCodespacesBillingParamSchema = z.object({
  org: z.coerce.string(),
})

const codespacesSetCodespacesBillingBodySchema = z.object({
  visibility: z.coerce.string(),
  selected_usernames: z.array(z.coerce.string().optional()).optional(),
})

router.put(
  "codespacesSetCodespacesBilling",
  "/orgs/:org/codespaces/billing",
  paramValidationFactory<t_CodespacesSetCodespacesBillingParamSchema>(
    codespacesSetCodespacesBillingParamSchema
  ),
  bodyValidationFactory<t_CodespacesSetCodespacesBillingBodySchema>(
    codespacesSetCodespacesBillingBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesSetCodespacesBillingParamSchema,
      void,
      t_CodespacesSetCodespacesBillingBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesSetCodespacesBilling

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesSetCodespacesBilling
  }
)

const codespacesListOrgSecretsParamSchema = z.object({ org: z.coerce.string() })

const codespacesListOrgSecretsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "codespacesListOrgSecrets",
  "/orgs/:org/codespaces/secrets",
  paramValidationFactory<t_CodespacesListOrgSecretsParamSchema>(
    codespacesListOrgSecretsParamSchema
  ),
  queryValidationFactory<t_CodespacesListOrgSecretsQuerySchema>(
    codespacesListOrgSecretsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesListOrgSecretsParamSchema,
      t_CodespacesListOrgSecretsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesListOrgSecrets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesListOrgSecrets
  }
)

const codespacesGetOrgPublicKeyParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "codespacesGetOrgPublicKey",
  "/orgs/:org/codespaces/secrets/public-key",
  paramValidationFactory<t_CodespacesGetOrgPublicKeyParamSchema>(
    codespacesGetOrgPublicKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodespacesGetOrgPublicKeyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codespacesGetOrgPublicKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesGetOrgPublicKey
  }
)

const codespacesGetOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.get(
  "codespacesGetOrgSecret",
  "/orgs/:org/codespaces/secrets/:secretName",
  paramValidationFactory<t_CodespacesGetOrgSecretParamSchema>(
    codespacesGetOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodespacesGetOrgSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codespacesGetOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesGetOrgSecret
  }
)

const codespacesCreateOrUpdateOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const codespacesCreateOrUpdateOrgSecretBodySchema = z.object({
  encrypted_value: z.coerce.string().optional(),
  key_id: z.coerce.string().optional(),
  visibility: z.coerce.string(),
  selected_repository_ids: z.array(z.coerce.number().optional()).optional(),
})

router.put(
  "codespacesCreateOrUpdateOrgSecret",
  "/orgs/:org/codespaces/secrets/:secretName",
  paramValidationFactory<t_CodespacesCreateOrUpdateOrgSecretParamSchema>(
    codespacesCreateOrUpdateOrgSecretParamSchema
  ),
  bodyValidationFactory<t_CodespacesCreateOrUpdateOrgSecretBodySchema>(
    codespacesCreateOrUpdateOrgSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesCreateOrUpdateOrgSecretParamSchema,
      void,
      t_CodespacesCreateOrUpdateOrgSecretBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesCreateOrUpdateOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesCreateOrUpdateOrgSecret
  }
)

const codespacesDeleteOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.delete(
  "codespacesDeleteOrgSecret",
  "/orgs/:org/codespaces/secrets/:secretName",
  paramValidationFactory<t_CodespacesDeleteOrgSecretParamSchema>(
    codespacesDeleteOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodespacesDeleteOrgSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codespacesDeleteOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesDeleteOrgSecret
  }
)

const codespacesListSelectedReposForOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const codespacesListSelectedReposForOrgSecretQuerySchema = z.object({
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "codespacesListSelectedReposForOrgSecret",
  "/orgs/:org/codespaces/secrets/:secretName/repositories",
  paramValidationFactory<t_CodespacesListSelectedReposForOrgSecretParamSchema>(
    codespacesListSelectedReposForOrgSecretParamSchema
  ),
  queryValidationFactory<t_CodespacesListSelectedReposForOrgSecretQuerySchema>(
    codespacesListSelectedReposForOrgSecretQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesListSelectedReposForOrgSecretParamSchema,
      t_CodespacesListSelectedReposForOrgSecretQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesListSelectedReposForOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesListSelectedReposForOrgSecret
  }
)

const codespacesSetSelectedReposForOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const codespacesSetSelectedReposForOrgSecretBodySchema = z.object({
  selected_repository_ids: z.array(z.coerce.number().optional()),
})

router.put(
  "codespacesSetSelectedReposForOrgSecret",
  "/orgs/:org/codespaces/secrets/:secretName/repositories",
  paramValidationFactory<t_CodespacesSetSelectedReposForOrgSecretParamSchema>(
    codespacesSetSelectedReposForOrgSecretParamSchema
  ),
  bodyValidationFactory<t_CodespacesSetSelectedReposForOrgSecretBodySchema>(
    codespacesSetSelectedReposForOrgSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesSetSelectedReposForOrgSecretParamSchema,
      void,
      t_CodespacesSetSelectedReposForOrgSecretBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesSetSelectedReposForOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesSetSelectedReposForOrgSecret
  }
)

const codespacesAddSelectedRepoToOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
  repository_id: z.coerce.number(),
})

router.put(
  "codespacesAddSelectedRepoToOrgSecret",
  "/orgs/:org/codespaces/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<t_CodespacesAddSelectedRepoToOrgSecretParamSchema>(
    codespacesAddSelectedRepoToOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesAddSelectedRepoToOrgSecretParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesAddSelectedRepoToOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesAddSelectedRepoToOrgSecret
  }
)

const codespacesRemoveSelectedRepoFromOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
  repository_id: z.coerce.number(),
})

router.delete(
  "codespacesRemoveSelectedRepoFromOrgSecret",
  "/orgs/:org/codespaces/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<t_CodespacesRemoveSelectedRepoFromOrgSecretParamSchema>(
    codespacesRemoveSelectedRepoFromOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesRemoveSelectedRepoFromOrgSecretParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesRemoveSelectedRepoFromOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesRemoveSelectedRepoFromOrgSecret
  }
)

const dependabotListAlertsForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

const dependabotListAlertsForOrgQuerySchema = z.object({
  state: z.coerce.string().optional(),
  severity: z.coerce.string().optional(),
  ecosystem: z.coerce.string().optional(),
  package: z.coerce.string().optional(),
  scope: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  before: z.coerce.string().optional(),
  after: z.coerce.string().optional(),
  first: z.coerce.number().optional(),
  last: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "dependabotListAlertsForOrg",
  "/orgs/:org/dependabot/alerts",
  paramValidationFactory<t_DependabotListAlertsForOrgParamSchema>(
    dependabotListAlertsForOrgParamSchema
  ),
  queryValidationFactory<t_DependabotListAlertsForOrgQuerySchema>(
    dependabotListAlertsForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotListAlertsForOrgParamSchema,
      t_DependabotListAlertsForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotListAlertsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotListAlertsForOrg
  }
)

const dependabotListOrgSecretsParamSchema = z.object({ org: z.coerce.string() })

const dependabotListOrgSecretsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "dependabotListOrgSecrets",
  "/orgs/:org/dependabot/secrets",
  paramValidationFactory<t_DependabotListOrgSecretsParamSchema>(
    dependabotListOrgSecretsParamSchema
  ),
  queryValidationFactory<t_DependabotListOrgSecretsQuerySchema>(
    dependabotListOrgSecretsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotListOrgSecretsParamSchema,
      t_DependabotListOrgSecretsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotListOrgSecrets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotListOrgSecrets
  }
)

const dependabotGetOrgPublicKeyParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "dependabotGetOrgPublicKey",
  "/orgs/:org/dependabot/secrets/public-key",
  paramValidationFactory<t_DependabotGetOrgPublicKeyParamSchema>(
    dependabotGetOrgPublicKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_DependabotGetOrgPublicKeyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-dependabotGetOrgPublicKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotGetOrgPublicKey
  }
)

const dependabotGetOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.get(
  "dependabotGetOrgSecret",
  "/orgs/:org/dependabot/secrets/:secretName",
  paramValidationFactory<t_DependabotGetOrgSecretParamSchema>(
    dependabotGetOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_DependabotGetOrgSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-dependabotGetOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotGetOrgSecret
  }
)

const dependabotCreateOrUpdateOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const dependabotCreateOrUpdateOrgSecretBodySchema = z.object({
  encrypted_value: z.coerce.string().optional(),
  key_id: z.coerce.string().optional(),
  visibility: z.coerce.string(),
  selected_repository_ids: z.array(z.coerce.string().optional()).optional(),
})

router.put(
  "dependabotCreateOrUpdateOrgSecret",
  "/orgs/:org/dependabot/secrets/:secretName",
  paramValidationFactory<t_DependabotCreateOrUpdateOrgSecretParamSchema>(
    dependabotCreateOrUpdateOrgSecretParamSchema
  ),
  bodyValidationFactory<t_DependabotCreateOrUpdateOrgSecretBodySchema>(
    dependabotCreateOrUpdateOrgSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotCreateOrUpdateOrgSecretParamSchema,
      void,
      t_DependabotCreateOrUpdateOrgSecretBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotCreateOrUpdateOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotCreateOrUpdateOrgSecret
  }
)

const dependabotDeleteOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.delete(
  "dependabotDeleteOrgSecret",
  "/orgs/:org/dependabot/secrets/:secretName",
  paramValidationFactory<t_DependabotDeleteOrgSecretParamSchema>(
    dependabotDeleteOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_DependabotDeleteOrgSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-dependabotDeleteOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotDeleteOrgSecret
  }
)

const dependabotListSelectedReposForOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const dependabotListSelectedReposForOrgSecretQuerySchema = z.object({
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "dependabotListSelectedReposForOrgSecret",
  "/orgs/:org/dependabot/secrets/:secretName/repositories",
  paramValidationFactory<t_DependabotListSelectedReposForOrgSecretParamSchema>(
    dependabotListSelectedReposForOrgSecretParamSchema
  ),
  queryValidationFactory<t_DependabotListSelectedReposForOrgSecretQuerySchema>(
    dependabotListSelectedReposForOrgSecretQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotListSelectedReposForOrgSecretParamSchema,
      t_DependabotListSelectedReposForOrgSecretQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotListSelectedReposForOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotListSelectedReposForOrgSecret
  }
)

const dependabotSetSelectedReposForOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const dependabotSetSelectedReposForOrgSecretBodySchema = z.object({
  selected_repository_ids: z.array(z.coerce.number().optional()),
})

router.put(
  "dependabotSetSelectedReposForOrgSecret",
  "/orgs/:org/dependabot/secrets/:secretName/repositories",
  paramValidationFactory<t_DependabotSetSelectedReposForOrgSecretParamSchema>(
    dependabotSetSelectedReposForOrgSecretParamSchema
  ),
  bodyValidationFactory<t_DependabotSetSelectedReposForOrgSecretBodySchema>(
    dependabotSetSelectedReposForOrgSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotSetSelectedReposForOrgSecretParamSchema,
      void,
      t_DependabotSetSelectedReposForOrgSecretBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotSetSelectedReposForOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotSetSelectedReposForOrgSecret
  }
)

const dependabotAddSelectedRepoToOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
  repository_id: z.coerce.number(),
})

router.put(
  "dependabotAddSelectedRepoToOrgSecret",
  "/orgs/:org/dependabot/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<t_DependabotAddSelectedRepoToOrgSecretParamSchema>(
    dependabotAddSelectedRepoToOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotAddSelectedRepoToOrgSecretParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotAddSelectedRepoToOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotAddSelectedRepoToOrgSecret
  }
)

const dependabotRemoveSelectedRepoFromOrgSecretParamSchema = z.object({
  org: z.coerce.string(),
  secret_name: z.coerce.string(),
  repository_id: z.coerce.number(),
})

router.delete(
  "dependabotRemoveSelectedRepoFromOrgSecret",
  "/orgs/:org/dependabot/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<t_DependabotRemoveSelectedRepoFromOrgSecretParamSchema>(
    dependabotRemoveSelectedRepoFromOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotRemoveSelectedRepoFromOrgSecretParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotRemoveSelectedRepoFromOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotRemoveSelectedRepoFromOrgSecret
  }
)

const activityListPublicOrgEventsParamSchema = z.object({
  org: z.coerce.string(),
})

const activityListPublicOrgEventsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListPublicOrgEvents",
  "/orgs/:org/events",
  paramValidationFactory<t_ActivityListPublicOrgEventsParamSchema>(
    activityListPublicOrgEventsParamSchema
  ),
  queryValidationFactory<t_ActivityListPublicOrgEventsQuerySchema>(
    activityListPublicOrgEventsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListPublicOrgEventsParamSchema,
      t_ActivityListPublicOrgEventsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListPublicOrgEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicOrgEvents
  }
)

const orgsListFailedInvitationsParamSchema = z.object({
  org: z.coerce.string(),
})

const orgsListFailedInvitationsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListFailedInvitations",
  "/orgs/:org/failed_invitations",
  paramValidationFactory<t_OrgsListFailedInvitationsParamSchema>(
    orgsListFailedInvitationsParamSchema
  ),
  queryValidationFactory<t_OrgsListFailedInvitationsQuerySchema>(
    orgsListFailedInvitationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsListFailedInvitationsParamSchema,
      t_OrgsListFailedInvitationsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListFailedInvitations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListFailedInvitations
  }
)

const orgsListWebhooksParamSchema = z.object({ org: z.coerce.string() })

const orgsListWebhooksQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListWebhooks",
  "/orgs/:org/hooks",
  paramValidationFactory<t_OrgsListWebhooksParamSchema>(
    orgsListWebhooksParamSchema
  ),
  queryValidationFactory<t_OrgsListWebhooksQuerySchema>(
    orgsListWebhooksQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsListWebhooksParamSchema,
      t_OrgsListWebhooksQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListWebhooks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListWebhooks
  }
)

const orgsCreateWebhookParamSchema = z.object({ org: z.coerce.string() })

const orgsCreateWebhookBodySchema = z.object({
  name: z.coerce.string(),
  config: z.object({
    url: z.coerce.string(),
    content_type: z.coerce.string().optional(),
    secret: z.coerce.string().optional(),
    insecure_ssl: z.object({}).optional(),
    username: z.coerce.string().optional(),
    password: z.coerce.string().optional(),
  }),
  events: z.array(z.coerce.string().optional()).optional(),
  active: z.coerce.boolean().optional(),
})

router.post(
  "orgsCreateWebhook",
  "/orgs/:org/hooks",
  paramValidationFactory<t_OrgsCreateWebhookParamSchema>(
    orgsCreateWebhookParamSchema
  ),
  bodyValidationFactory<t_OrgsCreateWebhookBodySchema>(
    orgsCreateWebhookBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsCreateWebhookParamSchema,
      void,
      t_OrgsCreateWebhookBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsCreateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCreateWebhook
  }
)

const orgsGetWebhookParamSchema = z.object({
  org: z.coerce.string(),
  hook_id: z.coerce.number(),
})

router.get(
  "orgsGetWebhook",
  "/orgs/:org/hooks/:hookId",
  paramValidationFactory<t_OrgsGetWebhookParamSchema>(
    orgsGetWebhookParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsGetWebhookParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsGetWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGetWebhook
  }
)

const orgsUpdateWebhookParamSchema = z.object({
  org: z.coerce.string(),
  hook_id: z.coerce.number(),
})

const orgsUpdateWebhookBodySchema = z
  .object({
    config: z
      .object({
        url: z.coerce.string(),
        content_type: z.coerce.string().optional(),
        secret: z.coerce.string().optional(),
        insecure_ssl: z.object({}).optional(),
      })
      .optional(),
    events: z.array(z.coerce.string().optional()).optional(),
    active: z.coerce.boolean().optional(),
    name: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "orgsUpdateWebhook",
  "/orgs/:org/hooks/:hookId",
  paramValidationFactory<t_OrgsUpdateWebhookParamSchema>(
    orgsUpdateWebhookParamSchema
  ),
  bodyValidationFactory<t_OrgsUpdateWebhookBodySchema>(
    orgsUpdateWebhookBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsUpdateWebhookParamSchema,
      void,
      t_OrgsUpdateWebhookBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsUpdateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUpdateWebhook
  }
)

const orgsDeleteWebhookParamSchema = z.object({
  org: z.coerce.string(),
  hook_id: z.coerce.number(),
})

router.delete(
  "orgsDeleteWebhook",
  "/orgs/:org/hooks/:hookId",
  paramValidationFactory<t_OrgsDeleteWebhookParamSchema>(
    orgsDeleteWebhookParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsDeleteWebhookParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsDeleteWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsDeleteWebhook
  }
)

const orgsGetWebhookConfigForOrgParamSchema = z.object({
  org: z.coerce.string(),
  hook_id: z.coerce.number(),
})

router.get(
  "orgsGetWebhookConfigForOrg",
  "/orgs/:org/hooks/:hookId/config",
  paramValidationFactory<t_OrgsGetWebhookConfigForOrgParamSchema>(
    orgsGetWebhookConfigForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsGetWebhookConfigForOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsGetWebhookConfigForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGetWebhookConfigForOrg
  }
)

const orgsUpdateWebhookConfigForOrgParamSchema = z.object({
  org: z.coerce.string(),
  hook_id: z.coerce.number(),
})

const orgsUpdateWebhookConfigForOrgBodySchema = z
  .object({
    url: z.coerce.string().optional(),
    content_type: z.coerce.string().optional(),
    secret: z.coerce.string().optional(),
    insecure_ssl: z.object({}).optional(),
  })
  .optional()

router.patch(
  "orgsUpdateWebhookConfigForOrg",
  "/orgs/:org/hooks/:hookId/config",
  paramValidationFactory<t_OrgsUpdateWebhookConfigForOrgParamSchema>(
    orgsUpdateWebhookConfigForOrgParamSchema
  ),
  bodyValidationFactory<t_OrgsUpdateWebhookConfigForOrgBodySchema>(
    orgsUpdateWebhookConfigForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsUpdateWebhookConfigForOrgParamSchema,
      void,
      t_OrgsUpdateWebhookConfigForOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsUpdateWebhookConfigForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUpdateWebhookConfigForOrg
  }
)

const orgsListWebhookDeliveriesParamSchema = z.object({
  org: z.coerce.string(),
  hook_id: z.coerce.number(),
})

const orgsListWebhookDeliveriesQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  cursor: z.coerce.string().optional(),
  redelivery: z.coerce.boolean().optional(),
})

router.get(
  "orgsListWebhookDeliveries",
  "/orgs/:org/hooks/:hookId/deliveries",
  paramValidationFactory<t_OrgsListWebhookDeliveriesParamSchema>(
    orgsListWebhookDeliveriesParamSchema
  ),
  queryValidationFactory<t_OrgsListWebhookDeliveriesQuerySchema>(
    orgsListWebhookDeliveriesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsListWebhookDeliveriesParamSchema,
      t_OrgsListWebhookDeliveriesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListWebhookDeliveries

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListWebhookDeliveries
  }
)

const orgsGetWebhookDeliveryParamSchema = z.object({
  org: z.coerce.string(),
  hook_id: z.coerce.number(),
  delivery_id: z.coerce.number(),
})

router.get(
  "orgsGetWebhookDelivery",
  "/orgs/:org/hooks/:hookId/deliveries/:deliveryId",
  paramValidationFactory<t_OrgsGetWebhookDeliveryParamSchema>(
    orgsGetWebhookDeliveryParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsGetWebhookDeliveryParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsGetWebhookDelivery

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGetWebhookDelivery
  }
)

const orgsRedeliverWebhookDeliveryParamSchema = z.object({
  org: z.coerce.string(),
  hook_id: z.coerce.number(),
  delivery_id: z.coerce.number(),
})

router.post(
  "orgsRedeliverWebhookDelivery",
  "/orgs/:org/hooks/:hookId/deliveries/:deliveryId/attempts",
  paramValidationFactory<t_OrgsRedeliverWebhookDeliveryParamSchema>(
    orgsRedeliverWebhookDeliveryParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsRedeliverWebhookDeliveryParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsRedeliverWebhookDelivery

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRedeliverWebhookDelivery
  }
)

const orgsPingWebhookParamSchema = z.object({
  org: z.coerce.string(),
  hook_id: z.coerce.number(),
})

router.post(
  "orgsPingWebhook",
  "/orgs/:org/hooks/:hookId/pings",
  paramValidationFactory<t_OrgsPingWebhookParamSchema>(
    orgsPingWebhookParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsPingWebhookParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsPingWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsPingWebhook
  }
)

const appsGetOrgInstallationParamSchema = z.object({ org: z.coerce.string() })

router.get(
  "appsGetOrgInstallation",
  "/orgs/:org/installation",
  paramValidationFactory<t_AppsGetOrgInstallationParamSchema>(
    appsGetOrgInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_AppsGetOrgInstallationParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsGetOrgInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetOrgInstallation
  }
)

const orgsListAppInstallationsParamSchema = z.object({ org: z.coerce.string() })

const orgsListAppInstallationsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListAppInstallations",
  "/orgs/:org/installations",
  paramValidationFactory<t_OrgsListAppInstallationsParamSchema>(
    orgsListAppInstallationsParamSchema
  ),
  queryValidationFactory<t_OrgsListAppInstallationsQuerySchema>(
    orgsListAppInstallationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsListAppInstallationsParamSchema,
      t_OrgsListAppInstallationsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListAppInstallations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListAppInstallations
  }
)

const interactionsGetRestrictionsForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "interactionsGetRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  paramValidationFactory<t_InteractionsGetRestrictionsForOrgParamSchema>(
    interactionsGetRestrictionsForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_InteractionsGetRestrictionsForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-interactionsGetRestrictionsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsGetRestrictionsForOrg
  }
)

const interactionsSetRestrictionsForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

const interactionsSetRestrictionsForOrgBodySchema = z.object({
  limit: z.coerce.string(),
  expiry: z.coerce.string().optional(),
})

router.put(
  "interactionsSetRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  paramValidationFactory<t_InteractionsSetRestrictionsForOrgParamSchema>(
    interactionsSetRestrictionsForOrgParamSchema
  ),
  bodyValidationFactory<t_InteractionsSetRestrictionsForOrgBodySchema>(
    interactionsSetRestrictionsForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_InteractionsSetRestrictionsForOrgParamSchema,
      void,
      t_InteractionsSetRestrictionsForOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-interactionsSetRestrictionsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsSetRestrictionsForOrg
  }
)

const interactionsRemoveRestrictionsForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

router.delete(
  "interactionsRemoveRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  paramValidationFactory<t_InteractionsRemoveRestrictionsForOrgParamSchema>(
    interactionsRemoveRestrictionsForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_InteractionsRemoveRestrictionsForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-interactionsRemoveRestrictionsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsRemoveRestrictionsForOrg
  }
)

const orgsListPendingInvitationsParamSchema = z.object({
  org: z.coerce.string(),
})

const orgsListPendingInvitationsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListPendingInvitations",
  "/orgs/:org/invitations",
  paramValidationFactory<t_OrgsListPendingInvitationsParamSchema>(
    orgsListPendingInvitationsParamSchema
  ),
  queryValidationFactory<t_OrgsListPendingInvitationsQuerySchema>(
    orgsListPendingInvitationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsListPendingInvitationsParamSchema,
      t_OrgsListPendingInvitationsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListPendingInvitations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListPendingInvitations
  }
)

const orgsCreateInvitationParamSchema = z.object({ org: z.coerce.string() })

const orgsCreateInvitationBodySchema = z
  .object({
    invitee_id: z.coerce.number().optional(),
    email: z.coerce.string().optional(),
    role: z.coerce.string().optional(),
    team_ids: z.array(z.coerce.number().optional()).optional(),
  })
  .optional()

router.post(
  "orgsCreateInvitation",
  "/orgs/:org/invitations",
  paramValidationFactory<t_OrgsCreateInvitationParamSchema>(
    orgsCreateInvitationParamSchema
  ),
  bodyValidationFactory<t_OrgsCreateInvitationBodySchema>(
    orgsCreateInvitationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsCreateInvitationParamSchema,
      void,
      t_OrgsCreateInvitationBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsCreateInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCreateInvitation
  }
)

const orgsCancelInvitationParamSchema = z.object({
  org: z.coerce.string(),
  invitation_id: z.coerce.number(),
})

router.delete(
  "orgsCancelInvitation",
  "/orgs/:org/invitations/:invitationId",
  paramValidationFactory<t_OrgsCancelInvitationParamSchema>(
    orgsCancelInvitationParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsCancelInvitationParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsCancelInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCancelInvitation
  }
)

const orgsListInvitationTeamsParamSchema = z.object({
  org: z.coerce.string(),
  invitation_id: z.coerce.number(),
})

const orgsListInvitationTeamsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListInvitationTeams",
  "/orgs/:org/invitations/:invitationId/teams",
  paramValidationFactory<t_OrgsListInvitationTeamsParamSchema>(
    orgsListInvitationTeamsParamSchema
  ),
  queryValidationFactory<t_OrgsListInvitationTeamsQuerySchema>(
    orgsListInvitationTeamsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsListInvitationTeamsParamSchema,
      t_OrgsListInvitationTeamsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListInvitationTeams

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListInvitationTeams
  }
)

const issuesListForOrgParamSchema = z.object({ org: z.coerce.string() })

const issuesListForOrgQuerySchema = z.object({
  filter: z.coerce.string().optional(),
  state: z.coerce.string().optional(),
  labels: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  since: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListForOrg",
  "/orgs/:org/issues",
  paramValidationFactory<t_IssuesListForOrgParamSchema>(
    issuesListForOrgParamSchema
  ),
  queryValidationFactory<t_IssuesListForOrgQuerySchema>(
    issuesListForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListForOrgParamSchema,
      t_IssuesListForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListForOrg
  }
)

const orgsListMembersParamSchema = z.object({ org: z.coerce.string() })

const orgsListMembersQuerySchema = z.object({
  filter: z.coerce.string().optional(),
  role: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListMembers",
  "/orgs/:org/members",
  paramValidationFactory<t_OrgsListMembersParamSchema>(
    orgsListMembersParamSchema
  ),
  queryValidationFactory<t_OrgsListMembersQuerySchema>(
    orgsListMembersQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsListMembersParamSchema,
      t_OrgsListMembersQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListMembers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListMembers
  }
)

const orgsCheckMembershipForUserParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

router.get(
  "orgsCheckMembershipForUser",
  "/orgs/:org/members/:username",
  paramValidationFactory<t_OrgsCheckMembershipForUserParamSchema>(
    orgsCheckMembershipForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsCheckMembershipForUserParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsCheckMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCheckMembershipForUser
  }
)

const orgsRemoveMemberParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

router.delete(
  "orgsRemoveMember",
  "/orgs/:org/members/:username",
  paramValidationFactory<t_OrgsRemoveMemberParamSchema>(
    orgsRemoveMemberParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsRemoveMemberParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsRemoveMember

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveMember
  }
)

const codespacesGetCodespacesForUserInOrgParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

const codespacesGetCodespacesForUserInOrgQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "codespacesGetCodespacesForUserInOrg",
  "/orgs/:org/members/:username/codespaces",
  paramValidationFactory<t_CodespacesGetCodespacesForUserInOrgParamSchema>(
    codespacesGetCodespacesForUserInOrgParamSchema
  ),
  queryValidationFactory<t_CodespacesGetCodespacesForUserInOrgQuerySchema>(
    codespacesGetCodespacesForUserInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesGetCodespacesForUserInOrgParamSchema,
      t_CodespacesGetCodespacesForUserInOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesGetCodespacesForUserInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesGetCodespacesForUserInOrg
  }
)

const codespacesDeleteFromOrganizationParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
  codespace_name: z.coerce.string(),
})

router.delete(
  "codespacesDeleteFromOrganization",
  "/orgs/:org/members/:username/codespaces/:codespaceName",
  paramValidationFactory<t_CodespacesDeleteFromOrganizationParamSchema>(
    codespacesDeleteFromOrganizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesDeleteFromOrganizationParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesDeleteFromOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesDeleteFromOrganization
  }
)

const codespacesStopInOrganizationParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
  codespace_name: z.coerce.string(),
})

router.post(
  "codespacesStopInOrganization",
  "/orgs/:org/members/:username/codespaces/:codespaceName/stop",
  paramValidationFactory<t_CodespacesStopInOrganizationParamSchema>(
    codespacesStopInOrganizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodespacesStopInOrganizationParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codespacesStopInOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesStopInOrganization
  }
)

const orgsGetMembershipForUserParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

router.get(
  "orgsGetMembershipForUser",
  "/orgs/:org/memberships/:username",
  paramValidationFactory<t_OrgsGetMembershipForUserParamSchema>(
    orgsGetMembershipForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsGetMembershipForUserParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsGetMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGetMembershipForUser
  }
)

const orgsSetMembershipForUserParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

const orgsSetMembershipForUserBodySchema = z
  .object({ role: z.coerce.string().optional() })
  .optional()

router.put(
  "orgsSetMembershipForUser",
  "/orgs/:org/memberships/:username",
  paramValidationFactory<t_OrgsSetMembershipForUserParamSchema>(
    orgsSetMembershipForUserParamSchema
  ),
  bodyValidationFactory<t_OrgsSetMembershipForUserBodySchema>(
    orgsSetMembershipForUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsSetMembershipForUserParamSchema,
      void,
      t_OrgsSetMembershipForUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsSetMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsSetMembershipForUser
  }
)

const orgsRemoveMembershipForUserParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

router.delete(
  "orgsRemoveMembershipForUser",
  "/orgs/:org/memberships/:username",
  paramValidationFactory<t_OrgsRemoveMembershipForUserParamSchema>(
    orgsRemoveMembershipForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsRemoveMembershipForUserParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsRemoveMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveMembershipForUser
  }
)

const migrationsListForOrgParamSchema = z.object({ org: z.coerce.string() })

const migrationsListForOrgQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  exclude: z.array(z.coerce.string().optional()).optional(),
})

router.get(
  "migrationsListForOrg",
  "/orgs/:org/migrations",
  paramValidationFactory<t_MigrationsListForOrgParamSchema>(
    migrationsListForOrgParamSchema
  ),
  queryValidationFactory<t_MigrationsListForOrgQuerySchema>(
    migrationsListForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsListForOrgParamSchema,
      t_MigrationsListForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListForOrg
  }
)

const migrationsStartForOrgParamSchema = z.object({ org: z.coerce.string() })

const migrationsStartForOrgBodySchema = z.object({
  repositories: z.array(z.coerce.string().optional()),
  lock_repositories: z.coerce.boolean().optional(),
  exclude_metadata: z.coerce.boolean().optional(),
  exclude_git_data: z.coerce.boolean().optional(),
  exclude_attachments: z.coerce.boolean().optional(),
  exclude_releases: z.coerce.boolean().optional(),
  exclude_owner_projects: z.coerce.boolean().optional(),
  org_metadata_only: z.coerce.boolean().optional(),
  exclude: z.array(z.coerce.string().optional()).optional(),
})

router.post(
  "migrationsStartForOrg",
  "/orgs/:org/migrations",
  paramValidationFactory<t_MigrationsStartForOrgParamSchema>(
    migrationsStartForOrgParamSchema
  ),
  bodyValidationFactory<t_MigrationsStartForOrgBodySchema>(
    migrationsStartForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsStartForOrgParamSchema,
      void,
      t_MigrationsStartForOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsStartForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsStartForOrg
  }
)

const migrationsGetStatusForOrgParamSchema = z.object({
  org: z.coerce.string(),
  migration_id: z.coerce.number(),
})

const migrationsGetStatusForOrgQuerySchema = z.object({
  exclude: z.array(z.coerce.string().optional()).optional(),
})

router.get(
  "migrationsGetStatusForOrg",
  "/orgs/:org/migrations/:migrationId",
  paramValidationFactory<t_MigrationsGetStatusForOrgParamSchema>(
    migrationsGetStatusForOrgParamSchema
  ),
  queryValidationFactory<t_MigrationsGetStatusForOrgQuerySchema>(
    migrationsGetStatusForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsGetStatusForOrgParamSchema,
      t_MigrationsGetStatusForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsGetStatusForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetStatusForOrg
  }
)

const migrationsDownloadArchiveForOrgParamSchema = z.object({
  org: z.coerce.string(),
  migration_id: z.coerce.number(),
})

router.get(
  "migrationsDownloadArchiveForOrg",
  "/orgs/:org/migrations/:migrationId/archive",
  paramValidationFactory<t_MigrationsDownloadArchiveForOrgParamSchema>(
    migrationsDownloadArchiveForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_MigrationsDownloadArchiveForOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-migrationsDownloadArchiveForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsDownloadArchiveForOrg
  }
)

const migrationsDeleteArchiveForOrgParamSchema = z.object({
  org: z.coerce.string(),
  migration_id: z.coerce.number(),
})

router.delete(
  "migrationsDeleteArchiveForOrg",
  "/orgs/:org/migrations/:migrationId/archive",
  paramValidationFactory<t_MigrationsDeleteArchiveForOrgParamSchema>(
    migrationsDeleteArchiveForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_MigrationsDeleteArchiveForOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-migrationsDeleteArchiveForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsDeleteArchiveForOrg
  }
)

const migrationsUnlockRepoForOrgParamSchema = z.object({
  org: z.coerce.string(),
  migration_id: z.coerce.number(),
  repo_name: z.coerce.string(),
})

router.delete(
  "migrationsUnlockRepoForOrg",
  "/orgs/:org/migrations/:migrationId/repos/:repoName/lock",
  paramValidationFactory<t_MigrationsUnlockRepoForOrgParamSchema>(
    migrationsUnlockRepoForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_MigrationsUnlockRepoForOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-migrationsUnlockRepoForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsUnlockRepoForOrg
  }
)

const migrationsListReposForOrgParamSchema = z.object({
  org: z.coerce.string(),
  migration_id: z.coerce.number(),
})

const migrationsListReposForOrgQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "migrationsListReposForOrg",
  "/orgs/:org/migrations/:migrationId/repositories",
  paramValidationFactory<t_MigrationsListReposForOrgParamSchema>(
    migrationsListReposForOrgParamSchema
  ),
  queryValidationFactory<t_MigrationsListReposForOrgQuerySchema>(
    migrationsListReposForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsListReposForOrgParamSchema,
      t_MigrationsListReposForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsListReposForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListReposForOrg
  }
)

const orgsListOutsideCollaboratorsParamSchema = z.object({
  org: z.coerce.string(),
})

const orgsListOutsideCollaboratorsQuerySchema = z.object({
  filter: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListOutsideCollaborators",
  "/orgs/:org/outside_collaborators",
  paramValidationFactory<t_OrgsListOutsideCollaboratorsParamSchema>(
    orgsListOutsideCollaboratorsParamSchema
  ),
  queryValidationFactory<t_OrgsListOutsideCollaboratorsQuerySchema>(
    orgsListOutsideCollaboratorsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsListOutsideCollaboratorsParamSchema,
      t_OrgsListOutsideCollaboratorsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListOutsideCollaborators

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListOutsideCollaborators
  }
)

const orgsConvertMemberToOutsideCollaboratorParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

const orgsConvertMemberToOutsideCollaboratorBodySchema = z
  .object({ async: z.coerce.boolean().optional() })
  .optional()

router.put(
  "orgsConvertMemberToOutsideCollaborator",
  "/orgs/:org/outside_collaborators/:username",
  paramValidationFactory<t_OrgsConvertMemberToOutsideCollaboratorParamSchema>(
    orgsConvertMemberToOutsideCollaboratorParamSchema
  ),
  bodyValidationFactory<t_OrgsConvertMemberToOutsideCollaboratorBodySchema>(
    orgsConvertMemberToOutsideCollaboratorBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsConvertMemberToOutsideCollaboratorParamSchema,
      void,
      t_OrgsConvertMemberToOutsideCollaboratorBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsConvertMemberToOutsideCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsConvertMemberToOutsideCollaborator
  }
)

const orgsRemoveOutsideCollaboratorParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

router.delete(
  "orgsRemoveOutsideCollaborator",
  "/orgs/:org/outside_collaborators/:username",
  paramValidationFactory<t_OrgsRemoveOutsideCollaboratorParamSchema>(
    orgsRemoveOutsideCollaboratorParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsRemoveOutsideCollaboratorParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsRemoveOutsideCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveOutsideCollaborator
  }
)

const packagesListPackagesForOrganizationParamSchema = z.object({
  org: z.coerce.string(),
})

const packagesListPackagesForOrganizationQuerySchema = z.object({
  package_type: z.coerce.string(),
  visibility: z.coerce.string().optional(),
})

router.get(
  "packagesListPackagesForOrganization",
  "/orgs/:org/packages",
  paramValidationFactory<t_PackagesListPackagesForOrganizationParamSchema>(
    packagesListPackagesForOrganizationParamSchema
  ),
  queryValidationFactory<t_PackagesListPackagesForOrganizationQuerySchema>(
    packagesListPackagesForOrganizationQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesListPackagesForOrganizationParamSchema,
      t_PackagesListPackagesForOrganizationQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesListPackagesForOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesListPackagesForOrganization
  }
)

const packagesGetPackageForOrganizationParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  org: z.coerce.string(),
})

router.get(
  "packagesGetPackageForOrganization",
  "/orgs/:org/packages/:packageType/:packageName",
  paramValidationFactory<t_PackagesGetPackageForOrganizationParamSchema>(
    packagesGetPackageForOrganizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesGetPackageForOrganizationParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesGetPackageForOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesGetPackageForOrganization
  }
)

const packagesDeletePackageForOrgParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  org: z.coerce.string(),
})

router.delete(
  "packagesDeletePackageForOrg",
  "/orgs/:org/packages/:packageType/:packageName",
  paramValidationFactory<t_PackagesDeletePackageForOrgParamSchema>(
    packagesDeletePackageForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_PackagesDeletePackageForOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-packagesDeletePackageForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesDeletePackageForOrg
  }
)

const packagesRestorePackageForOrgParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  org: z.coerce.string(),
})

const packagesRestorePackageForOrgQuerySchema = z.object({
  token: z.coerce.string().optional(),
})

router.post(
  "packagesRestorePackageForOrg",
  "/orgs/:org/packages/:packageType/:packageName/restore",
  paramValidationFactory<t_PackagesRestorePackageForOrgParamSchema>(
    packagesRestorePackageForOrgParamSchema
  ),
  queryValidationFactory<t_PackagesRestorePackageForOrgQuerySchema>(
    packagesRestorePackageForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesRestorePackageForOrgParamSchema,
      t_PackagesRestorePackageForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesRestorePackageForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesRestorePackageForOrg
  }
)

const packagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  org: z.coerce.string(),
})

const packagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema = z.object({
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
  state: z.coerce.string().optional(),
})

router.get(
  "packagesGetAllPackageVersionsForPackageOwnedByOrg",
  "/orgs/:org/packages/:packageType/:packageName/versions",
  paramValidationFactory<t_PackagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema>(
    packagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema
  ),
  queryValidationFactory<t_PackagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema>(
    packagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesGetAllPackageVersionsForPackageOwnedByOrgParamSchema,
      t_PackagesGetAllPackageVersionsForPackageOwnedByOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesGetAllPackageVersionsForPackageOwnedByOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesGetAllPackageVersionsForPackageOwnedByOrg
  }
)

const packagesGetPackageVersionForOrganizationParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  org: z.coerce.string(),
  package_version_id: z.coerce.number(),
})

router.get(
  "packagesGetPackageVersionForOrganization",
  "/orgs/:org/packages/:packageType/:packageName/versions/:packageVersionId",
  paramValidationFactory<t_PackagesGetPackageVersionForOrganizationParamSchema>(
    packagesGetPackageVersionForOrganizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesGetPackageVersionForOrganizationParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesGetPackageVersionForOrganization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesGetPackageVersionForOrganization
  }
)

const packagesDeletePackageVersionForOrgParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  org: z.coerce.string(),
  package_version_id: z.coerce.number(),
})

router.delete(
  "packagesDeletePackageVersionForOrg",
  "/orgs/:org/packages/:packageType/:packageName/versions/:packageVersionId",
  paramValidationFactory<t_PackagesDeletePackageVersionForOrgParamSchema>(
    packagesDeletePackageVersionForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesDeletePackageVersionForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesDeletePackageVersionForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesDeletePackageVersionForOrg
  }
)

const packagesRestorePackageVersionForOrgParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  org: z.coerce.string(),
  package_version_id: z.coerce.number(),
})

router.post(
  "packagesRestorePackageVersionForOrg",
  "/orgs/:org/packages/:packageType/:packageName/versions/:packageVersionId/restore",
  paramValidationFactory<t_PackagesRestorePackageVersionForOrgParamSchema>(
    packagesRestorePackageVersionForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesRestorePackageVersionForOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesRestorePackageVersionForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesRestorePackageVersionForOrg
  }
)

const projectsListForOrgParamSchema = z.object({ org: z.coerce.string() })

const projectsListForOrgQuerySchema = z.object({
  state: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "projectsListForOrg",
  "/orgs/:org/projects",
  paramValidationFactory<t_ProjectsListForOrgParamSchema>(
    projectsListForOrgParamSchema
  ),
  queryValidationFactory<t_ProjectsListForOrgQuerySchema>(
    projectsListForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsListForOrgParamSchema,
      t_ProjectsListForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListForOrg
  }
)

const projectsCreateForOrgParamSchema = z.object({ org: z.coerce.string() })

const projectsCreateForOrgBodySchema = z.object({
  name: z.coerce.string(),
  body: z.coerce.string().optional(),
})

router.post(
  "projectsCreateForOrg",
  "/orgs/:org/projects",
  paramValidationFactory<t_ProjectsCreateForOrgParamSchema>(
    projectsCreateForOrgParamSchema
  ),
  bodyValidationFactory<t_ProjectsCreateForOrgBodySchema>(
    projectsCreateForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsCreateForOrgParamSchema,
      void,
      t_ProjectsCreateForOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsCreateForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateForOrg
  }
)

const orgsListPublicMembersParamSchema = z.object({ org: z.coerce.string() })

const orgsListPublicMembersQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListPublicMembers",
  "/orgs/:org/public_members",
  paramValidationFactory<t_OrgsListPublicMembersParamSchema>(
    orgsListPublicMembersParamSchema
  ),
  queryValidationFactory<t_OrgsListPublicMembersQuerySchema>(
    orgsListPublicMembersQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsListPublicMembersParamSchema,
      t_OrgsListPublicMembersQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListPublicMembers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListPublicMembers
  }
)

const orgsCheckPublicMembershipForUserParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

router.get(
  "orgsCheckPublicMembershipForUser",
  "/orgs/:org/public_members/:username",
  paramValidationFactory<t_OrgsCheckPublicMembershipForUserParamSchema>(
    orgsCheckPublicMembershipForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsCheckPublicMembershipForUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsCheckPublicMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCheckPublicMembershipForUser
  }
)

const orgsSetPublicMembershipForAuthenticatedUserParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

router.put(
  "orgsSetPublicMembershipForAuthenticatedUser",
  "/orgs/:org/public_members/:username",
  paramValidationFactory<t_OrgsSetPublicMembershipForAuthenticatedUserParamSchema>(
    orgsSetPublicMembershipForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsSetPublicMembershipForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsSetPublicMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsSetPublicMembershipForAuthenticatedUser
  }
)

const orgsRemovePublicMembershipForAuthenticatedUserParamSchema = z.object({
  org: z.coerce.string(),
  username: z.coerce.string(),
})

router.delete(
  "orgsRemovePublicMembershipForAuthenticatedUser",
  "/orgs/:org/public_members/:username",
  paramValidationFactory<t_OrgsRemovePublicMembershipForAuthenticatedUserParamSchema>(
    orgsRemovePublicMembershipForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsRemovePublicMembershipForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsRemovePublicMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemovePublicMembershipForAuthenticatedUser
  }
)

const reposListForOrgParamSchema = z.object({ org: z.coerce.string() })

const reposListForOrgQuerySchema = z.object({
  type: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListForOrg",
  "/orgs/:org/repos",
  paramValidationFactory<t_ReposListForOrgParamSchema>(
    reposListForOrgParamSchema
  ),
  queryValidationFactory<t_ReposListForOrgQuerySchema>(
    reposListForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListForOrgParamSchema,
      t_ReposListForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForOrg
  }
)

const reposCreateInOrgParamSchema = z.object({ org: z.coerce.string() })

const reposCreateInOrgBodySchema = z.object({
  name: z.coerce.string(),
  description: z.coerce.string().optional(),
  homepage: z.coerce.string().optional(),
  private: z.coerce.boolean().optional(),
  visibility: z.coerce.string().optional(),
  has_issues: z.coerce.boolean().optional(),
  has_projects: z.coerce.boolean().optional(),
  has_wiki: z.coerce.boolean().optional(),
  has_downloads: z.coerce.boolean().optional(),
  is_template: z.coerce.boolean().optional(),
  team_id: z.coerce.number().optional(),
  auto_init: z.coerce.boolean().optional(),
  gitignore_template: z.coerce.string().optional(),
  license_template: z.coerce.string().optional(),
  allow_squash_merge: z.coerce.boolean().optional(),
  allow_merge_commit: z.coerce.boolean().optional(),
  allow_rebase_merge: z.coerce.boolean().optional(),
  allow_auto_merge: z.coerce.boolean().optional(),
  delete_branch_on_merge: z.coerce.boolean().optional(),
  use_squash_pr_title_as_default: z.coerce.boolean().optional(),
  squash_merge_commit_title: z.coerce.string().optional(),
  squash_merge_commit_message: z.coerce.string().optional(),
  merge_commit_title: z.coerce.string().optional(),
  merge_commit_message: z.coerce.string().optional(),
})

router.post(
  "reposCreateInOrg",
  "/orgs/:org/repos",
  paramValidationFactory<t_ReposCreateInOrgParamSchema>(
    reposCreateInOrgParamSchema
  ),
  bodyValidationFactory<t_ReposCreateInOrgBodySchema>(
    reposCreateInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateInOrgParamSchema,
      void,
      t_ReposCreateInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateInOrg
  }
)

const secretScanningListAlertsForOrgParamSchema = z.object({
  org: z.coerce.string(),
})

const secretScanningListAlertsForOrgQuerySchema = z.object({
  state: z.coerce.string().optional(),
  secret_type: z.coerce.string().optional(),
  resolution: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
  before: z.coerce.string().optional(),
  after: z.coerce.string().optional(),
})

router.get(
  "secretScanningListAlertsForOrg",
  "/orgs/:org/secret-scanning/alerts",
  paramValidationFactory<t_SecretScanningListAlertsForOrgParamSchema>(
    secretScanningListAlertsForOrgParamSchema
  ),
  queryValidationFactory<t_SecretScanningListAlertsForOrgQuerySchema>(
    secretScanningListAlertsForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_SecretScanningListAlertsForOrgParamSchema,
      t_SecretScanningListAlertsForOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-secretScanningListAlertsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-secretScanningListAlertsForOrg
  }
)

const orgsListSecurityManagerTeamsParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "orgsListSecurityManagerTeams",
  "/orgs/:org/security-managers",
  paramValidationFactory<t_OrgsListSecurityManagerTeamsParamSchema>(
    orgsListSecurityManagerTeamsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsListSecurityManagerTeamsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsListSecurityManagerTeams

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListSecurityManagerTeams
  }
)

const orgsAddSecurityManagerTeamParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

router.put(
  "orgsAddSecurityManagerTeam",
  "/orgs/:org/security-managers/teams/:teamSlug",
  paramValidationFactory<t_OrgsAddSecurityManagerTeamParamSchema>(
    orgsAddSecurityManagerTeamParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsAddSecurityManagerTeamParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsAddSecurityManagerTeam

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsAddSecurityManagerTeam
  }
)

const orgsRemoveSecurityManagerTeamParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

router.delete(
  "orgsRemoveSecurityManagerTeam",
  "/orgs/:org/security-managers/teams/:teamSlug",
  paramValidationFactory<t_OrgsRemoveSecurityManagerTeamParamSchema>(
    orgsRemoveSecurityManagerTeamParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_OrgsRemoveSecurityManagerTeamParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsRemoveSecurityManagerTeam

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveSecurityManagerTeam
  }
)

const billingGetGithubActionsBillingOrgParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "billingGetGithubActionsBillingOrg",
  "/orgs/:org/settings/billing/actions",
  paramValidationFactory<t_BillingGetGithubActionsBillingOrgParamSchema>(
    billingGetGithubActionsBillingOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_BillingGetGithubActionsBillingOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-billingGetGithubActionsBillingOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-billingGetGithubActionsBillingOrg
  }
)

const billingGetGithubPackagesBillingOrgParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "billingGetGithubPackagesBillingOrg",
  "/orgs/:org/settings/billing/packages",
  paramValidationFactory<t_BillingGetGithubPackagesBillingOrgParamSchema>(
    billingGetGithubPackagesBillingOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_BillingGetGithubPackagesBillingOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-billingGetGithubPackagesBillingOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-billingGetGithubPackagesBillingOrg
  }
)

const billingGetSharedStorageBillingOrgParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "billingGetSharedStorageBillingOrg",
  "/orgs/:org/settings/billing/shared-storage",
  paramValidationFactory<t_BillingGetSharedStorageBillingOrgParamSchema>(
    billingGetSharedStorageBillingOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_BillingGetSharedStorageBillingOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-billingGetSharedStorageBillingOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-billingGetSharedStorageBillingOrg
  }
)

const teamsListParamSchema = z.object({ org: z.coerce.string() })

const teamsListQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsList",
  "/orgs/:org/teams",
  paramValidationFactory<t_TeamsListParamSchema>(teamsListParamSchema),
  queryValidationFactory<t_TeamsListQuerySchema>(teamsListQuerySchema),
  async (
    ctx: ValidatedCtx<t_TeamsListParamSchema, t_TeamsListQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsList
  }
)

const teamsCreateParamSchema = z.object({ org: z.coerce.string() })

const teamsCreateBodySchema = z.object({
  name: z.coerce.string(),
  description: z.coerce.string().optional(),
  maintainers: z.array(z.coerce.string().optional()).optional(),
  repo_names: z.array(z.coerce.string().optional()).optional(),
  privacy: z.coerce.string().optional(),
  permission: z.coerce.string().optional(),
  parent_team_id: z.coerce.number().optional(),
})

router.post(
  "teamsCreate",
  "/orgs/:org/teams",
  paramValidationFactory<t_TeamsCreateParamSchema>(teamsCreateParamSchema),
  bodyValidationFactory<t_TeamsCreateBodySchema>(teamsCreateBodySchema),
  async (
    ctx: ValidatedCtx<t_TeamsCreateParamSchema, void, t_TeamsCreateBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-teamsCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreate
  }
)

const teamsGetByNameParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

router.get(
  "teamsGetByName",
  "/orgs/:org/teams/:teamSlug",
  paramValidationFactory<t_TeamsGetByNameParamSchema>(
    teamsGetByNameParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsGetByNameParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsGetByName

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetByName
  }
)

const teamsUpdateInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

const teamsUpdateInOrgBodySchema = z
  .object({
    name: z.coerce.string().optional(),
    description: z.coerce.string().optional(),
    privacy: z.coerce.string().optional(),
    permission: z.coerce.string().optional(),
    parent_team_id: z.coerce.number().optional(),
  })
  .optional()

router.patch(
  "teamsUpdateInOrg",
  "/orgs/:org/teams/:teamSlug",
  paramValidationFactory<t_TeamsUpdateInOrgParamSchema>(
    teamsUpdateInOrgParamSchema
  ),
  bodyValidationFactory<t_TeamsUpdateInOrgBodySchema>(
    teamsUpdateInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsUpdateInOrgParamSchema,
      void,
      t_TeamsUpdateInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsUpdateInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateInOrg
  }
)

const teamsDeleteInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

router.delete(
  "teamsDeleteInOrg",
  "/orgs/:org/teams/:teamSlug",
  paramValidationFactory<t_TeamsDeleteInOrgParamSchema>(
    teamsDeleteInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsDeleteInOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsDeleteInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteInOrg
  }
)

const teamsListDiscussionsInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

const teamsListDiscussionsInOrgQuerySchema = z.object({
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  pinned: z.coerce.string().optional(),
})

router.get(
  "teamsListDiscussionsInOrg",
  "/orgs/:org/teams/:teamSlug/discussions",
  paramValidationFactory<t_TeamsListDiscussionsInOrgParamSchema>(
    teamsListDiscussionsInOrgParamSchema
  ),
  queryValidationFactory<t_TeamsListDiscussionsInOrgQuerySchema>(
    teamsListDiscussionsInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListDiscussionsInOrgParamSchema,
      t_TeamsListDiscussionsInOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListDiscussionsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionsInOrg
  }
)

const teamsCreateDiscussionInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

const teamsCreateDiscussionInOrgBodySchema = z.object({
  title: z.coerce.string(),
  body: z.coerce.string(),
  private: z.coerce.boolean().optional(),
})

router.post(
  "teamsCreateDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions",
  paramValidationFactory<t_TeamsCreateDiscussionInOrgParamSchema>(
    teamsCreateDiscussionInOrgParamSchema
  ),
  bodyValidationFactory<t_TeamsCreateDiscussionInOrgBodySchema>(
    teamsCreateDiscussionInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsCreateDiscussionInOrgParamSchema,
      void,
      t_TeamsCreateDiscussionInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsCreateDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionInOrg
  }
)

const teamsGetDiscussionInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
})

router.get(
  "teamsGetDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  paramValidationFactory<t_TeamsGetDiscussionInOrgParamSchema>(
    teamsGetDiscussionInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsGetDiscussionInOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsGetDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionInOrg
  }
)

const teamsUpdateDiscussionInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
})

const teamsUpdateDiscussionInOrgBodySchema = z
  .object({
    title: z.coerce.string().optional(),
    body: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "teamsUpdateDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  paramValidationFactory<t_TeamsUpdateDiscussionInOrgParamSchema>(
    teamsUpdateDiscussionInOrgParamSchema
  ),
  bodyValidationFactory<t_TeamsUpdateDiscussionInOrgBodySchema>(
    teamsUpdateDiscussionInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsUpdateDiscussionInOrgParamSchema,
      void,
      t_TeamsUpdateDiscussionInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsUpdateDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionInOrg
  }
)

const teamsDeleteDiscussionInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
})

router.delete(
  "teamsDeleteDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  paramValidationFactory<t_TeamsDeleteDiscussionInOrgParamSchema>(
    teamsDeleteDiscussionInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsDeleteDiscussionInOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsDeleteDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionInOrg
  }
)

const teamsListDiscussionCommentsInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
})

const teamsListDiscussionCommentsInOrgQuerySchema = z.object({
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListDiscussionCommentsInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments",
  paramValidationFactory<t_TeamsListDiscussionCommentsInOrgParamSchema>(
    teamsListDiscussionCommentsInOrgParamSchema
  ),
  queryValidationFactory<t_TeamsListDiscussionCommentsInOrgQuerySchema>(
    teamsListDiscussionCommentsInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListDiscussionCommentsInOrgParamSchema,
      t_TeamsListDiscussionCommentsInOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListDiscussionCommentsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionCommentsInOrg
  }
)

const teamsCreateDiscussionCommentInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
})

const teamsCreateDiscussionCommentInOrgBodySchema = z.object({
  body: z.coerce.string(),
})

router.post(
  "teamsCreateDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments",
  paramValidationFactory<t_TeamsCreateDiscussionCommentInOrgParamSchema>(
    teamsCreateDiscussionCommentInOrgParamSchema
  ),
  bodyValidationFactory<t_TeamsCreateDiscussionCommentInOrgBodySchema>(
    teamsCreateDiscussionCommentInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsCreateDiscussionCommentInOrgParamSchema,
      void,
      t_TeamsCreateDiscussionCommentInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsCreateDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionCommentInOrg
  }
)

const teamsGetDiscussionCommentInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
  comment_number: z.coerce.number(),
})

router.get(
  "teamsGetDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<t_TeamsGetDiscussionCommentInOrgParamSchema>(
    teamsGetDiscussionCommentInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsGetDiscussionCommentInOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsGetDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionCommentInOrg
  }
)

const teamsUpdateDiscussionCommentInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
  comment_number: z.coerce.number(),
})

const teamsUpdateDiscussionCommentInOrgBodySchema = z.object({
  body: z.coerce.string(),
})

router.patch(
  "teamsUpdateDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<t_TeamsUpdateDiscussionCommentInOrgParamSchema>(
    teamsUpdateDiscussionCommentInOrgParamSchema
  ),
  bodyValidationFactory<t_TeamsUpdateDiscussionCommentInOrgBodySchema>(
    teamsUpdateDiscussionCommentInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsUpdateDiscussionCommentInOrgParamSchema,
      void,
      t_TeamsUpdateDiscussionCommentInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsUpdateDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionCommentInOrg
  }
)

const teamsDeleteDiscussionCommentInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
  comment_number: z.coerce.number(),
})

router.delete(
  "teamsDeleteDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<t_TeamsDeleteDiscussionCommentInOrgParamSchema>(
    teamsDeleteDiscussionCommentInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsDeleteDiscussionCommentInOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsDeleteDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionCommentInOrg
  }
)

const reactionsListForTeamDiscussionCommentInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
  comment_number: z.coerce.number(),
})

const reactionsListForTeamDiscussionCommentInOrgQuerySchema = z.object({
  content: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reactionsListForTeamDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<t_ReactionsListForTeamDiscussionCommentInOrgParamSchema>(
    reactionsListForTeamDiscussionCommentInOrgParamSchema
  ),
  queryValidationFactory<t_ReactionsListForTeamDiscussionCommentInOrgQuerySchema>(
    reactionsListForTeamDiscussionCommentInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsListForTeamDiscussionCommentInOrgParamSchema,
      t_ReactionsListForTeamDiscussionCommentInOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsListForTeamDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionCommentInOrg
  }
)

const reactionsCreateForTeamDiscussionCommentInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
  comment_number: z.coerce.number(),
})

const reactionsCreateForTeamDiscussionCommentInOrgBodySchema = z.object({
  content: z.coerce.string(),
})

router.post(
  "reactionsCreateForTeamDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<t_ReactionsCreateForTeamDiscussionCommentInOrgParamSchema>(
    reactionsCreateForTeamDiscussionCommentInOrgParamSchema
  ),
  bodyValidationFactory<t_ReactionsCreateForTeamDiscussionCommentInOrgBodySchema>(
    reactionsCreateForTeamDiscussionCommentInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsCreateForTeamDiscussionCommentInOrgParamSchema,
      void,
      t_ReactionsCreateForTeamDiscussionCommentInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionCommentInOrg
  }
)

const reactionsDeleteForTeamDiscussionCommentParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
  comment_number: z.coerce.number(),
  reaction_id: z.coerce.number(),
})

router.delete(
  "reactionsDeleteForTeamDiscussionComment",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions/:reactionId",
  paramValidationFactory<t_ReactionsDeleteForTeamDiscussionCommentParamSchema>(
    reactionsDeleteForTeamDiscussionCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsDeleteForTeamDiscussionCommentParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsDeleteForTeamDiscussionComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForTeamDiscussionComment
  }
)

const reactionsListForTeamDiscussionInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
})

const reactionsListForTeamDiscussionInOrgQuerySchema = z.object({
  content: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reactionsListForTeamDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions",
  paramValidationFactory<t_ReactionsListForTeamDiscussionInOrgParamSchema>(
    reactionsListForTeamDiscussionInOrgParamSchema
  ),
  queryValidationFactory<t_ReactionsListForTeamDiscussionInOrgQuerySchema>(
    reactionsListForTeamDiscussionInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsListForTeamDiscussionInOrgParamSchema,
      t_ReactionsListForTeamDiscussionInOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsListForTeamDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionInOrg
  }
)

const reactionsCreateForTeamDiscussionInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
})

const reactionsCreateForTeamDiscussionInOrgBodySchema = z.object({
  content: z.coerce.string(),
})

router.post(
  "reactionsCreateForTeamDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions",
  paramValidationFactory<t_ReactionsCreateForTeamDiscussionInOrgParamSchema>(
    reactionsCreateForTeamDiscussionInOrgParamSchema
  ),
  bodyValidationFactory<t_ReactionsCreateForTeamDiscussionInOrgBodySchema>(
    reactionsCreateForTeamDiscussionInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsCreateForTeamDiscussionInOrgParamSchema,
      void,
      t_ReactionsCreateForTeamDiscussionInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionInOrg
  }
)

const reactionsDeleteForTeamDiscussionParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  discussion_number: z.coerce.number(),
  reaction_id: z.coerce.number(),
})

router.delete(
  "reactionsDeleteForTeamDiscussion",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions/:reactionId",
  paramValidationFactory<t_ReactionsDeleteForTeamDiscussionParamSchema>(
    reactionsDeleteForTeamDiscussionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsDeleteForTeamDiscussionParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsDeleteForTeamDiscussion

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForTeamDiscussion
  }
)

const teamsListPendingInvitationsInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

const teamsListPendingInvitationsInOrgQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListPendingInvitationsInOrg",
  "/orgs/:org/teams/:teamSlug/invitations",
  paramValidationFactory<t_TeamsListPendingInvitationsInOrgParamSchema>(
    teamsListPendingInvitationsInOrgParamSchema
  ),
  queryValidationFactory<t_TeamsListPendingInvitationsInOrgQuerySchema>(
    teamsListPendingInvitationsInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListPendingInvitationsInOrgParamSchema,
      t_TeamsListPendingInvitationsInOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListPendingInvitationsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListPendingInvitationsInOrg
  }
)

const teamsListMembersInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

const teamsListMembersInOrgQuerySchema = z.object({
  role: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListMembersInOrg",
  "/orgs/:org/teams/:teamSlug/members",
  paramValidationFactory<t_TeamsListMembersInOrgParamSchema>(
    teamsListMembersInOrgParamSchema
  ),
  queryValidationFactory<t_TeamsListMembersInOrgQuerySchema>(
    teamsListMembersInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListMembersInOrgParamSchema,
      t_TeamsListMembersInOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListMembersInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListMembersInOrg
  }
)

const teamsGetMembershipForUserInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  username: z.coerce.string(),
})

router.get(
  "teamsGetMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  paramValidationFactory<t_TeamsGetMembershipForUserInOrgParamSchema>(
    teamsGetMembershipForUserInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsGetMembershipForUserInOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsGetMembershipForUserInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetMembershipForUserInOrg
  }
)

const teamsAddOrUpdateMembershipForUserInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  username: z.coerce.string(),
})

const teamsAddOrUpdateMembershipForUserInOrgBodySchema = z
  .object({ role: z.coerce.string().optional() })
  .optional()

router.put(
  "teamsAddOrUpdateMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  paramValidationFactory<t_TeamsAddOrUpdateMembershipForUserInOrgParamSchema>(
    teamsAddOrUpdateMembershipForUserInOrgParamSchema
  ),
  bodyValidationFactory<t_TeamsAddOrUpdateMembershipForUserInOrgBodySchema>(
    teamsAddOrUpdateMembershipForUserInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsAddOrUpdateMembershipForUserInOrgParamSchema,
      void,
      t_TeamsAddOrUpdateMembershipForUserInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateMembershipForUserInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateMembershipForUserInOrg
  }
)

const teamsRemoveMembershipForUserInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  username: z.coerce.string(),
})

router.delete(
  "teamsRemoveMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  paramValidationFactory<t_TeamsRemoveMembershipForUserInOrgParamSchema>(
    teamsRemoveMembershipForUserInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsRemoveMembershipForUserInOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsRemoveMembershipForUserInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveMembershipForUserInOrg
  }
)

const teamsListProjectsInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

const teamsListProjectsInOrgQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListProjectsInOrg",
  "/orgs/:org/teams/:teamSlug/projects",
  paramValidationFactory<t_TeamsListProjectsInOrgParamSchema>(
    teamsListProjectsInOrgParamSchema
  ),
  queryValidationFactory<t_TeamsListProjectsInOrgQuerySchema>(
    teamsListProjectsInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListProjectsInOrgParamSchema,
      t_TeamsListProjectsInOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListProjectsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListProjectsInOrg
  }
)

const teamsCheckPermissionsForProjectInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  project_id: z.coerce.number(),
})

router.get(
  "teamsCheckPermissionsForProjectInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  paramValidationFactory<t_TeamsCheckPermissionsForProjectInOrgParamSchema>(
    teamsCheckPermissionsForProjectInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsCheckPermissionsForProjectInOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsCheckPermissionsForProjectInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForProjectInOrg
  }
)

const teamsAddOrUpdateProjectPermissionsInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  project_id: z.coerce.number(),
})

const teamsAddOrUpdateProjectPermissionsInOrgBodySchema = z
  .object({ permission: z.coerce.string().optional() })
  .optional()

router.put(
  "teamsAddOrUpdateProjectPermissionsInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  paramValidationFactory<t_TeamsAddOrUpdateProjectPermissionsInOrgParamSchema>(
    teamsAddOrUpdateProjectPermissionsInOrgParamSchema
  ),
  bodyValidationFactory<t_TeamsAddOrUpdateProjectPermissionsInOrgBodySchema>(
    teamsAddOrUpdateProjectPermissionsInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsAddOrUpdateProjectPermissionsInOrgParamSchema,
      void,
      t_TeamsAddOrUpdateProjectPermissionsInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateProjectPermissionsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateProjectPermissionsInOrg
  }
)

const teamsRemoveProjectInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  project_id: z.coerce.number(),
})

router.delete(
  "teamsRemoveProjectInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  paramValidationFactory<t_TeamsRemoveProjectInOrgParamSchema>(
    teamsRemoveProjectInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsRemoveProjectInOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsRemoveProjectInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveProjectInOrg
  }
)

const teamsListReposInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

const teamsListReposInOrgQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListReposInOrg",
  "/orgs/:org/teams/:teamSlug/repos",
  paramValidationFactory<t_TeamsListReposInOrgParamSchema>(
    teamsListReposInOrgParamSchema
  ),
  queryValidationFactory<t_TeamsListReposInOrgQuerySchema>(
    teamsListReposInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListReposInOrgParamSchema,
      t_TeamsListReposInOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListReposInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListReposInOrg
  }
)

const teamsCheckPermissionsForRepoInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "teamsCheckPermissionsForRepoInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  paramValidationFactory<t_TeamsCheckPermissionsForRepoInOrgParamSchema>(
    teamsCheckPermissionsForRepoInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsCheckPermissionsForRepoInOrgParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsCheckPermissionsForRepoInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForRepoInOrg
  }
)

const teamsAddOrUpdateRepoPermissionsInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const teamsAddOrUpdateRepoPermissionsInOrgBodySchema = z
  .object({ permission: z.coerce.string().optional() })
  .optional()

router.put(
  "teamsAddOrUpdateRepoPermissionsInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  paramValidationFactory<t_TeamsAddOrUpdateRepoPermissionsInOrgParamSchema>(
    teamsAddOrUpdateRepoPermissionsInOrgParamSchema
  ),
  bodyValidationFactory<t_TeamsAddOrUpdateRepoPermissionsInOrgBodySchema>(
    teamsAddOrUpdateRepoPermissionsInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsAddOrUpdateRepoPermissionsInOrgParamSchema,
      void,
      t_TeamsAddOrUpdateRepoPermissionsInOrgBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateRepoPermissionsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateRepoPermissionsInOrg
  }
)

const teamsRemoveRepoInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.delete(
  "teamsRemoveRepoInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  paramValidationFactory<t_TeamsRemoveRepoInOrgParamSchema>(
    teamsRemoveRepoInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsRemoveRepoInOrgParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsRemoveRepoInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveRepoInOrg
  }
)

const teamsListChildInOrgParamSchema = z.object({
  org: z.coerce.string(),
  team_slug: z.coerce.string(),
})

const teamsListChildInOrgQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListChildInOrg",
  "/orgs/:org/teams/:teamSlug/teams",
  paramValidationFactory<t_TeamsListChildInOrgParamSchema>(
    teamsListChildInOrgParamSchema
  ),
  queryValidationFactory<t_TeamsListChildInOrgQuerySchema>(
    teamsListChildInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListChildInOrgParamSchema,
      t_TeamsListChildInOrgQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListChildInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListChildInOrg
  }
)

const orgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema = z.object({
  org: z.coerce.string(),
  security_product: z.coerce.string(),
  enablement: z.coerce.string(),
})

router.post(
  "orgsEnableOrDisableSecurityProductOnAllOrgRepos",
  "/orgs/:org/:securityProduct/:enablement",
  paramValidationFactory<t_OrgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema>(
    orgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsEnableOrDisableSecurityProductOnAllOrgReposParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsEnableOrDisableSecurityProductOnAllOrgRepos

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsEnableOrDisableSecurityProductOnAllOrgRepos
  }
)

const projectsGetCardParamSchema = z.object({ card_id: z.coerce.number() })

router.get(
  "projectsGetCard",
  "/projects/columns/cards/:cardId",
  paramValidationFactory<t_ProjectsGetCardParamSchema>(
    projectsGetCardParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ProjectsGetCardParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-projectsGetCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGetCard
  }
)

const projectsUpdateCardParamSchema = z.object({ card_id: z.coerce.number() })

const projectsUpdateCardBodySchema = z
  .object({
    note: z.coerce.string().optional(),
    archived: z.coerce.boolean().optional(),
  })
  .optional()

router.patch(
  "projectsUpdateCard",
  "/projects/columns/cards/:cardId",
  paramValidationFactory<t_ProjectsUpdateCardParamSchema>(
    projectsUpdateCardParamSchema
  ),
  bodyValidationFactory<t_ProjectsUpdateCardBodySchema>(
    projectsUpdateCardBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsUpdateCardParamSchema,
      void,
      t_ProjectsUpdateCardBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsUpdateCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsUpdateCard
  }
)

const projectsDeleteCardParamSchema = z.object({ card_id: z.coerce.number() })

router.delete(
  "projectsDeleteCard",
  "/projects/columns/cards/:cardId",
  paramValidationFactory<t_ProjectsDeleteCardParamSchema>(
    projectsDeleteCardParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ProjectsDeleteCardParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-projectsDeleteCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsDeleteCard
  }
)

const projectsMoveCardParamSchema = z.object({ card_id: z.coerce.number() })

const projectsMoveCardBodySchema = z.object({
  position: z.coerce.string(),
  column_id: z.coerce.number().optional(),
})

router.post(
  "projectsMoveCard",
  "/projects/columns/cards/:cardId/moves",
  paramValidationFactory<t_ProjectsMoveCardParamSchema>(
    projectsMoveCardParamSchema
  ),
  bodyValidationFactory<t_ProjectsMoveCardBodySchema>(
    projectsMoveCardBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsMoveCardParamSchema,
      void,
      t_ProjectsMoveCardBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsMoveCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsMoveCard
  }
)

const projectsGetColumnParamSchema = z.object({ column_id: z.coerce.number() })

router.get(
  "projectsGetColumn",
  "/projects/columns/:columnId",
  paramValidationFactory<t_ProjectsGetColumnParamSchema>(
    projectsGetColumnParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ProjectsGetColumnParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-projectsGetColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGetColumn
  }
)

const projectsUpdateColumnParamSchema = z.object({
  column_id: z.coerce.number(),
})

const projectsUpdateColumnBodySchema = z.object({ name: z.coerce.string() })

router.patch(
  "projectsUpdateColumn",
  "/projects/columns/:columnId",
  paramValidationFactory<t_ProjectsUpdateColumnParamSchema>(
    projectsUpdateColumnParamSchema
  ),
  bodyValidationFactory<t_ProjectsUpdateColumnBodySchema>(
    projectsUpdateColumnBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsUpdateColumnParamSchema,
      void,
      t_ProjectsUpdateColumnBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsUpdateColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsUpdateColumn
  }
)

const projectsDeleteColumnParamSchema = z.object({
  column_id: z.coerce.number(),
})

router.delete(
  "projectsDeleteColumn",
  "/projects/columns/:columnId",
  paramValidationFactory<t_ProjectsDeleteColumnParamSchema>(
    projectsDeleteColumnParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ProjectsDeleteColumnParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-projectsDeleteColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsDeleteColumn
  }
)

const projectsListCardsParamSchema = z.object({ column_id: z.coerce.number() })

const projectsListCardsQuerySchema = z.object({
  archived_state: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "projectsListCards",
  "/projects/columns/:columnId/cards",
  paramValidationFactory<t_ProjectsListCardsParamSchema>(
    projectsListCardsParamSchema
  ),
  queryValidationFactory<t_ProjectsListCardsQuerySchema>(
    projectsListCardsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsListCardsParamSchema,
      t_ProjectsListCardsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsListCards

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListCards
  }
)

const projectsCreateCardParamSchema = z.object({ column_id: z.coerce.number() })

const projectsCreateCardBodySchema = z.object({})

router.post(
  "projectsCreateCard",
  "/projects/columns/:columnId/cards",
  paramValidationFactory<t_ProjectsCreateCardParamSchema>(
    projectsCreateCardParamSchema
  ),
  bodyValidationFactory<t_ProjectsCreateCardBodySchema>(
    projectsCreateCardBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsCreateCardParamSchema,
      void,
      t_ProjectsCreateCardBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsCreateCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateCard
  }
)

const projectsMoveColumnParamSchema = z.object({ column_id: z.coerce.number() })

const projectsMoveColumnBodySchema = z.object({ position: z.coerce.string() })

router.post(
  "projectsMoveColumn",
  "/projects/columns/:columnId/moves",
  paramValidationFactory<t_ProjectsMoveColumnParamSchema>(
    projectsMoveColumnParamSchema
  ),
  bodyValidationFactory<t_ProjectsMoveColumnBodySchema>(
    projectsMoveColumnBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsMoveColumnParamSchema,
      void,
      t_ProjectsMoveColumnBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsMoveColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsMoveColumn
  }
)

const projectsGetParamSchema = z.object({ project_id: z.coerce.number() })

router.get(
  "projectsGet",
  "/projects/:projectId",
  paramValidationFactory<t_ProjectsGetParamSchema>(projectsGetParamSchema),
  async (
    ctx: ValidatedCtx<t_ProjectsGetParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-projectsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGet
  }
)

const projectsUpdateParamSchema = z.object({ project_id: z.coerce.number() })

const projectsUpdateBodySchema = z
  .object({
    name: z.coerce.string().optional(),
    body: z.coerce.string().optional(),
    state: z.coerce.string().optional(),
    organization_permission: z.coerce.string().optional(),
    private: z.coerce.boolean().optional(),
  })
  .optional()

router.patch(
  "projectsUpdate",
  "/projects/:projectId",
  paramValidationFactory<t_ProjectsUpdateParamSchema>(
    projectsUpdateParamSchema
  ),
  bodyValidationFactory<t_ProjectsUpdateBodySchema>(projectsUpdateBodySchema),
  async (
    ctx: ValidatedCtx<
      t_ProjectsUpdateParamSchema,
      void,
      t_ProjectsUpdateBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsUpdate
  }
)

const projectsDeleteParamSchema = z.object({ project_id: z.coerce.number() })

router.delete(
  "projectsDelete",
  "/projects/:projectId",
  paramValidationFactory<t_ProjectsDeleteParamSchema>(
    projectsDeleteParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ProjectsDeleteParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-projectsDelete

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsDelete
  }
)

const projectsListCollaboratorsParamSchema = z.object({
  project_id: z.coerce.number(),
})

const projectsListCollaboratorsQuerySchema = z.object({
  affiliation: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "projectsListCollaborators",
  "/projects/:projectId/collaborators",
  paramValidationFactory<t_ProjectsListCollaboratorsParamSchema>(
    projectsListCollaboratorsParamSchema
  ),
  queryValidationFactory<t_ProjectsListCollaboratorsQuerySchema>(
    projectsListCollaboratorsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsListCollaboratorsParamSchema,
      t_ProjectsListCollaboratorsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsListCollaborators

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListCollaborators
  }
)

const projectsAddCollaboratorParamSchema = z.object({
  project_id: z.coerce.number(),
  username: z.coerce.string(),
})

const projectsAddCollaboratorBodySchema = z
  .object({ permission: z.coerce.string().optional() })
  .optional()

router.put(
  "projectsAddCollaborator",
  "/projects/:projectId/collaborators/:username",
  paramValidationFactory<t_ProjectsAddCollaboratorParamSchema>(
    projectsAddCollaboratorParamSchema
  ),
  bodyValidationFactory<t_ProjectsAddCollaboratorBodySchema>(
    projectsAddCollaboratorBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsAddCollaboratorParamSchema,
      void,
      t_ProjectsAddCollaboratorBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsAddCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsAddCollaborator
  }
)

const projectsRemoveCollaboratorParamSchema = z.object({
  project_id: z.coerce.number(),
  username: z.coerce.string(),
})

router.delete(
  "projectsRemoveCollaborator",
  "/projects/:projectId/collaborators/:username",
  paramValidationFactory<t_ProjectsRemoveCollaboratorParamSchema>(
    projectsRemoveCollaboratorParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ProjectsRemoveCollaboratorParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-projectsRemoveCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsRemoveCollaborator
  }
)

const projectsGetPermissionForUserParamSchema = z.object({
  project_id: z.coerce.number(),
  username: z.coerce.string(),
})

router.get(
  "projectsGetPermissionForUser",
  "/projects/:projectId/collaborators/:username/permission",
  paramValidationFactory<t_ProjectsGetPermissionForUserParamSchema>(
    projectsGetPermissionForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ProjectsGetPermissionForUserParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-projectsGetPermissionForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGetPermissionForUser
  }
)

const projectsListColumnsParamSchema = z.object({
  project_id: z.coerce.number(),
})

const projectsListColumnsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "projectsListColumns",
  "/projects/:projectId/columns",
  paramValidationFactory<t_ProjectsListColumnsParamSchema>(
    projectsListColumnsParamSchema
  ),
  queryValidationFactory<t_ProjectsListColumnsQuerySchema>(
    projectsListColumnsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsListColumnsParamSchema,
      t_ProjectsListColumnsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsListColumns

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListColumns
  }
)

const projectsCreateColumnParamSchema = z.object({
  project_id: z.coerce.number(),
})

const projectsCreateColumnBodySchema = z.object({ name: z.coerce.string() })

router.post(
  "projectsCreateColumn",
  "/projects/:projectId/columns",
  paramValidationFactory<t_ProjectsCreateColumnParamSchema>(
    projectsCreateColumnParamSchema
  ),
  bodyValidationFactory<t_ProjectsCreateColumnBodySchema>(
    projectsCreateColumnBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsCreateColumnParamSchema,
      void,
      t_ProjectsCreateColumnBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsCreateColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateColumn
  }
)

router.get(
  "rateLimitGet",
  "/rate_limit",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-rateLimitGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-rateLimitGet
  }
)

const actionsListRepoRequiredWorkflowsParamSchema = z.object({
  org: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsListRepoRequiredWorkflowsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListRepoRequiredWorkflows",
  "/repos/:org/:repo/actions/required_workflows",
  paramValidationFactory<t_ActionsListRepoRequiredWorkflowsParamSchema>(
    actionsListRepoRequiredWorkflowsParamSchema
  ),
  queryValidationFactory<t_ActionsListRepoRequiredWorkflowsQuerySchema>(
    actionsListRepoRequiredWorkflowsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListRepoRequiredWorkflowsParamSchema,
      t_ActionsListRepoRequiredWorkflowsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListRepoRequiredWorkflows

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRepoRequiredWorkflows
  }
)

const actionsGetRepoRequiredWorkflowParamSchema = z.object({
  org: z.coerce.string(),
  repo: z.coerce.string(),
  required_workflow_id_for_repo: z.coerce.number(),
})

router.get(
  "actionsGetRepoRequiredWorkflow",
  "/repos/:org/:repo/actions/required_workflows/:requiredWorkflowIdForRepo",
  paramValidationFactory<t_ActionsGetRepoRequiredWorkflowParamSchema>(
    actionsGetRepoRequiredWorkflowParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetRepoRequiredWorkflowParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetRepoRequiredWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetRepoRequiredWorkflow
  }
)

const actionsGetRepoRequiredWorkflowUsageParamSchema = z.object({
  org: z.coerce.string(),
  repo: z.coerce.string(),
  required_workflow_id_for_repo: z.coerce.number(),
})

router.get(
  "actionsGetRepoRequiredWorkflowUsage",
  "/repos/:org/:repo/actions/required_workflows/:requiredWorkflowIdForRepo/timing",
  paramValidationFactory<t_ActionsGetRepoRequiredWorkflowUsageParamSchema>(
    actionsGetRepoRequiredWorkflowUsageParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetRepoRequiredWorkflowUsageParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetRepoRequiredWorkflowUsage

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetRepoRequiredWorkflowUsage
  }
)

const reposGetParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGet",
  "/repos/:owner/:repo",
  paramValidationFactory<t_ReposGetParamSchema>(reposGetParamSchema),
  async (ctx: ValidatedCtx<t_ReposGetParamSchema, void, void>, next: Next) => {
    //region safe-edit-region-reposGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGet
  }
)

const reposUpdateParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposUpdateBodySchema = z
  .object({
    name: z.coerce.string().optional(),
    description: z.coerce.string().optional(),
    homepage: z.coerce.string().optional(),
    private: z.coerce.boolean().optional(),
    visibility: z.coerce.string().optional(),
    security_and_analysis: z
      .object({
        advanced_security: z
          .object({ status: z.coerce.string().optional() })
          .optional(),
        secret_scanning: z
          .object({ status: z.coerce.string().optional() })
          .optional(),
        secret_scanning_push_protection: z
          .object({ status: z.coerce.string().optional() })
          .optional(),
      })
      .optional(),
    has_issues: z.coerce.boolean().optional(),
    has_projects: z.coerce.boolean().optional(),
    has_wiki: z.coerce.boolean().optional(),
    is_template: z.coerce.boolean().optional(),
    default_branch: z.coerce.string().optional(),
    allow_squash_merge: z.coerce.boolean().optional(),
    allow_merge_commit: z.coerce.boolean().optional(),
    allow_rebase_merge: z.coerce.boolean().optional(),
    allow_auto_merge: z.coerce.boolean().optional(),
    delete_branch_on_merge: z.coerce.boolean().optional(),
    allow_update_branch: z.coerce.boolean().optional(),
    use_squash_pr_title_as_default: z.coerce.boolean().optional(),
    squash_merge_commit_title: z.coerce.string().optional(),
    squash_merge_commit_message: z.coerce.string().optional(),
    merge_commit_title: z.coerce.string().optional(),
    merge_commit_message: z.coerce.string().optional(),
    archived: z.coerce.boolean().optional(),
    allow_forking: z.coerce.boolean().optional(),
    web_commit_signoff_required: z.coerce.boolean().optional(),
  })
  .optional()

router.patch(
  "reposUpdate",
  "/repos/:owner/:repo",
  paramValidationFactory<t_ReposUpdateParamSchema>(reposUpdateParamSchema),
  bodyValidationFactory<t_ReposUpdateBodySchema>(reposUpdateBodySchema),
  async (
    ctx: ValidatedCtx<t_ReposUpdateParamSchema, void, t_ReposUpdateBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdate
  }
)

const reposDeleteParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.delete(
  "reposDelete",
  "/repos/:owner/:repo",
  paramValidationFactory<t_ReposDeleteParamSchema>(reposDeleteParamSchema),
  async (
    ctx: ValidatedCtx<t_ReposDeleteParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDelete

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDelete
  }
)

const actionsListArtifactsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsListArtifactsForRepoQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  name: z.coerce.string().optional(),
})

router.get(
  "actionsListArtifactsForRepo",
  "/repos/:owner/:repo/actions/artifacts",
  paramValidationFactory<t_ActionsListArtifactsForRepoParamSchema>(
    actionsListArtifactsForRepoParamSchema
  ),
  queryValidationFactory<t_ActionsListArtifactsForRepoQuerySchema>(
    actionsListArtifactsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListArtifactsForRepoParamSchema,
      t_ActionsListArtifactsForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListArtifactsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListArtifactsForRepo
  }
)

const actionsGetArtifactParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  artifact_id: z.coerce.number(),
})

router.get(
  "actionsGetArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId",
  paramValidationFactory<t_ActionsGetArtifactParamSchema>(
    actionsGetArtifactParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetArtifactParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetArtifact

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetArtifact
  }
)

const actionsDeleteArtifactParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  artifact_id: z.coerce.number(),
})

router.delete(
  "actionsDeleteArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId",
  paramValidationFactory<t_ActionsDeleteArtifactParamSchema>(
    actionsDeleteArtifactParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDeleteArtifactParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteArtifact

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteArtifact
  }
)

const actionsDownloadArtifactParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  artifact_id: z.coerce.number(),
  archive_format: z.coerce.string(),
})

router.get(
  "actionsDownloadArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId/:archiveFormat",
  paramValidationFactory<t_ActionsDownloadArtifactParamSchema>(
    actionsDownloadArtifactParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDownloadArtifactParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDownloadArtifact

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDownloadArtifact
  }
)

const actionsGetActionsCacheUsageParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "actionsGetActionsCacheUsage",
  "/repos/:owner/:repo/actions/cache/usage",
  paramValidationFactory<t_ActionsGetActionsCacheUsageParamSchema>(
    actionsGetActionsCacheUsageParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetActionsCacheUsageParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetActionsCacheUsage

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetActionsCacheUsage
  }
)

const actionsGetActionsCacheListParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsGetActionsCacheListQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  ref: z.coerce.string().optional(),
  key: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
})

router.get(
  "actionsGetActionsCacheList",
  "/repos/:owner/:repo/actions/caches",
  paramValidationFactory<t_ActionsGetActionsCacheListParamSchema>(
    actionsGetActionsCacheListParamSchema
  ),
  queryValidationFactory<t_ActionsGetActionsCacheListQuerySchema>(
    actionsGetActionsCacheListQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetActionsCacheListParamSchema,
      t_ActionsGetActionsCacheListQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetActionsCacheList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetActionsCacheList
  }
)

const actionsDeleteActionsCacheByKeyParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsDeleteActionsCacheByKeyQuerySchema = z.object({
  key: z.coerce.string(),
  ref: z.coerce.string().optional(),
})

router.delete(
  "actionsDeleteActionsCacheByKey",
  "/repos/:owner/:repo/actions/caches",
  paramValidationFactory<t_ActionsDeleteActionsCacheByKeyParamSchema>(
    actionsDeleteActionsCacheByKeyParamSchema
  ),
  queryValidationFactory<t_ActionsDeleteActionsCacheByKeyQuerySchema>(
    actionsDeleteActionsCacheByKeyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsDeleteActionsCacheByKeyParamSchema,
      t_ActionsDeleteActionsCacheByKeyQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteActionsCacheByKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteActionsCacheByKey
  }
)

const actionsDeleteActionsCacheByIdParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  cache_id: z.coerce.number(),
})

router.delete(
  "actionsDeleteActionsCacheById",
  "/repos/:owner/:repo/actions/caches/:cacheId",
  paramValidationFactory<t_ActionsDeleteActionsCacheByIdParamSchema>(
    actionsDeleteActionsCacheByIdParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDeleteActionsCacheByIdParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteActionsCacheById

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteActionsCacheById
  }
)

const actionsGetJobForWorkflowRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  job_id: z.coerce.number(),
})

router.get(
  "actionsGetJobForWorkflowRun",
  "/repos/:owner/:repo/actions/jobs/:jobId",
  paramValidationFactory<t_ActionsGetJobForWorkflowRunParamSchema>(
    actionsGetJobForWorkflowRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetJobForWorkflowRunParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetJobForWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetJobForWorkflowRun
  }
)

const actionsDownloadJobLogsForWorkflowRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  job_id: z.coerce.number(),
})

router.get(
  "actionsDownloadJobLogsForWorkflowRun",
  "/repos/:owner/:repo/actions/jobs/:jobId/logs",
  paramValidationFactory<t_ActionsDownloadJobLogsForWorkflowRunParamSchema>(
    actionsDownloadJobLogsForWorkflowRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsDownloadJobLogsForWorkflowRunParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsDownloadJobLogsForWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDownloadJobLogsForWorkflowRun
  }
)

const actionsReRunJobForWorkflowRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  job_id: z.coerce.number(),
})

const actionsReRunJobForWorkflowRunBodySchema = z
  .object({ enable_debug_logging: z.coerce.boolean().optional() })
  .optional()

router.post(
  "actionsReRunJobForWorkflowRun",
  "/repos/:owner/:repo/actions/jobs/:jobId/rerun",
  paramValidationFactory<t_ActionsReRunJobForWorkflowRunParamSchema>(
    actionsReRunJobForWorkflowRunParamSchema
  ),
  bodyValidationFactory<t_ActionsReRunJobForWorkflowRunBodySchema>(
    actionsReRunJobForWorkflowRunBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsReRunJobForWorkflowRunParamSchema,
      void,
      t_ActionsReRunJobForWorkflowRunBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsReRunJobForWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsReRunJobForWorkflowRun
  }
)

const actionsGetCustomOidcSubClaimForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "actionsGetCustomOidcSubClaimForRepo",
  "/repos/:owner/:repo/actions/oidc/customization/sub",
  paramValidationFactory<t_ActionsGetCustomOidcSubClaimForRepoParamSchema>(
    actionsGetCustomOidcSubClaimForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetCustomOidcSubClaimForRepoParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetCustomOidcSubClaimForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetCustomOidcSubClaimForRepo
  }
)

const actionsSetCustomOidcSubClaimForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsSetCustomOidcSubClaimForRepoBodySchema = z.object({
  use_default: z.coerce.boolean(),
  include_claim_keys: z.array(z.coerce.string().optional()).optional(),
})

router.put(
  "actionsSetCustomOidcSubClaimForRepo",
  "/repos/:owner/:repo/actions/oidc/customization/sub",
  paramValidationFactory<t_ActionsSetCustomOidcSubClaimForRepoParamSchema>(
    actionsSetCustomOidcSubClaimForRepoParamSchema
  ),
  bodyValidationFactory<t_ActionsSetCustomOidcSubClaimForRepoBodySchema>(
    actionsSetCustomOidcSubClaimForRepoBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetCustomOidcSubClaimForRepoParamSchema,
      void,
      t_ActionsSetCustomOidcSubClaimForRepoBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetCustomOidcSubClaimForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetCustomOidcSubClaimForRepo
  }
)

const actionsGetGithubActionsPermissionsRepositoryParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "actionsGetGithubActionsPermissionsRepository",
  "/repos/:owner/:repo/actions/permissions",
  paramValidationFactory<t_ActionsGetGithubActionsPermissionsRepositoryParamSchema>(
    actionsGetGithubActionsPermissionsRepositoryParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetGithubActionsPermissionsRepositoryParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetGithubActionsPermissionsRepository

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetGithubActionsPermissionsRepository
  }
)

const actionsSetGithubActionsPermissionsRepositoryParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsSetGithubActionsPermissionsRepositoryBodySchema = z.object({
  enabled: z.coerce.boolean(),
  allowed_actions: z.coerce.string().optional(),
})

router.put(
  "actionsSetGithubActionsPermissionsRepository",
  "/repos/:owner/:repo/actions/permissions",
  paramValidationFactory<t_ActionsSetGithubActionsPermissionsRepositoryParamSchema>(
    actionsSetGithubActionsPermissionsRepositoryParamSchema
  ),
  bodyValidationFactory<t_ActionsSetGithubActionsPermissionsRepositoryBodySchema>(
    actionsSetGithubActionsPermissionsRepositoryBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetGithubActionsPermissionsRepositoryParamSchema,
      void,
      t_ActionsSetGithubActionsPermissionsRepositoryBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetGithubActionsPermissionsRepository

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetGithubActionsPermissionsRepository
  }
)

const actionsGetWorkflowAccessToRepositoryParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "actionsGetWorkflowAccessToRepository",
  "/repos/:owner/:repo/actions/permissions/access",
  paramValidationFactory<t_ActionsGetWorkflowAccessToRepositoryParamSchema>(
    actionsGetWorkflowAccessToRepositoryParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetWorkflowAccessToRepositoryParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetWorkflowAccessToRepository

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflowAccessToRepository
  }
)

const actionsSetWorkflowAccessToRepositoryParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsSetWorkflowAccessToRepositoryBodySchema = z.object({
  access_level: z.coerce.string(),
})

router.put(
  "actionsSetWorkflowAccessToRepository",
  "/repos/:owner/:repo/actions/permissions/access",
  paramValidationFactory<t_ActionsSetWorkflowAccessToRepositoryParamSchema>(
    actionsSetWorkflowAccessToRepositoryParamSchema
  ),
  bodyValidationFactory<t_ActionsSetWorkflowAccessToRepositoryBodySchema>(
    actionsSetWorkflowAccessToRepositoryBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetWorkflowAccessToRepositoryParamSchema,
      void,
      t_ActionsSetWorkflowAccessToRepositoryBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetWorkflowAccessToRepository

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetWorkflowAccessToRepository
  }
)

const actionsGetAllowedActionsRepositoryParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "actionsGetAllowedActionsRepository",
  "/repos/:owner/:repo/actions/permissions/selected-actions",
  paramValidationFactory<t_ActionsGetAllowedActionsRepositoryParamSchema>(
    actionsGetAllowedActionsRepositoryParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetAllowedActionsRepositoryParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetAllowedActionsRepository

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetAllowedActionsRepository
  }
)

const actionsSetAllowedActionsRepositoryParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsSetAllowedActionsRepositoryBodySchema = z
  .object({
    github_owned_allowed: z.coerce.boolean().optional(),
    verified_allowed: z.coerce.boolean().optional(),
    patterns_allowed: z.array(z.coerce.string().optional()).optional(),
  })
  .optional()

router.put(
  "actionsSetAllowedActionsRepository",
  "/repos/:owner/:repo/actions/permissions/selected-actions",
  paramValidationFactory<t_ActionsSetAllowedActionsRepositoryParamSchema>(
    actionsSetAllowedActionsRepositoryParamSchema
  ),
  bodyValidationFactory<t_ActionsSetAllowedActionsRepositoryBodySchema>(
    actionsSetAllowedActionsRepositoryBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetAllowedActionsRepositoryParamSchema,
      void,
      t_ActionsSetAllowedActionsRepositoryBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetAllowedActionsRepository

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetAllowedActionsRepository
  }
)

const actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema =
  z.object({ owner: z.coerce.string(), repo: z.coerce.string() })

router.get(
  "actionsGetGithubActionsDefaultWorkflowPermissionsRepository",
  "/repos/:owner/:repo/actions/permissions/workflow",
  paramValidationFactory<t_ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema>(
    actionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetGithubActionsDefaultWorkflowPermissionsRepository

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetGithubActionsDefaultWorkflowPermissionsRepository
  }
)

const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema =
  z.object({ owner: z.coerce.string(), repo: z.coerce.string() })

const actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema =
  z.object({
    default_workflow_permissions: z.coerce.string().optional(),
    can_approve_pull_request_reviews: z.coerce.boolean().optional(),
  })

router.put(
  "actionsSetGithubActionsDefaultWorkflowPermissionsRepository",
  "/repos/:owner/:repo/actions/permissions/workflow",
  paramValidationFactory<t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema>(
    actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema
  ),
  bodyValidationFactory<t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema>(
    actionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryParamSchema,
      void,
      t_ActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetGithubActionsDefaultWorkflowPermissionsRepository

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetGithubActionsDefaultWorkflowPermissionsRepository
  }
)

const actionsListRequiredWorkflowRunsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  required_workflow_id_for_repo: z.coerce.number(),
})

const actionsListRequiredWorkflowRunsQuerySchema = z.object({
  actor: z.coerce.string().optional(),
  branch: z.coerce.string().optional(),
  event: z.coerce.string().optional(),
  status: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  created: z.coerce.string().optional(),
  exclude_pull_requests: z.coerce.boolean().optional(),
  check_suite_id: z.coerce.number().optional(),
  head_sha: z.coerce.string().optional(),
})

router.get(
  "actionsListRequiredWorkflowRuns",
  "/repos/:owner/:repo/actions/required_workflows/:requiredWorkflowIdForRepo/runs",
  paramValidationFactory<t_ActionsListRequiredWorkflowRunsParamSchema>(
    actionsListRequiredWorkflowRunsParamSchema
  ),
  queryValidationFactory<t_ActionsListRequiredWorkflowRunsQuerySchema>(
    actionsListRequiredWorkflowRunsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListRequiredWorkflowRunsParamSchema,
      t_ActionsListRequiredWorkflowRunsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListRequiredWorkflowRuns

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRequiredWorkflowRuns
  }
)

const actionsListSelfHostedRunnersForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsListSelfHostedRunnersForRepoQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListSelfHostedRunnersForRepo",
  "/repos/:owner/:repo/actions/runners",
  paramValidationFactory<t_ActionsListSelfHostedRunnersForRepoParamSchema>(
    actionsListSelfHostedRunnersForRepoParamSchema
  ),
  queryValidationFactory<t_ActionsListSelfHostedRunnersForRepoQuerySchema>(
    actionsListSelfHostedRunnersForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListSelfHostedRunnersForRepoParamSchema,
      t_ActionsListSelfHostedRunnersForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListSelfHostedRunnersForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelfHostedRunnersForRepo
  }
)

const actionsListRunnerApplicationsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "actionsListRunnerApplicationsForRepo",
  "/repos/:owner/:repo/actions/runners/downloads",
  paramValidationFactory<t_ActionsListRunnerApplicationsForRepoParamSchema>(
    actionsListRunnerApplicationsForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListRunnerApplicationsForRepoParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListRunnerApplicationsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRunnerApplicationsForRepo
  }
)

const actionsCreateRegistrationTokenForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.post(
  "actionsCreateRegistrationTokenForRepo",
  "/repos/:owner/:repo/actions/runners/registration-token",
  paramValidationFactory<t_ActionsCreateRegistrationTokenForRepoParamSchema>(
    actionsCreateRegistrationTokenForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsCreateRegistrationTokenForRepoParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateRegistrationTokenForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRegistrationTokenForRepo
  }
)

const actionsCreateRemoveTokenForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.post(
  "actionsCreateRemoveTokenForRepo",
  "/repos/:owner/:repo/actions/runners/remove-token",
  paramValidationFactory<t_ActionsCreateRemoveTokenForRepoParamSchema>(
    actionsCreateRemoveTokenForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsCreateRemoveTokenForRepoParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateRemoveTokenForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRemoveTokenForRepo
  }
)

const actionsGetSelfHostedRunnerForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  runner_id: z.coerce.number(),
})

router.get(
  "actionsGetSelfHostedRunnerForRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId",
  paramValidationFactory<t_ActionsGetSelfHostedRunnerForRepoParamSchema>(
    actionsGetSelfHostedRunnerForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetSelfHostedRunnerForRepoParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetSelfHostedRunnerForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetSelfHostedRunnerForRepo
  }
)

const actionsDeleteSelfHostedRunnerFromRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  runner_id: z.coerce.number(),
})

router.delete(
  "actionsDeleteSelfHostedRunnerFromRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId",
  paramValidationFactory<t_ActionsDeleteSelfHostedRunnerFromRepoParamSchema>(
    actionsDeleteSelfHostedRunnerFromRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsDeleteSelfHostedRunnerFromRepoParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteSelfHostedRunnerFromRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteSelfHostedRunnerFromRepo
  }
)

const actionsListLabelsForSelfHostedRunnerForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  runner_id: z.coerce.number(),
})

router.get(
  "actionsListLabelsForSelfHostedRunnerForRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId/labels",
  paramValidationFactory<t_ActionsListLabelsForSelfHostedRunnerForRepoParamSchema>(
    actionsListLabelsForSelfHostedRunnerForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListLabelsForSelfHostedRunnerForRepoParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListLabelsForSelfHostedRunnerForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListLabelsForSelfHostedRunnerForRepo
  }
)

const actionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  runner_id: z.coerce.number(),
})

const actionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema = z.object({
  labels: z.array(z.coerce.string().optional()),
})

router.post(
  "actionsAddCustomLabelsToSelfHostedRunnerForRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId/labels",
  paramValidationFactory<t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema>(
    actionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema
  ),
  bodyValidationFactory<t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema>(
    actionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoParamSchema,
      void,
      t_ActionsAddCustomLabelsToSelfHostedRunnerForRepoBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsAddCustomLabelsToSelfHostedRunnerForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsAddCustomLabelsToSelfHostedRunnerForRepo
  }
)

const actionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  runner_id: z.coerce.number(),
})

const actionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema = z.object({
  labels: z.array(z.coerce.string().optional()),
})

router.put(
  "actionsSetCustomLabelsForSelfHostedRunnerForRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId/labels",
  paramValidationFactory<t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema>(
    actionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema
  ),
  bodyValidationFactory<t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema>(
    actionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoParamSchema,
      void,
      t_ActionsSetCustomLabelsForSelfHostedRunnerForRepoBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsSetCustomLabelsForSelfHostedRunnerForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetCustomLabelsForSelfHostedRunnerForRepo
  }
)

const actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema =
  z.object({
    owner: z.coerce.string(),
    repo: z.coerce.string(),
    runner_id: z.coerce.number(),
  })

router.delete(
  "actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId/labels",
  paramValidationFactory<t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema>(
    actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo
  }
)

const actionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema = z.object(
  {
    owner: z.coerce.string(),
    repo: z.coerce.string(),
    runner_id: z.coerce.number(),
    name: z.coerce.string(),
  }
)

router.delete(
  "actionsRemoveCustomLabelFromSelfHostedRunnerForRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId/labels/:name",
  paramValidationFactory<t_ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema>(
    actionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsRemoveCustomLabelFromSelfHostedRunnerForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsRemoveCustomLabelFromSelfHostedRunnerForRepo
  }
)

const actionsListWorkflowRunsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsListWorkflowRunsForRepoQuerySchema = z.object({
  actor: z.coerce.string().optional(),
  branch: z.coerce.string().optional(),
  event: z.coerce.string().optional(),
  status: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  created: z.coerce.string().optional(),
  exclude_pull_requests: z.coerce.boolean().optional(),
  check_suite_id: z.coerce.number().optional(),
  head_sha: z.coerce.string().optional(),
})

router.get(
  "actionsListWorkflowRunsForRepo",
  "/repos/:owner/:repo/actions/runs",
  paramValidationFactory<t_ActionsListWorkflowRunsForRepoParamSchema>(
    actionsListWorkflowRunsForRepoParamSchema
  ),
  queryValidationFactory<t_ActionsListWorkflowRunsForRepoQuerySchema>(
    actionsListWorkflowRunsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListWorkflowRunsForRepoParamSchema,
      t_ActionsListWorkflowRunsForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListWorkflowRunsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListWorkflowRunsForRepo
  }
)

const actionsGetWorkflowRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

const actionsGetWorkflowRunQuerySchema = z.object({
  exclude_pull_requests: z.coerce.boolean().optional(),
})

router.get(
  "actionsGetWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId",
  paramValidationFactory<t_ActionsGetWorkflowRunParamSchema>(
    actionsGetWorkflowRunParamSchema
  ),
  queryValidationFactory<t_ActionsGetWorkflowRunQuerySchema>(
    actionsGetWorkflowRunQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetWorkflowRunParamSchema,
      t_ActionsGetWorkflowRunQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflowRun
  }
)

const actionsDeleteWorkflowRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

router.delete(
  "actionsDeleteWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId",
  paramValidationFactory<t_ActionsDeleteWorkflowRunParamSchema>(
    actionsDeleteWorkflowRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDeleteWorkflowRunParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteWorkflowRun
  }
)

const actionsGetReviewsForRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

router.get(
  "actionsGetReviewsForRun",
  "/repos/:owner/:repo/actions/runs/:runId/approvals",
  paramValidationFactory<t_ActionsGetReviewsForRunParamSchema>(
    actionsGetReviewsForRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetReviewsForRunParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetReviewsForRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetReviewsForRun
  }
)

const actionsApproveWorkflowRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

router.post(
  "actionsApproveWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId/approve",
  paramValidationFactory<t_ActionsApproveWorkflowRunParamSchema>(
    actionsApproveWorkflowRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsApproveWorkflowRunParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsApproveWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsApproveWorkflowRun
  }
)

const actionsListWorkflowRunArtifactsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

const actionsListWorkflowRunArtifactsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListWorkflowRunArtifacts",
  "/repos/:owner/:repo/actions/runs/:runId/artifacts",
  paramValidationFactory<t_ActionsListWorkflowRunArtifactsParamSchema>(
    actionsListWorkflowRunArtifactsParamSchema
  ),
  queryValidationFactory<t_ActionsListWorkflowRunArtifactsQuerySchema>(
    actionsListWorkflowRunArtifactsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListWorkflowRunArtifactsParamSchema,
      t_ActionsListWorkflowRunArtifactsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListWorkflowRunArtifacts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListWorkflowRunArtifacts
  }
)

const actionsGetWorkflowRunAttemptParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
  attempt_number: z.coerce.number(),
})

const actionsGetWorkflowRunAttemptQuerySchema = z.object({
  exclude_pull_requests: z.coerce.boolean().optional(),
})

router.get(
  "actionsGetWorkflowRunAttempt",
  "/repos/:owner/:repo/actions/runs/:runId/attempts/:attemptNumber",
  paramValidationFactory<t_ActionsGetWorkflowRunAttemptParamSchema>(
    actionsGetWorkflowRunAttemptParamSchema
  ),
  queryValidationFactory<t_ActionsGetWorkflowRunAttemptQuerySchema>(
    actionsGetWorkflowRunAttemptQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetWorkflowRunAttemptParamSchema,
      t_ActionsGetWorkflowRunAttemptQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetWorkflowRunAttempt

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflowRunAttempt
  }
)

const actionsListJobsForWorkflowRunAttemptParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
  attempt_number: z.coerce.number(),
})

const actionsListJobsForWorkflowRunAttemptQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListJobsForWorkflowRunAttempt",
  "/repos/:owner/:repo/actions/runs/:runId/attempts/:attemptNumber/jobs",
  paramValidationFactory<t_ActionsListJobsForWorkflowRunAttemptParamSchema>(
    actionsListJobsForWorkflowRunAttemptParamSchema
  ),
  queryValidationFactory<t_ActionsListJobsForWorkflowRunAttemptQuerySchema>(
    actionsListJobsForWorkflowRunAttemptQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListJobsForWorkflowRunAttemptParamSchema,
      t_ActionsListJobsForWorkflowRunAttemptQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListJobsForWorkflowRunAttempt

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListJobsForWorkflowRunAttempt
  }
)

const actionsDownloadWorkflowRunAttemptLogsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
  attempt_number: z.coerce.number(),
})

router.get(
  "actionsDownloadWorkflowRunAttemptLogs",
  "/repos/:owner/:repo/actions/runs/:runId/attempts/:attemptNumber/logs",
  paramValidationFactory<t_ActionsDownloadWorkflowRunAttemptLogsParamSchema>(
    actionsDownloadWorkflowRunAttemptLogsParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsDownloadWorkflowRunAttemptLogsParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsDownloadWorkflowRunAttemptLogs

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDownloadWorkflowRunAttemptLogs
  }
)

const actionsCancelWorkflowRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

router.post(
  "actionsCancelWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId/cancel",
  paramValidationFactory<t_ActionsCancelWorkflowRunParamSchema>(
    actionsCancelWorkflowRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsCancelWorkflowRunParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsCancelWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCancelWorkflowRun
  }
)

const actionsListJobsForWorkflowRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

const actionsListJobsForWorkflowRunQuerySchema = z.object({
  filter: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListJobsForWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId/jobs",
  paramValidationFactory<t_ActionsListJobsForWorkflowRunParamSchema>(
    actionsListJobsForWorkflowRunParamSchema
  ),
  queryValidationFactory<t_ActionsListJobsForWorkflowRunQuerySchema>(
    actionsListJobsForWorkflowRunQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListJobsForWorkflowRunParamSchema,
      t_ActionsListJobsForWorkflowRunQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListJobsForWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListJobsForWorkflowRun
  }
)

const actionsDownloadWorkflowRunLogsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

router.get(
  "actionsDownloadWorkflowRunLogs",
  "/repos/:owner/:repo/actions/runs/:runId/logs",
  paramValidationFactory<t_ActionsDownloadWorkflowRunLogsParamSchema>(
    actionsDownloadWorkflowRunLogsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDownloadWorkflowRunLogsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDownloadWorkflowRunLogs

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDownloadWorkflowRunLogs
  }
)

const actionsDeleteWorkflowRunLogsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

router.delete(
  "actionsDeleteWorkflowRunLogs",
  "/repos/:owner/:repo/actions/runs/:runId/logs",
  paramValidationFactory<t_ActionsDeleteWorkflowRunLogsParamSchema>(
    actionsDeleteWorkflowRunLogsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDeleteWorkflowRunLogsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteWorkflowRunLogs

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteWorkflowRunLogs
  }
)

const actionsGetPendingDeploymentsForRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

router.get(
  "actionsGetPendingDeploymentsForRun",
  "/repos/:owner/:repo/actions/runs/:runId/pending_deployments",
  paramValidationFactory<t_ActionsGetPendingDeploymentsForRunParamSchema>(
    actionsGetPendingDeploymentsForRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsGetPendingDeploymentsForRunParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetPendingDeploymentsForRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetPendingDeploymentsForRun
  }
)

const actionsReviewPendingDeploymentsForRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

const actionsReviewPendingDeploymentsForRunBodySchema = z.object({
  environment_ids: z.array(z.coerce.number().optional()),
  state: z.coerce.string(),
  comment: z.coerce.string(),
})

router.post(
  "actionsReviewPendingDeploymentsForRun",
  "/repos/:owner/:repo/actions/runs/:runId/pending_deployments",
  paramValidationFactory<t_ActionsReviewPendingDeploymentsForRunParamSchema>(
    actionsReviewPendingDeploymentsForRunParamSchema
  ),
  bodyValidationFactory<t_ActionsReviewPendingDeploymentsForRunBodySchema>(
    actionsReviewPendingDeploymentsForRunBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsReviewPendingDeploymentsForRunParamSchema,
      void,
      t_ActionsReviewPendingDeploymentsForRunBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsReviewPendingDeploymentsForRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsReviewPendingDeploymentsForRun
  }
)

const actionsReRunWorkflowParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

const actionsReRunWorkflowBodySchema = z
  .object({ enable_debug_logging: z.coerce.boolean().optional() })
  .optional()

router.post(
  "actionsReRunWorkflow",
  "/repos/:owner/:repo/actions/runs/:runId/rerun",
  paramValidationFactory<t_ActionsReRunWorkflowParamSchema>(
    actionsReRunWorkflowParamSchema
  ),
  bodyValidationFactory<t_ActionsReRunWorkflowBodySchema>(
    actionsReRunWorkflowBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsReRunWorkflowParamSchema,
      void,
      t_ActionsReRunWorkflowBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsReRunWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsReRunWorkflow
  }
)

const actionsReRunWorkflowFailedJobsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

const actionsReRunWorkflowFailedJobsBodySchema = z
  .object({ enable_debug_logging: z.coerce.boolean().optional() })
  .optional()

router.post(
  "actionsReRunWorkflowFailedJobs",
  "/repos/:owner/:repo/actions/runs/:runId/rerun-failed-jobs",
  paramValidationFactory<t_ActionsReRunWorkflowFailedJobsParamSchema>(
    actionsReRunWorkflowFailedJobsParamSchema
  ),
  bodyValidationFactory<t_ActionsReRunWorkflowFailedJobsBodySchema>(
    actionsReRunWorkflowFailedJobsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsReRunWorkflowFailedJobsParamSchema,
      void,
      t_ActionsReRunWorkflowFailedJobsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsReRunWorkflowFailedJobs

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsReRunWorkflowFailedJobs
  }
)

const actionsGetWorkflowRunUsageParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  run_id: z.coerce.number(),
})

router.get(
  "actionsGetWorkflowRunUsage",
  "/repos/:owner/:repo/actions/runs/:runId/timing",
  paramValidationFactory<t_ActionsGetWorkflowRunUsageParamSchema>(
    actionsGetWorkflowRunUsageParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetWorkflowRunUsageParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetWorkflowRunUsage

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflowRunUsage
  }
)

const actionsListRepoSecretsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsListRepoSecretsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListRepoSecrets",
  "/repos/:owner/:repo/actions/secrets",
  paramValidationFactory<t_ActionsListRepoSecretsParamSchema>(
    actionsListRepoSecretsParamSchema
  ),
  queryValidationFactory<t_ActionsListRepoSecretsQuerySchema>(
    actionsListRepoSecretsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListRepoSecretsParamSchema,
      t_ActionsListRepoSecretsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListRepoSecrets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRepoSecrets
  }
)

const actionsGetRepoPublicKeyParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "actionsGetRepoPublicKey",
  "/repos/:owner/:repo/actions/secrets/public-key",
  paramValidationFactory<t_ActionsGetRepoPublicKeyParamSchema>(
    actionsGetRepoPublicKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetRepoPublicKeyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetRepoPublicKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetRepoPublicKey
  }
)

const actionsGetRepoSecretParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.get(
  "actionsGetRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  paramValidationFactory<t_ActionsGetRepoSecretParamSchema>(
    actionsGetRepoSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetRepoSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetRepoSecret
  }
)

const actionsCreateOrUpdateRepoSecretParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const actionsCreateOrUpdateRepoSecretBodySchema = z.object({
  encrypted_value: z.coerce.string().optional(),
  key_id: z.coerce.string().optional(),
})

router.put(
  "actionsCreateOrUpdateRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  paramValidationFactory<t_ActionsCreateOrUpdateRepoSecretParamSchema>(
    actionsCreateOrUpdateRepoSecretParamSchema
  ),
  bodyValidationFactory<t_ActionsCreateOrUpdateRepoSecretBodySchema>(
    actionsCreateOrUpdateRepoSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsCreateOrUpdateRepoSecretParamSchema,
      void,
      t_ActionsCreateOrUpdateRepoSecretBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateOrUpdateRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateOrUpdateRepoSecret
  }
)

const actionsDeleteRepoSecretParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.delete(
  "actionsDeleteRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  paramValidationFactory<t_ActionsDeleteRepoSecretParamSchema>(
    actionsDeleteRepoSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDeleteRepoSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteRepoSecret
  }
)

const actionsListRepoVariablesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsListRepoVariablesQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListRepoVariables",
  "/repos/:owner/:repo/actions/variables",
  paramValidationFactory<t_ActionsListRepoVariablesParamSchema>(
    actionsListRepoVariablesParamSchema
  ),
  queryValidationFactory<t_ActionsListRepoVariablesQuerySchema>(
    actionsListRepoVariablesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListRepoVariablesParamSchema,
      t_ActionsListRepoVariablesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListRepoVariables

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRepoVariables
  }
)

const actionsCreateRepoVariableParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsCreateRepoVariableBodySchema = z.object({
  name: z.coerce.string(),
  value: z.coerce.string(),
})

router.post(
  "actionsCreateRepoVariable",
  "/repos/:owner/:repo/actions/variables",
  paramValidationFactory<t_ActionsCreateRepoVariableParamSchema>(
    actionsCreateRepoVariableParamSchema
  ),
  bodyValidationFactory<t_ActionsCreateRepoVariableBodySchema>(
    actionsCreateRepoVariableBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsCreateRepoVariableParamSchema,
      void,
      t_ActionsCreateRepoVariableBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateRepoVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRepoVariable
  }
)

const actionsGetRepoVariableParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  name: z.coerce.string(),
})

router.get(
  "actionsGetRepoVariable",
  "/repos/:owner/:repo/actions/variables/:name",
  paramValidationFactory<t_ActionsGetRepoVariableParamSchema>(
    actionsGetRepoVariableParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetRepoVariableParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetRepoVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetRepoVariable
  }
)

const actionsUpdateRepoVariableParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  name: z.coerce.string(),
})

const actionsUpdateRepoVariableBodySchema = z.object({
  name: z.coerce.string().optional(),
  value: z.coerce.string().optional(),
})

router.patch(
  "actionsUpdateRepoVariable",
  "/repos/:owner/:repo/actions/variables/:name",
  paramValidationFactory<t_ActionsUpdateRepoVariableParamSchema>(
    actionsUpdateRepoVariableParamSchema
  ),
  bodyValidationFactory<t_ActionsUpdateRepoVariableBodySchema>(
    actionsUpdateRepoVariableBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsUpdateRepoVariableParamSchema,
      void,
      t_ActionsUpdateRepoVariableBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsUpdateRepoVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsUpdateRepoVariable
  }
)

const actionsDeleteRepoVariableParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  name: z.coerce.string(),
})

router.delete(
  "actionsDeleteRepoVariable",
  "/repos/:owner/:repo/actions/variables/:name",
  paramValidationFactory<t_ActionsDeleteRepoVariableParamSchema>(
    actionsDeleteRepoVariableParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDeleteRepoVariableParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteRepoVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteRepoVariable
  }
)

const actionsListRepoWorkflowsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const actionsListRepoWorkflowsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListRepoWorkflows",
  "/repos/:owner/:repo/actions/workflows",
  paramValidationFactory<t_ActionsListRepoWorkflowsParamSchema>(
    actionsListRepoWorkflowsParamSchema
  ),
  queryValidationFactory<t_ActionsListRepoWorkflowsQuerySchema>(
    actionsListRepoWorkflowsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListRepoWorkflowsParamSchema,
      t_ActionsListRepoWorkflowsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListRepoWorkflows

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRepoWorkflows
  }
)

const actionsGetWorkflowParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  workflow_id: z.object({}),
})

router.get(
  "actionsGetWorkflow",
  "/repos/:owner/:repo/actions/workflows/:workflowId",
  paramValidationFactory<t_ActionsGetWorkflowParamSchema>(
    actionsGetWorkflowParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetWorkflowParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflow
  }
)

const actionsDisableWorkflowParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  workflow_id: z.object({}),
})

router.put(
  "actionsDisableWorkflow",
  "/repos/:owner/:repo/actions/workflows/:workflowId/disable",
  paramValidationFactory<t_ActionsDisableWorkflowParamSchema>(
    actionsDisableWorkflowParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDisableWorkflowParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDisableWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDisableWorkflow
  }
)

const actionsCreateWorkflowDispatchParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  workflow_id: z.object({}),
})

const actionsCreateWorkflowDispatchBodySchema = z.object({
  ref: z.coerce.string(),
  inputs: z.object({}).optional(),
})

router.post(
  "actionsCreateWorkflowDispatch",
  "/repos/:owner/:repo/actions/workflows/:workflowId/dispatches",
  paramValidationFactory<t_ActionsCreateWorkflowDispatchParamSchema>(
    actionsCreateWorkflowDispatchParamSchema
  ),
  bodyValidationFactory<t_ActionsCreateWorkflowDispatchBodySchema>(
    actionsCreateWorkflowDispatchBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsCreateWorkflowDispatchParamSchema,
      void,
      t_ActionsCreateWorkflowDispatchBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateWorkflowDispatch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateWorkflowDispatch
  }
)

const actionsEnableWorkflowParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  workflow_id: z.object({}),
})

router.put(
  "actionsEnableWorkflow",
  "/repos/:owner/:repo/actions/workflows/:workflowId/enable",
  paramValidationFactory<t_ActionsEnableWorkflowParamSchema>(
    actionsEnableWorkflowParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsEnableWorkflowParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsEnableWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsEnableWorkflow
  }
)

const actionsListWorkflowRunsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  workflow_id: z.object({}),
})

const actionsListWorkflowRunsQuerySchema = z.object({
  actor: z.coerce.string().optional(),
  branch: z.coerce.string().optional(),
  event: z.coerce.string().optional(),
  status: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  created: z.coerce.string().optional(),
  exclude_pull_requests: z.coerce.boolean().optional(),
  check_suite_id: z.coerce.number().optional(),
  head_sha: z.coerce.string().optional(),
})

router.get(
  "actionsListWorkflowRuns",
  "/repos/:owner/:repo/actions/workflows/:workflowId/runs",
  paramValidationFactory<t_ActionsListWorkflowRunsParamSchema>(
    actionsListWorkflowRunsParamSchema
  ),
  queryValidationFactory<t_ActionsListWorkflowRunsQuerySchema>(
    actionsListWorkflowRunsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListWorkflowRunsParamSchema,
      t_ActionsListWorkflowRunsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListWorkflowRuns

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListWorkflowRuns
  }
)

const actionsGetWorkflowUsageParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  workflow_id: z.object({}),
})

router.get(
  "actionsGetWorkflowUsage",
  "/repos/:owner/:repo/actions/workflows/:workflowId/timing",
  paramValidationFactory<t_ActionsGetWorkflowUsageParamSchema>(
    actionsGetWorkflowUsageParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetWorkflowUsageParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetWorkflowUsage

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflowUsage
  }
)

const issuesListAssigneesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const issuesListAssigneesQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListAssignees",
  "/repos/:owner/:repo/assignees",
  paramValidationFactory<t_IssuesListAssigneesParamSchema>(
    issuesListAssigneesParamSchema
  ),
  queryValidationFactory<t_IssuesListAssigneesQuerySchema>(
    issuesListAssigneesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListAssigneesParamSchema,
      t_IssuesListAssigneesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListAssignees

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListAssignees
  }
)

const issuesCheckUserCanBeAssignedParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  assignee: z.coerce.string(),
})

router.get(
  "issuesCheckUserCanBeAssigned",
  "/repos/:owner/:repo/assignees/:assignee",
  paramValidationFactory<t_IssuesCheckUserCanBeAssignedParamSchema>(
    issuesCheckUserCanBeAssignedParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_IssuesCheckUserCanBeAssignedParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesCheckUserCanBeAssigned

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCheckUserCanBeAssigned
  }
)

const reposListAutolinksParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListAutolinksQuerySchema = z.object({
  page: z.coerce.number().optional(),
})

router.get(
  "reposListAutolinks",
  "/repos/:owner/:repo/autolinks",
  paramValidationFactory<t_ReposListAutolinksParamSchema>(
    reposListAutolinksParamSchema
  ),
  queryValidationFactory<t_ReposListAutolinksQuerySchema>(
    reposListAutolinksQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListAutolinksParamSchema,
      t_ReposListAutolinksQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListAutolinks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListAutolinks
  }
)

const reposCreateAutolinkParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposCreateAutolinkBodySchema = z.object({
  key_prefix: z.coerce.string(),
  url_template: z.coerce.string(),
  is_alphanumeric: z.coerce.boolean().optional(),
})

router.post(
  "reposCreateAutolink",
  "/repos/:owner/:repo/autolinks",
  paramValidationFactory<t_ReposCreateAutolinkParamSchema>(
    reposCreateAutolinkParamSchema
  ),
  bodyValidationFactory<t_ReposCreateAutolinkBodySchema>(
    reposCreateAutolinkBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateAutolinkParamSchema,
      void,
      t_ReposCreateAutolinkBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateAutolink

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateAutolink
  }
)

const reposGetAutolinkParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  autolink_id: z.coerce.number(),
})

router.get(
  "reposGetAutolink",
  "/repos/:owner/:repo/autolinks/:autolinkId",
  paramValidationFactory<t_ReposGetAutolinkParamSchema>(
    reposGetAutolinkParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetAutolinkParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetAutolink

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAutolink
  }
)

const reposDeleteAutolinkParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  autolink_id: z.coerce.number(),
})

router.delete(
  "reposDeleteAutolink",
  "/repos/:owner/:repo/autolinks/:autolinkId",
  paramValidationFactory<t_ReposDeleteAutolinkParamSchema>(
    reposDeleteAutolinkParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteAutolinkParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteAutolink

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteAutolink
  }
)

const reposEnableAutomatedSecurityFixesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.put(
  "reposEnableAutomatedSecurityFixes",
  "/repos/:owner/:repo/automated-security-fixes",
  paramValidationFactory<t_ReposEnableAutomatedSecurityFixesParamSchema>(
    reposEnableAutomatedSecurityFixesParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposEnableAutomatedSecurityFixesParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposEnableAutomatedSecurityFixes

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposEnableAutomatedSecurityFixes
  }
)

const reposDisableAutomatedSecurityFixesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.delete(
  "reposDisableAutomatedSecurityFixes",
  "/repos/:owner/:repo/automated-security-fixes",
  paramValidationFactory<t_ReposDisableAutomatedSecurityFixesParamSchema>(
    reposDisableAutomatedSecurityFixesParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposDisableAutomatedSecurityFixesParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposDisableAutomatedSecurityFixes

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDisableAutomatedSecurityFixes
  }
)

const reposListBranchesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListBranchesQuerySchema = z.object({
  protected: z.coerce.boolean().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListBranches",
  "/repos/:owner/:repo/branches",
  paramValidationFactory<t_ReposListBranchesParamSchema>(
    reposListBranchesParamSchema
  ),
  queryValidationFactory<t_ReposListBranchesQuerySchema>(
    reposListBranchesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListBranchesParamSchema,
      t_ReposListBranchesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListBranches

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListBranches
  }
)

const reposGetBranchParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.get(
  "reposGetBranch",
  "/repos/:owner/:repo/branches/:branch",
  paramValidationFactory<t_ReposGetBranchParamSchema>(
    reposGetBranchParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetBranchParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetBranch
  }
)

const reposGetBranchProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.get(
  "reposGetBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  paramValidationFactory<t_ReposGetBranchProtectionParamSchema>(
    reposGetBranchProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetBranchProtectionParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetBranchProtection
  }
)

const reposUpdateBranchProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposUpdateBranchProtectionBodySchema = z.object({
  required_status_checks: z.object({
    strict: z.coerce.boolean(),
    contexts: z.array(z.coerce.string().optional()),
    checks: z
      .array(
        z
          .object({
            context: z.coerce.string(),
            app_id: z.coerce.number().optional(),
          })
          .optional()
      )
      .optional(),
  }),
  enforce_admins: z.coerce.boolean(),
  required_pull_request_reviews: z.object({
    dismissal_restrictions: z
      .object({
        users: z.array(z.coerce.string().optional()).optional(),
        teams: z.array(z.coerce.string().optional()).optional(),
        apps: z.array(z.coerce.string().optional()).optional(),
      })
      .optional(),
    dismiss_stale_reviews: z.coerce.boolean().optional(),
    require_code_owner_reviews: z.coerce.boolean().optional(),
    required_approving_review_count: z.coerce.number().optional(),
    require_last_push_approval: z.coerce.boolean().optional(),
    bypass_pull_request_allowances: z
      .object({
        users: z.array(z.coerce.string().optional()).optional(),
        teams: z.array(z.coerce.string().optional()).optional(),
        apps: z.array(z.coerce.string().optional()).optional(),
      })
      .optional(),
  }),
  restrictions: z.object({
    users: z.array(z.coerce.string().optional()),
    teams: z.array(z.coerce.string().optional()),
    apps: z.array(z.coerce.string().optional()).optional(),
  }),
  required_linear_history: z.coerce.boolean().optional(),
  allow_force_pushes: z.coerce.boolean().optional(),
  allow_deletions: z.coerce.boolean().optional(),
  block_creations: z.coerce.boolean().optional(),
  required_conversation_resolution: z.coerce.boolean().optional(),
  lock_branch: z.coerce.boolean().optional(),
  allow_fork_syncing: z.coerce.boolean().optional(),
})

router.put(
  "reposUpdateBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  paramValidationFactory<t_ReposUpdateBranchProtectionParamSchema>(
    reposUpdateBranchProtectionParamSchema
  ),
  bodyValidationFactory<t_ReposUpdateBranchProtectionBodySchema>(
    reposUpdateBranchProtectionBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUpdateBranchProtectionParamSchema,
      void,
      t_ReposUpdateBranchProtectionBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdateBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateBranchProtection
  }
)

const reposDeleteBranchProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.delete(
  "reposDeleteBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  paramValidationFactory<t_ReposDeleteBranchProtectionParamSchema>(
    reposDeleteBranchProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteBranchProtectionParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteBranchProtection
  }
)

const reposGetAdminBranchProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.get(
  "reposGetAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  paramValidationFactory<t_ReposGetAdminBranchProtectionParamSchema>(
    reposGetAdminBranchProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetAdminBranchProtectionParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetAdminBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAdminBranchProtection
  }
)

const reposSetAdminBranchProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.post(
  "reposSetAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  paramValidationFactory<t_ReposSetAdminBranchProtectionParamSchema>(
    reposSetAdminBranchProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposSetAdminBranchProtectionParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposSetAdminBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetAdminBranchProtection
  }
)

const reposDeleteAdminBranchProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.delete(
  "reposDeleteAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  paramValidationFactory<t_ReposDeleteAdminBranchProtectionParamSchema>(
    reposDeleteAdminBranchProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposDeleteAdminBranchProtectionParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteAdminBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteAdminBranchProtection
  }
)

const reposGetPullRequestReviewProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.get(
  "reposGetPullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  paramValidationFactory<t_ReposGetPullRequestReviewProtectionParamSchema>(
    reposGetPullRequestReviewProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetPullRequestReviewProtectionParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetPullRequestReviewProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPullRequestReviewProtection
  }
)

const reposUpdatePullRequestReviewProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposUpdatePullRequestReviewProtectionBodySchema = z
  .object({
    dismissal_restrictions: z
      .object({
        users: z.array(z.coerce.string().optional()).optional(),
        teams: z.array(z.coerce.string().optional()).optional(),
        apps: z.array(z.coerce.string().optional()).optional(),
      })
      .optional(),
    dismiss_stale_reviews: z.coerce.boolean().optional(),
    require_code_owner_reviews: z.coerce.boolean().optional(),
    required_approving_review_count: z.coerce.number().optional(),
    require_last_push_approval: z.coerce.boolean().optional(),
    bypass_pull_request_allowances: z
      .object({
        users: z.array(z.coerce.string().optional()).optional(),
        teams: z.array(z.coerce.string().optional()).optional(),
        apps: z.array(z.coerce.string().optional()).optional(),
      })
      .optional(),
  })
  .optional()

router.patch(
  "reposUpdatePullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  paramValidationFactory<t_ReposUpdatePullRequestReviewProtectionParamSchema>(
    reposUpdatePullRequestReviewProtectionParamSchema
  ),
  bodyValidationFactory<t_ReposUpdatePullRequestReviewProtectionBodySchema>(
    reposUpdatePullRequestReviewProtectionBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUpdatePullRequestReviewProtectionParamSchema,
      void,
      t_ReposUpdatePullRequestReviewProtectionBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdatePullRequestReviewProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdatePullRequestReviewProtection
  }
)

const reposDeletePullRequestReviewProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.delete(
  "reposDeletePullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  paramValidationFactory<t_ReposDeletePullRequestReviewProtectionParamSchema>(
    reposDeletePullRequestReviewProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposDeletePullRequestReviewProtectionParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposDeletePullRequestReviewProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeletePullRequestReviewProtection
  }
)

const reposGetCommitSignatureProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.get(
  "reposGetCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  paramValidationFactory<t_ReposGetCommitSignatureProtectionParamSchema>(
    reposGetCommitSignatureProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetCommitSignatureProtectionParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetCommitSignatureProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommitSignatureProtection
  }
)

const reposCreateCommitSignatureProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.post(
  "reposCreateCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  paramValidationFactory<t_ReposCreateCommitSignatureProtectionParamSchema>(
    reposCreateCommitSignatureProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateCommitSignatureProtectionParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateCommitSignatureProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateCommitSignatureProtection
  }
)

const reposDeleteCommitSignatureProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.delete(
  "reposDeleteCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  paramValidationFactory<t_ReposDeleteCommitSignatureProtectionParamSchema>(
    reposDeleteCommitSignatureProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposDeleteCommitSignatureProtectionParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteCommitSignatureProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteCommitSignatureProtection
  }
)

const reposGetStatusChecksProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.get(
  "reposGetStatusChecksProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  paramValidationFactory<t_ReposGetStatusChecksProtectionParamSchema>(
    reposGetStatusChecksProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetStatusChecksProtectionParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetStatusChecksProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetStatusChecksProtection
  }
)

const reposUpdateStatusCheckProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposUpdateStatusCheckProtectionBodySchema = z
  .object({
    strict: z.coerce.boolean().optional(),
    contexts: z.array(z.coerce.string().optional()).optional(),
    checks: z
      .array(
        z
          .object({
            context: z.coerce.string(),
            app_id: z.coerce.number().optional(),
          })
          .optional()
      )
      .optional(),
  })
  .optional()

router.patch(
  "reposUpdateStatusCheckProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  paramValidationFactory<t_ReposUpdateStatusCheckProtectionParamSchema>(
    reposUpdateStatusCheckProtectionParamSchema
  ),
  bodyValidationFactory<t_ReposUpdateStatusCheckProtectionBodySchema>(
    reposUpdateStatusCheckProtectionBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUpdateStatusCheckProtectionParamSchema,
      void,
      t_ReposUpdateStatusCheckProtectionBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdateStatusCheckProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateStatusCheckProtection
  }
)

const reposRemoveStatusCheckProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.delete(
  "reposRemoveStatusCheckProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  paramValidationFactory<t_ReposRemoveStatusCheckProtectionParamSchema>(
    reposRemoveStatusCheckProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposRemoveStatusCheckProtectionParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposRemoveStatusCheckProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveStatusCheckProtection
  }
)

const reposGetAllStatusCheckContextsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.get(
  "reposGetAllStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<t_ReposGetAllStatusCheckContextsParamSchema>(
    reposGetAllStatusCheckContextsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetAllStatusCheckContextsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetAllStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAllStatusCheckContexts
  }
)

const reposAddStatusCheckContextsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposAddStatusCheckContextsBodySchema = z.object({}).optional()

router.post(
  "reposAddStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<t_ReposAddStatusCheckContextsParamSchema>(
    reposAddStatusCheckContextsParamSchema
  ),
  bodyValidationFactory<t_ReposAddStatusCheckContextsBodySchema>(
    reposAddStatusCheckContextsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposAddStatusCheckContextsParamSchema,
      void,
      t_ReposAddStatusCheckContextsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposAddStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddStatusCheckContexts
  }
)

const reposSetStatusCheckContextsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposSetStatusCheckContextsBodySchema = z.object({}).optional()

router.put(
  "reposSetStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<t_ReposSetStatusCheckContextsParamSchema>(
    reposSetStatusCheckContextsParamSchema
  ),
  bodyValidationFactory<t_ReposSetStatusCheckContextsBodySchema>(
    reposSetStatusCheckContextsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposSetStatusCheckContextsParamSchema,
      void,
      t_ReposSetStatusCheckContextsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposSetStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetStatusCheckContexts
  }
)

const reposRemoveStatusCheckContextsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposRemoveStatusCheckContextsBodySchema = z.object({})

router.delete(
  "reposRemoveStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<t_ReposRemoveStatusCheckContextsParamSchema>(
    reposRemoveStatusCheckContextsParamSchema
  ),
  bodyValidationFactory<t_ReposRemoveStatusCheckContextsBodySchema>(
    reposRemoveStatusCheckContextsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposRemoveStatusCheckContextsParamSchema,
      void,
      t_ReposRemoveStatusCheckContextsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposRemoveStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveStatusCheckContexts
  }
)

const reposGetAccessRestrictionsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.get(
  "reposGetAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions",
  paramValidationFactory<t_ReposGetAccessRestrictionsParamSchema>(
    reposGetAccessRestrictionsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetAccessRestrictionsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAccessRestrictions
  }
)

const reposDeleteAccessRestrictionsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.delete(
  "reposDeleteAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions",
  paramValidationFactory<t_ReposDeleteAccessRestrictionsParamSchema>(
    reposDeleteAccessRestrictionsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteAccessRestrictionsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteAccessRestrictions
  }
)

const reposGetAppsWithAccessToProtectedBranchParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.get(
  "reposGetAppsWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<t_ReposGetAppsWithAccessToProtectedBranchParamSchema>(
    reposGetAppsWithAccessToProtectedBranchParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetAppsWithAccessToProtectedBranchParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetAppsWithAccessToProtectedBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAppsWithAccessToProtectedBranch
  }
)

const reposAddAppAccessRestrictionsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposAddAppAccessRestrictionsBodySchema = z.object({}).optional()

router.post(
  "reposAddAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<t_ReposAddAppAccessRestrictionsParamSchema>(
    reposAddAppAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<t_ReposAddAppAccessRestrictionsBodySchema>(
    reposAddAppAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposAddAppAccessRestrictionsParamSchema,
      void,
      t_ReposAddAppAccessRestrictionsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposAddAppAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddAppAccessRestrictions
  }
)

const reposSetAppAccessRestrictionsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposSetAppAccessRestrictionsBodySchema = z.object({}).optional()

router.put(
  "reposSetAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<t_ReposSetAppAccessRestrictionsParamSchema>(
    reposSetAppAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<t_ReposSetAppAccessRestrictionsBodySchema>(
    reposSetAppAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposSetAppAccessRestrictionsParamSchema,
      void,
      t_ReposSetAppAccessRestrictionsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposSetAppAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetAppAccessRestrictions
  }
)

const reposRemoveAppAccessRestrictionsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposRemoveAppAccessRestrictionsBodySchema = z.object({})

router.delete(
  "reposRemoveAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<t_ReposRemoveAppAccessRestrictionsParamSchema>(
    reposRemoveAppAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<t_ReposRemoveAppAccessRestrictionsBodySchema>(
    reposRemoveAppAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposRemoveAppAccessRestrictionsParamSchema,
      void,
      t_ReposRemoveAppAccessRestrictionsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposRemoveAppAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveAppAccessRestrictions
  }
)

const reposGetTeamsWithAccessToProtectedBranchParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.get(
  "reposGetTeamsWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<t_ReposGetTeamsWithAccessToProtectedBranchParamSchema>(
    reposGetTeamsWithAccessToProtectedBranchParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetTeamsWithAccessToProtectedBranchParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetTeamsWithAccessToProtectedBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetTeamsWithAccessToProtectedBranch
  }
)

const reposAddTeamAccessRestrictionsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposAddTeamAccessRestrictionsBodySchema = z.object({}).optional()

router.post(
  "reposAddTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<t_ReposAddTeamAccessRestrictionsParamSchema>(
    reposAddTeamAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<t_ReposAddTeamAccessRestrictionsBodySchema>(
    reposAddTeamAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposAddTeamAccessRestrictionsParamSchema,
      void,
      t_ReposAddTeamAccessRestrictionsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposAddTeamAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddTeamAccessRestrictions
  }
)

const reposSetTeamAccessRestrictionsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposSetTeamAccessRestrictionsBodySchema = z.object({}).optional()

router.put(
  "reposSetTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<t_ReposSetTeamAccessRestrictionsParamSchema>(
    reposSetTeamAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<t_ReposSetTeamAccessRestrictionsBodySchema>(
    reposSetTeamAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposSetTeamAccessRestrictionsParamSchema,
      void,
      t_ReposSetTeamAccessRestrictionsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposSetTeamAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetTeamAccessRestrictions
  }
)

const reposRemoveTeamAccessRestrictionsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposRemoveTeamAccessRestrictionsBodySchema = z.object({})

router.delete(
  "reposRemoveTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<t_ReposRemoveTeamAccessRestrictionsParamSchema>(
    reposRemoveTeamAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<t_ReposRemoveTeamAccessRestrictionsBodySchema>(
    reposRemoveTeamAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposRemoveTeamAccessRestrictionsParamSchema,
      void,
      t_ReposRemoveTeamAccessRestrictionsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposRemoveTeamAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveTeamAccessRestrictions
  }
)

const reposGetUsersWithAccessToProtectedBranchParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

router.get(
  "reposGetUsersWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<t_ReposGetUsersWithAccessToProtectedBranchParamSchema>(
    reposGetUsersWithAccessToProtectedBranchParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetUsersWithAccessToProtectedBranchParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetUsersWithAccessToProtectedBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetUsersWithAccessToProtectedBranch
  }
)

const reposAddUserAccessRestrictionsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposAddUserAccessRestrictionsBodySchema = z.object({}).optional()

router.post(
  "reposAddUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<t_ReposAddUserAccessRestrictionsParamSchema>(
    reposAddUserAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<t_ReposAddUserAccessRestrictionsBodySchema>(
    reposAddUserAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposAddUserAccessRestrictionsParamSchema,
      void,
      t_ReposAddUserAccessRestrictionsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposAddUserAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddUserAccessRestrictions
  }
)

const reposSetUserAccessRestrictionsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposSetUserAccessRestrictionsBodySchema = z.object({}).optional()

router.put(
  "reposSetUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<t_ReposSetUserAccessRestrictionsParamSchema>(
    reposSetUserAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<t_ReposSetUserAccessRestrictionsBodySchema>(
    reposSetUserAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposSetUserAccessRestrictionsParamSchema,
      void,
      t_ReposSetUserAccessRestrictionsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposSetUserAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetUserAccessRestrictions
  }
)

const reposRemoveUserAccessRestrictionsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposRemoveUserAccessRestrictionsBodySchema = z.object({})

router.delete(
  "reposRemoveUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<t_ReposRemoveUserAccessRestrictionsParamSchema>(
    reposRemoveUserAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<t_ReposRemoveUserAccessRestrictionsBodySchema>(
    reposRemoveUserAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposRemoveUserAccessRestrictionsParamSchema,
      void,
      t_ReposRemoveUserAccessRestrictionsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposRemoveUserAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveUserAccessRestrictions
  }
)

const reposRenameBranchParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  branch: z.coerce.string(),
})

const reposRenameBranchBodySchema = z.object({ new_name: z.coerce.string() })

router.post(
  "reposRenameBranch",
  "/repos/:owner/:repo/branches/:branch/rename",
  paramValidationFactory<t_ReposRenameBranchParamSchema>(
    reposRenameBranchParamSchema
  ),
  bodyValidationFactory<t_ReposRenameBranchBodySchema>(
    reposRenameBranchBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposRenameBranchParamSchema,
      void,
      t_ReposRenameBranchBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposRenameBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRenameBranch
  }
)

const checksCreateParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const checksCreateBodySchema = z.object({
  name: z.coerce.string(),
  head_sha: z.coerce.string(),
  details_url: z.coerce.string().optional(),
  external_id: z.coerce.string().optional(),
  status: z.coerce.string().optional(),
  started_at: z.coerce.string().optional(),
  conclusion: z.coerce.string().optional(),
  completed_at: z.coerce.string().optional(),
  output: z
    .object({
      title: z.coerce.string(),
      summary: z.coerce.string(),
      text: z.coerce.string().optional(),
      annotations: z
        .array(
          z
            .object({
              path: z.coerce.string(),
              start_line: z.coerce.number(),
              end_line: z.coerce.number(),
              start_column: z.coerce.number().optional(),
              end_column: z.coerce.number().optional(),
              annotation_level: z.coerce.string(),
              message: z.coerce.string(),
              title: z.coerce.string().optional(),
              raw_details: z.coerce.string().optional(),
            })
            .optional()
        )
        .optional(),
      images: z
        .array(
          z
            .object({
              alt: z.coerce.string(),
              image_url: z.coerce.string(),
              caption: z.coerce.string().optional(),
            })
            .optional()
        )
        .optional(),
    })
    .optional(),
  actions: z
    .array(
      z
        .object({
          label: z.coerce.string(),
          description: z.coerce.string(),
          identifier: z.coerce.string(),
        })
        .optional()
    )
    .optional(),
})

router.post(
  "checksCreate",
  "/repos/:owner/:repo/check-runs",
  paramValidationFactory<t_ChecksCreateParamSchema>(checksCreateParamSchema),
  bodyValidationFactory<t_ChecksCreateBodySchema>(checksCreateBodySchema),
  async (
    ctx: ValidatedCtx<
      t_ChecksCreateParamSchema,
      void,
      t_ChecksCreateBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-checksCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksCreate
  }
)

const checksGetParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  check_run_id: z.coerce.number(),
})

router.get(
  "checksGet",
  "/repos/:owner/:repo/check-runs/:checkRunId",
  paramValidationFactory<t_ChecksGetParamSchema>(checksGetParamSchema),
  async (ctx: ValidatedCtx<t_ChecksGetParamSchema, void, void>, next: Next) => {
    //region safe-edit-region-checksGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksGet
  }
)

const checksUpdateParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  check_run_id: z.coerce.number(),
})

const checksUpdateBodySchema = z.object({
  name: z.coerce.string().optional(),
  details_url: z.coerce.string().optional(),
  external_id: z.coerce.string().optional(),
  started_at: z.coerce.string().optional(),
  status: z.coerce.string().optional(),
  conclusion: z.coerce.string().optional(),
  completed_at: z.coerce.string().optional(),
  output: z
    .object({
      title: z.coerce.string().optional(),
      summary: z.coerce.string(),
      text: z.coerce.string().optional(),
      annotations: z
        .array(
          z
            .object({
              path: z.coerce.string(),
              start_line: z.coerce.number(),
              end_line: z.coerce.number(),
              start_column: z.coerce.number().optional(),
              end_column: z.coerce.number().optional(),
              annotation_level: z.coerce.string(),
              message: z.coerce.string(),
              title: z.coerce.string().optional(),
              raw_details: z.coerce.string().optional(),
            })
            .optional()
        )
        .optional(),
      images: z
        .array(
          z
            .object({
              alt: z.coerce.string(),
              image_url: z.coerce.string(),
              caption: z.coerce.string().optional(),
            })
            .optional()
        )
        .optional(),
    })
    .optional(),
  actions: z
    .array(
      z
        .object({
          label: z.coerce.string(),
          description: z.coerce.string(),
          identifier: z.coerce.string(),
        })
        .optional()
    )
    .optional(),
})

router.patch(
  "checksUpdate",
  "/repos/:owner/:repo/check-runs/:checkRunId",
  paramValidationFactory<t_ChecksUpdateParamSchema>(checksUpdateParamSchema),
  bodyValidationFactory<t_ChecksUpdateBodySchema>(checksUpdateBodySchema),
  async (
    ctx: ValidatedCtx<
      t_ChecksUpdateParamSchema,
      void,
      t_ChecksUpdateBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-checksUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksUpdate
  }
)

const checksListAnnotationsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  check_run_id: z.coerce.number(),
})

const checksListAnnotationsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "checksListAnnotations",
  "/repos/:owner/:repo/check-runs/:checkRunId/annotations",
  paramValidationFactory<t_ChecksListAnnotationsParamSchema>(
    checksListAnnotationsParamSchema
  ),
  queryValidationFactory<t_ChecksListAnnotationsQuerySchema>(
    checksListAnnotationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ChecksListAnnotationsParamSchema,
      t_ChecksListAnnotationsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-checksListAnnotations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListAnnotations
  }
)

const checksRerequestRunParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  check_run_id: z.coerce.number(),
})

router.post(
  "checksRerequestRun",
  "/repos/:owner/:repo/check-runs/:checkRunId/rerequest",
  paramValidationFactory<t_ChecksRerequestRunParamSchema>(
    checksRerequestRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ChecksRerequestRunParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-checksRerequestRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksRerequestRun
  }
)

const checksCreateSuiteParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const checksCreateSuiteBodySchema = z.object({ head_sha: z.coerce.string() })

router.post(
  "checksCreateSuite",
  "/repos/:owner/:repo/check-suites",
  paramValidationFactory<t_ChecksCreateSuiteParamSchema>(
    checksCreateSuiteParamSchema
  ),
  bodyValidationFactory<t_ChecksCreateSuiteBodySchema>(
    checksCreateSuiteBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ChecksCreateSuiteParamSchema,
      void,
      t_ChecksCreateSuiteBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-checksCreateSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksCreateSuite
  }
)

const checksSetSuitesPreferencesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const checksSetSuitesPreferencesBodySchema = z.object({
  auto_trigger_checks: z
    .array(
      z
        .object({ app_id: z.coerce.number(), setting: z.coerce.boolean() })
        .optional()
    )
    .optional(),
})

router.patch(
  "checksSetSuitesPreferences",
  "/repos/:owner/:repo/check-suites/preferences",
  paramValidationFactory<t_ChecksSetSuitesPreferencesParamSchema>(
    checksSetSuitesPreferencesParamSchema
  ),
  bodyValidationFactory<t_ChecksSetSuitesPreferencesBodySchema>(
    checksSetSuitesPreferencesBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ChecksSetSuitesPreferencesParamSchema,
      void,
      t_ChecksSetSuitesPreferencesBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-checksSetSuitesPreferences

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksSetSuitesPreferences
  }
)

const checksGetSuiteParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  check_suite_id: z.coerce.number(),
})

router.get(
  "checksGetSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId",
  paramValidationFactory<t_ChecksGetSuiteParamSchema>(
    checksGetSuiteParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ChecksGetSuiteParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-checksGetSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksGetSuite
  }
)

const checksListForSuiteParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  check_suite_id: z.coerce.number(),
})

const checksListForSuiteQuerySchema = z.object({
  check_name: z.coerce.string().optional(),
  status: z.coerce.string().optional(),
  filter: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "checksListForSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId/check-runs",
  paramValidationFactory<t_ChecksListForSuiteParamSchema>(
    checksListForSuiteParamSchema
  ),
  queryValidationFactory<t_ChecksListForSuiteQuerySchema>(
    checksListForSuiteQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ChecksListForSuiteParamSchema,
      t_ChecksListForSuiteQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-checksListForSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListForSuite
  }
)

const checksRerequestSuiteParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  check_suite_id: z.coerce.number(),
})

router.post(
  "checksRerequestSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId/rerequest",
  paramValidationFactory<t_ChecksRerequestSuiteParamSchema>(
    checksRerequestSuiteParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ChecksRerequestSuiteParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-checksRerequestSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksRerequestSuite
  }
)

const codeScanningListAlertsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const codeScanningListAlertsForRepoQuerySchema = z.object({
  tool_name: z.coerce.string().optional(),
  tool_guid: z.coerce.string().optional(),
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
  ref: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  state: z.coerce.string().optional(),
  severity: z.coerce.string().optional(),
})

router.get(
  "codeScanningListAlertsForRepo",
  "/repos/:owner/:repo/code-scanning/alerts",
  paramValidationFactory<t_CodeScanningListAlertsForRepoParamSchema>(
    codeScanningListAlertsForRepoParamSchema
  ),
  queryValidationFactory<t_CodeScanningListAlertsForRepoQuerySchema>(
    codeScanningListAlertsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodeScanningListAlertsForRepoParamSchema,
      t_CodeScanningListAlertsForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningListAlertsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningListAlertsForRepo
  }
)

const codeScanningGetAlertParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  alert_number: z.coerce.number(),
})

router.get(
  "codeScanningGetAlert",
  "/repos/:owner/:repo/code-scanning/alerts/:alertNumber",
  paramValidationFactory<t_CodeScanningGetAlertParamSchema>(
    codeScanningGetAlertParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodeScanningGetAlertParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningGetAlert

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningGetAlert
  }
)

const codeScanningUpdateAlertParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  alert_number: z.coerce.number(),
})

const codeScanningUpdateAlertBodySchema = z.object({
  state: z.coerce.string(),
  dismissed_reason: z.coerce.string().optional(),
  dismissed_comment: z.coerce.string().optional(),
})

router.patch(
  "codeScanningUpdateAlert",
  "/repos/:owner/:repo/code-scanning/alerts/:alertNumber",
  paramValidationFactory<t_CodeScanningUpdateAlertParamSchema>(
    codeScanningUpdateAlertParamSchema
  ),
  bodyValidationFactory<t_CodeScanningUpdateAlertBodySchema>(
    codeScanningUpdateAlertBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodeScanningUpdateAlertParamSchema,
      void,
      t_CodeScanningUpdateAlertBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningUpdateAlert

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningUpdateAlert
  }
)

const codeScanningListAlertInstancesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  alert_number: z.coerce.number(),
})

const codeScanningListAlertInstancesQuerySchema = z.object({
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
  ref: z.coerce.string().optional(),
})

router.get(
  "codeScanningListAlertInstances",
  "/repos/:owner/:repo/code-scanning/alerts/:alertNumber/instances",
  paramValidationFactory<t_CodeScanningListAlertInstancesParamSchema>(
    codeScanningListAlertInstancesParamSchema
  ),
  queryValidationFactory<t_CodeScanningListAlertInstancesQuerySchema>(
    codeScanningListAlertInstancesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodeScanningListAlertInstancesParamSchema,
      t_CodeScanningListAlertInstancesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningListAlertInstances

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningListAlertInstances
  }
)

const codeScanningListRecentAnalysesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const codeScanningListRecentAnalysesQuerySchema = z.object({
  tool_name: z.coerce.string().optional(),
  tool_guid: z.coerce.string().optional(),
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
  ref: z.coerce.string().optional(),
  sarif_id: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
})

router.get(
  "codeScanningListRecentAnalyses",
  "/repos/:owner/:repo/code-scanning/analyses",
  paramValidationFactory<t_CodeScanningListRecentAnalysesParamSchema>(
    codeScanningListRecentAnalysesParamSchema
  ),
  queryValidationFactory<t_CodeScanningListRecentAnalysesQuerySchema>(
    codeScanningListRecentAnalysesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodeScanningListRecentAnalysesParamSchema,
      t_CodeScanningListRecentAnalysesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningListRecentAnalyses

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningListRecentAnalyses
  }
)

const codeScanningGetAnalysisParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  analysis_id: z.coerce.number(),
})

router.get(
  "codeScanningGetAnalysis",
  "/repos/:owner/:repo/code-scanning/analyses/:analysisId",
  paramValidationFactory<t_CodeScanningGetAnalysisParamSchema>(
    codeScanningGetAnalysisParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodeScanningGetAnalysisParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningGetAnalysis

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningGetAnalysis
  }
)

const codeScanningDeleteAnalysisParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  analysis_id: z.coerce.number(),
})

const codeScanningDeleteAnalysisQuerySchema = z.object({
  confirm_delete: z.coerce.string().optional(),
})

router.delete(
  "codeScanningDeleteAnalysis",
  "/repos/:owner/:repo/code-scanning/analyses/:analysisId",
  paramValidationFactory<t_CodeScanningDeleteAnalysisParamSchema>(
    codeScanningDeleteAnalysisParamSchema
  ),
  queryValidationFactory<t_CodeScanningDeleteAnalysisQuerySchema>(
    codeScanningDeleteAnalysisQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodeScanningDeleteAnalysisParamSchema,
      t_CodeScanningDeleteAnalysisQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningDeleteAnalysis

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningDeleteAnalysis
  }
)

const codeScanningListCodeqlDatabasesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "codeScanningListCodeqlDatabases",
  "/repos/:owner/:repo/code-scanning/codeql/databases",
  paramValidationFactory<t_CodeScanningListCodeqlDatabasesParamSchema>(
    codeScanningListCodeqlDatabasesParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodeScanningListCodeqlDatabasesParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningListCodeqlDatabases

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningListCodeqlDatabases
  }
)

const codeScanningGetCodeqlDatabaseParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  language: z.coerce.string(),
})

router.get(
  "codeScanningGetCodeqlDatabase",
  "/repos/:owner/:repo/code-scanning/codeql/databases/:language",
  paramValidationFactory<t_CodeScanningGetCodeqlDatabaseParamSchema>(
    codeScanningGetCodeqlDatabaseParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodeScanningGetCodeqlDatabaseParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningGetCodeqlDatabase

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningGetCodeqlDatabase
  }
)

const codeScanningUploadSarifParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const codeScanningUploadSarifBodySchema = z.object({
  commit_sha: z.coerce.string(),
  ref: z.coerce.string(),
  sarif: z.coerce.string(),
  checkout_uri: z.coerce.string().optional(),
  started_at: z.coerce.string().optional(),
  tool_name: z.coerce.string().optional(),
  validate: z.coerce.boolean().optional(),
})

router.post(
  "codeScanningUploadSarif",
  "/repos/:owner/:repo/code-scanning/sarifs",
  paramValidationFactory<t_CodeScanningUploadSarifParamSchema>(
    codeScanningUploadSarifParamSchema
  ),
  bodyValidationFactory<t_CodeScanningUploadSarifBodySchema>(
    codeScanningUploadSarifBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodeScanningUploadSarifParamSchema,
      void,
      t_CodeScanningUploadSarifBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningUploadSarif

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningUploadSarif
  }
)

const codeScanningGetSarifParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  sarif_id: z.coerce.string(),
})

router.get(
  "codeScanningGetSarif",
  "/repos/:owner/:repo/code-scanning/sarifs/:sarifId",
  paramValidationFactory<t_CodeScanningGetSarifParamSchema>(
    codeScanningGetSarifParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodeScanningGetSarifParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codeScanningGetSarif

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningGetSarif
  }
)

const reposCodeownersErrorsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposCodeownersErrorsQuerySchema = z.object({
  ref: z.coerce.string().optional(),
})

router.get(
  "reposCodeownersErrors",
  "/repos/:owner/:repo/codeowners/errors",
  paramValidationFactory<t_ReposCodeownersErrorsParamSchema>(
    reposCodeownersErrorsParamSchema
  ),
  queryValidationFactory<t_ReposCodeownersErrorsQuerySchema>(
    reposCodeownersErrorsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCodeownersErrorsParamSchema,
      t_ReposCodeownersErrorsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCodeownersErrors

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCodeownersErrors
  }
)

const codespacesListInRepositoryForAuthenticatedUserParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const codespacesListInRepositoryForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "codespacesListInRepositoryForAuthenticatedUser",
  "/repos/:owner/:repo/codespaces",
  paramValidationFactory<t_CodespacesListInRepositoryForAuthenticatedUserParamSchema>(
    codespacesListInRepositoryForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_CodespacesListInRepositoryForAuthenticatedUserQuerySchema>(
    codespacesListInRepositoryForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesListInRepositoryForAuthenticatedUserParamSchema,
      t_CodespacesListInRepositoryForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesListInRepositoryForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesListInRepositoryForAuthenticatedUser
  }
)

const codespacesCreateWithRepoForAuthenticatedUserParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const codespacesCreateWithRepoForAuthenticatedUserBodySchema = z.object({
  ref: z.coerce.string().optional(),
  location: z.coerce.string().optional(),
  client_ip: z.coerce.string().optional(),
  machine: z.coerce.string().optional(),
  devcontainer_path: z.coerce.string().optional(),
  multi_repo_permissions_opt_out: z.coerce.boolean().optional(),
  working_directory: z.coerce.string().optional(),
  idle_timeout_minutes: z.coerce.number().optional(),
  display_name: z.coerce.string().optional(),
  retention_period_minutes: z.coerce.number().optional(),
})

router.post(
  "codespacesCreateWithRepoForAuthenticatedUser",
  "/repos/:owner/:repo/codespaces",
  paramValidationFactory<t_CodespacesCreateWithRepoForAuthenticatedUserParamSchema>(
    codespacesCreateWithRepoForAuthenticatedUserParamSchema
  ),
  bodyValidationFactory<t_CodespacesCreateWithRepoForAuthenticatedUserBodySchema>(
    codespacesCreateWithRepoForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesCreateWithRepoForAuthenticatedUserParamSchema,
      void,
      t_CodespacesCreateWithRepoForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesCreateWithRepoForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesCreateWithRepoForAuthenticatedUser
  }
)

const codespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema =
  z.object({ owner: z.coerce.string(), repo: z.coerce.string() })

const codespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema =
  z.object({
    per_page: z.coerce.number().optional(),
    page: z.coerce.number().optional(),
  })

router.get(
  "codespacesListDevcontainersInRepositoryForAuthenticatedUser",
  "/repos/:owner/:repo/codespaces/devcontainers",
  paramValidationFactory<t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema>(
    codespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema>(
    codespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserParamSchema,
      t_CodespacesListDevcontainersInRepositoryForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesListDevcontainersInRepositoryForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesListDevcontainersInRepositoryForAuthenticatedUser
  }
)

const codespacesRepoMachinesForAuthenticatedUserParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const codespacesRepoMachinesForAuthenticatedUserQuerySchema = z.object({
  location: z.coerce.string().optional(),
  client_ip: z.coerce.string().optional(),
})

router.get(
  "codespacesRepoMachinesForAuthenticatedUser",
  "/repos/:owner/:repo/codespaces/machines",
  paramValidationFactory<t_CodespacesRepoMachinesForAuthenticatedUserParamSchema>(
    codespacesRepoMachinesForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_CodespacesRepoMachinesForAuthenticatedUserQuerySchema>(
    codespacesRepoMachinesForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesRepoMachinesForAuthenticatedUserParamSchema,
      t_CodespacesRepoMachinesForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesRepoMachinesForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesRepoMachinesForAuthenticatedUser
  }
)

const codespacesPreFlightWithRepoForAuthenticatedUserParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const codespacesPreFlightWithRepoForAuthenticatedUserQuerySchema = z.object({
  ref: z.coerce.string().optional(),
  client_ip: z.coerce.string().optional(),
})

router.get(
  "codespacesPreFlightWithRepoForAuthenticatedUser",
  "/repos/:owner/:repo/codespaces/new",
  paramValidationFactory<t_CodespacesPreFlightWithRepoForAuthenticatedUserParamSchema>(
    codespacesPreFlightWithRepoForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_CodespacesPreFlightWithRepoForAuthenticatedUserQuerySchema>(
    codespacesPreFlightWithRepoForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesPreFlightWithRepoForAuthenticatedUserParamSchema,
      t_CodespacesPreFlightWithRepoForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesPreFlightWithRepoForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesPreFlightWithRepoForAuthenticatedUser
  }
)

const codespacesListRepoSecretsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const codespacesListRepoSecretsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "codespacesListRepoSecrets",
  "/repos/:owner/:repo/codespaces/secrets",
  paramValidationFactory<t_CodespacesListRepoSecretsParamSchema>(
    codespacesListRepoSecretsParamSchema
  ),
  queryValidationFactory<t_CodespacesListRepoSecretsQuerySchema>(
    codespacesListRepoSecretsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesListRepoSecretsParamSchema,
      t_CodespacesListRepoSecretsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesListRepoSecrets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesListRepoSecrets
  }
)

const codespacesGetRepoPublicKeyParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "codespacesGetRepoPublicKey",
  "/repos/:owner/:repo/codespaces/secrets/public-key",
  paramValidationFactory<t_CodespacesGetRepoPublicKeyParamSchema>(
    codespacesGetRepoPublicKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodespacesGetRepoPublicKeyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codespacesGetRepoPublicKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesGetRepoPublicKey
  }
)

const codespacesGetRepoSecretParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.get(
  "codespacesGetRepoSecret",
  "/repos/:owner/:repo/codespaces/secrets/:secretName",
  paramValidationFactory<t_CodespacesGetRepoSecretParamSchema>(
    codespacesGetRepoSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodespacesGetRepoSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codespacesGetRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesGetRepoSecret
  }
)

const codespacesCreateOrUpdateRepoSecretParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const codespacesCreateOrUpdateRepoSecretBodySchema = z.object({
  encrypted_value: z.coerce.string().optional(),
  key_id: z.coerce.string().optional(),
})

router.put(
  "codespacesCreateOrUpdateRepoSecret",
  "/repos/:owner/:repo/codespaces/secrets/:secretName",
  paramValidationFactory<t_CodespacesCreateOrUpdateRepoSecretParamSchema>(
    codespacesCreateOrUpdateRepoSecretParamSchema
  ),
  bodyValidationFactory<t_CodespacesCreateOrUpdateRepoSecretBodySchema>(
    codespacesCreateOrUpdateRepoSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesCreateOrUpdateRepoSecretParamSchema,
      void,
      t_CodespacesCreateOrUpdateRepoSecretBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesCreateOrUpdateRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesCreateOrUpdateRepoSecret
  }
)

const codespacesDeleteRepoSecretParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.delete(
  "codespacesDeleteRepoSecret",
  "/repos/:owner/:repo/codespaces/secrets/:secretName",
  paramValidationFactory<t_CodespacesDeleteRepoSecretParamSchema>(
    codespacesDeleteRepoSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_CodespacesDeleteRepoSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-codespacesDeleteRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesDeleteRepoSecret
  }
)

const reposListCollaboratorsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListCollaboratorsQuerySchema = z.object({
  affiliation: z.coerce.string().optional(),
  permission: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListCollaborators",
  "/repos/:owner/:repo/collaborators",
  paramValidationFactory<t_ReposListCollaboratorsParamSchema>(
    reposListCollaboratorsParamSchema
  ),
  queryValidationFactory<t_ReposListCollaboratorsQuerySchema>(
    reposListCollaboratorsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListCollaboratorsParamSchema,
      t_ReposListCollaboratorsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListCollaborators

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCollaborators
  }
)

const reposCheckCollaboratorParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  username: z.coerce.string(),
})

router.get(
  "reposCheckCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  paramValidationFactory<t_ReposCheckCollaboratorParamSchema>(
    reposCheckCollaboratorParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposCheckCollaboratorParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposCheckCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCheckCollaborator
  }
)

const reposAddCollaboratorParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  username: z.coerce.string(),
})

const reposAddCollaboratorBodySchema = z
  .object({ permission: z.coerce.string().optional() })
  .optional()

router.put(
  "reposAddCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  paramValidationFactory<t_ReposAddCollaboratorParamSchema>(
    reposAddCollaboratorParamSchema
  ),
  bodyValidationFactory<t_ReposAddCollaboratorBodySchema>(
    reposAddCollaboratorBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposAddCollaboratorParamSchema,
      void,
      t_ReposAddCollaboratorBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposAddCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddCollaborator
  }
)

const reposRemoveCollaboratorParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  username: z.coerce.string(),
})

router.delete(
  "reposRemoveCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  paramValidationFactory<t_ReposRemoveCollaboratorParamSchema>(
    reposRemoveCollaboratorParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposRemoveCollaboratorParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposRemoveCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveCollaborator
  }
)

const reposGetCollaboratorPermissionLevelParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  username: z.coerce.string(),
})

router.get(
  "reposGetCollaboratorPermissionLevel",
  "/repos/:owner/:repo/collaborators/:username/permission",
  paramValidationFactory<t_ReposGetCollaboratorPermissionLevelParamSchema>(
    reposGetCollaboratorPermissionLevelParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetCollaboratorPermissionLevelParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetCollaboratorPermissionLevel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCollaboratorPermissionLevel
  }
)

const reposListCommitCommentsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListCommitCommentsForRepoQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListCommitCommentsForRepo",
  "/repos/:owner/:repo/comments",
  paramValidationFactory<t_ReposListCommitCommentsForRepoParamSchema>(
    reposListCommitCommentsForRepoParamSchema
  ),
  queryValidationFactory<t_ReposListCommitCommentsForRepoQuerySchema>(
    reposListCommitCommentsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListCommitCommentsForRepoParamSchema,
      t_ReposListCommitCommentsForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListCommitCommentsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommitCommentsForRepo
  }
)

const reposGetCommitCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

router.get(
  "reposGetCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  paramValidationFactory<t_ReposGetCommitCommentParamSchema>(
    reposGetCommitCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetCommitCommentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommitComment
  }
)

const reposUpdateCommitCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

const reposUpdateCommitCommentBodySchema = z.object({ body: z.coerce.string() })

router.patch(
  "reposUpdateCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  paramValidationFactory<t_ReposUpdateCommitCommentParamSchema>(
    reposUpdateCommitCommentParamSchema
  ),
  bodyValidationFactory<t_ReposUpdateCommitCommentBodySchema>(
    reposUpdateCommitCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUpdateCommitCommentParamSchema,
      void,
      t_ReposUpdateCommitCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdateCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateCommitComment
  }
)

const reposDeleteCommitCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

router.delete(
  "reposDeleteCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  paramValidationFactory<t_ReposDeleteCommitCommentParamSchema>(
    reposDeleteCommitCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteCommitCommentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteCommitComment
  }
)

const reactionsListForCommitCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

const reactionsListForCommitCommentQuerySchema = z.object({
  content: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reactionsListForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions",
  paramValidationFactory<t_ReactionsListForCommitCommentParamSchema>(
    reactionsListForCommitCommentParamSchema
  ),
  queryValidationFactory<t_ReactionsListForCommitCommentQuerySchema>(
    reactionsListForCommitCommentQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsListForCommitCommentParamSchema,
      t_ReactionsListForCommitCommentQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsListForCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForCommitComment
  }
)

const reactionsCreateForCommitCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

const reactionsCreateForCommitCommentBodySchema = z.object({
  content: z.coerce.string(),
})

router.post(
  "reactionsCreateForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions",
  paramValidationFactory<t_ReactionsCreateForCommitCommentParamSchema>(
    reactionsCreateForCommitCommentParamSchema
  ),
  bodyValidationFactory<t_ReactionsCreateForCommitCommentBodySchema>(
    reactionsCreateForCommitCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsCreateForCommitCommentParamSchema,
      void,
      t_ReactionsCreateForCommitCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsCreateForCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForCommitComment
  }
)

const reactionsDeleteForCommitCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
  reaction_id: z.coerce.number(),
})

router.delete(
  "reactionsDeleteForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions/:reactionId",
  paramValidationFactory<t_ReactionsDeleteForCommitCommentParamSchema>(
    reactionsDeleteForCommitCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReactionsDeleteForCommitCommentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reactionsDeleteForCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForCommitComment
  }
)

const reposListCommitsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListCommitsQuerySchema = z.object({
  sha: z.coerce.string().optional(),
  path: z.coerce.string().optional(),
  author: z.coerce.string().optional(),
  since: z.coerce.string().optional(),
  until: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListCommits",
  "/repos/:owner/:repo/commits",
  paramValidationFactory<t_ReposListCommitsParamSchema>(
    reposListCommitsParamSchema
  ),
  queryValidationFactory<t_ReposListCommitsQuerySchema>(
    reposListCommitsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListCommitsParamSchema,
      t_ReposListCommitsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommits
  }
)

const reposListBranchesForHeadCommitParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  commit_sha: z.coerce.string(),
})

router.get(
  "reposListBranchesForHeadCommit",
  "/repos/:owner/:repo/commits/:commitSha/branches-where-head",
  paramValidationFactory<t_ReposListBranchesForHeadCommitParamSchema>(
    reposListBranchesForHeadCommitParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposListBranchesForHeadCommitParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposListBranchesForHeadCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListBranchesForHeadCommit
  }
)

const reposListCommentsForCommitParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  commit_sha: z.coerce.string(),
})

const reposListCommentsForCommitQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListCommentsForCommit",
  "/repos/:owner/:repo/commits/:commitSha/comments",
  paramValidationFactory<t_ReposListCommentsForCommitParamSchema>(
    reposListCommentsForCommitParamSchema
  ),
  queryValidationFactory<t_ReposListCommentsForCommitQuerySchema>(
    reposListCommentsForCommitQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListCommentsForCommitParamSchema,
      t_ReposListCommentsForCommitQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListCommentsForCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommentsForCommit
  }
)

const reposCreateCommitCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  commit_sha: z.coerce.string(),
})

const reposCreateCommitCommentBodySchema = z.object({
  body: z.coerce.string(),
  path: z.coerce.string().optional(),
  position: z.coerce.number().optional(),
  line: z.coerce.number().optional(),
})

router.post(
  "reposCreateCommitComment",
  "/repos/:owner/:repo/commits/:commitSha/comments",
  paramValidationFactory<t_ReposCreateCommitCommentParamSchema>(
    reposCreateCommitCommentParamSchema
  ),
  bodyValidationFactory<t_ReposCreateCommitCommentBodySchema>(
    reposCreateCommitCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateCommitCommentParamSchema,
      void,
      t_ReposCreateCommitCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateCommitComment
  }
)

const reposListPullRequestsAssociatedWithCommitParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  commit_sha: z.coerce.string(),
})

const reposListPullRequestsAssociatedWithCommitQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListPullRequestsAssociatedWithCommit",
  "/repos/:owner/:repo/commits/:commitSha/pulls",
  paramValidationFactory<t_ReposListPullRequestsAssociatedWithCommitParamSchema>(
    reposListPullRequestsAssociatedWithCommitParamSchema
  ),
  queryValidationFactory<t_ReposListPullRequestsAssociatedWithCommitQuerySchema>(
    reposListPullRequestsAssociatedWithCommitQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListPullRequestsAssociatedWithCommitParamSchema,
      t_ReposListPullRequestsAssociatedWithCommitQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListPullRequestsAssociatedWithCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListPullRequestsAssociatedWithCommit
  }
)

const reposGetCommitParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  ref: z.coerce.string(),
})

const reposGetCommitQuerySchema = z.object({
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "reposGetCommit",
  "/repos/:owner/:repo/commits/:ref",
  paramValidationFactory<t_ReposGetCommitParamSchema>(
    reposGetCommitParamSchema
  ),
  queryValidationFactory<t_ReposGetCommitQuerySchema>(
    reposGetCommitQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetCommitParamSchema,
      t_ReposGetCommitQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommit
  }
)

const checksListForRefParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  ref: z.coerce.string(),
})

const checksListForRefQuerySchema = z.object({
  check_name: z.coerce.string().optional(),
  status: z.coerce.string().optional(),
  filter: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  app_id: z.coerce.number().optional(),
})

router.get(
  "checksListForRef",
  "/repos/:owner/:repo/commits/:ref/check-runs",
  paramValidationFactory<t_ChecksListForRefParamSchema>(
    checksListForRefParamSchema
  ),
  queryValidationFactory<t_ChecksListForRefQuerySchema>(
    checksListForRefQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ChecksListForRefParamSchema,
      t_ChecksListForRefQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-checksListForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListForRef
  }
)

const checksListSuitesForRefParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  ref: z.coerce.string(),
})

const checksListSuitesForRefQuerySchema = z.object({
  app_id: z.coerce.number().optional(),
  check_name: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "checksListSuitesForRef",
  "/repos/:owner/:repo/commits/:ref/check-suites",
  paramValidationFactory<t_ChecksListSuitesForRefParamSchema>(
    checksListSuitesForRefParamSchema
  ),
  queryValidationFactory<t_ChecksListSuitesForRefQuerySchema>(
    checksListSuitesForRefQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ChecksListSuitesForRefParamSchema,
      t_ChecksListSuitesForRefQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-checksListSuitesForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListSuitesForRef
  }
)

const reposGetCombinedStatusForRefParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  ref: z.coerce.string(),
})

const reposGetCombinedStatusForRefQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposGetCombinedStatusForRef",
  "/repos/:owner/:repo/commits/:ref/status",
  paramValidationFactory<t_ReposGetCombinedStatusForRefParamSchema>(
    reposGetCombinedStatusForRefParamSchema
  ),
  queryValidationFactory<t_ReposGetCombinedStatusForRefQuerySchema>(
    reposGetCombinedStatusForRefQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetCombinedStatusForRefParamSchema,
      t_ReposGetCombinedStatusForRefQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetCombinedStatusForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCombinedStatusForRef
  }
)

const reposListCommitStatusesForRefParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  ref: z.coerce.string(),
})

const reposListCommitStatusesForRefQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListCommitStatusesForRef",
  "/repos/:owner/:repo/commits/:ref/statuses",
  paramValidationFactory<t_ReposListCommitStatusesForRefParamSchema>(
    reposListCommitStatusesForRefParamSchema
  ),
  queryValidationFactory<t_ReposListCommitStatusesForRefQuerySchema>(
    reposListCommitStatusesForRefQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListCommitStatusesForRefParamSchema,
      t_ReposListCommitStatusesForRefQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListCommitStatusesForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommitStatusesForRef
  }
)

const reposGetCommunityProfileMetricsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetCommunityProfileMetrics",
  "/repos/:owner/:repo/community/profile",
  paramValidationFactory<t_ReposGetCommunityProfileMetricsParamSchema>(
    reposGetCommunityProfileMetricsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetCommunityProfileMetricsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetCommunityProfileMetrics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommunityProfileMetrics
  }
)

const reposCompareCommitsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  basehead: z.coerce.string(),
})

const reposCompareCommitsQuerySchema = z.object({
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "reposCompareCommits",
  "/repos/:owner/:repo/compare/:basehead",
  paramValidationFactory<t_ReposCompareCommitsParamSchema>(
    reposCompareCommitsParamSchema
  ),
  queryValidationFactory<t_ReposCompareCommitsQuerySchema>(
    reposCompareCommitsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCompareCommitsParamSchema,
      t_ReposCompareCommitsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCompareCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCompareCommits
  }
)

const reposGetContentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  path: z.coerce.string(),
})

const reposGetContentQuerySchema = z.object({
  ref: z.coerce.string().optional(),
})

router.get(
  "reposGetContent",
  "/repos/:owner/:repo/contents/:path",
  paramValidationFactory<t_ReposGetContentParamSchema>(
    reposGetContentParamSchema
  ),
  queryValidationFactory<t_ReposGetContentQuerySchema>(
    reposGetContentQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetContentParamSchema,
      t_ReposGetContentQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetContent

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetContent
  }
)

const reposCreateOrUpdateFileContentsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  path: z.coerce.string(),
})

const reposCreateOrUpdateFileContentsBodySchema = z.object({
  message: z.coerce.string(),
  content: z.coerce.string(),
  sha: z.coerce.string().optional(),
  branch: z.coerce.string().optional(),
  committer: z
    .object({
      name: z.coerce.string(),
      email: z.coerce.string(),
      date: z.coerce.string().optional(),
    })
    .optional(),
  author: z
    .object({
      name: z.coerce.string(),
      email: z.coerce.string(),
      date: z.coerce.string().optional(),
    })
    .optional(),
})

router.put(
  "reposCreateOrUpdateFileContents",
  "/repos/:owner/:repo/contents/:path",
  paramValidationFactory<t_ReposCreateOrUpdateFileContentsParamSchema>(
    reposCreateOrUpdateFileContentsParamSchema
  ),
  bodyValidationFactory<t_ReposCreateOrUpdateFileContentsBodySchema>(
    reposCreateOrUpdateFileContentsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateOrUpdateFileContentsParamSchema,
      void,
      t_ReposCreateOrUpdateFileContentsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateOrUpdateFileContents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateOrUpdateFileContents
  }
)

const reposDeleteFileParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  path: z.coerce.string(),
})

const reposDeleteFileBodySchema = z.object({
  message: z.coerce.string(),
  sha: z.coerce.string(),
  branch: z.coerce.string().optional(),
  committer: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
    })
    .optional(),
  author: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
    })
    .optional(),
})

router.delete(
  "reposDeleteFile",
  "/repos/:owner/:repo/contents/:path",
  paramValidationFactory<t_ReposDeleteFileParamSchema>(
    reposDeleteFileParamSchema
  ),
  bodyValidationFactory<t_ReposDeleteFileBodySchema>(reposDeleteFileBodySchema),
  async (
    ctx: ValidatedCtx<
      t_ReposDeleteFileParamSchema,
      void,
      t_ReposDeleteFileBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteFile

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteFile
  }
)

const reposListContributorsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListContributorsQuerySchema = z.object({
  anon: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListContributors",
  "/repos/:owner/:repo/contributors",
  paramValidationFactory<t_ReposListContributorsParamSchema>(
    reposListContributorsParamSchema
  ),
  queryValidationFactory<t_ReposListContributorsQuerySchema>(
    reposListContributorsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListContributorsParamSchema,
      t_ReposListContributorsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListContributors

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListContributors
  }
)

const dependabotListAlertsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const dependabotListAlertsForRepoQuerySchema = z.object({
  state: z.coerce.string().optional(),
  severity: z.coerce.string().optional(),
  ecosystem: z.coerce.string().optional(),
  package: z.coerce.string().optional(),
  manifest: z.coerce.string().optional(),
  scope: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
  before: z.coerce.string().optional(),
  after: z.coerce.string().optional(),
  first: z.coerce.number().optional(),
  last: z.coerce.number().optional(),
})

router.get(
  "dependabotListAlertsForRepo",
  "/repos/:owner/:repo/dependabot/alerts",
  paramValidationFactory<t_DependabotListAlertsForRepoParamSchema>(
    dependabotListAlertsForRepoParamSchema
  ),
  queryValidationFactory<t_DependabotListAlertsForRepoQuerySchema>(
    dependabotListAlertsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotListAlertsForRepoParamSchema,
      t_DependabotListAlertsForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotListAlertsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotListAlertsForRepo
  }
)

const dependabotGetAlertParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  alert_number: z.coerce.number(),
})

router.get(
  "dependabotGetAlert",
  "/repos/:owner/:repo/dependabot/alerts/:alertNumber",
  paramValidationFactory<t_DependabotGetAlertParamSchema>(
    dependabotGetAlertParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_DependabotGetAlertParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-dependabotGetAlert

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotGetAlert
  }
)

const dependabotUpdateAlertParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  alert_number: z.coerce.number(),
})

const dependabotUpdateAlertBodySchema = z.object({
  state: z.coerce.string(),
  dismissed_reason: z.coerce.string().optional(),
  dismissed_comment: z.coerce.string().optional(),
})

router.patch(
  "dependabotUpdateAlert",
  "/repos/:owner/:repo/dependabot/alerts/:alertNumber",
  paramValidationFactory<t_DependabotUpdateAlertParamSchema>(
    dependabotUpdateAlertParamSchema
  ),
  bodyValidationFactory<t_DependabotUpdateAlertBodySchema>(
    dependabotUpdateAlertBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotUpdateAlertParamSchema,
      void,
      t_DependabotUpdateAlertBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotUpdateAlert

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotUpdateAlert
  }
)

const dependabotListRepoSecretsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const dependabotListRepoSecretsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "dependabotListRepoSecrets",
  "/repos/:owner/:repo/dependabot/secrets",
  paramValidationFactory<t_DependabotListRepoSecretsParamSchema>(
    dependabotListRepoSecretsParamSchema
  ),
  queryValidationFactory<t_DependabotListRepoSecretsQuerySchema>(
    dependabotListRepoSecretsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotListRepoSecretsParamSchema,
      t_DependabotListRepoSecretsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotListRepoSecrets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotListRepoSecrets
  }
)

const dependabotGetRepoPublicKeyParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "dependabotGetRepoPublicKey",
  "/repos/:owner/:repo/dependabot/secrets/public-key",
  paramValidationFactory<t_DependabotGetRepoPublicKeyParamSchema>(
    dependabotGetRepoPublicKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_DependabotGetRepoPublicKeyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-dependabotGetRepoPublicKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotGetRepoPublicKey
  }
)

const dependabotGetRepoSecretParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.get(
  "dependabotGetRepoSecret",
  "/repos/:owner/:repo/dependabot/secrets/:secretName",
  paramValidationFactory<t_DependabotGetRepoSecretParamSchema>(
    dependabotGetRepoSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_DependabotGetRepoSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-dependabotGetRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotGetRepoSecret
  }
)

const dependabotCreateOrUpdateRepoSecretParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const dependabotCreateOrUpdateRepoSecretBodySchema = z.object({
  encrypted_value: z.coerce.string().optional(),
  key_id: z.coerce.string().optional(),
})

router.put(
  "dependabotCreateOrUpdateRepoSecret",
  "/repos/:owner/:repo/dependabot/secrets/:secretName",
  paramValidationFactory<t_DependabotCreateOrUpdateRepoSecretParamSchema>(
    dependabotCreateOrUpdateRepoSecretParamSchema
  ),
  bodyValidationFactory<t_DependabotCreateOrUpdateRepoSecretBodySchema>(
    dependabotCreateOrUpdateRepoSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependabotCreateOrUpdateRepoSecretParamSchema,
      void,
      t_DependabotCreateOrUpdateRepoSecretBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependabotCreateOrUpdateRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotCreateOrUpdateRepoSecret
  }
)

const dependabotDeleteRepoSecretParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.delete(
  "dependabotDeleteRepoSecret",
  "/repos/:owner/:repo/dependabot/secrets/:secretName",
  paramValidationFactory<t_DependabotDeleteRepoSecretParamSchema>(
    dependabotDeleteRepoSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_DependabotDeleteRepoSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-dependabotDeleteRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependabotDeleteRepoSecret
  }
)

const dependencyGraphDiffRangeParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  basehead: z.coerce.string(),
})

const dependencyGraphDiffRangeQuerySchema = z.object({
  name: z.coerce.string().optional(),
})

router.get(
  "dependencyGraphDiffRange",
  "/repos/:owner/:repo/dependency-graph/compare/:basehead",
  paramValidationFactory<t_DependencyGraphDiffRangeParamSchema>(
    dependencyGraphDiffRangeParamSchema
  ),
  queryValidationFactory<t_DependencyGraphDiffRangeQuerySchema>(
    dependencyGraphDiffRangeQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependencyGraphDiffRangeParamSchema,
      t_DependencyGraphDiffRangeQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependencyGraphDiffRange

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependencyGraphDiffRange
  }
)

const dependencyGraphCreateRepositorySnapshotParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const dependencyGraphCreateRepositorySnapshotBodySchema = z.object({
  version: z.coerce.number(),
  job: z.object({
    id: z.coerce.string(),
    correlator: z.coerce.string(),
    html_url: z.coerce.string().optional(),
  }),
  sha: z.coerce.string(),
  ref: z.coerce.string(),
  detector: z.object({
    name: z.coerce.string(),
    version: z.coerce.string(),
    url: z.coerce.string(),
  }),
  metadata: z.object({}).optional(),
  manifests: z.object({}).optional(),
  scanned: z.coerce.string(),
})

router.post(
  "dependencyGraphCreateRepositorySnapshot",
  "/repos/:owner/:repo/dependency-graph/snapshots",
  paramValidationFactory<t_DependencyGraphCreateRepositorySnapshotParamSchema>(
    dependencyGraphCreateRepositorySnapshotParamSchema
  ),
  bodyValidationFactory<t_DependencyGraphCreateRepositorySnapshotBodySchema>(
    dependencyGraphCreateRepositorySnapshotBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_DependencyGraphCreateRepositorySnapshotParamSchema,
      void,
      t_DependencyGraphCreateRepositorySnapshotBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-dependencyGraphCreateRepositorySnapshot

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-dependencyGraphCreateRepositorySnapshot
  }
)

const reposListDeploymentsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListDeploymentsQuerySchema = z.object({
  sha: z.coerce.string().optional(),
  ref: z.coerce.string().optional(),
  task: z.coerce.string().optional(),
  environment: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListDeployments",
  "/repos/:owner/:repo/deployments",
  paramValidationFactory<t_ReposListDeploymentsParamSchema>(
    reposListDeploymentsParamSchema
  ),
  queryValidationFactory<t_ReposListDeploymentsQuerySchema>(
    reposListDeploymentsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListDeploymentsParamSchema,
      t_ReposListDeploymentsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListDeployments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListDeployments
  }
)

const reposCreateDeploymentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposCreateDeploymentBodySchema = z.object({
  ref: z.coerce.string(),
  task: z.coerce.string().optional(),
  auto_merge: z.coerce.boolean().optional(),
  required_contexts: z.array(z.coerce.string().optional()).optional(),
  payload: z.object({}).optional(),
  environment: z.coerce.string().optional(),
  description: z.coerce.string().optional(),
  transient_environment: z.coerce.boolean().optional(),
  production_environment: z.coerce.boolean().optional(),
})

router.post(
  "reposCreateDeployment",
  "/repos/:owner/:repo/deployments",
  paramValidationFactory<t_ReposCreateDeploymentParamSchema>(
    reposCreateDeploymentParamSchema
  ),
  bodyValidationFactory<t_ReposCreateDeploymentBodySchema>(
    reposCreateDeploymentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateDeploymentParamSchema,
      void,
      t_ReposCreateDeploymentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateDeployment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDeployment
  }
)

const reposGetDeploymentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  deployment_id: z.coerce.number(),
})

router.get(
  "reposGetDeployment",
  "/repos/:owner/:repo/deployments/:deploymentId",
  paramValidationFactory<t_ReposGetDeploymentParamSchema>(
    reposGetDeploymentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetDeploymentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetDeployment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetDeployment
  }
)

const reposDeleteDeploymentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  deployment_id: z.coerce.number(),
})

router.delete(
  "reposDeleteDeployment",
  "/repos/:owner/:repo/deployments/:deploymentId",
  paramValidationFactory<t_ReposDeleteDeploymentParamSchema>(
    reposDeleteDeploymentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteDeploymentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteDeployment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteDeployment
  }
)

const reposListDeploymentStatusesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  deployment_id: z.coerce.number(),
})

const reposListDeploymentStatusesQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListDeploymentStatuses",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses",
  paramValidationFactory<t_ReposListDeploymentStatusesParamSchema>(
    reposListDeploymentStatusesParamSchema
  ),
  queryValidationFactory<t_ReposListDeploymentStatusesQuerySchema>(
    reposListDeploymentStatusesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListDeploymentStatusesParamSchema,
      t_ReposListDeploymentStatusesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListDeploymentStatuses

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListDeploymentStatuses
  }
)

const reposCreateDeploymentStatusParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  deployment_id: z.coerce.number(),
})

const reposCreateDeploymentStatusBodySchema = z.object({
  state: z.coerce.string(),
  target_url: z.coerce.string().optional(),
  log_url: z.coerce.string().optional(),
  description: z.coerce.string().optional(),
  environment: z.coerce.string().optional(),
  environment_url: z.coerce.string().optional(),
  auto_inactive: z.coerce.boolean().optional(),
})

router.post(
  "reposCreateDeploymentStatus",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses",
  paramValidationFactory<t_ReposCreateDeploymentStatusParamSchema>(
    reposCreateDeploymentStatusParamSchema
  ),
  bodyValidationFactory<t_ReposCreateDeploymentStatusBodySchema>(
    reposCreateDeploymentStatusBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateDeploymentStatusParamSchema,
      void,
      t_ReposCreateDeploymentStatusBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateDeploymentStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDeploymentStatus
  }
)

const reposGetDeploymentStatusParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  deployment_id: z.coerce.number(),
  status_id: z.coerce.number(),
})

router.get(
  "reposGetDeploymentStatus",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses/:statusId",
  paramValidationFactory<t_ReposGetDeploymentStatusParamSchema>(
    reposGetDeploymentStatusParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetDeploymentStatusParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetDeploymentStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetDeploymentStatus
  }
)

const reposCreateDispatchEventParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposCreateDispatchEventBodySchema = z.object({
  event_type: z.coerce.string(),
  client_payload: z.object({}).optional(),
})

router.post(
  "reposCreateDispatchEvent",
  "/repos/:owner/:repo/dispatches",
  paramValidationFactory<t_ReposCreateDispatchEventParamSchema>(
    reposCreateDispatchEventParamSchema
  ),
  bodyValidationFactory<t_ReposCreateDispatchEventBodySchema>(
    reposCreateDispatchEventBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateDispatchEventParamSchema,
      void,
      t_ReposCreateDispatchEventBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateDispatchEvent

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDispatchEvent
  }
)

const reposGetAllEnvironmentsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposGetAllEnvironmentsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposGetAllEnvironments",
  "/repos/:owner/:repo/environments",
  paramValidationFactory<t_ReposGetAllEnvironmentsParamSchema>(
    reposGetAllEnvironmentsParamSchema
  ),
  queryValidationFactory<t_ReposGetAllEnvironmentsQuerySchema>(
    reposGetAllEnvironmentsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetAllEnvironmentsParamSchema,
      t_ReposGetAllEnvironmentsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetAllEnvironments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAllEnvironments
  }
)

const reposGetEnvironmentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  environment_name: z.coerce.string(),
})

router.get(
  "reposGetEnvironment",
  "/repos/:owner/:repo/environments/:environmentName",
  paramValidationFactory<t_ReposGetEnvironmentParamSchema>(
    reposGetEnvironmentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetEnvironmentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetEnvironment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetEnvironment
  }
)

const reposCreateOrUpdateEnvironmentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  environment_name: z.coerce.string(),
})

const reposCreateOrUpdateEnvironmentBodySchema = z
  .object({
    wait_timer: z.coerce.number().optional(),
    reviewers: z
      .array(
        z
          .object({
            type: z.coerce.string().optional(),
            id: z.coerce.number().optional(),
          })
          .optional()
      )
      .optional(),
    deployment_branch_policy: z
      .object({
        protected_branches: z.coerce.boolean(),
        custom_branch_policies: z.coerce.boolean(),
      })
      .optional(),
  })
  .optional()

router.put(
  "reposCreateOrUpdateEnvironment",
  "/repos/:owner/:repo/environments/:environmentName",
  paramValidationFactory<t_ReposCreateOrUpdateEnvironmentParamSchema>(
    reposCreateOrUpdateEnvironmentParamSchema
  ),
  bodyValidationFactory<t_ReposCreateOrUpdateEnvironmentBodySchema>(
    reposCreateOrUpdateEnvironmentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateOrUpdateEnvironmentParamSchema,
      void,
      t_ReposCreateOrUpdateEnvironmentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateOrUpdateEnvironment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateOrUpdateEnvironment
  }
)

const reposDeleteAnEnvironmentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  environment_name: z.coerce.string(),
})

router.delete(
  "reposDeleteAnEnvironment",
  "/repos/:owner/:repo/environments/:environmentName",
  paramValidationFactory<t_ReposDeleteAnEnvironmentParamSchema>(
    reposDeleteAnEnvironmentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteAnEnvironmentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteAnEnvironment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteAnEnvironment
  }
)

const reposListDeploymentBranchPoliciesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  environment_name: z.coerce.string(),
})

const reposListDeploymentBranchPoliciesQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListDeploymentBranchPolicies",
  "/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies",
  paramValidationFactory<t_ReposListDeploymentBranchPoliciesParamSchema>(
    reposListDeploymentBranchPoliciesParamSchema
  ),
  queryValidationFactory<t_ReposListDeploymentBranchPoliciesQuerySchema>(
    reposListDeploymentBranchPoliciesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListDeploymentBranchPoliciesParamSchema,
      t_ReposListDeploymentBranchPoliciesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListDeploymentBranchPolicies

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListDeploymentBranchPolicies
  }
)

const reposCreateDeploymentBranchPolicyParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  environment_name: z.coerce.string(),
})

const reposCreateDeploymentBranchPolicyBodySchema = z.object({
  name: z.coerce.string(),
})

router.post(
  "reposCreateDeploymentBranchPolicy",
  "/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies",
  paramValidationFactory<t_ReposCreateDeploymentBranchPolicyParamSchema>(
    reposCreateDeploymentBranchPolicyParamSchema
  ),
  bodyValidationFactory<t_ReposCreateDeploymentBranchPolicyBodySchema>(
    reposCreateDeploymentBranchPolicyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateDeploymentBranchPolicyParamSchema,
      void,
      t_ReposCreateDeploymentBranchPolicyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateDeploymentBranchPolicy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDeploymentBranchPolicy
  }
)

const reposGetDeploymentBranchPolicyParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  environment_name: z.coerce.string(),
  branch_policy_id: z.coerce.number(),
})

router.get(
  "reposGetDeploymentBranchPolicy",
  "/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies/:branchPolicyId",
  paramValidationFactory<t_ReposGetDeploymentBranchPolicyParamSchema>(
    reposGetDeploymentBranchPolicyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetDeploymentBranchPolicyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetDeploymentBranchPolicy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetDeploymentBranchPolicy
  }
)

const reposUpdateDeploymentBranchPolicyParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  environment_name: z.coerce.string(),
  branch_policy_id: z.coerce.number(),
})

const reposUpdateDeploymentBranchPolicyBodySchema = z.object({
  name: z.coerce.string(),
})

router.put(
  "reposUpdateDeploymentBranchPolicy",
  "/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies/:branchPolicyId",
  paramValidationFactory<t_ReposUpdateDeploymentBranchPolicyParamSchema>(
    reposUpdateDeploymentBranchPolicyParamSchema
  ),
  bodyValidationFactory<t_ReposUpdateDeploymentBranchPolicyBodySchema>(
    reposUpdateDeploymentBranchPolicyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUpdateDeploymentBranchPolicyParamSchema,
      void,
      t_ReposUpdateDeploymentBranchPolicyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdateDeploymentBranchPolicy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateDeploymentBranchPolicy
  }
)

const reposDeleteDeploymentBranchPolicyParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  environment_name: z.coerce.string(),
  branch_policy_id: z.coerce.number(),
})

router.delete(
  "reposDeleteDeploymentBranchPolicy",
  "/repos/:owner/:repo/environments/:environmentName/deployment-branch-policies/:branchPolicyId",
  paramValidationFactory<t_ReposDeleteDeploymentBranchPolicyParamSchema>(
    reposDeleteDeploymentBranchPolicyParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposDeleteDeploymentBranchPolicyParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteDeploymentBranchPolicy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteDeploymentBranchPolicy
  }
)

const activityListRepoEventsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const activityListRepoEventsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListRepoEvents",
  "/repos/:owner/:repo/events",
  paramValidationFactory<t_ActivityListRepoEventsParamSchema>(
    activityListRepoEventsParamSchema
  ),
  queryValidationFactory<t_ActivityListRepoEventsQuerySchema>(
    activityListRepoEventsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListRepoEventsParamSchema,
      t_ActivityListRepoEventsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListRepoEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListRepoEvents
  }
)

const reposListForksParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListForksQuerySchema = z.object({
  sort: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListForks",
  "/repos/:owner/:repo/forks",
  paramValidationFactory<t_ReposListForksParamSchema>(
    reposListForksParamSchema
  ),
  queryValidationFactory<t_ReposListForksQuerySchema>(
    reposListForksQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListForksParamSchema,
      t_ReposListForksQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListForks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForks
  }
)

const reposCreateForkParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposCreateForkBodySchema = z
  .object({
    organization: z.coerce.string().optional(),
    name: z.coerce.string().optional(),
    default_branch_only: z.coerce.boolean().optional(),
  })
  .optional()

router.post(
  "reposCreateFork",
  "/repos/:owner/:repo/forks",
  paramValidationFactory<t_ReposCreateForkParamSchema>(
    reposCreateForkParamSchema
  ),
  bodyValidationFactory<t_ReposCreateForkBodySchema>(reposCreateForkBodySchema),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateForkParamSchema,
      void,
      t_ReposCreateForkBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateFork

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateFork
  }
)

const gitCreateBlobParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const gitCreateBlobBodySchema = z.object({
  content: z.coerce.string(),
  encoding: z.coerce.string().optional(),
})

router.post(
  "gitCreateBlob",
  "/repos/:owner/:repo/git/blobs",
  paramValidationFactory<t_GitCreateBlobParamSchema>(gitCreateBlobParamSchema),
  bodyValidationFactory<t_GitCreateBlobBodySchema>(gitCreateBlobBodySchema),
  async (
    ctx: ValidatedCtx<
      t_GitCreateBlobParamSchema,
      void,
      t_GitCreateBlobBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-gitCreateBlob

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateBlob
  }
)

const gitGetBlobParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  file_sha: z.coerce.string(),
})

router.get(
  "gitGetBlob",
  "/repos/:owner/:repo/git/blobs/:fileSha",
  paramValidationFactory<t_GitGetBlobParamSchema>(gitGetBlobParamSchema),
  async (
    ctx: ValidatedCtx<t_GitGetBlobParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-gitGetBlob

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetBlob
  }
)

const gitCreateCommitParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const gitCreateCommitBodySchema = z.object({
  message: z.coerce.string(),
  tree: z.coerce.string(),
  parents: z.array(z.coerce.string().optional()).optional(),
  author: z
    .object({
      name: z.coerce.string(),
      email: z.coerce.string(),
      date: z.coerce.string().optional(),
    })
    .optional(),
  committer: z
    .object({
      name: z.coerce.string().optional(),
      email: z.coerce.string().optional(),
      date: z.coerce.string().optional(),
    })
    .optional(),
  signature: z.coerce.string().optional(),
})

router.post(
  "gitCreateCommit",
  "/repos/:owner/:repo/git/commits",
  paramValidationFactory<t_GitCreateCommitParamSchema>(
    gitCreateCommitParamSchema
  ),
  bodyValidationFactory<t_GitCreateCommitBodySchema>(gitCreateCommitBodySchema),
  async (
    ctx: ValidatedCtx<
      t_GitCreateCommitParamSchema,
      void,
      t_GitCreateCommitBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-gitCreateCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateCommit
  }
)

const gitGetCommitParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  commit_sha: z.coerce.string(),
})

router.get(
  "gitGetCommit",
  "/repos/:owner/:repo/git/commits/:commitSha",
  paramValidationFactory<t_GitGetCommitParamSchema>(gitGetCommitParamSchema),
  async (
    ctx: ValidatedCtx<t_GitGetCommitParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-gitGetCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetCommit
  }
)

const gitListMatchingRefsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  ref: z.coerce.string(),
})

router.get(
  "gitListMatchingRefs",
  "/repos/:owner/:repo/git/matching-refs/:ref",
  paramValidationFactory<t_GitListMatchingRefsParamSchema>(
    gitListMatchingRefsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_GitListMatchingRefsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-gitListMatchingRefs

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitListMatchingRefs
  }
)

const gitGetRefParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  ref: z.coerce.string(),
})

router.get(
  "gitGetRef",
  "/repos/:owner/:repo/git/ref/:ref",
  paramValidationFactory<t_GitGetRefParamSchema>(gitGetRefParamSchema),
  async (ctx: ValidatedCtx<t_GitGetRefParamSchema, void, void>, next: Next) => {
    //region safe-edit-region-gitGetRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetRef
  }
)

const gitCreateRefParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const gitCreateRefBodySchema = z.object({
  ref: z.coerce.string(),
  sha: z.coerce.string(),
  key: z.coerce.string().optional(),
})

router.post(
  "gitCreateRef",
  "/repos/:owner/:repo/git/refs",
  paramValidationFactory<t_GitCreateRefParamSchema>(gitCreateRefParamSchema),
  bodyValidationFactory<t_GitCreateRefBodySchema>(gitCreateRefBodySchema),
  async (
    ctx: ValidatedCtx<
      t_GitCreateRefParamSchema,
      void,
      t_GitCreateRefBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-gitCreateRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateRef
  }
)

const gitUpdateRefParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  ref: z.coerce.string(),
})

const gitUpdateRefBodySchema = z.object({
  sha: z.coerce.string(),
  force: z.coerce.boolean().optional(),
})

router.patch(
  "gitUpdateRef",
  "/repos/:owner/:repo/git/refs/:ref",
  paramValidationFactory<t_GitUpdateRefParamSchema>(gitUpdateRefParamSchema),
  bodyValidationFactory<t_GitUpdateRefBodySchema>(gitUpdateRefBodySchema),
  async (
    ctx: ValidatedCtx<
      t_GitUpdateRefParamSchema,
      void,
      t_GitUpdateRefBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-gitUpdateRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitUpdateRef
  }
)

const gitDeleteRefParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  ref: z.coerce.string(),
})

router.delete(
  "gitDeleteRef",
  "/repos/:owner/:repo/git/refs/:ref",
  paramValidationFactory<t_GitDeleteRefParamSchema>(gitDeleteRefParamSchema),
  async (
    ctx: ValidatedCtx<t_GitDeleteRefParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-gitDeleteRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitDeleteRef
  }
)

const gitCreateTagParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const gitCreateTagBodySchema = z.object({
  tag: z.coerce.string(),
  message: z.coerce.string(),
  object: z.coerce.string(),
  type: z.coerce.string(),
  tagger: z
    .object({
      name: z.coerce.string(),
      email: z.coerce.string(),
      date: z.coerce.string().optional(),
    })
    .optional(),
})

router.post(
  "gitCreateTag",
  "/repos/:owner/:repo/git/tags",
  paramValidationFactory<t_GitCreateTagParamSchema>(gitCreateTagParamSchema),
  bodyValidationFactory<t_GitCreateTagBodySchema>(gitCreateTagBodySchema),
  async (
    ctx: ValidatedCtx<
      t_GitCreateTagParamSchema,
      void,
      t_GitCreateTagBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-gitCreateTag

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateTag
  }
)

const gitGetTagParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  tag_sha: z.coerce.string(),
})

router.get(
  "gitGetTag",
  "/repos/:owner/:repo/git/tags/:tagSha",
  paramValidationFactory<t_GitGetTagParamSchema>(gitGetTagParamSchema),
  async (ctx: ValidatedCtx<t_GitGetTagParamSchema, void, void>, next: Next) => {
    //region safe-edit-region-gitGetTag

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetTag
  }
)

const gitCreateTreeParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const gitCreateTreeBodySchema = z.object({
  tree: z.array(
    z
      .object({
        path: z.coerce.string().optional(),
        mode: z.coerce.string().optional(),
        type: z.coerce.string().optional(),
        sha: z.coerce.string().optional(),
        content: z.coerce.string().optional(),
      })
      .optional()
  ),
  base_tree: z.coerce.string().optional(),
})

router.post(
  "gitCreateTree",
  "/repos/:owner/:repo/git/trees",
  paramValidationFactory<t_GitCreateTreeParamSchema>(gitCreateTreeParamSchema),
  bodyValidationFactory<t_GitCreateTreeBodySchema>(gitCreateTreeBodySchema),
  async (
    ctx: ValidatedCtx<
      t_GitCreateTreeParamSchema,
      void,
      t_GitCreateTreeBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-gitCreateTree

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateTree
  }
)

const gitGetTreeParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  tree_sha: z.coerce.string(),
})

const gitGetTreeQuerySchema = z.object({
  recursive: z.coerce.string().optional(),
})

router.get(
  "gitGetTree",
  "/repos/:owner/:repo/git/trees/:treeSha",
  paramValidationFactory<t_GitGetTreeParamSchema>(gitGetTreeParamSchema),
  queryValidationFactory<t_GitGetTreeQuerySchema>(gitGetTreeQuerySchema),
  async (
    ctx: ValidatedCtx<t_GitGetTreeParamSchema, t_GitGetTreeQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-gitGetTree

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetTree
  }
)

const reposListWebhooksParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListWebhooksQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListWebhooks",
  "/repos/:owner/:repo/hooks",
  paramValidationFactory<t_ReposListWebhooksParamSchema>(
    reposListWebhooksParamSchema
  ),
  queryValidationFactory<t_ReposListWebhooksQuerySchema>(
    reposListWebhooksQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListWebhooksParamSchema,
      t_ReposListWebhooksQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListWebhooks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListWebhooks
  }
)

const reposCreateWebhookParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposCreateWebhookBodySchema = z
  .object({
    name: z.coerce.string().optional(),
    config: z
      .object({
        url: z.coerce.string().optional(),
        content_type: z.coerce.string().optional(),
        secret: z.coerce.string().optional(),
        insecure_ssl: z.object({}).optional(),
        token: z.coerce.string().optional(),
        digest: z.coerce.string().optional(),
      })
      .optional(),
    events: z.array(z.coerce.string().optional()).optional(),
    active: z.coerce.boolean().optional(),
  })
  .optional()

router.post(
  "reposCreateWebhook",
  "/repos/:owner/:repo/hooks",
  paramValidationFactory<t_ReposCreateWebhookParamSchema>(
    reposCreateWebhookParamSchema
  ),
  bodyValidationFactory<t_ReposCreateWebhookBodySchema>(
    reposCreateWebhookBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateWebhookParamSchema,
      void,
      t_ReposCreateWebhookBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateWebhook
  }
)

const reposGetWebhookParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  hook_id: z.coerce.number(),
})

router.get(
  "reposGetWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  paramValidationFactory<t_ReposGetWebhookParamSchema>(
    reposGetWebhookParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetWebhookParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetWebhook
  }
)

const reposUpdateWebhookParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  hook_id: z.coerce.number(),
})

const reposUpdateWebhookBodySchema = z.object({
  config: z
    .object({
      url: z.coerce.string(),
      content_type: z.coerce.string().optional(),
      secret: z.coerce.string().optional(),
      insecure_ssl: z.object({}).optional(),
      address: z.coerce.string().optional(),
      room: z.coerce.string().optional(),
    })
    .optional(),
  events: z.array(z.coerce.string().optional()).optional(),
  add_events: z.array(z.coerce.string().optional()).optional(),
  remove_events: z.array(z.coerce.string().optional()).optional(),
  active: z.coerce.boolean().optional(),
})

router.patch(
  "reposUpdateWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  paramValidationFactory<t_ReposUpdateWebhookParamSchema>(
    reposUpdateWebhookParamSchema
  ),
  bodyValidationFactory<t_ReposUpdateWebhookBodySchema>(
    reposUpdateWebhookBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUpdateWebhookParamSchema,
      void,
      t_ReposUpdateWebhookBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateWebhook
  }
)

const reposDeleteWebhookParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  hook_id: z.coerce.number(),
})

router.delete(
  "reposDeleteWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  paramValidationFactory<t_ReposDeleteWebhookParamSchema>(
    reposDeleteWebhookParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteWebhookParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteWebhook
  }
)

const reposGetWebhookConfigForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  hook_id: z.coerce.number(),
})

router.get(
  "reposGetWebhookConfigForRepo",
  "/repos/:owner/:repo/hooks/:hookId/config",
  paramValidationFactory<t_ReposGetWebhookConfigForRepoParamSchema>(
    reposGetWebhookConfigForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetWebhookConfigForRepoParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetWebhookConfigForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetWebhookConfigForRepo
  }
)

const reposUpdateWebhookConfigForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  hook_id: z.coerce.number(),
})

const reposUpdateWebhookConfigForRepoBodySchema = z
  .object({
    url: z.coerce.string().optional(),
    content_type: z.coerce.string().optional(),
    secret: z.coerce.string().optional(),
    insecure_ssl: z.object({}).optional(),
  })
  .optional()

router.patch(
  "reposUpdateWebhookConfigForRepo",
  "/repos/:owner/:repo/hooks/:hookId/config",
  paramValidationFactory<t_ReposUpdateWebhookConfigForRepoParamSchema>(
    reposUpdateWebhookConfigForRepoParamSchema
  ),
  bodyValidationFactory<t_ReposUpdateWebhookConfigForRepoBodySchema>(
    reposUpdateWebhookConfigForRepoBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUpdateWebhookConfigForRepoParamSchema,
      void,
      t_ReposUpdateWebhookConfigForRepoBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdateWebhookConfigForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateWebhookConfigForRepo
  }
)

const reposListWebhookDeliveriesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  hook_id: z.coerce.number(),
})

const reposListWebhookDeliveriesQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  cursor: z.coerce.string().optional(),
  redelivery: z.coerce.boolean().optional(),
})

router.get(
  "reposListWebhookDeliveries",
  "/repos/:owner/:repo/hooks/:hookId/deliveries",
  paramValidationFactory<t_ReposListWebhookDeliveriesParamSchema>(
    reposListWebhookDeliveriesParamSchema
  ),
  queryValidationFactory<t_ReposListWebhookDeliveriesQuerySchema>(
    reposListWebhookDeliveriesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListWebhookDeliveriesParamSchema,
      t_ReposListWebhookDeliveriesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListWebhookDeliveries

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListWebhookDeliveries
  }
)

const reposGetWebhookDeliveryParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  hook_id: z.coerce.number(),
  delivery_id: z.coerce.number(),
})

router.get(
  "reposGetWebhookDelivery",
  "/repos/:owner/:repo/hooks/:hookId/deliveries/:deliveryId",
  paramValidationFactory<t_ReposGetWebhookDeliveryParamSchema>(
    reposGetWebhookDeliveryParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetWebhookDeliveryParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetWebhookDelivery

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetWebhookDelivery
  }
)

const reposRedeliverWebhookDeliveryParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  hook_id: z.coerce.number(),
  delivery_id: z.coerce.number(),
})

router.post(
  "reposRedeliverWebhookDelivery",
  "/repos/:owner/:repo/hooks/:hookId/deliveries/:deliveryId/attempts",
  paramValidationFactory<t_ReposRedeliverWebhookDeliveryParamSchema>(
    reposRedeliverWebhookDeliveryParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposRedeliverWebhookDeliveryParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposRedeliverWebhookDelivery

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRedeliverWebhookDelivery
  }
)

const reposPingWebhookParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  hook_id: z.coerce.number(),
})

router.post(
  "reposPingWebhook",
  "/repos/:owner/:repo/hooks/:hookId/pings",
  paramValidationFactory<t_ReposPingWebhookParamSchema>(
    reposPingWebhookParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposPingWebhookParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposPingWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposPingWebhook
  }
)

const reposTestPushWebhookParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  hook_id: z.coerce.number(),
})

router.post(
  "reposTestPushWebhook",
  "/repos/:owner/:repo/hooks/:hookId/tests",
  paramValidationFactory<t_ReposTestPushWebhookParamSchema>(
    reposTestPushWebhookParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposTestPushWebhookParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposTestPushWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposTestPushWebhook
  }
)

const migrationsGetImportStatusParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "migrationsGetImportStatus",
  "/repos/:owner/:repo/import",
  paramValidationFactory<t_MigrationsGetImportStatusParamSchema>(
    migrationsGetImportStatusParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_MigrationsGetImportStatusParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-migrationsGetImportStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetImportStatus
  }
)

const migrationsStartImportParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const migrationsStartImportBodySchema = z.object({
  vcs_url: z.coerce.string(),
  vcs: z.coerce.string().optional(),
  vcs_username: z.coerce.string().optional(),
  vcs_password: z.coerce.string().optional(),
  tfvc_project: z.coerce.string().optional(),
})

router.put(
  "migrationsStartImport",
  "/repos/:owner/:repo/import",
  paramValidationFactory<t_MigrationsStartImportParamSchema>(
    migrationsStartImportParamSchema
  ),
  bodyValidationFactory<t_MigrationsStartImportBodySchema>(
    migrationsStartImportBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsStartImportParamSchema,
      void,
      t_MigrationsStartImportBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsStartImport

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsStartImport
  }
)

const migrationsUpdateImportParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const migrationsUpdateImportBodySchema = z
  .object({
    vcs_username: z.coerce.string().optional(),
    vcs_password: z.coerce.string().optional(),
    vcs: z.coerce.string().optional(),
    tfvc_project: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "migrationsUpdateImport",
  "/repos/:owner/:repo/import",
  paramValidationFactory<t_MigrationsUpdateImportParamSchema>(
    migrationsUpdateImportParamSchema
  ),
  bodyValidationFactory<t_MigrationsUpdateImportBodySchema>(
    migrationsUpdateImportBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsUpdateImportParamSchema,
      void,
      t_MigrationsUpdateImportBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsUpdateImport

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsUpdateImport
  }
)

const migrationsCancelImportParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.delete(
  "migrationsCancelImport",
  "/repos/:owner/:repo/import",
  paramValidationFactory<t_MigrationsCancelImportParamSchema>(
    migrationsCancelImportParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_MigrationsCancelImportParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-migrationsCancelImport

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsCancelImport
  }
)

const migrationsGetCommitAuthorsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const migrationsGetCommitAuthorsQuerySchema = z.object({
  since: z.coerce.number().optional(),
})

router.get(
  "migrationsGetCommitAuthors",
  "/repos/:owner/:repo/import/authors",
  paramValidationFactory<t_MigrationsGetCommitAuthorsParamSchema>(
    migrationsGetCommitAuthorsParamSchema
  ),
  queryValidationFactory<t_MigrationsGetCommitAuthorsQuerySchema>(
    migrationsGetCommitAuthorsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsGetCommitAuthorsParamSchema,
      t_MigrationsGetCommitAuthorsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsGetCommitAuthors

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetCommitAuthors
  }
)

const migrationsMapCommitAuthorParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  author_id: z.coerce.number(),
})

const migrationsMapCommitAuthorBodySchema = z
  .object({
    email: z.coerce.string().optional(),
    name: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "migrationsMapCommitAuthor",
  "/repos/:owner/:repo/import/authors/:authorId",
  paramValidationFactory<t_MigrationsMapCommitAuthorParamSchema>(
    migrationsMapCommitAuthorParamSchema
  ),
  bodyValidationFactory<t_MigrationsMapCommitAuthorBodySchema>(
    migrationsMapCommitAuthorBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsMapCommitAuthorParamSchema,
      void,
      t_MigrationsMapCommitAuthorBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsMapCommitAuthor

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsMapCommitAuthor
  }
)

const migrationsGetLargeFilesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "migrationsGetLargeFiles",
  "/repos/:owner/:repo/import/large_files",
  paramValidationFactory<t_MigrationsGetLargeFilesParamSchema>(
    migrationsGetLargeFilesParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_MigrationsGetLargeFilesParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-migrationsGetLargeFiles

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetLargeFiles
  }
)

const migrationsSetLfsPreferenceParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const migrationsSetLfsPreferenceBodySchema = z.object({
  use_lfs: z.coerce.string(),
})

router.patch(
  "migrationsSetLfsPreference",
  "/repos/:owner/:repo/import/lfs",
  paramValidationFactory<t_MigrationsSetLfsPreferenceParamSchema>(
    migrationsSetLfsPreferenceParamSchema
  ),
  bodyValidationFactory<t_MigrationsSetLfsPreferenceBodySchema>(
    migrationsSetLfsPreferenceBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsSetLfsPreferenceParamSchema,
      void,
      t_MigrationsSetLfsPreferenceBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsSetLfsPreference

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsSetLfsPreference
  }
)

const appsGetRepoInstallationParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "appsGetRepoInstallation",
  "/repos/:owner/:repo/installation",
  paramValidationFactory<t_AppsGetRepoInstallationParamSchema>(
    appsGetRepoInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_AppsGetRepoInstallationParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsGetRepoInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetRepoInstallation
  }
)

const interactionsGetRestrictionsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "interactionsGetRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  paramValidationFactory<t_InteractionsGetRestrictionsForRepoParamSchema>(
    interactionsGetRestrictionsForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_InteractionsGetRestrictionsForRepoParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-interactionsGetRestrictionsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsGetRestrictionsForRepo
  }
)

const interactionsSetRestrictionsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const interactionsSetRestrictionsForRepoBodySchema = z.object({
  limit: z.coerce.string(),
  expiry: z.coerce.string().optional(),
})

router.put(
  "interactionsSetRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  paramValidationFactory<t_InteractionsSetRestrictionsForRepoParamSchema>(
    interactionsSetRestrictionsForRepoParamSchema
  ),
  bodyValidationFactory<t_InteractionsSetRestrictionsForRepoBodySchema>(
    interactionsSetRestrictionsForRepoBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_InteractionsSetRestrictionsForRepoParamSchema,
      void,
      t_InteractionsSetRestrictionsForRepoBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-interactionsSetRestrictionsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsSetRestrictionsForRepo
  }
)

const interactionsRemoveRestrictionsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.delete(
  "interactionsRemoveRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  paramValidationFactory<t_InteractionsRemoveRestrictionsForRepoParamSchema>(
    interactionsRemoveRestrictionsForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_InteractionsRemoveRestrictionsForRepoParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-interactionsRemoveRestrictionsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsRemoveRestrictionsForRepo
  }
)

const reposListInvitationsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListInvitationsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListInvitations",
  "/repos/:owner/:repo/invitations",
  paramValidationFactory<t_ReposListInvitationsParamSchema>(
    reposListInvitationsParamSchema
  ),
  queryValidationFactory<t_ReposListInvitationsQuerySchema>(
    reposListInvitationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListInvitationsParamSchema,
      t_ReposListInvitationsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListInvitations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListInvitations
  }
)

const reposUpdateInvitationParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  invitation_id: z.coerce.number(),
})

const reposUpdateInvitationBodySchema = z
  .object({ permissions: z.coerce.string().optional() })
  .optional()

router.patch(
  "reposUpdateInvitation",
  "/repos/:owner/:repo/invitations/:invitationId",
  paramValidationFactory<t_ReposUpdateInvitationParamSchema>(
    reposUpdateInvitationParamSchema
  ),
  bodyValidationFactory<t_ReposUpdateInvitationBodySchema>(
    reposUpdateInvitationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUpdateInvitationParamSchema,
      void,
      t_ReposUpdateInvitationBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdateInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateInvitation
  }
)

const reposDeleteInvitationParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  invitation_id: z.coerce.number(),
})

router.delete(
  "reposDeleteInvitation",
  "/repos/:owner/:repo/invitations/:invitationId",
  paramValidationFactory<t_ReposDeleteInvitationParamSchema>(
    reposDeleteInvitationParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteInvitationParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteInvitation
  }
)

const issuesListForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const issuesListForRepoQuerySchema = z.object({
  milestone: z.coerce.string().optional(),
  state: z.coerce.string().optional(),
  assignee: z.coerce.string().optional(),
  creator: z.coerce.string().optional(),
  mentioned: z.coerce.string().optional(),
  labels: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  since: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListForRepo",
  "/repos/:owner/:repo/issues",
  paramValidationFactory<t_IssuesListForRepoParamSchema>(
    issuesListForRepoParamSchema
  ),
  queryValidationFactory<t_IssuesListForRepoQuerySchema>(
    issuesListForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListForRepoParamSchema,
      t_IssuesListForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListForRepo
  }
)

const issuesCreateParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const issuesCreateBodySchema = z.object({
  title: z.object({}),
  body: z.coerce.string().optional(),
  assignee: z.coerce.string().optional(),
  milestone: z.object({}).optional(),
  labels: z.array(z.object({}).optional()).optional(),
  assignees: z.array(z.coerce.string().optional()).optional(),
})

router.post(
  "issuesCreate",
  "/repos/:owner/:repo/issues",
  paramValidationFactory<t_IssuesCreateParamSchema>(issuesCreateParamSchema),
  bodyValidationFactory<t_IssuesCreateBodySchema>(issuesCreateBodySchema),
  async (
    ctx: ValidatedCtx<
      t_IssuesCreateParamSchema,
      void,
      t_IssuesCreateBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreate
  }
)

const issuesListCommentsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const issuesListCommentsForRepoQuerySchema = z.object({
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  since: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListCommentsForRepo",
  "/repos/:owner/:repo/issues/comments",
  paramValidationFactory<t_IssuesListCommentsForRepoParamSchema>(
    issuesListCommentsForRepoParamSchema
  ),
  queryValidationFactory<t_IssuesListCommentsForRepoQuerySchema>(
    issuesListCommentsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListCommentsForRepoParamSchema,
      t_IssuesListCommentsForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListCommentsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListCommentsForRepo
  }
)

const issuesGetCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

router.get(
  "issuesGetComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  paramValidationFactory<t_IssuesGetCommentParamSchema>(
    issuesGetCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_IssuesGetCommentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesGetComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetComment
  }
)

const issuesUpdateCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

const issuesUpdateCommentBodySchema = z.object({ body: z.coerce.string() })

router.patch(
  "issuesUpdateComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  paramValidationFactory<t_IssuesUpdateCommentParamSchema>(
    issuesUpdateCommentParamSchema
  ),
  bodyValidationFactory<t_IssuesUpdateCommentBodySchema>(
    issuesUpdateCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesUpdateCommentParamSchema,
      void,
      t_IssuesUpdateCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesUpdateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdateComment
  }
)

const issuesDeleteCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

router.delete(
  "issuesDeleteComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  paramValidationFactory<t_IssuesDeleteCommentParamSchema>(
    issuesDeleteCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_IssuesDeleteCommentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesDeleteComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesDeleteComment
  }
)

const reactionsListForIssueCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

const reactionsListForIssueCommentQuerySchema = z.object({
  content: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reactionsListForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions",
  paramValidationFactory<t_ReactionsListForIssueCommentParamSchema>(
    reactionsListForIssueCommentParamSchema
  ),
  queryValidationFactory<t_ReactionsListForIssueCommentQuerySchema>(
    reactionsListForIssueCommentQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsListForIssueCommentParamSchema,
      t_ReactionsListForIssueCommentQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsListForIssueComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForIssueComment
  }
)

const reactionsCreateForIssueCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

const reactionsCreateForIssueCommentBodySchema = z.object({
  content: z.coerce.string(),
})

router.post(
  "reactionsCreateForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions",
  paramValidationFactory<t_ReactionsCreateForIssueCommentParamSchema>(
    reactionsCreateForIssueCommentParamSchema
  ),
  bodyValidationFactory<t_ReactionsCreateForIssueCommentBodySchema>(
    reactionsCreateForIssueCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsCreateForIssueCommentParamSchema,
      void,
      t_ReactionsCreateForIssueCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsCreateForIssueComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForIssueComment
  }
)

const reactionsDeleteForIssueCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
  reaction_id: z.coerce.number(),
})

router.delete(
  "reactionsDeleteForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions/:reactionId",
  paramValidationFactory<t_ReactionsDeleteForIssueCommentParamSchema>(
    reactionsDeleteForIssueCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReactionsDeleteForIssueCommentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reactionsDeleteForIssueComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForIssueComment
  }
)

const issuesListEventsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const issuesListEventsForRepoQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListEventsForRepo",
  "/repos/:owner/:repo/issues/events",
  paramValidationFactory<t_IssuesListEventsForRepoParamSchema>(
    issuesListEventsForRepoParamSchema
  ),
  queryValidationFactory<t_IssuesListEventsForRepoQuerySchema>(
    issuesListEventsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListEventsForRepoParamSchema,
      t_IssuesListEventsForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListEventsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListEventsForRepo
  }
)

const issuesGetEventParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  event_id: z.coerce.number(),
})

router.get(
  "issuesGetEvent",
  "/repos/:owner/:repo/issues/events/:eventId",
  paramValidationFactory<t_IssuesGetEventParamSchema>(
    issuesGetEventParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_IssuesGetEventParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesGetEvent

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetEvent
  }
)

const issuesGetParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

router.get(
  "issuesGet",
  "/repos/:owner/:repo/issues/:issueNumber",
  paramValidationFactory<t_IssuesGetParamSchema>(issuesGetParamSchema),
  async (ctx: ValidatedCtx<t_IssuesGetParamSchema, void, void>, next: Next) => {
    //region safe-edit-region-issuesGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGet
  }
)

const issuesUpdateParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const issuesUpdateBodySchema = z
  .object({
    title: z.object({}).optional(),
    body: z.coerce.string().optional(),
    assignee: z.coerce.string().optional(),
    state: z.coerce.string().optional(),
    state_reason: z.coerce.string().optional(),
    milestone: z.object({}).optional(),
    labels: z.array(z.object({}).optional()).optional(),
    assignees: z.array(z.coerce.string().optional()).optional(),
  })
  .optional()

router.patch(
  "issuesUpdate",
  "/repos/:owner/:repo/issues/:issueNumber",
  paramValidationFactory<t_IssuesUpdateParamSchema>(issuesUpdateParamSchema),
  bodyValidationFactory<t_IssuesUpdateBodySchema>(issuesUpdateBodySchema),
  async (
    ctx: ValidatedCtx<
      t_IssuesUpdateParamSchema,
      void,
      t_IssuesUpdateBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdate
  }
)

const issuesAddAssigneesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const issuesAddAssigneesBodySchema = z
  .object({ assignees: z.array(z.coerce.string().optional()).optional() })
  .optional()

router.post(
  "issuesAddAssignees",
  "/repos/:owner/:repo/issues/:issueNumber/assignees",
  paramValidationFactory<t_IssuesAddAssigneesParamSchema>(
    issuesAddAssigneesParamSchema
  ),
  bodyValidationFactory<t_IssuesAddAssigneesBodySchema>(
    issuesAddAssigneesBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesAddAssigneesParamSchema,
      void,
      t_IssuesAddAssigneesBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesAddAssignees

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesAddAssignees
  }
)

const issuesRemoveAssigneesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const issuesRemoveAssigneesBodySchema = z.object({
  assignees: z.array(z.coerce.string().optional()).optional(),
})

router.delete(
  "issuesRemoveAssignees",
  "/repos/:owner/:repo/issues/:issueNumber/assignees",
  paramValidationFactory<t_IssuesRemoveAssigneesParamSchema>(
    issuesRemoveAssigneesParamSchema
  ),
  bodyValidationFactory<t_IssuesRemoveAssigneesBodySchema>(
    issuesRemoveAssigneesBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesRemoveAssigneesParamSchema,
      void,
      t_IssuesRemoveAssigneesBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesRemoveAssignees

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesRemoveAssignees
  }
)

const issuesCheckUserCanBeAssignedToIssueParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
  assignee: z.coerce.string(),
})

router.get(
  "issuesCheckUserCanBeAssignedToIssue",
  "/repos/:owner/:repo/issues/:issueNumber/assignees/:assignee",
  paramValidationFactory<t_IssuesCheckUserCanBeAssignedToIssueParamSchema>(
    issuesCheckUserCanBeAssignedToIssueParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesCheckUserCanBeAssignedToIssueParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesCheckUserCanBeAssignedToIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCheckUserCanBeAssignedToIssue
  }
)

const issuesListCommentsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const issuesListCommentsQuerySchema = z.object({
  since: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListComments",
  "/repos/:owner/:repo/issues/:issueNumber/comments",
  paramValidationFactory<t_IssuesListCommentsParamSchema>(
    issuesListCommentsParamSchema
  ),
  queryValidationFactory<t_IssuesListCommentsQuerySchema>(
    issuesListCommentsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListCommentsParamSchema,
      t_IssuesListCommentsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListComments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListComments
  }
)

const issuesCreateCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const issuesCreateCommentBodySchema = z.object({ body: z.coerce.string() })

router.post(
  "issuesCreateComment",
  "/repos/:owner/:repo/issues/:issueNumber/comments",
  paramValidationFactory<t_IssuesCreateCommentParamSchema>(
    issuesCreateCommentParamSchema
  ),
  bodyValidationFactory<t_IssuesCreateCommentBodySchema>(
    issuesCreateCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesCreateCommentParamSchema,
      void,
      t_IssuesCreateCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesCreateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreateComment
  }
)

const issuesListEventsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const issuesListEventsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListEvents",
  "/repos/:owner/:repo/issues/:issueNumber/events",
  paramValidationFactory<t_IssuesListEventsParamSchema>(
    issuesListEventsParamSchema
  ),
  queryValidationFactory<t_IssuesListEventsQuerySchema>(
    issuesListEventsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListEventsParamSchema,
      t_IssuesListEventsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListEvents
  }
)

const issuesListLabelsOnIssueParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const issuesListLabelsOnIssueQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListLabelsOnIssue",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<t_IssuesListLabelsOnIssueParamSchema>(
    issuesListLabelsOnIssueParamSchema
  ),
  queryValidationFactory<t_IssuesListLabelsOnIssueQuerySchema>(
    issuesListLabelsOnIssueQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListLabelsOnIssueParamSchema,
      t_IssuesListLabelsOnIssueQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListLabelsOnIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListLabelsOnIssue
  }
)

const issuesAddLabelsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const issuesAddLabelsBodySchema = z.object({}).optional()

router.post(
  "issuesAddLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<t_IssuesAddLabelsParamSchema>(
    issuesAddLabelsParamSchema
  ),
  bodyValidationFactory<t_IssuesAddLabelsBodySchema>(issuesAddLabelsBodySchema),
  async (
    ctx: ValidatedCtx<
      t_IssuesAddLabelsParamSchema,
      void,
      t_IssuesAddLabelsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesAddLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesAddLabels
  }
)

const issuesSetLabelsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const issuesSetLabelsBodySchema = z.object({}).optional()

router.put(
  "issuesSetLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<t_IssuesSetLabelsParamSchema>(
    issuesSetLabelsParamSchema
  ),
  bodyValidationFactory<t_IssuesSetLabelsBodySchema>(issuesSetLabelsBodySchema),
  async (
    ctx: ValidatedCtx<
      t_IssuesSetLabelsParamSchema,
      void,
      t_IssuesSetLabelsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesSetLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesSetLabels
  }
)

const issuesRemoveAllLabelsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

router.delete(
  "issuesRemoveAllLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<t_IssuesRemoveAllLabelsParamSchema>(
    issuesRemoveAllLabelsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_IssuesRemoveAllLabelsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesRemoveAllLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesRemoveAllLabels
  }
)

const issuesRemoveLabelParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
  name: z.coerce.string(),
})

router.delete(
  "issuesRemoveLabel",
  "/repos/:owner/:repo/issues/:issueNumber/labels/:name",
  paramValidationFactory<t_IssuesRemoveLabelParamSchema>(
    issuesRemoveLabelParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_IssuesRemoveLabelParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesRemoveLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesRemoveLabel
  }
)

const issuesLockParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const issuesLockBodySchema = z
  .object({ lock_reason: z.coerce.string().optional() })
  .optional()

router.put(
  "issuesLock",
  "/repos/:owner/:repo/issues/:issueNumber/lock",
  paramValidationFactory<t_IssuesLockParamSchema>(issuesLockParamSchema),
  bodyValidationFactory<t_IssuesLockBodySchema>(issuesLockBodySchema),
  async (
    ctx: ValidatedCtx<t_IssuesLockParamSchema, void, t_IssuesLockBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-issuesLock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesLock
  }
)

const issuesUnlockParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

router.delete(
  "issuesUnlock",
  "/repos/:owner/:repo/issues/:issueNumber/lock",
  paramValidationFactory<t_IssuesUnlockParamSchema>(issuesUnlockParamSchema),
  async (
    ctx: ValidatedCtx<t_IssuesUnlockParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesUnlock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUnlock
  }
)

const reactionsListForIssueParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const reactionsListForIssueQuerySchema = z.object({
  content: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reactionsListForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions",
  paramValidationFactory<t_ReactionsListForIssueParamSchema>(
    reactionsListForIssueParamSchema
  ),
  queryValidationFactory<t_ReactionsListForIssueQuerySchema>(
    reactionsListForIssueQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsListForIssueParamSchema,
      t_ReactionsListForIssueQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsListForIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForIssue
  }
)

const reactionsCreateForIssueParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const reactionsCreateForIssueBodySchema = z.object({
  content: z.coerce.string(),
})

router.post(
  "reactionsCreateForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions",
  paramValidationFactory<t_ReactionsCreateForIssueParamSchema>(
    reactionsCreateForIssueParamSchema
  ),
  bodyValidationFactory<t_ReactionsCreateForIssueBodySchema>(
    reactionsCreateForIssueBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsCreateForIssueParamSchema,
      void,
      t_ReactionsCreateForIssueBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsCreateForIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForIssue
  }
)

const reactionsDeleteForIssueParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
  reaction_id: z.coerce.number(),
})

router.delete(
  "reactionsDeleteForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions/:reactionId",
  paramValidationFactory<t_ReactionsDeleteForIssueParamSchema>(
    reactionsDeleteForIssueParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReactionsDeleteForIssueParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reactionsDeleteForIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForIssue
  }
)

const issuesListEventsForTimelineParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  issue_number: z.coerce.number(),
})

const issuesListEventsForTimelineQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListEventsForTimeline",
  "/repos/:owner/:repo/issues/:issueNumber/timeline",
  paramValidationFactory<t_IssuesListEventsForTimelineParamSchema>(
    issuesListEventsForTimelineParamSchema
  ),
  queryValidationFactory<t_IssuesListEventsForTimelineQuerySchema>(
    issuesListEventsForTimelineQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListEventsForTimelineParamSchema,
      t_IssuesListEventsForTimelineQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListEventsForTimeline

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListEventsForTimeline
  }
)

const reposListDeployKeysParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListDeployKeysQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListDeployKeys",
  "/repos/:owner/:repo/keys",
  paramValidationFactory<t_ReposListDeployKeysParamSchema>(
    reposListDeployKeysParamSchema
  ),
  queryValidationFactory<t_ReposListDeployKeysQuerySchema>(
    reposListDeployKeysQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListDeployKeysParamSchema,
      t_ReposListDeployKeysQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListDeployKeys

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListDeployKeys
  }
)

const reposCreateDeployKeyParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposCreateDeployKeyBodySchema = z.object({
  title: z.coerce.string().optional(),
  key: z.coerce.string(),
  read_only: z.coerce.boolean().optional(),
})

router.post(
  "reposCreateDeployKey",
  "/repos/:owner/:repo/keys",
  paramValidationFactory<t_ReposCreateDeployKeyParamSchema>(
    reposCreateDeployKeyParamSchema
  ),
  bodyValidationFactory<t_ReposCreateDeployKeyBodySchema>(
    reposCreateDeployKeyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateDeployKeyParamSchema,
      void,
      t_ReposCreateDeployKeyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateDeployKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDeployKey
  }
)

const reposGetDeployKeyParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  key_id: z.coerce.number(),
})

router.get(
  "reposGetDeployKey",
  "/repos/:owner/:repo/keys/:keyId",
  paramValidationFactory<t_ReposGetDeployKeyParamSchema>(
    reposGetDeployKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetDeployKeyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetDeployKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetDeployKey
  }
)

const reposDeleteDeployKeyParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  key_id: z.coerce.number(),
})

router.delete(
  "reposDeleteDeployKey",
  "/repos/:owner/:repo/keys/:keyId",
  paramValidationFactory<t_ReposDeleteDeployKeyParamSchema>(
    reposDeleteDeployKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteDeployKeyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteDeployKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteDeployKey
  }
)

const issuesListLabelsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const issuesListLabelsForRepoQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListLabelsForRepo",
  "/repos/:owner/:repo/labels",
  paramValidationFactory<t_IssuesListLabelsForRepoParamSchema>(
    issuesListLabelsForRepoParamSchema
  ),
  queryValidationFactory<t_IssuesListLabelsForRepoQuerySchema>(
    issuesListLabelsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListLabelsForRepoParamSchema,
      t_IssuesListLabelsForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListLabelsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListLabelsForRepo
  }
)

const issuesCreateLabelParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const issuesCreateLabelBodySchema = z.object({
  name: z.coerce.string(),
  color: z.coerce.string().optional(),
  description: z.coerce.string().optional(),
})

router.post(
  "issuesCreateLabel",
  "/repos/:owner/:repo/labels",
  paramValidationFactory<t_IssuesCreateLabelParamSchema>(
    issuesCreateLabelParamSchema
  ),
  bodyValidationFactory<t_IssuesCreateLabelBodySchema>(
    issuesCreateLabelBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesCreateLabelParamSchema,
      void,
      t_IssuesCreateLabelBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesCreateLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreateLabel
  }
)

const issuesGetLabelParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  name: z.coerce.string(),
})

router.get(
  "issuesGetLabel",
  "/repos/:owner/:repo/labels/:name",
  paramValidationFactory<t_IssuesGetLabelParamSchema>(
    issuesGetLabelParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_IssuesGetLabelParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesGetLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetLabel
  }
)

const issuesUpdateLabelParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  name: z.coerce.string(),
})

const issuesUpdateLabelBodySchema = z
  .object({
    new_name: z.coerce.string().optional(),
    color: z.coerce.string().optional(),
    description: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "issuesUpdateLabel",
  "/repos/:owner/:repo/labels/:name",
  paramValidationFactory<t_IssuesUpdateLabelParamSchema>(
    issuesUpdateLabelParamSchema
  ),
  bodyValidationFactory<t_IssuesUpdateLabelBodySchema>(
    issuesUpdateLabelBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesUpdateLabelParamSchema,
      void,
      t_IssuesUpdateLabelBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesUpdateLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdateLabel
  }
)

const issuesDeleteLabelParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  name: z.coerce.string(),
})

router.delete(
  "issuesDeleteLabel",
  "/repos/:owner/:repo/labels/:name",
  paramValidationFactory<t_IssuesDeleteLabelParamSchema>(
    issuesDeleteLabelParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_IssuesDeleteLabelParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesDeleteLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesDeleteLabel
  }
)

const reposListLanguagesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposListLanguages",
  "/repos/:owner/:repo/languages",
  paramValidationFactory<t_ReposListLanguagesParamSchema>(
    reposListLanguagesParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposListLanguagesParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposListLanguages

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListLanguages
  }
)

const reposEnableLfsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.put(
  "reposEnableLfsForRepo",
  "/repos/:owner/:repo/lfs",
  paramValidationFactory<t_ReposEnableLfsForRepoParamSchema>(
    reposEnableLfsForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposEnableLfsForRepoParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposEnableLfsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposEnableLfsForRepo
  }
)

const reposDisableLfsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.delete(
  "reposDisableLfsForRepo",
  "/repos/:owner/:repo/lfs",
  paramValidationFactory<t_ReposDisableLfsForRepoParamSchema>(
    reposDisableLfsForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDisableLfsForRepoParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDisableLfsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDisableLfsForRepo
  }
)

const licensesGetForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "licensesGetForRepo",
  "/repos/:owner/:repo/license",
  paramValidationFactory<t_LicensesGetForRepoParamSchema>(
    licensesGetForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_LicensesGetForRepoParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-licensesGetForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-licensesGetForRepo
  }
)

const reposMergeUpstreamParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposMergeUpstreamBodySchema = z.object({ branch: z.coerce.string() })

router.post(
  "reposMergeUpstream",
  "/repos/:owner/:repo/merge-upstream",
  paramValidationFactory<t_ReposMergeUpstreamParamSchema>(
    reposMergeUpstreamParamSchema
  ),
  bodyValidationFactory<t_ReposMergeUpstreamBodySchema>(
    reposMergeUpstreamBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposMergeUpstreamParamSchema,
      void,
      t_ReposMergeUpstreamBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposMergeUpstream

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposMergeUpstream
  }
)

const reposMergeParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposMergeBodySchema = z.object({
  base: z.coerce.string(),
  head: z.coerce.string(),
  commit_message: z.coerce.string().optional(),
})

router.post(
  "reposMerge",
  "/repos/:owner/:repo/merges",
  paramValidationFactory<t_ReposMergeParamSchema>(reposMergeParamSchema),
  bodyValidationFactory<t_ReposMergeBodySchema>(reposMergeBodySchema),
  async (
    ctx: ValidatedCtx<t_ReposMergeParamSchema, void, t_ReposMergeBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-reposMerge

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposMerge
  }
)

const issuesListMilestonesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const issuesListMilestonesQuerySchema = z.object({
  state: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListMilestones",
  "/repos/:owner/:repo/milestones",
  paramValidationFactory<t_IssuesListMilestonesParamSchema>(
    issuesListMilestonesParamSchema
  ),
  queryValidationFactory<t_IssuesListMilestonesQuerySchema>(
    issuesListMilestonesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListMilestonesParamSchema,
      t_IssuesListMilestonesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListMilestones

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListMilestones
  }
)

const issuesCreateMilestoneParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const issuesCreateMilestoneBodySchema = z.object({
  title: z.coerce.string(),
  state: z.coerce.string().optional(),
  description: z.coerce.string().optional(),
  due_on: z.coerce.string().optional(),
})

router.post(
  "issuesCreateMilestone",
  "/repos/:owner/:repo/milestones",
  paramValidationFactory<t_IssuesCreateMilestoneParamSchema>(
    issuesCreateMilestoneParamSchema
  ),
  bodyValidationFactory<t_IssuesCreateMilestoneBodySchema>(
    issuesCreateMilestoneBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesCreateMilestoneParamSchema,
      void,
      t_IssuesCreateMilestoneBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesCreateMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreateMilestone
  }
)

const issuesGetMilestoneParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  milestone_number: z.coerce.number(),
})

router.get(
  "issuesGetMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  paramValidationFactory<t_IssuesGetMilestoneParamSchema>(
    issuesGetMilestoneParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_IssuesGetMilestoneParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesGetMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetMilestone
  }
)

const issuesUpdateMilestoneParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  milestone_number: z.coerce.number(),
})

const issuesUpdateMilestoneBodySchema = z
  .object({
    title: z.coerce.string().optional(),
    state: z.coerce.string().optional(),
    description: z.coerce.string().optional(),
    due_on: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "issuesUpdateMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  paramValidationFactory<t_IssuesUpdateMilestoneParamSchema>(
    issuesUpdateMilestoneParamSchema
  ),
  bodyValidationFactory<t_IssuesUpdateMilestoneBodySchema>(
    issuesUpdateMilestoneBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesUpdateMilestoneParamSchema,
      void,
      t_IssuesUpdateMilestoneBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesUpdateMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdateMilestone
  }
)

const issuesDeleteMilestoneParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  milestone_number: z.coerce.number(),
})

router.delete(
  "issuesDeleteMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  paramValidationFactory<t_IssuesDeleteMilestoneParamSchema>(
    issuesDeleteMilestoneParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_IssuesDeleteMilestoneParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesDeleteMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesDeleteMilestone
  }
)

const issuesListLabelsForMilestoneParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  milestone_number: z.coerce.number(),
})

const issuesListLabelsForMilestoneQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListLabelsForMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber/labels",
  paramValidationFactory<t_IssuesListLabelsForMilestoneParamSchema>(
    issuesListLabelsForMilestoneParamSchema
  ),
  queryValidationFactory<t_IssuesListLabelsForMilestoneQuerySchema>(
    issuesListLabelsForMilestoneQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_IssuesListLabelsForMilestoneParamSchema,
      t_IssuesListLabelsForMilestoneQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-issuesListLabelsForMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListLabelsForMilestone
  }
)

const activityListRepoNotificationsForAuthenticatedUserParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const activityListRepoNotificationsForAuthenticatedUserQuerySchema = z.object({
  all: z.coerce.boolean().optional(),
  participating: z.coerce.boolean().optional(),
  since: z.coerce.string().optional(),
  before: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListRepoNotificationsForAuthenticatedUser",
  "/repos/:owner/:repo/notifications",
  paramValidationFactory<t_ActivityListRepoNotificationsForAuthenticatedUserParamSchema>(
    activityListRepoNotificationsForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_ActivityListRepoNotificationsForAuthenticatedUserQuerySchema>(
    activityListRepoNotificationsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListRepoNotificationsForAuthenticatedUserParamSchema,
      t_ActivityListRepoNotificationsForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListRepoNotificationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListRepoNotificationsForAuthenticatedUser
  }
)

const activityMarkRepoNotificationsAsReadParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const activityMarkRepoNotificationsAsReadBodySchema = z
  .object({ last_read_at: z.coerce.string().optional() })
  .optional()

router.put(
  "activityMarkRepoNotificationsAsRead",
  "/repos/:owner/:repo/notifications",
  paramValidationFactory<t_ActivityMarkRepoNotificationsAsReadParamSchema>(
    activityMarkRepoNotificationsAsReadParamSchema
  ),
  bodyValidationFactory<t_ActivityMarkRepoNotificationsAsReadBodySchema>(
    activityMarkRepoNotificationsAsReadBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityMarkRepoNotificationsAsReadParamSchema,
      void,
      t_ActivityMarkRepoNotificationsAsReadBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityMarkRepoNotificationsAsRead

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityMarkRepoNotificationsAsRead
  }
)

const reposGetPagesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetPages",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<t_ReposGetPagesParamSchema>(reposGetPagesParamSchema),
  async (
    ctx: ValidatedCtx<t_ReposGetPagesParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetPages

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPages
  }
)

const reposCreatePagesSiteParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposCreatePagesSiteBodySchema = z.object({
  build_type: z.coerce.string().optional(),
  source: z
    .object({ branch: z.coerce.string(), path: z.coerce.string().optional() })
    .optional(),
})

router.post(
  "reposCreatePagesSite",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<t_ReposCreatePagesSiteParamSchema>(
    reposCreatePagesSiteParamSchema
  ),
  bodyValidationFactory<t_ReposCreatePagesSiteBodySchema>(
    reposCreatePagesSiteBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreatePagesSiteParamSchema,
      void,
      t_ReposCreatePagesSiteBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreatePagesSite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreatePagesSite
  }
)

const reposUpdateInformationAboutPagesSiteParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposUpdateInformationAboutPagesSiteBodySchema = z.object({
  cname: z.coerce.string().optional(),
  https_enforced: z.coerce.boolean().optional(),
  build_type: z.coerce.string().optional(),
  source: z.object({}).optional(),
})

router.put(
  "reposUpdateInformationAboutPagesSite",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<t_ReposUpdateInformationAboutPagesSiteParamSchema>(
    reposUpdateInformationAboutPagesSiteParamSchema
  ),
  bodyValidationFactory<t_ReposUpdateInformationAboutPagesSiteBodySchema>(
    reposUpdateInformationAboutPagesSiteBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUpdateInformationAboutPagesSiteParamSchema,
      void,
      t_ReposUpdateInformationAboutPagesSiteBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdateInformationAboutPagesSite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateInformationAboutPagesSite
  }
)

const reposDeletePagesSiteParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.delete(
  "reposDeletePagesSite",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<t_ReposDeletePagesSiteParamSchema>(
    reposDeletePagesSiteParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeletePagesSiteParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeletePagesSite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeletePagesSite
  }
)

const reposListPagesBuildsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListPagesBuildsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListPagesBuilds",
  "/repos/:owner/:repo/pages/builds",
  paramValidationFactory<t_ReposListPagesBuildsParamSchema>(
    reposListPagesBuildsParamSchema
  ),
  queryValidationFactory<t_ReposListPagesBuildsQuerySchema>(
    reposListPagesBuildsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListPagesBuildsParamSchema,
      t_ReposListPagesBuildsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListPagesBuilds

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListPagesBuilds
  }
)

const reposRequestPagesBuildParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.post(
  "reposRequestPagesBuild",
  "/repos/:owner/:repo/pages/builds",
  paramValidationFactory<t_ReposRequestPagesBuildParamSchema>(
    reposRequestPagesBuildParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposRequestPagesBuildParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposRequestPagesBuild

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRequestPagesBuild
  }
)

const reposGetLatestPagesBuildParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetLatestPagesBuild",
  "/repos/:owner/:repo/pages/builds/latest",
  paramValidationFactory<t_ReposGetLatestPagesBuildParamSchema>(
    reposGetLatestPagesBuildParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetLatestPagesBuildParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetLatestPagesBuild

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetLatestPagesBuild
  }
)

const reposGetPagesBuildParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  build_id: z.coerce.number(),
})

router.get(
  "reposGetPagesBuild",
  "/repos/:owner/:repo/pages/builds/:buildId",
  paramValidationFactory<t_ReposGetPagesBuildParamSchema>(
    reposGetPagesBuildParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetPagesBuildParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetPagesBuild

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPagesBuild
  }
)

const reposCreatePagesDeploymentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposCreatePagesDeploymentBodySchema = z.object({
  artifact_url: z.coerce.string(),
  environment: z.coerce.string().optional(),
  pages_build_version: z.coerce.string(),
  oidc_token: z.coerce.string(),
})

router.post(
  "reposCreatePagesDeployment",
  "/repos/:owner/:repo/pages/deployment",
  paramValidationFactory<t_ReposCreatePagesDeploymentParamSchema>(
    reposCreatePagesDeploymentParamSchema
  ),
  bodyValidationFactory<t_ReposCreatePagesDeploymentBodySchema>(
    reposCreatePagesDeploymentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreatePagesDeploymentParamSchema,
      void,
      t_ReposCreatePagesDeploymentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreatePagesDeployment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreatePagesDeployment
  }
)

const reposGetPagesHealthCheckParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetPagesHealthCheck",
  "/repos/:owner/:repo/pages/health",
  paramValidationFactory<t_ReposGetPagesHealthCheckParamSchema>(
    reposGetPagesHealthCheckParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetPagesHealthCheckParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetPagesHealthCheck

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPagesHealthCheck
  }
)

const projectsListForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const projectsListForRepoQuerySchema = z.object({
  state: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "projectsListForRepo",
  "/repos/:owner/:repo/projects",
  paramValidationFactory<t_ProjectsListForRepoParamSchema>(
    projectsListForRepoParamSchema
  ),
  queryValidationFactory<t_ProjectsListForRepoQuerySchema>(
    projectsListForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsListForRepoParamSchema,
      t_ProjectsListForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsListForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListForRepo
  }
)

const projectsCreateForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const projectsCreateForRepoBodySchema = z.object({
  name: z.coerce.string(),
  body: z.coerce.string().optional(),
})

router.post(
  "projectsCreateForRepo",
  "/repos/:owner/:repo/projects",
  paramValidationFactory<t_ProjectsCreateForRepoParamSchema>(
    projectsCreateForRepoParamSchema
  ),
  bodyValidationFactory<t_ProjectsCreateForRepoBodySchema>(
    projectsCreateForRepoBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsCreateForRepoParamSchema,
      void,
      t_ProjectsCreateForRepoBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsCreateForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateForRepo
  }
)

const pullsListParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const pullsListQuerySchema = z.object({
  state: z.coerce.string().optional(),
  head: z.coerce.string().optional(),
  base: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "pullsList",
  "/repos/:owner/:repo/pulls",
  paramValidationFactory<t_PullsListParamSchema>(pullsListParamSchema),
  queryValidationFactory<t_PullsListQuerySchema>(pullsListQuerySchema),
  async (
    ctx: ValidatedCtx<t_PullsListParamSchema, t_PullsListQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-pullsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsList
  }
)

const pullsCreateParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const pullsCreateBodySchema = z.object({
  title: z.coerce.string().optional(),
  head: z.coerce.string(),
  base: z.coerce.string(),
  body: z.coerce.string().optional(),
  maintainer_can_modify: z.coerce.boolean().optional(),
  draft: z.coerce.boolean().optional(),
  issue: z.coerce.number().optional(),
})

router.post(
  "pullsCreate",
  "/repos/:owner/:repo/pulls",
  paramValidationFactory<t_PullsCreateParamSchema>(pullsCreateParamSchema),
  bodyValidationFactory<t_PullsCreateBodySchema>(pullsCreateBodySchema),
  async (
    ctx: ValidatedCtx<t_PullsCreateParamSchema, void, t_PullsCreateBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-pullsCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreate
  }
)

const pullsListReviewCommentsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const pullsListReviewCommentsForRepoQuerySchema = z.object({
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  since: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "pullsListReviewCommentsForRepo",
  "/repos/:owner/:repo/pulls/comments",
  paramValidationFactory<t_PullsListReviewCommentsForRepoParamSchema>(
    pullsListReviewCommentsForRepoParamSchema
  ),
  queryValidationFactory<t_PullsListReviewCommentsForRepoQuerySchema>(
    pullsListReviewCommentsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsListReviewCommentsForRepoParamSchema,
      t_PullsListReviewCommentsForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsListReviewCommentsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListReviewCommentsForRepo
  }
)

const pullsGetReviewCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

router.get(
  "pullsGetReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  paramValidationFactory<t_PullsGetReviewCommentParamSchema>(
    pullsGetReviewCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_PullsGetReviewCommentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-pullsGetReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsGetReviewComment
  }
)

const pullsUpdateReviewCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

const pullsUpdateReviewCommentBodySchema = z.object({ body: z.coerce.string() })

router.patch(
  "pullsUpdateReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  paramValidationFactory<t_PullsUpdateReviewCommentParamSchema>(
    pullsUpdateReviewCommentParamSchema
  ),
  bodyValidationFactory<t_PullsUpdateReviewCommentBodySchema>(
    pullsUpdateReviewCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsUpdateReviewCommentParamSchema,
      void,
      t_PullsUpdateReviewCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsUpdateReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdateReviewComment
  }
)

const pullsDeleteReviewCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

router.delete(
  "pullsDeleteReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  paramValidationFactory<t_PullsDeleteReviewCommentParamSchema>(
    pullsDeleteReviewCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_PullsDeleteReviewCommentParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-pullsDeleteReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsDeleteReviewComment
  }
)

const reactionsListForPullRequestReviewCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

const reactionsListForPullRequestReviewCommentQuerySchema = z.object({
  content: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reactionsListForPullRequestReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions",
  paramValidationFactory<t_ReactionsListForPullRequestReviewCommentParamSchema>(
    reactionsListForPullRequestReviewCommentParamSchema
  ),
  queryValidationFactory<t_ReactionsListForPullRequestReviewCommentQuerySchema>(
    reactionsListForPullRequestReviewCommentQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsListForPullRequestReviewCommentParamSchema,
      t_ReactionsListForPullRequestReviewCommentQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsListForPullRequestReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForPullRequestReviewComment
  }
)

const reactionsCreateForPullRequestReviewCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
})

const reactionsCreateForPullRequestReviewCommentBodySchema = z.object({
  content: z.coerce.string(),
})

router.post(
  "reactionsCreateForPullRequestReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions",
  paramValidationFactory<t_ReactionsCreateForPullRequestReviewCommentParamSchema>(
    reactionsCreateForPullRequestReviewCommentParamSchema
  ),
  bodyValidationFactory<t_ReactionsCreateForPullRequestReviewCommentBodySchema>(
    reactionsCreateForPullRequestReviewCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsCreateForPullRequestReviewCommentParamSchema,
      void,
      t_ReactionsCreateForPullRequestReviewCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsCreateForPullRequestReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForPullRequestReviewComment
  }
)

const reactionsDeleteForPullRequestCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  comment_id: z.coerce.number(),
  reaction_id: z.coerce.number(),
})

router.delete(
  "reactionsDeleteForPullRequestComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions/:reactionId",
  paramValidationFactory<t_ReactionsDeleteForPullRequestCommentParamSchema>(
    reactionsDeleteForPullRequestCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsDeleteForPullRequestCommentParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsDeleteForPullRequestComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForPullRequestComment
  }
)

const pullsGetParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

router.get(
  "pullsGet",
  "/repos/:owner/:repo/pulls/:pullNumber",
  paramValidationFactory<t_PullsGetParamSchema>(pullsGetParamSchema),
  async (ctx: ValidatedCtx<t_PullsGetParamSchema, void, void>, next: Next) => {
    //region safe-edit-region-pullsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsGet
  }
)

const pullsUpdateParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const pullsUpdateBodySchema = z
  .object({
    title: z.coerce.string().optional(),
    body: z.coerce.string().optional(),
    state: z.coerce.string().optional(),
    base: z.coerce.string().optional(),
    maintainer_can_modify: z.coerce.boolean().optional(),
  })
  .optional()

router.patch(
  "pullsUpdate",
  "/repos/:owner/:repo/pulls/:pullNumber",
  paramValidationFactory<t_PullsUpdateParamSchema>(pullsUpdateParamSchema),
  bodyValidationFactory<t_PullsUpdateBodySchema>(pullsUpdateBodySchema),
  async (
    ctx: ValidatedCtx<t_PullsUpdateParamSchema, void, t_PullsUpdateBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-pullsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdate
  }
)

const codespacesCreateWithPrForAuthenticatedUserParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const codespacesCreateWithPrForAuthenticatedUserBodySchema = z.object({
  location: z.coerce.string().optional(),
  client_ip: z.coerce.string().optional(),
  machine: z.coerce.string().optional(),
  devcontainer_path: z.coerce.string().optional(),
  multi_repo_permissions_opt_out: z.coerce.boolean().optional(),
  working_directory: z.coerce.string().optional(),
  idle_timeout_minutes: z.coerce.number().optional(),
  display_name: z.coerce.string().optional(),
  retention_period_minutes: z.coerce.number().optional(),
})

router.post(
  "codespacesCreateWithPrForAuthenticatedUser",
  "/repos/:owner/:repo/pulls/:pullNumber/codespaces",
  paramValidationFactory<t_CodespacesCreateWithPrForAuthenticatedUserParamSchema>(
    codespacesCreateWithPrForAuthenticatedUserParamSchema
  ),
  bodyValidationFactory<t_CodespacesCreateWithPrForAuthenticatedUserBodySchema>(
    codespacesCreateWithPrForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesCreateWithPrForAuthenticatedUserParamSchema,
      void,
      t_CodespacesCreateWithPrForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesCreateWithPrForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesCreateWithPrForAuthenticatedUser
  }
)

const pullsListReviewCommentsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const pullsListReviewCommentsQuerySchema = z.object({
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  since: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "pullsListReviewComments",
  "/repos/:owner/:repo/pulls/:pullNumber/comments",
  paramValidationFactory<t_PullsListReviewCommentsParamSchema>(
    pullsListReviewCommentsParamSchema
  ),
  queryValidationFactory<t_PullsListReviewCommentsQuerySchema>(
    pullsListReviewCommentsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsListReviewCommentsParamSchema,
      t_PullsListReviewCommentsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsListReviewComments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListReviewComments
  }
)

const pullsCreateReviewCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const pullsCreateReviewCommentBodySchema = z.object({
  body: z.coerce.string(),
  commit_id: z.coerce.string(),
  path: z.coerce.string(),
  position: z.coerce.number().optional(),
  side: z.coerce.string().optional(),
  line: z.coerce.number(),
  start_line: z.coerce.number().optional(),
  start_side: z.coerce.string().optional(),
  in_reply_to: z.coerce.number().optional(),
})

router.post(
  "pullsCreateReviewComment",
  "/repos/:owner/:repo/pulls/:pullNumber/comments",
  paramValidationFactory<t_PullsCreateReviewCommentParamSchema>(
    pullsCreateReviewCommentParamSchema
  ),
  bodyValidationFactory<t_PullsCreateReviewCommentBodySchema>(
    pullsCreateReviewCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsCreateReviewCommentParamSchema,
      void,
      t_PullsCreateReviewCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsCreateReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreateReviewComment
  }
)

const pullsCreateReplyForReviewCommentParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
  comment_id: z.coerce.number(),
})

const pullsCreateReplyForReviewCommentBodySchema = z.object({
  body: z.coerce.string(),
})

router.post(
  "pullsCreateReplyForReviewComment",
  "/repos/:owner/:repo/pulls/:pullNumber/comments/:commentId/replies",
  paramValidationFactory<t_PullsCreateReplyForReviewCommentParamSchema>(
    pullsCreateReplyForReviewCommentParamSchema
  ),
  bodyValidationFactory<t_PullsCreateReplyForReviewCommentBodySchema>(
    pullsCreateReplyForReviewCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsCreateReplyForReviewCommentParamSchema,
      void,
      t_PullsCreateReplyForReviewCommentBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsCreateReplyForReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreateReplyForReviewComment
  }
)

const pullsListCommitsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const pullsListCommitsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "pullsListCommits",
  "/repos/:owner/:repo/pulls/:pullNumber/commits",
  paramValidationFactory<t_PullsListCommitsParamSchema>(
    pullsListCommitsParamSchema
  ),
  queryValidationFactory<t_PullsListCommitsQuerySchema>(
    pullsListCommitsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsListCommitsParamSchema,
      t_PullsListCommitsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsListCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListCommits
  }
)

const pullsListFilesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const pullsListFilesQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "pullsListFiles",
  "/repos/:owner/:repo/pulls/:pullNumber/files",
  paramValidationFactory<t_PullsListFilesParamSchema>(
    pullsListFilesParamSchema
  ),
  queryValidationFactory<t_PullsListFilesQuerySchema>(
    pullsListFilesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsListFilesParamSchema,
      t_PullsListFilesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsListFiles

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListFiles
  }
)

const pullsCheckIfMergedParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

router.get(
  "pullsCheckIfMerged",
  "/repos/:owner/:repo/pulls/:pullNumber/merge",
  paramValidationFactory<t_PullsCheckIfMergedParamSchema>(
    pullsCheckIfMergedParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_PullsCheckIfMergedParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-pullsCheckIfMerged

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCheckIfMerged
  }
)

const pullsMergeParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const pullsMergeBodySchema = z
  .object({
    commit_title: z.coerce.string().optional(),
    commit_message: z.coerce.string().optional(),
    sha: z.coerce.string().optional(),
    merge_method: z.coerce.string().optional(),
  })
  .optional()

router.put(
  "pullsMerge",
  "/repos/:owner/:repo/pulls/:pullNumber/merge",
  paramValidationFactory<t_PullsMergeParamSchema>(pullsMergeParamSchema),
  bodyValidationFactory<t_PullsMergeBodySchema>(pullsMergeBodySchema),
  async (
    ctx: ValidatedCtx<t_PullsMergeParamSchema, void, t_PullsMergeBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-pullsMerge

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsMerge
  }
)

const pullsListRequestedReviewersParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

router.get(
  "pullsListRequestedReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  paramValidationFactory<t_PullsListRequestedReviewersParamSchema>(
    pullsListRequestedReviewersParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_PullsListRequestedReviewersParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-pullsListRequestedReviewers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListRequestedReviewers
  }
)

const pullsRequestReviewersParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const pullsRequestReviewersBodySchema = z
  .object({
    reviewers: z.array(z.coerce.string().optional()).optional(),
    team_reviewers: z.array(z.coerce.string().optional()).optional(),
  })
  .optional()

router.post(
  "pullsRequestReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  paramValidationFactory<t_PullsRequestReviewersParamSchema>(
    pullsRequestReviewersParamSchema
  ),
  bodyValidationFactory<t_PullsRequestReviewersBodySchema>(
    pullsRequestReviewersBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsRequestReviewersParamSchema,
      void,
      t_PullsRequestReviewersBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsRequestReviewers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsRequestReviewers
  }
)

const pullsRemoveRequestedReviewersParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const pullsRemoveRequestedReviewersBodySchema = z.object({
  reviewers: z.array(z.coerce.string().optional()),
  team_reviewers: z.array(z.coerce.string().optional()).optional(),
})

router.delete(
  "pullsRemoveRequestedReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  paramValidationFactory<t_PullsRemoveRequestedReviewersParamSchema>(
    pullsRemoveRequestedReviewersParamSchema
  ),
  bodyValidationFactory<t_PullsRemoveRequestedReviewersBodySchema>(
    pullsRemoveRequestedReviewersBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsRemoveRequestedReviewersParamSchema,
      void,
      t_PullsRemoveRequestedReviewersBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsRemoveRequestedReviewers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsRemoveRequestedReviewers
  }
)

const pullsListReviewsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const pullsListReviewsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "pullsListReviews",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews",
  paramValidationFactory<t_PullsListReviewsParamSchema>(
    pullsListReviewsParamSchema
  ),
  queryValidationFactory<t_PullsListReviewsQuerySchema>(
    pullsListReviewsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsListReviewsParamSchema,
      t_PullsListReviewsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsListReviews

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListReviews
  }
)

const pullsCreateReviewParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const pullsCreateReviewBodySchema = z
  .object({
    commit_id: z.coerce.string().optional(),
    body: z.coerce.string().optional(),
    event: z.coerce.string().optional(),
    comments: z
      .array(
        z
          .object({
            path: z.coerce.string(),
            position: z.coerce.number().optional(),
            body: z.coerce.string(),
            line: z.coerce.number().optional(),
            side: z.coerce.string().optional(),
            start_line: z.coerce.number().optional(),
            start_side: z.coerce.string().optional(),
          })
          .optional()
      )
      .optional(),
  })
  .optional()

router.post(
  "pullsCreateReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews",
  paramValidationFactory<t_PullsCreateReviewParamSchema>(
    pullsCreateReviewParamSchema
  ),
  bodyValidationFactory<t_PullsCreateReviewBodySchema>(
    pullsCreateReviewBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsCreateReviewParamSchema,
      void,
      t_PullsCreateReviewBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsCreateReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreateReview
  }
)

const pullsGetReviewParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
  review_id: z.coerce.number(),
})

router.get(
  "pullsGetReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  paramValidationFactory<t_PullsGetReviewParamSchema>(
    pullsGetReviewParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_PullsGetReviewParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-pullsGetReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsGetReview
  }
)

const pullsUpdateReviewParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
  review_id: z.coerce.number(),
})

const pullsUpdateReviewBodySchema = z.object({ body: z.coerce.string() })

router.put(
  "pullsUpdateReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  paramValidationFactory<t_PullsUpdateReviewParamSchema>(
    pullsUpdateReviewParamSchema
  ),
  bodyValidationFactory<t_PullsUpdateReviewBodySchema>(
    pullsUpdateReviewBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsUpdateReviewParamSchema,
      void,
      t_PullsUpdateReviewBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsUpdateReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdateReview
  }
)

const pullsDeletePendingReviewParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
  review_id: z.coerce.number(),
})

router.delete(
  "pullsDeletePendingReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  paramValidationFactory<t_PullsDeletePendingReviewParamSchema>(
    pullsDeletePendingReviewParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_PullsDeletePendingReviewParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-pullsDeletePendingReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsDeletePendingReview
  }
)

const pullsListCommentsForReviewParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
  review_id: z.coerce.number(),
})

const pullsListCommentsForReviewQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "pullsListCommentsForReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/comments",
  paramValidationFactory<t_PullsListCommentsForReviewParamSchema>(
    pullsListCommentsForReviewParamSchema
  ),
  queryValidationFactory<t_PullsListCommentsForReviewQuerySchema>(
    pullsListCommentsForReviewQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsListCommentsForReviewParamSchema,
      t_PullsListCommentsForReviewQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsListCommentsForReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListCommentsForReview
  }
)

const pullsDismissReviewParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
  review_id: z.coerce.number(),
})

const pullsDismissReviewBodySchema = z.object({
  message: z.coerce.string(),
  event: z.coerce.string().optional(),
})

router.put(
  "pullsDismissReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/dismissals",
  paramValidationFactory<t_PullsDismissReviewParamSchema>(
    pullsDismissReviewParamSchema
  ),
  bodyValidationFactory<t_PullsDismissReviewBodySchema>(
    pullsDismissReviewBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsDismissReviewParamSchema,
      void,
      t_PullsDismissReviewBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsDismissReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsDismissReview
  }
)

const pullsSubmitReviewParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
  review_id: z.coerce.number(),
})

const pullsSubmitReviewBodySchema = z.object({
  body: z.coerce.string().optional(),
  event: z.coerce.string(),
})

router.post(
  "pullsSubmitReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/events",
  paramValidationFactory<t_PullsSubmitReviewParamSchema>(
    pullsSubmitReviewParamSchema
  ),
  bodyValidationFactory<t_PullsSubmitReviewBodySchema>(
    pullsSubmitReviewBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsSubmitReviewParamSchema,
      void,
      t_PullsSubmitReviewBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsSubmitReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsSubmitReview
  }
)

const pullsUpdateBranchParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  pull_number: z.coerce.number(),
})

const pullsUpdateBranchBodySchema = z
  .object({ expected_head_sha: z.coerce.string().optional() })
  .optional()

router.put(
  "pullsUpdateBranch",
  "/repos/:owner/:repo/pulls/:pullNumber/update-branch",
  paramValidationFactory<t_PullsUpdateBranchParamSchema>(
    pullsUpdateBranchParamSchema
  ),
  bodyValidationFactory<t_PullsUpdateBranchBodySchema>(
    pullsUpdateBranchBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PullsUpdateBranchParamSchema,
      void,
      t_PullsUpdateBranchBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-pullsUpdateBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdateBranch
  }
)

const reposGetReadmeParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposGetReadmeQuerySchema = z.object({
  ref: z.coerce.string().optional(),
})

router.get(
  "reposGetReadme",
  "/repos/:owner/:repo/readme",
  paramValidationFactory<t_ReposGetReadmeParamSchema>(
    reposGetReadmeParamSchema
  ),
  queryValidationFactory<t_ReposGetReadmeQuerySchema>(
    reposGetReadmeQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetReadmeParamSchema,
      t_ReposGetReadmeQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetReadme

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetReadme
  }
)

const reposGetReadmeInDirectoryParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  dir: z.coerce.string(),
})

const reposGetReadmeInDirectoryQuerySchema = z.object({
  ref: z.coerce.string().optional(),
})

router.get(
  "reposGetReadmeInDirectory",
  "/repos/:owner/:repo/readme/:dir",
  paramValidationFactory<t_ReposGetReadmeInDirectoryParamSchema>(
    reposGetReadmeInDirectoryParamSchema
  ),
  queryValidationFactory<t_ReposGetReadmeInDirectoryQuerySchema>(
    reposGetReadmeInDirectoryQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetReadmeInDirectoryParamSchema,
      t_ReposGetReadmeInDirectoryQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetReadmeInDirectory

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetReadmeInDirectory
  }
)

const reposListReleasesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListReleasesQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListReleases",
  "/repos/:owner/:repo/releases",
  paramValidationFactory<t_ReposListReleasesParamSchema>(
    reposListReleasesParamSchema
  ),
  queryValidationFactory<t_ReposListReleasesQuerySchema>(
    reposListReleasesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListReleasesParamSchema,
      t_ReposListReleasesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListReleases

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListReleases
  }
)

const reposCreateReleaseParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposCreateReleaseBodySchema = z.object({
  tag_name: z.coerce.string(),
  target_commitish: z.coerce.string().optional(),
  name: z.coerce.string().optional(),
  body: z.coerce.string().optional(),
  draft: z.coerce.boolean().optional(),
  prerelease: z.coerce.boolean().optional(),
  discussion_category_name: z.coerce.string().optional(),
  generate_release_notes: z.coerce.boolean().optional(),
  make_latest: z.coerce.string().optional(),
})

router.post(
  "reposCreateRelease",
  "/repos/:owner/:repo/releases",
  paramValidationFactory<t_ReposCreateReleaseParamSchema>(
    reposCreateReleaseParamSchema
  ),
  bodyValidationFactory<t_ReposCreateReleaseBodySchema>(
    reposCreateReleaseBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateReleaseParamSchema,
      void,
      t_ReposCreateReleaseBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateRelease
  }
)

const reposGetReleaseAssetParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  asset_id: z.coerce.number(),
})

router.get(
  "reposGetReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  paramValidationFactory<t_ReposGetReleaseAssetParamSchema>(
    reposGetReleaseAssetParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetReleaseAssetParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetReleaseAsset
  }
)

const reposUpdateReleaseAssetParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  asset_id: z.coerce.number(),
})

const reposUpdateReleaseAssetBodySchema = z
  .object({
    name: z.coerce.string().optional(),
    label: z.coerce.string().optional(),
    state: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "reposUpdateReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  paramValidationFactory<t_ReposUpdateReleaseAssetParamSchema>(
    reposUpdateReleaseAssetParamSchema
  ),
  bodyValidationFactory<t_ReposUpdateReleaseAssetBodySchema>(
    reposUpdateReleaseAssetBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUpdateReleaseAssetParamSchema,
      void,
      t_ReposUpdateReleaseAssetBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdateReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateReleaseAsset
  }
)

const reposDeleteReleaseAssetParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  asset_id: z.coerce.number(),
})

router.delete(
  "reposDeleteReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  paramValidationFactory<t_ReposDeleteReleaseAssetParamSchema>(
    reposDeleteReleaseAssetParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteReleaseAssetParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteReleaseAsset
  }
)

const reposGenerateReleaseNotesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposGenerateReleaseNotesBodySchema = z.object({
  tag_name: z.coerce.string(),
  target_commitish: z.coerce.string().optional(),
  previous_tag_name: z.coerce.string().optional(),
  configuration_file_path: z.coerce.string().optional(),
})

router.post(
  "reposGenerateReleaseNotes",
  "/repos/:owner/:repo/releases/generate-notes",
  paramValidationFactory<t_ReposGenerateReleaseNotesParamSchema>(
    reposGenerateReleaseNotesParamSchema
  ),
  bodyValidationFactory<t_ReposGenerateReleaseNotesBodySchema>(
    reposGenerateReleaseNotesBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGenerateReleaseNotesParamSchema,
      void,
      t_ReposGenerateReleaseNotesBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGenerateReleaseNotes

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGenerateReleaseNotes
  }
)

const reposGetLatestReleaseParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetLatestRelease",
  "/repos/:owner/:repo/releases/latest",
  paramValidationFactory<t_ReposGetLatestReleaseParamSchema>(
    reposGetLatestReleaseParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetLatestReleaseParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetLatestRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetLatestRelease
  }
)

const reposGetReleaseByTagParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  tag: z.coerce.string(),
})

router.get(
  "reposGetReleaseByTag",
  "/repos/:owner/:repo/releases/tags/:tag",
  paramValidationFactory<t_ReposGetReleaseByTagParamSchema>(
    reposGetReleaseByTagParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetReleaseByTagParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetReleaseByTag

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetReleaseByTag
  }
)

const reposGetReleaseParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  release_id: z.coerce.number(),
})

router.get(
  "reposGetRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  paramValidationFactory<t_ReposGetReleaseParamSchema>(
    reposGetReleaseParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetReleaseParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetRelease
  }
)

const reposUpdateReleaseParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  release_id: z.coerce.number(),
})

const reposUpdateReleaseBodySchema = z
  .object({
    tag_name: z.coerce.string().optional(),
    target_commitish: z.coerce.string().optional(),
    name: z.coerce.string().optional(),
    body: z.coerce.string().optional(),
    draft: z.coerce.boolean().optional(),
    prerelease: z.coerce.boolean().optional(),
    make_latest: z.coerce.string().optional(),
    discussion_category_name: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "reposUpdateRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  paramValidationFactory<t_ReposUpdateReleaseParamSchema>(
    reposUpdateReleaseParamSchema
  ),
  bodyValidationFactory<t_ReposUpdateReleaseBodySchema>(
    reposUpdateReleaseBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUpdateReleaseParamSchema,
      void,
      t_ReposUpdateReleaseBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUpdateRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateRelease
  }
)

const reposDeleteReleaseParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  release_id: z.coerce.number(),
})

router.delete(
  "reposDeleteRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  paramValidationFactory<t_ReposDeleteReleaseParamSchema>(
    reposDeleteReleaseParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteReleaseParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteRelease
  }
)

const reposListReleaseAssetsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  release_id: z.coerce.number(),
})

const reposListReleaseAssetsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListReleaseAssets",
  "/repos/:owner/:repo/releases/:releaseId/assets",
  paramValidationFactory<t_ReposListReleaseAssetsParamSchema>(
    reposListReleaseAssetsParamSchema
  ),
  queryValidationFactory<t_ReposListReleaseAssetsQuerySchema>(
    reposListReleaseAssetsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListReleaseAssetsParamSchema,
      t_ReposListReleaseAssetsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListReleaseAssets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListReleaseAssets
  }
)

const reposUploadReleaseAssetParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  release_id: z.coerce.number(),
})

const reposUploadReleaseAssetQuerySchema = z.object({
  name: z.coerce.string(),
  label: z.coerce.string().optional(),
})

const reposUploadReleaseAssetBodySchema = z.coerce.string().optional()

router.post(
  "reposUploadReleaseAsset",
  "/repos/:owner/:repo/releases/:releaseId/assets",
  paramValidationFactory<t_ReposUploadReleaseAssetParamSchema>(
    reposUploadReleaseAssetParamSchema
  ),
  queryValidationFactory<t_ReposUploadReleaseAssetQuerySchema>(
    reposUploadReleaseAssetQuerySchema
  ),
  bodyValidationFactory<t_ReposUploadReleaseAssetBodySchema>(
    reposUploadReleaseAssetBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposUploadReleaseAssetParamSchema,
      t_ReposUploadReleaseAssetQuerySchema,
      t_ReposUploadReleaseAssetBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposUploadReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUploadReleaseAsset
  }
)

const reactionsListForReleaseParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  release_id: z.coerce.number(),
})

const reactionsListForReleaseQuerySchema = z.object({
  content: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reactionsListForRelease",
  "/repos/:owner/:repo/releases/:releaseId/reactions",
  paramValidationFactory<t_ReactionsListForReleaseParamSchema>(
    reactionsListForReleaseParamSchema
  ),
  queryValidationFactory<t_ReactionsListForReleaseQuerySchema>(
    reactionsListForReleaseQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsListForReleaseParamSchema,
      t_ReactionsListForReleaseQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsListForRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForRelease
  }
)

const reactionsCreateForReleaseParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  release_id: z.coerce.number(),
})

const reactionsCreateForReleaseBodySchema = z.object({
  content: z.coerce.string(),
})

router.post(
  "reactionsCreateForRelease",
  "/repos/:owner/:repo/releases/:releaseId/reactions",
  paramValidationFactory<t_ReactionsCreateForReleaseParamSchema>(
    reactionsCreateForReleaseParamSchema
  ),
  bodyValidationFactory<t_ReactionsCreateForReleaseBodySchema>(
    reactionsCreateForReleaseBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsCreateForReleaseParamSchema,
      void,
      t_ReactionsCreateForReleaseBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsCreateForRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForRelease
  }
)

const reactionsDeleteForReleaseParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  release_id: z.coerce.number(),
  reaction_id: z.coerce.number(),
})

router.delete(
  "reactionsDeleteForRelease",
  "/repos/:owner/:repo/releases/:releaseId/reactions/:reactionId",
  paramValidationFactory<t_ReactionsDeleteForReleaseParamSchema>(
    reactionsDeleteForReleaseParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReactionsDeleteForReleaseParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reactionsDeleteForRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForRelease
  }
)

const secretScanningListAlertsForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const secretScanningListAlertsForRepoQuerySchema = z.object({
  state: z.coerce.string().optional(),
  secret_type: z.coerce.string().optional(),
  resolution: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
  before: z.coerce.string().optional(),
  after: z.coerce.string().optional(),
})

router.get(
  "secretScanningListAlertsForRepo",
  "/repos/:owner/:repo/secret-scanning/alerts",
  paramValidationFactory<t_SecretScanningListAlertsForRepoParamSchema>(
    secretScanningListAlertsForRepoParamSchema
  ),
  queryValidationFactory<t_SecretScanningListAlertsForRepoQuerySchema>(
    secretScanningListAlertsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_SecretScanningListAlertsForRepoParamSchema,
      t_SecretScanningListAlertsForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-secretScanningListAlertsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-secretScanningListAlertsForRepo
  }
)

const secretScanningGetAlertParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  alert_number: z.coerce.number(),
})

router.get(
  "secretScanningGetAlert",
  "/repos/:owner/:repo/secret-scanning/alerts/:alertNumber",
  paramValidationFactory<t_SecretScanningGetAlertParamSchema>(
    secretScanningGetAlertParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_SecretScanningGetAlertParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-secretScanningGetAlert

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-secretScanningGetAlert
  }
)

const secretScanningUpdateAlertParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  alert_number: z.coerce.number(),
})

const secretScanningUpdateAlertBodySchema = z.object({
  state: z.coerce.string(),
  resolution: z.coerce.string().optional(),
  resolution_comment: z.coerce.string().optional(),
})

router.patch(
  "secretScanningUpdateAlert",
  "/repos/:owner/:repo/secret-scanning/alerts/:alertNumber",
  paramValidationFactory<t_SecretScanningUpdateAlertParamSchema>(
    secretScanningUpdateAlertParamSchema
  ),
  bodyValidationFactory<t_SecretScanningUpdateAlertBodySchema>(
    secretScanningUpdateAlertBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_SecretScanningUpdateAlertParamSchema,
      void,
      t_SecretScanningUpdateAlertBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-secretScanningUpdateAlert

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-secretScanningUpdateAlert
  }
)

const secretScanningListLocationsForAlertParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  alert_number: z.coerce.number(),
})

const secretScanningListLocationsForAlertQuerySchema = z.object({
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "secretScanningListLocationsForAlert",
  "/repos/:owner/:repo/secret-scanning/alerts/:alertNumber/locations",
  paramValidationFactory<t_SecretScanningListLocationsForAlertParamSchema>(
    secretScanningListLocationsForAlertParamSchema
  ),
  queryValidationFactory<t_SecretScanningListLocationsForAlertQuerySchema>(
    secretScanningListLocationsForAlertQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_SecretScanningListLocationsForAlertParamSchema,
      t_SecretScanningListLocationsForAlertQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-secretScanningListLocationsForAlert

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-secretScanningListLocationsForAlert
  }
)

const activityListStargazersForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const activityListStargazersForRepoQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListStargazersForRepo",
  "/repos/:owner/:repo/stargazers",
  paramValidationFactory<t_ActivityListStargazersForRepoParamSchema>(
    activityListStargazersForRepoParamSchema
  ),
  queryValidationFactory<t_ActivityListStargazersForRepoQuerySchema>(
    activityListStargazersForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListStargazersForRepoParamSchema,
      t_ActivityListStargazersForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListStargazersForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListStargazersForRepo
  }
)

const reposGetCodeFrequencyStatsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetCodeFrequencyStats",
  "/repos/:owner/:repo/stats/code_frequency",
  paramValidationFactory<t_ReposGetCodeFrequencyStatsParamSchema>(
    reposGetCodeFrequencyStatsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetCodeFrequencyStatsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetCodeFrequencyStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCodeFrequencyStats
  }
)

const reposGetCommitActivityStatsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetCommitActivityStats",
  "/repos/:owner/:repo/stats/commit_activity",
  paramValidationFactory<t_ReposGetCommitActivityStatsParamSchema>(
    reposGetCommitActivityStatsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetCommitActivityStatsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetCommitActivityStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommitActivityStats
  }
)

const reposGetContributorsStatsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetContributorsStats",
  "/repos/:owner/:repo/stats/contributors",
  paramValidationFactory<t_ReposGetContributorsStatsParamSchema>(
    reposGetContributorsStatsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetContributorsStatsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetContributorsStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetContributorsStats
  }
)

const reposGetParticipationStatsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetParticipationStats",
  "/repos/:owner/:repo/stats/participation",
  paramValidationFactory<t_ReposGetParticipationStatsParamSchema>(
    reposGetParticipationStatsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetParticipationStatsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetParticipationStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetParticipationStats
  }
)

const reposGetPunchCardStatsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetPunchCardStats",
  "/repos/:owner/:repo/stats/punch_card",
  paramValidationFactory<t_ReposGetPunchCardStatsParamSchema>(
    reposGetPunchCardStatsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetPunchCardStatsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetPunchCardStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPunchCardStats
  }
)

const reposCreateCommitStatusParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  sha: z.coerce.string(),
})

const reposCreateCommitStatusBodySchema = z.object({
  state: z.coerce.string(),
  target_url: z.coerce.string().optional(),
  description: z.coerce.string().optional(),
  context: z.coerce.string().optional(),
})

router.post(
  "reposCreateCommitStatus",
  "/repos/:owner/:repo/statuses/:sha",
  paramValidationFactory<t_ReposCreateCommitStatusParamSchema>(
    reposCreateCommitStatusParamSchema
  ),
  bodyValidationFactory<t_ReposCreateCommitStatusBodySchema>(
    reposCreateCommitStatusBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateCommitStatusParamSchema,
      void,
      t_ReposCreateCommitStatusBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateCommitStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateCommitStatus
  }
)

const activityListWatchersForRepoParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const activityListWatchersForRepoQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListWatchersForRepo",
  "/repos/:owner/:repo/subscribers",
  paramValidationFactory<t_ActivityListWatchersForRepoParamSchema>(
    activityListWatchersForRepoParamSchema
  ),
  queryValidationFactory<t_ActivityListWatchersForRepoQuerySchema>(
    activityListWatchersForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListWatchersForRepoParamSchema,
      t_ActivityListWatchersForRepoQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListWatchersForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListWatchersForRepo
  }
)

const activityGetRepoSubscriptionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "activityGetRepoSubscription",
  "/repos/:owner/:repo/subscription",
  paramValidationFactory<t_ActivityGetRepoSubscriptionParamSchema>(
    activityGetRepoSubscriptionParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActivityGetRepoSubscriptionParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-activityGetRepoSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityGetRepoSubscription
  }
)

const activitySetRepoSubscriptionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const activitySetRepoSubscriptionBodySchema = z
  .object({
    subscribed: z.coerce.boolean().optional(),
    ignored: z.coerce.boolean().optional(),
  })
  .optional()

router.put(
  "activitySetRepoSubscription",
  "/repos/:owner/:repo/subscription",
  paramValidationFactory<t_ActivitySetRepoSubscriptionParamSchema>(
    activitySetRepoSubscriptionParamSchema
  ),
  bodyValidationFactory<t_ActivitySetRepoSubscriptionBodySchema>(
    activitySetRepoSubscriptionBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivitySetRepoSubscriptionParamSchema,
      void,
      t_ActivitySetRepoSubscriptionBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-activitySetRepoSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activitySetRepoSubscription
  }
)

const activityDeleteRepoSubscriptionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.delete(
  "activityDeleteRepoSubscription",
  "/repos/:owner/:repo/subscription",
  paramValidationFactory<t_ActivityDeleteRepoSubscriptionParamSchema>(
    activityDeleteRepoSubscriptionParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActivityDeleteRepoSubscriptionParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-activityDeleteRepoSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityDeleteRepoSubscription
  }
)

const reposListTagsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListTagsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListTags",
  "/repos/:owner/:repo/tags",
  paramValidationFactory<t_ReposListTagsParamSchema>(reposListTagsParamSchema),
  queryValidationFactory<t_ReposListTagsQuerySchema>(reposListTagsQuerySchema),
  async (
    ctx: ValidatedCtx<
      t_ReposListTagsParamSchema,
      t_ReposListTagsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListTags

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListTags
  }
)

const reposListTagProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposListTagProtection",
  "/repos/:owner/:repo/tags/protection",
  paramValidationFactory<t_ReposListTagProtectionParamSchema>(
    reposListTagProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposListTagProtectionParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposListTagProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListTagProtection
  }
)

const reposCreateTagProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposCreateTagProtectionBodySchema = z.object({
  pattern: z.coerce.string(),
})

router.post(
  "reposCreateTagProtection",
  "/repos/:owner/:repo/tags/protection",
  paramValidationFactory<t_ReposCreateTagProtectionParamSchema>(
    reposCreateTagProtectionParamSchema
  ),
  bodyValidationFactory<t_ReposCreateTagProtectionBodySchema>(
    reposCreateTagProtectionBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateTagProtectionParamSchema,
      void,
      t_ReposCreateTagProtectionBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateTagProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateTagProtection
  }
)

const reposDeleteTagProtectionParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  tag_protection_id: z.coerce.number(),
})

router.delete(
  "reposDeleteTagProtection",
  "/repos/:owner/:repo/tags/protection/:tagProtectionId",
  paramValidationFactory<t_ReposDeleteTagProtectionParamSchema>(
    reposDeleteTagProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDeleteTagProtectionParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDeleteTagProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteTagProtection
  }
)

const reposDownloadTarballArchiveParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  ref: z.coerce.string(),
})

router.get(
  "reposDownloadTarballArchive",
  "/repos/:owner/:repo/tarball/:ref",
  paramValidationFactory<t_ReposDownloadTarballArchiveParamSchema>(
    reposDownloadTarballArchiveParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDownloadTarballArchiveParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDownloadTarballArchive

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDownloadTarballArchive
  }
)

const reposListTeamsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposListTeamsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListTeams",
  "/repos/:owner/:repo/teams",
  paramValidationFactory<t_ReposListTeamsParamSchema>(
    reposListTeamsParamSchema
  ),
  queryValidationFactory<t_ReposListTeamsQuerySchema>(
    reposListTeamsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListTeamsParamSchema,
      t_ReposListTeamsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListTeams

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListTeams
  }
)

const reposGetAllTopicsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposGetAllTopicsQuerySchema = z.object({
  page: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "reposGetAllTopics",
  "/repos/:owner/:repo/topics",
  paramValidationFactory<t_ReposGetAllTopicsParamSchema>(
    reposGetAllTopicsParamSchema
  ),
  queryValidationFactory<t_ReposGetAllTopicsQuerySchema>(
    reposGetAllTopicsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetAllTopicsParamSchema,
      t_ReposGetAllTopicsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetAllTopics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAllTopics
  }
)

const reposReplaceAllTopicsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposReplaceAllTopicsBodySchema = z.object({
  names: z.array(z.coerce.string().optional()),
})

router.put(
  "reposReplaceAllTopics",
  "/repos/:owner/:repo/topics",
  paramValidationFactory<t_ReposReplaceAllTopicsParamSchema>(
    reposReplaceAllTopicsParamSchema
  ),
  bodyValidationFactory<t_ReposReplaceAllTopicsBodySchema>(
    reposReplaceAllTopicsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposReplaceAllTopicsParamSchema,
      void,
      t_ReposReplaceAllTopicsBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposReplaceAllTopics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposReplaceAllTopics
  }
)

const reposGetClonesParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposGetClonesQuerySchema = z.object({
  per: z.coerce.string().optional(),
})

router.get(
  "reposGetClones",
  "/repos/:owner/:repo/traffic/clones",
  paramValidationFactory<t_ReposGetClonesParamSchema>(
    reposGetClonesParamSchema
  ),
  queryValidationFactory<t_ReposGetClonesQuerySchema>(
    reposGetClonesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposGetClonesParamSchema,
      t_ReposGetClonesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetClones

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetClones
  }
)

const reposGetTopPathsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetTopPaths",
  "/repos/:owner/:repo/traffic/popular/paths",
  paramValidationFactory<t_ReposGetTopPathsParamSchema>(
    reposGetTopPathsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetTopPathsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetTopPaths

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetTopPaths
  }
)

const reposGetTopReferrersParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposGetTopReferrers",
  "/repos/:owner/:repo/traffic/popular/referrers",
  paramValidationFactory<t_ReposGetTopReferrersParamSchema>(
    reposGetTopReferrersParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposGetTopReferrersParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposGetTopReferrers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetTopReferrers
  }
)

const reposGetViewsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposGetViewsQuerySchema = z.object({ per: z.coerce.string().optional() })

router.get(
  "reposGetViews",
  "/repos/:owner/:repo/traffic/views",
  paramValidationFactory<t_ReposGetViewsParamSchema>(reposGetViewsParamSchema),
  queryValidationFactory<t_ReposGetViewsQuerySchema>(reposGetViewsQuerySchema),
  async (
    ctx: ValidatedCtx<
      t_ReposGetViewsParamSchema,
      t_ReposGetViewsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposGetViews

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetViews
  }
)

const reposTransferParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const reposTransferBodySchema = z.object({
  new_owner: z.coerce.string(),
  new_name: z.coerce.string().optional(),
  team_ids: z.array(z.coerce.number().optional()).optional(),
})

router.post(
  "reposTransfer",
  "/repos/:owner/:repo/transfer",
  paramValidationFactory<t_ReposTransferParamSchema>(reposTransferParamSchema),
  bodyValidationFactory<t_ReposTransferBodySchema>(reposTransferBodySchema),
  async (
    ctx: ValidatedCtx<
      t_ReposTransferParamSchema,
      void,
      t_ReposTransferBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposTransfer

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposTransfer
  }
)

const reposCheckVulnerabilityAlertsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "reposCheckVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  paramValidationFactory<t_ReposCheckVulnerabilityAlertsParamSchema>(
    reposCheckVulnerabilityAlertsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposCheckVulnerabilityAlertsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposCheckVulnerabilityAlerts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCheckVulnerabilityAlerts
  }
)

const reposEnableVulnerabilityAlertsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.put(
  "reposEnableVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  paramValidationFactory<t_ReposEnableVulnerabilityAlertsParamSchema>(
    reposEnableVulnerabilityAlertsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposEnableVulnerabilityAlertsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposEnableVulnerabilityAlerts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposEnableVulnerabilityAlerts
  }
)

const reposDisableVulnerabilityAlertsParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.delete(
  "reposDisableVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  paramValidationFactory<t_ReposDisableVulnerabilityAlertsParamSchema>(
    reposDisableVulnerabilityAlertsParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDisableVulnerabilityAlertsParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDisableVulnerabilityAlerts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDisableVulnerabilityAlerts
  }
)

const reposDownloadZipballArchiveParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
  ref: z.coerce.string(),
})

router.get(
  "reposDownloadZipballArchive",
  "/repos/:owner/:repo/zipball/:ref",
  paramValidationFactory<t_ReposDownloadZipballArchiveParamSchema>(
    reposDownloadZipballArchiveParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ReposDownloadZipballArchiveParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposDownloadZipballArchive

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDownloadZipballArchive
  }
)

const reposCreateUsingTemplateParamSchema = z.object({
  template_owner: z.coerce.string(),
  template_repo: z.coerce.string(),
})

const reposCreateUsingTemplateBodySchema = z.object({
  owner: z.coerce.string().optional(),
  name: z.coerce.string(),
  description: z.coerce.string().optional(),
  include_all_branches: z.coerce.boolean().optional(),
  private: z.coerce.boolean().optional(),
})

router.post(
  "reposCreateUsingTemplate",
  "/repos/:templateOwner/:templateRepo/generate",
  paramValidationFactory<t_ReposCreateUsingTemplateParamSchema>(
    reposCreateUsingTemplateParamSchema
  ),
  bodyValidationFactory<t_ReposCreateUsingTemplateBodySchema>(
    reposCreateUsingTemplateBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposCreateUsingTemplateParamSchema,
      void,
      t_ReposCreateUsingTemplateBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateUsingTemplate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateUsingTemplate
  }
)

const reposListPublicQuerySchema = z.object({
  since: z.coerce.number().optional(),
})

router.get(
  "reposListPublic",
  "/repositories",
  queryValidationFactory<t_ReposListPublicQuerySchema>(
    reposListPublicQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_ReposListPublicQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposListPublic

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListPublic
  }
)

const actionsListEnvironmentSecretsParamSchema = z.object({
  repository_id: z.coerce.number(),
  environment_name: z.coerce.string(),
})

const actionsListEnvironmentSecretsQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListEnvironmentSecrets",
  "/repositories/:repositoryId/environments/:environmentName/secrets",
  paramValidationFactory<t_ActionsListEnvironmentSecretsParamSchema>(
    actionsListEnvironmentSecretsParamSchema
  ),
  queryValidationFactory<t_ActionsListEnvironmentSecretsQuerySchema>(
    actionsListEnvironmentSecretsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListEnvironmentSecretsParamSchema,
      t_ActionsListEnvironmentSecretsQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListEnvironmentSecrets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListEnvironmentSecrets
  }
)

const actionsGetEnvironmentPublicKeyParamSchema = z.object({
  repository_id: z.coerce.number(),
  environment_name: z.coerce.string(),
})

router.get(
  "actionsGetEnvironmentPublicKey",
  "/repositories/:repositoryId/environments/:environmentName/secrets/public-key",
  paramValidationFactory<t_ActionsGetEnvironmentPublicKeyParamSchema>(
    actionsGetEnvironmentPublicKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetEnvironmentPublicKeyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetEnvironmentPublicKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetEnvironmentPublicKey
  }
)

const actionsGetEnvironmentSecretParamSchema = z.object({
  repository_id: z.coerce.number(),
  environment_name: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.get(
  "actionsGetEnvironmentSecret",
  "/repositories/:repositoryId/environments/:environmentName/secrets/:secretName",
  paramValidationFactory<t_ActionsGetEnvironmentSecretParamSchema>(
    actionsGetEnvironmentSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetEnvironmentSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetEnvironmentSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetEnvironmentSecret
  }
)

const actionsCreateOrUpdateEnvironmentSecretParamSchema = z.object({
  repository_id: z.coerce.number(),
  environment_name: z.coerce.string(),
  secret_name: z.coerce.string(),
})

const actionsCreateOrUpdateEnvironmentSecretBodySchema = z.object({
  encrypted_value: z.coerce.string(),
  key_id: z.coerce.string(),
})

router.put(
  "actionsCreateOrUpdateEnvironmentSecret",
  "/repositories/:repositoryId/environments/:environmentName/secrets/:secretName",
  paramValidationFactory<t_ActionsCreateOrUpdateEnvironmentSecretParamSchema>(
    actionsCreateOrUpdateEnvironmentSecretParamSchema
  ),
  bodyValidationFactory<t_ActionsCreateOrUpdateEnvironmentSecretBodySchema>(
    actionsCreateOrUpdateEnvironmentSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsCreateOrUpdateEnvironmentSecretParamSchema,
      void,
      t_ActionsCreateOrUpdateEnvironmentSecretBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateOrUpdateEnvironmentSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateOrUpdateEnvironmentSecret
  }
)

const actionsDeleteEnvironmentSecretParamSchema = z.object({
  repository_id: z.coerce.number(),
  environment_name: z.coerce.string(),
  secret_name: z.coerce.string(),
})

router.delete(
  "actionsDeleteEnvironmentSecret",
  "/repositories/:repositoryId/environments/:environmentName/secrets/:secretName",
  paramValidationFactory<t_ActionsDeleteEnvironmentSecretParamSchema>(
    actionsDeleteEnvironmentSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsDeleteEnvironmentSecretParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteEnvironmentSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteEnvironmentSecret
  }
)

const actionsListEnvironmentVariablesParamSchema = z.object({
  repository_id: z.coerce.number(),
  environment_name: z.coerce.string(),
})

const actionsListEnvironmentVariablesQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "actionsListEnvironmentVariables",
  "/repositories/:repositoryId/environments/:environmentName/variables",
  paramValidationFactory<t_ActionsListEnvironmentVariablesParamSchema>(
    actionsListEnvironmentVariablesParamSchema
  ),
  queryValidationFactory<t_ActionsListEnvironmentVariablesQuerySchema>(
    actionsListEnvironmentVariablesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsListEnvironmentVariablesParamSchema,
      t_ActionsListEnvironmentVariablesQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsListEnvironmentVariables

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListEnvironmentVariables
  }
)

const actionsCreateEnvironmentVariableParamSchema = z.object({
  repository_id: z.coerce.number(),
  environment_name: z.coerce.string(),
})

const actionsCreateEnvironmentVariableBodySchema = z.object({
  name: z.coerce.string(),
  value: z.coerce.string(),
})

router.post(
  "actionsCreateEnvironmentVariable",
  "/repositories/:repositoryId/environments/:environmentName/variables",
  paramValidationFactory<t_ActionsCreateEnvironmentVariableParamSchema>(
    actionsCreateEnvironmentVariableParamSchema
  ),
  bodyValidationFactory<t_ActionsCreateEnvironmentVariableBodySchema>(
    actionsCreateEnvironmentVariableBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsCreateEnvironmentVariableParamSchema,
      void,
      t_ActionsCreateEnvironmentVariableBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsCreateEnvironmentVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateEnvironmentVariable
  }
)

const actionsGetEnvironmentVariableParamSchema = z.object({
  repository_id: z.coerce.number(),
  environment_name: z.coerce.string(),
  name: z.coerce.string(),
})

router.get(
  "actionsGetEnvironmentVariable",
  "/repositories/:repositoryId/environments/:environmentName/variables/:name",
  paramValidationFactory<t_ActionsGetEnvironmentVariableParamSchema>(
    actionsGetEnvironmentVariableParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_ActionsGetEnvironmentVariableParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-actionsGetEnvironmentVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetEnvironmentVariable
  }
)

const actionsUpdateEnvironmentVariableParamSchema = z.object({
  repository_id: z.coerce.number(),
  environment_name: z.coerce.string(),
  name: z.coerce.string(),
})

const actionsUpdateEnvironmentVariableBodySchema = z.object({
  name: z.coerce.string().optional(),
  value: z.coerce.string().optional(),
})

router.patch(
  "actionsUpdateEnvironmentVariable",
  "/repositories/:repositoryId/environments/:environmentName/variables/:name",
  paramValidationFactory<t_ActionsUpdateEnvironmentVariableParamSchema>(
    actionsUpdateEnvironmentVariableParamSchema
  ),
  bodyValidationFactory<t_ActionsUpdateEnvironmentVariableBodySchema>(
    actionsUpdateEnvironmentVariableBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsUpdateEnvironmentVariableParamSchema,
      void,
      t_ActionsUpdateEnvironmentVariableBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsUpdateEnvironmentVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsUpdateEnvironmentVariable
  }
)

const actionsDeleteEnvironmentVariableParamSchema = z.object({
  repository_id: z.coerce.number(),
  environment_name: z.coerce.string(),
  name: z.coerce.string(),
})

router.delete(
  "actionsDeleteEnvironmentVariable",
  "/repositories/:repositoryId/environments/:environmentName/variables/:name",
  paramValidationFactory<t_ActionsDeleteEnvironmentVariableParamSchema>(
    actionsDeleteEnvironmentVariableParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActionsDeleteEnvironmentVariableParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-actionsDeleteEnvironmentVariable

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteEnvironmentVariable
  }
)

const searchCodeQuerySchema = z.object({
  q: z.coerce.string(),
  sort: z.coerce.string().optional(),
  order: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "searchCode",
  "/search/code",
  queryValidationFactory<t_SearchCodeQuerySchema>(searchCodeQuerySchema),
  async (
    ctx: ValidatedCtx<void, t_SearchCodeQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-searchCode

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchCode
  }
)

const searchCommitsQuerySchema = z.object({
  q: z.coerce.string(),
  sort: z.coerce.string().optional(),
  order: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "searchCommits",
  "/search/commits",
  queryValidationFactory<t_SearchCommitsQuerySchema>(searchCommitsQuerySchema),
  async (
    ctx: ValidatedCtx<void, t_SearchCommitsQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-searchCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchCommits
  }
)

const searchIssuesAndPullRequestsQuerySchema = z.object({
  q: z.coerce.string(),
  sort: z.coerce.string().optional(),
  order: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "searchIssuesAndPullRequests",
  "/search/issues",
  queryValidationFactory<t_SearchIssuesAndPullRequestsQuerySchema>(
    searchIssuesAndPullRequestsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_SearchIssuesAndPullRequestsQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-searchIssuesAndPullRequests

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchIssuesAndPullRequests
  }
)

const searchLabelsQuerySchema = z.object({
  repository_id: z.coerce.number(),
  q: z.coerce.string(),
  sort: z.coerce.string().optional(),
  order: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "searchLabels",
  "/search/labels",
  queryValidationFactory<t_SearchLabelsQuerySchema>(searchLabelsQuerySchema),
  async (
    ctx: ValidatedCtx<void, t_SearchLabelsQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-searchLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchLabels
  }
)

const searchReposQuerySchema = z.object({
  q: z.coerce.string(),
  sort: z.coerce.string().optional(),
  order: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "searchRepos",
  "/search/repositories",
  queryValidationFactory<t_SearchReposQuerySchema>(searchReposQuerySchema),
  async (
    ctx: ValidatedCtx<void, t_SearchReposQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-searchRepos

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchRepos
  }
)

const searchTopicsQuerySchema = z.object({
  q: z.coerce.string(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "searchTopics",
  "/search/topics",
  queryValidationFactory<t_SearchTopicsQuerySchema>(searchTopicsQuerySchema),
  async (
    ctx: ValidatedCtx<void, t_SearchTopicsQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-searchTopics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchTopics
  }
)

const searchUsersQuerySchema = z.object({
  q: z.coerce.string(),
  sort: z.coerce.string().optional(),
  order: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "searchUsers",
  "/search/users",
  queryValidationFactory<t_SearchUsersQuerySchema>(searchUsersQuerySchema),
  async (
    ctx: ValidatedCtx<void, t_SearchUsersQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-searchUsers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchUsers
  }
)

const teamsGetLegacyParamSchema = z.object({ team_id: z.coerce.number() })

router.get(
  "teamsGetLegacy",
  "/teams/:teamId",
  paramValidationFactory<t_TeamsGetLegacyParamSchema>(
    teamsGetLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsGetLegacyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsGetLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetLegacy
  }
)

const teamsUpdateLegacyParamSchema = z.object({ team_id: z.coerce.number() })

const teamsUpdateLegacyBodySchema = z.object({
  name: z.coerce.string(),
  description: z.coerce.string().optional(),
  privacy: z.coerce.string().optional(),
  permission: z.coerce.string().optional(),
  parent_team_id: z.coerce.number().optional(),
})

router.patch(
  "teamsUpdateLegacy",
  "/teams/:teamId",
  paramValidationFactory<t_TeamsUpdateLegacyParamSchema>(
    teamsUpdateLegacyParamSchema
  ),
  bodyValidationFactory<t_TeamsUpdateLegacyBodySchema>(
    teamsUpdateLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsUpdateLegacyParamSchema,
      void,
      t_TeamsUpdateLegacyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsUpdateLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateLegacy
  }
)

const teamsDeleteLegacyParamSchema = z.object({ team_id: z.coerce.number() })

router.delete(
  "teamsDeleteLegacy",
  "/teams/:teamId",
  paramValidationFactory<t_TeamsDeleteLegacyParamSchema>(
    teamsDeleteLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsDeleteLegacyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsDeleteLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteLegacy
  }
)

const teamsListDiscussionsLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
})

const teamsListDiscussionsLegacyQuerySchema = z.object({
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListDiscussionsLegacy",
  "/teams/:teamId/discussions",
  paramValidationFactory<t_TeamsListDiscussionsLegacyParamSchema>(
    teamsListDiscussionsLegacyParamSchema
  ),
  queryValidationFactory<t_TeamsListDiscussionsLegacyQuerySchema>(
    teamsListDiscussionsLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListDiscussionsLegacyParamSchema,
      t_TeamsListDiscussionsLegacyQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListDiscussionsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionsLegacy
  }
)

const teamsCreateDiscussionLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
})

const teamsCreateDiscussionLegacyBodySchema = z.object({
  title: z.coerce.string(),
  body: z.coerce.string(),
  private: z.coerce.boolean().optional(),
})

router.post(
  "teamsCreateDiscussionLegacy",
  "/teams/:teamId/discussions",
  paramValidationFactory<t_TeamsCreateDiscussionLegacyParamSchema>(
    teamsCreateDiscussionLegacyParamSchema
  ),
  bodyValidationFactory<t_TeamsCreateDiscussionLegacyBodySchema>(
    teamsCreateDiscussionLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsCreateDiscussionLegacyParamSchema,
      void,
      t_TeamsCreateDiscussionLegacyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsCreateDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionLegacy
  }
)

const teamsGetDiscussionLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
})

router.get(
  "teamsGetDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  paramValidationFactory<t_TeamsGetDiscussionLegacyParamSchema>(
    teamsGetDiscussionLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsGetDiscussionLegacyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsGetDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionLegacy
  }
)

const teamsUpdateDiscussionLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
})

const teamsUpdateDiscussionLegacyBodySchema = z
  .object({
    title: z.coerce.string().optional(),
    body: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "teamsUpdateDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  paramValidationFactory<t_TeamsUpdateDiscussionLegacyParamSchema>(
    teamsUpdateDiscussionLegacyParamSchema
  ),
  bodyValidationFactory<t_TeamsUpdateDiscussionLegacyBodySchema>(
    teamsUpdateDiscussionLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsUpdateDiscussionLegacyParamSchema,
      void,
      t_TeamsUpdateDiscussionLegacyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsUpdateDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionLegacy
  }
)

const teamsDeleteDiscussionLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
})

router.delete(
  "teamsDeleteDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  paramValidationFactory<t_TeamsDeleteDiscussionLegacyParamSchema>(
    teamsDeleteDiscussionLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsDeleteDiscussionLegacyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsDeleteDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionLegacy
  }
)

const teamsListDiscussionCommentsLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
})

const teamsListDiscussionCommentsLegacyQuerySchema = z.object({
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListDiscussionCommentsLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments",
  paramValidationFactory<t_TeamsListDiscussionCommentsLegacyParamSchema>(
    teamsListDiscussionCommentsLegacyParamSchema
  ),
  queryValidationFactory<t_TeamsListDiscussionCommentsLegacyQuerySchema>(
    teamsListDiscussionCommentsLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListDiscussionCommentsLegacyParamSchema,
      t_TeamsListDiscussionCommentsLegacyQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListDiscussionCommentsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionCommentsLegacy
  }
)

const teamsCreateDiscussionCommentLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
})

const teamsCreateDiscussionCommentLegacyBodySchema = z.object({
  body: z.coerce.string(),
})

router.post(
  "teamsCreateDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments",
  paramValidationFactory<t_TeamsCreateDiscussionCommentLegacyParamSchema>(
    teamsCreateDiscussionCommentLegacyParamSchema
  ),
  bodyValidationFactory<t_TeamsCreateDiscussionCommentLegacyBodySchema>(
    teamsCreateDiscussionCommentLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsCreateDiscussionCommentLegacyParamSchema,
      void,
      t_TeamsCreateDiscussionCommentLegacyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsCreateDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionCommentLegacy
  }
)

const teamsGetDiscussionCommentLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
  comment_number: z.coerce.number(),
})

router.get(
  "teamsGetDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<t_TeamsGetDiscussionCommentLegacyParamSchema>(
    teamsGetDiscussionCommentLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsGetDiscussionCommentLegacyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsGetDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionCommentLegacy
  }
)

const teamsUpdateDiscussionCommentLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
  comment_number: z.coerce.number(),
})

const teamsUpdateDiscussionCommentLegacyBodySchema = z.object({
  body: z.coerce.string(),
})

router.patch(
  "teamsUpdateDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<t_TeamsUpdateDiscussionCommentLegacyParamSchema>(
    teamsUpdateDiscussionCommentLegacyParamSchema
  ),
  bodyValidationFactory<t_TeamsUpdateDiscussionCommentLegacyBodySchema>(
    teamsUpdateDiscussionCommentLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsUpdateDiscussionCommentLegacyParamSchema,
      void,
      t_TeamsUpdateDiscussionCommentLegacyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsUpdateDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionCommentLegacy
  }
)

const teamsDeleteDiscussionCommentLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
  comment_number: z.coerce.number(),
})

router.delete(
  "teamsDeleteDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<t_TeamsDeleteDiscussionCommentLegacyParamSchema>(
    teamsDeleteDiscussionCommentLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsDeleteDiscussionCommentLegacyParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsDeleteDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionCommentLegacy
  }
)

const reactionsListForTeamDiscussionCommentLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
  comment_number: z.coerce.number(),
})

const reactionsListForTeamDiscussionCommentLegacyQuerySchema = z.object({
  content: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reactionsListForTeamDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<t_ReactionsListForTeamDiscussionCommentLegacyParamSchema>(
    reactionsListForTeamDiscussionCommentLegacyParamSchema
  ),
  queryValidationFactory<t_ReactionsListForTeamDiscussionCommentLegacyQuerySchema>(
    reactionsListForTeamDiscussionCommentLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsListForTeamDiscussionCommentLegacyParamSchema,
      t_ReactionsListForTeamDiscussionCommentLegacyQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsListForTeamDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionCommentLegacy
  }
)

const reactionsCreateForTeamDiscussionCommentLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
  comment_number: z.coerce.number(),
})

const reactionsCreateForTeamDiscussionCommentLegacyBodySchema = z.object({
  content: z.coerce.string(),
})

router.post(
  "reactionsCreateForTeamDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<t_ReactionsCreateForTeamDiscussionCommentLegacyParamSchema>(
    reactionsCreateForTeamDiscussionCommentLegacyParamSchema
  ),
  bodyValidationFactory<t_ReactionsCreateForTeamDiscussionCommentLegacyBodySchema>(
    reactionsCreateForTeamDiscussionCommentLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsCreateForTeamDiscussionCommentLegacyParamSchema,
      void,
      t_ReactionsCreateForTeamDiscussionCommentLegacyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionCommentLegacy
  }
)

const reactionsListForTeamDiscussionLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
})

const reactionsListForTeamDiscussionLegacyQuerySchema = z.object({
  content: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reactionsListForTeamDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber/reactions",
  paramValidationFactory<t_ReactionsListForTeamDiscussionLegacyParamSchema>(
    reactionsListForTeamDiscussionLegacyParamSchema
  ),
  queryValidationFactory<t_ReactionsListForTeamDiscussionLegacyQuerySchema>(
    reactionsListForTeamDiscussionLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsListForTeamDiscussionLegacyParamSchema,
      t_ReactionsListForTeamDiscussionLegacyQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsListForTeamDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionLegacy
  }
)

const reactionsCreateForTeamDiscussionLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  discussion_number: z.coerce.number(),
})

const reactionsCreateForTeamDiscussionLegacyBodySchema = z.object({
  content: z.coerce.string(),
})

router.post(
  "reactionsCreateForTeamDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber/reactions",
  paramValidationFactory<t_ReactionsCreateForTeamDiscussionLegacyParamSchema>(
    reactionsCreateForTeamDiscussionLegacyParamSchema
  ),
  bodyValidationFactory<t_ReactionsCreateForTeamDiscussionLegacyBodySchema>(
    reactionsCreateForTeamDiscussionLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReactionsCreateForTeamDiscussionLegacyParamSchema,
      void,
      t_ReactionsCreateForTeamDiscussionLegacyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionLegacy
  }
)

const teamsListPendingInvitationsLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
})

const teamsListPendingInvitationsLegacyQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListPendingInvitationsLegacy",
  "/teams/:teamId/invitations",
  paramValidationFactory<t_TeamsListPendingInvitationsLegacyParamSchema>(
    teamsListPendingInvitationsLegacyParamSchema
  ),
  queryValidationFactory<t_TeamsListPendingInvitationsLegacyQuerySchema>(
    teamsListPendingInvitationsLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListPendingInvitationsLegacyParamSchema,
      t_TeamsListPendingInvitationsLegacyQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListPendingInvitationsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListPendingInvitationsLegacy
  }
)

const teamsListMembersLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
})

const teamsListMembersLegacyQuerySchema = z.object({
  role: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListMembersLegacy",
  "/teams/:teamId/members",
  paramValidationFactory<t_TeamsListMembersLegacyParamSchema>(
    teamsListMembersLegacyParamSchema
  ),
  queryValidationFactory<t_TeamsListMembersLegacyQuerySchema>(
    teamsListMembersLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListMembersLegacyParamSchema,
      t_TeamsListMembersLegacyQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListMembersLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListMembersLegacy
  }
)

const teamsGetMemberLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  username: z.coerce.string(),
})

router.get(
  "teamsGetMemberLegacy",
  "/teams/:teamId/members/:username",
  paramValidationFactory<t_TeamsGetMemberLegacyParamSchema>(
    teamsGetMemberLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsGetMemberLegacyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsGetMemberLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetMemberLegacy
  }
)

const teamsAddMemberLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  username: z.coerce.string(),
})

router.put(
  "teamsAddMemberLegacy",
  "/teams/:teamId/members/:username",
  paramValidationFactory<t_TeamsAddMemberLegacyParamSchema>(
    teamsAddMemberLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsAddMemberLegacyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsAddMemberLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddMemberLegacy
  }
)

const teamsRemoveMemberLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  username: z.coerce.string(),
})

router.delete(
  "teamsRemoveMemberLegacy",
  "/teams/:teamId/members/:username",
  paramValidationFactory<t_TeamsRemoveMemberLegacyParamSchema>(
    teamsRemoveMemberLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsRemoveMemberLegacyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsRemoveMemberLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveMemberLegacy
  }
)

const teamsGetMembershipForUserLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  username: z.coerce.string(),
})

router.get(
  "teamsGetMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  paramValidationFactory<t_TeamsGetMembershipForUserLegacyParamSchema>(
    teamsGetMembershipForUserLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsGetMembershipForUserLegacyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsGetMembershipForUserLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetMembershipForUserLegacy
  }
)

const teamsAddOrUpdateMembershipForUserLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  username: z.coerce.string(),
})

const teamsAddOrUpdateMembershipForUserLegacyBodySchema = z
  .object({ role: z.coerce.string().optional() })
  .optional()

router.put(
  "teamsAddOrUpdateMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  paramValidationFactory<t_TeamsAddOrUpdateMembershipForUserLegacyParamSchema>(
    teamsAddOrUpdateMembershipForUserLegacyParamSchema
  ),
  bodyValidationFactory<t_TeamsAddOrUpdateMembershipForUserLegacyBodySchema>(
    teamsAddOrUpdateMembershipForUserLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsAddOrUpdateMembershipForUserLegacyParamSchema,
      void,
      t_TeamsAddOrUpdateMembershipForUserLegacyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateMembershipForUserLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateMembershipForUserLegacy
  }
)

const teamsRemoveMembershipForUserLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  username: z.coerce.string(),
})

router.delete(
  "teamsRemoveMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  paramValidationFactory<t_TeamsRemoveMembershipForUserLegacyParamSchema>(
    teamsRemoveMembershipForUserLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsRemoveMembershipForUserLegacyParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsRemoveMembershipForUserLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveMembershipForUserLegacy
  }
)

const teamsListProjectsLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
})

const teamsListProjectsLegacyQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListProjectsLegacy",
  "/teams/:teamId/projects",
  paramValidationFactory<t_TeamsListProjectsLegacyParamSchema>(
    teamsListProjectsLegacyParamSchema
  ),
  queryValidationFactory<t_TeamsListProjectsLegacyQuerySchema>(
    teamsListProjectsLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListProjectsLegacyParamSchema,
      t_TeamsListProjectsLegacyQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListProjectsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListProjectsLegacy
  }
)

const teamsCheckPermissionsForProjectLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  project_id: z.coerce.number(),
})

router.get(
  "teamsCheckPermissionsForProjectLegacy",
  "/teams/:teamId/projects/:projectId",
  paramValidationFactory<t_TeamsCheckPermissionsForProjectLegacyParamSchema>(
    teamsCheckPermissionsForProjectLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsCheckPermissionsForProjectLegacyParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsCheckPermissionsForProjectLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForProjectLegacy
  }
)

const teamsAddOrUpdateProjectPermissionsLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  project_id: z.coerce.number(),
})

const teamsAddOrUpdateProjectPermissionsLegacyBodySchema = z
  .object({ permission: z.coerce.string().optional() })
  .optional()

router.put(
  "teamsAddOrUpdateProjectPermissionsLegacy",
  "/teams/:teamId/projects/:projectId",
  paramValidationFactory<t_TeamsAddOrUpdateProjectPermissionsLegacyParamSchema>(
    teamsAddOrUpdateProjectPermissionsLegacyParamSchema
  ),
  bodyValidationFactory<t_TeamsAddOrUpdateProjectPermissionsLegacyBodySchema>(
    teamsAddOrUpdateProjectPermissionsLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsAddOrUpdateProjectPermissionsLegacyParamSchema,
      void,
      t_TeamsAddOrUpdateProjectPermissionsLegacyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateProjectPermissionsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateProjectPermissionsLegacy
  }
)

const teamsRemoveProjectLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  project_id: z.coerce.number(),
})

router.delete(
  "teamsRemoveProjectLegacy",
  "/teams/:teamId/projects/:projectId",
  paramValidationFactory<t_TeamsRemoveProjectLegacyParamSchema>(
    teamsRemoveProjectLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsRemoveProjectLegacyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsRemoveProjectLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveProjectLegacy
  }
)

const teamsListReposLegacyParamSchema = z.object({ team_id: z.coerce.number() })

const teamsListReposLegacyQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListReposLegacy",
  "/teams/:teamId/repos",
  paramValidationFactory<t_TeamsListReposLegacyParamSchema>(
    teamsListReposLegacyParamSchema
  ),
  queryValidationFactory<t_TeamsListReposLegacyQuerySchema>(
    teamsListReposLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListReposLegacyParamSchema,
      t_TeamsListReposLegacyQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListReposLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListReposLegacy
  }
)

const teamsCheckPermissionsForRepoLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "teamsCheckPermissionsForRepoLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  paramValidationFactory<t_TeamsCheckPermissionsForRepoLegacyParamSchema>(
    teamsCheckPermissionsForRepoLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsCheckPermissionsForRepoLegacyParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsCheckPermissionsForRepoLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForRepoLegacy
  }
)

const teamsAddOrUpdateRepoPermissionsLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

const teamsAddOrUpdateRepoPermissionsLegacyBodySchema = z
  .object({ permission: z.coerce.string().optional() })
  .optional()

router.put(
  "teamsAddOrUpdateRepoPermissionsLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  paramValidationFactory<t_TeamsAddOrUpdateRepoPermissionsLegacyParamSchema>(
    teamsAddOrUpdateRepoPermissionsLegacyParamSchema
  ),
  bodyValidationFactory<t_TeamsAddOrUpdateRepoPermissionsLegacyBodySchema>(
    teamsAddOrUpdateRepoPermissionsLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsAddOrUpdateRepoPermissionsLegacyParamSchema,
      void,
      t_TeamsAddOrUpdateRepoPermissionsLegacyBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateRepoPermissionsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateRepoPermissionsLegacy
  }
)

const teamsRemoveRepoLegacyParamSchema = z.object({
  team_id: z.coerce.number(),
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.delete(
  "teamsRemoveRepoLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  paramValidationFactory<t_TeamsRemoveRepoLegacyParamSchema>(
    teamsRemoveRepoLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_TeamsRemoveRepoLegacyParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsRemoveRepoLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveRepoLegacy
  }
)

const teamsListChildLegacyParamSchema = z.object({ team_id: z.coerce.number() })

const teamsListChildLegacyQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListChildLegacy",
  "/teams/:teamId/teams",
  paramValidationFactory<t_TeamsListChildLegacyParamSchema>(
    teamsListChildLegacyParamSchema
  ),
  queryValidationFactory<t_TeamsListChildLegacyQuerySchema>(
    teamsListChildLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_TeamsListChildLegacyParamSchema,
      t_TeamsListChildLegacyQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-teamsListChildLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListChildLegacy
  }
)

router.get(
  "usersGetAuthenticated",
  "/user",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-usersGetAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetAuthenticated
  }
)

const usersUpdateAuthenticatedBodySchema = z
  .object({
    name: z.coerce.string().optional(),
    email: z.coerce.string().optional(),
    blog: z.coerce.string().optional(),
    twitter_username: z.coerce.string().optional(),
    company: z.coerce.string().optional(),
    location: z.coerce.string().optional(),
    hireable: z.coerce.boolean().optional(),
    bio: z.coerce.string().optional(),
  })
  .optional()

router.patch(
  "usersUpdateAuthenticated",
  "/user",
  bodyValidationFactory<t_UsersUpdateAuthenticatedBodySchema>(
    usersUpdateAuthenticatedBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, t_UsersUpdateAuthenticatedBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-usersUpdateAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersUpdateAuthenticated
  }
)

const usersListBlockedByAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListBlockedByAuthenticatedUser",
  "/user/blocks",
  queryValidationFactory<t_UsersListBlockedByAuthenticatedUserQuerySchema>(
    usersListBlockedByAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_UsersListBlockedByAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListBlockedByAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListBlockedByAuthenticatedUser
  }
)

const usersCheckBlockedParamSchema = z.object({ username: z.coerce.string() })

router.get(
  "usersCheckBlocked",
  "/user/blocks/:username",
  paramValidationFactory<t_UsersCheckBlockedParamSchema>(
    usersCheckBlockedParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_UsersCheckBlockedParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-usersCheckBlocked

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCheckBlocked
  }
)

const usersBlockParamSchema = z.object({ username: z.coerce.string() })

router.put(
  "usersBlock",
  "/user/blocks/:username",
  paramValidationFactory<t_UsersBlockParamSchema>(usersBlockParamSchema),
  async (
    ctx: ValidatedCtx<t_UsersBlockParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-usersBlock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersBlock
  }
)

const usersUnblockParamSchema = z.object({ username: z.coerce.string() })

router.delete(
  "usersUnblock",
  "/user/blocks/:username",
  paramValidationFactory<t_UsersUnblockParamSchema>(usersUnblockParamSchema),
  async (
    ctx: ValidatedCtx<t_UsersUnblockParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-usersUnblock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersUnblock
  }
)

const codespacesListForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  repository_id: z.coerce.number().optional(),
})

router.get(
  "codespacesListForAuthenticatedUser",
  "/user/codespaces",
  queryValidationFactory<t_CodespacesListForAuthenticatedUserQuerySchema>(
    codespacesListForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_CodespacesListForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesListForAuthenticatedUser
  }
)

const codespacesCreateForAuthenticatedUserBodySchema = z.object({})

router.post(
  "codespacesCreateForAuthenticatedUser",
  "/user/codespaces",
  bodyValidationFactory<t_CodespacesCreateForAuthenticatedUserBodySchema>(
    codespacesCreateForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      t_CodespacesCreateForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesCreateForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesCreateForAuthenticatedUser
  }
)

const codespacesListSecretsForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "codespacesListSecretsForAuthenticatedUser",
  "/user/codespaces/secrets",
  queryValidationFactory<t_CodespacesListSecretsForAuthenticatedUserQuerySchema>(
    codespacesListSecretsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_CodespacesListSecretsForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesListSecretsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesListSecretsForAuthenticatedUser
  }
)

router.get(
  "codespacesGetPublicKeyForAuthenticatedUser",
  "/user/codespaces/secrets/public-key",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-codespacesGetPublicKeyForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesGetPublicKeyForAuthenticatedUser
  }
)

const codespacesGetSecretForAuthenticatedUserParamSchema = z.object({
  secret_name: z.coerce.string(),
})

router.get(
  "codespacesGetSecretForAuthenticatedUser",
  "/user/codespaces/secrets/:secretName",
  paramValidationFactory<t_CodespacesGetSecretForAuthenticatedUserParamSchema>(
    codespacesGetSecretForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesGetSecretForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesGetSecretForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesGetSecretForAuthenticatedUser
  }
)

const codespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema = z.object({
  secret_name: z.coerce.string(),
})

const codespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema = z.object({
  encrypted_value: z.coerce.string().optional(),
  key_id: z.coerce.string(),
  selected_repository_ids: z.array(z.coerce.string().optional()).optional(),
})

router.put(
  "codespacesCreateOrUpdateSecretForAuthenticatedUser",
  "/user/codespaces/secrets/:secretName",
  paramValidationFactory<t_CodespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema>(
    codespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema
  ),
  bodyValidationFactory<t_CodespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema>(
    codespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesCreateOrUpdateSecretForAuthenticatedUserParamSchema,
      void,
      t_CodespacesCreateOrUpdateSecretForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesCreateOrUpdateSecretForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesCreateOrUpdateSecretForAuthenticatedUser
  }
)

const codespacesDeleteSecretForAuthenticatedUserParamSchema = z.object({
  secret_name: z.coerce.string(),
})

router.delete(
  "codespacesDeleteSecretForAuthenticatedUser",
  "/user/codespaces/secrets/:secretName",
  paramValidationFactory<t_CodespacesDeleteSecretForAuthenticatedUserParamSchema>(
    codespacesDeleteSecretForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesDeleteSecretForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesDeleteSecretForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesDeleteSecretForAuthenticatedUser
  }
)

const codespacesListRepositoriesForSecretForAuthenticatedUserParamSchema =
  z.object({ secret_name: z.coerce.string() })

router.get(
  "codespacesListRepositoriesForSecretForAuthenticatedUser",
  "/user/codespaces/secrets/:secretName/repositories",
  paramValidationFactory<t_CodespacesListRepositoriesForSecretForAuthenticatedUserParamSchema>(
    codespacesListRepositoriesForSecretForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesListRepositoriesForSecretForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesListRepositoriesForSecretForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesListRepositoriesForSecretForAuthenticatedUser
  }
)

const codespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema =
  z.object({ secret_name: z.coerce.string() })

const codespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema =
  z.object({ selected_repository_ids: z.array(z.coerce.number().optional()) })

router.put(
  "codespacesSetRepositoriesForSecretForAuthenticatedUser",
  "/user/codespaces/secrets/:secretName/repositories",
  paramValidationFactory<t_CodespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema>(
    codespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema
  ),
  bodyValidationFactory<t_CodespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema>(
    codespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesSetRepositoriesForSecretForAuthenticatedUserParamSchema,
      void,
      t_CodespacesSetRepositoriesForSecretForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesSetRepositoriesForSecretForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesSetRepositoriesForSecretForAuthenticatedUser
  }
)

const codespacesAddRepositoryForSecretForAuthenticatedUserParamSchema =
  z.object({ secret_name: z.coerce.string(), repository_id: z.coerce.number() })

router.put(
  "codespacesAddRepositoryForSecretForAuthenticatedUser",
  "/user/codespaces/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<t_CodespacesAddRepositoryForSecretForAuthenticatedUserParamSchema>(
    codespacesAddRepositoryForSecretForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesAddRepositoryForSecretForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesAddRepositoryForSecretForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesAddRepositoryForSecretForAuthenticatedUser
  }
)

const codespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema =
  z.object({ secret_name: z.coerce.string(), repository_id: z.coerce.number() })

router.delete(
  "codespacesRemoveRepositoryForSecretForAuthenticatedUser",
  "/user/codespaces/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<t_CodespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema>(
    codespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesRemoveRepositoryForSecretForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesRemoveRepositoryForSecretForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesRemoveRepositoryForSecretForAuthenticatedUser
  }
)

const codespacesGetForAuthenticatedUserParamSchema = z.object({
  codespace_name: z.coerce.string(),
})

router.get(
  "codespacesGetForAuthenticatedUser",
  "/user/codespaces/:codespaceName",
  paramValidationFactory<t_CodespacesGetForAuthenticatedUserParamSchema>(
    codespacesGetForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesGetForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesGetForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesGetForAuthenticatedUser
  }
)

const codespacesUpdateForAuthenticatedUserParamSchema = z.object({
  codespace_name: z.coerce.string(),
})

const codespacesUpdateForAuthenticatedUserBodySchema = z
  .object({
    machine: z.coerce.string().optional(),
    display_name: z.coerce.string().optional(),
    recent_folders: z.array(z.coerce.string().optional()).optional(),
  })
  .optional()

router.patch(
  "codespacesUpdateForAuthenticatedUser",
  "/user/codespaces/:codespaceName",
  paramValidationFactory<t_CodespacesUpdateForAuthenticatedUserParamSchema>(
    codespacesUpdateForAuthenticatedUserParamSchema
  ),
  bodyValidationFactory<t_CodespacesUpdateForAuthenticatedUserBodySchema>(
    codespacesUpdateForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesUpdateForAuthenticatedUserParamSchema,
      void,
      t_CodespacesUpdateForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesUpdateForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesUpdateForAuthenticatedUser
  }
)

const codespacesDeleteForAuthenticatedUserParamSchema = z.object({
  codespace_name: z.coerce.string(),
})

router.delete(
  "codespacesDeleteForAuthenticatedUser",
  "/user/codespaces/:codespaceName",
  paramValidationFactory<t_CodespacesDeleteForAuthenticatedUserParamSchema>(
    codespacesDeleteForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesDeleteForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesDeleteForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesDeleteForAuthenticatedUser
  }
)

const codespacesExportForAuthenticatedUserParamSchema = z.object({
  codespace_name: z.coerce.string(),
})

router.post(
  "codespacesExportForAuthenticatedUser",
  "/user/codespaces/:codespaceName/exports",
  paramValidationFactory<t_CodespacesExportForAuthenticatedUserParamSchema>(
    codespacesExportForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesExportForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesExportForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesExportForAuthenticatedUser
  }
)

const codespacesGetExportDetailsForAuthenticatedUserParamSchema = z.object({
  codespace_name: z.coerce.string(),
  export_id: z.coerce.string(),
})

router.get(
  "codespacesGetExportDetailsForAuthenticatedUser",
  "/user/codespaces/:codespaceName/exports/:exportId",
  paramValidationFactory<t_CodespacesGetExportDetailsForAuthenticatedUserParamSchema>(
    codespacesGetExportDetailsForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesGetExportDetailsForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesGetExportDetailsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesGetExportDetailsForAuthenticatedUser
  }
)

const codespacesCodespaceMachinesForAuthenticatedUserParamSchema = z.object({
  codespace_name: z.coerce.string(),
})

router.get(
  "codespacesCodespaceMachinesForAuthenticatedUser",
  "/user/codespaces/:codespaceName/machines",
  paramValidationFactory<t_CodespacesCodespaceMachinesForAuthenticatedUserParamSchema>(
    codespacesCodespaceMachinesForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesCodespaceMachinesForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesCodespaceMachinesForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesCodespaceMachinesForAuthenticatedUser
  }
)

const codespacesPublishForAuthenticatedUserParamSchema = z.object({
  codespace_name: z.coerce.string(),
})

const codespacesPublishForAuthenticatedUserBodySchema = z.object({
  name: z.coerce.string().optional(),
  private: z.coerce.boolean().optional(),
})

router.post(
  "codespacesPublishForAuthenticatedUser",
  "/user/codespaces/:codespaceName/publish",
  paramValidationFactory<t_CodespacesPublishForAuthenticatedUserParamSchema>(
    codespacesPublishForAuthenticatedUserParamSchema
  ),
  bodyValidationFactory<t_CodespacesPublishForAuthenticatedUserBodySchema>(
    codespacesPublishForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesPublishForAuthenticatedUserParamSchema,
      void,
      t_CodespacesPublishForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesPublishForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesPublishForAuthenticatedUser
  }
)

const codespacesStartForAuthenticatedUserParamSchema = z.object({
  codespace_name: z.coerce.string(),
})

router.post(
  "codespacesStartForAuthenticatedUser",
  "/user/codespaces/:codespaceName/start",
  paramValidationFactory<t_CodespacesStartForAuthenticatedUserParamSchema>(
    codespacesStartForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesStartForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesStartForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesStartForAuthenticatedUser
  }
)

const codespacesStopForAuthenticatedUserParamSchema = z.object({
  codespace_name: z.coerce.string(),
})

router.post(
  "codespacesStopForAuthenticatedUser",
  "/user/codespaces/:codespaceName/stop",
  paramValidationFactory<t_CodespacesStopForAuthenticatedUserParamSchema>(
    codespacesStopForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_CodespacesStopForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-codespacesStopForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codespacesStopForAuthenticatedUser
  }
)

const usersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema = z.object({
  visibility: z.coerce.string(),
})

router.patch(
  "usersSetPrimaryEmailVisibilityForAuthenticatedUser",
  "/user/email/visibility",
  bodyValidationFactory<t_UsersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema>(
    usersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      t_UsersSetPrimaryEmailVisibilityForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersSetPrimaryEmailVisibilityForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersSetPrimaryEmailVisibilityForAuthenticatedUser
  }
)

const usersListEmailsForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListEmailsForAuthenticatedUser",
  "/user/emails",
  queryValidationFactory<t_UsersListEmailsForAuthenticatedUserQuerySchema>(
    usersListEmailsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_UsersListEmailsForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListEmailsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListEmailsForAuthenticatedUser
  }
)

const usersAddEmailForAuthenticatedUserBodySchema = z.object({}).optional()

router.post(
  "usersAddEmailForAuthenticatedUser",
  "/user/emails",
  bodyValidationFactory<t_UsersAddEmailForAuthenticatedUserBodySchema>(
    usersAddEmailForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      t_UsersAddEmailForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersAddEmailForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersAddEmailForAuthenticatedUser
  }
)

const usersDeleteEmailForAuthenticatedUserBodySchema = z.object({})

router.delete(
  "usersDeleteEmailForAuthenticatedUser",
  "/user/emails",
  bodyValidationFactory<t_UsersDeleteEmailForAuthenticatedUserBodySchema>(
    usersDeleteEmailForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      t_UsersDeleteEmailForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersDeleteEmailForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersDeleteEmailForAuthenticatedUser
  }
)

const usersListFollowersForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListFollowersForAuthenticatedUser",
  "/user/followers",
  queryValidationFactory<t_UsersListFollowersForAuthenticatedUserQuerySchema>(
    usersListFollowersForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_UsersListFollowersForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListFollowersForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowersForAuthenticatedUser
  }
)

const usersListFollowedByAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListFollowedByAuthenticatedUser",
  "/user/following",
  queryValidationFactory<t_UsersListFollowedByAuthenticatedUserQuerySchema>(
    usersListFollowedByAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_UsersListFollowedByAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListFollowedByAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowedByAuthenticatedUser
  }
)

const usersCheckPersonIsFollowedByAuthenticatedParamSchema = z.object({
  username: z.coerce.string(),
})

router.get(
  "usersCheckPersonIsFollowedByAuthenticated",
  "/user/following/:username",
  paramValidationFactory<t_UsersCheckPersonIsFollowedByAuthenticatedParamSchema>(
    usersCheckPersonIsFollowedByAuthenticatedParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersCheckPersonIsFollowedByAuthenticatedParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersCheckPersonIsFollowedByAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCheckPersonIsFollowedByAuthenticated
  }
)

const usersFollowParamSchema = z.object({ username: z.coerce.string() })

router.put(
  "usersFollow",
  "/user/following/:username",
  paramValidationFactory<t_UsersFollowParamSchema>(usersFollowParamSchema),
  async (
    ctx: ValidatedCtx<t_UsersFollowParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-usersFollow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersFollow
  }
)

const usersUnfollowParamSchema = z.object({ username: z.coerce.string() })

router.delete(
  "usersUnfollow",
  "/user/following/:username",
  paramValidationFactory<t_UsersUnfollowParamSchema>(usersUnfollowParamSchema),
  async (
    ctx: ValidatedCtx<t_UsersUnfollowParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-usersUnfollow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersUnfollow
  }
)

const usersListGpgKeysForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListGpgKeysForAuthenticatedUser",
  "/user/gpg_keys",
  queryValidationFactory<t_UsersListGpgKeysForAuthenticatedUserQuerySchema>(
    usersListGpgKeysForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_UsersListGpgKeysForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListGpgKeysForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListGpgKeysForAuthenticatedUser
  }
)

const usersCreateGpgKeyForAuthenticatedUserBodySchema = z.object({
  name: z.coerce.string().optional(),
  armored_public_key: z.coerce.string(),
})

router.post(
  "usersCreateGpgKeyForAuthenticatedUser",
  "/user/gpg_keys",
  bodyValidationFactory<t_UsersCreateGpgKeyForAuthenticatedUserBodySchema>(
    usersCreateGpgKeyForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      t_UsersCreateGpgKeyForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersCreateGpgKeyForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCreateGpgKeyForAuthenticatedUser
  }
)

const usersGetGpgKeyForAuthenticatedUserParamSchema = z.object({
  gpg_key_id: z.coerce.number(),
})

router.get(
  "usersGetGpgKeyForAuthenticatedUser",
  "/user/gpg_keys/:gpgKeyId",
  paramValidationFactory<t_UsersGetGpgKeyForAuthenticatedUserParamSchema>(
    usersGetGpgKeyForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersGetGpgKeyForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersGetGpgKeyForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetGpgKeyForAuthenticatedUser
  }
)

const usersDeleteGpgKeyForAuthenticatedUserParamSchema = z.object({
  gpg_key_id: z.coerce.number(),
})

router.delete(
  "usersDeleteGpgKeyForAuthenticatedUser",
  "/user/gpg_keys/:gpgKeyId",
  paramValidationFactory<t_UsersDeleteGpgKeyForAuthenticatedUserParamSchema>(
    usersDeleteGpgKeyForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersDeleteGpgKeyForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersDeleteGpgKeyForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersDeleteGpgKeyForAuthenticatedUser
  }
)

const appsListInstallationsForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "appsListInstallationsForAuthenticatedUser",
  "/user/installations",
  queryValidationFactory<t_AppsListInstallationsForAuthenticatedUserQuerySchema>(
    appsListInstallationsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_AppsListInstallationsForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsListInstallationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListInstallationsForAuthenticatedUser
  }
)

const appsListInstallationReposForAuthenticatedUserParamSchema = z.object({
  installation_id: z.coerce.number(),
})

const appsListInstallationReposForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "appsListInstallationReposForAuthenticatedUser",
  "/user/installations/:installationId/repositories",
  paramValidationFactory<t_AppsListInstallationReposForAuthenticatedUserParamSchema>(
    appsListInstallationReposForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_AppsListInstallationReposForAuthenticatedUserQuerySchema>(
    appsListInstallationReposForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_AppsListInstallationReposForAuthenticatedUserParamSchema,
      t_AppsListInstallationReposForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsListInstallationReposForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListInstallationReposForAuthenticatedUser
  }
)

const appsAddRepoToInstallationForAuthenticatedUserParamSchema = z.object({
  installation_id: z.coerce.number(),
  repository_id: z.coerce.number(),
})

router.put(
  "appsAddRepoToInstallationForAuthenticatedUser",
  "/user/installations/:installationId/repositories/:repositoryId",
  paramValidationFactory<t_AppsAddRepoToInstallationForAuthenticatedUserParamSchema>(
    appsAddRepoToInstallationForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_AppsAddRepoToInstallationForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsAddRepoToInstallationForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsAddRepoToInstallationForAuthenticatedUser
  }
)

const appsRemoveRepoFromInstallationForAuthenticatedUserParamSchema = z.object({
  installation_id: z.coerce.number(),
  repository_id: z.coerce.number(),
})

router.delete(
  "appsRemoveRepoFromInstallationForAuthenticatedUser",
  "/user/installations/:installationId/repositories/:repositoryId",
  paramValidationFactory<t_AppsRemoveRepoFromInstallationForAuthenticatedUserParamSchema>(
    appsRemoveRepoFromInstallationForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_AppsRemoveRepoFromInstallationForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsRemoveRepoFromInstallationForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsRemoveRepoFromInstallationForAuthenticatedUser
  }
)

router.get(
  "interactionsGetRestrictionsForAuthenticatedUser",
  "/user/interaction-limits",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-interactionsGetRestrictionsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsGetRestrictionsForAuthenticatedUser
  }
)

const interactionsSetRestrictionsForAuthenticatedUserBodySchema = z.object({
  limit: z.coerce.string(),
  expiry: z.coerce.string().optional(),
})

router.put(
  "interactionsSetRestrictionsForAuthenticatedUser",
  "/user/interaction-limits",
  bodyValidationFactory<t_InteractionsSetRestrictionsForAuthenticatedUserBodySchema>(
    interactionsSetRestrictionsForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      t_InteractionsSetRestrictionsForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-interactionsSetRestrictionsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsSetRestrictionsForAuthenticatedUser
  }
)

router.delete(
  "interactionsRemoveRestrictionsForAuthenticatedUser",
  "/user/interaction-limits",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-interactionsRemoveRestrictionsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsRemoveRestrictionsForAuthenticatedUser
  }
)

const issuesListForAuthenticatedUserQuerySchema = z.object({
  filter: z.coerce.string().optional(),
  state: z.coerce.string().optional(),
  labels: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  since: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "issuesListForAuthenticatedUser",
  "/user/issues",
  queryValidationFactory<t_IssuesListForAuthenticatedUserQuerySchema>(
    issuesListForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_IssuesListForAuthenticatedUserQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-issuesListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListForAuthenticatedUser
  }
)

const usersListPublicSshKeysForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListPublicSshKeysForAuthenticatedUser",
  "/user/keys",
  queryValidationFactory<t_UsersListPublicSshKeysForAuthenticatedUserQuerySchema>(
    usersListPublicSshKeysForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_UsersListPublicSshKeysForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListPublicSshKeysForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListPublicSshKeysForAuthenticatedUser
  }
)

const usersCreatePublicSshKeyForAuthenticatedUserBodySchema = z.object({
  title: z.coerce.string().optional(),
  key: z.coerce.string(),
})

router.post(
  "usersCreatePublicSshKeyForAuthenticatedUser",
  "/user/keys",
  bodyValidationFactory<t_UsersCreatePublicSshKeyForAuthenticatedUserBodySchema>(
    usersCreatePublicSshKeyForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      t_UsersCreatePublicSshKeyForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersCreatePublicSshKeyForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCreatePublicSshKeyForAuthenticatedUser
  }
)

const usersGetPublicSshKeyForAuthenticatedUserParamSchema = z.object({
  key_id: z.coerce.number(),
})

router.get(
  "usersGetPublicSshKeyForAuthenticatedUser",
  "/user/keys/:keyId",
  paramValidationFactory<t_UsersGetPublicSshKeyForAuthenticatedUserParamSchema>(
    usersGetPublicSshKeyForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersGetPublicSshKeyForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersGetPublicSshKeyForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetPublicSshKeyForAuthenticatedUser
  }
)

const usersDeletePublicSshKeyForAuthenticatedUserParamSchema = z.object({
  key_id: z.coerce.number(),
})

router.delete(
  "usersDeletePublicSshKeyForAuthenticatedUser",
  "/user/keys/:keyId",
  paramValidationFactory<t_UsersDeletePublicSshKeyForAuthenticatedUserParamSchema>(
    usersDeletePublicSshKeyForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersDeletePublicSshKeyForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersDeletePublicSshKeyForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersDeletePublicSshKeyForAuthenticatedUser
  }
)

const appsListSubscriptionsForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "appsListSubscriptionsForAuthenticatedUser",
  "/user/marketplace_purchases",
  queryValidationFactory<t_AppsListSubscriptionsForAuthenticatedUserQuerySchema>(
    appsListSubscriptionsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_AppsListSubscriptionsForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsListSubscriptionsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListSubscriptionsForAuthenticatedUser
  }
)

const appsListSubscriptionsForAuthenticatedUserStubbedQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "appsListSubscriptionsForAuthenticatedUserStubbed",
  "/user/marketplace_purchases/stubbed",
  queryValidationFactory<t_AppsListSubscriptionsForAuthenticatedUserStubbedQuerySchema>(
    appsListSubscriptionsForAuthenticatedUserStubbedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_AppsListSubscriptionsForAuthenticatedUserStubbedQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-appsListSubscriptionsForAuthenticatedUserStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListSubscriptionsForAuthenticatedUserStubbed
  }
)

const orgsListMembershipsForAuthenticatedUserQuerySchema = z.object({
  state: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListMembershipsForAuthenticatedUser",
  "/user/memberships/orgs",
  queryValidationFactory<t_OrgsListMembershipsForAuthenticatedUserQuerySchema>(
    orgsListMembershipsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_OrgsListMembershipsForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListMembershipsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListMembershipsForAuthenticatedUser
  }
)

const orgsGetMembershipForAuthenticatedUserParamSchema = z.object({
  org: z.coerce.string(),
})

router.get(
  "orgsGetMembershipForAuthenticatedUser",
  "/user/memberships/orgs/:org",
  paramValidationFactory<t_OrgsGetMembershipForAuthenticatedUserParamSchema>(
    orgsGetMembershipForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsGetMembershipForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsGetMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGetMembershipForAuthenticatedUser
  }
)

const orgsUpdateMembershipForAuthenticatedUserParamSchema = z.object({
  org: z.coerce.string(),
})

const orgsUpdateMembershipForAuthenticatedUserBodySchema = z.object({
  state: z.coerce.string(),
})

router.patch(
  "orgsUpdateMembershipForAuthenticatedUser",
  "/user/memberships/orgs/:org",
  paramValidationFactory<t_OrgsUpdateMembershipForAuthenticatedUserParamSchema>(
    orgsUpdateMembershipForAuthenticatedUserParamSchema
  ),
  bodyValidationFactory<t_OrgsUpdateMembershipForAuthenticatedUserBodySchema>(
    orgsUpdateMembershipForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsUpdateMembershipForAuthenticatedUserParamSchema,
      void,
      t_OrgsUpdateMembershipForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsUpdateMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUpdateMembershipForAuthenticatedUser
  }
)

const migrationsListForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "migrationsListForAuthenticatedUser",
  "/user/migrations",
  queryValidationFactory<t_MigrationsListForAuthenticatedUserQuerySchema>(
    migrationsListForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_MigrationsListForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListForAuthenticatedUser
  }
)

const migrationsStartForAuthenticatedUserBodySchema = z.object({
  lock_repositories: z.coerce.boolean().optional(),
  exclude_metadata: z.coerce.boolean().optional(),
  exclude_git_data: z.coerce.boolean().optional(),
  exclude_attachments: z.coerce.boolean().optional(),
  exclude_releases: z.coerce.boolean().optional(),
  exclude_owner_projects: z.coerce.boolean().optional(),
  org_metadata_only: z.coerce.boolean().optional(),
  exclude: z.array(z.coerce.string().optional()).optional(),
  repositories: z.array(z.coerce.string().optional()),
})

router.post(
  "migrationsStartForAuthenticatedUser",
  "/user/migrations",
  bodyValidationFactory<t_MigrationsStartForAuthenticatedUserBodySchema>(
    migrationsStartForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      t_MigrationsStartForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsStartForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsStartForAuthenticatedUser
  }
)

const migrationsGetStatusForAuthenticatedUserParamSchema = z.object({
  migration_id: z.coerce.number(),
})

const migrationsGetStatusForAuthenticatedUserQuerySchema = z.object({
  exclude: z.array(z.coerce.string().optional()).optional(),
})

router.get(
  "migrationsGetStatusForAuthenticatedUser",
  "/user/migrations/:migrationId",
  paramValidationFactory<t_MigrationsGetStatusForAuthenticatedUserParamSchema>(
    migrationsGetStatusForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_MigrationsGetStatusForAuthenticatedUserQuerySchema>(
    migrationsGetStatusForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsGetStatusForAuthenticatedUserParamSchema,
      t_MigrationsGetStatusForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsGetStatusForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetStatusForAuthenticatedUser
  }
)

const migrationsGetArchiveForAuthenticatedUserParamSchema = z.object({
  migration_id: z.coerce.number(),
})

router.get(
  "migrationsGetArchiveForAuthenticatedUser",
  "/user/migrations/:migrationId/archive",
  paramValidationFactory<t_MigrationsGetArchiveForAuthenticatedUserParamSchema>(
    migrationsGetArchiveForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsGetArchiveForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsGetArchiveForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetArchiveForAuthenticatedUser
  }
)

const migrationsDeleteArchiveForAuthenticatedUserParamSchema = z.object({
  migration_id: z.coerce.number(),
})

router.delete(
  "migrationsDeleteArchiveForAuthenticatedUser",
  "/user/migrations/:migrationId/archive",
  paramValidationFactory<t_MigrationsDeleteArchiveForAuthenticatedUserParamSchema>(
    migrationsDeleteArchiveForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsDeleteArchiveForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsDeleteArchiveForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsDeleteArchiveForAuthenticatedUser
  }
)

const migrationsUnlockRepoForAuthenticatedUserParamSchema = z.object({
  migration_id: z.coerce.number(),
  repo_name: z.coerce.string(),
})

router.delete(
  "migrationsUnlockRepoForAuthenticatedUser",
  "/user/migrations/:migrationId/repos/:repoName/lock",
  paramValidationFactory<t_MigrationsUnlockRepoForAuthenticatedUserParamSchema>(
    migrationsUnlockRepoForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsUnlockRepoForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsUnlockRepoForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsUnlockRepoForAuthenticatedUser
  }
)

const migrationsListReposForAuthenticatedUserParamSchema = z.object({
  migration_id: z.coerce.number(),
})

const migrationsListReposForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "migrationsListReposForAuthenticatedUser",
  "/user/migrations/:migrationId/repositories",
  paramValidationFactory<t_MigrationsListReposForAuthenticatedUserParamSchema>(
    migrationsListReposForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_MigrationsListReposForAuthenticatedUserQuerySchema>(
    migrationsListReposForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_MigrationsListReposForAuthenticatedUserParamSchema,
      t_MigrationsListReposForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-migrationsListReposForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListReposForAuthenticatedUser
  }
)

const orgsListForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListForAuthenticatedUser",
  "/user/orgs",
  queryValidationFactory<t_OrgsListForAuthenticatedUserQuerySchema>(
    orgsListForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_OrgsListForAuthenticatedUserQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-orgsListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListForAuthenticatedUser
  }
)

const packagesListPackagesForAuthenticatedUserQuerySchema = z.object({
  package_type: z.coerce.string(),
  visibility: z.coerce.string().optional(),
})

router.get(
  "packagesListPackagesForAuthenticatedUser",
  "/user/packages",
  queryValidationFactory<t_PackagesListPackagesForAuthenticatedUserQuerySchema>(
    packagesListPackagesForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_PackagesListPackagesForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesListPackagesForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesListPackagesForAuthenticatedUser
  }
)

const packagesGetPackageForAuthenticatedUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
})

router.get(
  "packagesGetPackageForAuthenticatedUser",
  "/user/packages/:packageType/:packageName",
  paramValidationFactory<t_PackagesGetPackageForAuthenticatedUserParamSchema>(
    packagesGetPackageForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesGetPackageForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesGetPackageForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesGetPackageForAuthenticatedUser
  }
)

const packagesDeletePackageForAuthenticatedUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
})

router.delete(
  "packagesDeletePackageForAuthenticatedUser",
  "/user/packages/:packageType/:packageName",
  paramValidationFactory<t_PackagesDeletePackageForAuthenticatedUserParamSchema>(
    packagesDeletePackageForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesDeletePackageForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesDeletePackageForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesDeletePackageForAuthenticatedUser
  }
)

const packagesRestorePackageForAuthenticatedUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
})

const packagesRestorePackageForAuthenticatedUserQuerySchema = z.object({
  token: z.coerce.string().optional(),
})

router.post(
  "packagesRestorePackageForAuthenticatedUser",
  "/user/packages/:packageType/:packageName/restore",
  paramValidationFactory<t_PackagesRestorePackageForAuthenticatedUserParamSchema>(
    packagesRestorePackageForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_PackagesRestorePackageForAuthenticatedUserQuerySchema>(
    packagesRestorePackageForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesRestorePackageForAuthenticatedUserParamSchema,
      t_PackagesRestorePackageForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesRestorePackageForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesRestorePackageForAuthenticatedUser
  }
)

const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema =
  z.object({ package_type: z.coerce.string(), package_name: z.coerce.string() })

const packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema =
  z.object({
    page: z.coerce.number().optional(),
    per_page: z.coerce.number().optional(),
    state: z.coerce.string().optional(),
  })

router.get(
  "packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser",
  "/user/packages/:packageType/:packageName/versions",
  paramValidationFactory<t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema>(
    packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema>(
    packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserParamSchema,
      t_PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser
  }
)

const packagesGetPackageVersionForAuthenticatedUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  package_version_id: z.coerce.number(),
})

router.get(
  "packagesGetPackageVersionForAuthenticatedUser",
  "/user/packages/:packageType/:packageName/versions/:packageVersionId",
  paramValidationFactory<t_PackagesGetPackageVersionForAuthenticatedUserParamSchema>(
    packagesGetPackageVersionForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesGetPackageVersionForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesGetPackageVersionForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesGetPackageVersionForAuthenticatedUser
  }
)

const packagesDeletePackageVersionForAuthenticatedUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  package_version_id: z.coerce.number(),
})

router.delete(
  "packagesDeletePackageVersionForAuthenticatedUser",
  "/user/packages/:packageType/:packageName/versions/:packageVersionId",
  paramValidationFactory<t_PackagesDeletePackageVersionForAuthenticatedUserParamSchema>(
    packagesDeletePackageVersionForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesDeletePackageVersionForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesDeletePackageVersionForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesDeletePackageVersionForAuthenticatedUser
  }
)

const packagesRestorePackageVersionForAuthenticatedUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  package_version_id: z.coerce.number(),
})

router.post(
  "packagesRestorePackageVersionForAuthenticatedUser",
  "/user/packages/:packageType/:packageName/versions/:packageVersionId/restore",
  paramValidationFactory<t_PackagesRestorePackageVersionForAuthenticatedUserParamSchema>(
    packagesRestorePackageVersionForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesRestorePackageVersionForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesRestorePackageVersionForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesRestorePackageVersionForAuthenticatedUser
  }
)

const projectsCreateForAuthenticatedUserBodySchema = z.object({
  name: z.coerce.string(),
  body: z.coerce.string().optional(),
})

router.post(
  "projectsCreateForAuthenticatedUser",
  "/user/projects",
  bodyValidationFactory<t_ProjectsCreateForAuthenticatedUserBodySchema>(
    projectsCreateForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      t_ProjectsCreateForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsCreateForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateForAuthenticatedUser
  }
)

const usersListPublicEmailsForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListPublicEmailsForAuthenticatedUser",
  "/user/public_emails",
  queryValidationFactory<t_UsersListPublicEmailsForAuthenticatedUserQuerySchema>(
    usersListPublicEmailsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_UsersListPublicEmailsForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListPublicEmailsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListPublicEmailsForAuthenticatedUser
  }
)

const reposListForAuthenticatedUserQuerySchema = z.object({
  visibility: z.coerce.string().optional(),
  affiliation: z.coerce.string().optional(),
  type: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
  since: z.coerce.string().optional(),
  before: z.coerce.string().optional(),
})

router.get(
  "reposListForAuthenticatedUser",
  "/user/repos",
  queryValidationFactory<t_ReposListForAuthenticatedUserQuerySchema>(
    reposListForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_ReposListForAuthenticatedUserQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-reposListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForAuthenticatedUser
  }
)

const reposCreateForAuthenticatedUserBodySchema = z.object({
  name: z.coerce.string(),
  description: z.coerce.string().optional(),
  homepage: z.coerce.string().optional(),
  private: z.coerce.boolean().optional(),
  has_issues: z.coerce.boolean().optional(),
  has_projects: z.coerce.boolean().optional(),
  has_wiki: z.coerce.boolean().optional(),
  has_discussions: z.coerce.boolean().optional(),
  team_id: z.coerce.number().optional(),
  auto_init: z.coerce.boolean().optional(),
  gitignore_template: z.coerce.string().optional(),
  license_template: z.coerce.string().optional(),
  allow_squash_merge: z.coerce.boolean().optional(),
  allow_merge_commit: z.coerce.boolean().optional(),
  allow_rebase_merge: z.coerce.boolean().optional(),
  allow_auto_merge: z.coerce.boolean().optional(),
  delete_branch_on_merge: z.coerce.boolean().optional(),
  squash_merge_commit_title: z.coerce.string().optional(),
  squash_merge_commit_message: z.coerce.string().optional(),
  merge_commit_title: z.coerce.string().optional(),
  merge_commit_message: z.coerce.string().optional(),
  has_downloads: z.coerce.boolean().optional(),
  is_template: z.coerce.boolean().optional(),
})

router.post(
  "reposCreateForAuthenticatedUser",
  "/user/repos",
  bodyValidationFactory<t_ReposCreateForAuthenticatedUserBodySchema>(
    reposCreateForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, t_ReposCreateForAuthenticatedUserBodySchema>,
    next: Next
  ) => {
    //region safe-edit-region-reposCreateForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateForAuthenticatedUser
  }
)

const reposListInvitationsForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListInvitationsForAuthenticatedUser",
  "/user/repository_invitations",
  queryValidationFactory<t_ReposListInvitationsForAuthenticatedUserQuerySchema>(
    reposListInvitationsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_ReposListInvitationsForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListInvitationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListInvitationsForAuthenticatedUser
  }
)

const reposAcceptInvitationForAuthenticatedUserParamSchema = z.object({
  invitation_id: z.coerce.number(),
})

router.patch(
  "reposAcceptInvitationForAuthenticatedUser",
  "/user/repository_invitations/:invitationId",
  paramValidationFactory<t_ReposAcceptInvitationForAuthenticatedUserParamSchema>(
    reposAcceptInvitationForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposAcceptInvitationForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposAcceptInvitationForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAcceptInvitationForAuthenticatedUser
  }
)

const reposDeclineInvitationForAuthenticatedUserParamSchema = z.object({
  invitation_id: z.coerce.number(),
})

router.delete(
  "reposDeclineInvitationForAuthenticatedUser",
  "/user/repository_invitations/:invitationId",
  paramValidationFactory<t_ReposDeclineInvitationForAuthenticatedUserParamSchema>(
    reposDeclineInvitationForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposDeclineInvitationForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposDeclineInvitationForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeclineInvitationForAuthenticatedUser
  }
)

const usersListSshSigningKeysForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListSshSigningKeysForAuthenticatedUser",
  "/user/ssh_signing_keys",
  queryValidationFactory<t_UsersListSshSigningKeysForAuthenticatedUserQuerySchema>(
    usersListSshSigningKeysForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_UsersListSshSigningKeysForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListSshSigningKeysForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListSshSigningKeysForAuthenticatedUser
  }
)

const usersCreateSshSigningKeyForAuthenticatedUserBodySchema = z.object({
  title: z.coerce.string().optional(),
  key: z.coerce.string(),
})

router.post(
  "usersCreateSshSigningKeyForAuthenticatedUser",
  "/user/ssh_signing_keys",
  bodyValidationFactory<t_UsersCreateSshSigningKeyForAuthenticatedUserBodySchema>(
    usersCreateSshSigningKeyForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      t_UsersCreateSshSigningKeyForAuthenticatedUserBodySchema
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersCreateSshSigningKeyForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCreateSshSigningKeyForAuthenticatedUser
  }
)

const usersGetSshSigningKeyForAuthenticatedUserParamSchema = z.object({
  ssh_signing_key_id: z.coerce.number(),
})

router.get(
  "usersGetSshSigningKeyForAuthenticatedUser",
  "/user/ssh_signing_keys/:sshSigningKeyId",
  paramValidationFactory<t_UsersGetSshSigningKeyForAuthenticatedUserParamSchema>(
    usersGetSshSigningKeyForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersGetSshSigningKeyForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersGetSshSigningKeyForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetSshSigningKeyForAuthenticatedUser
  }
)

const usersDeleteSshSigningKeyForAuthenticatedUserParamSchema = z.object({
  ssh_signing_key_id: z.coerce.number(),
})

router.delete(
  "usersDeleteSshSigningKeyForAuthenticatedUser",
  "/user/ssh_signing_keys/:sshSigningKeyId",
  paramValidationFactory<t_UsersDeleteSshSigningKeyForAuthenticatedUserParamSchema>(
    usersDeleteSshSigningKeyForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersDeleteSshSigningKeyForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersDeleteSshSigningKeyForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersDeleteSshSigningKeyForAuthenticatedUser
  }
)

const activityListReposStarredByAuthenticatedUserQuerySchema = z.object({
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListReposStarredByAuthenticatedUser",
  "/user/starred",
  queryValidationFactory<t_ActivityListReposStarredByAuthenticatedUserQuerySchema>(
    activityListReposStarredByAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_ActivityListReposStarredByAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListReposStarredByAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReposStarredByAuthenticatedUser
  }
)

const activityCheckRepoIsStarredByAuthenticatedUserParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.get(
  "activityCheckRepoIsStarredByAuthenticatedUser",
  "/user/starred/:owner/:repo",
  paramValidationFactory<t_ActivityCheckRepoIsStarredByAuthenticatedUserParamSchema>(
    activityCheckRepoIsStarredByAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityCheckRepoIsStarredByAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityCheckRepoIsStarredByAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityCheckRepoIsStarredByAuthenticatedUser
  }
)

const activityStarRepoForAuthenticatedUserParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.put(
  "activityStarRepoForAuthenticatedUser",
  "/user/starred/:owner/:repo",
  paramValidationFactory<t_ActivityStarRepoForAuthenticatedUserParamSchema>(
    activityStarRepoForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityStarRepoForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityStarRepoForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityStarRepoForAuthenticatedUser
  }
)

const activityUnstarRepoForAuthenticatedUserParamSchema = z.object({
  owner: z.coerce.string(),
  repo: z.coerce.string(),
})

router.delete(
  "activityUnstarRepoForAuthenticatedUser",
  "/user/starred/:owner/:repo",
  paramValidationFactory<t_ActivityUnstarRepoForAuthenticatedUserParamSchema>(
    activityUnstarRepoForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityUnstarRepoForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityUnstarRepoForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityUnstarRepoForAuthenticatedUser
  }
)

const activityListWatchedReposForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListWatchedReposForAuthenticatedUser",
  "/user/subscriptions",
  queryValidationFactory<t_ActivityListWatchedReposForAuthenticatedUserQuerySchema>(
    activityListWatchedReposForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      t_ActivityListWatchedReposForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListWatchedReposForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListWatchedReposForAuthenticatedUser
  }
)

const teamsListForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "teamsListForAuthenticatedUser",
  "/user/teams",
  queryValidationFactory<t_TeamsListForAuthenticatedUserQuerySchema>(
    teamsListForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, t_TeamsListForAuthenticatedUserQuerySchema, void>,
    next: Next
  ) => {
    //region safe-edit-region-teamsListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListForAuthenticatedUser
  }
)

const usersListQuerySchema = z.object({
  since: z.coerce.number().optional(),
  per_page: z.coerce.number().optional(),
})

router.get(
  "usersList",
  "/users",
  queryValidationFactory<t_UsersListQuerySchema>(usersListQuerySchema),
  async (ctx: ValidatedCtx<void, t_UsersListQuerySchema, void>, next: Next) => {
    //region safe-edit-region-usersList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersList
  }
)

const usersGetByUsernameParamSchema = z.object({ username: z.coerce.string() })

router.get(
  "usersGetByUsername",
  "/users/:username",
  paramValidationFactory<t_UsersGetByUsernameParamSchema>(
    usersGetByUsernameParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_UsersGetByUsernameParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-usersGetByUsername

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetByUsername
  }
)

const activityListEventsForAuthenticatedUserParamSchema = z.object({
  username: z.coerce.string(),
})

const activityListEventsForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListEventsForAuthenticatedUser",
  "/users/:username/events",
  paramValidationFactory<t_ActivityListEventsForAuthenticatedUserParamSchema>(
    activityListEventsForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_ActivityListEventsForAuthenticatedUserQuerySchema>(
    activityListEventsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListEventsForAuthenticatedUserParamSchema,
      t_ActivityListEventsForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListEventsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListEventsForAuthenticatedUser
  }
)

const activityListOrgEventsForAuthenticatedUserParamSchema = z.object({
  username: z.coerce.string(),
  org: z.coerce.string(),
})

const activityListOrgEventsForAuthenticatedUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListOrgEventsForAuthenticatedUser",
  "/users/:username/events/orgs/:org",
  paramValidationFactory<t_ActivityListOrgEventsForAuthenticatedUserParamSchema>(
    activityListOrgEventsForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<t_ActivityListOrgEventsForAuthenticatedUserQuerySchema>(
    activityListOrgEventsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListOrgEventsForAuthenticatedUserParamSchema,
      t_ActivityListOrgEventsForAuthenticatedUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListOrgEventsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListOrgEventsForAuthenticatedUser
  }
)

const activityListPublicEventsForUserParamSchema = z.object({
  username: z.coerce.string(),
})

const activityListPublicEventsForUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListPublicEventsForUser",
  "/users/:username/events/public",
  paramValidationFactory<t_ActivityListPublicEventsForUserParamSchema>(
    activityListPublicEventsForUserParamSchema
  ),
  queryValidationFactory<t_ActivityListPublicEventsForUserQuerySchema>(
    activityListPublicEventsForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListPublicEventsForUserParamSchema,
      t_ActivityListPublicEventsForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListPublicEventsForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicEventsForUser
  }
)

const usersListFollowersForUserParamSchema = z.object({
  username: z.coerce.string(),
})

const usersListFollowersForUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListFollowersForUser",
  "/users/:username/followers",
  paramValidationFactory<t_UsersListFollowersForUserParamSchema>(
    usersListFollowersForUserParamSchema
  ),
  queryValidationFactory<t_UsersListFollowersForUserQuerySchema>(
    usersListFollowersForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersListFollowersForUserParamSchema,
      t_UsersListFollowersForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListFollowersForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowersForUser
  }
)

const usersListFollowingForUserParamSchema = z.object({
  username: z.coerce.string(),
})

const usersListFollowingForUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListFollowingForUser",
  "/users/:username/following",
  paramValidationFactory<t_UsersListFollowingForUserParamSchema>(
    usersListFollowingForUserParamSchema
  ),
  queryValidationFactory<t_UsersListFollowingForUserQuerySchema>(
    usersListFollowingForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersListFollowingForUserParamSchema,
      t_UsersListFollowingForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListFollowingForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowingForUser
  }
)

const usersCheckFollowingForUserParamSchema = z.object({
  username: z.coerce.string(),
  target_user: z.coerce.string(),
})

router.get(
  "usersCheckFollowingForUser",
  "/users/:username/following/:targetUser",
  paramValidationFactory<t_UsersCheckFollowingForUserParamSchema>(
    usersCheckFollowingForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_UsersCheckFollowingForUserParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-usersCheckFollowingForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCheckFollowingForUser
  }
)

const gistsListForUserParamSchema = z.object({ username: z.coerce.string() })

const gistsListForUserQuerySchema = z.object({
  since: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "gistsListForUser",
  "/users/:username/gists",
  paramValidationFactory<t_GistsListForUserParamSchema>(
    gistsListForUserParamSchema
  ),
  queryValidationFactory<t_GistsListForUserQuerySchema>(
    gistsListForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_GistsListForUserParamSchema,
      t_GistsListForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-gistsListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListForUser
  }
)

const usersListGpgKeysForUserParamSchema = z.object({
  username: z.coerce.string(),
})

const usersListGpgKeysForUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListGpgKeysForUser",
  "/users/:username/gpg_keys",
  paramValidationFactory<t_UsersListGpgKeysForUserParamSchema>(
    usersListGpgKeysForUserParamSchema
  ),
  queryValidationFactory<t_UsersListGpgKeysForUserQuerySchema>(
    usersListGpgKeysForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersListGpgKeysForUserParamSchema,
      t_UsersListGpgKeysForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListGpgKeysForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListGpgKeysForUser
  }
)

const usersGetContextForUserParamSchema = z.object({
  username: z.coerce.string(),
})

const usersGetContextForUserQuerySchema = z.object({
  subject_type: z.coerce.string().optional(),
  subject_id: z.coerce.string().optional(),
})

router.get(
  "usersGetContextForUser",
  "/users/:username/hovercard",
  paramValidationFactory<t_UsersGetContextForUserParamSchema>(
    usersGetContextForUserParamSchema
  ),
  queryValidationFactory<t_UsersGetContextForUserQuerySchema>(
    usersGetContextForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersGetContextForUserParamSchema,
      t_UsersGetContextForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersGetContextForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetContextForUser
  }
)

const appsGetUserInstallationParamSchema = z.object({
  username: z.coerce.string(),
})

router.get(
  "appsGetUserInstallation",
  "/users/:username/installation",
  paramValidationFactory<t_AppsGetUserInstallationParamSchema>(
    appsGetUserInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_AppsGetUserInstallationParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-appsGetUserInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetUserInstallation
  }
)

const usersListPublicKeysForUserParamSchema = z.object({
  username: z.coerce.string(),
})

const usersListPublicKeysForUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListPublicKeysForUser",
  "/users/:username/keys",
  paramValidationFactory<t_UsersListPublicKeysForUserParamSchema>(
    usersListPublicKeysForUserParamSchema
  ),
  queryValidationFactory<t_UsersListPublicKeysForUserQuerySchema>(
    usersListPublicKeysForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersListPublicKeysForUserParamSchema,
      t_UsersListPublicKeysForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListPublicKeysForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListPublicKeysForUser
  }
)

const orgsListForUserParamSchema = z.object({ username: z.coerce.string() })

const orgsListForUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "orgsListForUser",
  "/users/:username/orgs",
  paramValidationFactory<t_OrgsListForUserParamSchema>(
    orgsListForUserParamSchema
  ),
  queryValidationFactory<t_OrgsListForUserQuerySchema>(
    orgsListForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_OrgsListForUserParamSchema,
      t_OrgsListForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-orgsListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListForUser
  }
)

const packagesListPackagesForUserParamSchema = z.object({
  username: z.coerce.string(),
})

const packagesListPackagesForUserQuerySchema = z.object({
  package_type: z.coerce.string(),
  visibility: z.coerce.string().optional(),
})

router.get(
  "packagesListPackagesForUser",
  "/users/:username/packages",
  paramValidationFactory<t_PackagesListPackagesForUserParamSchema>(
    packagesListPackagesForUserParamSchema
  ),
  queryValidationFactory<t_PackagesListPackagesForUserQuerySchema>(
    packagesListPackagesForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesListPackagesForUserParamSchema,
      t_PackagesListPackagesForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesListPackagesForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesListPackagesForUser
  }
)

const packagesGetPackageForUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  username: z.coerce.string(),
})

router.get(
  "packagesGetPackageForUser",
  "/users/:username/packages/:packageType/:packageName",
  paramValidationFactory<t_PackagesGetPackageForUserParamSchema>(
    packagesGetPackageForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_PackagesGetPackageForUserParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-packagesGetPackageForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesGetPackageForUser
  }
)

const packagesDeletePackageForUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  username: z.coerce.string(),
})

router.delete(
  "packagesDeletePackageForUser",
  "/users/:username/packages/:packageType/:packageName",
  paramValidationFactory<t_PackagesDeletePackageForUserParamSchema>(
    packagesDeletePackageForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<t_PackagesDeletePackageForUserParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-packagesDeletePackageForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesDeletePackageForUser
  }
)

const packagesRestorePackageForUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  username: z.coerce.string(),
})

const packagesRestorePackageForUserQuerySchema = z.object({
  token: z.coerce.string().optional(),
})

router.post(
  "packagesRestorePackageForUser",
  "/users/:username/packages/:packageType/:packageName/restore",
  paramValidationFactory<t_PackagesRestorePackageForUserParamSchema>(
    packagesRestorePackageForUserParamSchema
  ),
  queryValidationFactory<t_PackagesRestorePackageForUserQuerySchema>(
    packagesRestorePackageForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesRestorePackageForUserParamSchema,
      t_PackagesRestorePackageForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesRestorePackageForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesRestorePackageForUser
  }
)

const packagesGetAllPackageVersionsForPackageOwnedByUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  username: z.coerce.string(),
})

router.get(
  "packagesGetAllPackageVersionsForPackageOwnedByUser",
  "/users/:username/packages/:packageType/:packageName/versions",
  paramValidationFactory<t_PackagesGetAllPackageVersionsForPackageOwnedByUserParamSchema>(
    packagesGetAllPackageVersionsForPackageOwnedByUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesGetAllPackageVersionsForPackageOwnedByUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesGetAllPackageVersionsForPackageOwnedByUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesGetAllPackageVersionsForPackageOwnedByUser
  }
)

const packagesGetPackageVersionForUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  package_version_id: z.coerce.number(),
  username: z.coerce.string(),
})

router.get(
  "packagesGetPackageVersionForUser",
  "/users/:username/packages/:packageType/:packageName/versions/:packageVersionId",
  paramValidationFactory<t_PackagesGetPackageVersionForUserParamSchema>(
    packagesGetPackageVersionForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesGetPackageVersionForUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesGetPackageVersionForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesGetPackageVersionForUser
  }
)

const packagesDeletePackageVersionForUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  username: z.coerce.string(),
  package_version_id: z.coerce.number(),
})

router.delete(
  "packagesDeletePackageVersionForUser",
  "/users/:username/packages/:packageType/:packageName/versions/:packageVersionId",
  paramValidationFactory<t_PackagesDeletePackageVersionForUserParamSchema>(
    packagesDeletePackageVersionForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesDeletePackageVersionForUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesDeletePackageVersionForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesDeletePackageVersionForUser
  }
)

const packagesRestorePackageVersionForUserParamSchema = z.object({
  package_type: z.coerce.string(),
  package_name: z.coerce.string(),
  username: z.coerce.string(),
  package_version_id: z.coerce.number(),
})

router.post(
  "packagesRestorePackageVersionForUser",
  "/users/:username/packages/:packageType/:packageName/versions/:packageVersionId/restore",
  paramValidationFactory<t_PackagesRestorePackageVersionForUserParamSchema>(
    packagesRestorePackageVersionForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_PackagesRestorePackageVersionForUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-packagesRestorePackageVersionForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-packagesRestorePackageVersionForUser
  }
)

const projectsListForUserParamSchema = z.object({ username: z.coerce.string() })

const projectsListForUserQuerySchema = z.object({
  state: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "projectsListForUser",
  "/users/:username/projects",
  paramValidationFactory<t_ProjectsListForUserParamSchema>(
    projectsListForUserParamSchema
  ),
  queryValidationFactory<t_ProjectsListForUserQuerySchema>(
    projectsListForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ProjectsListForUserParamSchema,
      t_ProjectsListForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-projectsListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListForUser
  }
)

const activityListReceivedEventsForUserParamSchema = z.object({
  username: z.coerce.string(),
})

const activityListReceivedEventsForUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListReceivedEventsForUser",
  "/users/:username/received_events",
  paramValidationFactory<t_ActivityListReceivedEventsForUserParamSchema>(
    activityListReceivedEventsForUserParamSchema
  ),
  queryValidationFactory<t_ActivityListReceivedEventsForUserQuerySchema>(
    activityListReceivedEventsForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListReceivedEventsForUserParamSchema,
      t_ActivityListReceivedEventsForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListReceivedEventsForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReceivedEventsForUser
  }
)

const activityListReceivedPublicEventsForUserParamSchema = z.object({
  username: z.coerce.string(),
})

const activityListReceivedPublicEventsForUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListReceivedPublicEventsForUser",
  "/users/:username/received_events/public",
  paramValidationFactory<t_ActivityListReceivedPublicEventsForUserParamSchema>(
    activityListReceivedPublicEventsForUserParamSchema
  ),
  queryValidationFactory<t_ActivityListReceivedPublicEventsForUserQuerySchema>(
    activityListReceivedPublicEventsForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListReceivedPublicEventsForUserParamSchema,
      t_ActivityListReceivedPublicEventsForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListReceivedPublicEventsForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReceivedPublicEventsForUser
  }
)

const reposListForUserParamSchema = z.object({ username: z.coerce.string() })

const reposListForUserQuerySchema = z.object({
  type: z.coerce.string().optional(),
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "reposListForUser",
  "/users/:username/repos",
  paramValidationFactory<t_ReposListForUserParamSchema>(
    reposListForUserParamSchema
  ),
  queryValidationFactory<t_ReposListForUserQuerySchema>(
    reposListForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ReposListForUserParamSchema,
      t_ReposListForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-reposListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForUser
  }
)

const billingGetGithubActionsBillingUserParamSchema = z.object({
  username: z.coerce.string(),
})

router.get(
  "billingGetGithubActionsBillingUser",
  "/users/:username/settings/billing/actions",
  paramValidationFactory<t_BillingGetGithubActionsBillingUserParamSchema>(
    billingGetGithubActionsBillingUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_BillingGetGithubActionsBillingUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-billingGetGithubActionsBillingUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-billingGetGithubActionsBillingUser
  }
)

const billingGetGithubPackagesBillingUserParamSchema = z.object({
  username: z.coerce.string(),
})

router.get(
  "billingGetGithubPackagesBillingUser",
  "/users/:username/settings/billing/packages",
  paramValidationFactory<t_BillingGetGithubPackagesBillingUserParamSchema>(
    billingGetGithubPackagesBillingUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_BillingGetGithubPackagesBillingUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-billingGetGithubPackagesBillingUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-billingGetGithubPackagesBillingUser
  }
)

const billingGetSharedStorageBillingUserParamSchema = z.object({
  username: z.coerce.string(),
})

router.get(
  "billingGetSharedStorageBillingUser",
  "/users/:username/settings/billing/shared-storage",
  paramValidationFactory<t_BillingGetSharedStorageBillingUserParamSchema>(
    billingGetSharedStorageBillingUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      t_BillingGetSharedStorageBillingUserParamSchema,
      void,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-billingGetSharedStorageBillingUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-billingGetSharedStorageBillingUser
  }
)

const usersListSshSigningKeysForUserParamSchema = z.object({
  username: z.coerce.string(),
})

const usersListSshSigningKeysForUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "usersListSshSigningKeysForUser",
  "/users/:username/ssh_signing_keys",
  paramValidationFactory<t_UsersListSshSigningKeysForUserParamSchema>(
    usersListSshSigningKeysForUserParamSchema
  ),
  queryValidationFactory<t_UsersListSshSigningKeysForUserQuerySchema>(
    usersListSshSigningKeysForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_UsersListSshSigningKeysForUserParamSchema,
      t_UsersListSshSigningKeysForUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-usersListSshSigningKeysForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListSshSigningKeysForUser
  }
)

const activityListReposStarredByUserParamSchema = z.object({
  username: z.coerce.string(),
})

const activityListReposStarredByUserQuerySchema = z.object({
  sort: z.coerce.string().optional(),
  direction: z.coerce.string().optional(),
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListReposStarredByUser",
  "/users/:username/starred",
  paramValidationFactory<t_ActivityListReposStarredByUserParamSchema>(
    activityListReposStarredByUserParamSchema
  ),
  queryValidationFactory<t_ActivityListReposStarredByUserQuerySchema>(
    activityListReposStarredByUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListReposStarredByUserParamSchema,
      t_ActivityListReposStarredByUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListReposStarredByUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReposStarredByUser
  }
)

const activityListReposWatchedByUserParamSchema = z.object({
  username: z.coerce.string(),
})

const activityListReposWatchedByUserQuerySchema = z.object({
  per_page: z.coerce.number().optional(),
  page: z.coerce.number().optional(),
})

router.get(
  "activityListReposWatchedByUser",
  "/users/:username/subscriptions",
  paramValidationFactory<t_ActivityListReposWatchedByUserParamSchema>(
    activityListReposWatchedByUserParamSchema
  ),
  queryValidationFactory<t_ActivityListReposWatchedByUserQuerySchema>(
    activityListReposWatchedByUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      t_ActivityListReposWatchedByUserParamSchema,
      t_ActivityListReposWatchedByUserQuerySchema,
      void
    >,
    next: Next
  ) => {
    //region safe-edit-region-activityListReposWatchedByUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReposWatchedByUser
  }
)

router.get(
  "metaGetAllVersions",
  "/versions",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-metaGetAllVersions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-metaGetAllVersions
  }
)

router.get(
  "metaGetZen",
  "/zen",
  async (ctx: ValidatedCtx<void, void, void>, next: Next) => {
    //region safe-edit-region-metaGetZen

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-metaGetZen
  }
)

server.use(router.allowedMethods())
server.use(router.routes())

server.listen(PORT, () => {
  console.info("server listening", { port: PORT })
})
