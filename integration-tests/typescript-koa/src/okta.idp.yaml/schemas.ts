/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import { z } from "zod"

export const s_AppAuthenticatorEnrollment = z.object({
  authenticatorId: z.coerce.string().optional(),
  createdDate: z.coerce.string().datetime({ offset: true }).optional(),
  device: z
    .object({
      id: z.coerce.string().optional(),
      status: z.enum(["ACTIVE"]).optional(),
      createdDate: z.coerce.string().datetime({ offset: true }).optional(),
      lastUpdated: z.coerce.string().datetime({ offset: true }).optional(),
      clientInstanceId: z.coerce.string().optional(),
    })
    .optional(),
  id: z.coerce.string().optional(),
  lastUpdated: z.coerce.string().datetime({ offset: true }).optional(),
  links: z
    .object({
      self: z
        .object({
          href: z.coerce.string().optional(),
          hints: z
            .object({ allow: z.array(z.enum(["PATCH", "DELETE"])).optional() })
            .optional(),
        })
        .optional(),
    })
    .optional(),
  methods: z.object({ push: z.object({}).optional() }).optional(),
  user: z
    .object({
      id: z.coerce.string().optional(),
      username: z.coerce.string().optional(),
    })
    .optional(),
})

export const s_AppAuthenticatorMethodCapabilities = z.object({
  transactionTypes: z.array(z.enum(["LOGIN", "CIBA"])).optional(),
})

export const s_Email = z.object({
  id: z.coerce.string(),
  profile: z.object({ email: z.coerce.string() }),
  roles: z.array(z.coerce.string()),
  status: z.coerce.string(),
  _links: z
    .object({
      self: z
        .object({
          href: z.coerce.string().optional(),
          hints: z
            .object({ allow: z.array(z.coerce.string()).optional() })
            .optional(),
        })
        .optional(),
      challenge: z
        .object({
          href: z.coerce.string().optional(),
          hints: z
            .object({ allow: z.array(z.coerce.string()).optional() })
            .optional(),
        })
        .optional(),
      verify: z
        .object({
          href: z.coerce.string().optional(),
          hints: z
            .object({ allow: z.array(z.coerce.string()).optional() })
            .optional(),
        })
        .optional(),
      poll: z
        .object({
          href: z.coerce.string().optional(),
          hints: z
            .object({ allow: z.array(z.coerce.string()).optional() })
            .optional(),
        })
        .optional(),
    })
    .optional(),
})

export const s_Error = z.object({
  errorCauses: z
    .array(z.object({ errorSummary: z.coerce.string().optional() }))
    .optional(),
  errorCode: z.coerce.string().optional(),
  errorId: z.coerce.string().optional(),
  errorLink: z.coerce.string().optional(),
  errorSummary: z.coerce.string().optional(),
})

export const s_KeyEC = z.object({
  crv: z.enum(["P-256"]),
  kid: z.coerce.string(),
  kty: z.enum(["EC"]),
  "okta:kpr": z.enum(["HARDWARE", "SOFTWARE"]),
  x: z.coerce.string(),
  y: z.coerce.string(),
})

export const s_KeyRSA = z.object({
  e: z.coerce.string(),
  kid: z.coerce.string(),
  kty: z.enum(["RSA"]),
  n: z.coerce.string(),
  "okta:kpr": z.enum(["HARDWARE", "SOFTWARE"]),
})

export const s_Phone = z.object({
  id: z.coerce.string(),
  profile: z.object({ phoneNumber: z.coerce.string() }),
  status: z.coerce.string(),
  _links: z
    .object({
      self: z
        .object({
          href: z.coerce.string().optional(),
          hints: z
            .object({ allow: z.array(z.coerce.string()).optional() })
            .optional(),
        })
        .optional(),
      challenge: z
        .object({
          href: z.coerce.string().optional(),
          hints: z
            .object({ allow: z.array(z.coerce.string()).optional() })
            .optional(),
        })
        .optional(),
      verify: z
        .object({
          href: z.coerce.string().optional(),
          hints: z
            .object({ allow: z.array(z.coerce.string()).optional() })
            .optional(),
        })
        .optional(),
    })
    .optional(),
})

export const s_Profile = z.object({
  createdAt: z.coerce.string().datetime({ offset: true }).optional(),
  modifiedAt: z.coerce.string().datetime({ offset: true }).optional(),
  profile: z.object({}).optional(),
  _links: z
    .object({
      self: z.object({ href: z.coerce.string().optional() }).optional(),
      describedBy: z.object({ href: z.coerce.string().optional() }).optional(),
    })
    .optional(),
})

export const s_PushNotificationChallenge = z.object({
  challenge: z.coerce.string().optional(),
  payloadVersion: z.enum(["IDXv1"]).optional(),
})

export const s_PushNotificationVerification = z.object({
  challengeResponse: z.coerce.string().optional(),
  method: z.enum(["push"]).optional(),
})

export const s_Schema = z.object({
  properties: z.object({}).optional(),
  _links: z
    .object({
      self: z.object({ href: z.coerce.string().optional() }).optional(),
      user: z.object({ href: z.coerce.string().optional() }).optional(),
    })
    .optional(),
})

export const s_KeyObject = z.union([s_KeyEC, s_KeyRSA])

export const s_AppAuthenticatorEnrollmentRequest = z.object({
  authenticatorId: z.coerce.string(),
  device: z.object({
    secureHardwarePresent: z.coerce.boolean().optional(),
    clientInstanceKey: s_KeyObject,
    osVersion: z.coerce.string(),
    clientInstanceBundleId: z.coerce.string(),
    platform: z.enum(["ANDROID", "IOS"]),
    manufacturer: z.coerce.string().optional(),
    deviceAttestation: z.object({}).optional(),
    clientInstanceVersion: z.coerce.string(),
    clientInstanceDeviceSdkVersion: z.coerce.string(),
    model: z.coerce.string().optional(),
    displayName: z.coerce.string(),
    udid: z.coerce.string().optional(),
  }),
  methods: z.object({
    push: z.object({
      apsEnvironment: z.enum(["PRODUCTION", "DEVELOPMENT"]).optional(),
      pushToken: z.coerce.string(),
      keys: z.object({
        proofOfPossession: s_KeyObject,
        userVerification: s_KeyObject,
        capabilities: s_AppAuthenticatorMethodCapabilities,
      }),
    }),
  }),
})

export const s_UpdateAppAuthenticatorEnrollmentRequest = z.object({
  methods: z
    .object({
      push: z
        .object({
          pushToken: z.coerce.string().optional(),
          keys: z.object({ userVerification: s_KeyObject }).optional(),
          capabilities: s_AppAuthenticatorMethodCapabilities,
        })
        .optional(),
    })
    .optional(),
})
