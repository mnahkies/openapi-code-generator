/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import {
  ActionsAddSelectedRepoToOrgSecretParamSchema,
  ActionsCancelWorkflowRunParamSchema,
  ActionsCreateOrUpdateOrgSecretBodySchema,
  ActionsCreateOrUpdateOrgSecretParamSchema,
  ActionsCreateOrUpdateRepoSecretBodySchema,
  ActionsCreateOrUpdateRepoSecretParamSchema,
  ActionsCreateRegistrationTokenForOrgParamSchema,
  ActionsCreateRegistrationTokenForRepoParamSchema,
  ActionsCreateRemoveTokenForOrgParamSchema,
  ActionsCreateRemoveTokenForRepoParamSchema,
  ActionsDeleteArtifactParamSchema,
  ActionsDeleteOrgSecretParamSchema,
  ActionsDeleteRepoSecretParamSchema,
  ActionsDeleteSelfHostedRunnerFromOrgParamSchema,
  ActionsDeleteSelfHostedRunnerFromRepoParamSchema,
  ActionsDeleteWorkflowRunLogsParamSchema,
  ActionsDownloadArtifactParamSchema,
  ActionsDownloadJobLogsForWorkflowRunParamSchema,
  ActionsDownloadWorkflowRunLogsParamSchema,
  ActionsGetArtifactParamSchema,
  ActionsGetJobForWorkflowRunParamSchema,
  ActionsGetOrgPublicKeyParamSchema,
  ActionsGetOrgSecretParamSchema,
  ActionsGetRepoPublicKeyParamSchema,
  ActionsGetRepoSecretParamSchema,
  ActionsGetSelfHostedRunnerForOrgParamSchema,
  ActionsGetSelfHostedRunnerForRepoParamSchema,
  ActionsGetWorkflowParamSchema,
  ActionsGetWorkflowRunParamSchema,
  ActionsGetWorkflowRunUsageParamSchema,
  ActionsGetWorkflowUsageParamSchema,
  ActionsListArtifactsForRepoParamSchema,
  ActionsListArtifactsForRepoQuerySchema,
  ActionsListJobsForWorkflowRunParamSchema,
  ActionsListJobsForWorkflowRunQuerySchema,
  ActionsListOrgSecretsParamSchema,
  ActionsListOrgSecretsQuerySchema,
  ActionsListRepoSecretsParamSchema,
  ActionsListRepoSecretsQuerySchema,
  ActionsListRepoWorkflowsParamSchema,
  ActionsListRepoWorkflowsQuerySchema,
  ActionsListRunnerApplicationsForOrgParamSchema,
  ActionsListRunnerApplicationsForRepoParamSchema,
  ActionsListSelectedReposForOrgSecretParamSchema,
  ActionsListSelfHostedRunnersForOrgParamSchema,
  ActionsListSelfHostedRunnersForOrgQuerySchema,
  ActionsListSelfHostedRunnersForRepoParamSchema,
  ActionsListSelfHostedRunnersForRepoQuerySchema,
  ActionsListWorkflowRunArtifactsParamSchema,
  ActionsListWorkflowRunArtifactsQuerySchema,
  ActionsListWorkflowRunsForRepoParamSchema,
  ActionsListWorkflowRunsForRepoQuerySchema,
  ActionsListWorkflowRunsParamSchema,
  ActionsListWorkflowRunsQuerySchema,
  ActionsReRunWorkflowParamSchema,
  ActionsRemoveSelectedRepoFromOrgSecretParamSchema,
  ActionsSetSelectedReposForOrgSecretBodySchema,
  ActionsSetSelectedReposForOrgSecretParamSchema,
  ActivityCheckRepoIsStarredByAuthenticatedUserParamSchema,
  ActivityDeleteRepoSubscriptionParamSchema,
  ActivityDeleteThreadSubscriptionParamSchema,
  ActivityGetRepoSubscriptionParamSchema,
  ActivityGetThreadParamSchema,
  ActivityGetThreadSubscriptionForAuthenticatedUserParamSchema,
  ActivityListEventsForAuthenticatedUserParamSchema,
  ActivityListEventsForAuthenticatedUserQuerySchema,
  ActivityListNotificationsForAuthenticatedUserQuerySchema,
  ActivityListOrgEventsForAuthenticatedUserParamSchema,
  ActivityListOrgEventsForAuthenticatedUserQuerySchema,
  ActivityListPublicEventsForRepoNetworkParamSchema,
  ActivityListPublicEventsForRepoNetworkQuerySchema,
  ActivityListPublicEventsForUserParamSchema,
  ActivityListPublicEventsForUserQuerySchema,
  ActivityListPublicEventsQuerySchema,
  ActivityListPublicOrgEventsParamSchema,
  ActivityListPublicOrgEventsQuerySchema,
  ActivityListReceivedEventsForUserParamSchema,
  ActivityListReceivedEventsForUserQuerySchema,
  ActivityListReceivedPublicEventsForUserParamSchema,
  ActivityListReceivedPublicEventsForUserQuerySchema,
  ActivityListRepoEventsParamSchema,
  ActivityListRepoEventsQuerySchema,
  ActivityListRepoNotificationsForAuthenticatedUserParamSchema,
  ActivityListRepoNotificationsForAuthenticatedUserQuerySchema,
  ActivityListReposStarredByAuthenticatedUserQuerySchema,
  ActivityListReposStarredByUserParamSchema,
  ActivityListReposStarredByUserQuerySchema,
  ActivityListReposWatchedByUserParamSchema,
  ActivityListReposWatchedByUserQuerySchema,
  ActivityListStargazersForRepoParamSchema,
  ActivityListStargazersForRepoQuerySchema,
  ActivityListWatchedReposForAuthenticatedUserQuerySchema,
  ActivityListWatchersForRepoParamSchema,
  ActivityListWatchersForRepoQuerySchema,
  ActivityMarkNotificationsAsReadBodySchema,
  ActivityMarkRepoNotificationsAsReadBodySchema,
  ActivityMarkRepoNotificationsAsReadParamSchema,
  ActivityMarkThreadAsReadParamSchema,
  ActivitySetRepoSubscriptionBodySchema,
  ActivitySetRepoSubscriptionParamSchema,
  ActivitySetThreadSubscriptionBodySchema,
  ActivitySetThreadSubscriptionParamSchema,
  ActivityStarRepoForAuthenticatedUserParamSchema,
  ActivityUnstarRepoForAuthenticatedUserParamSchema,
  AppsAddRepoToInstallationParamSchema,
  AppsCheckAuthorizationParamSchema,
  AppsCheckTokenBodySchema,
  AppsCheckTokenParamSchema,
  AppsCreateContentAttachmentBodySchema,
  AppsCreateContentAttachmentParamSchema,
  AppsCreateFromManifestParamSchema,
  AppsCreateInstallationAccessTokenBodySchema,
  AppsCreateInstallationAccessTokenParamSchema,
  AppsDeleteAuthorizationBodySchema,
  AppsDeleteAuthorizationParamSchema,
  AppsDeleteInstallationParamSchema,
  AppsDeleteTokenBodySchema,
  AppsDeleteTokenParamSchema,
  AppsGetBySlugParamSchema,
  AppsGetInstallationParamSchema,
  AppsGetOrgInstallationParamSchema,
  AppsGetRepoInstallationParamSchema,
  AppsGetSubscriptionPlanForAccountParamSchema,
  AppsGetSubscriptionPlanForAccountStubbedParamSchema,
  AppsGetUserInstallationParamSchema,
  AppsListAccountsForPlanParamSchema,
  AppsListAccountsForPlanQuerySchema,
  AppsListAccountsForPlanStubbedParamSchema,
  AppsListAccountsForPlanStubbedQuerySchema,
  AppsListInstallationReposForAuthenticatedUserParamSchema,
  AppsListInstallationReposForAuthenticatedUserQuerySchema,
  AppsListInstallationsForAuthenticatedUserQuerySchema,
  AppsListInstallationsQuerySchema,
  AppsListPlansQuerySchema,
  AppsListPlansStubbedQuerySchema,
  AppsListReposAccessibleToInstallationQuerySchema,
  AppsListSubscriptionsForAuthenticatedUserQuerySchema,
  AppsListSubscriptionsForAuthenticatedUserStubbedQuerySchema,
  AppsRemoveRepoFromInstallationParamSchema,
  AppsResetAuthorizationParamSchema,
  AppsResetTokenBodySchema,
  AppsResetTokenParamSchema,
  AppsRevokeAuthorizationForApplicationParamSchema,
  AppsRevokeGrantForApplicationParamSchema,
  AppsSuspendInstallationParamSchema,
  AppsUnsuspendInstallationParamSchema,
  ChecksCreateBodySchema,
  ChecksCreateParamSchema,
  ChecksCreateSuiteBodySchema,
  ChecksCreateSuiteParamSchema,
  ChecksGetParamSchema,
  ChecksGetSuiteParamSchema,
  ChecksListAnnotationsParamSchema,
  ChecksListAnnotationsQuerySchema,
  ChecksListForRefParamSchema,
  ChecksListForRefQuerySchema,
  ChecksListForSuiteParamSchema,
  ChecksListForSuiteQuerySchema,
  ChecksListSuitesForRefParamSchema,
  ChecksListSuitesForRefQuerySchema,
  ChecksRerequestSuiteParamSchema,
  ChecksSetSuitesPreferencesBodySchema,
  ChecksSetSuitesPreferencesParamSchema,
  ChecksUpdateBodySchema,
  ChecksUpdateParamSchema,
  CodeScanningGetAlertParamSchema,
  CodeScanningListAlertsForRepoParamSchema,
  CodeScanningListAlertsForRepoQuerySchema,
  CodesOfConductGetConductCodeParamSchema,
  CodesOfConductGetForRepoParamSchema,
  GistsCheckIsStarredParamSchema,
  GistsCreateBodySchema,
  GistsCreateCommentBodySchema,
  GistsCreateCommentParamSchema,
  GistsDeleteCommentParamSchema,
  GistsDeleteParamSchema,
  GistsForkParamSchema,
  GistsGetCommentParamSchema,
  GistsGetParamSchema,
  GistsGetRevisionParamSchema,
  GistsListCommentsParamSchema,
  GistsListCommentsQuerySchema,
  GistsListCommitsParamSchema,
  GistsListCommitsQuerySchema,
  GistsListForUserParamSchema,
  GistsListForUserQuerySchema,
  GistsListForksParamSchema,
  GistsListForksQuerySchema,
  GistsListPublicQuerySchema,
  GistsListQuerySchema,
  GistsListStarredQuerySchema,
  GistsStarParamSchema,
  GistsUnstarParamSchema,
  GistsUpdateBodySchema,
  GistsUpdateCommentBodySchema,
  GistsUpdateCommentParamSchema,
  GistsUpdateParamSchema,
  GitCreateBlobBodySchema,
  GitCreateBlobParamSchema,
  GitCreateCommitBodySchema,
  GitCreateCommitParamSchema,
  GitCreateRefBodySchema,
  GitCreateRefParamSchema,
  GitCreateTagBodySchema,
  GitCreateTagParamSchema,
  GitCreateTreeBodySchema,
  GitCreateTreeParamSchema,
  GitDeleteRefParamSchema,
  GitGetBlobParamSchema,
  GitGetCommitParamSchema,
  GitGetRefParamSchema,
  GitGetTagParamSchema,
  GitGetTreeParamSchema,
  GitGetTreeQuerySchema,
  GitListMatchingRefsParamSchema,
  GitListMatchingRefsQuerySchema,
  GitUpdateRefBodySchema,
  GitUpdateRefParamSchema,
  GitignoreGetTemplateParamSchema,
  InteractionsGetRestrictionsForOrgParamSchema,
  InteractionsGetRestrictionsForRepoParamSchema,
  InteractionsRemoveRestrictionsForOrgParamSchema,
  InteractionsRemoveRestrictionsForRepoParamSchema,
  InteractionsSetRestrictionsForOrgBodySchema,
  InteractionsSetRestrictionsForOrgParamSchema,
  InteractionsSetRestrictionsForRepoBodySchema,
  InteractionsSetRestrictionsForRepoParamSchema,
  IssuesAddAssigneesBodySchema,
  IssuesAddAssigneesParamSchema,
  IssuesAddLabelsBodySchema,
  IssuesAddLabelsParamSchema,
  IssuesCheckUserCanBeAssignedParamSchema,
  IssuesCreateBodySchema,
  IssuesCreateCommentBodySchema,
  IssuesCreateCommentParamSchema,
  IssuesCreateLabelBodySchema,
  IssuesCreateLabelParamSchema,
  IssuesCreateMilestoneBodySchema,
  IssuesCreateMilestoneParamSchema,
  IssuesCreateParamSchema,
  IssuesDeleteCommentParamSchema,
  IssuesDeleteLabelParamSchema,
  IssuesDeleteMilestoneParamSchema,
  IssuesGetCommentParamSchema,
  IssuesGetEventParamSchema,
  IssuesGetLabelParamSchema,
  IssuesGetMilestoneParamSchema,
  IssuesGetParamSchema,
  IssuesListAssigneesParamSchema,
  IssuesListAssigneesQuerySchema,
  IssuesListCommentsForRepoParamSchema,
  IssuesListCommentsForRepoQuerySchema,
  IssuesListCommentsParamSchema,
  IssuesListCommentsQuerySchema,
  IssuesListEventsForRepoParamSchema,
  IssuesListEventsForRepoQuerySchema,
  IssuesListEventsForTimelineParamSchema,
  IssuesListEventsForTimelineQuerySchema,
  IssuesListEventsParamSchema,
  IssuesListEventsQuerySchema,
  IssuesListForAuthenticatedUserQuerySchema,
  IssuesListForOrgParamSchema,
  IssuesListForOrgQuerySchema,
  IssuesListForRepoParamSchema,
  IssuesListForRepoQuerySchema,
  IssuesListLabelsForMilestoneParamSchema,
  IssuesListLabelsForMilestoneQuerySchema,
  IssuesListLabelsForRepoParamSchema,
  IssuesListLabelsForRepoQuerySchema,
  IssuesListLabelsOnIssueParamSchema,
  IssuesListLabelsOnIssueQuerySchema,
  IssuesListMilestonesParamSchema,
  IssuesListMilestonesQuerySchema,
  IssuesListQuerySchema,
  IssuesLockBodySchema,
  IssuesLockParamSchema,
  IssuesRemoveAllLabelsParamSchema,
  IssuesRemoveAssigneesBodySchema,
  IssuesRemoveAssigneesParamSchema,
  IssuesRemoveLabelParamSchema,
  IssuesSetLabelsBodySchema,
  IssuesSetLabelsParamSchema,
  IssuesUnlockParamSchema,
  IssuesUpdateBodySchema,
  IssuesUpdateCommentBodySchema,
  IssuesUpdateCommentParamSchema,
  IssuesUpdateLabelBodySchema,
  IssuesUpdateLabelParamSchema,
  IssuesUpdateMilestoneBodySchema,
  IssuesUpdateMilestoneParamSchema,
  IssuesUpdateParamSchema,
  LicensesGetForRepoParamSchema,
  LicensesGetParamSchema,
  MarkdownRenderBodySchema,
  MarkdownRenderRawBodySchema,
  MigrationsCancelImportParamSchema,
  MigrationsDeleteArchiveForAuthenticatedUserParamSchema,
  MigrationsDeleteArchiveForOrgParamSchema,
  MigrationsDownloadArchiveForOrgParamSchema,
  MigrationsGetArchiveForAuthenticatedUserParamSchema,
  MigrationsGetCommitAuthorsParamSchema,
  MigrationsGetCommitAuthorsQuerySchema,
  MigrationsGetImportStatusParamSchema,
  MigrationsGetLargeFilesParamSchema,
  MigrationsGetStatusForAuthenticatedUserParamSchema,
  MigrationsGetStatusForOrgParamSchema,
  MigrationsListForAuthenticatedUserQuerySchema,
  MigrationsListForOrgParamSchema,
  MigrationsListForOrgQuerySchema,
  MigrationsListReposForOrgParamSchema,
  MigrationsListReposForOrgQuerySchema,
  MigrationsListReposForUserParamSchema,
  MigrationsListReposForUserQuerySchema,
  MigrationsMapCommitAuthorBodySchema,
  MigrationsMapCommitAuthorParamSchema,
  MigrationsSetLfsPreferenceBodySchema,
  MigrationsSetLfsPreferenceParamSchema,
  MigrationsStartForAuthenticatedUserBodySchema,
  MigrationsStartForOrgBodySchema,
  MigrationsStartForOrgParamSchema,
  MigrationsStartImportBodySchema,
  MigrationsStartImportParamSchema,
  MigrationsUnlockRepoForAuthenticatedUserParamSchema,
  MigrationsUnlockRepoForOrgParamSchema,
  MigrationsUpdateImportBodySchema,
  MigrationsUpdateImportParamSchema,
  OauthAuthorizationsCreateAuthorizationBodySchema,
  OauthAuthorizationsDeleteAuthorizationParamSchema,
  OauthAuthorizationsDeleteGrantParamSchema,
  OauthAuthorizationsGetAuthorizationParamSchema,
  OauthAuthorizationsGetGrantParamSchema,
  OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintBodySchema,
  OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParamSchema,
  OauthAuthorizationsGetOrCreateAuthorizationForAppBodySchema,
  OauthAuthorizationsGetOrCreateAuthorizationForAppParamSchema,
  OauthAuthorizationsListAuthorizationsQuerySchema,
  OauthAuthorizationsListGrantsQuerySchema,
  OauthAuthorizationsUpdateAuthorizationBodySchema,
  OauthAuthorizationsUpdateAuthorizationParamSchema,
  OrgsBlockUserParamSchema,
  OrgsCheckBlockedUserParamSchema,
  OrgsCheckMembershipForUserParamSchema,
  OrgsCheckPublicMembershipForUserParamSchema,
  OrgsConvertMemberToOutsideCollaboratorParamSchema,
  OrgsCreateInvitationBodySchema,
  OrgsCreateInvitationParamSchema,
  OrgsCreateWebhookBodySchema,
  OrgsCreateWebhookParamSchema,
  OrgsDeleteWebhookParamSchema,
  OrgsGetMembershipForAuthenticatedUserParamSchema,
  OrgsGetMembershipForUserParamSchema,
  OrgsGetParamSchema,
  OrgsGetWebhookParamSchema,
  OrgsListAppInstallationsParamSchema,
  OrgsListAppInstallationsQuerySchema,
  OrgsListBlockedUsersParamSchema,
  OrgsListForAuthenticatedUserQuerySchema,
  OrgsListForUserParamSchema,
  OrgsListForUserQuerySchema,
  OrgsListInvitationTeamsParamSchema,
  OrgsListInvitationTeamsQuerySchema,
  OrgsListMembersParamSchema,
  OrgsListMembersQuerySchema,
  OrgsListMembershipsForAuthenticatedUserQuerySchema,
  OrgsListOutsideCollaboratorsParamSchema,
  OrgsListOutsideCollaboratorsQuerySchema,
  OrgsListPendingInvitationsParamSchema,
  OrgsListPendingInvitationsQuerySchema,
  OrgsListPublicMembersParamSchema,
  OrgsListPublicMembersQuerySchema,
  OrgsListQuerySchema,
  OrgsListSamlSsoAuthorizationsParamSchema,
  OrgsListWebhooksParamSchema,
  OrgsListWebhooksQuerySchema,
  OrgsPingWebhookParamSchema,
  OrgsRemoveMemberParamSchema,
  OrgsRemoveMembershipForUserParamSchema,
  OrgsRemoveOutsideCollaboratorParamSchema,
  OrgsRemovePublicMembershipForAuthenticatedUserParamSchema,
  OrgsRemoveSamlSsoAuthorizationParamSchema,
  OrgsSetMembershipForUserBodySchema,
  OrgsSetMembershipForUserParamSchema,
  OrgsSetPublicMembershipForAuthenticatedUserParamSchema,
  OrgsUnblockUserParamSchema,
  OrgsUpdateBodySchema,
  OrgsUpdateMembershipForAuthenticatedUserBodySchema,
  OrgsUpdateMembershipForAuthenticatedUserParamSchema,
  OrgsUpdateParamSchema,
  OrgsUpdateWebhookBodySchema,
  OrgsUpdateWebhookParamSchema,
  ProjectsAddCollaboratorBodySchema,
  ProjectsAddCollaboratorParamSchema,
  ProjectsCreateCardBodySchema,
  ProjectsCreateCardParamSchema,
  ProjectsCreateColumnBodySchema,
  ProjectsCreateColumnParamSchema,
  ProjectsCreateForAuthenticatedUserBodySchema,
  ProjectsCreateForOrgBodySchema,
  ProjectsCreateForOrgParamSchema,
  ProjectsCreateForRepoBodySchema,
  ProjectsCreateForRepoParamSchema,
  ProjectsDeleteCardParamSchema,
  ProjectsDeleteColumnParamSchema,
  ProjectsDeleteParamSchema,
  ProjectsGetCardParamSchema,
  ProjectsGetColumnParamSchema,
  ProjectsGetParamSchema,
  ProjectsGetPermissionForUserParamSchema,
  ProjectsListCardsParamSchema,
  ProjectsListCardsQuerySchema,
  ProjectsListCollaboratorsParamSchema,
  ProjectsListCollaboratorsQuerySchema,
  ProjectsListColumnsParamSchema,
  ProjectsListColumnsQuerySchema,
  ProjectsListForOrgParamSchema,
  ProjectsListForOrgQuerySchema,
  ProjectsListForRepoParamSchema,
  ProjectsListForRepoQuerySchema,
  ProjectsListForUserParamSchema,
  ProjectsListForUserQuerySchema,
  ProjectsMoveCardBodySchema,
  ProjectsMoveCardParamSchema,
  ProjectsMoveColumnBodySchema,
  ProjectsMoveColumnParamSchema,
  ProjectsRemoveCollaboratorParamSchema,
  ProjectsUpdateBodySchema,
  ProjectsUpdateCardBodySchema,
  ProjectsUpdateCardParamSchema,
  ProjectsUpdateColumnBodySchema,
  ProjectsUpdateColumnParamSchema,
  ProjectsUpdateParamSchema,
  PullsCheckIfMergedParamSchema,
  PullsCreateBodySchema,
  PullsCreateParamSchema,
  PullsCreateReplyForReviewCommentBodySchema,
  PullsCreateReplyForReviewCommentParamSchema,
  PullsCreateReviewBodySchema,
  PullsCreateReviewCommentBodySchema,
  PullsCreateReviewCommentParamSchema,
  PullsCreateReviewParamSchema,
  PullsDeletePendingReviewParamSchema,
  PullsDeleteReviewCommentParamSchema,
  PullsDismissReviewBodySchema,
  PullsDismissReviewParamSchema,
  PullsGetParamSchema,
  PullsGetReviewCommentParamSchema,
  PullsGetReviewParamSchema,
  PullsListCommentsForReviewParamSchema,
  PullsListCommentsForReviewQuerySchema,
  PullsListCommitsParamSchema,
  PullsListCommitsQuerySchema,
  PullsListFilesParamSchema,
  PullsListFilesQuerySchema,
  PullsListParamSchema,
  PullsListQuerySchema,
  PullsListRequestedReviewersParamSchema,
  PullsListRequestedReviewersQuerySchema,
  PullsListReviewCommentsForRepoParamSchema,
  PullsListReviewCommentsForRepoQuerySchema,
  PullsListReviewCommentsParamSchema,
  PullsListReviewCommentsQuerySchema,
  PullsListReviewsParamSchema,
  PullsListReviewsQuerySchema,
  PullsMergeBodySchema,
  PullsMergeParamSchema,
  PullsRemoveRequestedReviewersBodySchema,
  PullsRemoveRequestedReviewersParamSchema,
  PullsRequestReviewersBodySchema,
  PullsRequestReviewersParamSchema,
  PullsSubmitReviewBodySchema,
  PullsSubmitReviewParamSchema,
  PullsUpdateBodySchema,
  PullsUpdateBranchBodySchema,
  PullsUpdateBranchParamSchema,
  PullsUpdateParamSchema,
  PullsUpdateReviewBodySchema,
  PullsUpdateReviewCommentBodySchema,
  PullsUpdateReviewCommentParamSchema,
  PullsUpdateReviewParamSchema,
  ReactionsCreateForCommitCommentBodySchema,
  ReactionsCreateForCommitCommentParamSchema,
  ReactionsCreateForIssueBodySchema,
  ReactionsCreateForIssueCommentBodySchema,
  ReactionsCreateForIssueCommentParamSchema,
  ReactionsCreateForIssueParamSchema,
  ReactionsCreateForPullRequestReviewCommentBodySchema,
  ReactionsCreateForPullRequestReviewCommentParamSchema,
  ReactionsCreateForTeamDiscussionCommentInOrgBodySchema,
  ReactionsCreateForTeamDiscussionCommentInOrgParamSchema,
  ReactionsCreateForTeamDiscussionCommentLegacyBodySchema,
  ReactionsCreateForTeamDiscussionCommentLegacyParamSchema,
  ReactionsCreateForTeamDiscussionInOrgBodySchema,
  ReactionsCreateForTeamDiscussionInOrgParamSchema,
  ReactionsCreateForTeamDiscussionLegacyBodySchema,
  ReactionsCreateForTeamDiscussionLegacyParamSchema,
  ReactionsDeleteForCommitCommentParamSchema,
  ReactionsDeleteForIssueCommentParamSchema,
  ReactionsDeleteForIssueParamSchema,
  ReactionsDeleteForPullRequestCommentParamSchema,
  ReactionsDeleteForTeamDiscussionCommentParamSchema,
  ReactionsDeleteForTeamDiscussionParamSchema,
  ReactionsDeleteLegacyParamSchema,
  ReactionsListForCommitCommentParamSchema,
  ReactionsListForCommitCommentQuerySchema,
  ReactionsListForIssueCommentParamSchema,
  ReactionsListForIssueCommentQuerySchema,
  ReactionsListForIssueParamSchema,
  ReactionsListForIssueQuerySchema,
  ReactionsListForPullRequestReviewCommentParamSchema,
  ReactionsListForPullRequestReviewCommentQuerySchema,
  ReactionsListForTeamDiscussionCommentInOrgParamSchema,
  ReactionsListForTeamDiscussionCommentInOrgQuerySchema,
  ReactionsListForTeamDiscussionCommentLegacyParamSchema,
  ReactionsListForTeamDiscussionCommentLegacyQuerySchema,
  ReactionsListForTeamDiscussionInOrgParamSchema,
  ReactionsListForTeamDiscussionInOrgQuerySchema,
  ReactionsListForTeamDiscussionLegacyParamSchema,
  ReactionsListForTeamDiscussionLegacyQuerySchema,
  ReposAcceptInvitationParamSchema,
  ReposAddAppAccessRestrictionsBodySchema,
  ReposAddAppAccessRestrictionsParamSchema,
  ReposAddCollaboratorBodySchema,
  ReposAddCollaboratorParamSchema,
  ReposAddStatusCheckContextsBodySchema,
  ReposAddStatusCheckContextsParamSchema,
  ReposAddTeamAccessRestrictionsBodySchema,
  ReposAddTeamAccessRestrictionsParamSchema,
  ReposAddUserAccessRestrictionsBodySchema,
  ReposAddUserAccessRestrictionsParamSchema,
  ReposCheckCollaboratorParamSchema,
  ReposCheckVulnerabilityAlertsParamSchema,
  ReposCompareCommitsParamSchema,
  ReposCreateCommitCommentBodySchema,
  ReposCreateCommitCommentParamSchema,
  ReposCreateCommitSignatureProtectionParamSchema,
  ReposCreateCommitStatusBodySchema,
  ReposCreateCommitStatusParamSchema,
  ReposCreateDeployKeyBodySchema,
  ReposCreateDeployKeyParamSchema,
  ReposCreateDeploymentBodySchema,
  ReposCreateDeploymentParamSchema,
  ReposCreateDeploymentStatusBodySchema,
  ReposCreateDeploymentStatusParamSchema,
  ReposCreateDispatchEventBodySchema,
  ReposCreateDispatchEventParamSchema,
  ReposCreateForAuthenticatedUserBodySchema,
  ReposCreateForkBodySchema,
  ReposCreateForkParamSchema,
  ReposCreateInOrgBodySchema,
  ReposCreateInOrgParamSchema,
  ReposCreateOrUpdateFileContentsBodySchema,
  ReposCreateOrUpdateFileContentsParamSchema,
  ReposCreatePagesSiteBodySchema,
  ReposCreatePagesSiteParamSchema,
  ReposCreateReleaseBodySchema,
  ReposCreateReleaseParamSchema,
  ReposCreateUsingTemplateBodySchema,
  ReposCreateUsingTemplateParamSchema,
  ReposCreateWebhookBodySchema,
  ReposCreateWebhookParamSchema,
  ReposDeclineInvitationParamSchema,
  ReposDeleteAccessRestrictionsParamSchema,
  ReposDeleteAdminBranchProtectionParamSchema,
  ReposDeleteBranchProtectionParamSchema,
  ReposDeleteCommitCommentParamSchema,
  ReposDeleteCommitSignatureProtectionParamSchema,
  ReposDeleteDeployKeyParamSchema,
  ReposDeleteDeploymentParamSchema,
  ReposDeleteFileBodySchema,
  ReposDeleteFileParamSchema,
  ReposDeleteInvitationParamSchema,
  ReposDeletePagesSiteParamSchema,
  ReposDeleteParamSchema,
  ReposDeletePullRequestReviewProtectionParamSchema,
  ReposDeleteReleaseAssetParamSchema,
  ReposDeleteReleaseParamSchema,
  ReposDeleteWebhookParamSchema,
  ReposDisableAutomatedSecurityFixesParamSchema,
  ReposDisableVulnerabilityAlertsParamSchema,
  ReposDownloadArchiveParamSchema,
  ReposEnableAutomatedSecurityFixesParamSchema,
  ReposEnableVulnerabilityAlertsParamSchema,
  ReposGetAccessRestrictionsParamSchema,
  ReposGetAdminBranchProtectionParamSchema,
  ReposGetAllStatusCheckContextsParamSchema,
  ReposGetAllTopicsParamSchema,
  ReposGetAppsWithAccessToProtectedBranchParamSchema,
  ReposGetBranchParamSchema,
  ReposGetBranchProtectionParamSchema,
  ReposGetClonesParamSchema,
  ReposGetClonesQuerySchema,
  ReposGetCodeFrequencyStatsParamSchema,
  ReposGetCollaboratorPermissionLevelParamSchema,
  ReposGetCombinedStatusForRefParamSchema,
  ReposGetCommitActivityStatsParamSchema,
  ReposGetCommitCommentParamSchema,
  ReposGetCommitParamSchema,
  ReposGetCommitSignatureProtectionParamSchema,
  ReposGetCommunityProfileMetricsParamSchema,
  ReposGetContentParamSchema,
  ReposGetContentQuerySchema,
  ReposGetContributorsStatsParamSchema,
  ReposGetDeployKeyParamSchema,
  ReposGetDeploymentParamSchema,
  ReposGetDeploymentStatusParamSchema,
  ReposGetLatestPagesBuildParamSchema,
  ReposGetLatestReleaseParamSchema,
  ReposGetPagesBuildParamSchema,
  ReposGetPagesParamSchema,
  ReposGetParamSchema,
  ReposGetParticipationStatsParamSchema,
  ReposGetPullRequestReviewProtectionParamSchema,
  ReposGetPunchCardStatsParamSchema,
  ReposGetReadmeParamSchema,
  ReposGetReadmeQuerySchema,
  ReposGetReleaseAssetParamSchema,
  ReposGetReleaseByTagParamSchema,
  ReposGetReleaseParamSchema,
  ReposGetStatusChecksProtectionParamSchema,
  ReposGetTeamsWithAccessToProtectedBranchParamSchema,
  ReposGetTopPathsParamSchema,
  ReposGetTopReferrersParamSchema,
  ReposGetUsersWithAccessToProtectedBranchParamSchema,
  ReposGetViewsParamSchema,
  ReposGetViewsQuerySchema,
  ReposGetWebhookParamSchema,
  ReposListBranchesForHeadCommitParamSchema,
  ReposListBranchesParamSchema,
  ReposListBranchesQuerySchema,
  ReposListCollaboratorsParamSchema,
  ReposListCollaboratorsQuerySchema,
  ReposListCommentsForCommitParamSchema,
  ReposListCommentsForCommitQuerySchema,
  ReposListCommitCommentsForRepoParamSchema,
  ReposListCommitCommentsForRepoQuerySchema,
  ReposListCommitStatusesForRefParamSchema,
  ReposListCommitStatusesForRefQuerySchema,
  ReposListCommitsParamSchema,
  ReposListCommitsQuerySchema,
  ReposListContributorsParamSchema,
  ReposListContributorsQuerySchema,
  ReposListDeployKeysParamSchema,
  ReposListDeployKeysQuerySchema,
  ReposListDeploymentStatusesParamSchema,
  ReposListDeploymentStatusesQuerySchema,
  ReposListDeploymentsParamSchema,
  ReposListDeploymentsQuerySchema,
  ReposListForAuthenticatedUserQuerySchema,
  ReposListForOrgParamSchema,
  ReposListForOrgQuerySchema,
  ReposListForUserParamSchema,
  ReposListForUserQuerySchema,
  ReposListForksParamSchema,
  ReposListForksQuerySchema,
  ReposListInvitationsForAuthenticatedUserQuerySchema,
  ReposListInvitationsParamSchema,
  ReposListInvitationsQuerySchema,
  ReposListLanguagesParamSchema,
  ReposListPagesBuildsParamSchema,
  ReposListPagesBuildsQuerySchema,
  ReposListPublicQuerySchema,
  ReposListPullRequestsAssociatedWithCommitParamSchema,
  ReposListPullRequestsAssociatedWithCommitQuerySchema,
  ReposListReleaseAssetsParamSchema,
  ReposListReleaseAssetsQuerySchema,
  ReposListReleasesParamSchema,
  ReposListReleasesQuerySchema,
  ReposListTagsParamSchema,
  ReposListTagsQuerySchema,
  ReposListTeamsParamSchema,
  ReposListTeamsQuerySchema,
  ReposListWebhooksParamSchema,
  ReposListWebhooksQuerySchema,
  ReposMergeBodySchema,
  ReposMergeParamSchema,
  ReposPingWebhookParamSchema,
  ReposRemoveAppAccessRestrictionsBodySchema,
  ReposRemoveAppAccessRestrictionsParamSchema,
  ReposRemoveCollaboratorParamSchema,
  ReposRemoveStatusCheckContextsBodySchema,
  ReposRemoveStatusCheckContextsParamSchema,
  ReposRemoveStatusCheckProtectionParamSchema,
  ReposRemoveTeamAccessRestrictionsBodySchema,
  ReposRemoveTeamAccessRestrictionsParamSchema,
  ReposRemoveUserAccessRestrictionsBodySchema,
  ReposRemoveUserAccessRestrictionsParamSchema,
  ReposReplaceAllTopicsBodySchema,
  ReposReplaceAllTopicsParamSchema,
  ReposRequestPagesBuildParamSchema,
  ReposSetAdminBranchProtectionParamSchema,
  ReposSetAppAccessRestrictionsBodySchema,
  ReposSetAppAccessRestrictionsParamSchema,
  ReposSetStatusCheckContextsBodySchema,
  ReposSetStatusCheckContextsParamSchema,
  ReposSetTeamAccessRestrictionsBodySchema,
  ReposSetTeamAccessRestrictionsParamSchema,
  ReposSetUserAccessRestrictionsBodySchema,
  ReposSetUserAccessRestrictionsParamSchema,
  ReposTestPushWebhookParamSchema,
  ReposTransferBodySchema,
  ReposTransferParamSchema,
  ReposUpdateBodySchema,
  ReposUpdateBranchProtectionBodySchema,
  ReposUpdateBranchProtectionParamSchema,
  ReposUpdateCommitCommentBodySchema,
  ReposUpdateCommitCommentParamSchema,
  ReposUpdateInformationAboutPagesSiteBodySchema,
  ReposUpdateInformationAboutPagesSiteParamSchema,
  ReposUpdateInvitationBodySchema,
  ReposUpdateInvitationParamSchema,
  ReposUpdateParamSchema,
  ReposUpdatePullRequestReviewProtectionBodySchema,
  ReposUpdatePullRequestReviewProtectionParamSchema,
  ReposUpdateReleaseAssetBodySchema,
  ReposUpdateReleaseAssetParamSchema,
  ReposUpdateReleaseBodySchema,
  ReposUpdateReleaseParamSchema,
  ReposUpdateStatusCheckPotectionBodySchema,
  ReposUpdateStatusCheckPotectionParamSchema,
  ReposUpdateWebhookBodySchema,
  ReposUpdateWebhookParamSchema,
  ReposUploadReleaseAssetBodySchema,
  ReposUploadReleaseAssetParamSchema,
  ReposUploadReleaseAssetQuerySchema,
  ScimDeleteUserFromOrgParamSchema,
  ScimGetProvisioningInformationForUserParamSchema,
  ScimListProvisionedIdentitiesParamSchema,
  ScimListProvisionedIdentitiesQuerySchema,
  ScimProvisionAndInviteUserParamSchema,
  ScimSetInformationForProvisionedUserParamSchema,
  ScimUpdateAttributeForUserParamSchema,
  SearchCodeQuerySchema,
  SearchCommitsQuerySchema,
  SearchIssuesAndPullRequestsQuerySchema,
  SearchLabelsQuerySchema,
  SearchReposQuerySchema,
  SearchTopicsQuerySchema,
  SearchUsersQuerySchema,
  TeamsAddMemberLegacyParamSchema,
  TeamsAddOrUpdateMembershipForUserInOrgBodySchema,
  TeamsAddOrUpdateMembershipForUserInOrgParamSchema,
  TeamsAddOrUpdateMembershipForUserLegacyBodySchema,
  TeamsAddOrUpdateMembershipForUserLegacyParamSchema,
  TeamsAddOrUpdateProjectPermissionsInOrgBodySchema,
  TeamsAddOrUpdateProjectPermissionsInOrgParamSchema,
  TeamsAddOrUpdateProjectPermissionsLegacyBodySchema,
  TeamsAddOrUpdateProjectPermissionsLegacyParamSchema,
  TeamsAddOrUpdateRepoPermissionsInOrgBodySchema,
  TeamsAddOrUpdateRepoPermissionsInOrgParamSchema,
  TeamsAddOrUpdateRepoPermissionsLegacyBodySchema,
  TeamsAddOrUpdateRepoPermissionsLegacyParamSchema,
  TeamsCheckPermissionsForProjectInOrgParamSchema,
  TeamsCheckPermissionsForProjectLegacyParamSchema,
  TeamsCheckPermissionsForRepoInOrgParamSchema,
  TeamsCheckPermissionsForRepoLegacyParamSchema,
  TeamsCreateBodySchema,
  TeamsCreateDiscussionCommentInOrgBodySchema,
  TeamsCreateDiscussionCommentInOrgParamSchema,
  TeamsCreateDiscussionCommentLegacyBodySchema,
  TeamsCreateDiscussionCommentLegacyParamSchema,
  TeamsCreateDiscussionInOrgBodySchema,
  TeamsCreateDiscussionInOrgParamSchema,
  TeamsCreateDiscussionLegacyBodySchema,
  TeamsCreateDiscussionLegacyParamSchema,
  TeamsCreateOrUpdateIdPGroupConnectionsInOrgBodySchema,
  TeamsCreateOrUpdateIdPGroupConnectionsInOrgParamSchema,
  TeamsCreateOrUpdateIdPGroupConnectionsLegacyBodySchema,
  TeamsCreateOrUpdateIdPGroupConnectionsLegacyParamSchema,
  TeamsCreateParamSchema,
  TeamsDeleteDiscussionCommentInOrgParamSchema,
  TeamsDeleteDiscussionCommentLegacyParamSchema,
  TeamsDeleteDiscussionInOrgParamSchema,
  TeamsDeleteDiscussionLegacyParamSchema,
  TeamsDeleteInOrgParamSchema,
  TeamsDeleteLegacyParamSchema,
  TeamsGetByNameParamSchema,
  TeamsGetDiscussionCommentInOrgParamSchema,
  TeamsGetDiscussionCommentLegacyParamSchema,
  TeamsGetDiscussionInOrgParamSchema,
  TeamsGetDiscussionLegacyParamSchema,
  TeamsGetLegacyParamSchema,
  TeamsGetMemberLegacyParamSchema,
  TeamsGetMembershipForUserInOrgParamSchema,
  TeamsGetMembershipForUserLegacyParamSchema,
  TeamsListChildInOrgParamSchema,
  TeamsListChildInOrgQuerySchema,
  TeamsListChildLegacyParamSchema,
  TeamsListChildLegacyQuerySchema,
  TeamsListDiscussionCommentsInOrgParamSchema,
  TeamsListDiscussionCommentsInOrgQuerySchema,
  TeamsListDiscussionCommentsLegacyParamSchema,
  TeamsListDiscussionCommentsLegacyQuerySchema,
  TeamsListDiscussionsInOrgParamSchema,
  TeamsListDiscussionsInOrgQuerySchema,
  TeamsListDiscussionsLegacyParamSchema,
  TeamsListDiscussionsLegacyQuerySchema,
  TeamsListForAuthenticatedUserQuerySchema,
  TeamsListIdPGroupsForLegacyParamSchema,
  TeamsListIdPGroupsForOrgParamSchema,
  TeamsListIdPGroupsForOrgQuerySchema,
  TeamsListIdPGroupsInOrgParamSchema,
  TeamsListMembersInOrgParamSchema,
  TeamsListMembersInOrgQuerySchema,
  TeamsListMembersLegacyParamSchema,
  TeamsListMembersLegacyQuerySchema,
  TeamsListParamSchema,
  TeamsListPendingInvitationsInOrgParamSchema,
  TeamsListPendingInvitationsInOrgQuerySchema,
  TeamsListPendingInvitationsLegacyParamSchema,
  TeamsListPendingInvitationsLegacyQuerySchema,
  TeamsListProjectsInOrgParamSchema,
  TeamsListProjectsInOrgQuerySchema,
  TeamsListProjectsLegacyParamSchema,
  TeamsListProjectsLegacyQuerySchema,
  TeamsListQuerySchema,
  TeamsListReposInOrgParamSchema,
  TeamsListReposInOrgQuerySchema,
  TeamsListReposLegacyParamSchema,
  TeamsListReposLegacyQuerySchema,
  TeamsRemoveMemberLegacyParamSchema,
  TeamsRemoveMembershipForUserInOrgParamSchema,
  TeamsRemoveMembershipForUserLegacyParamSchema,
  TeamsRemoveProjectInOrgParamSchema,
  TeamsRemoveProjectLegacyParamSchema,
  TeamsRemoveRepoInOrgParamSchema,
  TeamsRemoveRepoLegacyParamSchema,
  TeamsUpdateDiscussionCommentInOrgBodySchema,
  TeamsUpdateDiscussionCommentInOrgParamSchema,
  TeamsUpdateDiscussionCommentLegacyBodySchema,
  TeamsUpdateDiscussionCommentLegacyParamSchema,
  TeamsUpdateDiscussionInOrgBodySchema,
  TeamsUpdateDiscussionInOrgParamSchema,
  TeamsUpdateDiscussionLegacyBodySchema,
  TeamsUpdateDiscussionLegacyParamSchema,
  TeamsUpdateInOrgBodySchema,
  TeamsUpdateInOrgParamSchema,
  TeamsUpdateLegacyBodySchema,
  TeamsUpdateLegacyParamSchema,
  UsersAddEmailForAuthenticatedBodySchema,
  UsersBlockParamSchema,
  UsersCheckBlockedParamSchema,
  UsersCheckFollowingForUserParamSchema,
  UsersCheckPersonIsFollowedByAuthenticatedParamSchema,
  UsersCreateGpgKeyForAuthenticatedBodySchema,
  UsersCreatePublicSshKeyForAuthenticatedBodySchema,
  UsersDeleteEmailForAuthenticatedBodySchema,
  UsersDeleteGpgKeyForAuthenticatedParamSchema,
  UsersDeletePublicSshKeyForAuthenticatedParamSchema,
  UsersFollowParamSchema,
  UsersGetByUsernameParamSchema,
  UsersGetContextForUserParamSchema,
  UsersGetContextForUserQuerySchema,
  UsersGetGpgKeyForAuthenticatedParamSchema,
  UsersGetPublicSshKeyForAuthenticatedParamSchema,
  UsersListEmailsForAuthenticatedQuerySchema,
  UsersListFollowedByAuthenticatedQuerySchema,
  UsersListFollowersForAuthenticatedUserQuerySchema,
  UsersListFollowersForUserParamSchema,
  UsersListFollowersForUserQuerySchema,
  UsersListFollowingForUserParamSchema,
  UsersListFollowingForUserQuerySchema,
  UsersListGpgKeysForAuthenticatedQuerySchema,
  UsersListGpgKeysForUserParamSchema,
  UsersListGpgKeysForUserQuerySchema,
  UsersListPublicEmailsForAuthenticatedQuerySchema,
  UsersListPublicKeysForUserParamSchema,
  UsersListPublicKeysForUserQuerySchema,
  UsersListPublicSshKeysForAuthenticatedQuerySchema,
  UsersListQuerySchema,
  UsersSetPrimaryEmailVisibilityForAuthenticatedBodySchema,
  UsersUnblockParamSchema,
  UsersUnfollowParamSchema,
  UsersUpdateAuthenticatedBodySchema,
} from "./models"
import joi from "@hapi/joi"
import cors from "@koa/cors"
import KoaRouter from "@koa/router"
import Koa, { Context, Middleware, Next } from "koa"
import koaBody from "koa-body"

//region safe-edit-region-header
//endregion safe-edit-region-header

function paramValidationFactory<Type>(
  schema: joi.Schema
): Middleware<{ params: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.validate(ctx.params, { stripUnknown: true })

    if (result.error) {
      throw new Error("validation error")
    }

    ctx.state.params = result.value

    return next()
  }
}

function queryValidationFactory<Type>(
  schema: joi.Schema
): Middleware<{ query: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.validate(ctx.query, { stripUnknown: true })

    if (result.error) {
      throw new Error("validation error")
    }

    ctx.state.query = result.value

    return next()
  }
}

function bodyValidationFactory<Type>(
  schema: joi.Schema
): Middleware<{ body: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.validate(ctx.request.body, { stripUnknown: true })

    if (result.error) {
      throw new Error("validation error")
    }

    ctx.state.body = result.value

    return next()
  }
}

interface ValidatedCtx<Params, Query, Body> extends Context {
  state: { params: Params; query: Query; body: Body }
}

const PORT = 3000

// ApiClient
const server = new Koa()

server.use(cors())
server.use(koaBody())

const router = new KoaRouter()

router.get(
  "appsGetAuthenticated",
  "/app",
  async (ctx: ValidatedCtx<void, void, void>, next) => {
    //region safe-edit-region-appsGetAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetAuthenticated
  }
)

const appsCreateFromManifestParamSchema = joi
  .object()
  .keys({ code: joi.string().required() })
  .required()

router.post(
  "appsCreateFromManifest",
  "/app-manifests/:code/conversions",
  paramValidationFactory<AppsCreateFromManifestParamSchema>(
    appsCreateFromManifestParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsCreateFromManifestParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsCreateFromManifest

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCreateFromManifest
  }
)

const appsListInstallationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "appsListInstallations",
  "/app/installations",
  queryValidationFactory<AppsListInstallationsQuerySchema>(
    appsListInstallationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, AppsListInstallationsQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-appsListInstallations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListInstallations
  }
)

const appsGetInstallationParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })
  .required()

router.get(
  "appsGetInstallation",
  "/app/installations/:installationId",
  paramValidationFactory<AppsGetInstallationParamSchema>(
    appsGetInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsGetInstallationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsGetInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetInstallation
  }
)

const appsDeleteInstallationParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })
  .required()

router.delete(
  "appsDeleteInstallation",
  "/app/installations/:installationId",
  paramValidationFactory<AppsDeleteInstallationParamSchema>(
    appsDeleteInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsDeleteInstallationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsDeleteInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsDeleteInstallation
  }
)

const appsCreateInstallationAccessTokenParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })
  .required()

const appsCreateInstallationAccessTokenBodySchema = joi
  .object()
  .keys({
    repository_ids: joi.array().items(joi.number()),
    permissions: joi.object().keys({}),
  })
  .required()

router.post(
  "appsCreateInstallationAccessToken",
  "/app/installations/:installationId/access_tokens",
  paramValidationFactory<AppsCreateInstallationAccessTokenParamSchema>(
    appsCreateInstallationAccessTokenParamSchema
  ),
  bodyValidationFactory<AppsCreateInstallationAccessTokenBodySchema>(
    appsCreateInstallationAccessTokenBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      AppsCreateInstallationAccessTokenParamSchema,
      void,
      AppsCreateInstallationAccessTokenBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-appsCreateInstallationAccessToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCreateInstallationAccessToken
  }
)

const appsSuspendInstallationParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })
  .required()

router.put(
  "appsSuspendInstallation",
  "/app/installations/:installationId/suspended",
  paramValidationFactory<AppsSuspendInstallationParamSchema>(
    appsSuspendInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsSuspendInstallationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsSuspendInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsSuspendInstallation
  }
)

const appsUnsuspendInstallationParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })
  .required()

router.delete(
  "appsUnsuspendInstallation",
  "/app/installations/:installationId/suspended",
  paramValidationFactory<AppsUnsuspendInstallationParamSchema>(
    appsUnsuspendInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsUnsuspendInstallationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsUnsuspendInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsUnsuspendInstallation
  }
)

const oauthAuthorizationsListGrantsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "oauthAuthorizationsListGrants",
  "/applications/grants",
  queryValidationFactory<OauthAuthorizationsListGrantsQuerySchema>(
    oauthAuthorizationsListGrantsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, OauthAuthorizationsListGrantsQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-oauthAuthorizationsListGrants

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsListGrants
  }
)

const oauthAuthorizationsGetGrantParamSchema = joi
  .object()
  .keys({ grant_id: joi.number().required() })
  .required()

router.get(
  "oauthAuthorizationsGetGrant",
  "/applications/grants/:grantId",
  paramValidationFactory<OauthAuthorizationsGetGrantParamSchema>(
    oauthAuthorizationsGetGrantParamSchema
  ),
  async (
    ctx: ValidatedCtx<OauthAuthorizationsGetGrantParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-oauthAuthorizationsGetGrant

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsGetGrant
  }
)

const oauthAuthorizationsDeleteGrantParamSchema = joi
  .object()
  .keys({ grant_id: joi.number().required() })
  .required()

router.delete(
  "oauthAuthorizationsDeleteGrant",
  "/applications/grants/:grantId",
  paramValidationFactory<OauthAuthorizationsDeleteGrantParamSchema>(
    oauthAuthorizationsDeleteGrantParamSchema
  ),
  async (
    ctx: ValidatedCtx<OauthAuthorizationsDeleteGrantParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-oauthAuthorizationsDeleteGrant

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsDeleteGrant
  }
)

const appsDeleteAuthorizationParamSchema = joi
  .object()
  .keys({ client_id: joi.string().required() })
  .required()

const appsDeleteAuthorizationBodySchema = joi
  .object()
  .keys({ access_token: joi.string() })
  .required()

router.delete(
  "appsDeleteAuthorization",
  "/applications/:clientId/grant",
  paramValidationFactory<AppsDeleteAuthorizationParamSchema>(
    appsDeleteAuthorizationParamSchema
  ),
  bodyValidationFactory<AppsDeleteAuthorizationBodySchema>(
    appsDeleteAuthorizationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      AppsDeleteAuthorizationParamSchema,
      void,
      AppsDeleteAuthorizationBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-appsDeleteAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsDeleteAuthorization
  }
)

const appsRevokeGrantForApplicationParamSchema = joi
  .object()
  .keys({
    client_id: joi.string().required(),
    access_token: joi.string().required(),
  })
  .required()

router.delete(
  "appsRevokeGrantForApplication",
  "/applications/:clientId/grants/:accessToken",
  paramValidationFactory<AppsRevokeGrantForApplicationParamSchema>(
    appsRevokeGrantForApplicationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsRevokeGrantForApplicationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsRevokeGrantForApplication

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsRevokeGrantForApplication
  }
)

const appsCheckTokenParamSchema = joi
  .object()
  .keys({ client_id: joi.string().required() })
  .required()

const appsCheckTokenBodySchema = joi
  .object()
  .keys({ access_token: joi.string() })
  .required()

router.post(
  "appsCheckToken",
  "/applications/:clientId/token",
  paramValidationFactory<AppsCheckTokenParamSchema>(appsCheckTokenParamSchema),
  bodyValidationFactory<AppsCheckTokenBodySchema>(appsCheckTokenBodySchema),
  async (
    ctx: ValidatedCtx<
      AppsCheckTokenParamSchema,
      void,
      AppsCheckTokenBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-appsCheckToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCheckToken
  }
)

const appsResetTokenParamSchema = joi
  .object()
  .keys({ client_id: joi.string().required() })
  .required()

const appsResetTokenBodySchema = joi
  .object()
  .keys({ access_token: joi.string() })
  .required()

router.patch(
  "appsResetToken",
  "/applications/:clientId/token",
  paramValidationFactory<AppsResetTokenParamSchema>(appsResetTokenParamSchema),
  bodyValidationFactory<AppsResetTokenBodySchema>(appsResetTokenBodySchema),
  async (
    ctx: ValidatedCtx<
      AppsResetTokenParamSchema,
      void,
      AppsResetTokenBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-appsResetToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsResetToken
  }
)

const appsDeleteTokenParamSchema = joi
  .object()
  .keys({ client_id: joi.string().required() })
  .required()

const appsDeleteTokenBodySchema = joi
  .object()
  .keys({ access_token: joi.string() })
  .required()

router.delete(
  "appsDeleteToken",
  "/applications/:clientId/token",
  paramValidationFactory<AppsDeleteTokenParamSchema>(
    appsDeleteTokenParamSchema
  ),
  bodyValidationFactory<AppsDeleteTokenBodySchema>(appsDeleteTokenBodySchema),
  async (
    ctx: ValidatedCtx<
      AppsDeleteTokenParamSchema,
      void,
      AppsDeleteTokenBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-appsDeleteToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsDeleteToken
  }
)

const appsCheckAuthorizationParamSchema = joi
  .object()
  .keys({
    client_id: joi.string().required(),
    access_token: joi.string().required(),
  })
  .required()

router.get(
  "appsCheckAuthorization",
  "/applications/:clientId/tokens/:accessToken",
  paramValidationFactory<AppsCheckAuthorizationParamSchema>(
    appsCheckAuthorizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsCheckAuthorizationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsCheckAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCheckAuthorization
  }
)

const appsResetAuthorizationParamSchema = joi
  .object()
  .keys({
    client_id: joi.string().required(),
    access_token: joi.string().required(),
  })
  .required()

router.post(
  "appsResetAuthorization",
  "/applications/:clientId/tokens/:accessToken",
  paramValidationFactory<AppsResetAuthorizationParamSchema>(
    appsResetAuthorizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsResetAuthorizationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsResetAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsResetAuthorization
  }
)

const appsRevokeAuthorizationForApplicationParamSchema = joi
  .object()
  .keys({
    client_id: joi.string().required(),
    access_token: joi.string().required(),
  })
  .required()

router.delete(
  "appsRevokeAuthorizationForApplication",
  "/applications/:clientId/tokens/:accessToken",
  paramValidationFactory<AppsRevokeAuthorizationForApplicationParamSchema>(
    appsRevokeAuthorizationForApplicationParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      AppsRevokeAuthorizationForApplicationParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-appsRevokeAuthorizationForApplication

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsRevokeAuthorizationForApplication
  }
)

const appsGetBySlugParamSchema = joi
  .object()
  .keys({ app_slug: joi.string().required() })
  .required()

router.get(
  "appsGetBySlug",
  "/apps/:appSlug",
  paramValidationFactory<AppsGetBySlugParamSchema>(appsGetBySlugParamSchema),
  async (ctx: ValidatedCtx<AppsGetBySlugParamSchema, void, void>, next) => {
    //region safe-edit-region-appsGetBySlug

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetBySlug
  }
)

const oauthAuthorizationsListAuthorizationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "oauthAuthorizationsListAuthorizations",
  "/authorizations",
  queryValidationFactory<OauthAuthorizationsListAuthorizationsQuerySchema>(
    oauthAuthorizationsListAuthorizationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      OauthAuthorizationsListAuthorizationsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-oauthAuthorizationsListAuthorizations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsListAuthorizations
  }
)

const oauthAuthorizationsCreateAuthorizationBodySchema = joi
  .object()
  .keys({
    scopes: joi.array().items(joi.string()),
    note: joi.string().required(),
    note_url: joi.string(),
    client_id: joi.string(),
    client_secret: joi.string(),
    fingerprint: joi.string(),
  })
  .required()

router.post(
  "oauthAuthorizationsCreateAuthorization",
  "/authorizations",
  bodyValidationFactory<OauthAuthorizationsCreateAuthorizationBodySchema>(
    oauthAuthorizationsCreateAuthorizationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      OauthAuthorizationsCreateAuthorizationBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-oauthAuthorizationsCreateAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsCreateAuthorization
  }
)

const oauthAuthorizationsGetOrCreateAuthorizationForAppParamSchema = joi
  .object()
  .keys({ client_id: joi.string().required() })
  .required()

const oauthAuthorizationsGetOrCreateAuthorizationForAppBodySchema = joi
  .object()
  .keys({
    client_secret: joi.string().required(),
    scopes: joi.array().items(joi.string()),
    note: joi.string(),
    note_url: joi.string(),
    fingerprint: joi.string(),
  })
  .required()

router.put(
  "oauthAuthorizationsGetOrCreateAuthorizationForApp",
  "/authorizations/clients/:clientId",
  paramValidationFactory<OauthAuthorizationsGetOrCreateAuthorizationForAppParamSchema>(
    oauthAuthorizationsGetOrCreateAuthorizationForAppParamSchema
  ),
  bodyValidationFactory<OauthAuthorizationsGetOrCreateAuthorizationForAppBodySchema>(
    oauthAuthorizationsGetOrCreateAuthorizationForAppBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      OauthAuthorizationsGetOrCreateAuthorizationForAppParamSchema,
      void,
      OauthAuthorizationsGetOrCreateAuthorizationForAppBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-oauthAuthorizationsGetOrCreateAuthorizationForApp

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsGetOrCreateAuthorizationForApp
  }
)

const oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParamSchema =
  joi
    .object()
    .keys({
      client_id: joi.string().required(),
      fingerprint: joi.string().required(),
    })
    .required()

const oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintBodySchema =
  joi
    .object()
    .keys({
      client_secret: joi.string().required(),
      scopes: joi.array().items(joi.string()),
      note: joi.string(),
      note_url: joi.string(),
    })
    .required()

router.put(
  "oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint",
  "/authorizations/clients/:clientId/:fingerprint",
  paramValidationFactory<OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParamSchema>(
    oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParamSchema
  ),
  bodyValidationFactory<OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintBodySchema>(
    oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintParamSchema,
      void,
      OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint
  }
)

const oauthAuthorizationsGetAuthorizationParamSchema = joi
  .object()
  .keys({ authorization_id: joi.number().required() })
  .required()

router.get(
  "oauthAuthorizationsGetAuthorization",
  "/authorizations/:authorizationId",
  paramValidationFactory<OauthAuthorizationsGetAuthorizationParamSchema>(
    oauthAuthorizationsGetAuthorizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      OauthAuthorizationsGetAuthorizationParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-oauthAuthorizationsGetAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsGetAuthorization
  }
)

const oauthAuthorizationsUpdateAuthorizationParamSchema = joi
  .object()
  .keys({ authorization_id: joi.number().required() })
  .required()

const oauthAuthorizationsUpdateAuthorizationBodySchema = joi
  .object()
  .keys({
    scopes: joi.array().items(joi.string()),
    add_scopes: joi.array().items(joi.string()),
    remove_scopes: joi.array().items(joi.string()),
    note: joi.string(),
    note_url: joi.string(),
    fingerprint: joi.string(),
  })
  .required()

router.patch(
  "oauthAuthorizationsUpdateAuthorization",
  "/authorizations/:authorizationId",
  paramValidationFactory<OauthAuthorizationsUpdateAuthorizationParamSchema>(
    oauthAuthorizationsUpdateAuthorizationParamSchema
  ),
  bodyValidationFactory<OauthAuthorizationsUpdateAuthorizationBodySchema>(
    oauthAuthorizationsUpdateAuthorizationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      OauthAuthorizationsUpdateAuthorizationParamSchema,
      void,
      OauthAuthorizationsUpdateAuthorizationBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-oauthAuthorizationsUpdateAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsUpdateAuthorization
  }
)

const oauthAuthorizationsDeleteAuthorizationParamSchema = joi
  .object()
  .keys({ authorization_id: joi.number().required() })
  .required()

router.delete(
  "oauthAuthorizationsDeleteAuthorization",
  "/authorizations/:authorizationId",
  paramValidationFactory<OauthAuthorizationsDeleteAuthorizationParamSchema>(
    oauthAuthorizationsDeleteAuthorizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      OauthAuthorizationsDeleteAuthorizationParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-oauthAuthorizationsDeleteAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-oauthAuthorizationsDeleteAuthorization
  }
)

router.get(
  "codesOfConductGetAllCodesOfConduct",
  "/codes_of_conduct",
  async (ctx: ValidatedCtx<void, void, void>, next) => {
    //region safe-edit-region-codesOfConductGetAllCodesOfConduct

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codesOfConductGetAllCodesOfConduct
  }
)

const codesOfConductGetConductCodeParamSchema = joi
  .object()
  .keys({ key: joi.string().required() })
  .required()

router.get(
  "codesOfConductGetConductCode",
  "/codes_of_conduct/:key",
  paramValidationFactory<CodesOfConductGetConductCodeParamSchema>(
    codesOfConductGetConductCodeParamSchema
  ),
  async (
    ctx: ValidatedCtx<CodesOfConductGetConductCodeParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-codesOfConductGetConductCode

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codesOfConductGetConductCode
  }
)

const appsCreateContentAttachmentParamSchema = joi
  .object()
  .keys({ content_reference_id: joi.number().required() })
  .required()

const appsCreateContentAttachmentBodySchema = joi
  .object()
  .keys({ title: joi.string().required(), body: joi.string().required() })
  .required()

router.post(
  "appsCreateContentAttachment",
  "/content_references/:contentReferenceId/attachments",
  paramValidationFactory<AppsCreateContentAttachmentParamSchema>(
    appsCreateContentAttachmentParamSchema
  ),
  bodyValidationFactory<AppsCreateContentAttachmentBodySchema>(
    appsCreateContentAttachmentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      AppsCreateContentAttachmentParamSchema,
      void,
      AppsCreateContentAttachmentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-appsCreateContentAttachment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsCreateContentAttachment
  }
)

router.get(
  "emojisGet",
  "/emojis",
  async (ctx: ValidatedCtx<void, void, void>, next) => {
    //region safe-edit-region-emojisGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-emojisGet
  }
)

const activityListPublicEventsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListPublicEvents",
  "/events",
  queryValidationFactory<ActivityListPublicEventsQuerySchema>(
    activityListPublicEventsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, ActivityListPublicEventsQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-activityListPublicEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicEvents
  }
)

router.get(
  "activityGetFeeds",
  "/feeds",
  async (ctx: ValidatedCtx<void, void, void>, next) => {
    //region safe-edit-region-activityGetFeeds

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityGetFeeds
  }
)

const gistsListQuerySchema = joi
  .object()
  .keys({ since: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "gistsList",
  "/gists",
  queryValidationFactory<GistsListQuerySchema>(gistsListQuerySchema),
  async (ctx: ValidatedCtx<void, GistsListQuerySchema, void>, next) => {
    //region safe-edit-region-gistsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsList
  }
)

const gistsCreateBodySchema = joi
  .object()
  .keys({
    files: joi.object().keys({}).required(),
    description: joi.string(),
    public: joi.boolean(),
  })
  .required()

router.post(
  "gistsCreate",
  "/gists",
  bodyValidationFactory<GistsCreateBodySchema>(gistsCreateBodySchema),
  async (ctx: ValidatedCtx<void, void, GistsCreateBodySchema>, next) => {
    //region safe-edit-region-gistsCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsCreate
  }
)

const gistsListPublicQuerySchema = joi
  .object()
  .keys({ since: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "gistsListPublic",
  "/gists/public",
  queryValidationFactory<GistsListPublicQuerySchema>(
    gistsListPublicQuerySchema
  ),
  async (ctx: ValidatedCtx<void, GistsListPublicQuerySchema, void>, next) => {
    //region safe-edit-region-gistsListPublic

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListPublic
  }
)

const gistsListStarredQuerySchema = joi
  .object()
  .keys({ since: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "gistsListStarred",
  "/gists/starred",
  queryValidationFactory<GistsListStarredQuerySchema>(
    gistsListStarredQuerySchema
  ),
  async (ctx: ValidatedCtx<void, GistsListStarredQuerySchema, void>, next) => {
    //region safe-edit-region-gistsListStarred

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListStarred
  }
)

const gistsGetParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })
  .required()

router.get(
  "gistsGet",
  "/gists/:gistId",
  paramValidationFactory<GistsGetParamSchema>(gistsGetParamSchema),
  async (ctx: ValidatedCtx<GistsGetParamSchema, void, void>, next) => {
    //region safe-edit-region-gistsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsGet
  }
)

const gistsUpdateParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })
  .required()

const gistsUpdateBodySchema = joi
  .object()
  .keys({ description: joi.string(), files: joi.object().keys({}) })
  .required()

router.patch(
  "gistsUpdate",
  "/gists/:gistId",
  paramValidationFactory<GistsUpdateParamSchema>(gistsUpdateParamSchema),
  bodyValidationFactory<GistsUpdateBodySchema>(gistsUpdateBodySchema),
  async (
    ctx: ValidatedCtx<GistsUpdateParamSchema, void, GistsUpdateBodySchema>,
    next
  ) => {
    //region safe-edit-region-gistsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsUpdate
  }
)

const gistsDeleteParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })
  .required()

router.delete(
  "gistsDelete",
  "/gists/:gistId",
  paramValidationFactory<GistsDeleteParamSchema>(gistsDeleteParamSchema),
  async (ctx: ValidatedCtx<GistsDeleteParamSchema, void, void>, next) => {
    //region safe-edit-region-gistsDelete

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsDelete
  }
)

const gistsListCommentsParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })
  .required()

const gistsListCommentsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "gistsListComments",
  "/gists/:gistId/comments",
  paramValidationFactory<GistsListCommentsParamSchema>(
    gistsListCommentsParamSchema
  ),
  queryValidationFactory<GistsListCommentsQuerySchema>(
    gistsListCommentsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      GistsListCommentsParamSchema,
      GistsListCommentsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-gistsListComments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListComments
  }
)

const gistsCreateCommentParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })
  .required()

const gistsCreateCommentBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.post(
  "gistsCreateComment",
  "/gists/:gistId/comments",
  paramValidationFactory<GistsCreateCommentParamSchema>(
    gistsCreateCommentParamSchema
  ),
  bodyValidationFactory<GistsCreateCommentBodySchema>(
    gistsCreateCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      GistsCreateCommentParamSchema,
      void,
      GistsCreateCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-gistsCreateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsCreateComment
  }
)

const gistsGetCommentParamSchema = joi
  .object()
  .keys({
    gist_id: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

router.get(
  "gistsGetComment",
  "/gists/:gistId/comments/:commentId",
  paramValidationFactory<GistsGetCommentParamSchema>(
    gistsGetCommentParamSchema
  ),
  async (ctx: ValidatedCtx<GistsGetCommentParamSchema, void, void>, next) => {
    //region safe-edit-region-gistsGetComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsGetComment
  }
)

const gistsUpdateCommentParamSchema = joi
  .object()
  .keys({
    gist_id: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

const gistsUpdateCommentBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.patch(
  "gistsUpdateComment",
  "/gists/:gistId/comments/:commentId",
  paramValidationFactory<GistsUpdateCommentParamSchema>(
    gistsUpdateCommentParamSchema
  ),
  bodyValidationFactory<GistsUpdateCommentBodySchema>(
    gistsUpdateCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      GistsUpdateCommentParamSchema,
      void,
      GistsUpdateCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-gistsUpdateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsUpdateComment
  }
)

const gistsDeleteCommentParamSchema = joi
  .object()
  .keys({
    gist_id: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

router.delete(
  "gistsDeleteComment",
  "/gists/:gistId/comments/:commentId",
  paramValidationFactory<GistsDeleteCommentParamSchema>(
    gistsDeleteCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<GistsDeleteCommentParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-gistsDeleteComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsDeleteComment
  }
)

const gistsListCommitsParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })
  .required()

const gistsListCommitsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "gistsListCommits",
  "/gists/:gistId/commits",
  paramValidationFactory<GistsListCommitsParamSchema>(
    gistsListCommitsParamSchema
  ),
  queryValidationFactory<GistsListCommitsQuerySchema>(
    gistsListCommitsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      GistsListCommitsParamSchema,
      GistsListCommitsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-gistsListCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListCommits
  }
)

const gistsForkParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })
  .required()

router.post(
  "gistsFork",
  "/gists/:gistId/forks",
  paramValidationFactory<GistsForkParamSchema>(gistsForkParamSchema),
  async (ctx: ValidatedCtx<GistsForkParamSchema, void, void>, next) => {
    //region safe-edit-region-gistsFork

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsFork
  }
)

const gistsListForksParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })
  .required()

const gistsListForksQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "gistsListForks",
  "/gists/:gistId/forks",
  paramValidationFactory<GistsListForksParamSchema>(gistsListForksParamSchema),
  queryValidationFactory<GistsListForksQuerySchema>(gistsListForksQuerySchema),
  async (
    ctx: ValidatedCtx<
      GistsListForksParamSchema,
      GistsListForksQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-gistsListForks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListForks
  }
)

const gistsStarParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })
  .required()

router.put(
  "gistsStar",
  "/gists/:gistId/star",
  paramValidationFactory<GistsStarParamSchema>(gistsStarParamSchema),
  async (ctx: ValidatedCtx<GistsStarParamSchema, void, void>, next) => {
    //region safe-edit-region-gistsStar

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsStar
  }
)

const gistsUnstarParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })
  .required()

router.delete(
  "gistsUnstar",
  "/gists/:gistId/star",
  paramValidationFactory<GistsUnstarParamSchema>(gistsUnstarParamSchema),
  async (ctx: ValidatedCtx<GistsUnstarParamSchema, void, void>, next) => {
    //region safe-edit-region-gistsUnstar

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsUnstar
  }
)

const gistsCheckIsStarredParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required() })
  .required()

router.get(
  "gistsCheckIsStarred",
  "/gists/:gistId/star",
  paramValidationFactory<GistsCheckIsStarredParamSchema>(
    gistsCheckIsStarredParamSchema
  ),
  async (
    ctx: ValidatedCtx<GistsCheckIsStarredParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-gistsCheckIsStarred

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsCheckIsStarred
  }
)

const gistsGetRevisionParamSchema = joi
  .object()
  .keys({ gist_id: joi.string().required(), sha: joi.string().required() })
  .required()

router.get(
  "gistsGetRevision",
  "/gists/:gistId/:sha",
  paramValidationFactory<GistsGetRevisionParamSchema>(
    gistsGetRevisionParamSchema
  ),
  async (ctx: ValidatedCtx<GistsGetRevisionParamSchema, void, void>, next) => {
    //region safe-edit-region-gistsGetRevision

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsGetRevision
  }
)

router.get(
  "gitignoreGetAllTemplates",
  "/gitignore/templates",
  async (ctx: ValidatedCtx<void, void, void>, next) => {
    //region safe-edit-region-gitignoreGetAllTemplates

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitignoreGetAllTemplates
  }
)

const gitignoreGetTemplateParamSchema = joi
  .object()
  .keys({ name: joi.string().required() })
  .required()

router.get(
  "gitignoreGetTemplate",
  "/gitignore/templates/:name",
  paramValidationFactory<GitignoreGetTemplateParamSchema>(
    gitignoreGetTemplateParamSchema
  ),
  async (
    ctx: ValidatedCtx<GitignoreGetTemplateParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-gitignoreGetTemplate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitignoreGetTemplate
  }
)

const appsListReposAccessibleToInstallationQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "appsListReposAccessibleToInstallation",
  "/installation/repositories",
  queryValidationFactory<AppsListReposAccessibleToInstallationQuerySchema>(
    appsListReposAccessibleToInstallationQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      AppsListReposAccessibleToInstallationQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-appsListReposAccessibleToInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListReposAccessibleToInstallation
  }
)

router.delete(
  "appsRevokeInstallationAccessToken",
  "/installation/token",
  async (ctx: ValidatedCtx<void, void, void>, next) => {
    //region safe-edit-region-appsRevokeInstallationAccessToken

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsRevokeInstallationAccessToken
  }
)

const issuesListQuerySchema = joi
  .object()
  .keys({
    filter: joi.string(),
    state: joi.string(),
    labels: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "issuesList",
  "/issues",
  queryValidationFactory<IssuesListQuerySchema>(issuesListQuerySchema),
  async (ctx: ValidatedCtx<void, IssuesListQuerySchema, void>, next) => {
    //region safe-edit-region-issuesList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesList
  }
)

router.get(
  "licensesGetAllCommonlyUsed",
  "/licenses",
  async (ctx: ValidatedCtx<void, void, void>, next) => {
    //region safe-edit-region-licensesGetAllCommonlyUsed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-licensesGetAllCommonlyUsed
  }
)

const licensesGetParamSchema = joi
  .object()
  .keys({ license: joi.string().required() })
  .required()

router.get(
  "licensesGet",
  "/licenses/:license",
  paramValidationFactory<LicensesGetParamSchema>(licensesGetParamSchema),
  async (ctx: ValidatedCtx<LicensesGetParamSchema, void, void>, next) => {
    //region safe-edit-region-licensesGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-licensesGet
  }
)

const markdownRenderBodySchema = joi
  .object()
  .keys({
    text: joi.string().required(),
    mode: joi.string(),
    context: joi.string(),
  })
  .required()

router.post(
  "markdownRender",
  "/markdown",
  bodyValidationFactory<MarkdownRenderBodySchema>(markdownRenderBodySchema),
  async (ctx: ValidatedCtx<void, void, MarkdownRenderBodySchema>, next) => {
    //region safe-edit-region-markdownRender

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-markdownRender
  }
)

const markdownRenderRawBodySchema = joi.string().required()

router.post(
  "markdownRenderRaw",
  "/markdown/raw",
  bodyValidationFactory<MarkdownRenderRawBodySchema>(
    markdownRenderRawBodySchema
  ),
  async (ctx: ValidatedCtx<void, void, MarkdownRenderRawBodySchema>, next) => {
    //region safe-edit-region-markdownRenderRaw

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-markdownRenderRaw
  }
)

const appsGetSubscriptionPlanForAccountParamSchema = joi
  .object()
  .keys({ account_id: joi.number().required() })
  .required()

router.get(
  "appsGetSubscriptionPlanForAccount",
  "/marketplace_listing/accounts/:accountId",
  paramValidationFactory<AppsGetSubscriptionPlanForAccountParamSchema>(
    appsGetSubscriptionPlanForAccountParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsGetSubscriptionPlanForAccountParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsGetSubscriptionPlanForAccount

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetSubscriptionPlanForAccount
  }
)

const appsListPlansQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "appsListPlans",
  "/marketplace_listing/plans",
  queryValidationFactory<AppsListPlansQuerySchema>(appsListPlansQuerySchema),
  async (ctx: ValidatedCtx<void, AppsListPlansQuerySchema, void>, next) => {
    //region safe-edit-region-appsListPlans

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListPlans
  }
)

const appsListAccountsForPlanParamSchema = joi
  .object()
  .keys({ plan_id: joi.number().required() })
  .required()

const appsListAccountsForPlanQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "appsListAccountsForPlan",
  "/marketplace_listing/plans/:planId/accounts",
  paramValidationFactory<AppsListAccountsForPlanParamSchema>(
    appsListAccountsForPlanParamSchema
  ),
  queryValidationFactory<AppsListAccountsForPlanQuerySchema>(
    appsListAccountsForPlanQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      AppsListAccountsForPlanParamSchema,
      AppsListAccountsForPlanQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-appsListAccountsForPlan

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListAccountsForPlan
  }
)

const appsGetSubscriptionPlanForAccountStubbedParamSchema = joi
  .object()
  .keys({ account_id: joi.number().required() })
  .required()

router.get(
  "appsGetSubscriptionPlanForAccountStubbed",
  "/marketplace_listing/stubbed/accounts/:accountId",
  paramValidationFactory<AppsGetSubscriptionPlanForAccountStubbedParamSchema>(
    appsGetSubscriptionPlanForAccountStubbedParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      AppsGetSubscriptionPlanForAccountStubbedParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-appsGetSubscriptionPlanForAccountStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetSubscriptionPlanForAccountStubbed
  }
)

const appsListPlansStubbedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "appsListPlansStubbed",
  "/marketplace_listing/stubbed/plans",
  queryValidationFactory<AppsListPlansStubbedQuerySchema>(
    appsListPlansStubbedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, AppsListPlansStubbedQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-appsListPlansStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListPlansStubbed
  }
)

const appsListAccountsForPlanStubbedParamSchema = joi
  .object()
  .keys({ plan_id: joi.number().required() })
  .required()

const appsListAccountsForPlanStubbedQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "appsListAccountsForPlanStubbed",
  "/marketplace_listing/stubbed/plans/:planId/accounts",
  paramValidationFactory<AppsListAccountsForPlanStubbedParamSchema>(
    appsListAccountsForPlanStubbedParamSchema
  ),
  queryValidationFactory<AppsListAccountsForPlanStubbedQuerySchema>(
    appsListAccountsForPlanStubbedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      AppsListAccountsForPlanStubbedParamSchema,
      AppsListAccountsForPlanStubbedQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-appsListAccountsForPlanStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListAccountsForPlanStubbed
  }
)

router.get(
  "metaGet",
  "/meta",
  async (ctx: ValidatedCtx<void, void, void>, next) => {
    //region safe-edit-region-metaGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-metaGet
  }
)

const activityListPublicEventsForRepoNetworkParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const activityListPublicEventsForRepoNetworkQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListPublicEventsForRepoNetwork",
  "/networks/:owner/:repo/events",
  paramValidationFactory<ActivityListPublicEventsForRepoNetworkParamSchema>(
    activityListPublicEventsForRepoNetworkParamSchema
  ),
  queryValidationFactory<ActivityListPublicEventsForRepoNetworkQuerySchema>(
    activityListPublicEventsForRepoNetworkQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListPublicEventsForRepoNetworkParamSchema,
      ActivityListPublicEventsForRepoNetworkQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListPublicEventsForRepoNetwork

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicEventsForRepoNetwork
  }
)

const activityListNotificationsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({
    all: joi.boolean(),
    participating: joi.boolean(),
    since: joi.string(),
    before: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "activityListNotificationsForAuthenticatedUser",
  "/notifications",
  queryValidationFactory<ActivityListNotificationsForAuthenticatedUserQuerySchema>(
    activityListNotificationsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      ActivityListNotificationsForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListNotificationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListNotificationsForAuthenticatedUser
  }
)

const activityMarkNotificationsAsReadBodySchema = joi
  .object()
  .keys({ last_read_at: joi.string() })
  .required()

router.put(
  "activityMarkNotificationsAsRead",
  "/notifications",
  bodyValidationFactory<ActivityMarkNotificationsAsReadBodySchema>(
    activityMarkNotificationsAsReadBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, ActivityMarkNotificationsAsReadBodySchema>,
    next
  ) => {
    //region safe-edit-region-activityMarkNotificationsAsRead

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityMarkNotificationsAsRead
  }
)

const activityGetThreadParamSchema = joi
  .object()
  .keys({ thread_id: joi.number().required() })
  .required()

router.get(
  "activityGetThread",
  "/notifications/threads/:threadId",
  paramValidationFactory<ActivityGetThreadParamSchema>(
    activityGetThreadParamSchema
  ),
  async (ctx: ValidatedCtx<ActivityGetThreadParamSchema, void, void>, next) => {
    //region safe-edit-region-activityGetThread

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityGetThread
  }
)

const activityMarkThreadAsReadParamSchema = joi
  .object()
  .keys({ thread_id: joi.number().required() })
  .required()

router.patch(
  "activityMarkThreadAsRead",
  "/notifications/threads/:threadId",
  paramValidationFactory<ActivityMarkThreadAsReadParamSchema>(
    activityMarkThreadAsReadParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActivityMarkThreadAsReadParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-activityMarkThreadAsRead

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityMarkThreadAsRead
  }
)

const activityGetThreadSubscriptionForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ thread_id: joi.number().required() })
  .required()

router.get(
  "activityGetThreadSubscriptionForAuthenticatedUser",
  "/notifications/threads/:threadId/subscription",
  paramValidationFactory<ActivityGetThreadSubscriptionForAuthenticatedUserParamSchema>(
    activityGetThreadSubscriptionForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityGetThreadSubscriptionForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityGetThreadSubscriptionForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityGetThreadSubscriptionForAuthenticatedUser
  }
)

const activitySetThreadSubscriptionParamSchema = joi
  .object()
  .keys({ thread_id: joi.number().required() })
  .required()

const activitySetThreadSubscriptionBodySchema = joi
  .object()
  .keys({ ignored: joi.boolean() })
  .required()

router.put(
  "activitySetThreadSubscription",
  "/notifications/threads/:threadId/subscription",
  paramValidationFactory<ActivitySetThreadSubscriptionParamSchema>(
    activitySetThreadSubscriptionParamSchema
  ),
  bodyValidationFactory<ActivitySetThreadSubscriptionBodySchema>(
    activitySetThreadSubscriptionBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivitySetThreadSubscriptionParamSchema,
      void,
      ActivitySetThreadSubscriptionBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-activitySetThreadSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activitySetThreadSubscription
  }
)

const activityDeleteThreadSubscriptionParamSchema = joi
  .object()
  .keys({ thread_id: joi.number().required() })
  .required()

router.delete(
  "activityDeleteThreadSubscription",
  "/notifications/threads/:threadId/subscription",
  paramValidationFactory<ActivityDeleteThreadSubscriptionParamSchema>(
    activityDeleteThreadSubscriptionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActivityDeleteThreadSubscriptionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-activityDeleteThreadSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityDeleteThreadSubscription
  }
)

const orgsListQuerySchema = joi
  .object()
  .keys({ since: joi.number() })
  .required()

router.get(
  "orgsList",
  "/organizations",
  queryValidationFactory<OrgsListQuerySchema>(orgsListQuerySchema),
  async (ctx: ValidatedCtx<void, OrgsListQuerySchema, void>, next) => {
    //region safe-edit-region-orgsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsList
  }
)

const orgsGetParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.get(
  "orgsGet",
  "/orgs/:org",
  paramValidationFactory<OrgsGetParamSchema>(orgsGetParamSchema),
  async (ctx: ValidatedCtx<OrgsGetParamSchema, void, void>, next) => {
    //region safe-edit-region-orgsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGet
  }
)

const orgsUpdateParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const orgsUpdateBodySchema = joi
  .object()
  .keys({
    billing_email: joi.string(),
    company: joi.string(),
    email: joi.string(),
    twitter_username: joi.string(),
    location: joi.string(),
    name: joi.string(),
    description: joi.string(),
    has_organization_projects: joi.boolean(),
    has_repository_projects: joi.boolean(),
    default_repository_permission: joi.string(),
    members_can_create_repositories: joi.boolean(),
    members_can_create_internal_repositories: joi.boolean(),
    members_can_create_private_repositories: joi.boolean(),
    members_can_create_public_repositories: joi.boolean(),
    members_allowed_repository_creation_type: joi.string(),
  })
  .required()

router.patch(
  "orgsUpdate",
  "/orgs/:org",
  paramValidationFactory<OrgsUpdateParamSchema>(orgsUpdateParamSchema),
  bodyValidationFactory<OrgsUpdateBodySchema>(orgsUpdateBodySchema),
  async (
    ctx: ValidatedCtx<OrgsUpdateParamSchema, void, OrgsUpdateBodySchema>,
    next
  ) => {
    //region safe-edit-region-orgsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUpdate
  }
)

const actionsListSelfHostedRunnersForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const actionsListSelfHostedRunnersForOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "actionsListSelfHostedRunnersForOrg",
  "/orgs/:org/actions/runners",
  paramValidationFactory<ActionsListSelfHostedRunnersForOrgParamSchema>(
    actionsListSelfHostedRunnersForOrgParamSchema
  ),
  queryValidationFactory<ActionsListSelfHostedRunnersForOrgQuerySchema>(
    actionsListSelfHostedRunnersForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListSelfHostedRunnersForOrgParamSchema,
      ActionsListSelfHostedRunnersForOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListSelfHostedRunnersForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelfHostedRunnersForOrg
  }
)

const actionsListRunnerApplicationsForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.get(
  "actionsListRunnerApplicationsForOrg",
  "/orgs/:org/actions/runners/downloads",
  paramValidationFactory<ActionsListRunnerApplicationsForOrgParamSchema>(
    actionsListRunnerApplicationsForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListRunnerApplicationsForOrgParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListRunnerApplicationsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRunnerApplicationsForOrg
  }
)

const actionsCreateRegistrationTokenForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.post(
  "actionsCreateRegistrationTokenForOrg",
  "/orgs/:org/actions/runners/registration-token",
  paramValidationFactory<ActionsCreateRegistrationTokenForOrgParamSchema>(
    actionsCreateRegistrationTokenForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsCreateRegistrationTokenForOrgParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsCreateRegistrationTokenForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRegistrationTokenForOrg
  }
)

const actionsCreateRemoveTokenForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.post(
  "actionsCreateRemoveTokenForOrg",
  "/orgs/:org/actions/runners/remove-token",
  paramValidationFactory<ActionsCreateRemoveTokenForOrgParamSchema>(
    actionsCreateRemoveTokenForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsCreateRemoveTokenForOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsCreateRemoveTokenForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRemoveTokenForOrg
  }
)

const actionsGetSelfHostedRunnerForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), runner_id: joi.number().required() })
  .required()

router.get(
  "actionsGetSelfHostedRunnerForOrg",
  "/orgs/:org/actions/runners/:runnerId",
  paramValidationFactory<ActionsGetSelfHostedRunnerForOrgParamSchema>(
    actionsGetSelfHostedRunnerForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetSelfHostedRunnerForOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetSelfHostedRunnerForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetSelfHostedRunnerForOrg
  }
)

const actionsDeleteSelfHostedRunnerFromOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), runner_id: joi.number().required() })
  .required()

router.delete(
  "actionsDeleteSelfHostedRunnerFromOrg",
  "/orgs/:org/actions/runners/:runnerId",
  paramValidationFactory<ActionsDeleteSelfHostedRunnerFromOrgParamSchema>(
    actionsDeleteSelfHostedRunnerFromOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsDeleteSelfHostedRunnerFromOrgParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsDeleteSelfHostedRunnerFromOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteSelfHostedRunnerFromOrg
  }
)

const actionsListOrgSecretsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const actionsListOrgSecretsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "actionsListOrgSecrets",
  "/orgs/:org/actions/secrets",
  paramValidationFactory<ActionsListOrgSecretsParamSchema>(
    actionsListOrgSecretsParamSchema
  ),
  queryValidationFactory<ActionsListOrgSecretsQuerySchema>(
    actionsListOrgSecretsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListOrgSecretsParamSchema,
      ActionsListOrgSecretsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListOrgSecrets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListOrgSecrets
  }
)

const actionsGetOrgPublicKeyParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.get(
  "actionsGetOrgPublicKey",
  "/orgs/:org/actions/secrets/public-key",
  paramValidationFactory<ActionsGetOrgPublicKeyParamSchema>(
    actionsGetOrgPublicKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetOrgPublicKeyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetOrgPublicKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetOrgPublicKey
  }
)

const actionsGetOrgSecretParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), secret_name: joi.string().required() })
  .required()

router.get(
  "actionsGetOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  paramValidationFactory<ActionsGetOrgSecretParamSchema>(
    actionsGetOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetOrgSecretParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetOrgSecret
  }
)

const actionsCreateOrUpdateOrgSecretParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), secret_name: joi.string().required() })
  .required()

const actionsCreateOrUpdateOrgSecretBodySchema = joi
  .object()
  .keys({
    encrypted_value: joi.string(),
    key_id: joi.string(),
    visibility: joi.string(),
    selected_repository_ids: joi.array().items(joi.string()),
  })
  .required()

router.put(
  "actionsCreateOrUpdateOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  paramValidationFactory<ActionsCreateOrUpdateOrgSecretParamSchema>(
    actionsCreateOrUpdateOrgSecretParamSchema
  ),
  bodyValidationFactory<ActionsCreateOrUpdateOrgSecretBodySchema>(
    actionsCreateOrUpdateOrgSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsCreateOrUpdateOrgSecretParamSchema,
      void,
      ActionsCreateOrUpdateOrgSecretBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-actionsCreateOrUpdateOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateOrUpdateOrgSecret
  }
)

const actionsDeleteOrgSecretParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), secret_name: joi.string().required() })
  .required()

router.delete(
  "actionsDeleteOrgSecret",
  "/orgs/:org/actions/secrets/:secretName",
  paramValidationFactory<ActionsDeleteOrgSecretParamSchema>(
    actionsDeleteOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsDeleteOrgSecretParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsDeleteOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteOrgSecret
  }
)

const actionsListSelectedReposForOrgSecretParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), secret_name: joi.string().required() })
  .required()

router.get(
  "actionsListSelectedReposForOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories",
  paramValidationFactory<ActionsListSelectedReposForOrgSecretParamSchema>(
    actionsListSelectedReposForOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListSelectedReposForOrgSecretParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListSelectedReposForOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelectedReposForOrgSecret
  }
)

const actionsSetSelectedReposForOrgSecretParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), secret_name: joi.string().required() })
  .required()

const actionsSetSelectedReposForOrgSecretBodySchema = joi
  .object()
  .keys({ selected_repository_ids: joi.array().items(joi.number()) })
  .required()

router.put(
  "actionsSetSelectedReposForOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories",
  paramValidationFactory<ActionsSetSelectedReposForOrgSecretParamSchema>(
    actionsSetSelectedReposForOrgSecretParamSchema
  ),
  bodyValidationFactory<ActionsSetSelectedReposForOrgSecretBodySchema>(
    actionsSetSelectedReposForOrgSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsSetSelectedReposForOrgSecretParamSchema,
      void,
      ActionsSetSelectedReposForOrgSecretBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-actionsSetSelectedReposForOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsSetSelectedReposForOrgSecret
  }
)

const actionsAddSelectedRepoToOrgSecretParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    secret_name: joi.string().required(),
    repository_id: joi.number().required(),
  })
  .required()

router.put(
  "actionsAddSelectedRepoToOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<ActionsAddSelectedRepoToOrgSecretParamSchema>(
    actionsAddSelectedRepoToOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsAddSelectedRepoToOrgSecretParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsAddSelectedRepoToOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsAddSelectedRepoToOrgSecret
  }
)

const actionsRemoveSelectedRepoFromOrgSecretParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    secret_name: joi.string().required(),
    repository_id: joi.number().required(),
  })
  .required()

router.delete(
  "actionsRemoveSelectedRepoFromOrgSecret",
  "/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId",
  paramValidationFactory<ActionsRemoveSelectedRepoFromOrgSecretParamSchema>(
    actionsRemoveSelectedRepoFromOrgSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsRemoveSelectedRepoFromOrgSecretParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsRemoveSelectedRepoFromOrgSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsRemoveSelectedRepoFromOrgSecret
  }
)

const orgsListBlockedUsersParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.get(
  "orgsListBlockedUsers",
  "/orgs/:org/blocks",
  paramValidationFactory<OrgsListBlockedUsersParamSchema>(
    orgsListBlockedUsersParamSchema
  ),
  async (
    ctx: ValidatedCtx<OrgsListBlockedUsersParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-orgsListBlockedUsers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListBlockedUsers
  }
)

const orgsCheckBlockedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.get(
  "orgsCheckBlockedUser",
  "/orgs/:org/blocks/:username",
  paramValidationFactory<OrgsCheckBlockedUserParamSchema>(
    orgsCheckBlockedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<OrgsCheckBlockedUserParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-orgsCheckBlockedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCheckBlockedUser
  }
)

const orgsBlockUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.put(
  "orgsBlockUser",
  "/orgs/:org/blocks/:username",
  paramValidationFactory<OrgsBlockUserParamSchema>(orgsBlockUserParamSchema),
  async (ctx: ValidatedCtx<OrgsBlockUserParamSchema, void, void>, next) => {
    //region safe-edit-region-orgsBlockUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsBlockUser
  }
)

const orgsUnblockUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.delete(
  "orgsUnblockUser",
  "/orgs/:org/blocks/:username",
  paramValidationFactory<OrgsUnblockUserParamSchema>(
    orgsUnblockUserParamSchema
  ),
  async (ctx: ValidatedCtx<OrgsUnblockUserParamSchema, void, void>, next) => {
    //region safe-edit-region-orgsUnblockUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUnblockUser
  }
)

const orgsListSamlSsoAuthorizationsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.get(
  "orgsListSamlSsoAuthorizations",
  "/orgs/:org/credential-authorizations",
  paramValidationFactory<OrgsListSamlSsoAuthorizationsParamSchema>(
    orgsListSamlSsoAuthorizationsParamSchema
  ),
  async (
    ctx: ValidatedCtx<OrgsListSamlSsoAuthorizationsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-orgsListSamlSsoAuthorizations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListSamlSsoAuthorizations
  }
)

const orgsRemoveSamlSsoAuthorizationParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    credential_id: joi.number().required(),
  })
  .required()

router.delete(
  "orgsRemoveSamlSsoAuthorization",
  "/orgs/:org/credential-authorizations/:credentialId",
  paramValidationFactory<OrgsRemoveSamlSsoAuthorizationParamSchema>(
    orgsRemoveSamlSsoAuthorizationParamSchema
  ),
  async (
    ctx: ValidatedCtx<OrgsRemoveSamlSsoAuthorizationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-orgsRemoveSamlSsoAuthorization

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveSamlSsoAuthorization
  }
)

const activityListPublicOrgEventsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const activityListPublicOrgEventsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListPublicOrgEvents",
  "/orgs/:org/events",
  paramValidationFactory<ActivityListPublicOrgEventsParamSchema>(
    activityListPublicOrgEventsParamSchema
  ),
  queryValidationFactory<ActivityListPublicOrgEventsQuerySchema>(
    activityListPublicOrgEventsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListPublicOrgEventsParamSchema,
      ActivityListPublicOrgEventsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListPublicOrgEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicOrgEvents
  }
)

const orgsListWebhooksParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const orgsListWebhooksQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "orgsListWebhooks",
  "/orgs/:org/hooks",
  paramValidationFactory<OrgsListWebhooksParamSchema>(
    orgsListWebhooksParamSchema
  ),
  queryValidationFactory<OrgsListWebhooksQuerySchema>(
    orgsListWebhooksQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsListWebhooksParamSchema,
      OrgsListWebhooksQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsListWebhooks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListWebhooks
  }
)

const orgsCreateWebhookParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const orgsCreateWebhookBodySchema = joi
  .object()
  .keys({
    name: joi.string().required(),
    config: joi
      .object()
      .keys({
        url: joi.string().required(),
        content_type: joi.string(),
        secret: joi.string(),
        insecure_ssl: joi.string(),
      })
      .required(),
    events: joi.array().items(joi.string()),
    active: joi.boolean(),
  })
  .required()

router.post(
  "orgsCreateWebhook",
  "/orgs/:org/hooks",
  paramValidationFactory<OrgsCreateWebhookParamSchema>(
    orgsCreateWebhookParamSchema
  ),
  bodyValidationFactory<OrgsCreateWebhookBodySchema>(
    orgsCreateWebhookBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsCreateWebhookParamSchema,
      void,
      OrgsCreateWebhookBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-orgsCreateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCreateWebhook
  }
)

const orgsGetWebhookParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), hook_id: joi.number().required() })
  .required()

router.get(
  "orgsGetWebhook",
  "/orgs/:org/hooks/:hookId",
  paramValidationFactory<OrgsGetWebhookParamSchema>(orgsGetWebhookParamSchema),
  async (ctx: ValidatedCtx<OrgsGetWebhookParamSchema, void, void>, next) => {
    //region safe-edit-region-orgsGetWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGetWebhook
  }
)

const orgsUpdateWebhookParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), hook_id: joi.number().required() })
  .required()

const orgsUpdateWebhookBodySchema = joi
  .object()
  .keys({
    config: joi
      .object()
      .keys({
        url: joi.string().required(),
        content_type: joi.string(),
        secret: joi.string(),
        insecure_ssl: joi.string(),
      }),
    events: joi.array().items(joi.string()),
    active: joi.boolean(),
  })
  .required()

router.patch(
  "orgsUpdateWebhook",
  "/orgs/:org/hooks/:hookId",
  paramValidationFactory<OrgsUpdateWebhookParamSchema>(
    orgsUpdateWebhookParamSchema
  ),
  bodyValidationFactory<OrgsUpdateWebhookBodySchema>(
    orgsUpdateWebhookBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsUpdateWebhookParamSchema,
      void,
      OrgsUpdateWebhookBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-orgsUpdateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUpdateWebhook
  }
)

const orgsDeleteWebhookParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), hook_id: joi.number().required() })
  .required()

router.delete(
  "orgsDeleteWebhook",
  "/orgs/:org/hooks/:hookId",
  paramValidationFactory<OrgsDeleteWebhookParamSchema>(
    orgsDeleteWebhookParamSchema
  ),
  async (ctx: ValidatedCtx<OrgsDeleteWebhookParamSchema, void, void>, next) => {
    //region safe-edit-region-orgsDeleteWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsDeleteWebhook
  }
)

const orgsPingWebhookParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), hook_id: joi.number().required() })
  .required()

router.post(
  "orgsPingWebhook",
  "/orgs/:org/hooks/:hookId/pings",
  paramValidationFactory<OrgsPingWebhookParamSchema>(
    orgsPingWebhookParamSchema
  ),
  async (ctx: ValidatedCtx<OrgsPingWebhookParamSchema, void, void>, next) => {
    //region safe-edit-region-orgsPingWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsPingWebhook
  }
)

const appsGetOrgInstallationParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.get(
  "appsGetOrgInstallation",
  "/orgs/:org/installation",
  paramValidationFactory<AppsGetOrgInstallationParamSchema>(
    appsGetOrgInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsGetOrgInstallationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsGetOrgInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetOrgInstallation
  }
)

const orgsListAppInstallationsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const orgsListAppInstallationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "orgsListAppInstallations",
  "/orgs/:org/installations",
  paramValidationFactory<OrgsListAppInstallationsParamSchema>(
    orgsListAppInstallationsParamSchema
  ),
  queryValidationFactory<OrgsListAppInstallationsQuerySchema>(
    orgsListAppInstallationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsListAppInstallationsParamSchema,
      OrgsListAppInstallationsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsListAppInstallations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListAppInstallations
  }
)

const interactionsGetRestrictionsForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.get(
  "interactionsGetRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  paramValidationFactory<InteractionsGetRestrictionsForOrgParamSchema>(
    interactionsGetRestrictionsForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<InteractionsGetRestrictionsForOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-interactionsGetRestrictionsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsGetRestrictionsForOrg
  }
)

const interactionsSetRestrictionsForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const interactionsSetRestrictionsForOrgBodySchema = joi
  .object()
  .keys({ limit: joi.string().required() })
  .required()

router.put(
  "interactionsSetRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  paramValidationFactory<InteractionsSetRestrictionsForOrgParamSchema>(
    interactionsSetRestrictionsForOrgParamSchema
  ),
  bodyValidationFactory<InteractionsSetRestrictionsForOrgBodySchema>(
    interactionsSetRestrictionsForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      InteractionsSetRestrictionsForOrgParamSchema,
      void,
      InteractionsSetRestrictionsForOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-interactionsSetRestrictionsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsSetRestrictionsForOrg
  }
)

const interactionsRemoveRestrictionsForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.delete(
  "interactionsRemoveRestrictionsForOrg",
  "/orgs/:org/interaction-limits",
  paramValidationFactory<InteractionsRemoveRestrictionsForOrgParamSchema>(
    interactionsRemoveRestrictionsForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      InteractionsRemoveRestrictionsForOrgParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-interactionsRemoveRestrictionsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsRemoveRestrictionsForOrg
  }
)

const orgsListPendingInvitationsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const orgsListPendingInvitationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "orgsListPendingInvitations",
  "/orgs/:org/invitations",
  paramValidationFactory<OrgsListPendingInvitationsParamSchema>(
    orgsListPendingInvitationsParamSchema
  ),
  queryValidationFactory<OrgsListPendingInvitationsQuerySchema>(
    orgsListPendingInvitationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsListPendingInvitationsParamSchema,
      OrgsListPendingInvitationsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsListPendingInvitations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListPendingInvitations
  }
)

const orgsCreateInvitationParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const orgsCreateInvitationBodySchema = joi
  .object()
  .keys({
    invitee_id: joi.number(),
    email: joi.string(),
    role: joi.string(),
    team_ids: joi.array().items(joi.number()),
  })
  .required()

router.post(
  "orgsCreateInvitation",
  "/orgs/:org/invitations",
  paramValidationFactory<OrgsCreateInvitationParamSchema>(
    orgsCreateInvitationParamSchema
  ),
  bodyValidationFactory<OrgsCreateInvitationBodySchema>(
    orgsCreateInvitationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsCreateInvitationParamSchema,
      void,
      OrgsCreateInvitationBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-orgsCreateInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCreateInvitation
  }
)

const orgsListInvitationTeamsParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    invitation_id: joi.number().required(),
  })
  .required()

const orgsListInvitationTeamsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "orgsListInvitationTeams",
  "/orgs/:org/invitations/:invitationId/teams",
  paramValidationFactory<OrgsListInvitationTeamsParamSchema>(
    orgsListInvitationTeamsParamSchema
  ),
  queryValidationFactory<OrgsListInvitationTeamsQuerySchema>(
    orgsListInvitationTeamsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsListInvitationTeamsParamSchema,
      OrgsListInvitationTeamsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsListInvitationTeams

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListInvitationTeams
  }
)

const issuesListForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const issuesListForOrgQuerySchema = joi
  .object()
  .keys({
    filter: joi.string(),
    state: joi.string(),
    labels: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "issuesListForOrg",
  "/orgs/:org/issues",
  paramValidationFactory<IssuesListForOrgParamSchema>(
    issuesListForOrgParamSchema
  ),
  queryValidationFactory<IssuesListForOrgQuerySchema>(
    issuesListForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListForOrgParamSchema,
      IssuesListForOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListForOrg
  }
)

const orgsListMembersParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const orgsListMembersQuerySchema = joi
  .object()
  .keys({
    filter: joi.string(),
    role: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "orgsListMembers",
  "/orgs/:org/members",
  paramValidationFactory<OrgsListMembersParamSchema>(
    orgsListMembersParamSchema
  ),
  queryValidationFactory<OrgsListMembersQuerySchema>(
    orgsListMembersQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsListMembersParamSchema,
      OrgsListMembersQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsListMembers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListMembers
  }
)

const orgsCheckMembershipForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.get(
  "orgsCheckMembershipForUser",
  "/orgs/:org/members/:username",
  paramValidationFactory<OrgsCheckMembershipForUserParamSchema>(
    orgsCheckMembershipForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<OrgsCheckMembershipForUserParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-orgsCheckMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCheckMembershipForUser
  }
)

const orgsRemoveMemberParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.delete(
  "orgsRemoveMember",
  "/orgs/:org/members/:username",
  paramValidationFactory<OrgsRemoveMemberParamSchema>(
    orgsRemoveMemberParamSchema
  ),
  async (ctx: ValidatedCtx<OrgsRemoveMemberParamSchema, void, void>, next) => {
    //region safe-edit-region-orgsRemoveMember

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveMember
  }
)

const orgsGetMembershipForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.get(
  "orgsGetMembershipForUser",
  "/orgs/:org/memberships/:username",
  paramValidationFactory<OrgsGetMembershipForUserParamSchema>(
    orgsGetMembershipForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<OrgsGetMembershipForUserParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-orgsGetMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGetMembershipForUser
  }
)

const orgsSetMembershipForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

const orgsSetMembershipForUserBodySchema = joi
  .object()
  .keys({ role: joi.string() })
  .required()

router.put(
  "orgsSetMembershipForUser",
  "/orgs/:org/memberships/:username",
  paramValidationFactory<OrgsSetMembershipForUserParamSchema>(
    orgsSetMembershipForUserParamSchema
  ),
  bodyValidationFactory<OrgsSetMembershipForUserBodySchema>(
    orgsSetMembershipForUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsSetMembershipForUserParamSchema,
      void,
      OrgsSetMembershipForUserBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-orgsSetMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsSetMembershipForUser
  }
)

const orgsRemoveMembershipForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.delete(
  "orgsRemoveMembershipForUser",
  "/orgs/:org/memberships/:username",
  paramValidationFactory<OrgsRemoveMembershipForUserParamSchema>(
    orgsRemoveMembershipForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<OrgsRemoveMembershipForUserParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-orgsRemoveMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveMembershipForUser
  }
)

const migrationsStartForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const migrationsStartForOrgBodySchema = joi
  .object()
  .keys({
    repositories: joi.array().items(joi.string()).required(),
    lock_repositories: joi.boolean(),
    exclude_attachments: joi.boolean(),
  })
  .required()

router.post(
  "migrationsStartForOrg",
  "/orgs/:org/migrations",
  paramValidationFactory<MigrationsStartForOrgParamSchema>(
    migrationsStartForOrgParamSchema
  ),
  bodyValidationFactory<MigrationsStartForOrgBodySchema>(
    migrationsStartForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsStartForOrgParamSchema,
      void,
      MigrationsStartForOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-migrationsStartForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsStartForOrg
  }
)

const migrationsListForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const migrationsListForOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "migrationsListForOrg",
  "/orgs/:org/migrations",
  paramValidationFactory<MigrationsListForOrgParamSchema>(
    migrationsListForOrgParamSchema
  ),
  queryValidationFactory<MigrationsListForOrgQuerySchema>(
    migrationsListForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsListForOrgParamSchema,
      MigrationsListForOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-migrationsListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListForOrg
  }
)

const migrationsGetStatusForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), migration_id: joi.number().required() })
  .required()

router.get(
  "migrationsGetStatusForOrg",
  "/orgs/:org/migrations/:migrationId",
  paramValidationFactory<MigrationsGetStatusForOrgParamSchema>(
    migrationsGetStatusForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<MigrationsGetStatusForOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-migrationsGetStatusForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetStatusForOrg
  }
)

const migrationsDownloadArchiveForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), migration_id: joi.number().required() })
  .required()

router.get(
  "migrationsDownloadArchiveForOrg",
  "/orgs/:org/migrations/:migrationId/archive",
  paramValidationFactory<MigrationsDownloadArchiveForOrgParamSchema>(
    migrationsDownloadArchiveForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<MigrationsDownloadArchiveForOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-migrationsDownloadArchiveForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsDownloadArchiveForOrg
  }
)

const migrationsDeleteArchiveForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), migration_id: joi.number().required() })
  .required()

router.delete(
  "migrationsDeleteArchiveForOrg",
  "/orgs/:org/migrations/:migrationId/archive",
  paramValidationFactory<MigrationsDeleteArchiveForOrgParamSchema>(
    migrationsDeleteArchiveForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<MigrationsDeleteArchiveForOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-migrationsDeleteArchiveForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsDeleteArchiveForOrg
  }
)

const migrationsUnlockRepoForOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    migration_id: joi.number().required(),
    repo_name: joi.string().required(),
  })
  .required()

router.delete(
  "migrationsUnlockRepoForOrg",
  "/orgs/:org/migrations/:migrationId/repos/:repoName/lock",
  paramValidationFactory<MigrationsUnlockRepoForOrgParamSchema>(
    migrationsUnlockRepoForOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<MigrationsUnlockRepoForOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-migrationsUnlockRepoForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsUnlockRepoForOrg
  }
)

const migrationsListReposForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), migration_id: joi.number().required() })
  .required()

const migrationsListReposForOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "migrationsListReposForOrg",
  "/orgs/:org/migrations/:migrationId/repositories",
  paramValidationFactory<MigrationsListReposForOrgParamSchema>(
    migrationsListReposForOrgParamSchema
  ),
  queryValidationFactory<MigrationsListReposForOrgQuerySchema>(
    migrationsListReposForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsListReposForOrgParamSchema,
      MigrationsListReposForOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-migrationsListReposForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListReposForOrg
  }
)

const orgsListOutsideCollaboratorsParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const orgsListOutsideCollaboratorsQuerySchema = joi
  .object()
  .keys({ filter: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "orgsListOutsideCollaborators",
  "/orgs/:org/outside_collaborators",
  paramValidationFactory<OrgsListOutsideCollaboratorsParamSchema>(
    orgsListOutsideCollaboratorsParamSchema
  ),
  queryValidationFactory<OrgsListOutsideCollaboratorsQuerySchema>(
    orgsListOutsideCollaboratorsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsListOutsideCollaboratorsParamSchema,
      OrgsListOutsideCollaboratorsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsListOutsideCollaborators

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListOutsideCollaborators
  }
)

const orgsRemoveOutsideCollaboratorParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.delete(
  "orgsRemoveOutsideCollaborator",
  "/orgs/:org/outside_collaborators/:username",
  paramValidationFactory<OrgsRemoveOutsideCollaboratorParamSchema>(
    orgsRemoveOutsideCollaboratorParamSchema
  ),
  async (
    ctx: ValidatedCtx<OrgsRemoveOutsideCollaboratorParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-orgsRemoveOutsideCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemoveOutsideCollaborator
  }
)

const orgsConvertMemberToOutsideCollaboratorParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.put(
  "orgsConvertMemberToOutsideCollaborator",
  "/orgs/:org/outside_collaborators/:username",
  paramValidationFactory<OrgsConvertMemberToOutsideCollaboratorParamSchema>(
    orgsConvertMemberToOutsideCollaboratorParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsConvertMemberToOutsideCollaboratorParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsConvertMemberToOutsideCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsConvertMemberToOutsideCollaborator
  }
)

const projectsListForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const projectsListForOrgQuerySchema = joi
  .object()
  .keys({ state: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "projectsListForOrg",
  "/orgs/:org/projects",
  paramValidationFactory<ProjectsListForOrgParamSchema>(
    projectsListForOrgParamSchema
  ),
  queryValidationFactory<ProjectsListForOrgQuerySchema>(
    projectsListForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsListForOrgParamSchema,
      ProjectsListForOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-projectsListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListForOrg
  }
)

const projectsCreateForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const projectsCreateForOrgBodySchema = joi
  .object()
  .keys({ name: joi.string().required(), body: joi.string() })
  .required()

router.post(
  "projectsCreateForOrg",
  "/orgs/:org/projects",
  paramValidationFactory<ProjectsCreateForOrgParamSchema>(
    projectsCreateForOrgParamSchema
  ),
  bodyValidationFactory<ProjectsCreateForOrgBodySchema>(
    projectsCreateForOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsCreateForOrgParamSchema,
      void,
      ProjectsCreateForOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-projectsCreateForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateForOrg
  }
)

const orgsListPublicMembersParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const orgsListPublicMembersQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "orgsListPublicMembers",
  "/orgs/:org/public_members",
  paramValidationFactory<OrgsListPublicMembersParamSchema>(
    orgsListPublicMembersParamSchema
  ),
  queryValidationFactory<OrgsListPublicMembersQuerySchema>(
    orgsListPublicMembersQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsListPublicMembersParamSchema,
      OrgsListPublicMembersQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsListPublicMembers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListPublicMembers
  }
)

const orgsCheckPublicMembershipForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.get(
  "orgsCheckPublicMembershipForUser",
  "/orgs/:org/public_members/:username",
  paramValidationFactory<OrgsCheckPublicMembershipForUserParamSchema>(
    orgsCheckPublicMembershipForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<OrgsCheckPublicMembershipForUserParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-orgsCheckPublicMembershipForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsCheckPublicMembershipForUser
  }
)

const orgsSetPublicMembershipForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.put(
  "orgsSetPublicMembershipForAuthenticatedUser",
  "/orgs/:org/public_members/:username",
  paramValidationFactory<OrgsSetPublicMembershipForAuthenticatedUserParamSchema>(
    orgsSetPublicMembershipForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsSetPublicMembershipForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsSetPublicMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsSetPublicMembershipForAuthenticatedUser
  }
)

const orgsRemovePublicMembershipForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), username: joi.string().required() })
  .required()

router.delete(
  "orgsRemovePublicMembershipForAuthenticatedUser",
  "/orgs/:org/public_members/:username",
  paramValidationFactory<OrgsRemovePublicMembershipForAuthenticatedUserParamSchema>(
    orgsRemovePublicMembershipForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsRemovePublicMembershipForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsRemovePublicMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsRemovePublicMembershipForAuthenticatedUser
  }
)

const reposListForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const reposListForOrgQuerySchema = joi
  .object()
  .keys({
    type: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "reposListForOrg",
  "/orgs/:org/repos",
  paramValidationFactory<ReposListForOrgParamSchema>(
    reposListForOrgParamSchema
  ),
  queryValidationFactory<ReposListForOrgQuerySchema>(
    reposListForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListForOrgParamSchema,
      ReposListForOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForOrg
  }
)

const reposCreateInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const reposCreateInOrgBodySchema = joi
  .object()
  .keys({
    name: joi.string().required(),
    description: joi.string(),
    homepage: joi.string(),
    private: joi.boolean(),
    visibility: joi.string(),
    has_issues: joi.boolean(),
    has_projects: joi.boolean(),
    has_wiki: joi.boolean(),
    is_template: joi.boolean(),
    team_id: joi.number(),
    auto_init: joi.boolean(),
    gitignore_template: joi.string(),
    license_template: joi.string(),
    allow_squash_merge: joi.boolean(),
    allow_merge_commit: joi.boolean(),
    allow_rebase_merge: joi.boolean(),
    delete_branch_on_merge: joi.boolean(),
  })
  .required()

router.post(
  "reposCreateInOrg",
  "/orgs/:org/repos",
  paramValidationFactory<ReposCreateInOrgParamSchema>(
    reposCreateInOrgParamSchema
  ),
  bodyValidationFactory<ReposCreateInOrgBodySchema>(reposCreateInOrgBodySchema),
  async (
    ctx: ValidatedCtx<
      ReposCreateInOrgParamSchema,
      void,
      ReposCreateInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateInOrg
  }
)

const teamsListIdPGroupsForOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const teamsListIdPGroupsForOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListIdPGroupsForOrg",
  "/orgs/:org/team-sync/groups",
  paramValidationFactory<TeamsListIdPGroupsForOrgParamSchema>(
    teamsListIdPGroupsForOrgParamSchema
  ),
  queryValidationFactory<TeamsListIdPGroupsForOrgQuerySchema>(
    teamsListIdPGroupsForOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListIdPGroupsForOrgParamSchema,
      TeamsListIdPGroupsForOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListIdPGroupsForOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListIdPGroupsForOrg
  }
)

const teamsListParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const teamsListQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsList",
  "/orgs/:org/teams",
  paramValidationFactory<TeamsListParamSchema>(teamsListParamSchema),
  queryValidationFactory<TeamsListQuerySchema>(teamsListQuerySchema),
  async (
    ctx: ValidatedCtx<TeamsListParamSchema, TeamsListQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-teamsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsList
  }
)

const teamsCreateParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const teamsCreateBodySchema = joi
  .object()
  .keys({
    name: joi.string().required(),
    description: joi.string(),
    maintainers: joi.array().items(joi.string()),
    repo_names: joi.array().items(joi.string()),
    privacy: joi.string(),
    permission: joi.string(),
    parent_team_id: joi.number(),
  })
  .required()

router.post(
  "teamsCreate",
  "/orgs/:org/teams",
  paramValidationFactory<TeamsCreateParamSchema>(teamsCreateParamSchema),
  bodyValidationFactory<TeamsCreateBodySchema>(teamsCreateBodySchema),
  async (
    ctx: ValidatedCtx<TeamsCreateParamSchema, void, TeamsCreateBodySchema>,
    next
  ) => {
    //region safe-edit-region-teamsCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreate
  }
)

const teamsGetByNameParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

router.get(
  "teamsGetByName",
  "/orgs/:org/teams/:teamSlug",
  paramValidationFactory<TeamsGetByNameParamSchema>(teamsGetByNameParamSchema),
  async (ctx: ValidatedCtx<TeamsGetByNameParamSchema, void, void>, next) => {
    //region safe-edit-region-teamsGetByName

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetByName
  }
)

const teamsUpdateInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

const teamsUpdateInOrgBodySchema = joi
  .object()
  .keys({
    name: joi.string().required(),
    description: joi.string(),
    privacy: joi.string(),
    permission: joi.string(),
    parent_team_id: joi.number(),
  })
  .required()

router.patch(
  "teamsUpdateInOrg",
  "/orgs/:org/teams/:teamSlug",
  paramValidationFactory<TeamsUpdateInOrgParamSchema>(
    teamsUpdateInOrgParamSchema
  ),
  bodyValidationFactory<TeamsUpdateInOrgBodySchema>(teamsUpdateInOrgBodySchema),
  async (
    ctx: ValidatedCtx<
      TeamsUpdateInOrgParamSchema,
      void,
      TeamsUpdateInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsUpdateInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateInOrg
  }
)

const teamsDeleteInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

router.delete(
  "teamsDeleteInOrg",
  "/orgs/:org/teams/:teamSlug",
  paramValidationFactory<TeamsDeleteInOrgParamSchema>(
    teamsDeleteInOrgParamSchema
  ),
  async (ctx: ValidatedCtx<TeamsDeleteInOrgParamSchema, void, void>, next) => {
    //region safe-edit-region-teamsDeleteInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteInOrg
  }
)

const teamsListDiscussionsInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

const teamsListDiscussionsInOrgQuerySchema = joi
  .object()
  .keys({ direction: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListDiscussionsInOrg",
  "/orgs/:org/teams/:teamSlug/discussions",
  paramValidationFactory<TeamsListDiscussionsInOrgParamSchema>(
    teamsListDiscussionsInOrgParamSchema
  ),
  queryValidationFactory<TeamsListDiscussionsInOrgQuerySchema>(
    teamsListDiscussionsInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListDiscussionsInOrgParamSchema,
      TeamsListDiscussionsInOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListDiscussionsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionsInOrg
  }
)

const teamsCreateDiscussionInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

const teamsCreateDiscussionInOrgBodySchema = joi
  .object()
  .keys({
    title: joi.string().required(),
    body: joi.string().required(),
    private: joi.boolean(),
  })
  .required()

router.post(
  "teamsCreateDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions",
  paramValidationFactory<TeamsCreateDiscussionInOrgParamSchema>(
    teamsCreateDiscussionInOrgParamSchema
  ),
  bodyValidationFactory<TeamsCreateDiscussionInOrgBodySchema>(
    teamsCreateDiscussionInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsCreateDiscussionInOrgParamSchema,
      void,
      TeamsCreateDiscussionInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsCreateDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionInOrg
  }
)

const teamsGetDiscussionInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })
  .required()

router.get(
  "teamsGetDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  paramValidationFactory<TeamsGetDiscussionInOrgParamSchema>(
    teamsGetDiscussionInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsGetDiscussionInOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsGetDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionInOrg
  }
)

const teamsUpdateDiscussionInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })
  .required()

const teamsUpdateDiscussionInOrgBodySchema = joi
  .object()
  .keys({ title: joi.string(), body: joi.string() })
  .required()

router.patch(
  "teamsUpdateDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  paramValidationFactory<TeamsUpdateDiscussionInOrgParamSchema>(
    teamsUpdateDiscussionInOrgParamSchema
  ),
  bodyValidationFactory<TeamsUpdateDiscussionInOrgBodySchema>(
    teamsUpdateDiscussionInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsUpdateDiscussionInOrgParamSchema,
      void,
      TeamsUpdateDiscussionInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsUpdateDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionInOrg
  }
)

const teamsDeleteDiscussionInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })
  .required()

router.delete(
  "teamsDeleteDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber",
  paramValidationFactory<TeamsDeleteDiscussionInOrgParamSchema>(
    teamsDeleteDiscussionInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsDeleteDiscussionInOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsDeleteDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionInOrg
  }
)

const teamsListDiscussionCommentsInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })
  .required()

const teamsListDiscussionCommentsInOrgQuerySchema = joi
  .object()
  .keys({ direction: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListDiscussionCommentsInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments",
  paramValidationFactory<TeamsListDiscussionCommentsInOrgParamSchema>(
    teamsListDiscussionCommentsInOrgParamSchema
  ),
  queryValidationFactory<TeamsListDiscussionCommentsInOrgQuerySchema>(
    teamsListDiscussionCommentsInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListDiscussionCommentsInOrgParamSchema,
      TeamsListDiscussionCommentsInOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListDiscussionCommentsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionCommentsInOrg
  }
)

const teamsCreateDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })
  .required()

const teamsCreateDiscussionCommentInOrgBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.post(
  "teamsCreateDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments",
  paramValidationFactory<TeamsCreateDiscussionCommentInOrgParamSchema>(
    teamsCreateDiscussionCommentInOrgParamSchema
  ),
  bodyValidationFactory<TeamsCreateDiscussionCommentInOrgBodySchema>(
    teamsCreateDiscussionCommentInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsCreateDiscussionCommentInOrgParamSchema,
      void,
      TeamsCreateDiscussionCommentInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsCreateDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionCommentInOrg
  }
)

const teamsGetDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })
  .required()

router.get(
  "teamsGetDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<TeamsGetDiscussionCommentInOrgParamSchema>(
    teamsGetDiscussionCommentInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsGetDiscussionCommentInOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsGetDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionCommentInOrg
  }
)

const teamsUpdateDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })
  .required()

const teamsUpdateDiscussionCommentInOrgBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.patch(
  "teamsUpdateDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<TeamsUpdateDiscussionCommentInOrgParamSchema>(
    teamsUpdateDiscussionCommentInOrgParamSchema
  ),
  bodyValidationFactory<TeamsUpdateDiscussionCommentInOrgBodySchema>(
    teamsUpdateDiscussionCommentInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsUpdateDiscussionCommentInOrgParamSchema,
      void,
      TeamsUpdateDiscussionCommentInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsUpdateDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionCommentInOrg
  }
)

const teamsDeleteDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })
  .required()

router.delete(
  "teamsDeleteDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<TeamsDeleteDiscussionCommentInOrgParamSchema>(
    teamsDeleteDiscussionCommentInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsDeleteDiscussionCommentInOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsDeleteDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionCommentInOrg
  }
)

const reactionsListForTeamDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })
  .required()

const reactionsListForTeamDiscussionCommentInOrgQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reactionsListForTeamDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<ReactionsListForTeamDiscussionCommentInOrgParamSchema>(
    reactionsListForTeamDiscussionCommentInOrgParamSchema
  ),
  queryValidationFactory<ReactionsListForTeamDiscussionCommentInOrgQuerySchema>(
    reactionsListForTeamDiscussionCommentInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsListForTeamDiscussionCommentInOrgParamSchema,
      ReactionsListForTeamDiscussionCommentInOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reactionsListForTeamDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionCommentInOrg
  }
)

const reactionsCreateForTeamDiscussionCommentInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })
  .required()

const reactionsCreateForTeamDiscussionCommentInOrgBodySchema = joi
  .object()
  .keys({ content: joi.string().required() })
  .required()

router.post(
  "reactionsCreateForTeamDiscussionCommentInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<ReactionsCreateForTeamDiscussionCommentInOrgParamSchema>(
    reactionsCreateForTeamDiscussionCommentInOrgParamSchema
  ),
  bodyValidationFactory<ReactionsCreateForTeamDiscussionCommentInOrgBodySchema>(
    reactionsCreateForTeamDiscussionCommentInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsCreateForTeamDiscussionCommentInOrgParamSchema,
      void,
      ReactionsCreateForTeamDiscussionCommentInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionCommentInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionCommentInOrg
  }
)

const reactionsDeleteForTeamDiscussionCommentParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
    reaction_id: joi.number().required(),
  })
  .required()

router.delete(
  "reactionsDeleteForTeamDiscussionComment",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions/:reactionId",
  paramValidationFactory<ReactionsDeleteForTeamDiscussionCommentParamSchema>(
    reactionsDeleteForTeamDiscussionCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsDeleteForTeamDiscussionCommentParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reactionsDeleteForTeamDiscussionComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForTeamDiscussionComment
  }
)

const reactionsListForTeamDiscussionInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })
  .required()

const reactionsListForTeamDiscussionInOrgQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reactionsListForTeamDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions",
  paramValidationFactory<ReactionsListForTeamDiscussionInOrgParamSchema>(
    reactionsListForTeamDiscussionInOrgParamSchema
  ),
  queryValidationFactory<ReactionsListForTeamDiscussionInOrgQuerySchema>(
    reactionsListForTeamDiscussionInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsListForTeamDiscussionInOrgParamSchema,
      ReactionsListForTeamDiscussionInOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reactionsListForTeamDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionInOrg
  }
)

const reactionsCreateForTeamDiscussionInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
  })
  .required()

const reactionsCreateForTeamDiscussionInOrgBodySchema = joi
  .object()
  .keys({ content: joi.string().required() })
  .required()

router.post(
  "reactionsCreateForTeamDiscussionInOrg",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions",
  paramValidationFactory<ReactionsCreateForTeamDiscussionInOrgParamSchema>(
    reactionsCreateForTeamDiscussionInOrgParamSchema
  ),
  bodyValidationFactory<ReactionsCreateForTeamDiscussionInOrgBodySchema>(
    reactionsCreateForTeamDiscussionInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsCreateForTeamDiscussionInOrgParamSchema,
      void,
      ReactionsCreateForTeamDiscussionInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionInOrg
  }
)

const reactionsDeleteForTeamDiscussionParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    discussion_number: joi.number().required(),
    reaction_id: joi.number().required(),
  })
  .required()

router.delete(
  "reactionsDeleteForTeamDiscussion",
  "/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions/:reactionId",
  paramValidationFactory<ReactionsDeleteForTeamDiscussionParamSchema>(
    reactionsDeleteForTeamDiscussionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReactionsDeleteForTeamDiscussionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reactionsDeleteForTeamDiscussion

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForTeamDiscussion
  }
)

const teamsListPendingInvitationsInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

const teamsListPendingInvitationsInOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListPendingInvitationsInOrg",
  "/orgs/:org/teams/:teamSlug/invitations",
  paramValidationFactory<TeamsListPendingInvitationsInOrgParamSchema>(
    teamsListPendingInvitationsInOrgParamSchema
  ),
  queryValidationFactory<TeamsListPendingInvitationsInOrgQuerySchema>(
    teamsListPendingInvitationsInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListPendingInvitationsInOrgParamSchema,
      TeamsListPendingInvitationsInOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListPendingInvitationsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListPendingInvitationsInOrg
  }
)

const teamsListMembersInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

const teamsListMembersInOrgQuerySchema = joi
  .object()
  .keys({ role: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListMembersInOrg",
  "/orgs/:org/teams/:teamSlug/members",
  paramValidationFactory<TeamsListMembersInOrgParamSchema>(
    teamsListMembersInOrgParamSchema
  ),
  queryValidationFactory<TeamsListMembersInOrgQuerySchema>(
    teamsListMembersInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListMembersInOrgParamSchema,
      TeamsListMembersInOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListMembersInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListMembersInOrg
  }
)

const teamsGetMembershipForUserInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    username: joi.string().required(),
  })
  .required()

router.get(
  "teamsGetMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  paramValidationFactory<TeamsGetMembershipForUserInOrgParamSchema>(
    teamsGetMembershipForUserInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsGetMembershipForUserInOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsGetMembershipForUserInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetMembershipForUserInOrg
  }
)

const teamsAddOrUpdateMembershipForUserInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    username: joi.string().required(),
  })
  .required()

const teamsAddOrUpdateMembershipForUserInOrgBodySchema = joi
  .object()
  .keys({ role: joi.string() })
  .required()

router.put(
  "teamsAddOrUpdateMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  paramValidationFactory<TeamsAddOrUpdateMembershipForUserInOrgParamSchema>(
    teamsAddOrUpdateMembershipForUserInOrgParamSchema
  ),
  bodyValidationFactory<TeamsAddOrUpdateMembershipForUserInOrgBodySchema>(
    teamsAddOrUpdateMembershipForUserInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsAddOrUpdateMembershipForUserInOrgParamSchema,
      void,
      TeamsAddOrUpdateMembershipForUserInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateMembershipForUserInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateMembershipForUserInOrg
  }
)

const teamsRemoveMembershipForUserInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    username: joi.string().required(),
  })
  .required()

router.delete(
  "teamsRemoveMembershipForUserInOrg",
  "/orgs/:org/teams/:teamSlug/memberships/:username",
  paramValidationFactory<TeamsRemoveMembershipForUserInOrgParamSchema>(
    teamsRemoveMembershipForUserInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsRemoveMembershipForUserInOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsRemoveMembershipForUserInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveMembershipForUserInOrg
  }
)

const teamsListProjectsInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

const teamsListProjectsInOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListProjectsInOrg",
  "/orgs/:org/teams/:teamSlug/projects",
  paramValidationFactory<TeamsListProjectsInOrgParamSchema>(
    teamsListProjectsInOrgParamSchema
  ),
  queryValidationFactory<TeamsListProjectsInOrgQuerySchema>(
    teamsListProjectsInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListProjectsInOrgParamSchema,
      TeamsListProjectsInOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListProjectsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListProjectsInOrg
  }
)

const teamsCheckPermissionsForProjectInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    project_id: joi.number().required(),
  })
  .required()

router.get(
  "teamsCheckPermissionsForProjectInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  paramValidationFactory<TeamsCheckPermissionsForProjectInOrgParamSchema>(
    teamsCheckPermissionsForProjectInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsCheckPermissionsForProjectInOrgParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsCheckPermissionsForProjectInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForProjectInOrg
  }
)

const teamsAddOrUpdateProjectPermissionsInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    project_id: joi.number().required(),
  })
  .required()

const teamsAddOrUpdateProjectPermissionsInOrgBodySchema = joi
  .object()
  .keys({ permission: joi.string() })
  .required()

router.put(
  "teamsAddOrUpdateProjectPermissionsInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  paramValidationFactory<TeamsAddOrUpdateProjectPermissionsInOrgParamSchema>(
    teamsAddOrUpdateProjectPermissionsInOrgParamSchema
  ),
  bodyValidationFactory<TeamsAddOrUpdateProjectPermissionsInOrgBodySchema>(
    teamsAddOrUpdateProjectPermissionsInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsAddOrUpdateProjectPermissionsInOrgParamSchema,
      void,
      TeamsAddOrUpdateProjectPermissionsInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateProjectPermissionsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateProjectPermissionsInOrg
  }
)

const teamsRemoveProjectInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    project_id: joi.number().required(),
  })
  .required()

router.delete(
  "teamsRemoveProjectInOrg",
  "/orgs/:org/teams/:teamSlug/projects/:projectId",
  paramValidationFactory<TeamsRemoveProjectInOrgParamSchema>(
    teamsRemoveProjectInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsRemoveProjectInOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsRemoveProjectInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveProjectInOrg
  }
)

const teamsListReposInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

const teamsListReposInOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListReposInOrg",
  "/orgs/:org/teams/:teamSlug/repos",
  paramValidationFactory<TeamsListReposInOrgParamSchema>(
    teamsListReposInOrgParamSchema
  ),
  queryValidationFactory<TeamsListReposInOrgQuerySchema>(
    teamsListReposInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListReposInOrgParamSchema,
      TeamsListReposInOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListReposInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListReposInOrg
  }
)

const teamsCheckPermissionsForRepoInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })
  .required()

router.get(
  "teamsCheckPermissionsForRepoInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  paramValidationFactory<TeamsCheckPermissionsForRepoInOrgParamSchema>(
    teamsCheckPermissionsForRepoInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsCheckPermissionsForRepoInOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsCheckPermissionsForRepoInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForRepoInOrg
  }
)

const teamsAddOrUpdateRepoPermissionsInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })
  .required()

const teamsAddOrUpdateRepoPermissionsInOrgBodySchema = joi
  .object()
  .keys({ permission: joi.string() })
  .required()

router.put(
  "teamsAddOrUpdateRepoPermissionsInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  paramValidationFactory<TeamsAddOrUpdateRepoPermissionsInOrgParamSchema>(
    teamsAddOrUpdateRepoPermissionsInOrgParamSchema
  ),
  bodyValidationFactory<TeamsAddOrUpdateRepoPermissionsInOrgBodySchema>(
    teamsAddOrUpdateRepoPermissionsInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsAddOrUpdateRepoPermissionsInOrgParamSchema,
      void,
      TeamsAddOrUpdateRepoPermissionsInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateRepoPermissionsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateRepoPermissionsInOrg
  }
)

const teamsRemoveRepoInOrgParamSchema = joi
  .object()
  .keys({
    org: joi.string().required(),
    team_slug: joi.string().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })
  .required()

router.delete(
  "teamsRemoveRepoInOrg",
  "/orgs/:org/teams/:teamSlug/repos/:owner/:repo",
  paramValidationFactory<TeamsRemoveRepoInOrgParamSchema>(
    teamsRemoveRepoInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsRemoveRepoInOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsRemoveRepoInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveRepoInOrg
  }
)

const teamsListIdPGroupsInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

router.get(
  "teamsListIdPGroupsInOrg",
  "/orgs/:org/teams/:teamSlug/team-sync/group-mappings",
  paramValidationFactory<TeamsListIdPGroupsInOrgParamSchema>(
    teamsListIdPGroupsInOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsListIdPGroupsInOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsListIdPGroupsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListIdPGroupsInOrg
  }
)

const teamsCreateOrUpdateIdPGroupConnectionsInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

const teamsCreateOrUpdateIdPGroupConnectionsInOrgBodySchema = joi
  .object()
  .keys({
    groups: joi
      .array()
      .items(
        joi
          .object()
          .keys({
            group_id: joi.string().required(),
            group_name: joi.string().required(),
            group_description: joi.string().required(),
          })
      )
      .required(),
  })
  .required()

router.patch(
  "teamsCreateOrUpdateIdPGroupConnectionsInOrg",
  "/orgs/:org/teams/:teamSlug/team-sync/group-mappings",
  paramValidationFactory<TeamsCreateOrUpdateIdPGroupConnectionsInOrgParamSchema>(
    teamsCreateOrUpdateIdPGroupConnectionsInOrgParamSchema
  ),
  bodyValidationFactory<TeamsCreateOrUpdateIdPGroupConnectionsInOrgBodySchema>(
    teamsCreateOrUpdateIdPGroupConnectionsInOrgBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsCreateOrUpdateIdPGroupConnectionsInOrgParamSchema,
      void,
      TeamsCreateOrUpdateIdPGroupConnectionsInOrgBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsCreateOrUpdateIdPGroupConnectionsInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateOrUpdateIdPGroupConnectionsInOrg
  }
)

const teamsListChildInOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), team_slug: joi.string().required() })
  .required()

const teamsListChildInOrgQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListChildInOrg",
  "/orgs/:org/teams/:teamSlug/teams",
  paramValidationFactory<TeamsListChildInOrgParamSchema>(
    teamsListChildInOrgParamSchema
  ),
  queryValidationFactory<TeamsListChildInOrgQuerySchema>(
    teamsListChildInOrgQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListChildInOrgParamSchema,
      TeamsListChildInOrgQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListChildInOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListChildInOrg
  }
)

const projectsGetCardParamSchema = joi
  .object()
  .keys({ card_id: joi.number().required() })
  .required()

router.get(
  "projectsGetCard",
  "/projects/columns/cards/:cardId",
  paramValidationFactory<ProjectsGetCardParamSchema>(
    projectsGetCardParamSchema
  ),
  async (ctx: ValidatedCtx<ProjectsGetCardParamSchema, void, void>, next) => {
    //region safe-edit-region-projectsGetCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGetCard
  }
)

const projectsUpdateCardParamSchema = joi
  .object()
  .keys({ card_id: joi.number().required() })
  .required()

const projectsUpdateCardBodySchema = joi
  .object()
  .keys({ note: joi.string(), archived: joi.boolean() })
  .required()

router.patch(
  "projectsUpdateCard",
  "/projects/columns/cards/:cardId",
  paramValidationFactory<ProjectsUpdateCardParamSchema>(
    projectsUpdateCardParamSchema
  ),
  bodyValidationFactory<ProjectsUpdateCardBodySchema>(
    projectsUpdateCardBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsUpdateCardParamSchema,
      void,
      ProjectsUpdateCardBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-projectsUpdateCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsUpdateCard
  }
)

const projectsDeleteCardParamSchema = joi
  .object()
  .keys({ card_id: joi.number().required() })
  .required()

router.delete(
  "projectsDeleteCard",
  "/projects/columns/cards/:cardId",
  paramValidationFactory<ProjectsDeleteCardParamSchema>(
    projectsDeleteCardParamSchema
  ),
  async (
    ctx: ValidatedCtx<ProjectsDeleteCardParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-projectsDeleteCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsDeleteCard
  }
)

const projectsMoveCardParamSchema = joi
  .object()
  .keys({ card_id: joi.number().required() })
  .required()

const projectsMoveCardBodySchema = joi
  .object()
  .keys({ position: joi.string().required(), column_id: joi.number() })
  .required()

router.post(
  "projectsMoveCard",
  "/projects/columns/cards/:cardId/moves",
  paramValidationFactory<ProjectsMoveCardParamSchema>(
    projectsMoveCardParamSchema
  ),
  bodyValidationFactory<ProjectsMoveCardBodySchema>(projectsMoveCardBodySchema),
  async (
    ctx: ValidatedCtx<
      ProjectsMoveCardParamSchema,
      void,
      ProjectsMoveCardBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-projectsMoveCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsMoveCard
  }
)

const projectsGetColumnParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })
  .required()

router.get(
  "projectsGetColumn",
  "/projects/columns/:columnId",
  paramValidationFactory<ProjectsGetColumnParamSchema>(
    projectsGetColumnParamSchema
  ),
  async (ctx: ValidatedCtx<ProjectsGetColumnParamSchema, void, void>, next) => {
    //region safe-edit-region-projectsGetColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGetColumn
  }
)

const projectsUpdateColumnParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })
  .required()

const projectsUpdateColumnBodySchema = joi
  .object()
  .keys({ name: joi.string().required() })
  .required()

router.patch(
  "projectsUpdateColumn",
  "/projects/columns/:columnId",
  paramValidationFactory<ProjectsUpdateColumnParamSchema>(
    projectsUpdateColumnParamSchema
  ),
  bodyValidationFactory<ProjectsUpdateColumnBodySchema>(
    projectsUpdateColumnBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsUpdateColumnParamSchema,
      void,
      ProjectsUpdateColumnBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-projectsUpdateColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsUpdateColumn
  }
)

const projectsDeleteColumnParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })
  .required()

router.delete(
  "projectsDeleteColumn",
  "/projects/columns/:columnId",
  paramValidationFactory<ProjectsDeleteColumnParamSchema>(
    projectsDeleteColumnParamSchema
  ),
  async (
    ctx: ValidatedCtx<ProjectsDeleteColumnParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-projectsDeleteColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsDeleteColumn
  }
)

const projectsListCardsParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })
  .required()

const projectsListCardsQuerySchema = joi
  .object()
  .keys({
    archived_state: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "projectsListCards",
  "/projects/columns/:columnId/cards",
  paramValidationFactory<ProjectsListCardsParamSchema>(
    projectsListCardsParamSchema
  ),
  queryValidationFactory<ProjectsListCardsQuerySchema>(
    projectsListCardsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsListCardsParamSchema,
      ProjectsListCardsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-projectsListCards

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListCards
  }
)

const projectsCreateCardParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })
  .required()

const projectsCreateCardBodySchema = joi
  .object()
  .keys({
    note: joi.string(),
    content_id: joi.number(),
    content_type: joi.string(),
  })
  .required()

router.post(
  "projectsCreateCard",
  "/projects/columns/:columnId/cards",
  paramValidationFactory<ProjectsCreateCardParamSchema>(
    projectsCreateCardParamSchema
  ),
  bodyValidationFactory<ProjectsCreateCardBodySchema>(
    projectsCreateCardBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsCreateCardParamSchema,
      void,
      ProjectsCreateCardBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-projectsCreateCard

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateCard
  }
)

const projectsMoveColumnParamSchema = joi
  .object()
  .keys({ column_id: joi.number().required() })
  .required()

const projectsMoveColumnBodySchema = joi
  .object()
  .keys({ position: joi.string().required() })
  .required()

router.post(
  "projectsMoveColumn",
  "/projects/columns/:columnId/moves",
  paramValidationFactory<ProjectsMoveColumnParamSchema>(
    projectsMoveColumnParamSchema
  ),
  bodyValidationFactory<ProjectsMoveColumnBodySchema>(
    projectsMoveColumnBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsMoveColumnParamSchema,
      void,
      ProjectsMoveColumnBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-projectsMoveColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsMoveColumn
  }
)

const projectsGetParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })
  .required()

router.get(
  "projectsGet",
  "/projects/:projectId",
  paramValidationFactory<ProjectsGetParamSchema>(projectsGetParamSchema),
  async (ctx: ValidatedCtx<ProjectsGetParamSchema, void, void>, next) => {
    //region safe-edit-region-projectsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGet
  }
)

const projectsUpdateParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })
  .required()

const projectsUpdateBodySchema = joi
  .object()
  .keys({
    name: joi.string(),
    body: joi.string(),
    state: joi.string(),
    organization_permission: joi.string(),
    private: joi.boolean(),
  })
  .required()

router.patch(
  "projectsUpdate",
  "/projects/:projectId",
  paramValidationFactory<ProjectsUpdateParamSchema>(projectsUpdateParamSchema),
  bodyValidationFactory<ProjectsUpdateBodySchema>(projectsUpdateBodySchema),
  async (
    ctx: ValidatedCtx<
      ProjectsUpdateParamSchema,
      void,
      ProjectsUpdateBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-projectsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsUpdate
  }
)

const projectsDeleteParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })
  .required()

router.delete(
  "projectsDelete",
  "/projects/:projectId",
  paramValidationFactory<ProjectsDeleteParamSchema>(projectsDeleteParamSchema),
  async (ctx: ValidatedCtx<ProjectsDeleteParamSchema, void, void>, next) => {
    //region safe-edit-region-projectsDelete

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsDelete
  }
)

const projectsListCollaboratorsParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })
  .required()

const projectsListCollaboratorsQuerySchema = joi
  .object()
  .keys({
    affiliation: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "projectsListCollaborators",
  "/projects/:projectId/collaborators",
  paramValidationFactory<ProjectsListCollaboratorsParamSchema>(
    projectsListCollaboratorsParamSchema
  ),
  queryValidationFactory<ProjectsListCollaboratorsQuerySchema>(
    projectsListCollaboratorsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsListCollaboratorsParamSchema,
      ProjectsListCollaboratorsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-projectsListCollaborators

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListCollaborators
  }
)

const projectsAddCollaboratorParamSchema = joi
  .object()
  .keys({
    project_id: joi.number().required(),
    username: joi.string().required(),
  })
  .required()

const projectsAddCollaboratorBodySchema = joi
  .object()
  .keys({ permission: joi.string() })
  .required()

router.put(
  "projectsAddCollaborator",
  "/projects/:projectId/collaborators/:username",
  paramValidationFactory<ProjectsAddCollaboratorParamSchema>(
    projectsAddCollaboratorParamSchema
  ),
  bodyValidationFactory<ProjectsAddCollaboratorBodySchema>(
    projectsAddCollaboratorBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsAddCollaboratorParamSchema,
      void,
      ProjectsAddCollaboratorBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-projectsAddCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsAddCollaborator
  }
)

const projectsRemoveCollaboratorParamSchema = joi
  .object()
  .keys({
    project_id: joi.number().required(),
    username: joi.string().required(),
  })
  .required()

router.delete(
  "projectsRemoveCollaborator",
  "/projects/:projectId/collaborators/:username",
  paramValidationFactory<ProjectsRemoveCollaboratorParamSchema>(
    projectsRemoveCollaboratorParamSchema
  ),
  async (
    ctx: ValidatedCtx<ProjectsRemoveCollaboratorParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-projectsRemoveCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsRemoveCollaborator
  }
)

const projectsGetPermissionForUserParamSchema = joi
  .object()
  .keys({
    project_id: joi.number().required(),
    username: joi.string().required(),
  })
  .required()

router.get(
  "projectsGetPermissionForUser",
  "/projects/:projectId/collaborators/:username/permission",
  paramValidationFactory<ProjectsGetPermissionForUserParamSchema>(
    projectsGetPermissionForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<ProjectsGetPermissionForUserParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-projectsGetPermissionForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsGetPermissionForUser
  }
)

const projectsListColumnsParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })
  .required()

const projectsListColumnsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "projectsListColumns",
  "/projects/:projectId/columns",
  paramValidationFactory<ProjectsListColumnsParamSchema>(
    projectsListColumnsParamSchema
  ),
  queryValidationFactory<ProjectsListColumnsQuerySchema>(
    projectsListColumnsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsListColumnsParamSchema,
      ProjectsListColumnsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-projectsListColumns

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListColumns
  }
)

const projectsCreateColumnParamSchema = joi
  .object()
  .keys({ project_id: joi.number().required() })
  .required()

const projectsCreateColumnBodySchema = joi
  .object()
  .keys({ name: joi.string().required() })
  .required()

router.post(
  "projectsCreateColumn",
  "/projects/:projectId/columns",
  paramValidationFactory<ProjectsCreateColumnParamSchema>(
    projectsCreateColumnParamSchema
  ),
  bodyValidationFactory<ProjectsCreateColumnBodySchema>(
    projectsCreateColumnBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsCreateColumnParamSchema,
      void,
      ProjectsCreateColumnBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-projectsCreateColumn

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateColumn
  }
)

router.get(
  "rateLimitGet",
  "/rate_limit",
  async (ctx: ValidatedCtx<void, void, void>, next) => {
    //region safe-edit-region-rateLimitGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-rateLimitGet
  }
)

const reactionsDeleteLegacyParamSchema = joi
  .object()
  .keys({ reaction_id: joi.number().required() })
  .required()

router.delete(
  "reactionsDeleteLegacy",
  "/reactions/:reactionId",
  paramValidationFactory<ReactionsDeleteLegacyParamSchema>(
    reactionsDeleteLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReactionsDeleteLegacyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reactionsDeleteLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteLegacy
  }
)

const reposGetParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGet",
  "/repos/:owner/:repo",
  paramValidationFactory<ReposGetParamSchema>(reposGetParamSchema),
  async (ctx: ValidatedCtx<ReposGetParamSchema, void, void>, next) => {
    //region safe-edit-region-reposGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGet
  }
)

const reposUpdateParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposUpdateBodySchema = joi
  .object()
  .keys({
    name: joi.string(),
    description: joi.string(),
    homepage: joi.string(),
    private: joi.boolean(),
    visibility: joi.string(),
    has_issues: joi.boolean(),
    has_projects: joi.boolean(),
    has_wiki: joi.boolean(),
    is_template: joi.boolean(),
    default_branch: joi.string(),
    allow_squash_merge: joi.boolean(),
    allow_merge_commit: joi.boolean(),
    allow_rebase_merge: joi.boolean(),
    delete_branch_on_merge: joi.boolean(),
    archived: joi.boolean(),
  })
  .required()

router.patch(
  "reposUpdate",
  "/repos/:owner/:repo",
  paramValidationFactory<ReposUpdateParamSchema>(reposUpdateParamSchema),
  bodyValidationFactory<ReposUpdateBodySchema>(reposUpdateBodySchema),
  async (
    ctx: ValidatedCtx<ReposUpdateParamSchema, void, ReposUpdateBodySchema>,
    next
  ) => {
    //region safe-edit-region-reposUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdate
  }
)

const reposDeleteParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.delete(
  "reposDelete",
  "/repos/:owner/:repo",
  paramValidationFactory<ReposDeleteParamSchema>(reposDeleteParamSchema),
  async (ctx: ValidatedCtx<ReposDeleteParamSchema, void, void>, next) => {
    //region safe-edit-region-reposDelete

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDelete
  }
)

const actionsListArtifactsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const actionsListArtifactsForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "actionsListArtifactsForRepo",
  "/repos/:owner/:repo/actions/artifacts",
  paramValidationFactory<ActionsListArtifactsForRepoParamSchema>(
    actionsListArtifactsForRepoParamSchema
  ),
  queryValidationFactory<ActionsListArtifactsForRepoQuerySchema>(
    actionsListArtifactsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListArtifactsForRepoParamSchema,
      ActionsListArtifactsForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListArtifactsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListArtifactsForRepo
  }
)

const actionsGetArtifactParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    artifact_id: joi.number().required(),
  })
  .required()

router.get(
  "actionsGetArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId",
  paramValidationFactory<ActionsGetArtifactParamSchema>(
    actionsGetArtifactParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetArtifactParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetArtifact

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetArtifact
  }
)

const actionsDeleteArtifactParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    artifact_id: joi.number().required(),
  })
  .required()

router.delete(
  "actionsDeleteArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId",
  paramValidationFactory<ActionsDeleteArtifactParamSchema>(
    actionsDeleteArtifactParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsDeleteArtifactParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsDeleteArtifact

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteArtifact
  }
)

const actionsDownloadArtifactParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    artifact_id: joi.number().required(),
    archive_format: joi.string().required(),
  })
  .required()

router.get(
  "actionsDownloadArtifact",
  "/repos/:owner/:repo/actions/artifacts/:artifactId/:archiveFormat",
  paramValidationFactory<ActionsDownloadArtifactParamSchema>(
    actionsDownloadArtifactParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsDownloadArtifactParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsDownloadArtifact

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDownloadArtifact
  }
)

const actionsGetJobForWorkflowRunParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    job_id: joi.number().required(),
  })
  .required()

router.get(
  "actionsGetJobForWorkflowRun",
  "/repos/:owner/:repo/actions/jobs/:jobId",
  paramValidationFactory<ActionsGetJobForWorkflowRunParamSchema>(
    actionsGetJobForWorkflowRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetJobForWorkflowRunParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetJobForWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetJobForWorkflowRun
  }
)

const actionsDownloadJobLogsForWorkflowRunParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    job_id: joi.number().required(),
  })
  .required()

router.get(
  "actionsDownloadJobLogsForWorkflowRun",
  "/repos/:owner/:repo/actions/jobs/:jobId/logs",
  paramValidationFactory<ActionsDownloadJobLogsForWorkflowRunParamSchema>(
    actionsDownloadJobLogsForWorkflowRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsDownloadJobLogsForWorkflowRunParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsDownloadJobLogsForWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDownloadJobLogsForWorkflowRun
  }
)

const actionsListSelfHostedRunnersForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const actionsListSelfHostedRunnersForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "actionsListSelfHostedRunnersForRepo",
  "/repos/:owner/:repo/actions/runners",
  paramValidationFactory<ActionsListSelfHostedRunnersForRepoParamSchema>(
    actionsListSelfHostedRunnersForRepoParamSchema
  ),
  queryValidationFactory<ActionsListSelfHostedRunnersForRepoQuerySchema>(
    actionsListSelfHostedRunnersForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListSelfHostedRunnersForRepoParamSchema,
      ActionsListSelfHostedRunnersForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListSelfHostedRunnersForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListSelfHostedRunnersForRepo
  }
)

const actionsListRunnerApplicationsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "actionsListRunnerApplicationsForRepo",
  "/repos/:owner/:repo/actions/runners/downloads",
  paramValidationFactory<ActionsListRunnerApplicationsForRepoParamSchema>(
    actionsListRunnerApplicationsForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListRunnerApplicationsForRepoParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListRunnerApplicationsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRunnerApplicationsForRepo
  }
)

const actionsCreateRegistrationTokenForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.post(
  "actionsCreateRegistrationTokenForRepo",
  "/repos/:owner/:repo/actions/runners/registration-token",
  paramValidationFactory<ActionsCreateRegistrationTokenForRepoParamSchema>(
    actionsCreateRegistrationTokenForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsCreateRegistrationTokenForRepoParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsCreateRegistrationTokenForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRegistrationTokenForRepo
  }
)

const actionsCreateRemoveTokenForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.post(
  "actionsCreateRemoveTokenForRepo",
  "/repos/:owner/:repo/actions/runners/remove-token",
  paramValidationFactory<ActionsCreateRemoveTokenForRepoParamSchema>(
    actionsCreateRemoveTokenForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsCreateRemoveTokenForRepoParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsCreateRemoveTokenForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateRemoveTokenForRepo
  }
)

const actionsGetSelfHostedRunnerForRepoParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    runner_id: joi.number().required(),
  })
  .required()

router.get(
  "actionsGetSelfHostedRunnerForRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId",
  paramValidationFactory<ActionsGetSelfHostedRunnerForRepoParamSchema>(
    actionsGetSelfHostedRunnerForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetSelfHostedRunnerForRepoParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetSelfHostedRunnerForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetSelfHostedRunnerForRepo
  }
)

const actionsDeleteSelfHostedRunnerFromRepoParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    runner_id: joi.number().required(),
  })
  .required()

router.delete(
  "actionsDeleteSelfHostedRunnerFromRepo",
  "/repos/:owner/:repo/actions/runners/:runnerId",
  paramValidationFactory<ActionsDeleteSelfHostedRunnerFromRepoParamSchema>(
    actionsDeleteSelfHostedRunnerFromRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsDeleteSelfHostedRunnerFromRepoParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsDeleteSelfHostedRunnerFromRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteSelfHostedRunnerFromRepo
  }
)

const actionsListWorkflowRunsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const actionsListWorkflowRunsForRepoQuerySchema = joi
  .object()
  .keys({
    actor: joi.string(),
    branch: joi.string(),
    event: joi.string(),
    status: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "actionsListWorkflowRunsForRepo",
  "/repos/:owner/:repo/actions/runs",
  paramValidationFactory<ActionsListWorkflowRunsForRepoParamSchema>(
    actionsListWorkflowRunsForRepoParamSchema
  ),
  queryValidationFactory<ActionsListWorkflowRunsForRepoQuerySchema>(
    actionsListWorkflowRunsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListWorkflowRunsForRepoParamSchema,
      ActionsListWorkflowRunsForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListWorkflowRunsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListWorkflowRunsForRepo
  }
)

const actionsGetWorkflowRunParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })
  .required()

router.get(
  "actionsGetWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId",
  paramValidationFactory<ActionsGetWorkflowRunParamSchema>(
    actionsGetWorkflowRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetWorkflowRunParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflowRun
  }
)

const actionsListWorkflowRunArtifactsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })
  .required()

const actionsListWorkflowRunArtifactsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "actionsListWorkflowRunArtifacts",
  "/repos/:owner/:repo/actions/runs/:runId/artifacts",
  paramValidationFactory<ActionsListWorkflowRunArtifactsParamSchema>(
    actionsListWorkflowRunArtifactsParamSchema
  ),
  queryValidationFactory<ActionsListWorkflowRunArtifactsQuerySchema>(
    actionsListWorkflowRunArtifactsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListWorkflowRunArtifactsParamSchema,
      ActionsListWorkflowRunArtifactsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListWorkflowRunArtifacts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListWorkflowRunArtifacts
  }
)

const actionsCancelWorkflowRunParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })
  .required()

router.post(
  "actionsCancelWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId/cancel",
  paramValidationFactory<ActionsCancelWorkflowRunParamSchema>(
    actionsCancelWorkflowRunParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsCancelWorkflowRunParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsCancelWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCancelWorkflowRun
  }
)

const actionsListJobsForWorkflowRunParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })
  .required()

const actionsListJobsForWorkflowRunQuerySchema = joi
  .object()
  .keys({ filter: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "actionsListJobsForWorkflowRun",
  "/repos/:owner/:repo/actions/runs/:runId/jobs",
  paramValidationFactory<ActionsListJobsForWorkflowRunParamSchema>(
    actionsListJobsForWorkflowRunParamSchema
  ),
  queryValidationFactory<ActionsListJobsForWorkflowRunQuerySchema>(
    actionsListJobsForWorkflowRunQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListJobsForWorkflowRunParamSchema,
      ActionsListJobsForWorkflowRunQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListJobsForWorkflowRun

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListJobsForWorkflowRun
  }
)

const actionsDownloadWorkflowRunLogsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })
  .required()

router.get(
  "actionsDownloadWorkflowRunLogs",
  "/repos/:owner/:repo/actions/runs/:runId/logs",
  paramValidationFactory<ActionsDownloadWorkflowRunLogsParamSchema>(
    actionsDownloadWorkflowRunLogsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsDownloadWorkflowRunLogsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsDownloadWorkflowRunLogs

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDownloadWorkflowRunLogs
  }
)

const actionsDeleteWorkflowRunLogsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })
  .required()

router.delete(
  "actionsDeleteWorkflowRunLogs",
  "/repos/:owner/:repo/actions/runs/:runId/logs",
  paramValidationFactory<ActionsDeleteWorkflowRunLogsParamSchema>(
    actionsDeleteWorkflowRunLogsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsDeleteWorkflowRunLogsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsDeleteWorkflowRunLogs

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteWorkflowRunLogs
  }
)

const actionsReRunWorkflowParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })
  .required()

router.post(
  "actionsReRunWorkflow",
  "/repos/:owner/:repo/actions/runs/:runId/rerun",
  paramValidationFactory<ActionsReRunWorkflowParamSchema>(
    actionsReRunWorkflowParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsReRunWorkflowParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsReRunWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsReRunWorkflow
  }
)

const actionsGetWorkflowRunUsageParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    run_id: joi.number().required(),
  })
  .required()

router.get(
  "actionsGetWorkflowRunUsage",
  "/repos/:owner/:repo/actions/runs/:runId/timing",
  paramValidationFactory<ActionsGetWorkflowRunUsageParamSchema>(
    actionsGetWorkflowRunUsageParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetWorkflowRunUsageParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetWorkflowRunUsage

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflowRunUsage
  }
)

const actionsListRepoSecretsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const actionsListRepoSecretsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "actionsListRepoSecrets",
  "/repos/:owner/:repo/actions/secrets",
  paramValidationFactory<ActionsListRepoSecretsParamSchema>(
    actionsListRepoSecretsParamSchema
  ),
  queryValidationFactory<ActionsListRepoSecretsQuerySchema>(
    actionsListRepoSecretsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListRepoSecretsParamSchema,
      ActionsListRepoSecretsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListRepoSecrets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRepoSecrets
  }
)

const actionsGetRepoPublicKeyParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "actionsGetRepoPublicKey",
  "/repos/:owner/:repo/actions/secrets/public-key",
  paramValidationFactory<ActionsGetRepoPublicKeyParamSchema>(
    actionsGetRepoPublicKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetRepoPublicKeyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetRepoPublicKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetRepoPublicKey
  }
)

const actionsGetRepoSecretParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    secret_name: joi.string().required(),
  })
  .required()

router.get(
  "actionsGetRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  paramValidationFactory<ActionsGetRepoSecretParamSchema>(
    actionsGetRepoSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetRepoSecretParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetRepoSecret
  }
)

const actionsCreateOrUpdateRepoSecretParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    secret_name: joi.string().required(),
  })
  .required()

const actionsCreateOrUpdateRepoSecretBodySchema = joi
  .object()
  .keys({ encrypted_value: joi.string(), key_id: joi.string() })
  .required()

router.put(
  "actionsCreateOrUpdateRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  paramValidationFactory<ActionsCreateOrUpdateRepoSecretParamSchema>(
    actionsCreateOrUpdateRepoSecretParamSchema
  ),
  bodyValidationFactory<ActionsCreateOrUpdateRepoSecretBodySchema>(
    actionsCreateOrUpdateRepoSecretBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsCreateOrUpdateRepoSecretParamSchema,
      void,
      ActionsCreateOrUpdateRepoSecretBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-actionsCreateOrUpdateRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsCreateOrUpdateRepoSecret
  }
)

const actionsDeleteRepoSecretParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    secret_name: joi.string().required(),
  })
  .required()

router.delete(
  "actionsDeleteRepoSecret",
  "/repos/:owner/:repo/actions/secrets/:secretName",
  paramValidationFactory<ActionsDeleteRepoSecretParamSchema>(
    actionsDeleteRepoSecretParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsDeleteRepoSecretParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsDeleteRepoSecret

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsDeleteRepoSecret
  }
)

const actionsListRepoWorkflowsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const actionsListRepoWorkflowsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "actionsListRepoWorkflows",
  "/repos/:owner/:repo/actions/workflows",
  paramValidationFactory<ActionsListRepoWorkflowsParamSchema>(
    actionsListRepoWorkflowsParamSchema
  ),
  queryValidationFactory<ActionsListRepoWorkflowsQuerySchema>(
    actionsListRepoWorkflowsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListRepoWorkflowsParamSchema,
      ActionsListRepoWorkflowsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListRepoWorkflows

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListRepoWorkflows
  }
)

const actionsGetWorkflowParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    workflow_id: joi.number().required(),
  })
  .required()

router.get(
  "actionsGetWorkflow",
  "/repos/:owner/:repo/actions/workflows/:workflowId",
  paramValidationFactory<ActionsGetWorkflowParamSchema>(
    actionsGetWorkflowParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetWorkflowParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetWorkflow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflow
  }
)

const actionsListWorkflowRunsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    workflow_id: joi.number().required(),
  })
  .required()

const actionsListWorkflowRunsQuerySchema = joi
  .object()
  .keys({
    actor: joi.string(),
    branch: joi.string(),
    event: joi.string(),
    status: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "actionsListWorkflowRuns",
  "/repos/:owner/:repo/actions/workflows/:workflowId/runs",
  paramValidationFactory<ActionsListWorkflowRunsParamSchema>(
    actionsListWorkflowRunsParamSchema
  ),
  queryValidationFactory<ActionsListWorkflowRunsQuerySchema>(
    actionsListWorkflowRunsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActionsListWorkflowRunsParamSchema,
      ActionsListWorkflowRunsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-actionsListWorkflowRuns

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsListWorkflowRuns
  }
)

const actionsGetWorkflowUsageParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    workflow_id: joi.number().required(),
  })
  .required()

router.get(
  "actionsGetWorkflowUsage",
  "/repos/:owner/:repo/actions/workflows/:workflowId/timing",
  paramValidationFactory<ActionsGetWorkflowUsageParamSchema>(
    actionsGetWorkflowUsageParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActionsGetWorkflowUsageParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-actionsGetWorkflowUsage

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-actionsGetWorkflowUsage
  }
)

const issuesListAssigneesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const issuesListAssigneesQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "issuesListAssignees",
  "/repos/:owner/:repo/assignees",
  paramValidationFactory<IssuesListAssigneesParamSchema>(
    issuesListAssigneesParamSchema
  ),
  queryValidationFactory<IssuesListAssigneesQuerySchema>(
    issuesListAssigneesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListAssigneesParamSchema,
      IssuesListAssigneesQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListAssignees

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListAssignees
  }
)

const issuesCheckUserCanBeAssignedParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    assignee: joi.string().required(),
  })
  .required()

router.get(
  "issuesCheckUserCanBeAssigned",
  "/repos/:owner/:repo/assignees/:assignee",
  paramValidationFactory<IssuesCheckUserCanBeAssignedParamSchema>(
    issuesCheckUserCanBeAssignedParamSchema
  ),
  async (
    ctx: ValidatedCtx<IssuesCheckUserCanBeAssignedParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-issuesCheckUserCanBeAssigned

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCheckUserCanBeAssigned
  }
)

const reposEnableAutomatedSecurityFixesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.put(
  "reposEnableAutomatedSecurityFixes",
  "/repos/:owner/:repo/automated-security-fixes",
  paramValidationFactory<ReposEnableAutomatedSecurityFixesParamSchema>(
    reposEnableAutomatedSecurityFixesParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposEnableAutomatedSecurityFixesParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposEnableAutomatedSecurityFixes

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposEnableAutomatedSecurityFixes
  }
)

const reposDisableAutomatedSecurityFixesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.delete(
  "reposDisableAutomatedSecurityFixes",
  "/repos/:owner/:repo/automated-security-fixes",
  paramValidationFactory<ReposDisableAutomatedSecurityFixesParamSchema>(
    reposDisableAutomatedSecurityFixesParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposDisableAutomatedSecurityFixesParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposDisableAutomatedSecurityFixes

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDisableAutomatedSecurityFixes
  }
)

const reposListBranchesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListBranchesQuerySchema = joi
  .object()
  .keys({
    protected: joi.boolean(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "reposListBranches",
  "/repos/:owner/:repo/branches",
  paramValidationFactory<ReposListBranchesParamSchema>(
    reposListBranchesParamSchema
  ),
  queryValidationFactory<ReposListBranchesQuerySchema>(
    reposListBranchesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListBranchesParamSchema,
      ReposListBranchesQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListBranches

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListBranches
  }
)

const reposGetBranchParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.get(
  "reposGetBranch",
  "/repos/:owner/:repo/branches/:branch",
  paramValidationFactory<ReposGetBranchParamSchema>(reposGetBranchParamSchema),
  async (ctx: ValidatedCtx<ReposGetBranchParamSchema, void, void>, next) => {
    //region safe-edit-region-reposGetBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetBranch
  }
)

const reposGetBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.get(
  "reposGetBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  paramValidationFactory<ReposGetBranchProtectionParamSchema>(
    reposGetBranchProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetBranchProtectionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetBranchProtection
  }
)

const reposUpdateBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposUpdateBranchProtectionBodySchema = joi
  .object()
  .keys({
    required_status_checks: joi
      .object()
      .keys({
        strict: joi.boolean().required(),
        contexts: joi.array().items(joi.string()).required(),
      })
      .required(),
    enforce_admins: joi.boolean().required(),
    required_pull_request_reviews: joi
      .object()
      .keys({
        dismissal_restrictions: joi
          .object()
          .keys({
            users: joi.array().items(joi.string()),
            teams: joi.array().items(joi.string()),
          }),
        dismiss_stale_reviews: joi.boolean(),
        require_code_owner_reviews: joi.boolean(),
        required_approving_review_count: joi.number(),
      })
      .required(),
    restrictions: joi
      .object()
      .keys({
        users: joi.array().items(joi.string()).required(),
        teams: joi.array().items(joi.string()).required(),
        apps: joi.array().items(joi.string()),
      })
      .required(),
    required_linear_history: joi.boolean(),
    allow_force_pushes: joi.boolean(),
    allow_deletions: joi.boolean(),
  })
  .required()

router.put(
  "reposUpdateBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  paramValidationFactory<ReposUpdateBranchProtectionParamSchema>(
    reposUpdateBranchProtectionParamSchema
  ),
  bodyValidationFactory<ReposUpdateBranchProtectionBodySchema>(
    reposUpdateBranchProtectionBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposUpdateBranchProtectionParamSchema,
      void,
      ReposUpdateBranchProtectionBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposUpdateBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateBranchProtection
  }
)

const reposDeleteBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.delete(
  "reposDeleteBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection",
  paramValidationFactory<ReposDeleteBranchProtectionParamSchema>(
    reposDeleteBranchProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeleteBranchProtectionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeleteBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteBranchProtection
  }
)

const reposGetAdminBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.get(
  "reposGetAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  paramValidationFactory<ReposGetAdminBranchProtectionParamSchema>(
    reposGetAdminBranchProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetAdminBranchProtectionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetAdminBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAdminBranchProtection
  }
)

const reposSetAdminBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.post(
  "reposSetAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  paramValidationFactory<ReposSetAdminBranchProtectionParamSchema>(
    reposSetAdminBranchProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposSetAdminBranchProtectionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposSetAdminBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetAdminBranchProtection
  }
)

const reposDeleteAdminBranchProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.delete(
  "reposDeleteAdminBranchProtection",
  "/repos/:owner/:repo/branches/:branch/protection/enforce_admins",
  paramValidationFactory<ReposDeleteAdminBranchProtectionParamSchema>(
    reposDeleteAdminBranchProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeleteAdminBranchProtectionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeleteAdminBranchProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteAdminBranchProtection
  }
)

const reposGetPullRequestReviewProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.get(
  "reposGetPullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  paramValidationFactory<ReposGetPullRequestReviewProtectionParamSchema>(
    reposGetPullRequestReviewProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposGetPullRequestReviewProtectionParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposGetPullRequestReviewProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPullRequestReviewProtection
  }
)

const reposUpdatePullRequestReviewProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposUpdatePullRequestReviewProtectionBodySchema = joi
  .object()
  .keys({
    dismissal_restrictions: joi
      .object()
      .keys({
        users: joi.array().items(joi.string()),
        teams: joi.array().items(joi.string()),
      }),
    dismiss_stale_reviews: joi.boolean(),
    require_code_owner_reviews: joi.boolean(),
    required_approving_review_count: joi.number(),
  })
  .required()

router.patch(
  "reposUpdatePullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  paramValidationFactory<ReposUpdatePullRequestReviewProtectionParamSchema>(
    reposUpdatePullRequestReviewProtectionParamSchema
  ),
  bodyValidationFactory<ReposUpdatePullRequestReviewProtectionBodySchema>(
    reposUpdatePullRequestReviewProtectionBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposUpdatePullRequestReviewProtectionParamSchema,
      void,
      ReposUpdatePullRequestReviewProtectionBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposUpdatePullRequestReviewProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdatePullRequestReviewProtection
  }
)

const reposDeletePullRequestReviewProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.delete(
  "reposDeletePullRequestReviewProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews",
  paramValidationFactory<ReposDeletePullRequestReviewProtectionParamSchema>(
    reposDeletePullRequestReviewProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposDeletePullRequestReviewProtectionParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposDeletePullRequestReviewProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeletePullRequestReviewProtection
  }
)

const reposGetCommitSignatureProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.get(
  "reposGetCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  paramValidationFactory<ReposGetCommitSignatureProtectionParamSchema>(
    reposGetCommitSignatureProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetCommitSignatureProtectionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetCommitSignatureProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommitSignatureProtection
  }
)

const reposCreateCommitSignatureProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.post(
  "reposCreateCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  paramValidationFactory<ReposCreateCommitSignatureProtectionParamSchema>(
    reposCreateCommitSignatureProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreateCommitSignatureProtectionParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateCommitSignatureProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateCommitSignatureProtection
  }
)

const reposDeleteCommitSignatureProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.delete(
  "reposDeleteCommitSignatureProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_signatures",
  paramValidationFactory<ReposDeleteCommitSignatureProtectionParamSchema>(
    reposDeleteCommitSignatureProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposDeleteCommitSignatureProtectionParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposDeleteCommitSignatureProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteCommitSignatureProtection
  }
)

const reposGetStatusChecksProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.get(
  "reposGetStatusChecksProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  paramValidationFactory<ReposGetStatusChecksProtectionParamSchema>(
    reposGetStatusChecksProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetStatusChecksProtectionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetStatusChecksProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetStatusChecksProtection
  }
)

const reposUpdateStatusCheckPotectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposUpdateStatusCheckPotectionBodySchema = joi
  .object()
  .keys({ strict: joi.boolean(), contexts: joi.array().items(joi.string()) })
  .required()

router.patch(
  "reposUpdateStatusCheckPotection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  paramValidationFactory<ReposUpdateStatusCheckPotectionParamSchema>(
    reposUpdateStatusCheckPotectionParamSchema
  ),
  bodyValidationFactory<ReposUpdateStatusCheckPotectionBodySchema>(
    reposUpdateStatusCheckPotectionBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposUpdateStatusCheckPotectionParamSchema,
      void,
      ReposUpdateStatusCheckPotectionBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposUpdateStatusCheckPotection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateStatusCheckPotection
  }
)

const reposRemoveStatusCheckProtectionParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.delete(
  "reposRemoveStatusCheckProtection",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks",
  paramValidationFactory<ReposRemoveStatusCheckProtectionParamSchema>(
    reposRemoveStatusCheckProtectionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposRemoveStatusCheckProtectionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposRemoveStatusCheckProtection

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveStatusCheckProtection
  }
)

const reposGetAllStatusCheckContextsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.get(
  "reposGetAllStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<ReposGetAllStatusCheckContextsParamSchema>(
    reposGetAllStatusCheckContextsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetAllStatusCheckContextsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetAllStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAllStatusCheckContexts
  }
)

const reposSetStatusCheckContextsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposSetStatusCheckContextsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.put(
  "reposSetStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<ReposSetStatusCheckContextsParamSchema>(
    reposSetStatusCheckContextsParamSchema
  ),
  bodyValidationFactory<ReposSetStatusCheckContextsBodySchema>(
    reposSetStatusCheckContextsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposSetStatusCheckContextsParamSchema,
      void,
      ReposSetStatusCheckContextsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposSetStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetStatusCheckContexts
  }
)

const reposAddStatusCheckContextsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposAddStatusCheckContextsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.post(
  "reposAddStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<ReposAddStatusCheckContextsParamSchema>(
    reposAddStatusCheckContextsParamSchema
  ),
  bodyValidationFactory<ReposAddStatusCheckContextsBodySchema>(
    reposAddStatusCheckContextsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposAddStatusCheckContextsParamSchema,
      void,
      ReposAddStatusCheckContextsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposAddStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddStatusCheckContexts
  }
)

const reposRemoveStatusCheckContextsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposRemoveStatusCheckContextsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.delete(
  "reposRemoveStatusCheckContexts",
  "/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts",
  paramValidationFactory<ReposRemoveStatusCheckContextsParamSchema>(
    reposRemoveStatusCheckContextsParamSchema
  ),
  bodyValidationFactory<ReposRemoveStatusCheckContextsBodySchema>(
    reposRemoveStatusCheckContextsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposRemoveStatusCheckContextsParamSchema,
      void,
      ReposRemoveStatusCheckContextsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposRemoveStatusCheckContexts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveStatusCheckContexts
  }
)

const reposGetAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.get(
  "reposGetAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions",
  paramValidationFactory<ReposGetAccessRestrictionsParamSchema>(
    reposGetAccessRestrictionsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetAccessRestrictionsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAccessRestrictions
  }
)

const reposDeleteAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.delete(
  "reposDeleteAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions",
  paramValidationFactory<ReposDeleteAccessRestrictionsParamSchema>(
    reposDeleteAccessRestrictionsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeleteAccessRestrictionsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeleteAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteAccessRestrictions
  }
)

const reposGetAppsWithAccessToProtectedBranchParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.get(
  "reposGetAppsWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<ReposGetAppsWithAccessToProtectedBranchParamSchema>(
    reposGetAppsWithAccessToProtectedBranchParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposGetAppsWithAccessToProtectedBranchParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposGetAppsWithAccessToProtectedBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAppsWithAccessToProtectedBranch
  }
)

const reposSetAppAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposSetAppAccessRestrictionsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.put(
  "reposSetAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<ReposSetAppAccessRestrictionsParamSchema>(
    reposSetAppAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<ReposSetAppAccessRestrictionsBodySchema>(
    reposSetAppAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposSetAppAccessRestrictionsParamSchema,
      void,
      ReposSetAppAccessRestrictionsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposSetAppAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetAppAccessRestrictions
  }
)

const reposAddAppAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposAddAppAccessRestrictionsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.post(
  "reposAddAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<ReposAddAppAccessRestrictionsParamSchema>(
    reposAddAppAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<ReposAddAppAccessRestrictionsBodySchema>(
    reposAddAppAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposAddAppAccessRestrictionsParamSchema,
      void,
      ReposAddAppAccessRestrictionsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposAddAppAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddAppAccessRestrictions
  }
)

const reposRemoveAppAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposRemoveAppAccessRestrictionsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.delete(
  "reposRemoveAppAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/apps",
  paramValidationFactory<ReposRemoveAppAccessRestrictionsParamSchema>(
    reposRemoveAppAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<ReposRemoveAppAccessRestrictionsBodySchema>(
    reposRemoveAppAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposRemoveAppAccessRestrictionsParamSchema,
      void,
      ReposRemoveAppAccessRestrictionsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposRemoveAppAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveAppAccessRestrictions
  }
)

const reposGetTeamsWithAccessToProtectedBranchParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.get(
  "reposGetTeamsWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<ReposGetTeamsWithAccessToProtectedBranchParamSchema>(
    reposGetTeamsWithAccessToProtectedBranchParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposGetTeamsWithAccessToProtectedBranchParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposGetTeamsWithAccessToProtectedBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetTeamsWithAccessToProtectedBranch
  }
)

const reposSetTeamAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposSetTeamAccessRestrictionsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.put(
  "reposSetTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<ReposSetTeamAccessRestrictionsParamSchema>(
    reposSetTeamAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<ReposSetTeamAccessRestrictionsBodySchema>(
    reposSetTeamAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposSetTeamAccessRestrictionsParamSchema,
      void,
      ReposSetTeamAccessRestrictionsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposSetTeamAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetTeamAccessRestrictions
  }
)

const reposAddTeamAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposAddTeamAccessRestrictionsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.post(
  "reposAddTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<ReposAddTeamAccessRestrictionsParamSchema>(
    reposAddTeamAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<ReposAddTeamAccessRestrictionsBodySchema>(
    reposAddTeamAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposAddTeamAccessRestrictionsParamSchema,
      void,
      ReposAddTeamAccessRestrictionsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposAddTeamAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddTeamAccessRestrictions
  }
)

const reposRemoveTeamAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposRemoveTeamAccessRestrictionsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.delete(
  "reposRemoveTeamAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/teams",
  paramValidationFactory<ReposRemoveTeamAccessRestrictionsParamSchema>(
    reposRemoveTeamAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<ReposRemoveTeamAccessRestrictionsBodySchema>(
    reposRemoveTeamAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposRemoveTeamAccessRestrictionsParamSchema,
      void,
      ReposRemoveTeamAccessRestrictionsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposRemoveTeamAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveTeamAccessRestrictions
  }
)

const reposGetUsersWithAccessToProtectedBranchParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

router.get(
  "reposGetUsersWithAccessToProtectedBranch",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<ReposGetUsersWithAccessToProtectedBranchParamSchema>(
    reposGetUsersWithAccessToProtectedBranchParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposGetUsersWithAccessToProtectedBranchParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposGetUsersWithAccessToProtectedBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetUsersWithAccessToProtectedBranch
  }
)

const reposSetUserAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposSetUserAccessRestrictionsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.put(
  "reposSetUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<ReposSetUserAccessRestrictionsParamSchema>(
    reposSetUserAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<ReposSetUserAccessRestrictionsBodySchema>(
    reposSetUserAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposSetUserAccessRestrictionsParamSchema,
      void,
      ReposSetUserAccessRestrictionsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposSetUserAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposSetUserAccessRestrictions
  }
)

const reposAddUserAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposAddUserAccessRestrictionsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.post(
  "reposAddUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<ReposAddUserAccessRestrictionsParamSchema>(
    reposAddUserAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<ReposAddUserAccessRestrictionsBodySchema>(
    reposAddUserAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposAddUserAccessRestrictionsParamSchema,
      void,
      ReposAddUserAccessRestrictionsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposAddUserAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddUserAccessRestrictions
  }
)

const reposRemoveUserAccessRestrictionsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    branch: joi.string().required(),
  })
  .required()

const reposRemoveUserAccessRestrictionsBodySchema = joi
  .array()
  .items(joi.string())
  .required()

router.delete(
  "reposRemoveUserAccessRestrictions",
  "/repos/:owner/:repo/branches/:branch/protection/restrictions/users",
  paramValidationFactory<ReposRemoveUserAccessRestrictionsParamSchema>(
    reposRemoveUserAccessRestrictionsParamSchema
  ),
  bodyValidationFactory<ReposRemoveUserAccessRestrictionsBodySchema>(
    reposRemoveUserAccessRestrictionsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposRemoveUserAccessRestrictionsParamSchema,
      void,
      ReposRemoveUserAccessRestrictionsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposRemoveUserAccessRestrictions

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveUserAccessRestrictions
  }
)

const checksCreateParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const checksCreateBodySchema = joi
  .object()
  .keys({
    name: joi.string().required(),
    head_sha: joi.string().required(),
    details_url: joi.string(),
    external_id: joi.string(),
    status: joi.string(),
    started_at: joi.string(),
    conclusion: joi.string(),
    completed_at: joi.string(),
    output: joi
      .object()
      .keys({
        title: joi.string().required(),
        summary: joi.string().required(),
        text: joi.string(),
        annotations: joi
          .array()
          .items(
            joi
              .object()
              .keys({
                path: joi.string().required(),
                start_line: joi.number().required(),
                end_line: joi.number().required(),
                start_column: joi.number(),
                end_column: joi.number(),
                annotation_level: joi.string().required(),
                message: joi.string().required(),
                title: joi.string(),
                raw_details: joi.string(),
              })
          ),
        images: joi
          .array()
          .items(
            joi
              .object()
              .keys({
                alt: joi.string().required(),
                image_url: joi.string().required(),
                caption: joi.string(),
              })
          ),
      }),
    actions: joi
      .array()
      .items(
        joi
          .object()
          .keys({
            label: joi.string().required(),
            description: joi.string().required(),
            identifier: joi.string().required(),
          })
      ),
  })
  .required()

router.post(
  "checksCreate",
  "/repos/:owner/:repo/check-runs",
  paramValidationFactory<ChecksCreateParamSchema>(checksCreateParamSchema),
  bodyValidationFactory<ChecksCreateBodySchema>(checksCreateBodySchema),
  async (
    ctx: ValidatedCtx<ChecksCreateParamSchema, void, ChecksCreateBodySchema>,
    next
  ) => {
    //region safe-edit-region-checksCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksCreate
  }
)

const checksUpdateParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_run_id: joi.number().required(),
  })
  .required()

const checksUpdateBodySchema = joi
  .object()
  .keys({
    name: joi.string(),
    details_url: joi.string(),
    external_id: joi.string(),
    started_at: joi.string(),
    status: joi.string(),
    conclusion: joi.string(),
    completed_at: joi.string(),
    output: joi
      .object()
      .keys({
        title: joi.string(),
        summary: joi.string().required(),
        text: joi.string(),
        annotations: joi
          .array()
          .items(
            joi
              .object()
              .keys({
                path: joi.string().required(),
                start_line: joi.number().required(),
                end_line: joi.number().required(),
                start_column: joi.number(),
                end_column: joi.number(),
                annotation_level: joi.string().required(),
                message: joi.string().required(),
                title: joi.string(),
                raw_details: joi.string(),
              })
          ),
        images: joi
          .array()
          .items(
            joi
              .object()
              .keys({
                alt: joi.string().required(),
                image_url: joi.string().required(),
                caption: joi.string(),
              })
          ),
      }),
    actions: joi
      .array()
      .items(
        joi
          .object()
          .keys({
            label: joi.string().required(),
            description: joi.string().required(),
            identifier: joi.string().required(),
          })
      ),
  })
  .required()

router.patch(
  "checksUpdate",
  "/repos/:owner/:repo/check-runs/:checkRunId",
  paramValidationFactory<ChecksUpdateParamSchema>(checksUpdateParamSchema),
  bodyValidationFactory<ChecksUpdateBodySchema>(checksUpdateBodySchema),
  async (
    ctx: ValidatedCtx<ChecksUpdateParamSchema, void, ChecksUpdateBodySchema>,
    next
  ) => {
    //region safe-edit-region-checksUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksUpdate
  }
)

const checksGetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_run_id: joi.number().required(),
  })
  .required()

router.get(
  "checksGet",
  "/repos/:owner/:repo/check-runs/:checkRunId",
  paramValidationFactory<ChecksGetParamSchema>(checksGetParamSchema),
  async (ctx: ValidatedCtx<ChecksGetParamSchema, void, void>, next) => {
    //region safe-edit-region-checksGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksGet
  }
)

const checksListAnnotationsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_run_id: joi.number().required(),
  })
  .required()

const checksListAnnotationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "checksListAnnotations",
  "/repos/:owner/:repo/check-runs/:checkRunId/annotations",
  paramValidationFactory<ChecksListAnnotationsParamSchema>(
    checksListAnnotationsParamSchema
  ),
  queryValidationFactory<ChecksListAnnotationsQuerySchema>(
    checksListAnnotationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ChecksListAnnotationsParamSchema,
      ChecksListAnnotationsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-checksListAnnotations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListAnnotations
  }
)

const checksCreateSuiteParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const checksCreateSuiteBodySchema = joi
  .object()
  .keys({ head_sha: joi.string().required() })
  .required()

router.post(
  "checksCreateSuite",
  "/repos/:owner/:repo/check-suites",
  paramValidationFactory<ChecksCreateSuiteParamSchema>(
    checksCreateSuiteParamSchema
  ),
  bodyValidationFactory<ChecksCreateSuiteBodySchema>(
    checksCreateSuiteBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ChecksCreateSuiteParamSchema,
      void,
      ChecksCreateSuiteBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-checksCreateSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksCreateSuite
  }
)

const checksSetSuitesPreferencesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const checksSetSuitesPreferencesBodySchema = joi
  .object()
  .keys({
    auto_trigger_checks: joi
      .array()
      .items(
        joi
          .object()
          .keys({
            app_id: joi.number().required(),
            setting: joi.boolean().required(),
          })
      ),
  })
  .required()

router.patch(
  "checksSetSuitesPreferences",
  "/repos/:owner/:repo/check-suites/preferences",
  paramValidationFactory<ChecksSetSuitesPreferencesParamSchema>(
    checksSetSuitesPreferencesParamSchema
  ),
  bodyValidationFactory<ChecksSetSuitesPreferencesBodySchema>(
    checksSetSuitesPreferencesBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ChecksSetSuitesPreferencesParamSchema,
      void,
      ChecksSetSuitesPreferencesBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-checksSetSuitesPreferences

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksSetSuitesPreferences
  }
)

const checksGetSuiteParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_suite_id: joi.number().required(),
  })
  .required()

router.get(
  "checksGetSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId",
  paramValidationFactory<ChecksGetSuiteParamSchema>(checksGetSuiteParamSchema),
  async (ctx: ValidatedCtx<ChecksGetSuiteParamSchema, void, void>, next) => {
    //region safe-edit-region-checksGetSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksGetSuite
  }
)

const checksListForSuiteParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_suite_id: joi.number().required(),
  })
  .required()

const checksListForSuiteQuerySchema = joi
  .object()
  .keys({
    check_name: joi.string(),
    status: joi.string(),
    filter: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "checksListForSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId/check-runs",
  paramValidationFactory<ChecksListForSuiteParamSchema>(
    checksListForSuiteParamSchema
  ),
  queryValidationFactory<ChecksListForSuiteQuerySchema>(
    checksListForSuiteQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ChecksListForSuiteParamSchema,
      ChecksListForSuiteQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-checksListForSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListForSuite
  }
)

const checksRerequestSuiteParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    check_suite_id: joi.number().required(),
  })
  .required()

router.post(
  "checksRerequestSuite",
  "/repos/:owner/:repo/check-suites/:checkSuiteId/rerequest",
  paramValidationFactory<ChecksRerequestSuiteParamSchema>(
    checksRerequestSuiteParamSchema
  ),
  async (
    ctx: ValidatedCtx<ChecksRerequestSuiteParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-checksRerequestSuite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksRerequestSuite
  }
)

const codeScanningListAlertsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const codeScanningListAlertsForRepoQuerySchema = joi
  .object()
  .keys({ state: joi.string(), ref: joi.string() })
  .required()

router.get(
  "codeScanningListAlertsForRepo",
  "/repos/:owner/:repo/code-scanning/alerts",
  paramValidationFactory<CodeScanningListAlertsForRepoParamSchema>(
    codeScanningListAlertsForRepoParamSchema
  ),
  queryValidationFactory<CodeScanningListAlertsForRepoQuerySchema>(
    codeScanningListAlertsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      CodeScanningListAlertsForRepoParamSchema,
      CodeScanningListAlertsForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-codeScanningListAlertsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningListAlertsForRepo
  }
)

const codeScanningGetAlertParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    alert_id: joi.number().required(),
  })
  .required()

router.get(
  "codeScanningGetAlert",
  "/repos/:owner/:repo/code-scanning/alerts/:alertId",
  paramValidationFactory<CodeScanningGetAlertParamSchema>(
    codeScanningGetAlertParamSchema
  ),
  async (
    ctx: ValidatedCtx<CodeScanningGetAlertParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-codeScanningGetAlert

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codeScanningGetAlert
  }
)

const reposListCollaboratorsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListCollaboratorsQuerySchema = joi
  .object()
  .keys({
    affiliation: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "reposListCollaborators",
  "/repos/:owner/:repo/collaborators",
  paramValidationFactory<ReposListCollaboratorsParamSchema>(
    reposListCollaboratorsParamSchema
  ),
  queryValidationFactory<ReposListCollaboratorsQuerySchema>(
    reposListCollaboratorsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListCollaboratorsParamSchema,
      ReposListCollaboratorsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListCollaborators

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCollaborators
  }
)

const reposCheckCollaboratorParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    username: joi.string().required(),
  })
  .required()

router.get(
  "reposCheckCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  paramValidationFactory<ReposCheckCollaboratorParamSchema>(
    reposCheckCollaboratorParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposCheckCollaboratorParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposCheckCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCheckCollaborator
  }
)

const reposAddCollaboratorParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    username: joi.string().required(),
  })
  .required()

const reposAddCollaboratorBodySchema = joi
  .object()
  .keys({ permission: joi.string() })
  .required()

router.put(
  "reposAddCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  paramValidationFactory<ReposAddCollaboratorParamSchema>(
    reposAddCollaboratorParamSchema
  ),
  bodyValidationFactory<ReposAddCollaboratorBodySchema>(
    reposAddCollaboratorBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposAddCollaboratorParamSchema,
      void,
      ReposAddCollaboratorBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposAddCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAddCollaborator
  }
)

const reposRemoveCollaboratorParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    username: joi.string().required(),
  })
  .required()

router.delete(
  "reposRemoveCollaborator",
  "/repos/:owner/:repo/collaborators/:username",
  paramValidationFactory<ReposRemoveCollaboratorParamSchema>(
    reposRemoveCollaboratorParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposRemoveCollaboratorParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposRemoveCollaborator

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRemoveCollaborator
  }
)

const reposGetCollaboratorPermissionLevelParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    username: joi.string().required(),
  })
  .required()

router.get(
  "reposGetCollaboratorPermissionLevel",
  "/repos/:owner/:repo/collaborators/:username/permission",
  paramValidationFactory<ReposGetCollaboratorPermissionLevelParamSchema>(
    reposGetCollaboratorPermissionLevelParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposGetCollaboratorPermissionLevelParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposGetCollaboratorPermissionLevel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCollaboratorPermissionLevel
  }
)

const reposListCommitCommentsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListCommitCommentsForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListCommitCommentsForRepo",
  "/repos/:owner/:repo/comments",
  paramValidationFactory<ReposListCommitCommentsForRepoParamSchema>(
    reposListCommitCommentsForRepoParamSchema
  ),
  queryValidationFactory<ReposListCommitCommentsForRepoQuerySchema>(
    reposListCommitCommentsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListCommitCommentsForRepoParamSchema,
      ReposListCommitCommentsForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListCommitCommentsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommitCommentsForRepo
  }
)

const reposGetCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

router.get(
  "reposGetCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  paramValidationFactory<ReposGetCommitCommentParamSchema>(
    reposGetCommitCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetCommitCommentParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommitComment
  }
)

const reposUpdateCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

const reposUpdateCommitCommentBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.patch(
  "reposUpdateCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  paramValidationFactory<ReposUpdateCommitCommentParamSchema>(
    reposUpdateCommitCommentParamSchema
  ),
  bodyValidationFactory<ReposUpdateCommitCommentBodySchema>(
    reposUpdateCommitCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposUpdateCommitCommentParamSchema,
      void,
      ReposUpdateCommitCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposUpdateCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateCommitComment
  }
)

const reposDeleteCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

router.delete(
  "reposDeleteCommitComment",
  "/repos/:owner/:repo/comments/:commentId",
  paramValidationFactory<ReposDeleteCommitCommentParamSchema>(
    reposDeleteCommitCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeleteCommitCommentParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeleteCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteCommitComment
  }
)

const reactionsListForCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

const reactionsListForCommitCommentQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reactionsListForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions",
  paramValidationFactory<ReactionsListForCommitCommentParamSchema>(
    reactionsListForCommitCommentParamSchema
  ),
  queryValidationFactory<ReactionsListForCommitCommentQuerySchema>(
    reactionsListForCommitCommentQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsListForCommitCommentParamSchema,
      ReactionsListForCommitCommentQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reactionsListForCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForCommitComment
  }
)

const reactionsCreateForCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

const reactionsCreateForCommitCommentBodySchema = joi
  .object()
  .keys({ content: joi.string().required() })
  .required()

router.post(
  "reactionsCreateForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions",
  paramValidationFactory<ReactionsCreateForCommitCommentParamSchema>(
    reactionsCreateForCommitCommentParamSchema
  ),
  bodyValidationFactory<ReactionsCreateForCommitCommentBodySchema>(
    reactionsCreateForCommitCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsCreateForCommitCommentParamSchema,
      void,
      ReactionsCreateForCommitCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reactionsCreateForCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForCommitComment
  }
)

const reactionsDeleteForCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
    reaction_id: joi.number().required(),
  })
  .required()

router.delete(
  "reactionsDeleteForCommitComment",
  "/repos/:owner/:repo/comments/:commentId/reactions/:reactionId",
  paramValidationFactory<ReactionsDeleteForCommitCommentParamSchema>(
    reactionsDeleteForCommitCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReactionsDeleteForCommitCommentParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reactionsDeleteForCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForCommitComment
  }
)

const reposListCommitsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListCommitsQuerySchema = joi
  .object()
  .keys({
    sha: joi.string(),
    path: joi.string(),
    author: joi.string(),
    since: joi.string(),
    until: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "reposListCommits",
  "/repos/:owner/:repo/commits",
  paramValidationFactory<ReposListCommitsParamSchema>(
    reposListCommitsParamSchema
  ),
  queryValidationFactory<ReposListCommitsQuerySchema>(
    reposListCommitsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListCommitsParamSchema,
      ReposListCommitsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommits
  }
)

const reposListBranchesForHeadCommitParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    commit_sha: joi.string().required(),
  })
  .required()

router.get(
  "reposListBranchesForHeadCommit",
  "/repos/:owner/:repo/commits/:commitSha/branches-where-head",
  paramValidationFactory<ReposListBranchesForHeadCommitParamSchema>(
    reposListBranchesForHeadCommitParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposListBranchesForHeadCommitParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposListBranchesForHeadCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListBranchesForHeadCommit
  }
)

const reposListCommentsForCommitParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    commit_sha: joi.string().required(),
  })
  .required()

const reposListCommentsForCommitQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListCommentsForCommit",
  "/repos/:owner/:repo/commits/:commitSha/comments",
  paramValidationFactory<ReposListCommentsForCommitParamSchema>(
    reposListCommentsForCommitParamSchema
  ),
  queryValidationFactory<ReposListCommentsForCommitQuerySchema>(
    reposListCommentsForCommitQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListCommentsForCommitParamSchema,
      ReposListCommentsForCommitQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListCommentsForCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommentsForCommit
  }
)

const reposCreateCommitCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    commit_sha: joi.string().required(),
  })
  .required()

const reposCreateCommitCommentBodySchema = joi
  .object()
  .keys({
    body: joi.string().required(),
    path: joi.string(),
    position: joi.number(),
    line: joi.number(),
  })
  .required()

router.post(
  "reposCreateCommitComment",
  "/repos/:owner/:repo/commits/:commitSha/comments",
  paramValidationFactory<ReposCreateCommitCommentParamSchema>(
    reposCreateCommitCommentParamSchema
  ),
  bodyValidationFactory<ReposCreateCommitCommentBodySchema>(
    reposCreateCommitCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreateCommitCommentParamSchema,
      void,
      ReposCreateCommitCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateCommitComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateCommitComment
  }
)

const reposListPullRequestsAssociatedWithCommitParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    commit_sha: joi.string().required(),
  })
  .required()

const reposListPullRequestsAssociatedWithCommitQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListPullRequestsAssociatedWithCommit",
  "/repos/:owner/:repo/commits/:commitSha/pulls",
  paramValidationFactory<ReposListPullRequestsAssociatedWithCommitParamSchema>(
    reposListPullRequestsAssociatedWithCommitParamSchema
  ),
  queryValidationFactory<ReposListPullRequestsAssociatedWithCommitQuerySchema>(
    reposListPullRequestsAssociatedWithCommitQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListPullRequestsAssociatedWithCommitParamSchema,
      ReposListPullRequestsAssociatedWithCommitQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListPullRequestsAssociatedWithCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListPullRequestsAssociatedWithCommit
  }
)

const reposGetCommitParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })
  .required()

router.get(
  "reposGetCommit",
  "/repos/:owner/:repo/commits/:ref",
  paramValidationFactory<ReposGetCommitParamSchema>(reposGetCommitParamSchema),
  async (ctx: ValidatedCtx<ReposGetCommitParamSchema, void, void>, next) => {
    //region safe-edit-region-reposGetCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommit
  }
)

const checksListForRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })
  .required()

const checksListForRefQuerySchema = joi
  .object()
  .keys({
    check_name: joi.string(),
    status: joi.string(),
    filter: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "checksListForRef",
  "/repos/:owner/:repo/commits/:ref/check-runs",
  paramValidationFactory<ChecksListForRefParamSchema>(
    checksListForRefParamSchema
  ),
  queryValidationFactory<ChecksListForRefQuerySchema>(
    checksListForRefQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ChecksListForRefParamSchema,
      ChecksListForRefQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-checksListForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListForRef
  }
)

const checksListSuitesForRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })
  .required()

const checksListSuitesForRefQuerySchema = joi
  .object()
  .keys({
    app_id: joi.number(),
    check_name: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "checksListSuitesForRef",
  "/repos/:owner/:repo/commits/:ref/check-suites",
  paramValidationFactory<ChecksListSuitesForRefParamSchema>(
    checksListSuitesForRefParamSchema
  ),
  queryValidationFactory<ChecksListSuitesForRefQuerySchema>(
    checksListSuitesForRefQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ChecksListSuitesForRefParamSchema,
      ChecksListSuitesForRefQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-checksListSuitesForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-checksListSuitesForRef
  }
)

const reposGetCombinedStatusForRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })
  .required()

router.get(
  "reposGetCombinedStatusForRef",
  "/repos/:owner/:repo/commits/:ref/status",
  paramValidationFactory<ReposGetCombinedStatusForRefParamSchema>(
    reposGetCombinedStatusForRefParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetCombinedStatusForRefParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetCombinedStatusForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCombinedStatusForRef
  }
)

const reposListCommitStatusesForRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })
  .required()

const reposListCommitStatusesForRefQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListCommitStatusesForRef",
  "/repos/:owner/:repo/commits/:ref/statuses",
  paramValidationFactory<ReposListCommitStatusesForRefParamSchema>(
    reposListCommitStatusesForRefParamSchema
  ),
  queryValidationFactory<ReposListCommitStatusesForRefQuerySchema>(
    reposListCommitStatusesForRefQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListCommitStatusesForRefParamSchema,
      ReposListCommitStatusesForRefQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListCommitStatusesForRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListCommitStatusesForRef
  }
)

const codesOfConductGetForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "codesOfConductGetForRepo",
  "/repos/:owner/:repo/community/code_of_conduct",
  paramValidationFactory<CodesOfConductGetForRepoParamSchema>(
    codesOfConductGetForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<CodesOfConductGetForRepoParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-codesOfConductGetForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-codesOfConductGetForRepo
  }
)

const reposGetCommunityProfileMetricsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetCommunityProfileMetrics",
  "/repos/:owner/:repo/community/profile",
  paramValidationFactory<ReposGetCommunityProfileMetricsParamSchema>(
    reposGetCommunityProfileMetricsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetCommunityProfileMetricsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetCommunityProfileMetrics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommunityProfileMetrics
  }
)

const reposCompareCommitsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    base: joi.string().required(),
    head: joi.string().required(),
  })
  .required()

router.get(
  "reposCompareCommits",
  "/repos/:owner/:repo/compare/:base...:head",
  paramValidationFactory<ReposCompareCommitsParamSchema>(
    reposCompareCommitsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposCompareCommitsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposCompareCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCompareCommits
  }
)

const reposGetContentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    path: joi.string().required(),
  })
  .required()

const reposGetContentQuerySchema = joi
  .object()
  .keys({ ref: joi.string() })
  .required()

router.get(
  "reposGetContent",
  "/repos/:owner/:repo/contents/:path",
  paramValidationFactory<ReposGetContentParamSchema>(
    reposGetContentParamSchema
  ),
  queryValidationFactory<ReposGetContentQuerySchema>(
    reposGetContentQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposGetContentParamSchema,
      ReposGetContentQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposGetContent

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetContent
  }
)

const reposCreateOrUpdateFileContentsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    path: joi.string().required(),
  })
  .required()

const reposCreateOrUpdateFileContentsBodySchema = joi
  .object()
  .keys({
    message: joi.string().required(),
    content: joi.string().required(),
    sha: joi.string(),
    branch: joi.string(),
    committer: joi
      .object()
      .keys({ name: joi.string().required(), email: joi.string().required() }),
    author: joi
      .object()
      .keys({ name: joi.string().required(), email: joi.string().required() }),
  })
  .required()

router.put(
  "reposCreateOrUpdateFileContents",
  "/repos/:owner/:repo/contents/:path",
  paramValidationFactory<ReposCreateOrUpdateFileContentsParamSchema>(
    reposCreateOrUpdateFileContentsParamSchema
  ),
  bodyValidationFactory<ReposCreateOrUpdateFileContentsBodySchema>(
    reposCreateOrUpdateFileContentsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreateOrUpdateFileContentsParamSchema,
      void,
      ReposCreateOrUpdateFileContentsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateOrUpdateFileContents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateOrUpdateFileContents
  }
)

const reposDeleteFileParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    path: joi.string().required(),
  })
  .required()

const reposDeleteFileBodySchema = joi
  .object()
  .keys({
    message: joi.string().required(),
    sha: joi.string().required(),
    branch: joi.string(),
    committer: joi.object().keys({ name: joi.string(), email: joi.string() }),
    author: joi.object().keys({ name: joi.string(), email: joi.string() }),
  })
  .required()

router.delete(
  "reposDeleteFile",
  "/repos/:owner/:repo/contents/:path",
  paramValidationFactory<ReposDeleteFileParamSchema>(
    reposDeleteFileParamSchema
  ),
  bodyValidationFactory<ReposDeleteFileBodySchema>(reposDeleteFileBodySchema),
  async (
    ctx: ValidatedCtx<
      ReposDeleteFileParamSchema,
      void,
      ReposDeleteFileBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposDeleteFile

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteFile
  }
)

const reposListContributorsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListContributorsQuerySchema = joi
  .object()
  .keys({ anon: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListContributors",
  "/repos/:owner/:repo/contributors",
  paramValidationFactory<ReposListContributorsParamSchema>(
    reposListContributorsParamSchema
  ),
  queryValidationFactory<ReposListContributorsQuerySchema>(
    reposListContributorsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListContributorsParamSchema,
      ReposListContributorsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListContributors

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListContributors
  }
)

const reposListDeploymentsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListDeploymentsQuerySchema = joi
  .object()
  .keys({
    sha: joi.string(),
    ref: joi.string(),
    task: joi.string(),
    environment: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "reposListDeployments",
  "/repos/:owner/:repo/deployments",
  paramValidationFactory<ReposListDeploymentsParamSchema>(
    reposListDeploymentsParamSchema
  ),
  queryValidationFactory<ReposListDeploymentsQuerySchema>(
    reposListDeploymentsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListDeploymentsParamSchema,
      ReposListDeploymentsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListDeployments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListDeployments
  }
)

const reposCreateDeploymentParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposCreateDeploymentBodySchema = joi
  .object()
  .keys({
    ref: joi.string().required(),
    task: joi.string(),
    auto_merge: joi.boolean(),
    required_contexts: joi.array().items(joi.string()),
    payload: joi.string(),
    environment: joi.string(),
    description: joi.string(),
    transient_environment: joi.boolean(),
    production_environment: joi.boolean(),
  })
  .required()

router.post(
  "reposCreateDeployment",
  "/repos/:owner/:repo/deployments",
  paramValidationFactory<ReposCreateDeploymentParamSchema>(
    reposCreateDeploymentParamSchema
  ),
  bodyValidationFactory<ReposCreateDeploymentBodySchema>(
    reposCreateDeploymentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreateDeploymentParamSchema,
      void,
      ReposCreateDeploymentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateDeployment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDeployment
  }
)

const reposGetDeploymentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    deployment_id: joi.number().required(),
  })
  .required()

router.get(
  "reposGetDeployment",
  "/repos/:owner/:repo/deployments/:deploymentId",
  paramValidationFactory<ReposGetDeploymentParamSchema>(
    reposGetDeploymentParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetDeploymentParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetDeployment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetDeployment
  }
)

const reposDeleteDeploymentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    deployment_id: joi.number().required(),
  })
  .required()

router.delete(
  "reposDeleteDeployment",
  "/repos/:owner/:repo/deployments/:deploymentId",
  paramValidationFactory<ReposDeleteDeploymentParamSchema>(
    reposDeleteDeploymentParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeleteDeploymentParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeleteDeployment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteDeployment
  }
)

const reposListDeploymentStatusesParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    deployment_id: joi.number().required(),
  })
  .required()

const reposListDeploymentStatusesQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListDeploymentStatuses",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses",
  paramValidationFactory<ReposListDeploymentStatusesParamSchema>(
    reposListDeploymentStatusesParamSchema
  ),
  queryValidationFactory<ReposListDeploymentStatusesQuerySchema>(
    reposListDeploymentStatusesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListDeploymentStatusesParamSchema,
      ReposListDeploymentStatusesQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListDeploymentStatuses

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListDeploymentStatuses
  }
)

const reposCreateDeploymentStatusParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    deployment_id: joi.number().required(),
  })
  .required()

const reposCreateDeploymentStatusBodySchema = joi
  .object()
  .keys({
    state: joi.string().required(),
    target_url: joi.string(),
    log_url: joi.string(),
    description: joi.string(),
    environment: joi.string(),
    environment_url: joi.string(),
    auto_inactive: joi.boolean(),
  })
  .required()

router.post(
  "reposCreateDeploymentStatus",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses",
  paramValidationFactory<ReposCreateDeploymentStatusParamSchema>(
    reposCreateDeploymentStatusParamSchema
  ),
  bodyValidationFactory<ReposCreateDeploymentStatusBodySchema>(
    reposCreateDeploymentStatusBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreateDeploymentStatusParamSchema,
      void,
      ReposCreateDeploymentStatusBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateDeploymentStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDeploymentStatus
  }
)

const reposGetDeploymentStatusParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    deployment_id: joi.number().required(),
    status_id: joi.number().required(),
  })
  .required()

router.get(
  "reposGetDeploymentStatus",
  "/repos/:owner/:repo/deployments/:deploymentId/statuses/:statusId",
  paramValidationFactory<ReposGetDeploymentStatusParamSchema>(
    reposGetDeploymentStatusParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetDeploymentStatusParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetDeploymentStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetDeploymentStatus
  }
)

const reposCreateDispatchEventParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposCreateDispatchEventBodySchema = joi
  .object()
  .keys({ event_type: joi.string(), client_payload: joi.object().keys({}) })
  .required()

router.post(
  "reposCreateDispatchEvent",
  "/repos/:owner/:repo/dispatches",
  paramValidationFactory<ReposCreateDispatchEventParamSchema>(
    reposCreateDispatchEventParamSchema
  ),
  bodyValidationFactory<ReposCreateDispatchEventBodySchema>(
    reposCreateDispatchEventBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreateDispatchEventParamSchema,
      void,
      ReposCreateDispatchEventBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateDispatchEvent

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDispatchEvent
  }
)

const activityListRepoEventsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const activityListRepoEventsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListRepoEvents",
  "/repos/:owner/:repo/events",
  paramValidationFactory<ActivityListRepoEventsParamSchema>(
    activityListRepoEventsParamSchema
  ),
  queryValidationFactory<ActivityListRepoEventsQuerySchema>(
    activityListRepoEventsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListRepoEventsParamSchema,
      ActivityListRepoEventsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListRepoEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListRepoEvents
  }
)

const reposListForksParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListForksQuerySchema = joi
  .object()
  .keys({ sort: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListForks",
  "/repos/:owner/:repo/forks",
  paramValidationFactory<ReposListForksParamSchema>(reposListForksParamSchema),
  queryValidationFactory<ReposListForksQuerySchema>(reposListForksQuerySchema),
  async (
    ctx: ValidatedCtx<
      ReposListForksParamSchema,
      ReposListForksQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListForks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForks
  }
)

const reposCreateForkParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposCreateForkBodySchema = joi
  .object()
  .keys({ organization: joi.string() })
  .required()

router.post(
  "reposCreateFork",
  "/repos/:owner/:repo/forks",
  paramValidationFactory<ReposCreateForkParamSchema>(
    reposCreateForkParamSchema
  ),
  bodyValidationFactory<ReposCreateForkBodySchema>(reposCreateForkBodySchema),
  async (
    ctx: ValidatedCtx<
      ReposCreateForkParamSchema,
      void,
      ReposCreateForkBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateFork

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateFork
  }
)

const gitCreateBlobParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const gitCreateBlobBodySchema = joi
  .object()
  .keys({ content: joi.string().required(), encoding: joi.string() })
  .required()

router.post(
  "gitCreateBlob",
  "/repos/:owner/:repo/git/blobs",
  paramValidationFactory<GitCreateBlobParamSchema>(gitCreateBlobParamSchema),
  bodyValidationFactory<GitCreateBlobBodySchema>(gitCreateBlobBodySchema),
  async (
    ctx: ValidatedCtx<GitCreateBlobParamSchema, void, GitCreateBlobBodySchema>,
    next
  ) => {
    //region safe-edit-region-gitCreateBlob

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateBlob
  }
)

const gitGetBlobParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    file_sha: joi.string().required(),
  })
  .required()

router.get(
  "gitGetBlob",
  "/repos/:owner/:repo/git/blobs/:fileSha",
  paramValidationFactory<GitGetBlobParamSchema>(gitGetBlobParamSchema),
  async (ctx: ValidatedCtx<GitGetBlobParamSchema, void, void>, next) => {
    //region safe-edit-region-gitGetBlob

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetBlob
  }
)

const gitCreateCommitParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const gitCreateCommitBodySchema = joi
  .object()
  .keys({
    message: joi.string().required(),
    tree: joi.string().required(),
    parents: joi.array().items(joi.string()).required(),
    author: joi
      .object()
      .keys({ name: joi.string(), email: joi.string(), date: joi.string() }),
    committer: joi
      .object()
      .keys({ name: joi.string(), email: joi.string(), date: joi.string() }),
    signature: joi.string(),
  })
  .required()

router.post(
  "gitCreateCommit",
  "/repos/:owner/:repo/git/commits",
  paramValidationFactory<GitCreateCommitParamSchema>(
    gitCreateCommitParamSchema
  ),
  bodyValidationFactory<GitCreateCommitBodySchema>(gitCreateCommitBodySchema),
  async (
    ctx: ValidatedCtx<
      GitCreateCommitParamSchema,
      void,
      GitCreateCommitBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-gitCreateCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateCommit
  }
)

const gitGetCommitParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    commit_sha: joi.string().required(),
  })
  .required()

router.get(
  "gitGetCommit",
  "/repos/:owner/:repo/git/commits/:commitSha",
  paramValidationFactory<GitGetCommitParamSchema>(gitGetCommitParamSchema),
  async (ctx: ValidatedCtx<GitGetCommitParamSchema, void, void>, next) => {
    //region safe-edit-region-gitGetCommit

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetCommit
  }
)

const gitListMatchingRefsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })
  .required()

const gitListMatchingRefsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "gitListMatchingRefs",
  "/repos/:owner/:repo/git/matching-refs/:ref",
  paramValidationFactory<GitListMatchingRefsParamSchema>(
    gitListMatchingRefsParamSchema
  ),
  queryValidationFactory<GitListMatchingRefsQuerySchema>(
    gitListMatchingRefsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      GitListMatchingRefsParamSchema,
      GitListMatchingRefsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-gitListMatchingRefs

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitListMatchingRefs
  }
)

const gitGetRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })
  .required()

router.get(
  "gitGetRef",
  "/repos/:owner/:repo/git/ref/:ref",
  paramValidationFactory<GitGetRefParamSchema>(gitGetRefParamSchema),
  async (ctx: ValidatedCtx<GitGetRefParamSchema, void, void>, next) => {
    //region safe-edit-region-gitGetRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetRef
  }
)

const gitCreateRefParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const gitCreateRefBodySchema = joi
  .object()
  .keys({ ref: joi.string().required(), sha: joi.string().required() })
  .required()

router.post(
  "gitCreateRef",
  "/repos/:owner/:repo/git/refs",
  paramValidationFactory<GitCreateRefParamSchema>(gitCreateRefParamSchema),
  bodyValidationFactory<GitCreateRefBodySchema>(gitCreateRefBodySchema),
  async (
    ctx: ValidatedCtx<GitCreateRefParamSchema, void, GitCreateRefBodySchema>,
    next
  ) => {
    //region safe-edit-region-gitCreateRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateRef
  }
)

const gitUpdateRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })
  .required()

const gitUpdateRefBodySchema = joi
  .object()
  .keys({ sha: joi.string().required(), force: joi.boolean() })
  .required()

router.patch(
  "gitUpdateRef",
  "/repos/:owner/:repo/git/refs/:ref",
  paramValidationFactory<GitUpdateRefParamSchema>(gitUpdateRefParamSchema),
  bodyValidationFactory<GitUpdateRefBodySchema>(gitUpdateRefBodySchema),
  async (
    ctx: ValidatedCtx<GitUpdateRefParamSchema, void, GitUpdateRefBodySchema>,
    next
  ) => {
    //region safe-edit-region-gitUpdateRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitUpdateRef
  }
)

const gitDeleteRefParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    ref: joi.string().required(),
  })
  .required()

router.delete(
  "gitDeleteRef",
  "/repos/:owner/:repo/git/refs/:ref",
  paramValidationFactory<GitDeleteRefParamSchema>(gitDeleteRefParamSchema),
  async (ctx: ValidatedCtx<GitDeleteRefParamSchema, void, void>, next) => {
    //region safe-edit-region-gitDeleteRef

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitDeleteRef
  }
)

const gitCreateTagParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const gitCreateTagBodySchema = joi
  .object()
  .keys({
    tag: joi.string().required(),
    message: joi.string().required(),
    object: joi.string().required(),
    type: joi.string().required(),
    tagger: joi
      .object()
      .keys({ name: joi.string(), email: joi.string(), date: joi.string() }),
  })
  .required()

router.post(
  "gitCreateTag",
  "/repos/:owner/:repo/git/tags",
  paramValidationFactory<GitCreateTagParamSchema>(gitCreateTagParamSchema),
  bodyValidationFactory<GitCreateTagBodySchema>(gitCreateTagBodySchema),
  async (
    ctx: ValidatedCtx<GitCreateTagParamSchema, void, GitCreateTagBodySchema>,
    next
  ) => {
    //region safe-edit-region-gitCreateTag

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateTag
  }
)

const gitGetTagParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    tag_sha: joi.string().required(),
  })
  .required()

router.get(
  "gitGetTag",
  "/repos/:owner/:repo/git/tags/:tagSha",
  paramValidationFactory<GitGetTagParamSchema>(gitGetTagParamSchema),
  async (ctx: ValidatedCtx<GitGetTagParamSchema, void, void>, next) => {
    //region safe-edit-region-gitGetTag

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetTag
  }
)

const gitCreateTreeParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const gitCreateTreeBodySchema = joi
  .object()
  .keys({
    tree: joi
      .array()
      .items(
        joi
          .object()
          .keys({
            path: joi.string(),
            mode: joi.string(),
            type: joi.string(),
            sha: joi.string(),
            content: joi.string(),
          })
      )
      .required(),
    base_tree: joi.string(),
  })
  .required()

router.post(
  "gitCreateTree",
  "/repos/:owner/:repo/git/trees",
  paramValidationFactory<GitCreateTreeParamSchema>(gitCreateTreeParamSchema),
  bodyValidationFactory<GitCreateTreeBodySchema>(gitCreateTreeBodySchema),
  async (
    ctx: ValidatedCtx<GitCreateTreeParamSchema, void, GitCreateTreeBodySchema>,
    next
  ) => {
    //region safe-edit-region-gitCreateTree

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitCreateTree
  }
)

const gitGetTreeParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    tree_sha: joi.string().required(),
  })
  .required()

const gitGetTreeQuerySchema = joi
  .object()
  .keys({ recursive: joi.string() })
  .required()

router.get(
  "gitGetTree",
  "/repos/:owner/:repo/git/trees/:treeSha",
  paramValidationFactory<GitGetTreeParamSchema>(gitGetTreeParamSchema),
  queryValidationFactory<GitGetTreeQuerySchema>(gitGetTreeQuerySchema),
  async (
    ctx: ValidatedCtx<GitGetTreeParamSchema, GitGetTreeQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-gitGetTree

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gitGetTree
  }
)

const reposListWebhooksParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListWebhooksQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListWebhooks",
  "/repos/:owner/:repo/hooks",
  paramValidationFactory<ReposListWebhooksParamSchema>(
    reposListWebhooksParamSchema
  ),
  queryValidationFactory<ReposListWebhooksQuerySchema>(
    reposListWebhooksQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListWebhooksParamSchema,
      ReposListWebhooksQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListWebhooks

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListWebhooks
  }
)

const reposCreateWebhookParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposCreateWebhookBodySchema = joi
  .object()
  .keys({
    name: joi.string(),
    config: joi
      .object()
      .keys({
        url: joi.string().required(),
        content_type: joi.string(),
        secret: joi.string(),
        insecure_ssl: joi.string(),
      })
      .required(),
    events: joi.array().items(joi.string()),
    active: joi.boolean(),
  })
  .required()

router.post(
  "reposCreateWebhook",
  "/repos/:owner/:repo/hooks",
  paramValidationFactory<ReposCreateWebhookParamSchema>(
    reposCreateWebhookParamSchema
  ),
  bodyValidationFactory<ReposCreateWebhookBodySchema>(
    reposCreateWebhookBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreateWebhookParamSchema,
      void,
      ReposCreateWebhookBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateWebhook
  }
)

const reposGetWebhookParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    hook_id: joi.number().required(),
  })
  .required()

router.get(
  "reposGetWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  paramValidationFactory<ReposGetWebhookParamSchema>(
    reposGetWebhookParamSchema
  ),
  async (ctx: ValidatedCtx<ReposGetWebhookParamSchema, void, void>, next) => {
    //region safe-edit-region-reposGetWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetWebhook
  }
)

const reposUpdateWebhookParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    hook_id: joi.number().required(),
  })
  .required()

const reposUpdateWebhookBodySchema = joi
  .object()
  .keys({
    config: joi
      .object()
      .keys({
        url: joi.string().required(),
        content_type: joi.string(),
        secret: joi.string(),
        insecure_ssl: joi.string(),
      }),
    events: joi.array().items(joi.string()),
    add_events: joi.array().items(joi.string()),
    remove_events: joi.array().items(joi.string()),
    active: joi.boolean(),
  })
  .required()

router.patch(
  "reposUpdateWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  paramValidationFactory<ReposUpdateWebhookParamSchema>(
    reposUpdateWebhookParamSchema
  ),
  bodyValidationFactory<ReposUpdateWebhookBodySchema>(
    reposUpdateWebhookBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposUpdateWebhookParamSchema,
      void,
      ReposUpdateWebhookBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposUpdateWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateWebhook
  }
)

const reposDeleteWebhookParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    hook_id: joi.number().required(),
  })
  .required()

router.delete(
  "reposDeleteWebhook",
  "/repos/:owner/:repo/hooks/:hookId",
  paramValidationFactory<ReposDeleteWebhookParamSchema>(
    reposDeleteWebhookParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeleteWebhookParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeleteWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteWebhook
  }
)

const reposPingWebhookParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    hook_id: joi.number().required(),
  })
  .required()

router.post(
  "reposPingWebhook",
  "/repos/:owner/:repo/hooks/:hookId/pings",
  paramValidationFactory<ReposPingWebhookParamSchema>(
    reposPingWebhookParamSchema
  ),
  async (ctx: ValidatedCtx<ReposPingWebhookParamSchema, void, void>, next) => {
    //region safe-edit-region-reposPingWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposPingWebhook
  }
)

const reposTestPushWebhookParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    hook_id: joi.number().required(),
  })
  .required()

router.post(
  "reposTestPushWebhook",
  "/repos/:owner/:repo/hooks/:hookId/tests",
  paramValidationFactory<ReposTestPushWebhookParamSchema>(
    reposTestPushWebhookParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposTestPushWebhookParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposTestPushWebhook

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposTestPushWebhook
  }
)

const migrationsStartImportParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const migrationsStartImportBodySchema = joi
  .object()
  .keys({
    vcs_url: joi.string().required(),
    vcs: joi.string(),
    vcs_username: joi.string(),
    vcs_password: joi.string(),
    tfvc_project: joi.string(),
  })
  .required()

router.put(
  "migrationsStartImport",
  "/repos/:owner/:repo/import",
  paramValidationFactory<MigrationsStartImportParamSchema>(
    migrationsStartImportParamSchema
  ),
  bodyValidationFactory<MigrationsStartImportBodySchema>(
    migrationsStartImportBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsStartImportParamSchema,
      void,
      MigrationsStartImportBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-migrationsStartImport

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsStartImport
  }
)

const migrationsGetImportStatusParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "migrationsGetImportStatus",
  "/repos/:owner/:repo/import",
  paramValidationFactory<MigrationsGetImportStatusParamSchema>(
    migrationsGetImportStatusParamSchema
  ),
  async (
    ctx: ValidatedCtx<MigrationsGetImportStatusParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-migrationsGetImportStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetImportStatus
  }
)

const migrationsUpdateImportParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const migrationsUpdateImportBodySchema = joi
  .object()
  .keys({ vcs_username: joi.string(), vcs_password: joi.string() })
  .required()

router.patch(
  "migrationsUpdateImport",
  "/repos/:owner/:repo/import",
  paramValidationFactory<MigrationsUpdateImportParamSchema>(
    migrationsUpdateImportParamSchema
  ),
  bodyValidationFactory<MigrationsUpdateImportBodySchema>(
    migrationsUpdateImportBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsUpdateImportParamSchema,
      void,
      MigrationsUpdateImportBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-migrationsUpdateImport

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsUpdateImport
  }
)

const migrationsCancelImportParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.delete(
  "migrationsCancelImport",
  "/repos/:owner/:repo/import",
  paramValidationFactory<MigrationsCancelImportParamSchema>(
    migrationsCancelImportParamSchema
  ),
  async (
    ctx: ValidatedCtx<MigrationsCancelImportParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-migrationsCancelImport

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsCancelImport
  }
)

const migrationsGetCommitAuthorsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const migrationsGetCommitAuthorsQuerySchema = joi
  .object()
  .keys({ since: joi.string() })
  .required()

router.get(
  "migrationsGetCommitAuthors",
  "/repos/:owner/:repo/import/authors",
  paramValidationFactory<MigrationsGetCommitAuthorsParamSchema>(
    migrationsGetCommitAuthorsParamSchema
  ),
  queryValidationFactory<MigrationsGetCommitAuthorsQuerySchema>(
    migrationsGetCommitAuthorsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsGetCommitAuthorsParamSchema,
      MigrationsGetCommitAuthorsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-migrationsGetCommitAuthors

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetCommitAuthors
  }
)

const migrationsMapCommitAuthorParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    author_id: joi.number().required(),
  })
  .required()

const migrationsMapCommitAuthorBodySchema = joi
  .object()
  .keys({ email: joi.string(), name: joi.string() })
  .required()

router.patch(
  "migrationsMapCommitAuthor",
  "/repos/:owner/:repo/import/authors/:authorId",
  paramValidationFactory<MigrationsMapCommitAuthorParamSchema>(
    migrationsMapCommitAuthorParamSchema
  ),
  bodyValidationFactory<MigrationsMapCommitAuthorBodySchema>(
    migrationsMapCommitAuthorBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsMapCommitAuthorParamSchema,
      void,
      MigrationsMapCommitAuthorBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-migrationsMapCommitAuthor

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsMapCommitAuthor
  }
)

const migrationsGetLargeFilesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "migrationsGetLargeFiles",
  "/repos/:owner/:repo/import/large_files",
  paramValidationFactory<MigrationsGetLargeFilesParamSchema>(
    migrationsGetLargeFilesParamSchema
  ),
  async (
    ctx: ValidatedCtx<MigrationsGetLargeFilesParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-migrationsGetLargeFiles

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetLargeFiles
  }
)

const migrationsSetLfsPreferenceParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const migrationsSetLfsPreferenceBodySchema = joi
  .object()
  .keys({ use_lfs: joi.string().required() })
  .required()

router.patch(
  "migrationsSetLfsPreference",
  "/repos/:owner/:repo/import/lfs",
  paramValidationFactory<MigrationsSetLfsPreferenceParamSchema>(
    migrationsSetLfsPreferenceParamSchema
  ),
  bodyValidationFactory<MigrationsSetLfsPreferenceBodySchema>(
    migrationsSetLfsPreferenceBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsSetLfsPreferenceParamSchema,
      void,
      MigrationsSetLfsPreferenceBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-migrationsSetLfsPreference

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsSetLfsPreference
  }
)

const appsGetRepoInstallationParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "appsGetRepoInstallation",
  "/repos/:owner/:repo/installation",
  paramValidationFactory<AppsGetRepoInstallationParamSchema>(
    appsGetRepoInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsGetRepoInstallationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsGetRepoInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetRepoInstallation
  }
)

const interactionsGetRestrictionsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "interactionsGetRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  paramValidationFactory<InteractionsGetRestrictionsForRepoParamSchema>(
    interactionsGetRestrictionsForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      InteractionsGetRestrictionsForRepoParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-interactionsGetRestrictionsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsGetRestrictionsForRepo
  }
)

const interactionsSetRestrictionsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const interactionsSetRestrictionsForRepoBodySchema = joi
  .object()
  .keys({ limit: joi.string().required() })
  .required()

router.put(
  "interactionsSetRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  paramValidationFactory<InteractionsSetRestrictionsForRepoParamSchema>(
    interactionsSetRestrictionsForRepoParamSchema
  ),
  bodyValidationFactory<InteractionsSetRestrictionsForRepoBodySchema>(
    interactionsSetRestrictionsForRepoBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      InteractionsSetRestrictionsForRepoParamSchema,
      void,
      InteractionsSetRestrictionsForRepoBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-interactionsSetRestrictionsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsSetRestrictionsForRepo
  }
)

const interactionsRemoveRestrictionsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.delete(
  "interactionsRemoveRestrictionsForRepo",
  "/repos/:owner/:repo/interaction-limits",
  paramValidationFactory<InteractionsRemoveRestrictionsForRepoParamSchema>(
    interactionsRemoveRestrictionsForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      InteractionsRemoveRestrictionsForRepoParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-interactionsRemoveRestrictionsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-interactionsRemoveRestrictionsForRepo
  }
)

const reposListInvitationsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListInvitationsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListInvitations",
  "/repos/:owner/:repo/invitations",
  paramValidationFactory<ReposListInvitationsParamSchema>(
    reposListInvitationsParamSchema
  ),
  queryValidationFactory<ReposListInvitationsQuerySchema>(
    reposListInvitationsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListInvitationsParamSchema,
      ReposListInvitationsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListInvitations

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListInvitations
  }
)

const reposDeleteInvitationParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    invitation_id: joi.number().required(),
  })
  .required()

router.delete(
  "reposDeleteInvitation",
  "/repos/:owner/:repo/invitations/:invitationId",
  paramValidationFactory<ReposDeleteInvitationParamSchema>(
    reposDeleteInvitationParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeleteInvitationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeleteInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteInvitation
  }
)

const reposUpdateInvitationParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    invitation_id: joi.number().required(),
  })
  .required()

const reposUpdateInvitationBodySchema = joi
  .object()
  .keys({ permissions: joi.string() })
  .required()

router.patch(
  "reposUpdateInvitation",
  "/repos/:owner/:repo/invitations/:invitationId",
  paramValidationFactory<ReposUpdateInvitationParamSchema>(
    reposUpdateInvitationParamSchema
  ),
  bodyValidationFactory<ReposUpdateInvitationBodySchema>(
    reposUpdateInvitationBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposUpdateInvitationParamSchema,
      void,
      ReposUpdateInvitationBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposUpdateInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateInvitation
  }
)

const issuesListForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const issuesListForRepoQuerySchema = joi
  .object()
  .keys({
    milestone: joi.string(),
    state: joi.string(),
    assignee: joi.string(),
    creator: joi.string(),
    mentioned: joi.string(),
    labels: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "issuesListForRepo",
  "/repos/:owner/:repo/issues",
  paramValidationFactory<IssuesListForRepoParamSchema>(
    issuesListForRepoParamSchema
  ),
  queryValidationFactory<IssuesListForRepoQuerySchema>(
    issuesListForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListForRepoParamSchema,
      IssuesListForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListForRepo
  }
)

const issuesCreateParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const issuesCreateBodySchema = joi
  .object()
  .keys({
    title: joi.string().required(),
    body: joi.string(),
    assignee: joi.string(),
    milestone: joi.number(),
    labels: joi.array().items(joi.string()),
    assignees: joi.array().items(joi.string()),
  })
  .required()

router.post(
  "issuesCreate",
  "/repos/:owner/:repo/issues",
  paramValidationFactory<IssuesCreateParamSchema>(issuesCreateParamSchema),
  bodyValidationFactory<IssuesCreateBodySchema>(issuesCreateBodySchema),
  async (
    ctx: ValidatedCtx<IssuesCreateParamSchema, void, IssuesCreateBodySchema>,
    next
  ) => {
    //region safe-edit-region-issuesCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreate
  }
)

const issuesListCommentsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const issuesListCommentsForRepoQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "issuesListCommentsForRepo",
  "/repos/:owner/:repo/issues/comments",
  paramValidationFactory<IssuesListCommentsForRepoParamSchema>(
    issuesListCommentsForRepoParamSchema
  ),
  queryValidationFactory<IssuesListCommentsForRepoQuerySchema>(
    issuesListCommentsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListCommentsForRepoParamSchema,
      IssuesListCommentsForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListCommentsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListCommentsForRepo
  }
)

const issuesGetCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

router.get(
  "issuesGetComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  paramValidationFactory<IssuesGetCommentParamSchema>(
    issuesGetCommentParamSchema
  ),
  async (ctx: ValidatedCtx<IssuesGetCommentParamSchema, void, void>, next) => {
    //region safe-edit-region-issuesGetComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetComment
  }
)

const issuesUpdateCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

const issuesUpdateCommentBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.patch(
  "issuesUpdateComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  paramValidationFactory<IssuesUpdateCommentParamSchema>(
    issuesUpdateCommentParamSchema
  ),
  bodyValidationFactory<IssuesUpdateCommentBodySchema>(
    issuesUpdateCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesUpdateCommentParamSchema,
      void,
      IssuesUpdateCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-issuesUpdateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdateComment
  }
)

const issuesDeleteCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

router.delete(
  "issuesDeleteComment",
  "/repos/:owner/:repo/issues/comments/:commentId",
  paramValidationFactory<IssuesDeleteCommentParamSchema>(
    issuesDeleteCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<IssuesDeleteCommentParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-issuesDeleteComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesDeleteComment
  }
)

const reactionsListForIssueCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

const reactionsListForIssueCommentQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reactionsListForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions",
  paramValidationFactory<ReactionsListForIssueCommentParamSchema>(
    reactionsListForIssueCommentParamSchema
  ),
  queryValidationFactory<ReactionsListForIssueCommentQuerySchema>(
    reactionsListForIssueCommentQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsListForIssueCommentParamSchema,
      ReactionsListForIssueCommentQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reactionsListForIssueComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForIssueComment
  }
)

const reactionsCreateForIssueCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

const reactionsCreateForIssueCommentBodySchema = joi
  .object()
  .keys({ content: joi.string().required() })
  .required()

router.post(
  "reactionsCreateForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions",
  paramValidationFactory<ReactionsCreateForIssueCommentParamSchema>(
    reactionsCreateForIssueCommentParamSchema
  ),
  bodyValidationFactory<ReactionsCreateForIssueCommentBodySchema>(
    reactionsCreateForIssueCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsCreateForIssueCommentParamSchema,
      void,
      ReactionsCreateForIssueCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reactionsCreateForIssueComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForIssueComment
  }
)

const reactionsDeleteForIssueCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
    reaction_id: joi.number().required(),
  })
  .required()

router.delete(
  "reactionsDeleteForIssueComment",
  "/repos/:owner/:repo/issues/comments/:commentId/reactions/:reactionId",
  paramValidationFactory<ReactionsDeleteForIssueCommentParamSchema>(
    reactionsDeleteForIssueCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReactionsDeleteForIssueCommentParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reactionsDeleteForIssueComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForIssueComment
  }
)

const issuesListEventsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const issuesListEventsForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "issuesListEventsForRepo",
  "/repos/:owner/:repo/issues/events",
  paramValidationFactory<IssuesListEventsForRepoParamSchema>(
    issuesListEventsForRepoParamSchema
  ),
  queryValidationFactory<IssuesListEventsForRepoQuerySchema>(
    issuesListEventsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListEventsForRepoParamSchema,
      IssuesListEventsForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListEventsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListEventsForRepo
  }
)

const issuesGetEventParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    event_id: joi.number().required(),
  })
  .required()

router.get(
  "issuesGetEvent",
  "/repos/:owner/:repo/issues/events/:eventId",
  paramValidationFactory<IssuesGetEventParamSchema>(issuesGetEventParamSchema),
  async (ctx: ValidatedCtx<IssuesGetEventParamSchema, void, void>, next) => {
    //region safe-edit-region-issuesGetEvent

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetEvent
  }
)

const issuesGetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

router.get(
  "issuesGet",
  "/repos/:owner/:repo/issues/:issueNumber",
  paramValidationFactory<IssuesGetParamSchema>(issuesGetParamSchema),
  async (ctx: ValidatedCtx<IssuesGetParamSchema, void, void>, next) => {
    //region safe-edit-region-issuesGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGet
  }
)

const issuesUpdateParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const issuesUpdateBodySchema = joi
  .object()
  .keys({
    title: joi.string(),
    body: joi.string(),
    assignee: joi.string(),
    state: joi.string(),
    milestone: joi.number(),
    labels: joi.array().items(joi.string()),
    assignees: joi.array().items(joi.string()),
  })
  .required()

router.patch(
  "issuesUpdate",
  "/repos/:owner/:repo/issues/:issueNumber",
  paramValidationFactory<IssuesUpdateParamSchema>(issuesUpdateParamSchema),
  bodyValidationFactory<IssuesUpdateBodySchema>(issuesUpdateBodySchema),
  async (
    ctx: ValidatedCtx<IssuesUpdateParamSchema, void, IssuesUpdateBodySchema>,
    next
  ) => {
    //region safe-edit-region-issuesUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdate
  }
)

const issuesAddAssigneesParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const issuesAddAssigneesBodySchema = joi
  .object()
  .keys({ assignees: joi.array().items(joi.string()) })
  .required()

router.post(
  "issuesAddAssignees",
  "/repos/:owner/:repo/issues/:issueNumber/assignees",
  paramValidationFactory<IssuesAddAssigneesParamSchema>(
    issuesAddAssigneesParamSchema
  ),
  bodyValidationFactory<IssuesAddAssigneesBodySchema>(
    issuesAddAssigneesBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesAddAssigneesParamSchema,
      void,
      IssuesAddAssigneesBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-issuesAddAssignees

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesAddAssignees
  }
)

const issuesRemoveAssigneesParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const issuesRemoveAssigneesBodySchema = joi
  .object()
  .keys({ assignees: joi.array().items(joi.string()) })
  .required()

router.delete(
  "issuesRemoveAssignees",
  "/repos/:owner/:repo/issues/:issueNumber/assignees",
  paramValidationFactory<IssuesRemoveAssigneesParamSchema>(
    issuesRemoveAssigneesParamSchema
  ),
  bodyValidationFactory<IssuesRemoveAssigneesBodySchema>(
    issuesRemoveAssigneesBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesRemoveAssigneesParamSchema,
      void,
      IssuesRemoveAssigneesBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-issuesRemoveAssignees

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesRemoveAssignees
  }
)

const issuesListCommentsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const issuesListCommentsQuerySchema = joi
  .object()
  .keys({ since: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "issuesListComments",
  "/repos/:owner/:repo/issues/:issueNumber/comments",
  paramValidationFactory<IssuesListCommentsParamSchema>(
    issuesListCommentsParamSchema
  ),
  queryValidationFactory<IssuesListCommentsQuerySchema>(
    issuesListCommentsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListCommentsParamSchema,
      IssuesListCommentsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListComments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListComments
  }
)

const issuesCreateCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const issuesCreateCommentBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.post(
  "issuesCreateComment",
  "/repos/:owner/:repo/issues/:issueNumber/comments",
  paramValidationFactory<IssuesCreateCommentParamSchema>(
    issuesCreateCommentParamSchema
  ),
  bodyValidationFactory<IssuesCreateCommentBodySchema>(
    issuesCreateCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesCreateCommentParamSchema,
      void,
      IssuesCreateCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-issuesCreateComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreateComment
  }
)

const issuesListEventsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const issuesListEventsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "issuesListEvents",
  "/repos/:owner/:repo/issues/:issueNumber/events",
  paramValidationFactory<IssuesListEventsParamSchema>(
    issuesListEventsParamSchema
  ),
  queryValidationFactory<IssuesListEventsQuerySchema>(
    issuesListEventsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListEventsParamSchema,
      IssuesListEventsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListEvents

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListEvents
  }
)

const issuesListLabelsOnIssueParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const issuesListLabelsOnIssueQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "issuesListLabelsOnIssue",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<IssuesListLabelsOnIssueParamSchema>(
    issuesListLabelsOnIssueParamSchema
  ),
  queryValidationFactory<IssuesListLabelsOnIssueQuerySchema>(
    issuesListLabelsOnIssueQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListLabelsOnIssueParamSchema,
      IssuesListLabelsOnIssueQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListLabelsOnIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListLabelsOnIssue
  }
)

const issuesAddLabelsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const issuesAddLabelsBodySchema = joi
  .object()
  .keys({ labels: joi.array().items(joi.string()).required() })
  .required()

router.post(
  "issuesAddLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<IssuesAddLabelsParamSchema>(
    issuesAddLabelsParamSchema
  ),
  bodyValidationFactory<IssuesAddLabelsBodySchema>(issuesAddLabelsBodySchema),
  async (
    ctx: ValidatedCtx<
      IssuesAddLabelsParamSchema,
      void,
      IssuesAddLabelsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-issuesAddLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesAddLabels
  }
)

const issuesSetLabelsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const issuesSetLabelsBodySchema = joi
  .object()
  .keys({ labels: joi.array().items(joi.string()) })
  .required()

router.put(
  "issuesSetLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<IssuesSetLabelsParamSchema>(
    issuesSetLabelsParamSchema
  ),
  bodyValidationFactory<IssuesSetLabelsBodySchema>(issuesSetLabelsBodySchema),
  async (
    ctx: ValidatedCtx<
      IssuesSetLabelsParamSchema,
      void,
      IssuesSetLabelsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-issuesSetLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesSetLabels
  }
)

const issuesRemoveAllLabelsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

router.delete(
  "issuesRemoveAllLabels",
  "/repos/:owner/:repo/issues/:issueNumber/labels",
  paramValidationFactory<IssuesRemoveAllLabelsParamSchema>(
    issuesRemoveAllLabelsParamSchema
  ),
  async (
    ctx: ValidatedCtx<IssuesRemoveAllLabelsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-issuesRemoveAllLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesRemoveAllLabels
  }
)

const issuesRemoveLabelParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
    name: joi.string().required(),
  })
  .required()

router.delete(
  "issuesRemoveLabel",
  "/repos/:owner/:repo/issues/:issueNumber/labels/:name",
  paramValidationFactory<IssuesRemoveLabelParamSchema>(
    issuesRemoveLabelParamSchema
  ),
  async (ctx: ValidatedCtx<IssuesRemoveLabelParamSchema, void, void>, next) => {
    //region safe-edit-region-issuesRemoveLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesRemoveLabel
  }
)

const issuesLockParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const issuesLockBodySchema = joi
  .object()
  .keys({ lock_reason: joi.string() })
  .required()

router.put(
  "issuesLock",
  "/repos/:owner/:repo/issues/:issueNumber/lock",
  paramValidationFactory<IssuesLockParamSchema>(issuesLockParamSchema),
  bodyValidationFactory<IssuesLockBodySchema>(issuesLockBodySchema),
  async (
    ctx: ValidatedCtx<IssuesLockParamSchema, void, IssuesLockBodySchema>,
    next
  ) => {
    //region safe-edit-region-issuesLock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesLock
  }
)

const issuesUnlockParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

router.delete(
  "issuesUnlock",
  "/repos/:owner/:repo/issues/:issueNumber/lock",
  paramValidationFactory<IssuesUnlockParamSchema>(issuesUnlockParamSchema),
  async (ctx: ValidatedCtx<IssuesUnlockParamSchema, void, void>, next) => {
    //region safe-edit-region-issuesUnlock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUnlock
  }
)

const reactionsListForIssueParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const reactionsListForIssueQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reactionsListForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions",
  paramValidationFactory<ReactionsListForIssueParamSchema>(
    reactionsListForIssueParamSchema
  ),
  queryValidationFactory<ReactionsListForIssueQuerySchema>(
    reactionsListForIssueQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsListForIssueParamSchema,
      ReactionsListForIssueQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reactionsListForIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForIssue
  }
)

const reactionsCreateForIssueParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const reactionsCreateForIssueBodySchema = joi
  .object()
  .keys({ content: joi.string().required() })
  .required()

router.post(
  "reactionsCreateForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions",
  paramValidationFactory<ReactionsCreateForIssueParamSchema>(
    reactionsCreateForIssueParamSchema
  ),
  bodyValidationFactory<ReactionsCreateForIssueBodySchema>(
    reactionsCreateForIssueBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsCreateForIssueParamSchema,
      void,
      ReactionsCreateForIssueBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reactionsCreateForIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForIssue
  }
)

const reactionsDeleteForIssueParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
    reaction_id: joi.number().required(),
  })
  .required()

router.delete(
  "reactionsDeleteForIssue",
  "/repos/:owner/:repo/issues/:issueNumber/reactions/:reactionId",
  paramValidationFactory<ReactionsDeleteForIssueParamSchema>(
    reactionsDeleteForIssueParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReactionsDeleteForIssueParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reactionsDeleteForIssue

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForIssue
  }
)

const issuesListEventsForTimelineParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    issue_number: joi.number().required(),
  })
  .required()

const issuesListEventsForTimelineQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "issuesListEventsForTimeline",
  "/repos/:owner/:repo/issues/:issueNumber/timeline",
  paramValidationFactory<IssuesListEventsForTimelineParamSchema>(
    issuesListEventsForTimelineParamSchema
  ),
  queryValidationFactory<IssuesListEventsForTimelineQuerySchema>(
    issuesListEventsForTimelineQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListEventsForTimelineParamSchema,
      IssuesListEventsForTimelineQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListEventsForTimeline

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListEventsForTimeline
  }
)

const reposListDeployKeysParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListDeployKeysQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListDeployKeys",
  "/repos/:owner/:repo/keys",
  paramValidationFactory<ReposListDeployKeysParamSchema>(
    reposListDeployKeysParamSchema
  ),
  queryValidationFactory<ReposListDeployKeysQuerySchema>(
    reposListDeployKeysQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListDeployKeysParamSchema,
      ReposListDeployKeysQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListDeployKeys

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListDeployKeys
  }
)

const reposCreateDeployKeyParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposCreateDeployKeyBodySchema = joi
  .object()
  .keys({
    title: joi.string(),
    key: joi.string().required(),
    read_only: joi.boolean(),
  })
  .required()

router.post(
  "reposCreateDeployKey",
  "/repos/:owner/:repo/keys",
  paramValidationFactory<ReposCreateDeployKeyParamSchema>(
    reposCreateDeployKeyParamSchema
  ),
  bodyValidationFactory<ReposCreateDeployKeyBodySchema>(
    reposCreateDeployKeyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreateDeployKeyParamSchema,
      void,
      ReposCreateDeployKeyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateDeployKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateDeployKey
  }
)

const reposGetDeployKeyParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    key_id: joi.number().required(),
  })
  .required()

router.get(
  "reposGetDeployKey",
  "/repos/:owner/:repo/keys/:keyId",
  paramValidationFactory<ReposGetDeployKeyParamSchema>(
    reposGetDeployKeyParamSchema
  ),
  async (ctx: ValidatedCtx<ReposGetDeployKeyParamSchema, void, void>, next) => {
    //region safe-edit-region-reposGetDeployKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetDeployKey
  }
)

const reposDeleteDeployKeyParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    key_id: joi.number().required(),
  })
  .required()

router.delete(
  "reposDeleteDeployKey",
  "/repos/:owner/:repo/keys/:keyId",
  paramValidationFactory<ReposDeleteDeployKeyParamSchema>(
    reposDeleteDeployKeyParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeleteDeployKeyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeleteDeployKey

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteDeployKey
  }
)

const issuesListLabelsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const issuesListLabelsForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "issuesListLabelsForRepo",
  "/repos/:owner/:repo/labels",
  paramValidationFactory<IssuesListLabelsForRepoParamSchema>(
    issuesListLabelsForRepoParamSchema
  ),
  queryValidationFactory<IssuesListLabelsForRepoQuerySchema>(
    issuesListLabelsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListLabelsForRepoParamSchema,
      IssuesListLabelsForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListLabelsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListLabelsForRepo
  }
)

const issuesCreateLabelParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const issuesCreateLabelBodySchema = joi
  .object()
  .keys({
    name: joi.string().required(),
    color: joi.string().required(),
    description: joi.string(),
  })
  .required()

router.post(
  "issuesCreateLabel",
  "/repos/:owner/:repo/labels",
  paramValidationFactory<IssuesCreateLabelParamSchema>(
    issuesCreateLabelParamSchema
  ),
  bodyValidationFactory<IssuesCreateLabelBodySchema>(
    issuesCreateLabelBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesCreateLabelParamSchema,
      void,
      IssuesCreateLabelBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-issuesCreateLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreateLabel
  }
)

const issuesGetLabelParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    name: joi.string().required(),
  })
  .required()

router.get(
  "issuesGetLabel",
  "/repos/:owner/:repo/labels/:name",
  paramValidationFactory<IssuesGetLabelParamSchema>(issuesGetLabelParamSchema),
  async (ctx: ValidatedCtx<IssuesGetLabelParamSchema, void, void>, next) => {
    //region safe-edit-region-issuesGetLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetLabel
  }
)

const issuesUpdateLabelParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    name: joi.string().required(),
  })
  .required()

const issuesUpdateLabelBodySchema = joi
  .object()
  .keys({
    new_name: joi.string(),
    color: joi.string(),
    description: joi.string(),
  })
  .required()

router.patch(
  "issuesUpdateLabel",
  "/repos/:owner/:repo/labels/:name",
  paramValidationFactory<IssuesUpdateLabelParamSchema>(
    issuesUpdateLabelParamSchema
  ),
  bodyValidationFactory<IssuesUpdateLabelBodySchema>(
    issuesUpdateLabelBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesUpdateLabelParamSchema,
      void,
      IssuesUpdateLabelBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-issuesUpdateLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdateLabel
  }
)

const issuesDeleteLabelParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    name: joi.string().required(),
  })
  .required()

router.delete(
  "issuesDeleteLabel",
  "/repos/:owner/:repo/labels/:name",
  paramValidationFactory<IssuesDeleteLabelParamSchema>(
    issuesDeleteLabelParamSchema
  ),
  async (ctx: ValidatedCtx<IssuesDeleteLabelParamSchema, void, void>, next) => {
    //region safe-edit-region-issuesDeleteLabel

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesDeleteLabel
  }
)

const reposListLanguagesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposListLanguages",
  "/repos/:owner/:repo/languages",
  paramValidationFactory<ReposListLanguagesParamSchema>(
    reposListLanguagesParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposListLanguagesParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposListLanguages

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListLanguages
  }
)

const licensesGetForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "licensesGetForRepo",
  "/repos/:owner/:repo/license",
  paramValidationFactory<LicensesGetForRepoParamSchema>(
    licensesGetForRepoParamSchema
  ),
  async (
    ctx: ValidatedCtx<LicensesGetForRepoParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-licensesGetForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-licensesGetForRepo
  }
)

const reposMergeParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposMergeBodySchema = joi
  .object()
  .keys({
    base: joi.string().required(),
    head: joi.string().required(),
    commit_message: joi.string(),
  })
  .required()

router.post(
  "reposMerge",
  "/repos/:owner/:repo/merges",
  paramValidationFactory<ReposMergeParamSchema>(reposMergeParamSchema),
  bodyValidationFactory<ReposMergeBodySchema>(reposMergeBodySchema),
  async (
    ctx: ValidatedCtx<ReposMergeParamSchema, void, ReposMergeBodySchema>,
    next
  ) => {
    //region safe-edit-region-reposMerge

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposMerge
  }
)

const issuesListMilestonesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const issuesListMilestonesQuerySchema = joi
  .object()
  .keys({
    state: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "issuesListMilestones",
  "/repos/:owner/:repo/milestones",
  paramValidationFactory<IssuesListMilestonesParamSchema>(
    issuesListMilestonesParamSchema
  ),
  queryValidationFactory<IssuesListMilestonesQuerySchema>(
    issuesListMilestonesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListMilestonesParamSchema,
      IssuesListMilestonesQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListMilestones

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListMilestones
  }
)

const issuesCreateMilestoneParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const issuesCreateMilestoneBodySchema = joi
  .object()
  .keys({
    title: joi.string().required(),
    state: joi.string(),
    description: joi.string(),
    due_on: joi.string(),
  })
  .required()

router.post(
  "issuesCreateMilestone",
  "/repos/:owner/:repo/milestones",
  paramValidationFactory<IssuesCreateMilestoneParamSchema>(
    issuesCreateMilestoneParamSchema
  ),
  bodyValidationFactory<IssuesCreateMilestoneBodySchema>(
    issuesCreateMilestoneBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesCreateMilestoneParamSchema,
      void,
      IssuesCreateMilestoneBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-issuesCreateMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesCreateMilestone
  }
)

const issuesGetMilestoneParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    milestone_number: joi.number().required(),
  })
  .required()

router.get(
  "issuesGetMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  paramValidationFactory<IssuesGetMilestoneParamSchema>(
    issuesGetMilestoneParamSchema
  ),
  async (
    ctx: ValidatedCtx<IssuesGetMilestoneParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-issuesGetMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesGetMilestone
  }
)

const issuesUpdateMilestoneParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    milestone_number: joi.number().required(),
  })
  .required()

const issuesUpdateMilestoneBodySchema = joi
  .object()
  .keys({
    title: joi.string(),
    state: joi.string(),
    description: joi.string(),
    due_on: joi.string(),
  })
  .required()

router.patch(
  "issuesUpdateMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  paramValidationFactory<IssuesUpdateMilestoneParamSchema>(
    issuesUpdateMilestoneParamSchema
  ),
  bodyValidationFactory<IssuesUpdateMilestoneBodySchema>(
    issuesUpdateMilestoneBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesUpdateMilestoneParamSchema,
      void,
      IssuesUpdateMilestoneBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-issuesUpdateMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesUpdateMilestone
  }
)

const issuesDeleteMilestoneParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    milestone_number: joi.number().required(),
  })
  .required()

router.delete(
  "issuesDeleteMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber",
  paramValidationFactory<IssuesDeleteMilestoneParamSchema>(
    issuesDeleteMilestoneParamSchema
  ),
  async (
    ctx: ValidatedCtx<IssuesDeleteMilestoneParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-issuesDeleteMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesDeleteMilestone
  }
)

const issuesListLabelsForMilestoneParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    milestone_number: joi.number().required(),
  })
  .required()

const issuesListLabelsForMilestoneQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "issuesListLabelsForMilestone",
  "/repos/:owner/:repo/milestones/:milestoneNumber/labels",
  paramValidationFactory<IssuesListLabelsForMilestoneParamSchema>(
    issuesListLabelsForMilestoneParamSchema
  ),
  queryValidationFactory<IssuesListLabelsForMilestoneQuerySchema>(
    issuesListLabelsForMilestoneQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      IssuesListLabelsForMilestoneParamSchema,
      IssuesListLabelsForMilestoneQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-issuesListLabelsForMilestone

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListLabelsForMilestone
  }
)

const activityListRepoNotificationsForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const activityListRepoNotificationsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({
    all: joi.boolean(),
    participating: joi.boolean(),
    since: joi.string(),
    before: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "activityListRepoNotificationsForAuthenticatedUser",
  "/repos/:owner/:repo/notifications",
  paramValidationFactory<ActivityListRepoNotificationsForAuthenticatedUserParamSchema>(
    activityListRepoNotificationsForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<ActivityListRepoNotificationsForAuthenticatedUserQuerySchema>(
    activityListRepoNotificationsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListRepoNotificationsForAuthenticatedUserParamSchema,
      ActivityListRepoNotificationsForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListRepoNotificationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListRepoNotificationsForAuthenticatedUser
  }
)

const activityMarkRepoNotificationsAsReadParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const activityMarkRepoNotificationsAsReadBodySchema = joi
  .object()
  .keys({ last_read_at: joi.string() })
  .required()

router.put(
  "activityMarkRepoNotificationsAsRead",
  "/repos/:owner/:repo/notifications",
  paramValidationFactory<ActivityMarkRepoNotificationsAsReadParamSchema>(
    activityMarkRepoNotificationsAsReadParamSchema
  ),
  bodyValidationFactory<ActivityMarkRepoNotificationsAsReadBodySchema>(
    activityMarkRepoNotificationsAsReadBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityMarkRepoNotificationsAsReadParamSchema,
      void,
      ActivityMarkRepoNotificationsAsReadBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-activityMarkRepoNotificationsAsRead

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityMarkRepoNotificationsAsRead
  }
)

const reposGetPagesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetPages",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<ReposGetPagesParamSchema>(reposGetPagesParamSchema),
  async (ctx: ValidatedCtx<ReposGetPagesParamSchema, void, void>, next) => {
    //region safe-edit-region-reposGetPages

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPages
  }
)

const reposCreatePagesSiteParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposCreatePagesSiteBodySchema = joi
  .object()
  .keys({
    source: joi.object().keys({ branch: joi.string(), path: joi.string() }),
  })
  .required()

router.post(
  "reposCreatePagesSite",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<ReposCreatePagesSiteParamSchema>(
    reposCreatePagesSiteParamSchema
  ),
  bodyValidationFactory<ReposCreatePagesSiteBodySchema>(
    reposCreatePagesSiteBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreatePagesSiteParamSchema,
      void,
      ReposCreatePagesSiteBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreatePagesSite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreatePagesSite
  }
)

const reposDeletePagesSiteParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.delete(
  "reposDeletePagesSite",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<ReposDeletePagesSiteParamSchema>(
    reposDeletePagesSiteParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeletePagesSiteParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeletePagesSite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeletePagesSite
  }
)

const reposUpdateInformationAboutPagesSiteParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposUpdateInformationAboutPagesSiteBodySchema = joi
  .object()
  .keys({ cname: joi.string(), source: joi.string() })
  .required()

router.put(
  "reposUpdateInformationAboutPagesSite",
  "/repos/:owner/:repo/pages",
  paramValidationFactory<ReposUpdateInformationAboutPagesSiteParamSchema>(
    reposUpdateInformationAboutPagesSiteParamSchema
  ),
  bodyValidationFactory<ReposUpdateInformationAboutPagesSiteBodySchema>(
    reposUpdateInformationAboutPagesSiteBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposUpdateInformationAboutPagesSiteParamSchema,
      void,
      ReposUpdateInformationAboutPagesSiteBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposUpdateInformationAboutPagesSite

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateInformationAboutPagesSite
  }
)

const reposRequestPagesBuildParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.post(
  "reposRequestPagesBuild",
  "/repos/:owner/:repo/pages/builds",
  paramValidationFactory<ReposRequestPagesBuildParamSchema>(
    reposRequestPagesBuildParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposRequestPagesBuildParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposRequestPagesBuild

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposRequestPagesBuild
  }
)

const reposListPagesBuildsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListPagesBuildsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListPagesBuilds",
  "/repos/:owner/:repo/pages/builds",
  paramValidationFactory<ReposListPagesBuildsParamSchema>(
    reposListPagesBuildsParamSchema
  ),
  queryValidationFactory<ReposListPagesBuildsQuerySchema>(
    reposListPagesBuildsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListPagesBuildsParamSchema,
      ReposListPagesBuildsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListPagesBuilds

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListPagesBuilds
  }
)

const reposGetLatestPagesBuildParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetLatestPagesBuild",
  "/repos/:owner/:repo/pages/builds/latest",
  paramValidationFactory<ReposGetLatestPagesBuildParamSchema>(
    reposGetLatestPagesBuildParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetLatestPagesBuildParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetLatestPagesBuild

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetLatestPagesBuild
  }
)

const reposGetPagesBuildParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    build_id: joi.number().required(),
  })
  .required()

router.get(
  "reposGetPagesBuild",
  "/repos/:owner/:repo/pages/builds/:buildId",
  paramValidationFactory<ReposGetPagesBuildParamSchema>(
    reposGetPagesBuildParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetPagesBuildParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetPagesBuild

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPagesBuild
  }
)

const projectsListForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const projectsListForRepoQuerySchema = joi
  .object()
  .keys({ state: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "projectsListForRepo",
  "/repos/:owner/:repo/projects",
  paramValidationFactory<ProjectsListForRepoParamSchema>(
    projectsListForRepoParamSchema
  ),
  queryValidationFactory<ProjectsListForRepoQuerySchema>(
    projectsListForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsListForRepoParamSchema,
      ProjectsListForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-projectsListForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListForRepo
  }
)

const projectsCreateForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const projectsCreateForRepoBodySchema = joi
  .object()
  .keys({ name: joi.string().required(), body: joi.string() })
  .required()

router.post(
  "projectsCreateForRepo",
  "/repos/:owner/:repo/projects",
  paramValidationFactory<ProjectsCreateForRepoParamSchema>(
    projectsCreateForRepoParamSchema
  ),
  bodyValidationFactory<ProjectsCreateForRepoBodySchema>(
    projectsCreateForRepoBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsCreateForRepoParamSchema,
      void,
      ProjectsCreateForRepoBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-projectsCreateForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateForRepo
  }
)

const pullsListParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const pullsListQuerySchema = joi
  .object()
  .keys({
    state: joi.string(),
    head: joi.string(),
    base: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "pullsList",
  "/repos/:owner/:repo/pulls",
  paramValidationFactory<PullsListParamSchema>(pullsListParamSchema),
  queryValidationFactory<PullsListQuerySchema>(pullsListQuerySchema),
  async (
    ctx: ValidatedCtx<PullsListParamSchema, PullsListQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-pullsList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsList
  }
)

const pullsCreateParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const pullsCreateBodySchema = joi
  .object()
  .keys({
    title: joi.string().required(),
    head: joi.string().required(),
    base: joi.string().required(),
    body: joi.string(),
    maintainer_can_modify: joi.boolean(),
    draft: joi.boolean(),
  })
  .required()

router.post(
  "pullsCreate",
  "/repos/:owner/:repo/pulls",
  paramValidationFactory<PullsCreateParamSchema>(pullsCreateParamSchema),
  bodyValidationFactory<PullsCreateBodySchema>(pullsCreateBodySchema),
  async (
    ctx: ValidatedCtx<PullsCreateParamSchema, void, PullsCreateBodySchema>,
    next
  ) => {
    //region safe-edit-region-pullsCreate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreate
  }
)

const pullsListReviewCommentsForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const pullsListReviewCommentsForRepoQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "pullsListReviewCommentsForRepo",
  "/repos/:owner/:repo/pulls/comments",
  paramValidationFactory<PullsListReviewCommentsForRepoParamSchema>(
    pullsListReviewCommentsForRepoParamSchema
  ),
  queryValidationFactory<PullsListReviewCommentsForRepoQuerySchema>(
    pullsListReviewCommentsForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsListReviewCommentsForRepoParamSchema,
      PullsListReviewCommentsForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-pullsListReviewCommentsForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListReviewCommentsForRepo
  }
)

const pullsGetReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

router.get(
  "pullsGetReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  paramValidationFactory<PullsGetReviewCommentParamSchema>(
    pullsGetReviewCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<PullsGetReviewCommentParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-pullsGetReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsGetReviewComment
  }
)

const pullsUpdateReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

const pullsUpdateReviewCommentBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.patch(
  "pullsUpdateReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  paramValidationFactory<PullsUpdateReviewCommentParamSchema>(
    pullsUpdateReviewCommentParamSchema
  ),
  bodyValidationFactory<PullsUpdateReviewCommentBodySchema>(
    pullsUpdateReviewCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsUpdateReviewCommentParamSchema,
      void,
      PullsUpdateReviewCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-pullsUpdateReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdateReviewComment
  }
)

const pullsDeleteReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

router.delete(
  "pullsDeleteReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId",
  paramValidationFactory<PullsDeleteReviewCommentParamSchema>(
    pullsDeleteReviewCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<PullsDeleteReviewCommentParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-pullsDeleteReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsDeleteReviewComment
  }
)

const reactionsListForPullRequestReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

const reactionsListForPullRequestReviewCommentQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reactionsListForPullRequestReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions",
  paramValidationFactory<ReactionsListForPullRequestReviewCommentParamSchema>(
    reactionsListForPullRequestReviewCommentParamSchema
  ),
  queryValidationFactory<ReactionsListForPullRequestReviewCommentQuerySchema>(
    reactionsListForPullRequestReviewCommentQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsListForPullRequestReviewCommentParamSchema,
      ReactionsListForPullRequestReviewCommentQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reactionsListForPullRequestReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForPullRequestReviewComment
  }
)

const reactionsCreateForPullRequestReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
  })
  .required()

const reactionsCreateForPullRequestReviewCommentBodySchema = joi
  .object()
  .keys({ content: joi.string().required() })
  .required()

router.post(
  "reactionsCreateForPullRequestReviewComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions",
  paramValidationFactory<ReactionsCreateForPullRequestReviewCommentParamSchema>(
    reactionsCreateForPullRequestReviewCommentParamSchema
  ),
  bodyValidationFactory<ReactionsCreateForPullRequestReviewCommentBodySchema>(
    reactionsCreateForPullRequestReviewCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsCreateForPullRequestReviewCommentParamSchema,
      void,
      ReactionsCreateForPullRequestReviewCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reactionsCreateForPullRequestReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForPullRequestReviewComment
  }
)

const reactionsDeleteForPullRequestCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    comment_id: joi.number().required(),
    reaction_id: joi.number().required(),
  })
  .required()

router.delete(
  "reactionsDeleteForPullRequestComment",
  "/repos/:owner/:repo/pulls/comments/:commentId/reactions/:reactionId",
  paramValidationFactory<ReactionsDeleteForPullRequestCommentParamSchema>(
    reactionsDeleteForPullRequestCommentParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsDeleteForPullRequestCommentParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reactionsDeleteForPullRequestComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsDeleteForPullRequestComment
  }
)

const pullsGetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

router.get(
  "pullsGet",
  "/repos/:owner/:repo/pulls/:pullNumber",
  paramValidationFactory<PullsGetParamSchema>(pullsGetParamSchema),
  async (ctx: ValidatedCtx<PullsGetParamSchema, void, void>, next) => {
    //region safe-edit-region-pullsGet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsGet
  }
)

const pullsUpdateParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsUpdateBodySchema = joi
  .object()
  .keys({
    title: joi.string(),
    body: joi.string(),
    state: joi.string(),
    base: joi.string(),
    maintainer_can_modify: joi.boolean(),
  })
  .required()

router.patch(
  "pullsUpdate",
  "/repos/:owner/:repo/pulls/:pullNumber",
  paramValidationFactory<PullsUpdateParamSchema>(pullsUpdateParamSchema),
  bodyValidationFactory<PullsUpdateBodySchema>(pullsUpdateBodySchema),
  async (
    ctx: ValidatedCtx<PullsUpdateParamSchema, void, PullsUpdateBodySchema>,
    next
  ) => {
    //region safe-edit-region-pullsUpdate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdate
  }
)

const pullsListReviewCommentsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsListReviewCommentsQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "pullsListReviewComments",
  "/repos/:owner/:repo/pulls/:pullNumber/comments",
  paramValidationFactory<PullsListReviewCommentsParamSchema>(
    pullsListReviewCommentsParamSchema
  ),
  queryValidationFactory<PullsListReviewCommentsQuerySchema>(
    pullsListReviewCommentsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsListReviewCommentsParamSchema,
      PullsListReviewCommentsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-pullsListReviewComments

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListReviewComments
  }
)

const pullsCreateReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsCreateReviewCommentBodySchema = joi
  .object()
  .keys({
    body: joi.string().required(),
    commit_id: joi.string().required(),
    path: joi.string().required(),
    position: joi.number(),
    side: joi.string(),
    line: joi.number(),
    start_line: joi.number(),
    start_side: joi.string(),
  })
  .required()

router.post(
  "pullsCreateReviewComment",
  "/repos/:owner/:repo/pulls/:pullNumber/comments",
  paramValidationFactory<PullsCreateReviewCommentParamSchema>(
    pullsCreateReviewCommentParamSchema
  ),
  bodyValidationFactory<PullsCreateReviewCommentBodySchema>(
    pullsCreateReviewCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsCreateReviewCommentParamSchema,
      void,
      PullsCreateReviewCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-pullsCreateReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreateReviewComment
  }
)

const pullsCreateReplyForReviewCommentParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    comment_id: joi.number().required(),
  })
  .required()

const pullsCreateReplyForReviewCommentBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.post(
  "pullsCreateReplyForReviewComment",
  "/repos/:owner/:repo/pulls/:pullNumber/comments/:commentId/replies",
  paramValidationFactory<PullsCreateReplyForReviewCommentParamSchema>(
    pullsCreateReplyForReviewCommentParamSchema
  ),
  bodyValidationFactory<PullsCreateReplyForReviewCommentBodySchema>(
    pullsCreateReplyForReviewCommentBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsCreateReplyForReviewCommentParamSchema,
      void,
      PullsCreateReplyForReviewCommentBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-pullsCreateReplyForReviewComment

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreateReplyForReviewComment
  }
)

const pullsListCommitsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsListCommitsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "pullsListCommits",
  "/repos/:owner/:repo/pulls/:pullNumber/commits",
  paramValidationFactory<PullsListCommitsParamSchema>(
    pullsListCommitsParamSchema
  ),
  queryValidationFactory<PullsListCommitsQuerySchema>(
    pullsListCommitsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsListCommitsParamSchema,
      PullsListCommitsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-pullsListCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListCommits
  }
)

const pullsListFilesParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsListFilesQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "pullsListFiles",
  "/repos/:owner/:repo/pulls/:pullNumber/files",
  paramValidationFactory<PullsListFilesParamSchema>(pullsListFilesParamSchema),
  queryValidationFactory<PullsListFilesQuerySchema>(pullsListFilesQuerySchema),
  async (
    ctx: ValidatedCtx<
      PullsListFilesParamSchema,
      PullsListFilesQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-pullsListFiles

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListFiles
  }
)

const pullsCheckIfMergedParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

router.get(
  "pullsCheckIfMerged",
  "/repos/:owner/:repo/pulls/:pullNumber/merge",
  paramValidationFactory<PullsCheckIfMergedParamSchema>(
    pullsCheckIfMergedParamSchema
  ),
  async (
    ctx: ValidatedCtx<PullsCheckIfMergedParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-pullsCheckIfMerged

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCheckIfMerged
  }
)

const pullsMergeParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsMergeBodySchema = joi
  .object()
  .keys({
    commit_title: joi.string(),
    commit_message: joi.string(),
    sha: joi.string(),
    merge_method: joi.string(),
  })
  .required()

router.put(
  "pullsMerge",
  "/repos/:owner/:repo/pulls/:pullNumber/merge",
  paramValidationFactory<PullsMergeParamSchema>(pullsMergeParamSchema),
  bodyValidationFactory<PullsMergeBodySchema>(pullsMergeBodySchema),
  async (
    ctx: ValidatedCtx<PullsMergeParamSchema, void, PullsMergeBodySchema>,
    next
  ) => {
    //region safe-edit-region-pullsMerge

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsMerge
  }
)

const pullsListRequestedReviewersParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsListRequestedReviewersQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "pullsListRequestedReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  paramValidationFactory<PullsListRequestedReviewersParamSchema>(
    pullsListRequestedReviewersParamSchema
  ),
  queryValidationFactory<PullsListRequestedReviewersQuerySchema>(
    pullsListRequestedReviewersQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsListRequestedReviewersParamSchema,
      PullsListRequestedReviewersQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-pullsListRequestedReviewers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListRequestedReviewers
  }
)

const pullsRequestReviewersParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsRequestReviewersBodySchema = joi
  .object()
  .keys({
    reviewers: joi.array().items(joi.string()),
    team_reviewers: joi.array().items(joi.string()),
  })
  .required()

router.post(
  "pullsRequestReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  paramValidationFactory<PullsRequestReviewersParamSchema>(
    pullsRequestReviewersParamSchema
  ),
  bodyValidationFactory<PullsRequestReviewersBodySchema>(
    pullsRequestReviewersBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsRequestReviewersParamSchema,
      void,
      PullsRequestReviewersBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-pullsRequestReviewers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsRequestReviewers
  }
)

const pullsRemoveRequestedReviewersParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsRemoveRequestedReviewersBodySchema = joi
  .object()
  .keys({
    reviewers: joi.array().items(joi.string()),
    team_reviewers: joi.array().items(joi.string()),
  })
  .required()

router.delete(
  "pullsRemoveRequestedReviewers",
  "/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers",
  paramValidationFactory<PullsRemoveRequestedReviewersParamSchema>(
    pullsRemoveRequestedReviewersParamSchema
  ),
  bodyValidationFactory<PullsRemoveRequestedReviewersBodySchema>(
    pullsRemoveRequestedReviewersBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsRemoveRequestedReviewersParamSchema,
      void,
      PullsRemoveRequestedReviewersBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-pullsRemoveRequestedReviewers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsRemoveRequestedReviewers
  }
)

const pullsListReviewsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsListReviewsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "pullsListReviews",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews",
  paramValidationFactory<PullsListReviewsParamSchema>(
    pullsListReviewsParamSchema
  ),
  queryValidationFactory<PullsListReviewsQuerySchema>(
    pullsListReviewsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsListReviewsParamSchema,
      PullsListReviewsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-pullsListReviews

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListReviews
  }
)

const pullsCreateReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsCreateReviewBodySchema = joi
  .object()
  .keys({
    commit_id: joi.string(),
    body: joi.string(),
    event: joi.string(),
    comments: joi
      .array()
      .items(
        joi
          .object()
          .keys({
            path: joi.string().required(),
            position: joi.number().required(),
            body: joi.string().required(),
          })
      ),
  })
  .required()

router.post(
  "pullsCreateReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews",
  paramValidationFactory<PullsCreateReviewParamSchema>(
    pullsCreateReviewParamSchema
  ),
  bodyValidationFactory<PullsCreateReviewBodySchema>(
    pullsCreateReviewBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsCreateReviewParamSchema,
      void,
      PullsCreateReviewBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-pullsCreateReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsCreateReview
  }
)

const pullsGetReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })
  .required()

router.get(
  "pullsGetReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  paramValidationFactory<PullsGetReviewParamSchema>(pullsGetReviewParamSchema),
  async (ctx: ValidatedCtx<PullsGetReviewParamSchema, void, void>, next) => {
    //region safe-edit-region-pullsGetReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsGetReview
  }
)

const pullsDeletePendingReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })
  .required()

router.delete(
  "pullsDeletePendingReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  paramValidationFactory<PullsDeletePendingReviewParamSchema>(
    pullsDeletePendingReviewParamSchema
  ),
  async (
    ctx: ValidatedCtx<PullsDeletePendingReviewParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-pullsDeletePendingReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsDeletePendingReview
  }
)

const pullsUpdateReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })
  .required()

const pullsUpdateReviewBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.put(
  "pullsUpdateReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId",
  paramValidationFactory<PullsUpdateReviewParamSchema>(
    pullsUpdateReviewParamSchema
  ),
  bodyValidationFactory<PullsUpdateReviewBodySchema>(
    pullsUpdateReviewBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsUpdateReviewParamSchema,
      void,
      PullsUpdateReviewBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-pullsUpdateReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdateReview
  }
)

const pullsListCommentsForReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })
  .required()

const pullsListCommentsForReviewQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "pullsListCommentsForReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/comments",
  paramValidationFactory<PullsListCommentsForReviewParamSchema>(
    pullsListCommentsForReviewParamSchema
  ),
  queryValidationFactory<PullsListCommentsForReviewQuerySchema>(
    pullsListCommentsForReviewQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsListCommentsForReviewParamSchema,
      PullsListCommentsForReviewQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-pullsListCommentsForReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsListCommentsForReview
  }
)

const pullsDismissReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })
  .required()

const pullsDismissReviewBodySchema = joi
  .object()
  .keys({ message: joi.string().required() })
  .required()

router.put(
  "pullsDismissReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/dismissals",
  paramValidationFactory<PullsDismissReviewParamSchema>(
    pullsDismissReviewParamSchema
  ),
  bodyValidationFactory<PullsDismissReviewBodySchema>(
    pullsDismissReviewBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsDismissReviewParamSchema,
      void,
      PullsDismissReviewBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-pullsDismissReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsDismissReview
  }
)

const pullsSubmitReviewParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
    review_id: joi.number().required(),
  })
  .required()

const pullsSubmitReviewBodySchema = joi
  .object()
  .keys({ body: joi.string(), event: joi.string().required() })
  .required()

router.post(
  "pullsSubmitReview",
  "/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/events",
  paramValidationFactory<PullsSubmitReviewParamSchema>(
    pullsSubmitReviewParamSchema
  ),
  bodyValidationFactory<PullsSubmitReviewBodySchema>(
    pullsSubmitReviewBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsSubmitReviewParamSchema,
      void,
      PullsSubmitReviewBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-pullsSubmitReview

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsSubmitReview
  }
)

const pullsUpdateBranchParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    pull_number: joi.number().required(),
  })
  .required()

const pullsUpdateBranchBodySchema = joi
  .object()
  .keys({ expected_head_sha: joi.string() })
  .required()

router.put(
  "pullsUpdateBranch",
  "/repos/:owner/:repo/pulls/:pullNumber/update-branch",
  paramValidationFactory<PullsUpdateBranchParamSchema>(
    pullsUpdateBranchParamSchema
  ),
  bodyValidationFactory<PullsUpdateBranchBodySchema>(
    pullsUpdateBranchBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      PullsUpdateBranchParamSchema,
      void,
      PullsUpdateBranchBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-pullsUpdateBranch

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-pullsUpdateBranch
  }
)

const reposGetReadmeParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposGetReadmeQuerySchema = joi
  .object()
  .keys({ ref: joi.string() })
  .required()

router.get(
  "reposGetReadme",
  "/repos/:owner/:repo/readme",
  paramValidationFactory<ReposGetReadmeParamSchema>(reposGetReadmeParamSchema),
  queryValidationFactory<ReposGetReadmeQuerySchema>(reposGetReadmeQuerySchema),
  async (
    ctx: ValidatedCtx<
      ReposGetReadmeParamSchema,
      ReposGetReadmeQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposGetReadme

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetReadme
  }
)

const reposListReleasesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListReleasesQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListReleases",
  "/repos/:owner/:repo/releases",
  paramValidationFactory<ReposListReleasesParamSchema>(
    reposListReleasesParamSchema
  ),
  queryValidationFactory<ReposListReleasesQuerySchema>(
    reposListReleasesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListReleasesParamSchema,
      ReposListReleasesQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListReleases

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListReleases
  }
)

const reposCreateReleaseParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposCreateReleaseBodySchema = joi
  .object()
  .keys({
    tag_name: joi.string().required(),
    target_commitish: joi.string(),
    name: joi.string(),
    body: joi.string(),
    draft: joi.boolean(),
    prerelease: joi.boolean(),
  })
  .required()

router.post(
  "reposCreateRelease",
  "/repos/:owner/:repo/releases",
  paramValidationFactory<ReposCreateReleaseParamSchema>(
    reposCreateReleaseParamSchema
  ),
  bodyValidationFactory<ReposCreateReleaseBodySchema>(
    reposCreateReleaseBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreateReleaseParamSchema,
      void,
      ReposCreateReleaseBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateRelease
  }
)

const reposGetReleaseAssetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    asset_id: joi.number().required(),
  })
  .required()

router.get(
  "reposGetReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  paramValidationFactory<ReposGetReleaseAssetParamSchema>(
    reposGetReleaseAssetParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetReleaseAssetParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetReleaseAsset
  }
)

const reposUpdateReleaseAssetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    asset_id: joi.number().required(),
  })
  .required()

const reposUpdateReleaseAssetBodySchema = joi
  .object()
  .keys({ name: joi.string(), label: joi.string() })
  .required()

router.patch(
  "reposUpdateReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  paramValidationFactory<ReposUpdateReleaseAssetParamSchema>(
    reposUpdateReleaseAssetParamSchema
  ),
  bodyValidationFactory<ReposUpdateReleaseAssetBodySchema>(
    reposUpdateReleaseAssetBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposUpdateReleaseAssetParamSchema,
      void,
      ReposUpdateReleaseAssetBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposUpdateReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateReleaseAsset
  }
)

const reposDeleteReleaseAssetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    asset_id: joi.number().required(),
  })
  .required()

router.delete(
  "reposDeleteReleaseAsset",
  "/repos/:owner/:repo/releases/assets/:assetId",
  paramValidationFactory<ReposDeleteReleaseAssetParamSchema>(
    reposDeleteReleaseAssetParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeleteReleaseAssetParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeleteReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteReleaseAsset
  }
)

const reposGetLatestReleaseParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetLatestRelease",
  "/repos/:owner/:repo/releases/latest",
  paramValidationFactory<ReposGetLatestReleaseParamSchema>(
    reposGetLatestReleaseParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetLatestReleaseParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetLatestRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetLatestRelease
  }
)

const reposGetReleaseByTagParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    tag: joi.string().required(),
  })
  .required()

router.get(
  "reposGetReleaseByTag",
  "/repos/:owner/:repo/releases/tags/:tag",
  paramValidationFactory<ReposGetReleaseByTagParamSchema>(
    reposGetReleaseByTagParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetReleaseByTagParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetReleaseByTag

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetReleaseByTag
  }
)

const reposGetReleaseParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    release_id: joi.number().required(),
  })
  .required()

router.get(
  "reposGetRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  paramValidationFactory<ReposGetReleaseParamSchema>(
    reposGetReleaseParamSchema
  ),
  async (ctx: ValidatedCtx<ReposGetReleaseParamSchema, void, void>, next) => {
    //region safe-edit-region-reposGetRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetRelease
  }
)

const reposUpdateReleaseParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    release_id: joi.number().required(),
  })
  .required()

const reposUpdateReleaseBodySchema = joi
  .object()
  .keys({
    tag_name: joi.string(),
    target_commitish: joi.string(),
    name: joi.string(),
    body: joi.string(),
    draft: joi.boolean(),
    prerelease: joi.boolean(),
  })
  .required()

router.patch(
  "reposUpdateRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  paramValidationFactory<ReposUpdateReleaseParamSchema>(
    reposUpdateReleaseParamSchema
  ),
  bodyValidationFactory<ReposUpdateReleaseBodySchema>(
    reposUpdateReleaseBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposUpdateReleaseParamSchema,
      void,
      ReposUpdateReleaseBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposUpdateRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUpdateRelease
  }
)

const reposDeleteReleaseParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    release_id: joi.number().required(),
  })
  .required()

router.delete(
  "reposDeleteRelease",
  "/repos/:owner/:repo/releases/:releaseId",
  paramValidationFactory<ReposDeleteReleaseParamSchema>(
    reposDeleteReleaseParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeleteReleaseParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeleteRelease

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeleteRelease
  }
)

const reposListReleaseAssetsParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    release_id: joi.number().required(),
  })
  .required()

const reposListReleaseAssetsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListReleaseAssets",
  "/repos/:owner/:repo/releases/:releaseId/assets",
  paramValidationFactory<ReposListReleaseAssetsParamSchema>(
    reposListReleaseAssetsParamSchema
  ),
  queryValidationFactory<ReposListReleaseAssetsQuerySchema>(
    reposListReleaseAssetsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListReleaseAssetsParamSchema,
      ReposListReleaseAssetsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListReleaseAssets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListReleaseAssets
  }
)

const reposUploadReleaseAssetParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    release_id: joi.number().required(),
  })
  .required()

const reposUploadReleaseAssetQuerySchema = joi
  .object()
  .keys({ name: joi.string(), label: joi.string() })
  .required()

const reposUploadReleaseAssetBodySchema = joi.string().required()

router.post(
  "reposUploadReleaseAsset",
  "/repos/:owner/:repo/releases/:releaseId/assets",
  paramValidationFactory<ReposUploadReleaseAssetParamSchema>(
    reposUploadReleaseAssetParamSchema
  ),
  queryValidationFactory<ReposUploadReleaseAssetQuerySchema>(
    reposUploadReleaseAssetQuerySchema
  ),
  bodyValidationFactory<ReposUploadReleaseAssetBodySchema>(
    reposUploadReleaseAssetBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposUploadReleaseAssetParamSchema,
      ReposUploadReleaseAssetQuerySchema,
      ReposUploadReleaseAssetBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposUploadReleaseAsset

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposUploadReleaseAsset
  }
)

const activityListStargazersForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const activityListStargazersForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListStargazersForRepo",
  "/repos/:owner/:repo/stargazers",
  paramValidationFactory<ActivityListStargazersForRepoParamSchema>(
    activityListStargazersForRepoParamSchema
  ),
  queryValidationFactory<ActivityListStargazersForRepoQuerySchema>(
    activityListStargazersForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListStargazersForRepoParamSchema,
      ActivityListStargazersForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListStargazersForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListStargazersForRepo
  }
)

const reposGetCodeFrequencyStatsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetCodeFrequencyStats",
  "/repos/:owner/:repo/stats/code_frequency",
  paramValidationFactory<ReposGetCodeFrequencyStatsParamSchema>(
    reposGetCodeFrequencyStatsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetCodeFrequencyStatsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetCodeFrequencyStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCodeFrequencyStats
  }
)

const reposGetCommitActivityStatsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetCommitActivityStats",
  "/repos/:owner/:repo/stats/commit_activity",
  paramValidationFactory<ReposGetCommitActivityStatsParamSchema>(
    reposGetCommitActivityStatsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetCommitActivityStatsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetCommitActivityStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetCommitActivityStats
  }
)

const reposGetContributorsStatsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetContributorsStats",
  "/repos/:owner/:repo/stats/contributors",
  paramValidationFactory<ReposGetContributorsStatsParamSchema>(
    reposGetContributorsStatsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetContributorsStatsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetContributorsStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetContributorsStats
  }
)

const reposGetParticipationStatsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetParticipationStats",
  "/repos/:owner/:repo/stats/participation",
  paramValidationFactory<ReposGetParticipationStatsParamSchema>(
    reposGetParticipationStatsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetParticipationStatsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetParticipationStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetParticipationStats
  }
)

const reposGetPunchCardStatsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetPunchCardStats",
  "/repos/:owner/:repo/stats/punch_card",
  paramValidationFactory<ReposGetPunchCardStatsParamSchema>(
    reposGetPunchCardStatsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetPunchCardStatsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetPunchCardStats

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetPunchCardStats
  }
)

const reposCreateCommitStatusParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    sha: joi.string().required(),
  })
  .required()

const reposCreateCommitStatusBodySchema = joi
  .object()
  .keys({
    state: joi.string().required(),
    target_url: joi.string(),
    description: joi.string(),
    context: joi.string(),
  })
  .required()

router.post(
  "reposCreateCommitStatus",
  "/repos/:owner/:repo/statuses/:sha",
  paramValidationFactory<ReposCreateCommitStatusParamSchema>(
    reposCreateCommitStatusParamSchema
  ),
  bodyValidationFactory<ReposCreateCommitStatusBodySchema>(
    reposCreateCommitStatusBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreateCommitStatusParamSchema,
      void,
      ReposCreateCommitStatusBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateCommitStatus

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateCommitStatus
  }
)

const activityListWatchersForRepoParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const activityListWatchersForRepoQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListWatchersForRepo",
  "/repos/:owner/:repo/subscribers",
  paramValidationFactory<ActivityListWatchersForRepoParamSchema>(
    activityListWatchersForRepoParamSchema
  ),
  queryValidationFactory<ActivityListWatchersForRepoQuerySchema>(
    activityListWatchersForRepoQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListWatchersForRepoParamSchema,
      ActivityListWatchersForRepoQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListWatchersForRepo

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListWatchersForRepo
  }
)

const activityGetRepoSubscriptionParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "activityGetRepoSubscription",
  "/repos/:owner/:repo/subscription",
  paramValidationFactory<ActivityGetRepoSubscriptionParamSchema>(
    activityGetRepoSubscriptionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActivityGetRepoSubscriptionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-activityGetRepoSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityGetRepoSubscription
  }
)

const activitySetRepoSubscriptionParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const activitySetRepoSubscriptionBodySchema = joi
  .object()
  .keys({ subscribed: joi.boolean(), ignored: joi.boolean() })
  .required()

router.put(
  "activitySetRepoSubscription",
  "/repos/:owner/:repo/subscription",
  paramValidationFactory<ActivitySetRepoSubscriptionParamSchema>(
    activitySetRepoSubscriptionParamSchema
  ),
  bodyValidationFactory<ActivitySetRepoSubscriptionBodySchema>(
    activitySetRepoSubscriptionBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivitySetRepoSubscriptionParamSchema,
      void,
      ActivitySetRepoSubscriptionBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-activitySetRepoSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activitySetRepoSubscription
  }
)

const activityDeleteRepoSubscriptionParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.delete(
  "activityDeleteRepoSubscription",
  "/repos/:owner/:repo/subscription",
  paramValidationFactory<ActivityDeleteRepoSubscriptionParamSchema>(
    activityDeleteRepoSubscriptionParamSchema
  ),
  async (
    ctx: ValidatedCtx<ActivityDeleteRepoSubscriptionParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-activityDeleteRepoSubscription

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityDeleteRepoSubscription
  }
)

const reposListTagsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListTagsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListTags",
  "/repos/:owner/:repo/tags",
  paramValidationFactory<ReposListTagsParamSchema>(reposListTagsParamSchema),
  queryValidationFactory<ReposListTagsQuerySchema>(reposListTagsQuerySchema),
  async (
    ctx: ValidatedCtx<ReposListTagsParamSchema, ReposListTagsQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-reposListTags

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListTags
  }
)

const reposListTeamsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposListTeamsQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListTeams",
  "/repos/:owner/:repo/teams",
  paramValidationFactory<ReposListTeamsParamSchema>(reposListTeamsParamSchema),
  queryValidationFactory<ReposListTeamsQuerySchema>(reposListTeamsQuerySchema),
  async (
    ctx: ValidatedCtx<
      ReposListTeamsParamSchema,
      ReposListTeamsQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListTeams

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListTeams
  }
)

const reposGetAllTopicsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetAllTopics",
  "/repos/:owner/:repo/topics",
  paramValidationFactory<ReposGetAllTopicsParamSchema>(
    reposGetAllTopicsParamSchema
  ),
  async (ctx: ValidatedCtx<ReposGetAllTopicsParamSchema, void, void>, next) => {
    //region safe-edit-region-reposGetAllTopics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetAllTopics
  }
)

const reposReplaceAllTopicsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposReplaceAllTopicsBodySchema = joi
  .object()
  .keys({ names: joi.array().items(joi.string()).required() })
  .required()

router.put(
  "reposReplaceAllTopics",
  "/repos/:owner/:repo/topics",
  paramValidationFactory<ReposReplaceAllTopicsParamSchema>(
    reposReplaceAllTopicsParamSchema
  ),
  bodyValidationFactory<ReposReplaceAllTopicsBodySchema>(
    reposReplaceAllTopicsBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposReplaceAllTopicsParamSchema,
      void,
      ReposReplaceAllTopicsBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposReplaceAllTopics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposReplaceAllTopics
  }
)

const reposGetClonesParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposGetClonesQuerySchema = joi
  .object()
  .keys({ per: joi.string() })
  .required()

router.get(
  "reposGetClones",
  "/repos/:owner/:repo/traffic/clones",
  paramValidationFactory<ReposGetClonesParamSchema>(reposGetClonesParamSchema),
  queryValidationFactory<ReposGetClonesQuerySchema>(reposGetClonesQuerySchema),
  async (
    ctx: ValidatedCtx<
      ReposGetClonesParamSchema,
      ReposGetClonesQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposGetClones

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetClones
  }
)

const reposGetTopPathsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetTopPaths",
  "/repos/:owner/:repo/traffic/popular/paths",
  paramValidationFactory<ReposGetTopPathsParamSchema>(
    reposGetTopPathsParamSchema
  ),
  async (ctx: ValidatedCtx<ReposGetTopPathsParamSchema, void, void>, next) => {
    //region safe-edit-region-reposGetTopPaths

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetTopPaths
  }
)

const reposGetTopReferrersParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposGetTopReferrers",
  "/repos/:owner/:repo/traffic/popular/referrers",
  paramValidationFactory<ReposGetTopReferrersParamSchema>(
    reposGetTopReferrersParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposGetTopReferrersParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposGetTopReferrers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetTopReferrers
  }
)

const reposGetViewsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposGetViewsQuerySchema = joi
  .object()
  .keys({ per: joi.string() })
  .required()

router.get(
  "reposGetViews",
  "/repos/:owner/:repo/traffic/views",
  paramValidationFactory<ReposGetViewsParamSchema>(reposGetViewsParamSchema),
  queryValidationFactory<ReposGetViewsQuerySchema>(reposGetViewsQuerySchema),
  async (
    ctx: ValidatedCtx<ReposGetViewsParamSchema, ReposGetViewsQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-reposGetViews

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposGetViews
  }
)

const reposTransferParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

const reposTransferBodySchema = joi
  .object()
  .keys({ new_owner: joi.string(), team_ids: joi.array().items(joi.number()) })
  .required()

router.post(
  "reposTransfer",
  "/repos/:owner/:repo/transfer",
  paramValidationFactory<ReposTransferParamSchema>(reposTransferParamSchema),
  bodyValidationFactory<ReposTransferBodySchema>(reposTransferBodySchema),
  async (
    ctx: ValidatedCtx<ReposTransferParamSchema, void, ReposTransferBodySchema>,
    next
  ) => {
    //region safe-edit-region-reposTransfer

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposTransfer
  }
)

const reposCheckVulnerabilityAlertsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "reposCheckVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  paramValidationFactory<ReposCheckVulnerabilityAlertsParamSchema>(
    reposCheckVulnerabilityAlertsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposCheckVulnerabilityAlertsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposCheckVulnerabilityAlerts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCheckVulnerabilityAlerts
  }
)

const reposEnableVulnerabilityAlertsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.put(
  "reposEnableVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  paramValidationFactory<ReposEnableVulnerabilityAlertsParamSchema>(
    reposEnableVulnerabilityAlertsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposEnableVulnerabilityAlertsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposEnableVulnerabilityAlerts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposEnableVulnerabilityAlerts
  }
)

const reposDisableVulnerabilityAlertsParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.delete(
  "reposDisableVulnerabilityAlerts",
  "/repos/:owner/:repo/vulnerability-alerts",
  paramValidationFactory<ReposDisableVulnerabilityAlertsParamSchema>(
    reposDisableVulnerabilityAlertsParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDisableVulnerabilityAlertsParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDisableVulnerabilityAlerts

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDisableVulnerabilityAlerts
  }
)

const reposDownloadArchiveParamSchema = joi
  .object()
  .keys({
    owner: joi.string().required(),
    repo: joi.string().required(),
    archive_format: joi.string().required(),
    ref: joi.string().required(),
  })
  .required()

router.get(
  "reposDownloadArchive",
  "/repos/:owner/:repo/:archiveFormat/:ref",
  paramValidationFactory<ReposDownloadArchiveParamSchema>(
    reposDownloadArchiveParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDownloadArchiveParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDownloadArchive

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDownloadArchive
  }
)

const reposCreateUsingTemplateParamSchema = joi
  .object()
  .keys({
    template_owner: joi.string().required(),
    template_repo: joi.string().required(),
  })
  .required()

const reposCreateUsingTemplateBodySchema = joi
  .object()
  .keys({
    owner: joi.string(),
    name: joi.string().required(),
    description: joi.string(),
    private: joi.boolean(),
  })
  .required()

router.post(
  "reposCreateUsingTemplate",
  "/repos/:templateOwner/:templateRepo/generate",
  paramValidationFactory<ReposCreateUsingTemplateParamSchema>(
    reposCreateUsingTemplateParamSchema
  ),
  bodyValidationFactory<ReposCreateUsingTemplateBodySchema>(
    reposCreateUsingTemplateBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposCreateUsingTemplateParamSchema,
      void,
      ReposCreateUsingTemplateBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reposCreateUsingTemplate

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateUsingTemplate
  }
)

const reposListPublicQuerySchema = joi
  .object()
  .keys({ since: joi.number() })
  .required()

router.get(
  "reposListPublic",
  "/repositories",
  queryValidationFactory<ReposListPublicQuerySchema>(
    reposListPublicQuerySchema
  ),
  async (ctx: ValidatedCtx<void, ReposListPublicQuerySchema, void>, next) => {
    //region safe-edit-region-reposListPublic

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListPublic
  }
)

const scimListProvisionedIdentitiesParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const scimListProvisionedIdentitiesQuerySchema = joi
  .object()
  .keys({ startIndex: joi.number(), count: joi.number(), filter: joi.string() })
  .required()

router.get(
  "scimListProvisionedIdentities",
  "/scim/v2/organizations/:org/Users",
  paramValidationFactory<ScimListProvisionedIdentitiesParamSchema>(
    scimListProvisionedIdentitiesParamSchema
  ),
  queryValidationFactory<ScimListProvisionedIdentitiesQuerySchema>(
    scimListProvisionedIdentitiesQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ScimListProvisionedIdentitiesParamSchema,
      ScimListProvisionedIdentitiesQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-scimListProvisionedIdentities

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimListProvisionedIdentities
  }
)

const scimProvisionAndInviteUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.post(
  "scimProvisionAndInviteUser",
  "/scim/v2/organizations/:org/Users",
  paramValidationFactory<ScimProvisionAndInviteUserParamSchema>(
    scimProvisionAndInviteUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<ScimProvisionAndInviteUserParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-scimProvisionAndInviteUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimProvisionAndInviteUser
  }
)

const scimGetProvisioningInformationForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), scim_user_id: joi.number().required() })
  .required()

router.get(
  "scimGetProvisioningInformationForUser",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  paramValidationFactory<ScimGetProvisioningInformationForUserParamSchema>(
    scimGetProvisioningInformationForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ScimGetProvisioningInformationForUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-scimGetProvisioningInformationForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimGetProvisioningInformationForUser
  }
)

const scimSetInformationForProvisionedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), scim_user_id: joi.number().required() })
  .required()

router.put(
  "scimSetInformationForProvisionedUser",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  paramValidationFactory<ScimSetInformationForProvisionedUserParamSchema>(
    scimSetInformationForProvisionedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ScimSetInformationForProvisionedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-scimSetInformationForProvisionedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimSetInformationForProvisionedUser
  }
)

const scimUpdateAttributeForUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), scim_user_id: joi.number().required() })
  .required()

router.patch(
  "scimUpdateAttributeForUser",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  paramValidationFactory<ScimUpdateAttributeForUserParamSchema>(
    scimUpdateAttributeForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<ScimUpdateAttributeForUserParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-scimUpdateAttributeForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimUpdateAttributeForUser
  }
)

const scimDeleteUserFromOrgParamSchema = joi
  .object()
  .keys({ org: joi.string().required(), scim_user_id: joi.number().required() })
  .required()

router.delete(
  "scimDeleteUserFromOrg",
  "/scim/v2/organizations/:org/Users/:scimUserId",
  paramValidationFactory<ScimDeleteUserFromOrgParamSchema>(
    scimDeleteUserFromOrgParamSchema
  ),
  async (
    ctx: ValidatedCtx<ScimDeleteUserFromOrgParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-scimDeleteUserFromOrg

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-scimDeleteUserFromOrg
  }
)

const searchCodeQuerySchema = joi
  .object()
  .keys({
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "searchCode",
  "/search/code",
  queryValidationFactory<SearchCodeQuerySchema>(searchCodeQuerySchema),
  async (ctx: ValidatedCtx<void, SearchCodeQuerySchema, void>, next) => {
    //region safe-edit-region-searchCode

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchCode
  }
)

const searchCommitsQuerySchema = joi
  .object()
  .keys({
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "searchCommits",
  "/search/commits",
  queryValidationFactory<SearchCommitsQuerySchema>(searchCommitsQuerySchema),
  async (ctx: ValidatedCtx<void, SearchCommitsQuerySchema, void>, next) => {
    //region safe-edit-region-searchCommits

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchCommits
  }
)

const searchIssuesAndPullRequestsQuerySchema = joi
  .object()
  .keys({
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "searchIssuesAndPullRequests",
  "/search/issues",
  queryValidationFactory<SearchIssuesAndPullRequestsQuerySchema>(
    searchIssuesAndPullRequestsQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, SearchIssuesAndPullRequestsQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-searchIssuesAndPullRequests

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchIssuesAndPullRequests
  }
)

const searchLabelsQuerySchema = joi
  .object()
  .keys({
    repository_id: joi.number().required(),
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
  })
  .required()

router.get(
  "searchLabels",
  "/search/labels",
  queryValidationFactory<SearchLabelsQuerySchema>(searchLabelsQuerySchema),
  async (ctx: ValidatedCtx<void, SearchLabelsQuerySchema, void>, next) => {
    //region safe-edit-region-searchLabels

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchLabels
  }
)

const searchReposQuerySchema = joi
  .object()
  .keys({
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "searchRepos",
  "/search/repositories",
  queryValidationFactory<SearchReposQuerySchema>(searchReposQuerySchema),
  async (ctx: ValidatedCtx<void, SearchReposQuerySchema, void>, next) => {
    //region safe-edit-region-searchRepos

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchRepos
  }
)

const searchTopicsQuerySchema = joi
  .object()
  .keys({ q: joi.string().required() })
  .required()

router.get(
  "searchTopics",
  "/search/topics",
  queryValidationFactory<SearchTopicsQuerySchema>(searchTopicsQuerySchema),
  async (ctx: ValidatedCtx<void, SearchTopicsQuerySchema, void>, next) => {
    //region safe-edit-region-searchTopics

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchTopics
  }
)

const searchUsersQuerySchema = joi
  .object()
  .keys({
    q: joi.string().required(),
    sort: joi.string(),
    order: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "searchUsers",
  "/search/users",
  queryValidationFactory<SearchUsersQuerySchema>(searchUsersQuerySchema),
  async (ctx: ValidatedCtx<void, SearchUsersQuerySchema, void>, next) => {
    //region safe-edit-region-searchUsers

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-searchUsers
  }
)

const teamsGetLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

router.get(
  "teamsGetLegacy",
  "/teams/:teamId",
  paramValidationFactory<TeamsGetLegacyParamSchema>(teamsGetLegacyParamSchema),
  async (ctx: ValidatedCtx<TeamsGetLegacyParamSchema, void, void>, next) => {
    //region safe-edit-region-teamsGetLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetLegacy
  }
)

const teamsUpdateLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

const teamsUpdateLegacyBodySchema = joi
  .object()
  .keys({
    name: joi.string().required(),
    description: joi.string(),
    privacy: joi.string(),
    permission: joi.string(),
    parent_team_id: joi.number(),
  })
  .required()

router.patch(
  "teamsUpdateLegacy",
  "/teams/:teamId",
  paramValidationFactory<TeamsUpdateLegacyParamSchema>(
    teamsUpdateLegacyParamSchema
  ),
  bodyValidationFactory<TeamsUpdateLegacyBodySchema>(
    teamsUpdateLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsUpdateLegacyParamSchema,
      void,
      TeamsUpdateLegacyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsUpdateLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateLegacy
  }
)

const teamsDeleteLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

router.delete(
  "teamsDeleteLegacy",
  "/teams/:teamId",
  paramValidationFactory<TeamsDeleteLegacyParamSchema>(
    teamsDeleteLegacyParamSchema
  ),
  async (ctx: ValidatedCtx<TeamsDeleteLegacyParamSchema, void, void>, next) => {
    //region safe-edit-region-teamsDeleteLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteLegacy
  }
)

const teamsListDiscussionsLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

const teamsListDiscussionsLegacyQuerySchema = joi
  .object()
  .keys({ direction: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListDiscussionsLegacy",
  "/teams/:teamId/discussions",
  paramValidationFactory<TeamsListDiscussionsLegacyParamSchema>(
    teamsListDiscussionsLegacyParamSchema
  ),
  queryValidationFactory<TeamsListDiscussionsLegacyQuerySchema>(
    teamsListDiscussionsLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListDiscussionsLegacyParamSchema,
      TeamsListDiscussionsLegacyQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListDiscussionsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionsLegacy
  }
)

const teamsCreateDiscussionLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

const teamsCreateDiscussionLegacyBodySchema = joi
  .object()
  .keys({
    title: joi.string().required(),
    body: joi.string().required(),
    private: joi.boolean(),
  })
  .required()

router.post(
  "teamsCreateDiscussionLegacy",
  "/teams/:teamId/discussions",
  paramValidationFactory<TeamsCreateDiscussionLegacyParamSchema>(
    teamsCreateDiscussionLegacyParamSchema
  ),
  bodyValidationFactory<TeamsCreateDiscussionLegacyBodySchema>(
    teamsCreateDiscussionLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsCreateDiscussionLegacyParamSchema,
      void,
      TeamsCreateDiscussionLegacyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsCreateDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionLegacy
  }
)

const teamsGetDiscussionLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })
  .required()

router.get(
  "teamsGetDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  paramValidationFactory<TeamsGetDiscussionLegacyParamSchema>(
    teamsGetDiscussionLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsGetDiscussionLegacyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsGetDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionLegacy
  }
)

const teamsUpdateDiscussionLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })
  .required()

const teamsUpdateDiscussionLegacyBodySchema = joi
  .object()
  .keys({ title: joi.string(), body: joi.string() })
  .required()

router.patch(
  "teamsUpdateDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  paramValidationFactory<TeamsUpdateDiscussionLegacyParamSchema>(
    teamsUpdateDiscussionLegacyParamSchema
  ),
  bodyValidationFactory<TeamsUpdateDiscussionLegacyBodySchema>(
    teamsUpdateDiscussionLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsUpdateDiscussionLegacyParamSchema,
      void,
      TeamsUpdateDiscussionLegacyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsUpdateDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionLegacy
  }
)

const teamsDeleteDiscussionLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })
  .required()

router.delete(
  "teamsDeleteDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber",
  paramValidationFactory<TeamsDeleteDiscussionLegacyParamSchema>(
    teamsDeleteDiscussionLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsDeleteDiscussionLegacyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsDeleteDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionLegacy
  }
)

const teamsListDiscussionCommentsLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })
  .required()

const teamsListDiscussionCommentsLegacyQuerySchema = joi
  .object()
  .keys({ direction: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListDiscussionCommentsLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments",
  paramValidationFactory<TeamsListDiscussionCommentsLegacyParamSchema>(
    teamsListDiscussionCommentsLegacyParamSchema
  ),
  queryValidationFactory<TeamsListDiscussionCommentsLegacyQuerySchema>(
    teamsListDiscussionCommentsLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListDiscussionCommentsLegacyParamSchema,
      TeamsListDiscussionCommentsLegacyQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListDiscussionCommentsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListDiscussionCommentsLegacy
  }
)

const teamsCreateDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })
  .required()

const teamsCreateDiscussionCommentLegacyBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.post(
  "teamsCreateDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments",
  paramValidationFactory<TeamsCreateDiscussionCommentLegacyParamSchema>(
    teamsCreateDiscussionCommentLegacyParamSchema
  ),
  bodyValidationFactory<TeamsCreateDiscussionCommentLegacyBodySchema>(
    teamsCreateDiscussionCommentLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsCreateDiscussionCommentLegacyParamSchema,
      void,
      TeamsCreateDiscussionCommentLegacyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsCreateDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateDiscussionCommentLegacy
  }
)

const teamsGetDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })
  .required()

router.get(
  "teamsGetDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<TeamsGetDiscussionCommentLegacyParamSchema>(
    teamsGetDiscussionCommentLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsGetDiscussionCommentLegacyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsGetDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetDiscussionCommentLegacy
  }
)

const teamsUpdateDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })
  .required()

const teamsUpdateDiscussionCommentLegacyBodySchema = joi
  .object()
  .keys({ body: joi.string().required() })
  .required()

router.patch(
  "teamsUpdateDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<TeamsUpdateDiscussionCommentLegacyParamSchema>(
    teamsUpdateDiscussionCommentLegacyParamSchema
  ),
  bodyValidationFactory<TeamsUpdateDiscussionCommentLegacyBodySchema>(
    teamsUpdateDiscussionCommentLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsUpdateDiscussionCommentLegacyParamSchema,
      void,
      TeamsUpdateDiscussionCommentLegacyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsUpdateDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsUpdateDiscussionCommentLegacy
  }
)

const teamsDeleteDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })
  .required()

router.delete(
  "teamsDeleteDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber",
  paramValidationFactory<TeamsDeleteDiscussionCommentLegacyParamSchema>(
    teamsDeleteDiscussionCommentLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsDeleteDiscussionCommentLegacyParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsDeleteDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsDeleteDiscussionCommentLegacy
  }
)

const reactionsListForTeamDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })
  .required()

const reactionsListForTeamDiscussionCommentLegacyQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reactionsListForTeamDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<ReactionsListForTeamDiscussionCommentLegacyParamSchema>(
    reactionsListForTeamDiscussionCommentLegacyParamSchema
  ),
  queryValidationFactory<ReactionsListForTeamDiscussionCommentLegacyQuerySchema>(
    reactionsListForTeamDiscussionCommentLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsListForTeamDiscussionCommentLegacyParamSchema,
      ReactionsListForTeamDiscussionCommentLegacyQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reactionsListForTeamDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionCommentLegacy
  }
)

const reactionsCreateForTeamDiscussionCommentLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
    comment_number: joi.number().required(),
  })
  .required()

const reactionsCreateForTeamDiscussionCommentLegacyBodySchema = joi
  .object()
  .keys({ content: joi.string().required() })
  .required()

router.post(
  "reactionsCreateForTeamDiscussionCommentLegacy",
  "/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions",
  paramValidationFactory<ReactionsCreateForTeamDiscussionCommentLegacyParamSchema>(
    reactionsCreateForTeamDiscussionCommentLegacyParamSchema
  ),
  bodyValidationFactory<ReactionsCreateForTeamDiscussionCommentLegacyBodySchema>(
    reactionsCreateForTeamDiscussionCommentLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsCreateForTeamDiscussionCommentLegacyParamSchema,
      void,
      ReactionsCreateForTeamDiscussionCommentLegacyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionCommentLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionCommentLegacy
  }
)

const reactionsListForTeamDiscussionLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })
  .required()

const reactionsListForTeamDiscussionLegacyQuerySchema = joi
  .object()
  .keys({ content: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reactionsListForTeamDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber/reactions",
  paramValidationFactory<ReactionsListForTeamDiscussionLegacyParamSchema>(
    reactionsListForTeamDiscussionLegacyParamSchema
  ),
  queryValidationFactory<ReactionsListForTeamDiscussionLegacyQuerySchema>(
    reactionsListForTeamDiscussionLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsListForTeamDiscussionLegacyParamSchema,
      ReactionsListForTeamDiscussionLegacyQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reactionsListForTeamDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsListForTeamDiscussionLegacy
  }
)

const reactionsCreateForTeamDiscussionLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    discussion_number: joi.number().required(),
  })
  .required()

const reactionsCreateForTeamDiscussionLegacyBodySchema = joi
  .object()
  .keys({ content: joi.string().required() })
  .required()

router.post(
  "reactionsCreateForTeamDiscussionLegacy",
  "/teams/:teamId/discussions/:discussionNumber/reactions",
  paramValidationFactory<ReactionsCreateForTeamDiscussionLegacyParamSchema>(
    reactionsCreateForTeamDiscussionLegacyParamSchema
  ),
  bodyValidationFactory<ReactionsCreateForTeamDiscussionLegacyBodySchema>(
    reactionsCreateForTeamDiscussionLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReactionsCreateForTeamDiscussionLegacyParamSchema,
      void,
      ReactionsCreateForTeamDiscussionLegacyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-reactionsCreateForTeamDiscussionLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reactionsCreateForTeamDiscussionLegacy
  }
)

const teamsListPendingInvitationsLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

const teamsListPendingInvitationsLegacyQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListPendingInvitationsLegacy",
  "/teams/:teamId/invitations",
  paramValidationFactory<TeamsListPendingInvitationsLegacyParamSchema>(
    teamsListPendingInvitationsLegacyParamSchema
  ),
  queryValidationFactory<TeamsListPendingInvitationsLegacyQuerySchema>(
    teamsListPendingInvitationsLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListPendingInvitationsLegacyParamSchema,
      TeamsListPendingInvitationsLegacyQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListPendingInvitationsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListPendingInvitationsLegacy
  }
)

const teamsListMembersLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

const teamsListMembersLegacyQuerySchema = joi
  .object()
  .keys({ role: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListMembersLegacy",
  "/teams/:teamId/members",
  paramValidationFactory<TeamsListMembersLegacyParamSchema>(
    teamsListMembersLegacyParamSchema
  ),
  queryValidationFactory<TeamsListMembersLegacyQuerySchema>(
    teamsListMembersLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListMembersLegacyParamSchema,
      TeamsListMembersLegacyQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListMembersLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListMembersLegacy
  }
)

const teamsGetMemberLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })
  .required()

router.get(
  "teamsGetMemberLegacy",
  "/teams/:teamId/members/:username",
  paramValidationFactory<TeamsGetMemberLegacyParamSchema>(
    teamsGetMemberLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsGetMemberLegacyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsGetMemberLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetMemberLegacy
  }
)

const teamsAddMemberLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })
  .required()

router.put(
  "teamsAddMemberLegacy",
  "/teams/:teamId/members/:username",
  paramValidationFactory<TeamsAddMemberLegacyParamSchema>(
    teamsAddMemberLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsAddMemberLegacyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsAddMemberLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddMemberLegacy
  }
)

const teamsRemoveMemberLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })
  .required()

router.delete(
  "teamsRemoveMemberLegacy",
  "/teams/:teamId/members/:username",
  paramValidationFactory<TeamsRemoveMemberLegacyParamSchema>(
    teamsRemoveMemberLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsRemoveMemberLegacyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsRemoveMemberLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveMemberLegacy
  }
)

const teamsGetMembershipForUserLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })
  .required()

router.get(
  "teamsGetMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  paramValidationFactory<TeamsGetMembershipForUserLegacyParamSchema>(
    teamsGetMembershipForUserLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsGetMembershipForUserLegacyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsGetMembershipForUserLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsGetMembershipForUserLegacy
  }
)

const teamsAddOrUpdateMembershipForUserLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })
  .required()

const teamsAddOrUpdateMembershipForUserLegacyBodySchema = joi
  .object()
  .keys({ role: joi.string() })
  .required()

router.put(
  "teamsAddOrUpdateMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  paramValidationFactory<TeamsAddOrUpdateMembershipForUserLegacyParamSchema>(
    teamsAddOrUpdateMembershipForUserLegacyParamSchema
  ),
  bodyValidationFactory<TeamsAddOrUpdateMembershipForUserLegacyBodySchema>(
    teamsAddOrUpdateMembershipForUserLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsAddOrUpdateMembershipForUserLegacyParamSchema,
      void,
      TeamsAddOrUpdateMembershipForUserLegacyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateMembershipForUserLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateMembershipForUserLegacy
  }
)

const teamsRemoveMembershipForUserLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required(), username: joi.string().required() })
  .required()

router.delete(
  "teamsRemoveMembershipForUserLegacy",
  "/teams/:teamId/memberships/:username",
  paramValidationFactory<TeamsRemoveMembershipForUserLegacyParamSchema>(
    teamsRemoveMembershipForUserLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsRemoveMembershipForUserLegacyParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsRemoveMembershipForUserLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveMembershipForUserLegacy
  }
)

const teamsListProjectsLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

const teamsListProjectsLegacyQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListProjectsLegacy",
  "/teams/:teamId/projects",
  paramValidationFactory<TeamsListProjectsLegacyParamSchema>(
    teamsListProjectsLegacyParamSchema
  ),
  queryValidationFactory<TeamsListProjectsLegacyQuerySchema>(
    teamsListProjectsLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListProjectsLegacyParamSchema,
      TeamsListProjectsLegacyQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListProjectsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListProjectsLegacy
  }
)

const teamsCheckPermissionsForProjectLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    project_id: joi.number().required(),
  })
  .required()

router.get(
  "teamsCheckPermissionsForProjectLegacy",
  "/teams/:teamId/projects/:projectId",
  paramValidationFactory<TeamsCheckPermissionsForProjectLegacyParamSchema>(
    teamsCheckPermissionsForProjectLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsCheckPermissionsForProjectLegacyParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsCheckPermissionsForProjectLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForProjectLegacy
  }
)

const teamsAddOrUpdateProjectPermissionsLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    project_id: joi.number().required(),
  })
  .required()

const teamsAddOrUpdateProjectPermissionsLegacyBodySchema = joi
  .object()
  .keys({ permission: joi.string() })
  .required()

router.put(
  "teamsAddOrUpdateProjectPermissionsLegacy",
  "/teams/:teamId/projects/:projectId",
  paramValidationFactory<TeamsAddOrUpdateProjectPermissionsLegacyParamSchema>(
    teamsAddOrUpdateProjectPermissionsLegacyParamSchema
  ),
  bodyValidationFactory<TeamsAddOrUpdateProjectPermissionsLegacyBodySchema>(
    teamsAddOrUpdateProjectPermissionsLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsAddOrUpdateProjectPermissionsLegacyParamSchema,
      void,
      TeamsAddOrUpdateProjectPermissionsLegacyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateProjectPermissionsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateProjectPermissionsLegacy
  }
)

const teamsRemoveProjectLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    project_id: joi.number().required(),
  })
  .required()

router.delete(
  "teamsRemoveProjectLegacy",
  "/teams/:teamId/projects/:projectId",
  paramValidationFactory<TeamsRemoveProjectLegacyParamSchema>(
    teamsRemoveProjectLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsRemoveProjectLegacyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsRemoveProjectLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveProjectLegacy
  }
)

const teamsListReposLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

const teamsListReposLegacyQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListReposLegacy",
  "/teams/:teamId/repos",
  paramValidationFactory<TeamsListReposLegacyParamSchema>(
    teamsListReposLegacyParamSchema
  ),
  queryValidationFactory<TeamsListReposLegacyQuerySchema>(
    teamsListReposLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListReposLegacyParamSchema,
      TeamsListReposLegacyQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListReposLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListReposLegacy
  }
)

const teamsCheckPermissionsForRepoLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })
  .required()

router.get(
  "teamsCheckPermissionsForRepoLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  paramValidationFactory<TeamsCheckPermissionsForRepoLegacyParamSchema>(
    teamsCheckPermissionsForRepoLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsCheckPermissionsForRepoLegacyParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsCheckPermissionsForRepoLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCheckPermissionsForRepoLegacy
  }
)

const teamsAddOrUpdateRepoPermissionsLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })
  .required()

const teamsAddOrUpdateRepoPermissionsLegacyBodySchema = joi
  .object()
  .keys({ permission: joi.string() })
  .required()

router.put(
  "teamsAddOrUpdateRepoPermissionsLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  paramValidationFactory<TeamsAddOrUpdateRepoPermissionsLegacyParamSchema>(
    teamsAddOrUpdateRepoPermissionsLegacyParamSchema
  ),
  bodyValidationFactory<TeamsAddOrUpdateRepoPermissionsLegacyBodySchema>(
    teamsAddOrUpdateRepoPermissionsLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsAddOrUpdateRepoPermissionsLegacyParamSchema,
      void,
      TeamsAddOrUpdateRepoPermissionsLegacyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsAddOrUpdateRepoPermissionsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsAddOrUpdateRepoPermissionsLegacy
  }
)

const teamsRemoveRepoLegacyParamSchema = joi
  .object()
  .keys({
    team_id: joi.number().required(),
    owner: joi.string().required(),
    repo: joi.string().required(),
  })
  .required()

router.delete(
  "teamsRemoveRepoLegacy",
  "/teams/:teamId/repos/:owner/:repo",
  paramValidationFactory<TeamsRemoveRepoLegacyParamSchema>(
    teamsRemoveRepoLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsRemoveRepoLegacyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsRemoveRepoLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsRemoveRepoLegacy
  }
)

const teamsListIdPGroupsForLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

router.get(
  "teamsListIdPGroupsForLegacy",
  "/teams/:teamId/team-sync/group-mappings",
  paramValidationFactory<TeamsListIdPGroupsForLegacyParamSchema>(
    teamsListIdPGroupsForLegacyParamSchema
  ),
  async (
    ctx: ValidatedCtx<TeamsListIdPGroupsForLegacyParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-teamsListIdPGroupsForLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListIdPGroupsForLegacy
  }
)

const teamsCreateOrUpdateIdPGroupConnectionsLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

const teamsCreateOrUpdateIdPGroupConnectionsLegacyBodySchema = joi
  .object()
  .keys({
    groups: joi
      .array()
      .items(
        joi
          .object()
          .keys({
            group_id: joi.string().required(),
            group_name: joi.string().required(),
            group_description: joi.string().required(),
          })
      )
      .required(),
  })
  .required()

router.patch(
  "teamsCreateOrUpdateIdPGroupConnectionsLegacy",
  "/teams/:teamId/team-sync/group-mappings",
  paramValidationFactory<TeamsCreateOrUpdateIdPGroupConnectionsLegacyParamSchema>(
    teamsCreateOrUpdateIdPGroupConnectionsLegacyParamSchema
  ),
  bodyValidationFactory<TeamsCreateOrUpdateIdPGroupConnectionsLegacyBodySchema>(
    teamsCreateOrUpdateIdPGroupConnectionsLegacyBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsCreateOrUpdateIdPGroupConnectionsLegacyParamSchema,
      void,
      TeamsCreateOrUpdateIdPGroupConnectionsLegacyBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-teamsCreateOrUpdateIdPGroupConnectionsLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsCreateOrUpdateIdPGroupConnectionsLegacy
  }
)

const teamsListChildLegacyParamSchema = joi
  .object()
  .keys({ team_id: joi.number().required() })
  .required()

const teamsListChildLegacyQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListChildLegacy",
  "/teams/:teamId/teams",
  paramValidationFactory<TeamsListChildLegacyParamSchema>(
    teamsListChildLegacyParamSchema
  ),
  queryValidationFactory<TeamsListChildLegacyQuerySchema>(
    teamsListChildLegacyQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      TeamsListChildLegacyParamSchema,
      TeamsListChildLegacyQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-teamsListChildLegacy

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListChildLegacy
  }
)

router.get(
  "usersGetAuthenticated",
  "/user",
  async (ctx: ValidatedCtx<void, void, void>, next) => {
    //region safe-edit-region-usersGetAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetAuthenticated
  }
)

const usersUpdateAuthenticatedBodySchema = joi
  .object()
  .keys({
    name: joi.string(),
    email: joi.string(),
    blog: joi.string(),
    company: joi.string(),
    location: joi.string(),
    hireable: joi.boolean(),
    bio: joi.string(),
    twitter_username: joi.string(),
  })
  .required()

router.patch(
  "usersUpdateAuthenticated",
  "/user",
  bodyValidationFactory<UsersUpdateAuthenticatedBodySchema>(
    usersUpdateAuthenticatedBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, UsersUpdateAuthenticatedBodySchema>,
    next
  ) => {
    //region safe-edit-region-usersUpdateAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersUpdateAuthenticated
  }
)

router.get(
  "usersListBlockedByAuthenticated",
  "/user/blocks",
  async (ctx: ValidatedCtx<void, void, void>, next) => {
    //region safe-edit-region-usersListBlockedByAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListBlockedByAuthenticated
  }
)

const usersCheckBlockedParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

router.get(
  "usersCheckBlocked",
  "/user/blocks/:username",
  paramValidationFactory<UsersCheckBlockedParamSchema>(
    usersCheckBlockedParamSchema
  ),
  async (ctx: ValidatedCtx<UsersCheckBlockedParamSchema, void, void>, next) => {
    //region safe-edit-region-usersCheckBlocked

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCheckBlocked
  }
)

const usersBlockParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

router.put(
  "usersBlock",
  "/user/blocks/:username",
  paramValidationFactory<UsersBlockParamSchema>(usersBlockParamSchema),
  async (ctx: ValidatedCtx<UsersBlockParamSchema, void, void>, next) => {
    //region safe-edit-region-usersBlock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersBlock
  }
)

const usersUnblockParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

router.delete(
  "usersUnblock",
  "/user/blocks/:username",
  paramValidationFactory<UsersUnblockParamSchema>(usersUnblockParamSchema),
  async (ctx: ValidatedCtx<UsersUnblockParamSchema, void, void>, next) => {
    //region safe-edit-region-usersUnblock

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersUnblock
  }
)

const usersSetPrimaryEmailVisibilityForAuthenticatedBodySchema = joi
  .object()
  .keys({ email: joi.string().required(), visibility: joi.string().required() })
  .required()

router.patch(
  "usersSetPrimaryEmailVisibilityForAuthenticated",
  "/user/email/visibility",
  bodyValidationFactory<UsersSetPrimaryEmailVisibilityForAuthenticatedBodySchema>(
    usersSetPrimaryEmailVisibilityForAuthenticatedBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      UsersSetPrimaryEmailVisibilityForAuthenticatedBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-usersSetPrimaryEmailVisibilityForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersSetPrimaryEmailVisibilityForAuthenticated
  }
)

const usersListEmailsForAuthenticatedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "usersListEmailsForAuthenticated",
  "/user/emails",
  queryValidationFactory<UsersListEmailsForAuthenticatedQuerySchema>(
    usersListEmailsForAuthenticatedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, UsersListEmailsForAuthenticatedQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-usersListEmailsForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListEmailsForAuthenticated
  }
)

const usersAddEmailForAuthenticatedBodySchema = joi
  .object()
  .keys({ emails: joi.array().items(joi.string()).required() })
  .required()

router.post(
  "usersAddEmailForAuthenticated",
  "/user/emails",
  bodyValidationFactory<UsersAddEmailForAuthenticatedBodySchema>(
    usersAddEmailForAuthenticatedBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, UsersAddEmailForAuthenticatedBodySchema>,
    next
  ) => {
    //region safe-edit-region-usersAddEmailForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersAddEmailForAuthenticated
  }
)

const usersDeleteEmailForAuthenticatedBodySchema = joi
  .object()
  .keys({ emails: joi.array().items(joi.string()).required() })
  .required()

router.delete(
  "usersDeleteEmailForAuthenticated",
  "/user/emails",
  bodyValidationFactory<UsersDeleteEmailForAuthenticatedBodySchema>(
    usersDeleteEmailForAuthenticatedBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, UsersDeleteEmailForAuthenticatedBodySchema>,
    next
  ) => {
    //region safe-edit-region-usersDeleteEmailForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersDeleteEmailForAuthenticated
  }
)

const usersListFollowersForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "usersListFollowersForAuthenticatedUser",
  "/user/followers",
  queryValidationFactory<UsersListFollowersForAuthenticatedUserQuerySchema>(
    usersListFollowersForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      UsersListFollowersForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-usersListFollowersForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowersForAuthenticatedUser
  }
)

const usersListFollowedByAuthenticatedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "usersListFollowedByAuthenticated",
  "/user/following",
  queryValidationFactory<UsersListFollowedByAuthenticatedQuerySchema>(
    usersListFollowedByAuthenticatedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, UsersListFollowedByAuthenticatedQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-usersListFollowedByAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowedByAuthenticated
  }
)

const usersCheckPersonIsFollowedByAuthenticatedParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

router.get(
  "usersCheckPersonIsFollowedByAuthenticated",
  "/user/following/:username",
  paramValidationFactory<UsersCheckPersonIsFollowedByAuthenticatedParamSchema>(
    usersCheckPersonIsFollowedByAuthenticatedParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      UsersCheckPersonIsFollowedByAuthenticatedParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-usersCheckPersonIsFollowedByAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCheckPersonIsFollowedByAuthenticated
  }
)

const usersFollowParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

router.put(
  "usersFollow",
  "/user/following/:username",
  paramValidationFactory<UsersFollowParamSchema>(usersFollowParamSchema),
  async (ctx: ValidatedCtx<UsersFollowParamSchema, void, void>, next) => {
    //region safe-edit-region-usersFollow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersFollow
  }
)

const usersUnfollowParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

router.delete(
  "usersUnfollow",
  "/user/following/:username",
  paramValidationFactory<UsersUnfollowParamSchema>(usersUnfollowParamSchema),
  async (ctx: ValidatedCtx<UsersUnfollowParamSchema, void, void>, next) => {
    //region safe-edit-region-usersUnfollow

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersUnfollow
  }
)

const usersListGpgKeysForAuthenticatedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "usersListGpgKeysForAuthenticated",
  "/user/gpg_keys",
  queryValidationFactory<UsersListGpgKeysForAuthenticatedQuerySchema>(
    usersListGpgKeysForAuthenticatedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, UsersListGpgKeysForAuthenticatedQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-usersListGpgKeysForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListGpgKeysForAuthenticated
  }
)

const usersCreateGpgKeyForAuthenticatedBodySchema = joi
  .object()
  .keys({ armored_public_key: joi.string() })
  .required()

router.post(
  "usersCreateGpgKeyForAuthenticated",
  "/user/gpg_keys",
  bodyValidationFactory<UsersCreateGpgKeyForAuthenticatedBodySchema>(
    usersCreateGpgKeyForAuthenticatedBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, UsersCreateGpgKeyForAuthenticatedBodySchema>,
    next
  ) => {
    //region safe-edit-region-usersCreateGpgKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCreateGpgKeyForAuthenticated
  }
)

const usersGetGpgKeyForAuthenticatedParamSchema = joi
  .object()
  .keys({ gpg_key_id: joi.number().required() })
  .required()

router.get(
  "usersGetGpgKeyForAuthenticated",
  "/user/gpg_keys/:gpgKeyId",
  paramValidationFactory<UsersGetGpgKeyForAuthenticatedParamSchema>(
    usersGetGpgKeyForAuthenticatedParamSchema
  ),
  async (
    ctx: ValidatedCtx<UsersGetGpgKeyForAuthenticatedParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-usersGetGpgKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetGpgKeyForAuthenticated
  }
)

const usersDeleteGpgKeyForAuthenticatedParamSchema = joi
  .object()
  .keys({ gpg_key_id: joi.number().required() })
  .required()

router.delete(
  "usersDeleteGpgKeyForAuthenticated",
  "/user/gpg_keys/:gpgKeyId",
  paramValidationFactory<UsersDeleteGpgKeyForAuthenticatedParamSchema>(
    usersDeleteGpgKeyForAuthenticatedParamSchema
  ),
  async (
    ctx: ValidatedCtx<UsersDeleteGpgKeyForAuthenticatedParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-usersDeleteGpgKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersDeleteGpgKeyForAuthenticated
  }
)

const appsListInstallationsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "appsListInstallationsForAuthenticatedUser",
  "/user/installations",
  queryValidationFactory<AppsListInstallationsForAuthenticatedUserQuerySchema>(
    appsListInstallationsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      AppsListInstallationsForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-appsListInstallationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListInstallationsForAuthenticatedUser
  }
)

const appsListInstallationReposForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ installation_id: joi.number().required() })
  .required()

const appsListInstallationReposForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "appsListInstallationReposForAuthenticatedUser",
  "/user/installations/:installationId/repositories",
  paramValidationFactory<AppsListInstallationReposForAuthenticatedUserParamSchema>(
    appsListInstallationReposForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<AppsListInstallationReposForAuthenticatedUserQuerySchema>(
    appsListInstallationReposForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      AppsListInstallationReposForAuthenticatedUserParamSchema,
      AppsListInstallationReposForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-appsListInstallationReposForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListInstallationReposForAuthenticatedUser
  }
)

const appsAddRepoToInstallationParamSchema = joi
  .object()
  .keys({
    installation_id: joi.number().required(),
    repository_id: joi.number().required(),
  })
  .required()

router.put(
  "appsAddRepoToInstallation",
  "/user/installations/:installationId/repositories/:repositoryId",
  paramValidationFactory<AppsAddRepoToInstallationParamSchema>(
    appsAddRepoToInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsAddRepoToInstallationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsAddRepoToInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsAddRepoToInstallation
  }
)

const appsRemoveRepoFromInstallationParamSchema = joi
  .object()
  .keys({
    installation_id: joi.number().required(),
    repository_id: joi.number().required(),
  })
  .required()

router.delete(
  "appsRemoveRepoFromInstallation",
  "/user/installations/:installationId/repositories/:repositoryId",
  paramValidationFactory<AppsRemoveRepoFromInstallationParamSchema>(
    appsRemoveRepoFromInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsRemoveRepoFromInstallationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsRemoveRepoFromInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsRemoveRepoFromInstallation
  }
)

const issuesListForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({
    filter: joi.string(),
    state: joi.string(),
    labels: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    since: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "issuesListForAuthenticatedUser",
  "/user/issues",
  queryValidationFactory<IssuesListForAuthenticatedUserQuerySchema>(
    issuesListForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, IssuesListForAuthenticatedUserQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-issuesListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-issuesListForAuthenticatedUser
  }
)

const usersListPublicSshKeysForAuthenticatedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "usersListPublicSshKeysForAuthenticated",
  "/user/keys",
  queryValidationFactory<UsersListPublicSshKeysForAuthenticatedQuerySchema>(
    usersListPublicSshKeysForAuthenticatedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      UsersListPublicSshKeysForAuthenticatedQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-usersListPublicSshKeysForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListPublicSshKeysForAuthenticated
  }
)

const usersCreatePublicSshKeyForAuthenticatedBodySchema = joi
  .object()
  .keys({ title: joi.string(), key: joi.string() })
  .required()

router.post(
  "usersCreatePublicSshKeyForAuthenticated",
  "/user/keys",
  bodyValidationFactory<UsersCreatePublicSshKeyForAuthenticatedBodySchema>(
    usersCreatePublicSshKeyForAuthenticatedBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      UsersCreatePublicSshKeyForAuthenticatedBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-usersCreatePublicSshKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCreatePublicSshKeyForAuthenticated
  }
)

const usersGetPublicSshKeyForAuthenticatedParamSchema = joi
  .object()
  .keys({ key_id: joi.number().required() })
  .required()

router.get(
  "usersGetPublicSshKeyForAuthenticated",
  "/user/keys/:keyId",
  paramValidationFactory<UsersGetPublicSshKeyForAuthenticatedParamSchema>(
    usersGetPublicSshKeyForAuthenticatedParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      UsersGetPublicSshKeyForAuthenticatedParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-usersGetPublicSshKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetPublicSshKeyForAuthenticated
  }
)

const usersDeletePublicSshKeyForAuthenticatedParamSchema = joi
  .object()
  .keys({ key_id: joi.number().required() })
  .required()

router.delete(
  "usersDeletePublicSshKeyForAuthenticated",
  "/user/keys/:keyId",
  paramValidationFactory<UsersDeletePublicSshKeyForAuthenticatedParamSchema>(
    usersDeletePublicSshKeyForAuthenticatedParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      UsersDeletePublicSshKeyForAuthenticatedParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-usersDeletePublicSshKeyForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersDeletePublicSshKeyForAuthenticated
  }
)

const appsListSubscriptionsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "appsListSubscriptionsForAuthenticatedUser",
  "/user/marketplace_purchases",
  queryValidationFactory<AppsListSubscriptionsForAuthenticatedUserQuerySchema>(
    appsListSubscriptionsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      AppsListSubscriptionsForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-appsListSubscriptionsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListSubscriptionsForAuthenticatedUser
  }
)

const appsListSubscriptionsForAuthenticatedUserStubbedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "appsListSubscriptionsForAuthenticatedUserStubbed",
  "/user/marketplace_purchases/stubbed",
  queryValidationFactory<AppsListSubscriptionsForAuthenticatedUserStubbedQuerySchema>(
    appsListSubscriptionsForAuthenticatedUserStubbedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      AppsListSubscriptionsForAuthenticatedUserStubbedQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-appsListSubscriptionsForAuthenticatedUserStubbed

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsListSubscriptionsForAuthenticatedUserStubbed
  }
)

const orgsListMembershipsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ state: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "orgsListMembershipsForAuthenticatedUser",
  "/user/memberships/orgs",
  queryValidationFactory<OrgsListMembershipsForAuthenticatedUserQuerySchema>(
    orgsListMembershipsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      OrgsListMembershipsForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsListMembershipsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListMembershipsForAuthenticatedUser
  }
)

const orgsGetMembershipForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

router.get(
  "orgsGetMembershipForAuthenticatedUser",
  "/user/memberships/orgs/:org",
  paramValidationFactory<OrgsGetMembershipForAuthenticatedUserParamSchema>(
    orgsGetMembershipForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsGetMembershipForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsGetMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsGetMembershipForAuthenticatedUser
  }
)

const orgsUpdateMembershipForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ org: joi.string().required() })
  .required()

const orgsUpdateMembershipForAuthenticatedUserBodySchema = joi
  .object()
  .keys({ state: joi.string().required() })
  .required()

router.patch(
  "orgsUpdateMembershipForAuthenticatedUser",
  "/user/memberships/orgs/:org",
  paramValidationFactory<OrgsUpdateMembershipForAuthenticatedUserParamSchema>(
    orgsUpdateMembershipForAuthenticatedUserParamSchema
  ),
  bodyValidationFactory<OrgsUpdateMembershipForAuthenticatedUserBodySchema>(
    orgsUpdateMembershipForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsUpdateMembershipForAuthenticatedUserParamSchema,
      void,
      OrgsUpdateMembershipForAuthenticatedUserBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-orgsUpdateMembershipForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsUpdateMembershipForAuthenticatedUser
  }
)

const migrationsStartForAuthenticatedUserBodySchema = joi
  .object()
  .keys({
    repositories: joi.array().items(joi.string()).required(),
    lock_repositories: joi.boolean(),
    exclude_attachments: joi.boolean(),
  })
  .required()

router.post(
  "migrationsStartForAuthenticatedUser",
  "/user/migrations",
  bodyValidationFactory<MigrationsStartForAuthenticatedUserBodySchema>(
    migrationsStartForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      void,
      MigrationsStartForAuthenticatedUserBodySchema
    >,
    next
  ) => {
    //region safe-edit-region-migrationsStartForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsStartForAuthenticatedUser
  }
)

const migrationsListForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "migrationsListForAuthenticatedUser",
  "/user/migrations",
  queryValidationFactory<MigrationsListForAuthenticatedUserQuerySchema>(
    migrationsListForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      MigrationsListForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-migrationsListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListForAuthenticatedUser
  }
)

const migrationsGetStatusForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ migration_id: joi.number().required() })
  .required()

router.get(
  "migrationsGetStatusForAuthenticatedUser",
  "/user/migrations/:migrationId",
  paramValidationFactory<MigrationsGetStatusForAuthenticatedUserParamSchema>(
    migrationsGetStatusForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsGetStatusForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-migrationsGetStatusForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetStatusForAuthenticatedUser
  }
)

const migrationsGetArchiveForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ migration_id: joi.number().required() })
  .required()

router.get(
  "migrationsGetArchiveForAuthenticatedUser",
  "/user/migrations/:migrationId/archive",
  paramValidationFactory<MigrationsGetArchiveForAuthenticatedUserParamSchema>(
    migrationsGetArchiveForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsGetArchiveForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-migrationsGetArchiveForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsGetArchiveForAuthenticatedUser
  }
)

const migrationsDeleteArchiveForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ migration_id: joi.number().required() })
  .required()

router.delete(
  "migrationsDeleteArchiveForAuthenticatedUser",
  "/user/migrations/:migrationId/archive",
  paramValidationFactory<MigrationsDeleteArchiveForAuthenticatedUserParamSchema>(
    migrationsDeleteArchiveForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsDeleteArchiveForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-migrationsDeleteArchiveForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsDeleteArchiveForAuthenticatedUser
  }
)

const migrationsUnlockRepoForAuthenticatedUserParamSchema = joi
  .object()
  .keys({
    migration_id: joi.number().required(),
    repo_name: joi.string().required(),
  })
  .required()

router.delete(
  "migrationsUnlockRepoForAuthenticatedUser",
  "/user/migrations/:migrationId/repos/:repoName/lock",
  paramValidationFactory<MigrationsUnlockRepoForAuthenticatedUserParamSchema>(
    migrationsUnlockRepoForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsUnlockRepoForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-migrationsUnlockRepoForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsUnlockRepoForAuthenticatedUser
  }
)

const orgsListForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "orgsListForAuthenticatedUser",
  "/user/orgs",
  queryValidationFactory<OrgsListForAuthenticatedUserQuerySchema>(
    orgsListForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, OrgsListForAuthenticatedUserQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-orgsListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListForAuthenticatedUser
  }
)

const projectsCreateForAuthenticatedUserBodySchema = joi
  .object()
  .keys({ name: joi.string().required(), body: joi.string() })
  .required()

router.post(
  "projectsCreateForAuthenticatedUser",
  "/user/projects",
  bodyValidationFactory<ProjectsCreateForAuthenticatedUserBodySchema>(
    projectsCreateForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, ProjectsCreateForAuthenticatedUserBodySchema>,
    next
  ) => {
    //region safe-edit-region-projectsCreateForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsCreateForAuthenticatedUser
  }
)

const usersListPublicEmailsForAuthenticatedQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "usersListPublicEmailsForAuthenticated",
  "/user/public_emails",
  queryValidationFactory<UsersListPublicEmailsForAuthenticatedQuerySchema>(
    usersListPublicEmailsForAuthenticatedQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      UsersListPublicEmailsForAuthenticatedQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-usersListPublicEmailsForAuthenticated

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListPublicEmailsForAuthenticated
  }
)

const reposListForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({
    visibility: joi.string(),
    affiliation: joi.string(),
    type: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "reposListForAuthenticatedUser",
  "/user/repos",
  queryValidationFactory<ReposListForAuthenticatedUserQuerySchema>(
    reposListForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, ReposListForAuthenticatedUserQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-reposListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForAuthenticatedUser
  }
)

const reposCreateForAuthenticatedUserBodySchema = joi
  .object()
  .keys({
    name: joi.string().required(),
    description: joi.string(),
    homepage: joi.string(),
    private: joi.boolean(),
    visibility: joi.string(),
    has_issues: joi.boolean(),
    has_projects: joi.boolean(),
    has_wiki: joi.boolean(),
    is_template: joi.boolean(),
    team_id: joi.number(),
    auto_init: joi.boolean(),
    gitignore_template: joi.string(),
    license_template: joi.string(),
    allow_squash_merge: joi.boolean(),
    allow_merge_commit: joi.boolean(),
    allow_rebase_merge: joi.boolean(),
    delete_branch_on_merge: joi.boolean(),
  })
  .required()

router.post(
  "reposCreateForAuthenticatedUser",
  "/user/repos",
  bodyValidationFactory<ReposCreateForAuthenticatedUserBodySchema>(
    reposCreateForAuthenticatedUserBodySchema
  ),
  async (
    ctx: ValidatedCtx<void, void, ReposCreateForAuthenticatedUserBodySchema>,
    next
  ) => {
    //region safe-edit-region-reposCreateForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposCreateForAuthenticatedUser
  }
)

const reposListInvitationsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "reposListInvitationsForAuthenticatedUser",
  "/user/repository_invitations",
  queryValidationFactory<ReposListInvitationsForAuthenticatedUserQuerySchema>(
    reposListInvitationsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      ReposListInvitationsForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListInvitationsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListInvitationsForAuthenticatedUser
  }
)

const reposAcceptInvitationParamSchema = joi
  .object()
  .keys({ invitation_id: joi.number().required() })
  .required()

router.patch(
  "reposAcceptInvitation",
  "/user/repository_invitations/:invitationId",
  paramValidationFactory<ReposAcceptInvitationParamSchema>(
    reposAcceptInvitationParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposAcceptInvitationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposAcceptInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposAcceptInvitation
  }
)

const reposDeclineInvitationParamSchema = joi
  .object()
  .keys({ invitation_id: joi.number().required() })
  .required()

router.delete(
  "reposDeclineInvitation",
  "/user/repository_invitations/:invitationId",
  paramValidationFactory<ReposDeclineInvitationParamSchema>(
    reposDeclineInvitationParamSchema
  ),
  async (
    ctx: ValidatedCtx<ReposDeclineInvitationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-reposDeclineInvitation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposDeclineInvitation
  }
)

const activityListReposStarredByAuthenticatedUserQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "activityListReposStarredByAuthenticatedUser",
  "/user/starred",
  queryValidationFactory<ActivityListReposStarredByAuthenticatedUserQuerySchema>(
    activityListReposStarredByAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      ActivityListReposStarredByAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListReposStarredByAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReposStarredByAuthenticatedUser
  }
)

const activityCheckRepoIsStarredByAuthenticatedUserParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.get(
  "activityCheckRepoIsStarredByAuthenticatedUser",
  "/user/starred/:owner/:repo",
  paramValidationFactory<ActivityCheckRepoIsStarredByAuthenticatedUserParamSchema>(
    activityCheckRepoIsStarredByAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityCheckRepoIsStarredByAuthenticatedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityCheckRepoIsStarredByAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityCheckRepoIsStarredByAuthenticatedUser
  }
)

const activityStarRepoForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.put(
  "activityStarRepoForAuthenticatedUser",
  "/user/starred/:owner/:repo",
  paramValidationFactory<ActivityStarRepoForAuthenticatedUserParamSchema>(
    activityStarRepoForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityStarRepoForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityStarRepoForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityStarRepoForAuthenticatedUser
  }
)

const activityUnstarRepoForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ owner: joi.string().required(), repo: joi.string().required() })
  .required()

router.delete(
  "activityUnstarRepoForAuthenticatedUser",
  "/user/starred/:owner/:repo",
  paramValidationFactory<ActivityUnstarRepoForAuthenticatedUserParamSchema>(
    activityUnstarRepoForAuthenticatedUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityUnstarRepoForAuthenticatedUserParamSchema,
      void,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityUnstarRepoForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityUnstarRepoForAuthenticatedUser
  }
)

const activityListWatchedReposForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListWatchedReposForAuthenticatedUser",
  "/user/subscriptions",
  queryValidationFactory<ActivityListWatchedReposForAuthenticatedUserQuerySchema>(
    activityListWatchedReposForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      void,
      ActivityListWatchedReposForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListWatchedReposForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListWatchedReposForAuthenticatedUser
  }
)

const teamsListForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "teamsListForAuthenticatedUser",
  "/user/teams",
  queryValidationFactory<TeamsListForAuthenticatedUserQuerySchema>(
    teamsListForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<void, TeamsListForAuthenticatedUserQuerySchema, void>,
    next
  ) => {
    //region safe-edit-region-teamsListForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-teamsListForAuthenticatedUser
  }
)

const migrationsListReposForUserParamSchema = joi
  .object()
  .keys({ migration_id: joi.number().required() })
  .required()

const migrationsListReposForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "migrationsListReposForUser",
  "/user/:migrationId/repositories",
  paramValidationFactory<MigrationsListReposForUserParamSchema>(
    migrationsListReposForUserParamSchema
  ),
  queryValidationFactory<MigrationsListReposForUserQuerySchema>(
    migrationsListReposForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      MigrationsListReposForUserParamSchema,
      MigrationsListReposForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-migrationsListReposForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-migrationsListReposForUser
  }
)

const usersListQuerySchema = joi
  .object()
  .keys({ since: joi.string() })
  .required()

router.get(
  "usersList",
  "/users",
  queryValidationFactory<UsersListQuerySchema>(usersListQuerySchema),
  async (ctx: ValidatedCtx<void, UsersListQuerySchema, void>, next) => {
    //region safe-edit-region-usersList

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersList
  }
)

const usersGetByUsernameParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

router.get(
  "usersGetByUsername",
  "/users/:username",
  paramValidationFactory<UsersGetByUsernameParamSchema>(
    usersGetByUsernameParamSchema
  ),
  async (
    ctx: ValidatedCtx<UsersGetByUsernameParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-usersGetByUsername

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetByUsername
  }
)

const activityListEventsForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const activityListEventsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListEventsForAuthenticatedUser",
  "/users/:username/events",
  paramValidationFactory<ActivityListEventsForAuthenticatedUserParamSchema>(
    activityListEventsForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<ActivityListEventsForAuthenticatedUserQuerySchema>(
    activityListEventsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListEventsForAuthenticatedUserParamSchema,
      ActivityListEventsForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListEventsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListEventsForAuthenticatedUser
  }
)

const activityListOrgEventsForAuthenticatedUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required(), org: joi.string().required() })
  .required()

const activityListOrgEventsForAuthenticatedUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListOrgEventsForAuthenticatedUser",
  "/users/:username/events/orgs/:org",
  paramValidationFactory<ActivityListOrgEventsForAuthenticatedUserParamSchema>(
    activityListOrgEventsForAuthenticatedUserParamSchema
  ),
  queryValidationFactory<ActivityListOrgEventsForAuthenticatedUserQuerySchema>(
    activityListOrgEventsForAuthenticatedUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListOrgEventsForAuthenticatedUserParamSchema,
      ActivityListOrgEventsForAuthenticatedUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListOrgEventsForAuthenticatedUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListOrgEventsForAuthenticatedUser
  }
)

const activityListPublicEventsForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const activityListPublicEventsForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListPublicEventsForUser",
  "/users/:username/events/public",
  paramValidationFactory<ActivityListPublicEventsForUserParamSchema>(
    activityListPublicEventsForUserParamSchema
  ),
  queryValidationFactory<ActivityListPublicEventsForUserQuerySchema>(
    activityListPublicEventsForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListPublicEventsForUserParamSchema,
      ActivityListPublicEventsForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListPublicEventsForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListPublicEventsForUser
  }
)

const usersListFollowersForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const usersListFollowersForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "usersListFollowersForUser",
  "/users/:username/followers",
  paramValidationFactory<UsersListFollowersForUserParamSchema>(
    usersListFollowersForUserParamSchema
  ),
  queryValidationFactory<UsersListFollowersForUserQuerySchema>(
    usersListFollowersForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      UsersListFollowersForUserParamSchema,
      UsersListFollowersForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-usersListFollowersForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowersForUser
  }
)

const usersListFollowingForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const usersListFollowingForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "usersListFollowingForUser",
  "/users/:username/following",
  paramValidationFactory<UsersListFollowingForUserParamSchema>(
    usersListFollowingForUserParamSchema
  ),
  queryValidationFactory<UsersListFollowingForUserQuerySchema>(
    usersListFollowingForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      UsersListFollowingForUserParamSchema,
      UsersListFollowingForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-usersListFollowingForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListFollowingForUser
  }
)

const usersCheckFollowingForUserParamSchema = joi
  .object()
  .keys({
    username: joi.string().required(),
    target_user: joi.string().required(),
  })
  .required()

router.get(
  "usersCheckFollowingForUser",
  "/users/:username/following/:targetUser",
  paramValidationFactory<UsersCheckFollowingForUserParamSchema>(
    usersCheckFollowingForUserParamSchema
  ),
  async (
    ctx: ValidatedCtx<UsersCheckFollowingForUserParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-usersCheckFollowingForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersCheckFollowingForUser
  }
)

const gistsListForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const gistsListForUserQuerySchema = joi
  .object()
  .keys({ since: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "gistsListForUser",
  "/users/:username/gists",
  paramValidationFactory<GistsListForUserParamSchema>(
    gistsListForUserParamSchema
  ),
  queryValidationFactory<GistsListForUserQuerySchema>(
    gistsListForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      GistsListForUserParamSchema,
      GistsListForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-gistsListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-gistsListForUser
  }
)

const usersListGpgKeysForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const usersListGpgKeysForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "usersListGpgKeysForUser",
  "/users/:username/gpg_keys",
  paramValidationFactory<UsersListGpgKeysForUserParamSchema>(
    usersListGpgKeysForUserParamSchema
  ),
  queryValidationFactory<UsersListGpgKeysForUserQuerySchema>(
    usersListGpgKeysForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      UsersListGpgKeysForUserParamSchema,
      UsersListGpgKeysForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-usersListGpgKeysForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListGpgKeysForUser
  }
)

const usersGetContextForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const usersGetContextForUserQuerySchema = joi
  .object()
  .keys({ subject_type: joi.string(), subject_id: joi.string() })
  .required()

router.get(
  "usersGetContextForUser",
  "/users/:username/hovercard",
  paramValidationFactory<UsersGetContextForUserParamSchema>(
    usersGetContextForUserParamSchema
  ),
  queryValidationFactory<UsersGetContextForUserQuerySchema>(
    usersGetContextForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      UsersGetContextForUserParamSchema,
      UsersGetContextForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-usersGetContextForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersGetContextForUser
  }
)

const appsGetUserInstallationParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

router.get(
  "appsGetUserInstallation",
  "/users/:username/installation",
  paramValidationFactory<AppsGetUserInstallationParamSchema>(
    appsGetUserInstallationParamSchema
  ),
  async (
    ctx: ValidatedCtx<AppsGetUserInstallationParamSchema, void, void>,
    next
  ) => {
    //region safe-edit-region-appsGetUserInstallation

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-appsGetUserInstallation
  }
)

const usersListPublicKeysForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const usersListPublicKeysForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "usersListPublicKeysForUser",
  "/users/:username/keys",
  paramValidationFactory<UsersListPublicKeysForUserParamSchema>(
    usersListPublicKeysForUserParamSchema
  ),
  queryValidationFactory<UsersListPublicKeysForUserQuerySchema>(
    usersListPublicKeysForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      UsersListPublicKeysForUserParamSchema,
      UsersListPublicKeysForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-usersListPublicKeysForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-usersListPublicKeysForUser
  }
)

const orgsListForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const orgsListForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "orgsListForUser",
  "/users/:username/orgs",
  paramValidationFactory<OrgsListForUserParamSchema>(
    orgsListForUserParamSchema
  ),
  queryValidationFactory<OrgsListForUserQuerySchema>(
    orgsListForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      OrgsListForUserParamSchema,
      OrgsListForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-orgsListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-orgsListForUser
  }
)

const projectsListForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const projectsListForUserQuerySchema = joi
  .object()
  .keys({ state: joi.string(), per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "projectsListForUser",
  "/users/:username/projects",
  paramValidationFactory<ProjectsListForUserParamSchema>(
    projectsListForUserParamSchema
  ),
  queryValidationFactory<ProjectsListForUserQuerySchema>(
    projectsListForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ProjectsListForUserParamSchema,
      ProjectsListForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-projectsListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-projectsListForUser
  }
)

const activityListReceivedEventsForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const activityListReceivedEventsForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListReceivedEventsForUser",
  "/users/:username/received_events",
  paramValidationFactory<ActivityListReceivedEventsForUserParamSchema>(
    activityListReceivedEventsForUserParamSchema
  ),
  queryValidationFactory<ActivityListReceivedEventsForUserQuerySchema>(
    activityListReceivedEventsForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListReceivedEventsForUserParamSchema,
      ActivityListReceivedEventsForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListReceivedEventsForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReceivedEventsForUser
  }
)

const activityListReceivedPublicEventsForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const activityListReceivedPublicEventsForUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListReceivedPublicEventsForUser",
  "/users/:username/received_events/public",
  paramValidationFactory<ActivityListReceivedPublicEventsForUserParamSchema>(
    activityListReceivedPublicEventsForUserParamSchema
  ),
  queryValidationFactory<ActivityListReceivedPublicEventsForUserQuerySchema>(
    activityListReceivedPublicEventsForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListReceivedPublicEventsForUserParamSchema,
      ActivityListReceivedPublicEventsForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListReceivedPublicEventsForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReceivedPublicEventsForUser
  }
)

const reposListForUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const reposListForUserQuerySchema = joi
  .object()
  .keys({
    type: joi.string(),
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "reposListForUser",
  "/users/:username/repos",
  paramValidationFactory<ReposListForUserParamSchema>(
    reposListForUserParamSchema
  ),
  queryValidationFactory<ReposListForUserQuerySchema>(
    reposListForUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ReposListForUserParamSchema,
      ReposListForUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-reposListForUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-reposListForUser
  }
)

const activityListReposStarredByUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const activityListReposStarredByUserQuerySchema = joi
  .object()
  .keys({
    sort: joi.string(),
    direction: joi.string(),
    per_page: joi.number(),
    page: joi.number(),
  })
  .required()

router.get(
  "activityListReposStarredByUser",
  "/users/:username/starred",
  paramValidationFactory<ActivityListReposStarredByUserParamSchema>(
    activityListReposStarredByUserParamSchema
  ),
  queryValidationFactory<ActivityListReposStarredByUserQuerySchema>(
    activityListReposStarredByUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListReposStarredByUserParamSchema,
      ActivityListReposStarredByUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListReposStarredByUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReposStarredByUser
  }
)

const activityListReposWatchedByUserParamSchema = joi
  .object()
  .keys({ username: joi.string().required() })
  .required()

const activityListReposWatchedByUserQuerySchema = joi
  .object()
  .keys({ per_page: joi.number(), page: joi.number() })
  .required()

router.get(
  "activityListReposWatchedByUser",
  "/users/:username/subscriptions",
  paramValidationFactory<ActivityListReposWatchedByUserParamSchema>(
    activityListReposWatchedByUserParamSchema
  ),
  queryValidationFactory<ActivityListReposWatchedByUserQuerySchema>(
    activityListReposWatchedByUserQuerySchema
  ),
  async (
    ctx: ValidatedCtx<
      ActivityListReposWatchedByUserParamSchema,
      ActivityListReposWatchedByUserQuerySchema,
      void
    >,
    next
  ) => {
    //region safe-edit-region-activityListReposWatchedByUser

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-activityListReposWatchedByUser
  }
)

server.use(router.allowedMethods())
server.use(router.routes())

server.listen(PORT, () => {
  console.info("server listening", { port: PORT })
})
