/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint:disable */

import {
  t_AddPetBodySchema,
  t_DeletePetParamSchema,
  t_FindPetByIdParamSchema,
  t_FindPetsQuerySchema,
} from "./models"
import cors from "@koa/cors"
import KoaRouter from "@koa/router"
import Koa, { Context, Middleware, Next } from "koa"
import koaBody from "koa-body"
import { ZodSchema, z } from "zod"

//region safe-edit-region-header
//endregion safe-edit-region-header

function paramValidationFactory<Type>(
  schema: ZodSchema
): Middleware<{ params: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.safeParse(ctx.params)

    if (!result.success) {
      throw new Error("validation error")
    }

    ctx.state.params = result.data

    return next()
  }
}

function queryValidationFactory<Type>(
  schema: ZodSchema
): Middleware<{ query: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.safeParse(ctx.query)

    if (!result.success) {
      throw new Error("validation error")
    }

    ctx.state.query = result.data

    return next()
  }
}

function bodyValidationFactory<Type>(
  schema: ZodSchema
): Middleware<{ body: Type }> {
  return async function (ctx: Context, next: Next) {
    const result = schema.safeParse(ctx.request.body)

    if (!result.success) {
      throw new Error("validation error")
    }

    ctx.state.body = result.data

    return next()
  }
}

interface ValidatedCtx<Params, Query, Body> extends Context {
  state: { params: Params; query: Query; body: Body }
}

const PORT = 3000

// ApiClient
const server = new Koa()

server.use(cors())
server.use(koaBody())

const router = new KoaRouter()

const findPetsQuerySchema = z.object({
  tags: z.array(z.coerce.string().optional()).optional(),
  limit: z.coerce.number().optional(),
})

router.get(
  "findPets",
  "/pets",
  queryValidationFactory<t_FindPetsQuerySchema>(findPetsQuerySchema),
  async (ctx: ValidatedCtx<void, t_FindPetsQuerySchema, void>, next: Next) => {
    //region safe-edit-region-findPets

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-findPets
  }
)

const addPetBodySchema = z.object({
  name: z.coerce.string(),
  tag: z.coerce.string().optional(),
})

router.post(
  "addPet",
  "/pets",
  bodyValidationFactory<t_AddPetBodySchema>(addPetBodySchema),
  async (ctx: ValidatedCtx<void, void, t_AddPetBodySchema>, next: Next) => {
    //region safe-edit-region-addPet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-addPet
  }
)

const findPetByIdParamSchema = z.object({ id: z.coerce.number() })

router.get(
  "findPetById",
  "/pets/:id",
  paramValidationFactory<t_FindPetByIdParamSchema>(findPetByIdParamSchema),
  async (
    ctx: ValidatedCtx<t_FindPetByIdParamSchema, void, void>,
    next: Next
  ) => {
    //region safe-edit-region-findPetById

    switch (ctx.state.params.id) {
      case 1: {
        ctx.body = {
          name: "Jake",
          breed: "border-collie",
        }
        ctx.status = 200
        break
      }

      case 2: {
        ctx.body = {
          name: "Lacy",
          breed: "border-collie",
        }
        ctx.status = 200
        break
      }

      default:
        ctx.status = 404
    }

    return next()

    //endregion safe-edit-region-findPetById
  }
)

const deletePetParamSchema = z.object({ id: z.coerce.number() })

router.delete(
  "deletePet",
  "/pets/:id",
  paramValidationFactory<t_DeletePetParamSchema>(deletePetParamSchema),
  async (ctx: ValidatedCtx<t_DeletePetParamSchema, void, void>, next: Next) => {
    //region safe-edit-region-deletePet

    ctx.status = 501
    ctx.body = { error: "not implemented" }
    return next()

    //endregion safe-edit-region-deletePet
  }
)

server.use(router.allowedMethods())
server.use(router.routes())

server.listen(PORT, () => {
  console.info("server listening", { port: PORT })
})
